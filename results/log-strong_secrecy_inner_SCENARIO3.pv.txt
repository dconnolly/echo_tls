PROTOCOL generated_models/strong_secrecy_inner_SCENARIO3.pv
Biprocess 0 (that is, the initial process):
{1}let tls_h: hash_alg = id_hash(StrongHash,1) in
{2}let tls_a: aead_alg = id_aead(StrongAE,1) in
{3}let tls_g: group = id_g(StrongDH,1) in
{4}let ech_h: hash_alg = id_hash(StrongHash,2) in
{5}let ech_a: aead_alg = id_aead(StrongAE,2) in
{6}let ech_g: group = id_g(StrongDH,2) in
(
    {7}!
    {8}in(ch_client_CFIN, (id_client: idProc,cr: bytes32,sr: bytes32,h_alg: hash_alg,a_alg: aead_alg,psk: preSharedKey,s_pkey: pubkey,c_pkey: pubkey,master_secret: bitstring,chk: aead_key,shk: aead_key,cfin: mac_key,sfin: mac_key,cur_log: bitstring));
    {9}let l: label = tls13_client_application_traffic_secret in
    {10}let h: bitstring = catch-fail(hash(h_alg,cur_log)) in
    {11}let v: bool = not-caught-fail(h) in
    {12}let x: bitstring = (if v then (l,h) else caught-fail) in
    {13}let client_ats: bitstring = catch-fail((if v then hmac(h_alg,master_secret,x) else fail-any)) in
    {14}let v_1: bool = not-caught-fail(client_ats) in
    {15}let l_1: label = (if v_1 then tls13_server_application_traffic_secret else caught-fail) in
    {16}let h_1: bitstring = (if v_1 then catch-fail(hash(h_alg,cur_log)) else caught-fail) in
    {17}let v_2: bool = not-caught-fail(h_1) in
    {18}let x_1: bitstring = (if v_2 then (l_1,h_1) else caught-fail) in
    {19}let server_ats: bitstring = (if v_1 then catch-fail((if v_2 then hmac(h_alg,master_secret,x_1) else fail-any)) else caught-fail) in
    {20}let v_3: bool = not-caught-fail(server_ats) in
    {21}let l_2: label = (if v_3 then tls13_exporter_master_secret else caught-fail) in
    {22}let h_2: bitstring = (if v_3 then catch-fail(hash(h_alg,cur_log)) else caught-fail) in
    {23}let v_4: bool = not-caught-fail(h_2) in
    {24}let x_2: bitstring = (if v_4 then (l_2,h_2) else caught-fail) in
    {25}let ems: bitstring = (if v_3 then catch-fail((if v_4 then hmac(h_alg,master_secret,x_2) else fail-any)) else caught-fail) in
    {26}let v_5: bool = not-caught-fail(ems) in
    {27}let l_3: label = (if v_5 then tls13_key else caught-fail) in
    {28}let h_3: bitstring = (if v_5 then zero else caught-fail) in
    {29}let x_3: bitstring = (if v_5 then (l_3,h_3) else caught-fail) in
    {30}let client_wkad: bitstring = (if v_5 then catch-fail(hmac(h_alg,client_ats,x_3)) else caught-fail) in
    {31}let v_6: bool = not-caught-fail(client_wkad) in
    {32}let l_4: label = (if v_6 then tls13_key else caught-fail) in
    {33}let h_4: bitstring = (if v_6 then zero else caught-fail) in
    {34}let x_4: bitstring = (if v_6 then (l_4,h_4) else caught-fail) in
    {35}let server_wkad: bitstring = (if v_6 then catch-fail(hmac(h_alg,server_ats,x_4)) else caught-fail) in
    {36}let v_7: bool = not-caught-fail(server_wkad) in
    {37}let (cak: aead_key,sak: aead_key,ems_1: bitstring) = (if v_1 then (if v_3 then (if v_5 then (if v_6 then (if v_7 then (client_wkad,server_wkad,ems) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {38}let client_hash_msg: bitstring = hmac(h_alg,cfin,cur_log) in
    {39}let client_finished_msg: msg = FIN(client_hash_msg) in
    {40}let cur_log': bitstring = (cur_log,client_finished_msg) in
    {41}let l_5: label = tls13_resumption_master_secret in
    {42}let h_5: bitstring = catch-fail(hash(h_alg,cur_log')) in
    {43}let v_8: bool = not-caught-fail(h_5) in
    {44}let x_5: bitstring = (if v_8 then (l_5,h_5) else caught-fail) in
    {45}let rms: bitstring = (if v_8 then hmac(h_alg,master_secret,x_5) else fail-any) in
    {46}let enc_client_finished_msg: bitstring = aead_enc(a_alg,chk,zero,zero,client_finished_msg) in
    {47}out(io, enc_client_finished_msg);
    {48}event SanityClientCFIN(id_client,cr,sr,psk,master_secret,chk,shk,cfin,sfin,s_pkey,c_pkey,cak,sak,ems_1,rms,cur_log')
) | (
    {49}!
    {50}in(ch_client_FIN, (id_client_1: idProc,cr_1: bytes32,sr_1: bytes32,h_alg_1: hash_alg,a_alg_1: aead_alg,c_dom: domain,psk_1: preSharedKey,cert_req: bool,s_pkey_1: pubkey,master_secret_1: bitstring,chk_1: aead_key,shk_1: aead_key,cfin_1: mac_key,sfin_1: mac_key,cur_log_1: bitstring));
    {51}new st[]: bitstring;
    {52}event PreciseMess(ch_client_FIN,id_client_1,st,master_secret_1);
    {53}in(io, enc_finished_msg: bitstring);
    {54}let finished_msg: msg = aead_dec(a_alg_1,shk_1,zero,zero,enc_finished_msg) in
    (
        {55}let FIN(hash_msg: bitstring) = finished_msg in
        (
            {56}if (hash_msg = hmac(h_alg_1,sfin_1,cur_log_1)) then
            {57}let cur_log2: bitstring = (cur_log_1,finished_msg) in
            {58}if cert_req then
            (
                {70}get long_term_keys(c_dom': domain,sk: privkey,c_pkey_1: pubkey,crt: certificate) in
                {59}event Selected_lgt(c_dom',c_dom,sk,c_pkey_1,crt);
                {60}let certificate_msg: msg = CRT(zero,crt) in
                {61}let encrypted_certificate_msg: bitstring = aead_enc(a_alg_1,chk_1,zero,zero,certificate_msg) in
                {62}out(io, encrypted_certificate_msg);
                {63}let cur_log2_1: bitstring = (cur_log2,certificate_msg) in
                {64}let signed_log: bitstring = sign(sk,hash(h_alg_1,cur_log2_1)) in
                {65}let certificate_verify_msg: msg = CV(signed_log) in
                {66}let encrypted_certificate_verify_msg: bitstring = aead_enc(a_alg_1,chk_1,zero,zero,certificate_verify_msg) in
                {67}out(io, encrypted_certificate_verify_msg);
                {68}let cur_log3: bitstring = (cur_log2_1,certificate_verify_msg) in
                {69}out(ch_client_CFIN, (id_client_1,cr_1,sr_1,h_alg_1,a_alg_1,NoPSK,s_pkey_1,c_pkey_1,master_secret_1,chk_1,shk_1,cfin_1,sfin_1,cur_log3))
            )
            else
                {71}out(ch_client_CFIN, (id_client_1,cr_1,sr_1,h_alg_1,a_alg_1,psk_1,s_pkey_1,NoPubKey,master_secret_1,chk_1,shk_1,cfin_1,sfin_1,cur_log2))
        )
        else
            {72}out(io, unexpected_message)
    )
    else
        {73}out(io, bad_record_mac)
) | (
    {74}!
    {75}in(ch_client_CRT, (id_client_2: idProc,cr_2: bytes32,sr_2: bytes32,h_alg_2: hash_alg,a_alg_2: aead_alg,c_dom_1: domain,s_dom: domain,psk_2: preSharedKey,cert_req_1: bool,master_secret_2: bitstring,chk_2: aead_key,shk_2: aead_key,cfin_2: mac_key,sfin_2: mac_key,cur_log_2: bitstring,certificate_msg_1: msg));
    {76}let CRT(=zero,crt_1: certificate) = certificate_msg_1 in
    {77}let cur_log2_2: bitstring = (cur_log_2,certificate_msg_1) in
    {78}in(io, enc_crt_verif_msg: bitstring);
    {79}let certificate_verify_msg_1: msg = aead_dec(a_alg_2,shk_2,zero,zero,enc_crt_verif_msg) in
    {80}let CV(signed_log_1: bitstring) = certificate_verify_msg_1 in
    {81}if (verify(get_pkey(crt_1),hash(h_alg_2,cur_log2_2),signed_log_1) && ((get_domain(crt_1) = s_dom) && verify_cert(crt_1))) then
    {82}let s_pkey_2: pubkey = get_pkey(crt_1) in
    {83}let cur_log3_1: bitstring = (cur_log2_2,certificate_verify_msg_1) in
    {84}out(ch_client_FIN, (id_client_2,cr_2,sr_2,h_alg_2,a_alg_2,c_dom_1,psk_2,cert_req_1,s_pkey_2,master_secret_2,chk_2,shk_2,cfin_2,sfin_2,cur_log3_1))
) | (
    {85}!
    {86}in(ch_client_after_EE, (id_client_3: idProc,cr_3: bytes32,sr_3: bytes32,h_alg_3: hash_alg,a_alg_3: aead_alg,c_dom_2: domain,s_dom_1: domain,psk_3: preSharedKey,master_secret_3: bitstring,chk_3: aead_key,shk_3: aead_key,cfin_3: mac_key,sfin_3: mac_key,cur_log_3: bitstring));
    {87}new st_1[]: bitstring;
    {88}event PreciseMess(ch_client_after_EE,id_client_3,st_1,master_secret_3);
    {89}if (psk_3 = NoPSK) then
    (
        {90}in(io, enc_msg: bitstring);
        {91}let msg': msg = aead_dec(a_alg_3,shk_3,zero,zero,enc_msg) in
        {92}let CRTR(=zero) = msg' in
        (
            {93}let cur_log2_3: bitstring = (cur_log_3,msg') in
            {94}in(io, enc_crt_msg: bitstring);
            {95}let certificate_msg_2: msg = aead_dec(a_alg_3,shk_3,zero,zero,enc_crt_msg) in
            {96}out(ch_client_CRT, (id_client_3,cr_3,sr_3,h_alg_3,a_alg_3,c_dom_2,s_dom_1,psk_3,true,master_secret_3,chk_3,shk_3,cfin_3,sfin_3,cur_log2_3,certificate_msg_2))
        )
        else
            {97}let CRT(=zero,crt_2: certificate) = msg' in
                {98}out(ch_client_CRT, (id_client_3,cr_3,sr_3,h_alg_3,a_alg_3,c_dom_2,s_dom_1,psk_3,false,master_secret_3,chk_3,shk_3,cfin_3,sfin_3,cur_log_3,msg'))
            else
                {99}out(io, unexpected_message)
    )
    else
        {100}out(ch_client_FIN, (id_client_3,cr_3,sr_3,h_alg_3,a_alg_3,c_dom_2,psk_3,false,NoPubKey,master_secret_3,chk_3,shk_3,cfin_3,sfin_3,cur_log_3))
) | (
    {101}!
    {102}in(ch_server_CFIN, (id_server: idProc,cr_4: bytes32,sr_4: bytes32,h_alg_4: hash_alg,a_alg_4: aead_alg,psk_4: preSharedKey,s_pkey_3: pubkey,c_pkey_2: pubkey,master_secret_4: bitstring,chk_4: aead_key,shk_4: aead_key,cfin_4: mac_key,sfin_4: mac_key,cur_log_4: bitstring));
    {103}in(io, enc_fin: bitstring);
    {104}let fin_msg: msg = aead_dec(a_alg_4,chk_4,zero,zero,enc_fin) in
    {105}let FIN(hash_msg_1: bitstring) = fin_msg in
    {106}if (hash_msg_1 = hmac(h_alg_4,cfin_4,cur_log_4)) then
    {107}let l_6: label = tls13_client_application_traffic_secret in
    {108}let h_6: bitstring = catch-fail(hash(h_alg_4,cur_log_4)) in
    {109}let v_9: bool = not-caught-fail(h_6) in
    {110}let x_6: bitstring = (if v_9 then (l_6,h_6) else caught-fail) in
    {111}let client_ats_1: bitstring = catch-fail((if v_9 then hmac(h_alg_4,master_secret_4,x_6) else fail-any)) in
    {112}let v_10: bool = not-caught-fail(client_ats_1) in
    {113}let l_7: label = (if v_10 then tls13_server_application_traffic_secret else caught-fail) in
    {114}let h_7: bitstring = (if v_10 then catch-fail(hash(h_alg_4,cur_log_4)) else caught-fail) in
    {115}let v_11: bool = not-caught-fail(h_7) in
    {116}let x_7: bitstring = (if v_11 then (l_7,h_7) else caught-fail) in
    {117}let server_ats_1: bitstring = (if v_10 then catch-fail((if v_11 then hmac(h_alg_4,master_secret_4,x_7) else fail-any)) else caught-fail) in
    {118}let v_12: bool = not-caught-fail(server_ats_1) in
    {119}let l_8: label = (if v_12 then tls13_exporter_master_secret else caught-fail) in
    {120}let h_8: bitstring = (if v_12 then catch-fail(hash(h_alg_4,cur_log_4)) else caught-fail) in
    {121}let v_13: bool = not-caught-fail(h_8) in
    {122}let x_8: bitstring = (if v_13 then (l_8,h_8) else caught-fail) in
    {123}let ems_2: bitstring = (if v_12 then catch-fail((if v_13 then hmac(h_alg_4,master_secret_4,x_8) else fail-any)) else caught-fail) in
    {124}let v_14: bool = not-caught-fail(ems_2) in
    {125}let l_9: label = (if v_14 then tls13_key else caught-fail) in
    {126}let h_9: bitstring = (if v_14 then zero else caught-fail) in
    {127}let x_9: bitstring = (if v_14 then (l_9,h_9) else caught-fail) in
    {128}let client_wkad_1: bitstring = (if v_14 then catch-fail(hmac(h_alg_4,client_ats_1,x_9)) else caught-fail) in
    {129}let v_15: bool = not-caught-fail(client_wkad_1) in
    {130}let l_10: label = (if v_15 then tls13_key else caught-fail) in
    {131}let h_10: bitstring = (if v_15 then zero else caught-fail) in
    {132}let x_10: bitstring = (if v_15 then (l_10,h_10) else caught-fail) in
    {133}let server_wkad_1: bitstring = (if v_15 then catch-fail(hmac(h_alg_4,server_ats_1,x_10)) else caught-fail) in
    {134}let v_16: bool = not-caught-fail(server_wkad_1) in
    {135}let (cak_1: aead_key,sak_1: aead_key,ems_3: bitstring) = (if v_10 then (if v_12 then (if v_14 then (if v_15 then (if v_16 then (client_wkad_1,server_wkad_1,ems_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {136}let cur_log_CFIN: bitstring = (cur_log_4,fin_msg) in
    {137}let l_11: label = tls13_resumption_master_secret in
    {138}let h_11: bitstring = catch-fail(hash(h_alg_4,cur_log_CFIN)) in
    {139}let v_17: bool = not-caught-fail(h_11) in
    {140}let x_11: bitstring = (if v_17 then (l_11,h_11) else caught-fail) in
    {141}let rms_1: bitstring = (if v_17 then hmac(h_alg_4,master_secret_4,x_11) else fail-any) in
    {142}event SanityServerCFIN(id_server,cr_4,sr_4,psk_4,master_secret_4,chk_4,shk_4,cfin_4,sfin_4,s_pkey_3,c_pkey_2,cak_1,sak_1,ems_3,rms_1,cur_log_CFIN)
) | (
    {143}!
    {144}in(ch_server_FIN, (id_server_1: idProc,cr_5: bytes32,sr_5: bytes32,h_alg_5: hash_alg,a_alg_5: aead_alg,psk_5: preSharedKey,cert_req_2: bool,s_pkey_4: pubkey,master_secret_5: bitstring,chk_5: aead_key,shk_5: aead_key,cfin_5: mac_key,sfin_5: mac_key,cur_log_5: bitstring));
    {145}let hash_msg_2: bitstring = hmac(h_alg_5,sfin_5,cur_log_5) in
    {146}let finished_msg_1: msg = FIN(hash_msg_2) in
    {147}let enc_finished: bitstring = aead_enc(a_alg_5,shk_5,zero,zero,finished_msg_1) in
    {148}out(io, enc_finished);
    {149}let cur_log_FIN: bitstring = (cur_log_5,finished_msg_1) in
    {150}if ((psk_5 = NoPSK) && cert_req_2) then
    (
        {151}in(io, enc_cert_msg: bitstring);
        {152}let cert_msg: msg = aead_dec(a_alg_5,chk_5,zero,zero,enc_cert_msg) in
        {153}let CRT(=zero,crt_3: certificate) = cert_msg in
        {154}let cur_log_CRT: bitstring = (cur_log_FIN,cert_msg) in
        {155}in(io, enc_cert_verif_msg: bitstring);
        {156}let cert_verify_msg: msg = aead_dec(a_alg_5,chk_5,zero,zero,enc_cert_verif_msg) in
        {157}let CV(signed_log_2: bitstring) = cert_verify_msg in
        {158}if (verify(get_pkey(crt_3),hash(h_alg_5,cur_log_CRT),signed_log_2) && verify_cert(crt_3)) then
        {159}let c_pkey_3: pubkey = get_pkey(crt_3) in
        {160}let cur_log_CV: bitstring = (cur_log_CRT,cert_verify_msg) in
        {161}out(ch_server_CFIN, (id_server_1,cr_5,sr_5,h_alg_5,a_alg_5,psk_5,s_pkey_4,c_pkey_3,master_secret_5,chk_5,shk_5,cfin_5,sfin_5,cur_log_CV))
    )
    else
        {162}out(ch_server_CFIN, (id_server_1,cr_5,sr_5,h_alg_5,a_alg_5,psk_5,s_pkey_4,NoPubKey,master_secret_5,chk_5,shk_5,cfin_5,sfin_5,cur_log_FIN))
) | (
    {163}!
    {164}in(ch_server_CRT, (id_server_2: idProc,cr_6: bytes32,sr_6: bytes32,h_alg_6: hash_alg,a_alg_6: aead_alg,s_dom_2: domain,psk_6: preSharedKey,cert_req_3: bool,master_secret_6: bitstring,chk_6: aead_key,shk_6: aead_key,cfin_6: mac_key,sfin_6: mac_key,cur_log_6: bitstring));
    {165}new st_2[]: bitstring;
    {166}event PreciseMess(ch_server_CRT,id_server_2,st_2,master_secret_6);
    {178}get long_term_keys(s_dom': domain,sk_1: privkey,s_pkey_5: pubkey,crt_4: certificate) in
    {167}event Selected_lgt(s_dom',s_dom_2,sk_1,s_pkey_5,crt_4);
    {168}let certificate_msg_3: msg = CRT(zero,crt_4) in
    {169}let encrypted_certificate_msg_1: bitstring = aead_enc(a_alg_6,shk_6,zero,zero,certificate_msg_3) in
    {170}out(io, encrypted_certificate_msg_1);
    {171}let cur_log_CRT_1: bitstring = (cur_log_6,certificate_msg_3) in
    {172}let signed_log_3: bitstring = sign(sk_1,hash(h_alg_6,cur_log_CRT_1)) in
    {173}let certificate_verify_msg_2: msg = CV(signed_log_3) in
    {174}let encrypted_certificate_verify_msg_1: bitstring = aead_enc(a_alg_6,shk_6,zero,zero,certificate_verify_msg_2) in
    {175}out(io, encrypted_certificate_verify_msg_1);
    {176}let cur_log_CV_1: bitstring = (cur_log_CRT_1,certificate_verify_msg_2) in
    {177}out(ch_server_FIN, (id_server_2,cr_6,sr_6,h_alg_6,a_alg_6,psk_6,cert_req_3,s_pkey_5,master_secret_6,chk_6,shk_6,cfin_6,sfin_6,cur_log_CV_1))
) | (
    {179}!
    {180}in(ch_server_SH, (id_server_3: idProc,use_psk: bool,is_backend: bool,cert_req_4: bool,s_dom_3: domain,g: group,h_alg_7: hash_alg,a_alg_7: aead_alg,s_extra: extraExt,encrypted_ext: bitstring,client_hello: msg,cur_log_7: bitstring));
    {181}new st_3[]: bitstring;
    {182}event PreciseMess(ch_server_SH,id_server_3,st_3,client_hello);
    {183}let CH(cr_7: bytes32,offer: params) = client_hello in
    {184}let nego(=TLS13,=h_alg_7,=a_alg_7,client_kex_ext(DHE_kex(=g,gx: element)),sni_ext: sniExt,ech_ext: echExt,psk_ext: preSharedKeyExt,extra_ext: extraExt) = offer in
    (
        {185}if (not(is_backend) || (ech_ext = ech_is_inner)) then
        (
            {186}if (sni_ext = SNI(s_dom_3)) then
            (
                {187}let v_18: msg = client_hello in
                {188}let v_19: bool = (((TLS13 =nf 1-proj-nego(2-proj-CH(v_18))) && success?(1-proj-nego(2-proj-CH(v_18)))) && success?(1-proj-CH(v_18))) in
                {189}let extra_ext_1: extraExt = (if v_19 then 8-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {190}let psk_ext_1: preSharedKeyExt = (if v_19 then 7-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {191}let ech_ext_1: echExt = (if v_19 then 6-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {192}let sni_ext_1: sniExt = (if v_19 then 5-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {193}let kex_ext: keyShareExt = (if v_19 then 4-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {194}let a_alg_8: aead_alg = (if v_19 then 3-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {195}let h_alg_8: hash_alg = (if v_19 then 2-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {196}let cr_8: bytes32 = (if v_19 then 1-proj-CH(v_18) else caught-fail) in
                {197}let v_20: bitstring = (if v_19 then catch-fail((psk_ext_1,use_psk)) else caught-fail) in
                {198}let v_21: bool = (not-caught-fail(v_20) && ((success?(1-proj-client_psk_ext(1-proj-2-tuple(v_20))) && (true =nf 2-proj-2-tuple(v_20))) && success?(1-proj-2-tuple(v_20)))) in
                {199}let binders: bitstring = (if v_21 then 2-proj-client_psk_ext(1-proj-2-tuple(v_20)) else caught-fail) in
                {200}let id: identityPsk = (if v_21 then 1-proj-client_psk_ext(1-proj-2-tuple(v_20)) else caught-fail) in
                {201}let v_22: bool = (if v_21 then catch-fail(((get_receiver_psk(id) = s_dom_3) && (get_hash_psk(id) = h_alg_8))) else caught-fail) in
                {202}let psk_7: preSharedKey = (if v_22 then catch-fail(PSK(get_ipsk(id))) else caught-fail) in
                {203}let v_23: bool = not-caught-fail(psk_7) in
                {204}let s: bitstring = (if v_23 then zero else caught-fail) in
                {205}let k: bitstring = (if v_23 then catch-fail(psk2b(psk_7)) else caught-fail) in
                {206}let v_24: bool = not-caught-fail(k) in
                {207}let early_secret: bitstring = (if v_23 then catch-fail((if v_24 then hmac(h_alg_8,s,k) else fail-any)) else caught-fail) in
                {208}let v_25: bool = not-caught-fail(early_secret) in
                {209}let l_12: label = (if v_25 then tls13_resumption_psk_binder_key else caught-fail) in
                {210}let m: bitstring = (if v_25 then zero else caught-fail) in
                {211}let h_12: bitstring = (if v_25 then catch-fail(hash(h_alg_8,m)) else caught-fail) in
                {212}let v_26: bool = not-caught-fail(h_12) in
                {213}let x_12: bitstring = (if v_26 then (l_12,h_12) else caught-fail) in
                {214}let binder_key: bitstring = (if v_25 then catch-fail((if v_26 then hmac(h_alg_8,early_secret,x_12) else fail-any)) else caught-fail) in
                {215}let v_27: bool = not-caught-fail(binder_key) in
                {216}let v_28: bitstring = (if v_23 then catch-fail((if v_25 then (if v_27 then (early_secret,binder_key) else fail-any) else fail-any)) else caught-fail) in
                {217}let v_29: bool = (not-caught-fail(v_28) && success?(1-proj-2-tuple(v_28))) in
                {218}let kb: mac_key = (if v_29 then 2-proj-2-tuple(v_28) else caught-fail) in
                {219}let early_secret_1: bitstring = (if v_29 then 1-proj-2-tuple(v_28) else caught-fail) in
                {220}let offer_1: params = (if v_29 then nego(TLS13,h_alg_8,a_alg_8,kex_ext,sni_ext_1,ech_ext_1,trunc_client_psk_ext(id),extra_ext_1) else caught-fail) in
                {221}let cur_log'_1: bitstring = (if v_29 then (cur_log_7,CH(cr_8,offer_1)) else caught-fail) in
                {222}let psk_8: preSharedKey = (if is-false(v_22) then NoPSK else caught-fail) in
                {223}let s_1: bitstring = (if is-false(v_22) then zero else caught-fail) in
                {224}let k_1: bitstring = (if is-false(v_22) then catch-fail(psk2b(psk_8)) else caught-fail) in
                {225}let v_30: bool = not-caught-fail(k_1) in
                {226}let early_secret_2: bitstring = (if is-false(v_22) then catch-fail((if v_30 then hmac(h_alg_8,s_1,k_1) else fail-any)) else caught-fail) in
                {227}let v_31: bool = not-caught-fail(early_secret_2) in
                {228}let l_13: label = (if v_31 then tls13_resumption_psk_binder_key else caught-fail) in
                {229}let m_1: bitstring = (if v_31 then zero else caught-fail) in
                {230}let h_13: bitstring = (if v_31 then catch-fail(hash(h_alg_8,m_1)) else caught-fail) in
                {231}let v_32: bool = not-caught-fail(h_13) in
                {232}let x_13: bitstring = (if v_32 then (l_13,h_13) else caught-fail) in
                {233}let binder_key_1: bitstring = (if v_31 then catch-fail((if v_32 then hmac(h_alg_8,early_secret_2,x_13) else fail-any)) else caught-fail) in
                {234}let v_33: bool = not-caught-fail(binder_key_1) in
                {235}let v_34: bitstring = (if is-false(v_22) then catch-fail((if v_31 then (if v_33 then (early_secret_2,binder_key_1) else fail-any) else fail-any)) else caught-fail) in
                {236}let v_35: bool = (not-caught-fail(v_34) && success?(1-proj-2-tuple(v_34))) in
                {237}let kb_1: mac_key = (if v_35 then 2-proj-2-tuple(v_34) else caught-fail) in
                {238}let es: bitstring = (if v_35 then 1-proj-2-tuple(v_34) else caught-fail) in
                {239}let v_36: bool = (v_19 && not(v_21)) in
                {240}let psk_9: preSharedKey = (if v_36 then NoPSK else caught-fail) in
                {241}let s_2: bitstring = (if v_36 then zero else caught-fail) in
                {242}let k_2: bitstring = (if v_36 then catch-fail(psk2b(psk_9)) else caught-fail) in
                {243}let v_37: bool = not-caught-fail(k_2) in
                {244}let early_secret_3: bitstring = (if v_36 then catch-fail((if v_37 then hmac(h_alg_8,s_2,k_2) else fail-any)) else caught-fail) in
                {245}let v_38: bool = not-caught-fail(early_secret_3) in
                {246}let l_14: label = (if v_38 then tls13_resumption_psk_binder_key else caught-fail) in
                {247}let m_2: bitstring = (if v_38 then zero else caught-fail) in
                {248}let h_14: bitstring = (if v_38 then catch-fail(hash(h_alg_8,m_2)) else caught-fail) in
                {249}let v_39: bool = not-caught-fail(h_14) in
                {250}let x_14: bitstring = (if v_39 then (l_14,h_14) else caught-fail) in
                {251}let binder_key_2: bitstring = (if v_38 then catch-fail((if v_39 then hmac(h_alg_8,early_secret_3,x_14) else fail-any)) else caught-fail) in
                {252}let v_40: bool = not-caught-fail(binder_key_2) in
                {253}let v_41: bitstring = (if v_36 then catch-fail((if v_38 then (if v_40 then (early_secret_3,binder_key_2) else fail-any) else fail-any)) else caught-fail) in
                {254}let v_42: bool = (not-caught-fail(v_41) && success?(1-proj-2-tuple(v_41))) in
                {255}let kb_2: mac_key = (if v_42 then 2-proj-2-tuple(v_41) else caught-fail) in
                {256}let es_1: bitstring = (if v_42 then 1-proj-2-tuple(v_41) else caught-fail) in
                {257}let (early_secret_4: bitstring,s_psk_ext: preSharedKeyExt,psk_10: preSharedKey) = (if v_19 then (if v_21 then (if undo-catch-fail(v_22) then (if v_23 then (if v_29 then (if (binders = hmac(h_alg_8,kb,cur_log'_1)) then (early_secret_1,server_psk_ext(1),psk_7) else fail-any) else fail-any) else fail-any) else (if v_35 then (es,empty_psk_ext,NoPSK) else fail-any)) else (if v_42 then (es_1,empty_psk_ext,NoPSK) else fail-any)) else fail-any) in
                {258}let cur_log_CH: bitstring = (cur_log_7,client_hello) in
                {259}event SanityServerCH(id_server_3,is_backend,cr_7,s_dom_3,psk_10,cur_log_CH);
                {260}new s_3[]: seed;
                {261}let (gxy: element,gy: element) = (dh_xy(s_3,client_hello),dh_encap_fun(g,gx,dh_xy(s_3,client_hello))) in
                {262}let l_15: label = tls13_derived in
                {263}let m_3: bitstring = catch-fail(hash(h_alg_7,zero)) in
                {264}let v_43: bool = not-caught-fail(m_3) in
                {265}let h_15: bitstring = (if v_43 then catch-fail(hash(h_alg_7,m_3)) else caught-fail) in
                {266}let v_44: bool = not-caught-fail(h_15) in
                {267}let x_15: bitstring = (if v_44 then (l_15,h_15) else caught-fail) in
                {268}let extra: bitstring = catch-fail((if v_43 then (if v_44 then hmac(h_alg_7,early_secret_4,x_15) else fail-any) else fail-any)) in
                {269}let v_45: bool = not-caught-fail(extra) in
                {270}let handshake_secret: bitstring = (if v_45 then hmac(h_alg_7,extra,gxy) else fail-any) in
                {271}let s_offer: params = nego(TLS13,h_alg_7,a_alg_7,server_kex_ext(DHE_kex(g,gy)),empty_sni_ext,empty_ech_ext,s_psk_ext,s_extra) in
                {272}let v_46: bool = is_backend in
                {273}new sr24[]: bytes24;
                {274}let SH_ECHConf: msg = (if v_46 then SH(B32(sr24,zero8),s_offer) else caught-fail) in
                {275}let cur_log_SH_ech: bitstring = (if v_46 then (cur_log_CH,SH_ECHConf) else caught-fail) in
                {276}let l_16: label = (if v_46 then ech_accept_confirmation else caught-fail) in
                {277}let h_16: bitstring = (if v_46 then catch-fail(hash(h_alg_7,cur_log_SH_ech)) else caught-fail) in
                {278}let v_47: bool = not-caught-fail(h_16) in
                {279}let x_16: bitstring = (if v_47 then (l_16,h_16) else caught-fail) in
                {280}let accept_confirmation: bitstring = (if v_46 then catch-fail((if v_47 then hmac(h_alg_7,handshake_secret,x_16) else fail-any)) else caught-fail) in
                {281}let v_48: bool = not-caught-fail(accept_confirmation) in
                {282}let sr8: bytes8 = (if v_48 then crop_into_bytes8(accept_confirmation) else caught-fail) in
                {283}new rand24[]: bytes24;
                {284}new rand8[]: bytes8;
                {285}let sr_7: bytes32 = (if v_46 then (if v_48 then B32(sr24,sr8) else fail-any) else B32(rand24,rand8)) in
                {286}let server_hello: msg = SH(sr_7,s_offer) in
                {287}out(io, server_hello);
                {288}let cur_log_SH: bitstring = (cur_log_CH,server_hello) in
                {289}event SanityServerSH(id_server_3,cr_7,sr_7,s_dom_3,handshake_secret,psk_10,cur_log_SH);
                {290}let l_17: label = tls13_derived in
                {291}let m_4: bitstring = catch-fail(hash(h_alg_7,zero)) in
                {292}let v_49: bool = not-caught-fail(m_4) in
                {293}let h_17: bitstring = (if v_49 then catch-fail(hash(h_alg_7,m_4)) else caught-fail) in
                {294}let v_50: bool = not-caught-fail(h_17) in
                {295}let x_17: bitstring = (if v_50 then (l_17,h_17) else caught-fail) in
                {296}let extra_1: bitstring = catch-fail((if v_49 then (if v_50 then hmac(h_alg_7,handshake_secret,x_17) else fail-any) else fail-any)) in
                {297}let v_51: bool = not-caught-fail(extra_1) in
                {298}let k_3: bitstring = (if v_51 then zero else caught-fail) in
                {299}let master_secret_7: bitstring = (if v_51 then catch-fail(hmac(h_alg_7,handshake_secret,k_3)) else caught-fail) in
                {300}let v_52: bool = not-caught-fail(master_secret_7) in
                {301}let l_18: label = (if v_52 then tls13_client_handshake_traffic_secret else caught-fail) in
                {302}let h_18: bitstring = (if v_52 then catch-fail(hash(h_alg_7,cur_log_SH)) else caught-fail) in
                {303}let v_53: bool = not-caught-fail(h_18) in
                {304}let x_18: bitstring = (if v_53 then (l_18,h_18) else caught-fail) in
                {305}let client_hts: bitstring = (if v_52 then catch-fail((if v_53 then hmac(h_alg_7,handshake_secret,x_18) else fail-any)) else caught-fail) in
                {306}let v_54: bool = not-caught-fail(client_hts) in
                {307}let l_19: label = (if v_54 then tls13_server_handshake_traffic_secret else caught-fail) in
                {308}let h_19: bitstring = (if v_54 then catch-fail(hash(h_alg_7,cur_log_SH)) else caught-fail) in
                {309}let v_55: bool = not-caught-fail(h_19) in
                {310}let x_19: bitstring = (if v_55 then (l_19,h_19) else caught-fail) in
                {311}let server_hts: bitstring = (if v_54 then catch-fail((if v_55 then hmac(h_alg_7,handshake_secret,x_19) else fail-any)) else caught-fail) in
                {312}let v_56: bool = not-caught-fail(server_hts) in
                {313}let l_20: label = (if v_56 then tls13_key else caught-fail) in
                {314}let h_20: bitstring = (if v_56 then zero else caught-fail) in
                {315}let x_20: bitstring = (if v_56 then (l_20,h_20) else caught-fail) in
                {316}let client_wkh: bitstring = (if v_56 then catch-fail(hmac(h_alg_7,client_hts,x_20)) else caught-fail) in
                {317}let v_57: bool = not-caught-fail(client_wkh) in
                {318}let l_21: label = (if v_57 then tls13_key else caught-fail) in
                {319}let h_21: bitstring = (if v_57 then zero else caught-fail) in
                {320}let x_21: bitstring = (if v_57 then (l_21,h_21) else caught-fail) in
                {321}let server_wkh: bitstring = (if v_57 then catch-fail(hmac(h_alg_7,server_hts,x_21)) else caught-fail) in
                {322}let v_58: bool = not-caught-fail(server_wkh) in
                {323}let l_22: label = (if v_58 then tls13_finished else caught-fail) in
                {324}let h_22: bitstring = (if v_58 then zero else caught-fail) in
                {325}let x_22: bitstring = (if v_58 then (l_22,h_22) else caught-fail) in
                {326}let client_fk: bitstring = (if v_58 then catch-fail(hmac(h_alg_7,client_hts,x_22)) else caught-fail) in
                {327}let v_59: bool = not-caught-fail(client_fk) in
                {328}let l_23: label = (if v_59 then tls13_finished else caught-fail) in
                {329}let h_23: bitstring = (if v_59 then zero else caught-fail) in
                {330}let x_23: bitstring = (if v_59 then (l_23,h_23) else caught-fail) in
                {331}let server_fk: bitstring = (if v_59 then catch-fail(hmac(h_alg_7,server_hts,x_23)) else caught-fail) in
                {332}let v_60: bool = not-caught-fail(server_fk) in
                {333}let (master_secret_8: bitstring,chk_7: aead_key,shk_7: aead_key,cfin_7: mac_key,sfin_7: mac_key) = (if v_51 then (if v_52 then (if v_54 then (if v_56 then (if v_57 then (if v_58 then (if v_59 then (if v_60 then (master_secret_7,client_wkh,server_wkh,client_fk,server_fk) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                {334}let ee_msg: msg = EE(encrypted_ext) in
                {335}let enc_ee: bitstring = aead_enc(a_alg_7,shk_7,zero,zero,ee_msg) in
                {336}out(io, enc_ee);
                {337}let cur_log_EE: bitstring = (cur_log_SH,ee_msg) in
                {338}if (psk_10 = NoPSK) then
                (
                    {339}if cert_req_4 then
                    (
                        {340}let crtr_msg: msg = CRTR(zero) in
                        {341}let enc_crt: bitstring = aead_enc(a_alg_7,shk_7,zero,zero,crtr_msg) in
                        {342}out(io, enc_crt);
                        {343}let cur_log_CRTR: bitstring = (cur_log_EE,crtr_msg) in
                        {344}out(ch_server_CRT, (id_server_3,cr_7,sr_7,h_alg_7,a_alg_7,s_dom_3,psk_10,cert_req_4,master_secret_8,chk_7,shk_7,cfin_7,sfin_7,cur_log_CRTR))
                    )
                    else
                        {345}out(ch_server_CRT, (id_server_3,cr_7,sr_7,h_alg_7,a_alg_7,s_dom_3,psk_10,cert_req_4,master_secret_8,chk_7,shk_7,cfin_7,sfin_7,cur_log_EE))
                )
                else
                    {346}out(ch_server_FIN, (id_server_3,cr_7,sr_7,h_alg_7,a_alg_7,psk_10,false,NoPubKey,master_secret_8,chk_7,shk_7,cfin_7,sfin_7,cur_log_EE))
            )
            else
                {347}out(io, illegal_parameter)
        )
        else
            {348}out(io, illegal_parameter)
    )
    else
        {349}out(io, handshake_failure)
) | (
    {350}!
    {351}in(io, a: domain);
    {352}event Same(a);
    {353}new s_4: seed;
    {354}let sk_h: privkey = uc_privkey(s_4) in
    {355}event GenCert(a,pk(sk_h));
    {356}insert long_term_keys(a,sk_h,pk(sk_h),valid_cert(a,pk(sk_h)));
    {357}out(io, pk(sk_h))
) | (
    {358}!
    {359}in(io, (c_dom_3: domain,s_dom_4: domain));
    {360}event Same((c_dom_3,s_dom_4));
    {361}new s_5: seed;
    {362}let psk_11: internal_preSharedKey = uc_psk(s_5) in
    {363}let id_1: identityPsk = mk_idpsk(c_dom_3,s_dom_4,tls_h,psk_11) in
    {364}event GenPsk(c_dom_3,s_dom_4,PSK(psk_11));
    {365}insert pre_shared_keys(c_dom_3,s_dom_4,tls_h,id_1,psk_11)
) | (
    {366}!
    {367}in(io, o_dom: domain);
    {368}new id_2: configId;
    {369}new s_6[]: seed;
    {370}let gx_1: element = dh_pub(ech_g,dh_k(s_6)) in
    {371}let (skR: bitstring,pkR: element) = (dh_k(s_6),gx_1) in
    {372}let config: echConfig = ech_config(id_2,ech_g,pkR,o_dom,ech_h,ech_a) in
    {373}insert ech_configurations(config,skR);
    {374}let config_1: echConfig = config in
    {375}out(io, config_1)
) | (
    {376}!
    {380}get pre_shared_keys(c_dom1: domain,s_dom1: domain,h_alg1: hash_alg,id1: identityPsk,psk1: internal_preSharedKey) in
    {379}get pre_shared_keys(c_dom2: domain,s_dom2: domain,h_alg2: hash_alg,id2: identityPsk,psk2: internal_preSharedKey) in
    {377}insert pre_shared_keys(choice[c_dom1,c_dom2],choice[s_dom1,s_dom2],choice[h_alg1,h_alg2],choice[id1,id2],choice[psk1,psk2]);
    {378}insert pre_shared_keys(choice[c_dom2,c_dom1],choice[s_dom2,s_dom1],choice[h_alg1,h_alg2],choice[id2,id1],choice[psk2,psk1])
) | (
    {381}!
    {385}get long_term_keys(dom1: domain,sk1: privkey,pk1: pubkey,cert1: certificate) in
    {384}get long_term_keys(dom2: domain,sk2: privkey,pk2: pubkey,cert2: certificate) in
    {382}insert long_term_keys(choice[dom1,dom2],choice[sk1,sk2],choice[pk1,pk2],choice[cert1,cert2]);
    {383}insert long_term_keys(choice[dom2,dom1],choice[sk2,sk1],choice[pk2,pk1],choice[cert2,cert1])
) | (
    {386}!
    {387}in(io, a_1: domain);
    {388}event Same(a_1);
    {389}new sk_d: privkey;
    {390}out(io, (sk_d,valid_cert(a_1,pk(sk_d))))
) | (
    {391}!
    {392}in(io, (c_dom_4: domain,s_dom_5: domain));
    {393}event Same((c_dom_4,s_dom_5));
    {394}new psk_d: internal_preSharedKey;
    {395}let id_3: identityPsk = mk_idpsk(c_dom_4,s_dom_5,tls_h,psk_d) in
    {396}insert pre_shared_keys(c_dom_4,s_dom_5,tls_h,id_3,psk_d);
    {397}out(io, id_3)
) | (
    {398}!
    {399}let use_psk_1: bool = false in
    {400}let send_kex: bool = true in
    {401}in(io, (c_dom_5: domain,s_dom_6: domain));
    {402}event Same((use_psk_1,send_kex,c_dom_5,s_dom_6));
    {403}let extra_2: extraExt = empty_extra_ext in
    {404}new id_client_4[]: idProc;
    {405}event SanityClient(id_client_4,false,false,use_psk_1,send_kex);
    {406}let cur_log_8: bitstring = zero in
    {407}new rand24_1[]: bytes24;
    {408}new rand8_1[]: bytes8;
    {409}let cr_9: bytes32 = B32(rand24_1,rand8_1) in
    {410}new s_7[]: seed;
    {411}let gx_2: element = dh_pub(tls_g,dh_k(s_7)) in
    {412}let v_61: bitstring = (dh_k(s_7),gx_2) in
    {413}let v_62: bool = success?(1-proj-2-tuple(v_61)) in
    {414}let gx_3: element = (if v_62 then 2-proj-2-tuple(v_61) else caught-fail) in
    {415}let x_24: bitstring = (if v_62 then 1-proj-2-tuple(v_61) else caught-fail) in
    {416}let kex: kex_alg = (if v_62 then (if send_kex then DHE_kex(tls_g,gx_3) else DHE_group(tls_g)) else caught-fail) in
    {417}let (kex_ext_1: keyShareExt,kex_data: bitstring) = (if v_62 then (client_kex_ext(kex),(x_24,tls_g,send_kex)) else fail-any) in
    {418}let ech_ext_2: echExt = empty_ech_ext in
    {738}get pre_shared_keys(c_dom'_1: domain,s_dom'_1: domain,=tls_h,id_4: identityPsk,internal_psk: internal_preSharedKey) in
    {419}event Selected_psk(c_dom_5,c_dom'_1,s_dom_6,s_dom'_1,id_4,internal_psk);
    {420}let v_63: bool = use_psk_1 in
    {421}let psk_12: preSharedKey = (if v_63 then PSK(internal_psk) else caught-fail) in
    {422}let offer_2: params = (if v_63 then nego(TLS13,tls_h,tls_a,kex_ext_1,SNI(s_dom_6),ech_ext_2,trunc_client_psk_ext(id_4),extra_2) else caught-fail) in
    {423}let cur_log'_2: bitstring = (if v_63 then (cur_log_8,CH(cr_9,offer_2)) else caught-fail) in
    {424}let s_8: bitstring = (if v_63 then zero else caught-fail) in
    {425}let k_4: bitstring = (if v_63 then catch-fail(psk2b(psk_12)) else caught-fail) in
    {426}let v_64: bool = not-caught-fail(k_4) in
    {427}let early_secret_5: bitstring = (if v_63 then catch-fail((if v_64 then hmac(tls_h,s_8,k_4) else fail-any)) else caught-fail) in
    {428}let v_65: bool = not-caught-fail(early_secret_5) in
    {429}let l_24: label = (if v_65 then tls13_resumption_psk_binder_key else caught-fail) in
    {430}let m_5: bitstring = (if v_65 then zero else caught-fail) in
    {431}let h_24: bitstring = (if v_65 then catch-fail(hash(tls_h,m_5)) else caught-fail) in
    {432}let v_66: bool = not-caught-fail(h_24) in
    {433}let x_25: bitstring = (if v_66 then (l_24,h_24) else caught-fail) in
    {434}let binder_key_3: bitstring = (if v_65 then catch-fail((if v_66 then hmac(tls_h,early_secret_5,x_25) else fail-any)) else caught-fail) in
    {435}let v_67: bool = not-caught-fail(binder_key_3) in
    {436}let v_68: bitstring = (if v_63 then catch-fail((if v_65 then (if v_67 then (early_secret_5,binder_key_3) else fail-any) else fail-any)) else caught-fail) in
    {437}let v_69: bool = (not-caught-fail(v_68) && success?(1-proj-2-tuple(v_68))) in
    {438}let kb_3: mac_key = (if v_69 then 2-proj-2-tuple(v_68) else caught-fail) in
    {439}let es_2: bitstring = (if v_69 then 1-proj-2-tuple(v_68) else caught-fail) in
    {440}let binders_1: bitstring = (if v_69 then catch-fail(hmac(tls_h,kb_3,cur_log'_2)) else caught-fail) in
    {441}let v_70: bool = not-caught-fail(binders_1) in
    {442}let psk_13: preSharedKey = (if not(v_63) then NoPSK else caught-fail) in
    {443}let s_9: bitstring = (if not(v_63) then zero else caught-fail) in
    {444}let k_5: bitstring = (if not(v_63) then catch-fail(psk2b(psk_13)) else caught-fail) in
    {445}let v_71: bool = not-caught-fail(k_5) in
    {446}let early_secret_6: bitstring = (if not(v_63) then catch-fail((if v_71 then hmac(tls_h,s_9,k_5) else fail-any)) else caught-fail) in
    {447}let v_72: bool = not-caught-fail(early_secret_6) in
    {448}let l_25: label = (if v_72 then tls13_resumption_psk_binder_key else caught-fail) in
    {449}let m_6: bitstring = (if v_72 then zero else caught-fail) in
    {450}let h_25: bitstring = (if v_72 then catch-fail(hash(tls_h,m_6)) else caught-fail) in
    {451}let v_73: bool = not-caught-fail(h_25) in
    {452}let x_26: bitstring = (if v_73 then (l_25,h_25) else caught-fail) in
    {453}let binder_key_4: bitstring = (if v_72 then catch-fail((if v_73 then hmac(tls_h,early_secret_6,x_26) else fail-any)) else caught-fail) in
    {454}let v_74: bool = not-caught-fail(binder_key_4) in
    {455}let v_75: bitstring = (if not(v_63) then catch-fail((if v_72 then (if v_74 then (early_secret_6,binder_key_4) else fail-any) else fail-any)) else caught-fail) in
    {456}let v_76: bool = (not-caught-fail(v_75) && success?(1-proj-2-tuple(v_75))) in
    {457}let kb_4: mac_key = (if v_76 then 2-proj-2-tuple(v_75) else caught-fail) in
    {458}let es_3: bitstring = (if v_76 then 1-proj-2-tuple(v_75) else caught-fail) in
    {459}let v_77: bitstring = catch-fail((if v_63 then (if v_69 then (if v_70 then (client_psk_ext(id_4,binders_1),(tls_h,psk_12,es_2)) else fail-any) else fail-any) else (if v_76 then (empty_psk_ext,(tls_h,NoPSK,es_3)) else fail-any))) in
    {460}let v_78: bool = (not-caught-fail(v_77) && success?(1-proj-2-tuple(v_77))) in
    {461}let psk_data: bitstring = (if v_78 then 2-proj-2-tuple(v_77) else caught-fail) in
    {462}let psk_ext_2: preSharedKeyExt = (if v_78 then 1-proj-2-tuple(v_77) else caught-fail) in
    {463}let offer_3: params = (if v_78 then nego(TLS13,tls_h,tls_a,kex_ext_1,SNI(s_dom_6),empty_ech_ext,psk_ext_2,extra_2) else caught-fail) in
    {464}let (client_hello_1: msg,cr_10: bytes32,kex_ext_2: keyShareExt,kex_data_1: bitstring,psk_data_1: bitstring) = (if v_78 then (CH(cr_9,offer_3),cr_9,kex_ext_1,kex_data,psk_data) else fail-any) in
    {465}out(io, client_hello_1);
    {466}let cur_log2_4: bitstring = (cur_log_8,client_hello_1) in
    {467}let (=tls_h,psk_14: preSharedKey,es_4: bitstring) = psk_data_1 in
    {468}event SanityClientCH(id_client_4,zero32,cr_10,c_dom_5,s_dom_6,psk_14,cur_log2_4);
    {469}in(io, server_hello_1: msg);
    {470}let SH(sr_8: bytes32,mode: params) = server_hello_1 in
    (
        {471}if (sr_8 = rand_HelloRetryRequest) then
        (
            {472}let (nego(=TLS13,=tls_h,=tls_a,hrr_kex_ext(=tls_g),=empty_sni_ext,=empty_ech_ext,=empty_psk_ext,srv_extra: extraExt),=false) = (mode,send_kex) in
            (
                {473}let cur_log3_2: bitstring = (cur_log2_4,server_hello_1) in
                {474}event SanityClientHRR(id_client_4,cr_10,c_dom_5,s_dom_6,cur_log3_2);
                {475}let send_kex_1: bool = true in
                {476}new rand24_2[]: bytes24;
                {477}new rand8_2[]: bytes8;
                {478}let cr_11: bytes32 = B32(rand24_2,rand8_2) in
                {479}new s_10[]: seed;
                {480}let gx_4: element = dh_pub(tls_g,dh_k(s_10)) in
                {481}let v_79: bitstring = (dh_k(s_10),gx_4) in
                {482}let v_80: bool = success?(1-proj-2-tuple(v_79)) in
                {483}let gx_5: element = (if v_80 then 2-proj-2-tuple(v_79) else caught-fail) in
                {484}let x_27: bitstring = (if v_80 then 1-proj-2-tuple(v_79) else caught-fail) in
                {485}let kex_1: kex_alg = (if v_80 then (if send_kex_1 then DHE_kex(tls_g,gx_5) else DHE_group(tls_g)) else caught-fail) in
                {486}let (kex_ext_3: keyShareExt,kex_data_2: bitstring) = (if v_80 then (client_kex_ext(kex_1),(x_27,tls_g,send_kex_1)) else fail-any) in
                {487}let ech_ext_3: echExt = empty_ech_ext in
                {638}get pre_shared_keys(c_dom'_2: domain,s_dom'_2: domain,=tls_h,id_5: identityPsk,internal_psk_1: internal_preSharedKey) in
                {488}event Selected_psk(c_dom_5,c_dom'_2,s_dom_6,s_dom'_2,id_5,internal_psk_1);
                {489}let v_81: bool = use_psk_1 in
                {490}let psk_15: preSharedKey = (if v_81 then PSK(internal_psk_1) else caught-fail) in
                {491}let offer_4: params = (if v_81 then nego(TLS13,tls_h,tls_a,kex_ext_3,SNI(s_dom_6),ech_ext_3,trunc_client_psk_ext(id_5),extra_2) else caught-fail) in
                {492}let cur_log'_3: bitstring = (if v_81 then (cur_log3_2,CH(cr_11,offer_4)) else caught-fail) in
                {493}let s_11: bitstring = (if v_81 then zero else caught-fail) in
                {494}let k_6: bitstring = (if v_81 then catch-fail(psk2b(psk_15)) else caught-fail) in
                {495}let v_82: bool = not-caught-fail(k_6) in
                {496}let early_secret_7: bitstring = (if v_81 then catch-fail((if v_82 then hmac(tls_h,s_11,k_6) else fail-any)) else caught-fail) in
                {497}let v_83: bool = not-caught-fail(early_secret_7) in
                {498}let l_26: label = (if v_83 then tls13_resumption_psk_binder_key else caught-fail) in
                {499}let m_7: bitstring = (if v_83 then zero else caught-fail) in
                {500}let h_26: bitstring = (if v_83 then catch-fail(hash(tls_h,m_7)) else caught-fail) in
                {501}let v_84: bool = not-caught-fail(h_26) in
                {502}let x_28: bitstring = (if v_84 then (l_26,h_26) else caught-fail) in
                {503}let binder_key_5: bitstring = (if v_83 then catch-fail((if v_84 then hmac(tls_h,early_secret_7,x_28) else fail-any)) else caught-fail) in
                {504}let v_85: bool = not-caught-fail(binder_key_5) in
                {505}let v_86: bitstring = (if v_81 then catch-fail((if v_83 then (if v_85 then (early_secret_7,binder_key_5) else fail-any) else fail-any)) else caught-fail) in
                {506}let v_87: bool = (not-caught-fail(v_86) && success?(1-proj-2-tuple(v_86))) in
                {507}let kb_5: mac_key = (if v_87 then 2-proj-2-tuple(v_86) else caught-fail) in
                {508}let es_5: bitstring = (if v_87 then 1-proj-2-tuple(v_86) else caught-fail) in
                {509}let binders_2: bitstring = (if v_87 then catch-fail(hmac(tls_h,kb_5,cur_log'_3)) else caught-fail) in
                {510}let v_88: bool = not-caught-fail(binders_2) in
                {511}let psk_16: preSharedKey = (if not(v_81) then NoPSK else caught-fail) in
                {512}let s_12: bitstring = (if not(v_81) then zero else caught-fail) in
                {513}let k_7: bitstring = (if not(v_81) then catch-fail(psk2b(psk_16)) else caught-fail) in
                {514}let v_89: bool = not-caught-fail(k_7) in
                {515}let early_secret_8: bitstring = (if not(v_81) then catch-fail((if v_89 then hmac(tls_h,s_12,k_7) else fail-any)) else caught-fail) in
                {516}let v_90: bool = not-caught-fail(early_secret_8) in
                {517}let l_27: label = (if v_90 then tls13_resumption_psk_binder_key else caught-fail) in
                {518}let m_8: bitstring = (if v_90 then zero else caught-fail) in
                {519}let h_27: bitstring = (if v_90 then catch-fail(hash(tls_h,m_8)) else caught-fail) in
                {520}let v_91: bool = not-caught-fail(h_27) in
                {521}let x_29: bitstring = (if v_91 then (l_27,h_27) else caught-fail) in
                {522}let binder_key_6: bitstring = (if v_90 then catch-fail((if v_91 then hmac(tls_h,early_secret_8,x_29) else fail-any)) else caught-fail) in
                {523}let v_92: bool = not-caught-fail(binder_key_6) in
                {524}let v_93: bitstring = (if not(v_81) then catch-fail((if v_90 then (if v_92 then (early_secret_8,binder_key_6) else fail-any) else fail-any)) else caught-fail) in
                {525}let v_94: bool = (not-caught-fail(v_93) && success?(1-proj-2-tuple(v_93))) in
                {526}let kb_6: mac_key = (if v_94 then 2-proj-2-tuple(v_93) else caught-fail) in
                {527}let es_6: bitstring = (if v_94 then 1-proj-2-tuple(v_93) else caught-fail) in
                {528}let v_95: bitstring = catch-fail((if v_81 then (if v_87 then (if v_88 then (client_psk_ext(id_5,binders_2),(tls_h,psk_15,es_5)) else fail-any) else fail-any) else (if v_94 then (empty_psk_ext,(tls_h,NoPSK,es_6)) else fail-any))) in
                {529}let v_96: bool = (not-caught-fail(v_95) && success?(1-proj-2-tuple(v_95))) in
                {530}let psk_data_2: bitstring = (if v_96 then 2-proj-2-tuple(v_95) else caught-fail) in
                {531}let psk_ext_3: preSharedKeyExt = (if v_96 then 1-proj-2-tuple(v_95) else caught-fail) in
                {532}let offer_5: params = (if v_96 then nego(TLS13,tls_h,tls_a,kex_ext_3,SNI(s_dom_6),empty_ech_ext,psk_ext_3,extra_2) else caught-fail) in
                {533}let (client_hello': msg,cr': bytes32,kex_ext': keyShareExt,kex_data': bitstring,psk_data': bitstring) = (if v_96 then (CH(cr_11,offer_5),cr_11,kex_ext_3,kex_data_2,psk_data_2) else fail-any) in
                {534}out(io, client_hello');
                {535}let cur_log4: bitstring = (cur_log3_2,client_hello') in
                {536}let (=tls_h,psk': preSharedKey,es': bitstring) = psk_data' in
                {537}event SanityClientCH(id_client_4,cr_10,cr',c_dom_5,s_dom_6,psk',cur_log4);
                {538}in(io, server_hello': msg);
                {539}let SH(sr': bytes32,mode': params) = server_hello' in
                (
                    {540}if (sr' = rand_HelloRetryRequest) then
                        {541}out(io, unexpected_message)
                    else
                        {542}let id_client_5: idProc = id_client_4 in
                        {543}let SH(sr_9: bytes32,mode_1: params) = server_hello' in
                        {544}let (x_30: bitstring,g_1: group,=true) = kex_data' in
                        {545}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_1,gy_1: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_4: preSharedKeyExt,extra_3: extraExt) = mode_1 in
                        (
                            {546}let cur_log2_5: bitstring = (cur_log4,server_hello') in
                            {547}let v_97: bool = (psk_ext_4 = empty_psk_ext) in
                            {548}let psk_17: preSharedKey = (if v_97 then NoPSK else caught-fail) in
                            {549}let s_13: bitstring = (if v_97 then zero else caught-fail) in
                            {550}let k_8: bitstring = (if v_97 then catch-fail(psk2b(psk_17)) else caught-fail) in
                            {551}let v_98: bool = not-caught-fail(k_8) in
                            {552}let early_secret_9: bitstring = (if v_97 then catch-fail((if v_98 then hmac(tls_h,s_13,k_8) else fail-any)) else caught-fail) in
                            {553}let v_99: bool = not-caught-fail(early_secret_9) in
                            {554}let l_28: label = (if v_99 then tls13_resumption_psk_binder_key else caught-fail) in
                            {555}let m_9: bitstring = (if v_99 then zero else caught-fail) in
                            {556}let h_28: bitstring = (if v_99 then catch-fail(hash(tls_h,m_9)) else caught-fail) in
                            {557}let v_100: bool = not-caught-fail(h_28) in
                            {558}let x_31: bitstring = (if v_100 then (l_28,h_28) else caught-fail) in
                            {559}let binder_key_7: bitstring = (if v_99 then catch-fail((if v_100 then hmac(tls_h,early_secret_9,x_31) else fail-any)) else caught-fail) in
                            {560}let v_101: bool = not-caught-fail(binder_key_7) in
                            {561}let v_102: bitstring = (if v_97 then catch-fail((if v_99 then (if v_101 then (early_secret_9,binder_key_7) else fail-any) else fail-any)) else caught-fail) in
                            {562}let v_103: bool = (not-caught-fail(v_102) && success?(1-proj-2-tuple(v_102))) in
                            {563}let kb_7: mac_key = (if v_103 then 2-proj-2-tuple(v_102) else caught-fail) in
                            {564}let es_7: bitstring = (if v_103 then 1-proj-2-tuple(v_102) else caught-fail) in
                            {565}let v_104: bitstring = (if not(v_97) then catch-fail(psk_data') else caught-fail) in
                            {566}let v_105: bool = (not-caught-fail(v_104) && success?(1-proj-3-tuple(v_104))) in
                            {567}let es_8: bitstring = (if v_105 then 3-proj-3-tuple(v_104) else caught-fail) in
                            {568}let psk_18: preSharedKey = (if v_105 then 2-proj-3-tuple(v_104) else caught-fail) in
                            {569}let h'_alg: hash_alg = (if v_105 then 1-proj-3-tuple(v_104) else caught-fail) in
                            {570}let (psk_19: preSharedKey,early_secret_10: bitstring,valid: bool) = (if v_97 then (if v_103 then (NoPSK,es_7,true) else fail-any) else (if v_105 then (psk_18,es_8,((h'_alg = tls_h) && ((server_psk_ext(1) = psk_ext_4) && use_psk_1))) else fail-any)) in
                            {571}if valid then
                            (
                                {572}let gxy_1: element = catch-fail(dh_decap_fun(g_1,gy_1,x_30)) in
                                {573}let v_106: bool = not-caught-fail(gxy_1) in
                                {574}new s_14[]: seed;
                                {575}let gxy_2: element = (if v_106 then gxy_1 else dh_f(s_14)) in
                                {576}let l_29: label = tls13_derived in
                                {577}let m_10: bitstring = catch-fail(hash(tls_h,zero)) in
                                {578}let v_107: bool = not-caught-fail(m_10) in
                                {579}let h_29: bitstring = (if v_107 then catch-fail(hash(tls_h,m_10)) else caught-fail) in
                                {580}let v_108: bool = not-caught-fail(h_29) in
                                {581}let x_32: bitstring = (if v_108 then (l_29,h_29) else caught-fail) in
                                {582}let extra_4: bitstring = catch-fail((if v_107 then (if v_108 then hmac(tls_h,early_secret_10,x_32) else fail-any) else fail-any)) in
                                {583}let v_109: bool = not-caught-fail(extra_4) in
                                {584}let handshake_secret_1: bitstring = (if v_109 then hmac(tls_h,extra_4,gxy_2) else fail-any) in
                                {585}event SanityClientSH(id_client_5,cr',sr_9,c_dom_5,s_dom_6,handshake_secret_1,psk_19,cur_log2_5);
                                {586}let l_30: label = tls13_derived in
                                {587}let m_11: bitstring = catch-fail(hash(tls_h,zero)) in
                                {588}let v_110: bool = not-caught-fail(m_11) in
                                {589}let h_30: bitstring = (if v_110 then catch-fail(hash(tls_h,m_11)) else caught-fail) in
                                {590}let v_111: bool = not-caught-fail(h_30) in
                                {591}let x_33: bitstring = (if v_111 then (l_30,h_30) else caught-fail) in
                                {592}let extra_5: bitstring = catch-fail((if v_110 then (if v_111 then hmac(tls_h,handshake_secret_1,x_33) else fail-any) else fail-any)) in
                                {593}let v_112: bool = not-caught-fail(extra_5) in
                                {594}let k_9: bitstring = (if v_112 then zero else caught-fail) in
                                {595}let master_secret_9: bitstring = (if v_112 then catch-fail(hmac(tls_h,handshake_secret_1,k_9)) else caught-fail) in
                                {596}let v_113: bool = not-caught-fail(master_secret_9) in
                                {597}let l_31: label = (if v_113 then tls13_client_handshake_traffic_secret else caught-fail) in
                                {598}let h_31: bitstring = (if v_113 then catch-fail(hash(tls_h,cur_log2_5)) else caught-fail) in
                                {599}let v_114: bool = not-caught-fail(h_31) in
                                {600}let x_34: bitstring = (if v_114 then (l_31,h_31) else caught-fail) in
                                {601}let client_hts_1: bitstring = (if v_113 then catch-fail((if v_114 then hmac(tls_h,handshake_secret_1,x_34) else fail-any)) else caught-fail) in
                                {602}let v_115: bool = not-caught-fail(client_hts_1) in
                                {603}let l_32: label = (if v_115 then tls13_server_handshake_traffic_secret else caught-fail) in
                                {604}let h_32: bitstring = (if v_115 then catch-fail(hash(tls_h,cur_log2_5)) else caught-fail) in
                                {605}let v_116: bool = not-caught-fail(h_32) in
                                {606}let x_35: bitstring = (if v_116 then (l_32,h_32) else caught-fail) in
                                {607}let server_hts_1: bitstring = (if v_115 then catch-fail((if v_116 then hmac(tls_h,handshake_secret_1,x_35) else fail-any)) else caught-fail) in
                                {608}let v_117: bool = not-caught-fail(server_hts_1) in
                                {609}let l_33: label = (if v_117 then tls13_key else caught-fail) in
                                {610}let h_33: bitstring = (if v_117 then zero else caught-fail) in
                                {611}let x_36: bitstring = (if v_117 then (l_33,h_33) else caught-fail) in
                                {612}let client_wkh_1: bitstring = (if v_117 then catch-fail(hmac(tls_h,client_hts_1,x_36)) else caught-fail) in
                                {613}let v_118: bool = not-caught-fail(client_wkh_1) in
                                {614}let l_34: label = (if v_118 then tls13_key else caught-fail) in
                                {615}let h_34: bitstring = (if v_118 then zero else caught-fail) in
                                {616}let x_37: bitstring = (if v_118 then (l_34,h_34) else caught-fail) in
                                {617}let server_wkh_1: bitstring = (if v_118 then catch-fail(hmac(tls_h,server_hts_1,x_37)) else caught-fail) in
                                {618}let v_119: bool = not-caught-fail(server_wkh_1) in
                                {619}let l_35: label = (if v_119 then tls13_finished else caught-fail) in
                                {620}let h_35: bitstring = (if v_119 then zero else caught-fail) in
                                {621}let x_38: bitstring = (if v_119 then (l_35,h_35) else caught-fail) in
                                {622}let client_fk_1: bitstring = (if v_119 then catch-fail(hmac(tls_h,client_hts_1,x_38)) else caught-fail) in
                                {623}let v_120: bool = not-caught-fail(client_fk_1) in
                                {624}let l_36: label = (if v_120 then tls13_finished else caught-fail) in
                                {625}let h_36: bitstring = (if v_120 then zero else caught-fail) in
                                {626}let x_39: bitstring = (if v_120 then (l_36,h_36) else caught-fail) in
                                {627}let server_fk_1: bitstring = (if v_120 then catch-fail(hmac(tls_h,server_hts_1,x_39)) else caught-fail) in
                                {628}let v_121: bool = not-caught-fail(server_fk_1) in
                                {629}let (master_secret_10: bitstring,chk_8: aead_key,shk_8: aead_key,cfin_8: mac_key,sfin_8: mac_key) = (if v_112 then (if v_113 then (if v_115 then (if v_117 then (if v_118 then (if v_119 then (if v_120 then (if v_121 then (master_secret_9,client_wkh_1,server_wkh_1,client_fk_1,server_fk_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                {630}in(io, enc_ee_msg: bitstring);
                                {631}let ee_msg_1: msg = aead_dec(tls_a,shk_8,zero,zero,enc_ee_msg) in
                                {632}let EE(x_40: bitstring) = ee_msg_1 in
                                {633}let cur_log2_6: bitstring = (cur_log2_5,ee_msg_1) in
                                {634}out(ch_client_after_EE, (id_client_5,cr',sr_9,tls_h,tls_a,c_dom_5,s_dom_6,psk_19,master_secret_10,chk_8,shk_8,cfin_8,sfin_8,cur_log2_6))
                            )
                            else
                                {635}out(io, illegal_parameter)
                        )
                        else
                            {636}out(io, illegal_parameter)
                )
                else
                    {637}out(io, unexpected_message)
            )
            else
                {639}out(io, illegal_parameter)
        )
        else
            {640}if send_kex then
            (
                {641}let id_client_6: idProc = id_client_4 in
                {642}let SH(sr_10: bytes32,mode_2: params) = server_hello_1 in
                {643}let (x_41: bitstring,g_2: group,=true) = kex_data_1 in
                {644}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_2,gy_2: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_5: preSharedKeyExt,extra_6: extraExt) = mode_2 in
                (
                    {645}let cur_log2_7: bitstring = (cur_log2_4,server_hello_1) in
                    {646}let v_122: bool = (psk_ext_5 = empty_psk_ext) in
                    {647}let psk_20: preSharedKey = (if v_122 then NoPSK else caught-fail) in
                    {648}let s_15: bitstring = (if v_122 then zero else caught-fail) in
                    {649}let k_10: bitstring = (if v_122 then catch-fail(psk2b(psk_20)) else caught-fail) in
                    {650}let v_123: bool = not-caught-fail(k_10) in
                    {651}let early_secret_11: bitstring = (if v_122 then catch-fail((if v_123 then hmac(tls_h,s_15,k_10) else fail-any)) else caught-fail) in
                    {652}let v_124: bool = not-caught-fail(early_secret_11) in
                    {653}let l_37: label = (if v_124 then tls13_resumption_psk_binder_key else caught-fail) in
                    {654}let m_12: bitstring = (if v_124 then zero else caught-fail) in
                    {655}let h_37: bitstring = (if v_124 then catch-fail(hash(tls_h,m_12)) else caught-fail) in
                    {656}let v_125: bool = not-caught-fail(h_37) in
                    {657}let x_42: bitstring = (if v_125 then (l_37,h_37) else caught-fail) in
                    {658}let binder_key_8: bitstring = (if v_124 then catch-fail((if v_125 then hmac(tls_h,early_secret_11,x_42) else fail-any)) else caught-fail) in
                    {659}let v_126: bool = not-caught-fail(binder_key_8) in
                    {660}let v_127: bitstring = (if v_122 then catch-fail((if v_124 then (if v_126 then (early_secret_11,binder_key_8) else fail-any) else fail-any)) else caught-fail) in
                    {661}let v_128: bool = (not-caught-fail(v_127) && success?(1-proj-2-tuple(v_127))) in
                    {662}let kb_8: mac_key = (if v_128 then 2-proj-2-tuple(v_127) else caught-fail) in
                    {663}let es_9: bitstring = (if v_128 then 1-proj-2-tuple(v_127) else caught-fail) in
                    {664}let v_129: bitstring = (if not(v_122) then catch-fail(psk_data_1) else caught-fail) in
                    {665}let v_130: bool = (not-caught-fail(v_129) && success?(1-proj-3-tuple(v_129))) in
                    {666}let es_10: bitstring = (if v_130 then 3-proj-3-tuple(v_129) else caught-fail) in
                    {667}let psk_21: preSharedKey = (if v_130 then 2-proj-3-tuple(v_129) else caught-fail) in
                    {668}let h'_alg_1: hash_alg = (if v_130 then 1-proj-3-tuple(v_129) else caught-fail) in
                    {669}let (psk_22: preSharedKey,early_secret_12: bitstring,valid_1: bool) = (if v_122 then (if v_128 then (NoPSK,es_9,true) else fail-any) else (if v_130 then (psk_21,es_10,((h'_alg_1 = tls_h) && ((server_psk_ext(1) = psk_ext_5) && use_psk_1))) else fail-any)) in
                    {670}if valid_1 then
                    (
                        {671}let gxy_3: element = catch-fail(dh_decap_fun(g_2,gy_2,x_41)) in
                        {672}let v_131: bool = not-caught-fail(gxy_3) in
                        {673}new s_16[]: seed;
                        {674}let gxy_4: element = (if v_131 then gxy_3 else dh_f(s_16)) in
                        {675}let l_38: label = tls13_derived in
                        {676}let m_13: bitstring = catch-fail(hash(tls_h,zero)) in
                        {677}let v_132: bool = not-caught-fail(m_13) in
                        {678}let h_38: bitstring = (if v_132 then catch-fail(hash(tls_h,m_13)) else caught-fail) in
                        {679}let v_133: bool = not-caught-fail(h_38) in
                        {680}let x_43: bitstring = (if v_133 then (l_38,h_38) else caught-fail) in
                        {681}let extra_7: bitstring = catch-fail((if v_132 then (if v_133 then hmac(tls_h,early_secret_12,x_43) else fail-any) else fail-any)) in
                        {682}let v_134: bool = not-caught-fail(extra_7) in
                        {683}let handshake_secret_2: bitstring = (if v_134 then hmac(tls_h,extra_7,gxy_4) else fail-any) in
                        {684}event SanityClientSH(id_client_6,cr_10,sr_10,c_dom_5,s_dom_6,handshake_secret_2,psk_22,cur_log2_7);
                        {685}let l_39: label = tls13_derived in
                        {686}let m_14: bitstring = catch-fail(hash(tls_h,zero)) in
                        {687}let v_135: bool = not-caught-fail(m_14) in
                        {688}let h_39: bitstring = (if v_135 then catch-fail(hash(tls_h,m_14)) else caught-fail) in
                        {689}let v_136: bool = not-caught-fail(h_39) in
                        {690}let x_44: bitstring = (if v_136 then (l_39,h_39) else caught-fail) in
                        {691}let extra_8: bitstring = catch-fail((if v_135 then (if v_136 then hmac(tls_h,handshake_secret_2,x_44) else fail-any) else fail-any)) in
                        {692}let v_137: bool = not-caught-fail(extra_8) in
                        {693}let k_11: bitstring = (if v_137 then zero else caught-fail) in
                        {694}let master_secret_11: bitstring = (if v_137 then catch-fail(hmac(tls_h,handshake_secret_2,k_11)) else caught-fail) in
                        {695}let v_138: bool = not-caught-fail(master_secret_11) in
                        {696}let l_40: label = (if v_138 then tls13_client_handshake_traffic_secret else caught-fail) in
                        {697}let h_40: bitstring = (if v_138 then catch-fail(hash(tls_h,cur_log2_7)) else caught-fail) in
                        {698}let v_139: bool = not-caught-fail(h_40) in
                        {699}let x_45: bitstring = (if v_139 then (l_40,h_40) else caught-fail) in
                        {700}let client_hts_2: bitstring = (if v_138 then catch-fail((if v_139 then hmac(tls_h,handshake_secret_2,x_45) else fail-any)) else caught-fail) in
                        {701}let v_140: bool = not-caught-fail(client_hts_2) in
                        {702}let l_41: label = (if v_140 then tls13_server_handshake_traffic_secret else caught-fail) in
                        {703}let h_41: bitstring = (if v_140 then catch-fail(hash(tls_h,cur_log2_7)) else caught-fail) in
                        {704}let v_141: bool = not-caught-fail(h_41) in
                        {705}let x_46: bitstring = (if v_141 then (l_41,h_41) else caught-fail) in
                        {706}let server_hts_2: bitstring = (if v_140 then catch-fail((if v_141 then hmac(tls_h,handshake_secret_2,x_46) else fail-any)) else caught-fail) in
                        {707}let v_142: bool = not-caught-fail(server_hts_2) in
                        {708}let l_42: label = (if v_142 then tls13_key else caught-fail) in
                        {709}let h_42: bitstring = (if v_142 then zero else caught-fail) in
                        {710}let x_47: bitstring = (if v_142 then (l_42,h_42) else caught-fail) in
                        {711}let client_wkh_2: bitstring = (if v_142 then catch-fail(hmac(tls_h,client_hts_2,x_47)) else caught-fail) in
                        {712}let v_143: bool = not-caught-fail(client_wkh_2) in
                        {713}let l_43: label = (if v_143 then tls13_key else caught-fail) in
                        {714}let h_43: bitstring = (if v_143 then zero else caught-fail) in
                        {715}let x_48: bitstring = (if v_143 then (l_43,h_43) else caught-fail) in
                        {716}let server_wkh_2: bitstring = (if v_143 then catch-fail(hmac(tls_h,server_hts_2,x_48)) else caught-fail) in
                        {717}let v_144: bool = not-caught-fail(server_wkh_2) in
                        {718}let l_44: label = (if v_144 then tls13_finished else caught-fail) in
                        {719}let h_44: bitstring = (if v_144 then zero else caught-fail) in
                        {720}let x_49: bitstring = (if v_144 then (l_44,h_44) else caught-fail) in
                        {721}let client_fk_2: bitstring = (if v_144 then catch-fail(hmac(tls_h,client_hts_2,x_49)) else caught-fail) in
                        {722}let v_145: bool = not-caught-fail(client_fk_2) in
                        {723}let l_45: label = (if v_145 then tls13_finished else caught-fail) in
                        {724}let h_45: bitstring = (if v_145 then zero else caught-fail) in
                        {725}let x_50: bitstring = (if v_145 then (l_45,h_45) else caught-fail) in
                        {726}let server_fk_2: bitstring = (if v_145 then catch-fail(hmac(tls_h,server_hts_2,x_50)) else caught-fail) in
                        {727}let v_146: bool = not-caught-fail(server_fk_2) in
                        {728}let (master_secret_12: bitstring,chk_9: aead_key,shk_9: aead_key,cfin_9: mac_key,sfin_9: mac_key) = (if v_137 then (if v_138 then (if v_140 then (if v_142 then (if v_143 then (if v_144 then (if v_145 then (if v_146 then (master_secret_11,client_wkh_2,server_wkh_2,client_fk_2,server_fk_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                        {729}in(io, enc_ee_msg_1: bitstring);
                        {730}let ee_msg_2: msg = aead_dec(tls_a,shk_9,zero,zero,enc_ee_msg_1) in
                        {731}let EE(x_51: bitstring) = ee_msg_2 in
                        {732}let cur_log2_8: bitstring = (cur_log2_7,ee_msg_2) in
                        {733}out(ch_client_after_EE, (id_client_6,cr_10,sr_10,tls_h,tls_a,c_dom_5,s_dom_6,psk_22,master_secret_12,chk_9,shk_9,cfin_9,sfin_9,cur_log2_8))
                    )
                    else
                        {734}out(io, illegal_parameter)
                )
                else
                    {735}out(io, illegal_parameter)
            )
            else
                {736}out(io, illegal_parameter)
    )
    else
        {737}out(io, unexpected_message)
) | (
    {739}!
    {740}in(io, x_52: extraExt);
    {741}in(io, x': extraExt);
    {742}let inner_ext: extraExt = choice[x_52,x'] in
    {743}let use_grease: bool = false in
    {744}let use_psk_2: bool = false in
    {745}let send_kex_2: bool = true in
    {746}in(io, (c_dom_6: domain,cfs_dom: domain,backend_dom: domain));
    {747}event Same((use_grease,use_psk_2,send_kex_2,c_dom_6,cfs_dom,backend_dom));
    {1094}get ech_configurations(ech_config(id_6: configId,g_3: group,pkR_1: element,=cfs_dom,h_alg_9: hash_alg,a_alg_9: aead_alg),skR_1: bitstring) in
    {748}let ech_conf: echConfig = ech_config(id_6,g_3,pkR_1,cfs_dom,h_alg_9,a_alg_9) in
    {749}let o_extra: extraExt = empty_extra_ext in
    {750}new id_client_7[]: idProc;
    {751}event SanityClient(id_client_7,true,use_grease,use_psk_2,send_kex_2);
    {752}if not((use_grease && use_psk_2)) then
    {753}let i_cur_log: bitstring = zero in
    {754}new s_17[]: seed;
    {755}let gx_6: element = dh_pub(tls_g,dh_k(s_17)) in
    {756}let v_147: bitstring = (dh_k(s_17),gx_6) in
    {757}let v_148: bool = success?(1-proj-2-tuple(v_147)) in
    {758}let i_gx: element = (if v_148 then 2-proj-2-tuple(v_147) else caught-fail) in
    {759}let i_x: bitstring = (if v_148 then 1-proj-2-tuple(v_147) else caught-fail) in
    {760}new s_18[]: seed;
    {761}let gx_7: element = (if v_148 then dh_pub(tls_g,dh_k(s_18)) else caught-fail) in
    {762}let v_149: bitstring = (if v_148 then catch-fail((dh_k(s_18),gx_7)) else caught-fail) in
    {763}let v_150: bool = (not-caught-fail(v_149) && success?(1-proj-2-tuple(v_149))) in
    {764}let o_gx: element = (if v_150 then 2-proj-2-tuple(v_149) else caught-fail) in
    {765}let o_x: bitstring = (if v_150 then 1-proj-2-tuple(v_149) else caught-fail) in
    {766}let v_151: bitstring = (if v_150 then catch-fail((if send_kex_2 then (DHE_kex(tls_g,i_gx),DHE_kex(tls_g,o_gx)) else (DHE_group(tls_g),DHE_group(tls_g)))) else caught-fail) in
    {767}let v_152: bool = (not-caught-fail(v_151) && success?(1-proj-2-tuple(v_151))) in
    {768}let o_kex: kex_alg = (if v_152 then 2-proj-2-tuple(v_151) else caught-fail) in
    {769}let i_kex: kex_alg = (if v_152 then 1-proj-2-tuple(v_151) else caught-fail) in
    {770}let (i_kex_ext: keyShareExt,o_kex_ext: keyShareExt,kex_data_3: bitstring) = (if v_148 then (if v_150 then (if v_152 then (client_kex_ext(i_kex),client_kex_ext(o_kex),(i_x,o_x,tls_g,send_kex_2)) else fail-any) else fail-any) else fail-any) in
    {771}new rand24_3[]: bytes24;
    {772}new rand8_3[]: bytes8;
    {773}let i_cr: bytes32 = B32(rand24_3,rand8_3) in
    {774}let ech_ext_4: echExt = ech_is_inner in
    {1093}get pre_shared_keys(c_dom'_3: domain,s_dom'_3: domain,=tls_h,id_7: identityPsk,internal_psk_2: internal_preSharedKey) in
    {775}event Selected_psk(c_dom_6,c_dom'_3,backend_dom,s_dom'_3,id_7,internal_psk_2);
    {776}let v_153: bool = use_psk_2 in
    {777}let psk_23: preSharedKey = (if v_153 then PSK(internal_psk_2) else caught-fail) in
    {778}let offer_6: params = (if v_153 then nego(TLS13,tls_h,tls_a,i_kex_ext,SNI(backend_dom),ech_ext_4,trunc_client_psk_ext(id_7),inner_ext) else caught-fail) in
    {779}let cur_log'_4: bitstring = (if v_153 then (i_cur_log,CH(i_cr,offer_6)) else caught-fail) in
    {780}let s_19: bitstring = (if v_153 then zero else caught-fail) in
    {781}let k_12: bitstring = (if v_153 then catch-fail(psk2b(psk_23)) else caught-fail) in
    {782}let v_154: bool = not-caught-fail(k_12) in
    {783}let early_secret_13: bitstring = (if v_153 then catch-fail((if v_154 then hmac(tls_h,s_19,k_12) else fail-any)) else caught-fail) in
    {784}let v_155: bool = not-caught-fail(early_secret_13) in
    {785}let l_46: label = (if v_155 then tls13_resumption_psk_binder_key else caught-fail) in
    {786}let m_15: bitstring = (if v_155 then zero else caught-fail) in
    {787}let h_46: bitstring = (if v_155 then catch-fail(hash(tls_h,m_15)) else caught-fail) in
    {788}let v_156: bool = not-caught-fail(h_46) in
    {789}let x_53: bitstring = (if v_156 then (l_46,h_46) else caught-fail) in
    {790}let binder_key_9: bitstring = (if v_155 then catch-fail((if v_156 then hmac(tls_h,early_secret_13,x_53) else fail-any)) else caught-fail) in
    {791}let v_157: bool = not-caught-fail(binder_key_9) in
    {792}let v_158: bitstring = (if v_153 then catch-fail((if v_155 then (if v_157 then (early_secret_13,binder_key_9) else fail-any) else fail-any)) else caught-fail) in
    {793}let v_159: bool = (not-caught-fail(v_158) && success?(1-proj-2-tuple(v_158))) in
    {794}let kb_9: mac_key = (if v_159 then 2-proj-2-tuple(v_158) else caught-fail) in
    {795}let es_11: bitstring = (if v_159 then 1-proj-2-tuple(v_158) else caught-fail) in
    {796}let binders_3: bitstring = (if v_159 then catch-fail(hmac(tls_h,kb_9,cur_log'_4)) else caught-fail) in
    {797}let v_160: bool = not-caught-fail(binders_3) in
    {798}let psk_24: preSharedKey = (if not(v_153) then NoPSK else caught-fail) in
    {799}let s_20: bitstring = (if not(v_153) then zero else caught-fail) in
    {800}let k_13: bitstring = (if not(v_153) then catch-fail(psk2b(psk_24)) else caught-fail) in
    {801}let v_161: bool = not-caught-fail(k_13) in
    {802}let early_secret_14: bitstring = (if not(v_153) then catch-fail((if v_161 then hmac(tls_h,s_20,k_13) else fail-any)) else caught-fail) in
    {803}let v_162: bool = not-caught-fail(early_secret_14) in
    {804}let l_47: label = (if v_162 then tls13_resumption_psk_binder_key else caught-fail) in
    {805}let m_16: bitstring = (if v_162 then zero else caught-fail) in
    {806}let h_47: bitstring = (if v_162 then catch-fail(hash(tls_h,m_16)) else caught-fail) in
    {807}let v_163: bool = not-caught-fail(h_47) in
    {808}let x_54: bitstring = (if v_163 then (l_47,h_47) else caught-fail) in
    {809}let binder_key_10: bitstring = (if v_162 then catch-fail((if v_163 then hmac(tls_h,early_secret_14,x_54) else fail-any)) else caught-fail) in
    {810}let v_164: bool = not-caught-fail(binder_key_10) in
    {811}let v_165: bitstring = (if not(v_153) then catch-fail((if v_162 then (if v_164 then (early_secret_14,binder_key_10) else fail-any) else fail-any)) else caught-fail) in
    {812}let v_166: bool = (not-caught-fail(v_165) && success?(1-proj-2-tuple(v_165))) in
    {813}let kb_10: mac_key = (if v_166 then 2-proj-2-tuple(v_165) else caught-fail) in
    {814}let es_12: bitstring = (if v_166 then 1-proj-2-tuple(v_165) else caught-fail) in
    {815}let v_167: bitstring = catch-fail((if v_153 then (if v_159 then (if v_160 then (client_psk_ext(id_7,binders_3),(tls_h,psk_23,es_11)) else fail-any) else fail-any) else (if v_166 then (empty_psk_ext,(tls_h,NoPSK,es_12)) else fail-any))) in
    {816}let v_168: bool = (not-caught-fail(v_167) && success?(1-proj-2-tuple(v_167))) in
    {817}let psk_data_3: bitstring = (if v_168 then 2-proj-2-tuple(v_167) else caught-fail) in
    {818}let psk_ext_6: preSharedKeyExt = (if v_168 then 1-proj-2-tuple(v_167) else caught-fail) in
    {819}let i_offer: params = (if v_168 then nego(TLS13,tls_h,tls_a,i_kex_ext,SNI(backend_dom),ech_is_inner,psk_ext_6,inner_ext) else caught-fail) in
    {820}let i_client_hello: msg = (if v_168 then CH(i_cr,i_offer) else caught-fail) in
    {821}let v_169: echConfig = (if v_168 then catch-fail(ech_conf) else caught-fail) in
    {822}let v_170: bool = (not-caught-fail(v_169) && success?(1-proj-ech_config(v_169))) in
    {823}let a_alg_ech: aead_alg = (if v_170 then 6-proj-ech_config(v_169) else caught-fail) in
    {824}let h_alg_ech: hash_alg = (if v_170 then 5-proj-ech_config(v_169) else caught-fail) in
    {825}let o_dom_1: domain = (if v_170 then 4-proj-ech_config(v_169) else caught-fail) in
    {826}let pkR_2: element = (if v_170 then 3-proj-ech_config(v_169) else caught-fail) in
    {827}let g_ech: group = (if v_170 then 2-proj-ech_config(v_169) else caught-fail) in
    {828}let config_id: configId = (if v_170 then 1-proj-ech_config(v_169) else caught-fail) in
    {829}let info: bitstring = (if v_170 then (tls_ech_str,ech_conf) else caught-fail) in
    {830}new s_21[]: seed;
    {831}let v_171: bitstring = (if v_170 then catch-fail((dh_xy(s_21,pkR_2),dh_encap_fun(g_ech,pkR_2,dh_xy(s_21,pkR_2)))) else caught-fail) in
    {832}let v_172: bool = (not-caught-fail(v_171) && success?(1-proj-2-tuple(v_171))) in
    {833}let enc: element = (if v_172 then 2-proj-2-tuple(v_171) else caught-fail) in
    {834}let shared_secret: element = (if v_172 then 1-proj-2-tuple(v_171) else caught-fail) in
    {835}let m_17: hpkeMode = (if v_172 then S else caught-fail) in
    {836}let s_22: bitstring = (if v_172 then zero else caught-fail) in
    {837}let k_14: bitstring = (if v_172 then (hpke_info_hash,info) else caught-fail) in
    {838}let info_hash: bitstring = (if v_172 then catch-fail(hmac(h_alg_ech,s_22,k_14)) else caught-fail) in
    {839}let v_173: bool = not-caught-fail(info_hash) in
    {840}let k_15: bitstring = (if v_173 then (hpke_secret,zero) else caught-fail) in
    {841}let xsecret: bitstring = (if v_173 then catch-fail(hmac(h_alg_ech,shared_secret,k_15)) else caught-fail) in
    {842}let v_174: bool = not-caught-fail(xsecret) in
    {843}let l_48: label = (if v_174 then hpke_key else caught-fail) in
    {844}let x_55: bitstring = (if v_174 then (l_48,info_hash) else caught-fail) in
    {845}let key: aead_key = (if v_174 then catch-fail(hmac(h_alg_ech,xsecret,x_55)) else caught-fail) in
    {846}let v_175: bool = not-caught-fail(key) in
    {847}let l_49: label = (if v_175 then hpke_base_nonce else caught-fail) in
    {848}let x_56: bitstring = (if v_175 then (l_49,info_hash) else caught-fail) in
    {849}let base_nonce: bitstring = (if v_175 then catch-fail(hmac(h_alg_ech,xsecret,x_56)) else caught-fail) in
    {850}let v_176: bool = not-caught-fail(base_nonce) in
    {851}let l_50: label = (if v_176 then hpke_exp else caught-fail) in
    {852}let x_57: bitstring = (if v_176 then (l_50,info_hash) else caught-fail) in
    {853}let exporter_secret: bitstring = (if v_176 then catch-fail(hmac(h_alg_ech,xsecret,x_57)) else caught-fail) in
    {854}let v_177: bool = not-caught-fail(exporter_secret) in
    {855}let v_178: bitstring = (if v_170 then catch-fail((if v_172 then (enc,(if v_173 then (if v_174 then (if v_175 then (if v_176 then (if v_177 then hpke_context(m_17,key) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) else fail-any)) else caught-fail) in
    {856}let v_179: bool = (not-caught-fail(v_178) && success?(1-proj-2-tuple(v_178))) in
    {857}let context: hpkeContext = (if v_179 then 2-proj-2-tuple(v_178) else caught-fail) in
    {858}let enc_1: element = (if v_179 then 1-proj-2-tuple(v_178) else caught-fail) in
    {859}new rand24_4[]: bytes24;
    {860}new rand8_4[]: bytes8;
    {861}let o_cr: bytes32 = (if v_179 then B32(rand24_4,rand8_4) else caught-fail) in
    {862}let v_180: bool = (if v_179 then catch-fail(use_grease) else caught-fail) in
    {863}new payload[]: bitstring;
    {864}let ech_ext_5: echExt = (if v_180 then client_ECH(h_alg_ech,a_alg_ech,config_id,enc_1,payload) else caught-fail) in
    {865}let o_offer: params = (if v_180 then nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom_1),ech_ext_5,empty_psk_ext,o_extra) else caught-fail) in
    {866}let dummy_ech_ext: echExt = (if is-false(v_180) then client_ECH(h_alg_ech,a_alg_ech,config_id,enc_1,zero) else caught-fail) in
    {867}let o_offer1: params = (if is-false(v_180) then nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom_1),dummy_ech_ext,empty_psk_ext,o_extra) else caught-fail) in
    {868}let o_client_hello1: msg = (if is-false(v_180) then CH(o_cr,o_offer1) else caught-fail) in
    {869}let v_181: msg = (if is-false(v_180) then catch-fail(o_client_hello1) else caught-fail) in
    {870}let v_182: bool = (not-caught-fail(v_181) && (success?(1-proj-nego(2-proj-CH(v_181))) && success?(1-proj-CH(v_181)))) in
    {871}let extra_9: extraExt = (if v_182 then 8-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {872}let psk_ext_7: preSharedKeyExt = (if v_182 then 7-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {873}let ech_ext_6: echExt = (if v_182 then 6-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {874}let sni_ext_2: sniExt = (if v_182 then 5-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {875}let kex_ext_4: keyShareExt = (if v_182 then 4-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {876}let a_alg_10: aead_alg = (if v_182 then 3-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {877}let h_alg_10: hash_alg = (if v_182 then 2-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {878}let version: TLS_version = (if v_182 then 1-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {879}let r: bytes32 = (if v_182 then 1-proj-CH(v_181) else caught-fail) in
    {880}let v_183: echExt = (if v_182 then catch-fail(ech_ext_6) else caught-fail) in
    {881}let v_184: bool = (not-caught-fail(v_183) && success?(1-proj-client_ECH(v_183))) in
    {882}let payload_1: bitstring = (if v_184 then 5-proj-client_ECH(v_183) else caught-fail) in
    {883}let enc_2: element = (if v_184 then 4-proj-client_ECH(v_183) else caught-fail) in
    {884}let config_id_1: configId = (if v_184 then 3-proj-client_ECH(v_183) else caught-fail) in
    {885}let a_alg_ech_1: aead_alg = (if v_184 then 2-proj-client_ECH(v_183) else caught-fail) in
    {886}let h_alg_ech_1: hash_alg = (if v_184 then 1-proj-client_ECH(v_183) else caught-fail) in
    {887}let client_hello_outer': msg = (if v_184 then CH(r,nego(version,h_alg_10,a_alg_10,kex_ext_4,sni_ext_2,empty_ech_ext,psk_ext_7,extra_9)) else caught-fail) in
    {888}let client_hello_AAD: ClientHelloOuterAAD = (if is-false(v_180) then catch-fail((if v_182 then (if v_184 then client_hello_outer_AAD(h_alg_ech_1,a_alg_ech_1,config_id_1,enc_2,client_hello_outer') else fail-any) else fail-any)) else caught-fail) in
    {889}let v_185: bool = not-caught-fail(client_hello_AAD) in
    {890}let v_186: hpkeContext = (if v_185 then catch-fail(context) else caught-fail) in
    {891}let v_187: bool = (not-caught-fail(v_186) && ((S =nf 1-proj-hpke_context(v_186)) && success?(1-proj-hpke_context(v_186)))) in
    {892}let key_1: aead_key = (if v_187 then 2-proj-hpke_context(v_186) else caught-fail) in
    {893}let payload_2: bitstring = (if v_185 then catch-fail((if v_187 then aead_enc(a_alg_ech,key_1,nonce_for_seal_open,client_hello_AAD,i_client_hello) else fail-any)) else caught-fail) in
    {894}let v_188: bool = not-caught-fail(payload_2) in
    {895}let ech_ext_7: echExt = (if v_188 then client_ECH(h_alg_ech,a_alg_ech,config_id,enc_1,payload_2) else caught-fail) in
    {896}let o_offer_1: params = (if v_188 then nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom_1),ech_ext_7,empty_psk_ext,o_extra) else caught-fail) in
    {897}let (o_client_hello: msg,i_client_hello_1: msg,i_cr_1: bytes32,o_cr_1: bytes32,i_kex_ext_1: keyShareExt,o_kex_ext_1: keyShareExt,kex_data_4: bitstring,psk_data_4: bitstring) = (if v_168 then (if v_170 then (if v_179 then (if undo-catch-fail(v_180) then (CH(o_cr,o_offer),CH(o_cr,o_offer),o_cr,o_cr,o_kex_ext,o_kex_ext,kex_data_3,psk_data_3) else (if v_185 then (if v_188 then (CH(o_cr,o_offer_1),i_client_hello,i_cr,o_cr,i_kex_ext,o_kex_ext,kex_data_3,psk_data_3) else fail-any) else fail-any)) else fail-any) else fail-any) else fail-any) in
    {898}out(io, o_client_hello);
    {899}let (=tls_h,psk_25: preSharedKey,es_13: bitstring) = psk_data_4 in
    {900}let v_189: echConfig = ech_conf in
    {901}let v_190: bool = success?(1-proj-ech_config(v_189)) in
    {902}let al: aead_alg = (if v_190 then 6-proj-ech_config(v_189) else caught-fail) in
    {903}let hl: hash_alg = (if v_190 then 5-proj-ech_config(v_189) else caught-fail) in
    {904}let dom: domain = (if v_190 then 4-proj-ech_config(v_189) else caught-fail) in
    {905}let public_key: element = (if v_190 then 3-proj-ech_config(v_189) else caught-fail) in
    {906}let g_4: group = (if v_190 then 2-proj-ech_config(v_189) else caught-fail) in
    {907}let id_8: configId = (if v_190 then 1-proj-ech_config(v_189) else caught-fail) in
    {908}let o_dom_2: domain = (if v_190 then dom else fail-any) in
    {909}let v_191: echConfig = ech_conf in
    {910}let v_192: bool = success?(1-proj-ech_config(v_191)) in
    {911}let al_1: aead_alg = (if v_192 then 6-proj-ech_config(v_191) else caught-fail) in
    {912}let hl_1: hash_alg = (if v_192 then 5-proj-ech_config(v_191) else caught-fail) in
    {913}let dom_1: domain = (if v_192 then 4-proj-ech_config(v_191) else caught-fail) in
    {914}let public_key_1: element = (if v_192 then 3-proj-ech_config(v_191) else caught-fail) in
    {915}let g_5: group = (if v_192 then 2-proj-ech_config(v_191) else caught-fail) in
    {916}let id_9: configId = (if v_192 then 1-proj-ech_config(v_191) else caught-fail) in
    {917}let ech_pk: element = (if v_192 then public_key_1 else fail-any) in
    {918}event SanityClientCH_ECH(id_client_7,zero32,i_cr_1,o_cr_1,c_dom_6,o_dom_2,backend_dom,ech_pk,psk_25,(zero,o_client_hello),(zero,i_client_hello_1));
    {919}in(io, server_hello_2: msg);
    {920}let SH(sr_11: bytes32,mode_3: params) = server_hello_2 in
    (
        {921}if (sr_11 = rand_HelloRetryRequest) then
            {922}out(io, illegal_parameter)
        else
            {923}let v_193: echConfig = ech_conf in
            {924}let v_194: bool = success?(1-proj-ech_config(v_193)) in
            {925}let al_2: aead_alg = (if v_194 then 6-proj-ech_config(v_193) else caught-fail) in
            {926}let hl_2: hash_alg = (if v_194 then 5-proj-ech_config(v_193) else caught-fail) in
            {927}let dom_2: domain = (if v_194 then 4-proj-ech_config(v_193) else caught-fail) in
            {928}let public_key_2: element = (if v_194 then 3-proj-ech_config(v_193) else caught-fail) in
            {929}let g_6: group = (if v_194 then 2-proj-ech_config(v_193) else caught-fail) in
            {930}let id_10: configId = (if v_194 then 1-proj-ech_config(v_193) else caught-fail) in
            {931}let id_client_8: idProc = id_client_7 in
            {932}let o_dom_3: domain = (if v_194 then dom_2 else fail-any) in
            {933}let i_cur_log_1: bitstring = (zero,i_client_hello_1) in
            {934}let o_cur_log: bitstring = (zero,o_client_hello) in
            {935}let SH(B32(sr24_1: bytes24,sr8_1: bytes8),mode_4: params) = server_hello_2 in
            {936}let (i_x_1: bitstring,o_x_1: bitstring,g_7: group,=true) = kex_data_4 in
            {937}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_7,gy_srv: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_8: preSharedKeyExt,extra_10: extraExt) = mode_4 in
            (
                {938}let v_195: bool = (psk_ext_8 = empty_psk_ext) in
                {939}let psk_26: preSharedKey = (if v_195 then NoPSK else caught-fail) in
                {940}let s_23: bitstring = (if v_195 then zero else caught-fail) in
                {941}let k_16: bitstring = (if v_195 then catch-fail(psk2b(psk_26)) else caught-fail) in
                {942}let v_196: bool = not-caught-fail(k_16) in
                {943}let early_secret_15: bitstring = (if v_195 then catch-fail((if v_196 then hmac(tls_h,s_23,k_16) else fail-any)) else caught-fail) in
                {944}let v_197: bool = not-caught-fail(early_secret_15) in
                {945}let l_51: label = (if v_197 then tls13_resumption_psk_binder_key else caught-fail) in
                {946}let m_18: bitstring = (if v_197 then zero else caught-fail) in
                {947}let h_48: bitstring = (if v_197 then catch-fail(hash(tls_h,m_18)) else caught-fail) in
                {948}let v_198: bool = not-caught-fail(h_48) in
                {949}let x_58: bitstring = (if v_198 then (l_51,h_48) else caught-fail) in
                {950}let binder_key_11: bitstring = (if v_197 then catch-fail((if v_198 then hmac(tls_h,early_secret_15,x_58) else fail-any)) else caught-fail) in
                {951}let v_199: bool = not-caught-fail(binder_key_11) in
                {952}let v_200: bitstring = (if v_195 then catch-fail((if v_197 then (if v_199 then (early_secret_15,binder_key_11) else fail-any) else fail-any)) else caught-fail) in
                {953}let v_201: bool = (not-caught-fail(v_200) && success?(1-proj-2-tuple(v_200))) in
                {954}let kb_11: mac_key = (if v_201 then 2-proj-2-tuple(v_200) else caught-fail) in
                {955}let es_14: bitstring = (if v_201 then 1-proj-2-tuple(v_200) else caught-fail) in
                {956}let v_202: bitstring = (if not(v_195) then catch-fail(psk_data_4) else caught-fail) in
                {957}let v_203: bool = (not-caught-fail(v_202) && success?(1-proj-3-tuple(v_202))) in
                {958}let es_15: bitstring = (if v_203 then 3-proj-3-tuple(v_202) else caught-fail) in
                {959}let psk_27: preSharedKey = (if v_203 then 2-proj-3-tuple(v_202) else caught-fail) in
                {960}let h'_alg_2: hash_alg = (if v_203 then 1-proj-3-tuple(v_202) else caught-fail) in
                {961}let (psk_28: preSharedKey,early_secret_16: bitstring,valid_2: bool) = (if v_195 then (if v_201 then (NoPSK,es_14,true) else fail-any) else (if v_203 then (psk_27,es_15,((h'_alg_2 = tls_h) && ((server_psk_ext(1) = psk_ext_8) && use_psk_2))) else fail-any)) in
                {962}if valid_2 then
                (
                    {963}let v_204: bool = use_grease in
                    {964}let gxy_5: element = (if not(v_204) then catch-fail(dh_decap_fun(g_7,gy_srv,i_x_1)) else caught-fail) in
                    {965}let v_205: bool = not-caught-fail(gxy_5) in
                    {966}new s_24[]: seed;
                    {967}let i_gxy: element = (if not(v_204) then (if v_205 then gxy_5 else dh_f(s_24)) else caught-fail) in
                    {968}let l_52: label = (if not(v_204) then tls13_derived else caught-fail) in
                    {969}let m_19: bitstring = (if not(v_204) then catch-fail(hash(tls_h,zero)) else caught-fail) in
                    {970}let v_206: bool = not-caught-fail(m_19) in
                    {971}let h_49: bitstring = (if v_206 then catch-fail(hash(tls_h,m_19)) else caught-fail) in
                    {972}let v_207: bool = not-caught-fail(h_49) in
                    {973}let x_59: bitstring = (if v_207 then (l_52,h_49) else caught-fail) in
                    {974}let extra_11: bitstring = (if not(v_204) then catch-fail((if v_206 then (if v_207 then hmac(tls_h,early_secret_16,x_59) else fail-any) else fail-any)) else caught-fail) in
                    {975}let v_208: bool = not-caught-fail(extra_11) in
                    {976}let i_handshake_secret: bitstring = (if not(v_204) then catch-fail((if v_208 then hmac(tls_h,extra_11,i_gxy) else fail-any)) else caught-fail) in
                    {977}let v_209: bool = not-caught-fail(i_handshake_secret) in
                    {978}let SH_ECHConf_1: msg = (if v_209 then SH(B32(sr24_1,zero8),mode_4) else caught-fail) in
                    {979}let l_53: label = (if v_209 then ech_accept_confirmation else caught-fail) in
                    {980}let m_20: bitstring = (if v_209 then (i_cur_log_1,SH_ECHConf_1) else caught-fail) in
                    {981}let h_50: bitstring = (if v_209 then catch-fail(hash(tls_h,m_20)) else caught-fail) in
                    {982}let v_210: bool = not-caught-fail(h_50) in
                    {983}let x_60: bitstring = (if v_210 then (l_53,h_50) else caught-fail) in
                    {984}let accept_confirmation_1: bitstring = (if v_209 then catch-fail((if v_210 then hmac(tls_h,i_handshake_secret,x_60) else fail-any)) else caught-fail) in
                    {985}let v_211: bool = not-caught-fail(accept_confirmation_1) in
                    {986}let is_accepted: bool = (if v_204 then false else (if v_209 then (if v_211 then (sr8_1 = crop_into_bytes8(accept_confirmation_1)) else fail-any) else fail-any)) in
                    {987}let v_212: bool = is_accepted in
                    {988}let gxy_6: element = (if v_212 then catch-fail(dh_decap_fun(g_7,gy_srv,i_x_1)) else caught-fail) in
                    {989}let v_213: bool = not-caught-fail(gxy_6) in
                    {990}new s_25[]: seed;
                    {991}let i_gxy_1: element = (if v_212 then (if v_213 then gxy_6 else dh_f(s_25)) else caught-fail) in
                    {992}let l_54: label = (if v_212 then tls13_derived else caught-fail) in
                    {993}let m_21: bitstring = (if v_212 then catch-fail(hash(tls_h,zero)) else caught-fail) in
                    {994}let v_214: bool = not-caught-fail(m_21) in
                    {995}let h_51: bitstring = (if v_214 then catch-fail(hash(tls_h,m_21)) else caught-fail) in
                    {996}let v_215: bool = not-caught-fail(h_51) in
                    {997}let x_61: bitstring = (if v_215 then (l_54,h_51) else caught-fail) in
                    {998}let extra_12: bitstring = (if v_212 then catch-fail((if v_214 then (if v_215 then hmac(tls_h,early_secret_16,x_61) else fail-any) else fail-any)) else caught-fail) in
                    {999}let v_216: bool = not-caught-fail(extra_12) in
                    {1000}let i_handshake_secret_1: bitstring = (if v_212 then catch-fail((if v_216 then hmac(tls_h,extra_12,i_gxy_1) else fail-any)) else caught-fail) in
                    {1001}let v_217: bool = not-caught-fail(i_handshake_secret_1) in
                    {1002}let gxy_7: element = (if not(v_212) then catch-fail(dh_decap_fun(g_7,gy_srv,o_x_1)) else caught-fail) in
                    {1003}let v_218: bool = not-caught-fail(gxy_7) in
                    {1004}new s_26[]: seed;
                    {1005}let o_gxy: element = (if not(v_212) then (if v_218 then gxy_7 else dh_f(s_26)) else caught-fail) in
                    {1006}let psk_29: preSharedKey = (if not(v_212) then NoPSK else caught-fail) in
                    {1007}let s_27: bitstring = (if not(v_212) then zero else caught-fail) in
                    {1008}let k_17: bitstring = (if not(v_212) then catch-fail(psk2b(psk_29)) else caught-fail) in
                    {1009}let v_219: bool = not-caught-fail(k_17) in
                    {1010}let early_secret_17: bitstring = (if not(v_212) then catch-fail((if v_219 then hmac(tls_h,s_27,k_17) else fail-any)) else caught-fail) in
                    {1011}let v_220: bool = not-caught-fail(early_secret_17) in
                    {1012}let l_55: label = (if v_220 then tls13_resumption_psk_binder_key else caught-fail) in
                    {1013}let m_22: bitstring = (if v_220 then zero else caught-fail) in
                    {1014}let h_52: bitstring = (if v_220 then catch-fail(hash(tls_h,m_22)) else caught-fail) in
                    {1015}let v_221: bool = not-caught-fail(h_52) in
                    {1016}let x_62: bitstring = (if v_221 then (l_55,h_52) else caught-fail) in
                    {1017}let binder_key_12: bitstring = (if v_220 then catch-fail((if v_221 then hmac(tls_h,early_secret_17,x_62) else fail-any)) else caught-fail) in
                    {1018}let v_222: bool = not-caught-fail(binder_key_12) in
                    {1019}let v_223: bitstring = (if not(v_212) then catch-fail((if v_220 then (if v_222 then (early_secret_17,binder_key_12) else fail-any) else fail-any)) else caught-fail) in
                    {1020}let v_224: bool = (not-caught-fail(v_223) && success?(1-proj-2-tuple(v_223))) in
                    {1021}let kb_12: mac_key = (if v_224 then 2-proj-2-tuple(v_223) else caught-fail) in
                    {1022}let es_16: bitstring = (if v_224 then 1-proj-2-tuple(v_223) else caught-fail) in
                    {1023}let l_56: label = (if v_224 then tls13_derived else caught-fail) in
                    {1024}let m_23: bitstring = (if v_224 then catch-fail(hash(tls_h,zero)) else caught-fail) in
                    {1025}let v_225: bool = not-caught-fail(m_23) in
                    {1026}let h_53: bitstring = (if v_225 then catch-fail(hash(tls_h,m_23)) else caught-fail) in
                    {1027}let v_226: bool = not-caught-fail(h_53) in
                    {1028}let x_63: bitstring = (if v_226 then (l_56,h_53) else caught-fail) in
                    {1029}let extra_13: bitstring = (if v_224 then catch-fail((if v_225 then (if v_226 then hmac(tls_h,es_16,x_63) else fail-any) else fail-any)) else caught-fail) in
                    {1030}let v_227: bool = not-caught-fail(extra_13) in
                    {1031}let (cr_12: bytes32,handshake_secret_3: bitstring,s_dom_7: domain,cur_log_9: bitstring) = (if v_212 then (if v_217 then (i_cr_1,i_handshake_secret_1,backend_dom,(i_cur_log_1,server_hello_2)) else fail-any) else (if v_224 then (o_cr_1,(if v_227 then hmac(tls_h,extra_13,o_gxy) else fail-any),o_dom_3,(o_cur_log,server_hello_2)) else fail-any)) in
                    {1032}let l_57: label = tls13_derived in
                    {1033}let m_24: bitstring = catch-fail(hash(tls_h,zero)) in
                    {1034}let v_228: bool = not-caught-fail(m_24) in
                    {1035}let h_54: bitstring = (if v_228 then catch-fail(hash(tls_h,m_24)) else caught-fail) in
                    {1036}let v_229: bool = not-caught-fail(h_54) in
                    {1037}let x_64: bitstring = (if v_229 then (l_57,h_54) else caught-fail) in
                    {1038}let extra_14: bitstring = catch-fail((if v_228 then (if v_229 then hmac(tls_h,handshake_secret_3,x_64) else fail-any) else fail-any)) in
                    {1039}let v_230: bool = not-caught-fail(extra_14) in
                    {1040}let k_18: bitstring = (if v_230 then zero else caught-fail) in
                    {1041}let master_secret_13: bitstring = (if v_230 then catch-fail(hmac(tls_h,handshake_secret_3,k_18)) else caught-fail) in
                    {1042}let v_231: bool = not-caught-fail(master_secret_13) in
                    {1043}let l_58: label = (if v_231 then tls13_client_handshake_traffic_secret else caught-fail) in
                    {1044}let h_55: bitstring = (if v_231 then catch-fail(hash(tls_h,cur_log_9)) else caught-fail) in
                    {1045}let v_232: bool = not-caught-fail(h_55) in
                    {1046}let x_65: bitstring = (if v_232 then (l_58,h_55) else caught-fail) in
                    {1047}let client_hts_3: bitstring = (if v_231 then catch-fail((if v_232 then hmac(tls_h,handshake_secret_3,x_65) else fail-any)) else caught-fail) in
                    {1048}let v_233: bool = not-caught-fail(client_hts_3) in
                    {1049}let l_59: label = (if v_233 then tls13_server_handshake_traffic_secret else caught-fail) in
                    {1050}let h_56: bitstring = (if v_233 then catch-fail(hash(tls_h,cur_log_9)) else caught-fail) in
                    {1051}let v_234: bool = not-caught-fail(h_56) in
                    {1052}let x_66: bitstring = (if v_234 then (l_59,h_56) else caught-fail) in
                    {1053}let server_hts_3: bitstring = (if v_233 then catch-fail((if v_234 then hmac(tls_h,handshake_secret_3,x_66) else fail-any)) else caught-fail) in
                    {1054}let v_235: bool = not-caught-fail(server_hts_3) in
                    {1055}let l_60: label = (if v_235 then tls13_key else caught-fail) in
                    {1056}let h_57: bitstring = (if v_235 then zero else caught-fail) in
                    {1057}let x_67: bitstring = (if v_235 then (l_60,h_57) else caught-fail) in
                    {1058}let client_wkh_3: bitstring = (if v_235 then catch-fail(hmac(tls_h,client_hts_3,x_67)) else caught-fail) in
                    {1059}let v_236: bool = not-caught-fail(client_wkh_3) in
                    {1060}let l_61: label = (if v_236 then tls13_key else caught-fail) in
                    {1061}let h_58: bitstring = (if v_236 then zero else caught-fail) in
                    {1062}let x_68: bitstring = (if v_236 then (l_61,h_58) else caught-fail) in
                    {1063}let server_wkh_3: bitstring = (if v_236 then catch-fail(hmac(tls_h,server_hts_3,x_68)) else caught-fail) in
                    {1064}let v_237: bool = not-caught-fail(server_wkh_3) in
                    {1065}let l_62: label = (if v_237 then tls13_finished else caught-fail) in
                    {1066}let h_59: bitstring = (if v_237 then zero else caught-fail) in
                    {1067}let x_69: bitstring = (if v_237 then (l_62,h_59) else caught-fail) in
                    {1068}let client_fk_3: bitstring = (if v_237 then catch-fail(hmac(tls_h,client_hts_3,x_69)) else caught-fail) in
                    {1069}let v_238: bool = not-caught-fail(client_fk_3) in
                    {1070}let l_63: label = (if v_238 then tls13_finished else caught-fail) in
                    {1071}let h_60: bitstring = (if v_238 then zero else caught-fail) in
                    {1072}let x_70: bitstring = (if v_238 then (l_63,h_60) else caught-fail) in
                    {1073}let server_fk_3: bitstring = (if v_238 then catch-fail(hmac(tls_h,server_hts_3,x_70)) else caught-fail) in
                    {1074}let v_239: bool = not-caught-fail(server_fk_3) in
                    {1075}let (master_secret_14: bitstring,chk_10: aead_key,shk_10: aead_key,cfin_10: mac_key,sfin_10: mac_key) = (if v_230 then (if v_231 then (if v_233 then (if v_235 then (if v_236 then (if v_237 then (if v_238 then (if v_239 then (master_secret_13,client_wkh_3,server_wkh_3,client_fk_3,server_fk_3) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                    {1076}event SanityClientSH(id_client_8,cr_12,B32(sr24_1,sr8_1),c_dom_6,s_dom_7,handshake_secret_3,psk_28,cur_log_9);
                    {1077}if (is_accepted || (psk_ext_8 = empty_psk_ext)) then
                    (
                        {1078}let sr_12: bytes32 = B32(sr24_1,sr8_1) in
                        {1079}in(io, enc_ee_msg_2: bitstring);
                        {1080}let ee_msg_3: msg = aead_dec(tls_a,shk_10,zero,zero,enc_ee_msg_2) in
                        {1081}let EE(x_71: bitstring) = ee_msg_3 in
                        {1082}let v_240: bool = not(is_accepted) in
                        {1083}let v_241: bitstring = (if v_240 then catch-fail(x_71) else caught-fail) in
                        {1084}let v_242: bool = (not-caught-fail(v_241) && success?(1-proj-server_ECH(v_241))) in
                        {1085}let ech_conf_1: echConfig = (if v_242 then 1-proj-server_ECH(v_241) else caught-fail) in
                        {1086}let update_ech_conf: bitstring = (if v_240 then (if v_242 then () else ()) else ()) in
                        {1087}let cur_log2_9: bitstring = (cur_log_9,ee_msg_3) in
                        {1088}out(ch_client_after_EE, (id_client_8,cr_12,sr_12,tls_h,tls_a,c_dom_6,s_dom_7,psk_28,master_secret_14,chk_10,shk_10,cfin_10,sfin_10,cur_log2_9))
                    )
                    else
                        {1089}out(io, illegal_parameter)
                )
                else
                    {1090}out(io, illegal_parameter)
            )
            else
                {1091}out(io, illegal_parameter)
    )
    else
        {1092}out(io, unexpected_message)
) | (
    {1095}!
    {1096}let use_psk_3: bool = false in
    {1097}let cert_req_5: bool = true in
    {1098}in(io, (use_ech: bool,s_dom_8: domain));
    {1099}event Same((use_ech,use_psk_3,cert_req_5,s_dom_8));
    {1100}let s_extra_1: extraExt = empty_extra_ext in
    {1101}new id_server_4[]: idProc;
    {1102}event SanityServer(id_server_4,use_ech,use_psk_3,cert_req_5);
    {1103}if not((use_psk_3 && cert_req_5)) then
    {1104}in(io, x_client_hello: msg);
    {1105}let CH(cr_13: bytes32,offer_7: params) = x_client_hello in
    (
        {1106}let nego(=TLS13,c_h_alg: hash_alg,c_a_alg: aead_alg,kex_ext_5: keyShareExt,sni_ext_3: sniExt,ech_ext_8: echExt,psk_ext_9: preSharedKeyExt,extra_ext_2: extraExt) = offer_7 in
        {1107}if ((c_h_alg = tls_h) && (c_a_alg = tls_a)) then
        (
            {1108}let client_kex_ext(DHE_group(=tls_g)) = kex_ext_5 in
            (
                {1109}if (sni_ext_3 = SNI(s_dom_8)) then
                (
                    {1110}if use_ech then
                        {1111}out(io, abort_error)
                    else
                        {1112}let hrr_mode: params = nego(TLS13,tls_h,tls_a,hrr_kex_ext(tls_g),empty_sni_ext,empty_ech_ext,empty_psk_ext,empty_extra_ext) in
                        {1113}let hello_retry_request: msg = SH(rand_HelloRetryRequest,hrr_mode) in
                        {1114}out(io, hello_retry_request);
                        {1115}let cur_log_HRR: bitstring = ((zero,x_client_hello),hello_retry_request) in
                        {1116}event SanityServerHRR(id_server_4,cr_13,s_dom_8,cur_log_HRR);
                        {1117}in(io, client_hello'_1: msg);
                        {1118}let CH(cr'_1: bytes32,offer': params) = client_hello'_1 in
                            {1119}out(ch_server_SH, (id_server_4,use_psk_3,false,cert_req_5,s_dom_8,tls_g,tls_h,tls_a,s_extra_1,zero,client_hello'_1,cur_log_HRR))
                        else
                            {1120}out(io, unexpected_message)
                )
                else
                    {1121}out(io, illegal_parameter)
            )
            else
                {1122}let client_kex_ext(DHE_kex(=tls_g,gx_8: element)) = kex_ext_5 in
                (
                    {1123}let (client_ECH(ech_h_alg: hash_alg,ech_aead_alg: aead_alg,config_id_2: configId,enc_3: element,payload_3: bitstring),=true) = (ech_ext_8,use_ech) in
                    (
                        {1124}let id_server_5: idProc = id_server_4 in
                        {1125}let CH(r_1: bytes32,offer_8: params) = x_client_hello in
                        {1126}let nego(=TLS13,=tls_h,=tls_a,kex_ext_6: keyShareExt,sni_ext_4: sniExt,ech_ext_9: echExt,=empty_psk_ext,extra_ext_3: extraExt) = offer_8 in
                        {1127}let client_ECH(ech_h_alg_1: hash_alg,ech_a_alg: aead_alg,config_id_3: configId,enc_4: element,payload_4: bitstring) = ech_ext_9 in
                        {1251}get ech_configurations(ech_config(=config_id_3,ech_g_1: group,pkR_3: element,=s_dom_8,=ech_h_alg_1,=ech_a_alg),skR_2: bitstring) in
                        (
                            {1128}let ech_conf_2: echConfig = ech_config(config_id_3,ech_g_1,pkR_3,s_dom_8,ech_h_alg_1,ech_a_alg) in
                            {1129}let v_243: msg = x_client_hello in
                            {1130}let v_244: bool = (success?(1-proj-nego(2-proj-CH(v_243))) && success?(1-proj-CH(v_243))) in
                            {1131}let extra_15: extraExt = (if v_244 then 8-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1132}let psk_ext_10: preSharedKeyExt = (if v_244 then 7-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1133}let ech_ext_10: echExt = (if v_244 then 6-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1134}let sni_ext_5: sniExt = (if v_244 then 5-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1135}let kex_ext_7: keyShareExt = (if v_244 then 4-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1136}let a_alg_11: aead_alg = (if v_244 then 3-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1137}let h_alg_11: hash_alg = (if v_244 then 2-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1138}let version_1: TLS_version = (if v_244 then 1-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1139}let r_2: bytes32 = (if v_244 then 1-proj-CH(v_243) else caught-fail) in
                            {1140}let v_245: echExt = (if v_244 then catch-fail(ech_ext_10) else caught-fail) in
                            {1141}let v_246: bool = (not-caught-fail(v_245) && success?(1-proj-client_ECH(v_245))) in
                            {1142}let payload_5: bitstring = (if v_246 then 5-proj-client_ECH(v_245) else caught-fail) in
                            {1143}let enc_5: element = (if v_246 then 4-proj-client_ECH(v_245) else caught-fail) in
                            {1144}let config_id_4: configId = (if v_246 then 3-proj-client_ECH(v_245) else caught-fail) in
                            {1145}let a_alg_ech_2: aead_alg = (if v_246 then 2-proj-client_ECH(v_245) else caught-fail) in
                            {1146}let h_alg_ech_2: hash_alg = (if v_246 then 1-proj-client_ECH(v_245) else caught-fail) in
                            {1147}let client_hello_outer'_1: msg = (if v_246 then CH(r_2,nego(version_1,h_alg_11,a_alg_11,kex_ext_7,sni_ext_5,empty_ech_ext,psk_ext_10,extra_15)) else caught-fail) in
                            {1148}let client_hello_AAD_1: ClientHelloOuterAAD = catch-fail((if v_244 then (if v_246 then client_hello_outer_AAD(h_alg_ech_2,a_alg_ech_2,config_id_4,enc_5,client_hello_outer'_1) else fail-any) else fail-any)) in
                            {1149}let v_247: bool = not-caught-fail(client_hello_AAD_1) in
                            {1150}let info_1: bitstring = (if v_247 then (tls_ech_str,ech_conf_2) else caught-fail) in
                            {1151}let gxy_8: element = (if v_247 then catch-fail(dh_decap_fun(ech_g_1,enc_4,skR_2)) else caught-fail) in
                            {1152}let v_248: bool = not-caught-fail(gxy_8) in
                            {1153}new s_28[]: seed;
                            {1154}let shared_secret_1: element = (if v_247 then (if v_248 then gxy_8 else dh_f(s_28)) else caught-fail) in
                            {1155}let m_25: hpkeMode = (if v_247 then R else caught-fail) in
                            {1156}let s_29: bitstring = (if v_247 then zero else caught-fail) in
                            {1157}let k_19: bitstring = (if v_247 then (hpke_info_hash,info_1) else caught-fail) in
                            {1158}let info_hash_1: bitstring = (if v_247 then catch-fail(hmac(ech_h_alg_1,s_29,k_19)) else caught-fail) in
                            {1159}let v_249: bool = not-caught-fail(info_hash_1) in
                            {1160}let k_20: bitstring = (if v_249 then (hpke_secret,zero) else caught-fail) in
                            {1161}let xsecret_1: bitstring = (if v_249 then catch-fail(hmac(ech_h_alg_1,shared_secret_1,k_20)) else caught-fail) in
                            {1162}let v_250: bool = not-caught-fail(xsecret_1) in
                            {1163}let l_64: label = (if v_250 then hpke_key else caught-fail) in
                            {1164}let x_72: bitstring = (if v_250 then (l_64,info_hash_1) else caught-fail) in
                            {1165}let key_2: aead_key = (if v_250 then catch-fail(hmac(ech_h_alg_1,xsecret_1,x_72)) else caught-fail) in
                            {1166}let v_251: bool = not-caught-fail(key_2) in
                            {1167}let l_65: label = (if v_251 then hpke_base_nonce else caught-fail) in
                            {1168}let x_73: bitstring = (if v_251 then (l_65,info_hash_1) else caught-fail) in
                            {1169}let base_nonce_1: bitstring = (if v_251 then catch-fail(hmac(ech_h_alg_1,xsecret_1,x_73)) else caught-fail) in
                            {1170}let v_252: bool = not-caught-fail(base_nonce_1) in
                            {1171}let l_66: label = (if v_252 then hpke_exp else caught-fail) in
                            {1172}let x_74: bitstring = (if v_252 then (l_66,info_hash_1) else caught-fail) in
                            {1173}let exporter_secret_1: bitstring = (if v_252 then catch-fail(hmac(ech_h_alg_1,xsecret_1,x_74)) else caught-fail) in
                            {1174}let v_253: bool = not-caught-fail(exporter_secret_1) in
                            {1175}let context_1: hpkeContext = (if v_247 then catch-fail((if v_249 then (if v_250 then (if v_251 then (if v_252 then (if v_253 then hpke_context(m_25,key_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
                            {1176}let v_254: bool = not-caught-fail(context_1) in
                            {1177}let v_255: hpkeContext = (if v_254 then catch-fail(context_1) else caught-fail) in
                            {1178}let v_256: bool = (not-caught-fail(v_255) && ((R =nf 1-proj-hpke_context(v_255)) && success?(1-proj-hpke_context(v_255)))) in
                            {1179}let key_3: aead_key = (if v_256 then 2-proj-hpke_context(v_255) else caught-fail) in
                            {1180}let i_client_hello_2: msg = (if v_254 then catch-fail((if v_256 then aead_dec(ech_a_alg,key_3,nonce_for_seal_open,client_hello_AAD_1,payload_4) else fail-any)) else caught-fail) in
                            {1181}let v_257: bool = not-caught-fail(i_client_hello_2) in
                            {1182}let v_258: msg = (if v_257 then catch-fail(i_client_hello_2) else caught-fail) in
                            {1183}let v_259: bool = (not-caught-fail(v_258) && ((((TLS13 =nf 1-proj-nego(2-proj-CH(v_258))) && success?(1-proj-SNI(5-proj-nego(2-proj-CH(v_258))))) && success?(1-proj-nego(2-proj-CH(v_258)))) && success?(1-proj-CH(v_258)))) in
                            {1184}let extra_ext': extraExt = (if v_259 then 8-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                            {1185}let empty_psk_ext': preSharedKeyExt = (if v_259 then 7-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                            {1186}let ech_ext': echExt = (if v_259 then 6-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                            {1187}let i_dom: domain = (if v_259 then 1-proj-SNI(5-proj-nego(2-proj-CH(v_258))) else caught-fail) in
                            {1188}let kex_ext'_1: keyShareExt = (if v_259 then 4-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                            {1189}let a_alg': aead_alg = (if v_259 then 3-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                            {1190}let h_alg': hash_alg = (if v_259 then 2-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                            {1191}let cr'_2: bytes32 = (if v_259 then 1-proj-CH(v_258) else caught-fail) in
                            {1192}let v_260: bool = (v_257 && not(v_259)) in
                            {1193}let v_261: echConfig = (if v_260 then catch-fail(ech_conf_2) else caught-fail) in
                            {1194}let v_262: bool = (not-caught-fail(v_261) && success?(1-proj-ech_config(v_261))) in
                            {1195}let a_alg_12: aead_alg = (if v_262 then 6-proj-ech_config(v_261) else caught-fail) in
                            {1196}let h_alg_12: hash_alg = (if v_262 then 5-proj-ech_config(v_261) else caught-fail) in
                            {1197}let s_dom_9: domain = (if v_262 then 4-proj-ech_config(v_261) else caught-fail) in
                            {1198}let pkR_4: element = (if v_262 then 3-proj-ech_config(v_261) else caught-fail) in
                            {1199}let g_8: group = (if v_262 then 2-proj-ech_config(v_261) else caught-fail) in
                            {1200}let config_id_5: configId = (if v_262 then 1-proj-ech_config(v_261) else caught-fail) in
                            {1201}new s_30[]: seed;
                            {1202}let gx_9: element = (if v_262 then dh_pub(g_8,dh_k(s_30)) else caught-fail) in
                            {1203}let v_263: bitstring = (if v_262 then catch-fail((dh_k(s_30),gx_9)) else caught-fail) in
                            {1204}let v_264: bool = (not-caught-fail(v_263) && success?(1-proj-2-tuple(v_263))) in
                            {1205}let pkR': element = (if v_264 then 2-proj-2-tuple(v_263) else caught-fail) in
                            {1206}let skR': bitstring = (if v_264 then 1-proj-2-tuple(v_263) else caught-fail) in
                            {1207}new config_id'[]: configId;
                            {1208}let retry_config: echConfig = (if v_260 then catch-fail((if v_262 then (if v_264 then ech_config(config_id',g_8,pkR',s_dom_9,h_alg_12,a_alg_12) else fail-any) else fail-any)) else caught-fail) in
                            {1209}let v_265: bool = not-caught-fail(retry_config) in
                            {1210}let v_266: bool = (v_254 && not(v_257)) in
                            {1211}let v_267: echConfig = (if v_266 then catch-fail(ech_conf_2) else caught-fail) in
                            {1212}let v_268: bool = (not-caught-fail(v_267) && success?(1-proj-ech_config(v_267))) in
                            {1213}let a_alg_13: aead_alg = (if v_268 then 6-proj-ech_config(v_267) else caught-fail) in
                            {1214}let h_alg_13: hash_alg = (if v_268 then 5-proj-ech_config(v_267) else caught-fail) in
                            {1215}let s_dom_10: domain = (if v_268 then 4-proj-ech_config(v_267) else caught-fail) in
                            {1216}let pkR_5: element = (if v_268 then 3-proj-ech_config(v_267) else caught-fail) in
                            {1217}let g_9: group = (if v_268 then 2-proj-ech_config(v_267) else caught-fail) in
                            {1218}let config_id_6: configId = (if v_268 then 1-proj-ech_config(v_267) else caught-fail) in
                            {1219}new s_31[]: seed;
                            {1220}let gx_10: element = (if v_268 then dh_pub(g_9,dh_k(s_31)) else caught-fail) in
                            {1221}let v_269: bitstring = (if v_268 then catch-fail((dh_k(s_31),gx_10)) else caught-fail) in
                            {1222}let v_270: bool = (not-caught-fail(v_269) && success?(1-proj-2-tuple(v_269))) in
                            {1223}let pkR'_1: element = (if v_270 then 2-proj-2-tuple(v_269) else caught-fail) in
                            {1224}let skR'_1: bitstring = (if v_270 then 1-proj-2-tuple(v_269) else caught-fail) in
                            {1225}new config_id'_1[]: configId;
                            {1226}let retry_config_1: echConfig = (if v_266 then catch-fail((if v_268 then (if v_270 then ech_config(config_id'_1,g_9,pkR'_1,s_dom_10,h_alg_13,a_alg_13) else fail-any) else fail-any)) else caught-fail) in
                            {1227}let v_271: bool = not-caught-fail(retry_config_1) in
                            {1228}let (s_dom_11: domain,client_hello_2: msg,encrypted_ext_1: bitstring,is_backend_1: bool) = (if v_247 then (if v_254 then (if v_257 then (if v_259 then (i_dom,i_client_hello_2,zero,true) else (if v_265 then (s_dom_8,x_client_hello,server_ECH(retry_config),false) else fail-any)) else (if v_271 then (s_dom_8,x_client_hello,server_ECH(retry_config_1),false) else fail-any)) else fail-any) else fail-any) in
                            {1229}out(ch_server_SH, (id_server_5,use_psk_3,is_backend_1,cert_req_5,s_dom_11,tls_g,tls_h,tls_a,s_extra_1,encrypted_ext_1,client_hello_2,zero))
                        )
                        else
                            {1250}get ech_configurations(ech_config(config_id'_2: configId,ech_g': group,pkR'_2: element,=s_dom_8,ech_h_alg': hash_alg,ech_a_alg': aead_alg),skR'_2: bitstring) in
                            {1230}let config_2: echConfig = ech_config(config_id'_2,ech_g',pkR'_2,s_dom_8,ech_h_alg',ech_a_alg') in
                            {1231}let v_272: echConfig = config_2 in
                            {1232}let v_273: bool = success?(1-proj-ech_config(v_272)) in
                            {1233}let a_alg_14: aead_alg = (if v_273 then 6-proj-ech_config(v_272) else caught-fail) in
                            {1234}let h_alg_14: hash_alg = (if v_273 then 5-proj-ech_config(v_272) else caught-fail) in
                            {1235}let s_dom_12: domain = (if v_273 then 4-proj-ech_config(v_272) else caught-fail) in
                            {1236}let pkR_6: element = (if v_273 then 3-proj-ech_config(v_272) else caught-fail) in
                            {1237}let g_10: group = (if v_273 then 2-proj-ech_config(v_272) else caught-fail) in
                            {1238}let config_id_7: configId = (if v_273 then 1-proj-ech_config(v_272) else caught-fail) in
                            {1239}new s_32[]: seed;
                            {1240}let gx_11: element = (if v_273 then dh_pub(g_10,dh_k(s_32)) else caught-fail) in
                            {1241}let v_274: bitstring = (if v_273 then catch-fail((dh_k(s_32),gx_11)) else caught-fail) in
                            {1242}let v_275: bool = (not-caught-fail(v_274) && success?(1-proj-2-tuple(v_274))) in
                            {1243}let pkR'_3: element = (if v_275 then 2-proj-2-tuple(v_274) else caught-fail) in
                            {1244}let skR'_3: bitstring = (if v_275 then 1-proj-2-tuple(v_274) else caught-fail) in
                            {1245}new config_id'_3[]: configId;
                            {1246}let retry_config_2: echConfig = catch-fail((if v_273 then (if v_275 then ech_config(config_id'_3,g_10,pkR'_3,s_dom_12,h_alg_14,a_alg_14) else fail-any) else fail-any)) in
                            {1247}let v_276: bool = not-caught-fail(retry_config_2) in
                            {1248}let (s_dom_13: domain,client_hello_3: msg,encrypted_ext_2: bitstring,is_backend_2: bool) = (if v_276 then (s_dom_8,x_client_hello,server_ECH(retry_config_2),false) else fail-any) in
                            {1249}out(ch_server_SH, (id_server_5,use_psk_3,is_backend_2,cert_req_5,s_dom_13,tls_g,tls_h,tls_a,s_extra_1,encrypted_ext_2,client_hello_3,zero))
                    )
                    else
                        {1252}if ((ech_ext_8 = empty_ech_ext) || not(use_ech)) then
                            {1253}out(ch_server_SH, (id_server_4,use_psk_3,false,cert_req_5,s_dom_8,tls_g,tls_h,tls_a,s_extra_1,zero,x_client_hello,zero))
                        else
                            {1254}out(io, illegal_parameter)
                )
                else
                    {1255}out(io, handshake_failure)
        )
        else
            {1256}out(io, handshake_failure)
    )
    else
        {1257}out(io, unexpected_message)
)

--  Biprocess 1 (that is, biprocess 0, with let moved downwards):
{1}let tls_h: hash_alg = id_hash(StrongHash,1) in
(
    {7}!
    {8}in(ch_client_CFIN, (id_client: idProc,cr: bytes32,sr: bytes32,h_alg: hash_alg,a_alg: aead_alg,psk: preSharedKey,s_pkey: pubkey,c_pkey: pubkey,master_secret: bitstring,chk: aead_key,shk: aead_key,cfin: mac_key,sfin: mac_key,cur_log: bitstring));
    {10}let h: bitstring = catch-fail(hash(h_alg,cur_log)) in
    {11}let v: bool = not-caught-fail(h) in
    {9}let l: label = tls13_client_application_traffic_secret in
    {12}let x: bitstring = (if v then (l,h) else caught-fail) in
    {13}let client_ats: bitstring = catch-fail((if v then hmac(h_alg,master_secret,x) else fail-any)) in
    {14}let v_1: bool = not-caught-fail(client_ats) in
    {16}let h_1: bitstring = (if v_1 then catch-fail(hash(h_alg,cur_log)) else caught-fail) in
    {17}let v_2: bool = not-caught-fail(h_1) in
    {15}let l_1: label = (if v_1 then tls13_server_application_traffic_secret else caught-fail) in
    {18}let x_1: bitstring = (if v_2 then (l_1,h_1) else caught-fail) in
    {19}let server_ats: bitstring = (if v_1 then catch-fail((if v_2 then hmac(h_alg,master_secret,x_1) else fail-any)) else caught-fail) in
    {20}let v_3: bool = not-caught-fail(server_ats) in
    {22}let h_2: bitstring = (if v_3 then catch-fail(hash(h_alg,cur_log)) else caught-fail) in
    {23}let v_4: bool = not-caught-fail(h_2) in
    {21}let l_2: label = (if v_3 then tls13_exporter_master_secret else caught-fail) in
    {24}let x_2: bitstring = (if v_4 then (l_2,h_2) else caught-fail) in
    {25}let ems: bitstring = (if v_3 then catch-fail((if v_4 then hmac(h_alg,master_secret,x_2) else fail-any)) else caught-fail) in
    {26}let v_5: bool = not-caught-fail(ems) in
    {28}let h_3: bitstring = (if v_5 then zero else caught-fail) in
    {27}let l_3: label = (if v_5 then tls13_key else caught-fail) in
    {29}let x_3: bitstring = (if v_5 then (l_3,h_3) else caught-fail) in
    {30}let client_wkad: bitstring = (if v_5 then catch-fail(hmac(h_alg,client_ats,x_3)) else caught-fail) in
    {31}let v_6: bool = not-caught-fail(client_wkad) in
    {33}let h_4: bitstring = (if v_6 then zero else caught-fail) in
    {32}let l_4: label = (if v_6 then tls13_key else caught-fail) in
    {34}let x_4: bitstring = (if v_6 then (l_4,h_4) else caught-fail) in
    {35}let server_wkad: bitstring = (if v_6 then catch-fail(hmac(h_alg,server_ats,x_4)) else caught-fail) in
    {36}let v_7: bool = not-caught-fail(server_wkad) in
    {37}let (cak: aead_key,sak: aead_key,ems_1: bitstring) = (if v_1 then (if v_3 then (if v_5 then (if v_6 then (if v_7 then (client_wkad,server_wkad,ems) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {38}let client_hash_msg: bitstring = hmac(h_alg,cfin,cur_log) in
    {39}let client_finished_msg: msg = FIN(client_hash_msg) in
    {40}let cur_log': bitstring = (cur_log,client_finished_msg) in
    {42}let h_5: bitstring = catch-fail(hash(h_alg,cur_log')) in
    {43}let v_8: bool = not-caught-fail(h_5) in
    {41}let l_5: label = tls13_resumption_master_secret in
    {44}let x_5: bitstring = (if v_8 then (l_5,h_5) else caught-fail) in
    {45}let rms: bitstring = (if v_8 then hmac(h_alg,master_secret,x_5) else fail-any) in
    {46}let enc_client_finished_msg: bitstring = aead_enc(a_alg,chk,zero,zero,client_finished_msg) in
    {47}out(io, enc_client_finished_msg);
    {48}event SanityClientCFIN(id_client,cr,sr,psk,master_secret,chk,shk,cfin,sfin,s_pkey,c_pkey,cak,sak,ems_1,rms,cur_log')
) | (
    {49}!
    {50}in(ch_client_FIN, (id_client_1: idProc,cr_1: bytes32,sr_1: bytes32,h_alg_1: hash_alg,a_alg_1: aead_alg,c_dom: domain,psk_1: preSharedKey,cert_req: bool,s_pkey_1: pubkey,master_secret_1: bitstring,chk_1: aead_key,shk_1: aead_key,cfin_1: mac_key,sfin_1: mac_key,cur_log_1: bitstring));
    {51}new st[]: bitstring;
    {52}event PreciseMess(ch_client_FIN,id_client_1,st,master_secret_1);
    {53}in(io, enc_finished_msg: bitstring);
    {54}let finished_msg: msg = aead_dec(a_alg_1,shk_1,zero,zero,enc_finished_msg) in
    (
        {55}let FIN(hash_msg: bitstring) = finished_msg in
        (
            {56}if (hash_msg = hmac(h_alg_1,sfin_1,cur_log_1)) then
            {57}let cur_log2: bitstring = (cur_log_1,finished_msg) in
            {58}if cert_req then
            (
                {70}get long_term_keys(c_dom': domain,sk: privkey,c_pkey_1: pubkey,crt: certificate) in
                {59}event Selected_lgt(c_dom',c_dom,sk,c_pkey_1,crt);
                {60}let certificate_msg: msg = CRT(zero,crt) in
                {61}let encrypted_certificate_msg: bitstring = aead_enc(a_alg_1,chk_1,zero,zero,certificate_msg) in
                {62}out(io, encrypted_certificate_msg);
                {63}let cur_log2_1: bitstring = (cur_log2,certificate_msg) in
                {64}let signed_log: bitstring = sign(sk,hash(h_alg_1,cur_log2_1)) in
                {65}let certificate_verify_msg: msg = CV(signed_log) in
                {66}let encrypted_certificate_verify_msg: bitstring = aead_enc(a_alg_1,chk_1,zero,zero,certificate_verify_msg) in
                {67}out(io, encrypted_certificate_verify_msg);
                {68}let cur_log3: bitstring = (cur_log2_1,certificate_verify_msg) in
                {69}out(ch_client_CFIN, (id_client_1,cr_1,sr_1,h_alg_1,a_alg_1,NoPSK,s_pkey_1,c_pkey_1,master_secret_1,chk_1,shk_1,cfin_1,sfin_1,cur_log3))
            )
            else
                {71}out(ch_client_CFIN, (id_client_1,cr_1,sr_1,h_alg_1,a_alg_1,psk_1,s_pkey_1,NoPubKey,master_secret_1,chk_1,shk_1,cfin_1,sfin_1,cur_log2))
        )
        else
            {72}out(io, unexpected_message)
    )
    else
        {73}out(io, bad_record_mac)
) | (
    {74}!
    {75}in(ch_client_CRT, (id_client_2: idProc,cr_2: bytes32,sr_2: bytes32,h_alg_2: hash_alg,a_alg_2: aead_alg,c_dom_1: domain,s_dom: domain,psk_2: preSharedKey,cert_req_1: bool,master_secret_2: bitstring,chk_2: aead_key,shk_2: aead_key,cfin_2: mac_key,sfin_2: mac_key,cur_log_2: bitstring,certificate_msg_1: msg));
    {76}let CRT(=zero,crt_1: certificate) = certificate_msg_1 in
    {78}in(io, enc_crt_verif_msg: bitstring);
    {79}let certificate_verify_msg_1: msg = aead_dec(a_alg_2,shk_2,zero,zero,enc_crt_verif_msg) in
    {80}let CV(signed_log_1: bitstring) = certificate_verify_msg_1 in
    {77}let cur_log2_2: bitstring = (cur_log_2,certificate_msg_1) in
    {81}if (verify(get_pkey(crt_1),hash(h_alg_2,cur_log2_2),signed_log_1) && ((get_domain(crt_1) = s_dom) && verify_cert(crt_1))) then
    {82}let s_pkey_2: pubkey = get_pkey(crt_1) in
    {83}let cur_log3_1: bitstring = (cur_log2_2,certificate_verify_msg_1) in
    {84}out(ch_client_FIN, (id_client_2,cr_2,sr_2,h_alg_2,a_alg_2,c_dom_1,psk_2,cert_req_1,s_pkey_2,master_secret_2,chk_2,shk_2,cfin_2,sfin_2,cur_log3_1))
) | (
    {85}!
    {86}in(ch_client_after_EE, (id_client_3: idProc,cr_3: bytes32,sr_3: bytes32,h_alg_3: hash_alg,a_alg_3: aead_alg,c_dom_2: domain,s_dom_1: domain,psk_3: preSharedKey,master_secret_3: bitstring,chk_3: aead_key,shk_3: aead_key,cfin_3: mac_key,sfin_3: mac_key,cur_log_3: bitstring));
    {87}new st_1[]: bitstring;
    {88}event PreciseMess(ch_client_after_EE,id_client_3,st_1,master_secret_3);
    {89}if (psk_3 = NoPSK) then
    (
        {90}in(io, enc_msg: bitstring);
        {91}let msg': msg = aead_dec(a_alg_3,shk_3,zero,zero,enc_msg) in
        {92}let CRTR(=zero) = msg' in
        (
            {94}in(io, enc_crt_msg: bitstring);
            {95}let certificate_msg_2: msg = aead_dec(a_alg_3,shk_3,zero,zero,enc_crt_msg) in
            {93}let cur_log2_3: bitstring = (cur_log_3,msg') in
            {96}out(ch_client_CRT, (id_client_3,cr_3,sr_3,h_alg_3,a_alg_3,c_dom_2,s_dom_1,psk_3,true,master_secret_3,chk_3,shk_3,cfin_3,sfin_3,cur_log2_3,certificate_msg_2))
        )
        else
            {97}let CRT(=zero,crt_2: certificate) = msg' in
                {98}out(ch_client_CRT, (id_client_3,cr_3,sr_3,h_alg_3,a_alg_3,c_dom_2,s_dom_1,psk_3,false,master_secret_3,chk_3,shk_3,cfin_3,sfin_3,cur_log_3,msg'))
            else
                {99}out(io, unexpected_message)
    )
    else
        {100}out(ch_client_FIN, (id_client_3,cr_3,sr_3,h_alg_3,a_alg_3,c_dom_2,psk_3,false,NoPubKey,master_secret_3,chk_3,shk_3,cfin_3,sfin_3,cur_log_3))
) | (
    {101}!
    {102}in(ch_server_CFIN, (id_server: idProc,cr_4: bytes32,sr_4: bytes32,h_alg_4: hash_alg,a_alg_4: aead_alg,psk_4: preSharedKey,s_pkey_3: pubkey,c_pkey_2: pubkey,master_secret_4: bitstring,chk_4: aead_key,shk_4: aead_key,cfin_4: mac_key,sfin_4: mac_key,cur_log_4: bitstring));
    {103}in(io, enc_fin: bitstring);
    {104}let fin_msg: msg = aead_dec(a_alg_4,chk_4,zero,zero,enc_fin) in
    {105}let FIN(hash_msg_1: bitstring) = fin_msg in
    {106}if (hash_msg_1 = hmac(h_alg_4,cfin_4,cur_log_4)) then
    {108}let h_6: bitstring = catch-fail(hash(h_alg_4,cur_log_4)) in
    {109}let v_9: bool = not-caught-fail(h_6) in
    {107}let l_6: label = tls13_client_application_traffic_secret in
    {110}let x_6: bitstring = (if v_9 then (l_6,h_6) else caught-fail) in
    {111}let client_ats_1: bitstring = catch-fail((if v_9 then hmac(h_alg_4,master_secret_4,x_6) else fail-any)) in
    {112}let v_10: bool = not-caught-fail(client_ats_1) in
    {114}let h_7: bitstring = (if v_10 then catch-fail(hash(h_alg_4,cur_log_4)) else caught-fail) in
    {115}let v_11: bool = not-caught-fail(h_7) in
    {113}let l_7: label = (if v_10 then tls13_server_application_traffic_secret else caught-fail) in
    {116}let x_7: bitstring = (if v_11 then (l_7,h_7) else caught-fail) in
    {117}let server_ats_1: bitstring = (if v_10 then catch-fail((if v_11 then hmac(h_alg_4,master_secret_4,x_7) else fail-any)) else caught-fail) in
    {118}let v_12: bool = not-caught-fail(server_ats_1) in
    {120}let h_8: bitstring = (if v_12 then catch-fail(hash(h_alg_4,cur_log_4)) else caught-fail) in
    {121}let v_13: bool = not-caught-fail(h_8) in
    {119}let l_8: label = (if v_12 then tls13_exporter_master_secret else caught-fail) in
    {122}let x_8: bitstring = (if v_13 then (l_8,h_8) else caught-fail) in
    {123}let ems_2: bitstring = (if v_12 then catch-fail((if v_13 then hmac(h_alg_4,master_secret_4,x_8) else fail-any)) else caught-fail) in
    {124}let v_14: bool = not-caught-fail(ems_2) in
    {126}let h_9: bitstring = (if v_14 then zero else caught-fail) in
    {125}let l_9: label = (if v_14 then tls13_key else caught-fail) in
    {127}let x_9: bitstring = (if v_14 then (l_9,h_9) else caught-fail) in
    {128}let client_wkad_1: bitstring = (if v_14 then catch-fail(hmac(h_alg_4,client_ats_1,x_9)) else caught-fail) in
    {129}let v_15: bool = not-caught-fail(client_wkad_1) in
    {131}let h_10: bitstring = (if v_15 then zero else caught-fail) in
    {130}let l_10: label = (if v_15 then tls13_key else caught-fail) in
    {132}let x_10: bitstring = (if v_15 then (l_10,h_10) else caught-fail) in
    {133}let server_wkad_1: bitstring = (if v_15 then catch-fail(hmac(h_alg_4,server_ats_1,x_10)) else caught-fail) in
    {134}let v_16: bool = not-caught-fail(server_wkad_1) in
    {135}let (cak_1: aead_key,sak_1: aead_key,ems_3: bitstring) = (if v_10 then (if v_12 then (if v_14 then (if v_15 then (if v_16 then (client_wkad_1,server_wkad_1,ems_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {136}let cur_log_CFIN: bitstring = (cur_log_4,fin_msg) in
    {138}let h_11: bitstring = catch-fail(hash(h_alg_4,cur_log_CFIN)) in
    {139}let v_17: bool = not-caught-fail(h_11) in
    {137}let l_11: label = tls13_resumption_master_secret in
    {140}let x_11: bitstring = (if v_17 then (l_11,h_11) else caught-fail) in
    {141}let rms_1: bitstring = (if v_17 then hmac(h_alg_4,master_secret_4,x_11) else fail-any) in
    {142}event SanityServerCFIN(id_server,cr_4,sr_4,psk_4,master_secret_4,chk_4,shk_4,cfin_4,sfin_4,s_pkey_3,c_pkey_2,cak_1,sak_1,ems_3,rms_1,cur_log_CFIN)
) | (
    {143}!
    {144}in(ch_server_FIN, (id_server_1: idProc,cr_5: bytes32,sr_5: bytes32,h_alg_5: hash_alg,a_alg_5: aead_alg,psk_5: preSharedKey,cert_req_2: bool,s_pkey_4: pubkey,master_secret_5: bitstring,chk_5: aead_key,shk_5: aead_key,cfin_5: mac_key,sfin_5: mac_key,cur_log_5: bitstring));
    {145}let hash_msg_2: bitstring = hmac(h_alg_5,sfin_5,cur_log_5) in
    {146}let finished_msg_1: msg = FIN(hash_msg_2) in
    {147}let enc_finished: bitstring = aead_enc(a_alg_5,shk_5,zero,zero,finished_msg_1) in
    {148}out(io, enc_finished);
    {149}let cur_log_FIN: bitstring = (cur_log_5,finished_msg_1) in
    {150}if ((psk_5 = NoPSK) && cert_req_2) then
    (
        {151}in(io, enc_cert_msg: bitstring);
        {152}let cert_msg: msg = aead_dec(a_alg_5,chk_5,zero,zero,enc_cert_msg) in
        {153}let CRT(=zero,crt_3: certificate) = cert_msg in
        {155}in(io, enc_cert_verif_msg: bitstring);
        {156}let cert_verify_msg: msg = aead_dec(a_alg_5,chk_5,zero,zero,enc_cert_verif_msg) in
        {157}let CV(signed_log_2: bitstring) = cert_verify_msg in
        {154}let cur_log_CRT: bitstring = (cur_log_FIN,cert_msg) in
        {158}if (verify(get_pkey(crt_3),hash(h_alg_5,cur_log_CRT),signed_log_2) && verify_cert(crt_3)) then
        {159}let c_pkey_3: pubkey = get_pkey(crt_3) in
        {160}let cur_log_CV: bitstring = (cur_log_CRT,cert_verify_msg) in
        {161}out(ch_server_CFIN, (id_server_1,cr_5,sr_5,h_alg_5,a_alg_5,psk_5,s_pkey_4,c_pkey_3,master_secret_5,chk_5,shk_5,cfin_5,sfin_5,cur_log_CV))
    )
    else
        {162}out(ch_server_CFIN, (id_server_1,cr_5,sr_5,h_alg_5,a_alg_5,psk_5,s_pkey_4,NoPubKey,master_secret_5,chk_5,shk_5,cfin_5,sfin_5,cur_log_FIN))
) | (
    {163}!
    {164}in(ch_server_CRT, (id_server_2: idProc,cr_6: bytes32,sr_6: bytes32,h_alg_6: hash_alg,a_alg_6: aead_alg,s_dom_2: domain,psk_6: preSharedKey,cert_req_3: bool,master_secret_6: bitstring,chk_6: aead_key,shk_6: aead_key,cfin_6: mac_key,sfin_6: mac_key,cur_log_6: bitstring));
    {165}new st_2[]: bitstring;
    {166}event PreciseMess(ch_server_CRT,id_server_2,st_2,master_secret_6);
    {178}get long_term_keys(s_dom': domain,sk_1: privkey,s_pkey_5: pubkey,crt_4: certificate) in
    {167}event Selected_lgt(s_dom',s_dom_2,sk_1,s_pkey_5,crt_4);
    {168}let certificate_msg_3: msg = CRT(zero,crt_4) in
    {169}let encrypted_certificate_msg_1: bitstring = aead_enc(a_alg_6,shk_6,zero,zero,certificate_msg_3) in
    {170}out(io, encrypted_certificate_msg_1);
    {171}let cur_log_CRT_1: bitstring = (cur_log_6,certificate_msg_3) in
    {172}let signed_log_3: bitstring = sign(sk_1,hash(h_alg_6,cur_log_CRT_1)) in
    {173}let certificate_verify_msg_2: msg = CV(signed_log_3) in
    {174}let encrypted_certificate_verify_msg_1: bitstring = aead_enc(a_alg_6,shk_6,zero,zero,certificate_verify_msg_2) in
    {175}out(io, encrypted_certificate_verify_msg_1);
    {176}let cur_log_CV_1: bitstring = (cur_log_CRT_1,certificate_verify_msg_2) in
    {177}out(ch_server_FIN, (id_server_2,cr_6,sr_6,h_alg_6,a_alg_6,psk_6,cert_req_3,s_pkey_5,master_secret_6,chk_6,shk_6,cfin_6,sfin_6,cur_log_CV_1))
) | (
    {179}!
    {180}in(ch_server_SH, (id_server_3: idProc,use_psk: bool,is_backend: bool,cert_req_4: bool,s_dom_3: domain,g: group,h_alg_7: hash_alg,a_alg_7: aead_alg,s_extra: extraExt,encrypted_ext: bitstring,client_hello: msg,cur_log_7: bitstring));
    {181}new st_3[]: bitstring;
    {182}event PreciseMess(ch_server_SH,id_server_3,st_3,client_hello);
    {183}let CH(cr_7: bytes32,offer: params) = client_hello in
    {184}let nego(=TLS13,=h_alg_7,=a_alg_7,client_kex_ext(DHE_kex(=g,gx: element)),sni_ext: sniExt,ech_ext: echExt,psk_ext: preSharedKeyExt,extra_ext: extraExt) = offer in
    (
        {185}if (not(is_backend) || (ech_ext = ech_is_inner)) then
        (
            {186}if (sni_ext = SNI(s_dom_3)) then
            (
                {187}let v_18: msg = client_hello in
                {188}let v_19: bool = (((TLS13 =nf 1-proj-nego(2-proj-CH(v_18))) && success?(1-proj-nego(2-proj-CH(v_18)))) && success?(1-proj-CH(v_18))) in
                {189}let extra_ext_1: extraExt = (if v_19 then 8-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {190}let psk_ext_1: preSharedKeyExt = (if v_19 then 7-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {191}let ech_ext_1: echExt = (if v_19 then 6-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {192}let sni_ext_1: sniExt = (if v_19 then 5-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {193}let kex_ext: keyShareExt = (if v_19 then 4-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {194}let a_alg_8: aead_alg = (if v_19 then 3-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {195}let h_alg_8: hash_alg = (if v_19 then 2-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {196}let cr_8: bytes32 = (if v_19 then 1-proj-CH(v_18) else caught-fail) in
                {197}let v_20: bitstring = (if v_19 then catch-fail((psk_ext_1,use_psk)) else caught-fail) in
                {198}let v_21: bool = (not-caught-fail(v_20) && ((success?(1-proj-client_psk_ext(1-proj-2-tuple(v_20))) && (true =nf 2-proj-2-tuple(v_20))) && success?(1-proj-2-tuple(v_20)))) in
                {199}let binders: bitstring = (if v_21 then 2-proj-client_psk_ext(1-proj-2-tuple(v_20)) else caught-fail) in
                {200}let id: identityPsk = (if v_21 then 1-proj-client_psk_ext(1-proj-2-tuple(v_20)) else caught-fail) in
                {201}let v_22: bool = (if v_21 then catch-fail(((get_receiver_psk(id) = s_dom_3) && (get_hash_psk(id) = h_alg_8))) else caught-fail) in
                {202}let psk_7: preSharedKey = (if v_22 then catch-fail(PSK(get_ipsk(id))) else caught-fail) in
                {203}let v_23: bool = not-caught-fail(psk_7) in
                {205}let k: bitstring = (if v_23 then catch-fail(psk2b(psk_7)) else caught-fail) in
                {206}let v_24: bool = not-caught-fail(k) in
                {204}let s: bitstring = (if v_23 then zero else caught-fail) in
                {207}let early_secret: bitstring = (if v_23 then catch-fail((if v_24 then hmac(h_alg_8,s,k) else fail-any)) else caught-fail) in
                {208}let v_25: bool = not-caught-fail(early_secret) in
                {210}let m: bitstring = (if v_25 then zero else caught-fail) in
                {211}let h_12: bitstring = (if v_25 then catch-fail(hash(h_alg_8,m)) else caught-fail) in
                {212}let v_26: bool = not-caught-fail(h_12) in
                {209}let l_12: label = (if v_25 then tls13_resumption_psk_binder_key else caught-fail) in
                {213}let x_12: bitstring = (if v_26 then (l_12,h_12) else caught-fail) in
                {214}let binder_key: bitstring = (if v_25 then catch-fail((if v_26 then hmac(h_alg_8,early_secret,x_12) else fail-any)) else caught-fail) in
                {215}let v_27: bool = not-caught-fail(binder_key) in
                {216}let v_28: bitstring = (if v_23 then catch-fail((if v_25 then (if v_27 then (early_secret,binder_key) else fail-any) else fail-any)) else caught-fail) in
                {217}let v_29: bool = (not-caught-fail(v_28) && success?(1-proj-2-tuple(v_28))) in
                {218}let kb: mac_key = (if v_29 then 2-proj-2-tuple(v_28) else caught-fail) in
                {219}let early_secret_1: bitstring = (if v_29 then 1-proj-2-tuple(v_28) else caught-fail) in
                {222}let psk_8: preSharedKey = (if is-false(v_22) then NoPSK else caught-fail) in
                {224}let k_1: bitstring = (if is-false(v_22) then catch-fail(psk2b(psk_8)) else caught-fail) in
                {225}let v_30: bool = not-caught-fail(k_1) in
                {223}let s_1: bitstring = (if is-false(v_22) then zero else caught-fail) in
                {226}let early_secret_2: bitstring = (if is-false(v_22) then catch-fail((if v_30 then hmac(h_alg_8,s_1,k_1) else fail-any)) else caught-fail) in
                {227}let v_31: bool = not-caught-fail(early_secret_2) in
                {229}let m_1: bitstring = (if v_31 then zero else caught-fail) in
                {230}let h_13: bitstring = (if v_31 then catch-fail(hash(h_alg_8,m_1)) else caught-fail) in
                {231}let v_32: bool = not-caught-fail(h_13) in
                {228}let l_13: label = (if v_31 then tls13_resumption_psk_binder_key else caught-fail) in
                {232}let x_13: bitstring = (if v_32 then (l_13,h_13) else caught-fail) in
                {233}let binder_key_1: bitstring = (if v_31 then catch-fail((if v_32 then hmac(h_alg_8,early_secret_2,x_13) else fail-any)) else caught-fail) in
                {234}let v_33: bool = not-caught-fail(binder_key_1) in
                {235}let v_34: bitstring = (if is-false(v_22) then catch-fail((if v_31 then (if v_33 then (early_secret_2,binder_key_1) else fail-any) else fail-any)) else caught-fail) in
                {236}let v_35: bool = (not-caught-fail(v_34) && success?(1-proj-2-tuple(v_34))) in
                {237}let kb_1: mac_key = (if v_35 then 2-proj-2-tuple(v_34) else caught-fail) in
                {238}let es: bitstring = (if v_35 then 1-proj-2-tuple(v_34) else caught-fail) in
                {239}let v_36: bool = (v_19 && not(v_21)) in
                {240}let psk_9: preSharedKey = (if v_36 then NoPSK else caught-fail) in
                {242}let k_2: bitstring = (if v_36 then catch-fail(psk2b(psk_9)) else caught-fail) in
                {243}let v_37: bool = not-caught-fail(k_2) in
                {241}let s_2: bitstring = (if v_36 then zero else caught-fail) in
                {244}let early_secret_3: bitstring = (if v_36 then catch-fail((if v_37 then hmac(h_alg_8,s_2,k_2) else fail-any)) else caught-fail) in
                {245}let v_38: bool = not-caught-fail(early_secret_3) in
                {247}let m_2: bitstring = (if v_38 then zero else caught-fail) in
                {248}let h_14: bitstring = (if v_38 then catch-fail(hash(h_alg_8,m_2)) else caught-fail) in
                {249}let v_39: bool = not-caught-fail(h_14) in
                {246}let l_14: label = (if v_38 then tls13_resumption_psk_binder_key else caught-fail) in
                {250}let x_14: bitstring = (if v_39 then (l_14,h_14) else caught-fail) in
                {251}let binder_key_2: bitstring = (if v_38 then catch-fail((if v_39 then hmac(h_alg_8,early_secret_3,x_14) else fail-any)) else caught-fail) in
                {252}let v_40: bool = not-caught-fail(binder_key_2) in
                {253}let v_41: bitstring = (if v_36 then catch-fail((if v_38 then (if v_40 then (early_secret_3,binder_key_2) else fail-any) else fail-any)) else caught-fail) in
                {254}let v_42: bool = (not-caught-fail(v_41) && success?(1-proj-2-tuple(v_41))) in
                {255}let kb_2: mac_key = (if v_42 then 2-proj-2-tuple(v_41) else caught-fail) in
                {256}let es_1: bitstring = (if v_42 then 1-proj-2-tuple(v_41) else caught-fail) in
                {220}let offer_1: params = (if v_29 then nego(TLS13,h_alg_8,a_alg_8,kex_ext,sni_ext_1,ech_ext_1,trunc_client_psk_ext(id),extra_ext_1) else caught-fail) in
                {221}let cur_log'_1: bitstring = (if v_29 then (cur_log_7,CH(cr_8,offer_1)) else caught-fail) in
                {257}let (early_secret_4: bitstring,s_psk_ext: preSharedKeyExt,psk_10: preSharedKey) = (if v_19 then (if v_21 then (if undo-catch-fail(v_22) then (if v_23 then (if v_29 then (if (binders = hmac(h_alg_8,kb,cur_log'_1)) then (early_secret_1,server_psk_ext(1),psk_7) else fail-any) else fail-any) else fail-any) else (if v_35 then (es,empty_psk_ext,NoPSK) else fail-any)) else (if v_42 then (es_1,empty_psk_ext,NoPSK) else fail-any)) else fail-any) in
                {258}let cur_log_CH: bitstring = (cur_log_7,client_hello) in
                {259}event SanityServerCH(id_server_3,is_backend,cr_7,s_dom_3,psk_10,cur_log_CH);
                {260}new s_3[]: seed;
                {261}let (gxy: element,gy: element) = (dh_xy(s_3,client_hello),dh_encap_fun(g,gx,dh_xy(s_3,client_hello))) in
                {263}let m_3: bitstring = catch-fail(hash(h_alg_7,zero)) in
                {264}let v_43: bool = not-caught-fail(m_3) in
                {265}let h_15: bitstring = (if v_43 then catch-fail(hash(h_alg_7,m_3)) else caught-fail) in
                {266}let v_44: bool = not-caught-fail(h_15) in
                {262}let l_15: label = tls13_derived in
                {267}let x_15: bitstring = (if v_44 then (l_15,h_15) else caught-fail) in
                {268}let extra: bitstring = catch-fail((if v_43 then (if v_44 then hmac(h_alg_7,early_secret_4,x_15) else fail-any) else fail-any)) in
                {269}let v_45: bool = not-caught-fail(extra) in
                {270}let handshake_secret: bitstring = (if v_45 then hmac(h_alg_7,extra,gxy) else fail-any) in
                {273}new sr24[]: bytes24;
                {283}new rand24[]: bytes24;
                {284}new rand8[]: bytes8;
                {272}let v_46: bool = is_backend in
                {271}let s_offer: params = nego(TLS13,h_alg_7,a_alg_7,server_kex_ext(DHE_kex(g,gy)),empty_sni_ext,empty_ech_ext,s_psk_ext,s_extra) in
                {274}let SH_ECHConf: msg = (if v_46 then SH(B32(sr24,zero8),s_offer) else caught-fail) in
                {275}let cur_log_SH_ech: bitstring = (if v_46 then (cur_log_CH,SH_ECHConf) else caught-fail) in
                {277}let h_16: bitstring = (if v_46 then catch-fail(hash(h_alg_7,cur_log_SH_ech)) else caught-fail) in
                {278}let v_47: bool = not-caught-fail(h_16) in
                {276}let l_16: label = (if v_46 then ech_accept_confirmation else caught-fail) in
                {279}let x_16: bitstring = (if v_47 then (l_16,h_16) else caught-fail) in
                {280}let accept_confirmation: bitstring = (if v_46 then catch-fail((if v_47 then hmac(h_alg_7,handshake_secret,x_16) else fail-any)) else caught-fail) in
                {281}let v_48: bool = not-caught-fail(accept_confirmation) in
                {282}let sr8: bytes8 = (if v_48 then crop_into_bytes8(accept_confirmation) else caught-fail) in
                {285}let sr_7: bytes32 = (if v_46 then (if v_48 then B32(sr24,sr8) else fail-any) else B32(rand24,rand8)) in
                {286}let server_hello: msg = SH(sr_7,s_offer) in
                {287}out(io, server_hello);
                {288}let cur_log_SH: bitstring = (cur_log_CH,server_hello) in
                {289}event SanityServerSH(id_server_3,cr_7,sr_7,s_dom_3,handshake_secret,psk_10,cur_log_SH);
                {291}let m_4: bitstring = catch-fail(hash(h_alg_7,zero)) in
                {292}let v_49: bool = not-caught-fail(m_4) in
                {293}let h_17: bitstring = (if v_49 then catch-fail(hash(h_alg_7,m_4)) else caught-fail) in
                {294}let v_50: bool = not-caught-fail(h_17) in
                {290}let l_17: label = tls13_derived in
                {295}let x_17: bitstring = (if v_50 then (l_17,h_17) else caught-fail) in
                {296}let extra_1: bitstring = catch-fail((if v_49 then (if v_50 then hmac(h_alg_7,handshake_secret,x_17) else fail-any) else fail-any)) in
                {297}let v_51: bool = not-caught-fail(extra_1) in
                {298}let k_3: bitstring = (if v_51 then zero else caught-fail) in
                {299}let master_secret_7: bitstring = (if v_51 then catch-fail(hmac(h_alg_7,handshake_secret,k_3)) else caught-fail) in
                {300}let v_52: bool = not-caught-fail(master_secret_7) in
                {302}let h_18: bitstring = (if v_52 then catch-fail(hash(h_alg_7,cur_log_SH)) else caught-fail) in
                {303}let v_53: bool = not-caught-fail(h_18) in
                {301}let l_18: label = (if v_52 then tls13_client_handshake_traffic_secret else caught-fail) in
                {304}let x_18: bitstring = (if v_53 then (l_18,h_18) else caught-fail) in
                {305}let client_hts: bitstring = (if v_52 then catch-fail((if v_53 then hmac(h_alg_7,handshake_secret,x_18) else fail-any)) else caught-fail) in
                {306}let v_54: bool = not-caught-fail(client_hts) in
                {308}let h_19: bitstring = (if v_54 then catch-fail(hash(h_alg_7,cur_log_SH)) else caught-fail) in
                {309}let v_55: bool = not-caught-fail(h_19) in
                {307}let l_19: label = (if v_54 then tls13_server_handshake_traffic_secret else caught-fail) in
                {310}let x_19: bitstring = (if v_55 then (l_19,h_19) else caught-fail) in
                {311}let server_hts: bitstring = (if v_54 then catch-fail((if v_55 then hmac(h_alg_7,handshake_secret,x_19) else fail-any)) else caught-fail) in
                {312}let v_56: bool = not-caught-fail(server_hts) in
                {314}let h_20: bitstring = (if v_56 then zero else caught-fail) in
                {313}let l_20: label = (if v_56 then tls13_key else caught-fail) in
                {315}let x_20: bitstring = (if v_56 then (l_20,h_20) else caught-fail) in
                {316}let client_wkh: bitstring = (if v_56 then catch-fail(hmac(h_alg_7,client_hts,x_20)) else caught-fail) in
                {317}let v_57: bool = not-caught-fail(client_wkh) in
                {319}let h_21: bitstring = (if v_57 then zero else caught-fail) in
                {318}let l_21: label = (if v_57 then tls13_key else caught-fail) in
                {320}let x_21: bitstring = (if v_57 then (l_21,h_21) else caught-fail) in
                {321}let server_wkh: bitstring = (if v_57 then catch-fail(hmac(h_alg_7,server_hts,x_21)) else caught-fail) in
                {322}let v_58: bool = not-caught-fail(server_wkh) in
                {324}let h_22: bitstring = (if v_58 then zero else caught-fail) in
                {323}let l_22: label = (if v_58 then tls13_finished else caught-fail) in
                {325}let x_22: bitstring = (if v_58 then (l_22,h_22) else caught-fail) in
                {326}let client_fk: bitstring = (if v_58 then catch-fail(hmac(h_alg_7,client_hts,x_22)) else caught-fail) in
                {327}let v_59: bool = not-caught-fail(client_fk) in
                {329}let h_23: bitstring = (if v_59 then zero else caught-fail) in
                {328}let l_23: label = (if v_59 then tls13_finished else caught-fail) in
                {330}let x_23: bitstring = (if v_59 then (l_23,h_23) else caught-fail) in
                {331}let server_fk: bitstring = (if v_59 then catch-fail(hmac(h_alg_7,server_hts,x_23)) else caught-fail) in
                {332}let v_60: bool = not-caught-fail(server_fk) in
                {333}let (master_secret_8: bitstring,chk_7: aead_key,shk_7: aead_key,cfin_7: mac_key,sfin_7: mac_key) = (if v_51 then (if v_52 then (if v_54 then (if v_56 then (if v_57 then (if v_58 then (if v_59 then (if v_60 then (master_secret_7,client_wkh,server_wkh,client_fk,server_fk) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                {334}let ee_msg: msg = EE(encrypted_ext) in
                {335}let enc_ee: bitstring = aead_enc(a_alg_7,shk_7,zero,zero,ee_msg) in
                {336}out(io, enc_ee);
                {337}let cur_log_EE: bitstring = (cur_log_SH,ee_msg) in
                {338}if (psk_10 = NoPSK) then
                (
                    {339}if cert_req_4 then
                    (
                        {340}let crtr_msg: msg = CRTR(zero) in
                        {341}let enc_crt: bitstring = aead_enc(a_alg_7,shk_7,zero,zero,crtr_msg) in
                        {342}out(io, enc_crt);
                        {343}let cur_log_CRTR: bitstring = (cur_log_EE,crtr_msg) in
                        {344}out(ch_server_CRT, (id_server_3,cr_7,sr_7,h_alg_7,a_alg_7,s_dom_3,psk_10,cert_req_4,master_secret_8,chk_7,shk_7,cfin_7,sfin_7,cur_log_CRTR))
                    )
                    else
                        {345}out(ch_server_CRT, (id_server_3,cr_7,sr_7,h_alg_7,a_alg_7,s_dom_3,psk_10,cert_req_4,master_secret_8,chk_7,shk_7,cfin_7,sfin_7,cur_log_EE))
                )
                else
                    {346}out(ch_server_FIN, (id_server_3,cr_7,sr_7,h_alg_7,a_alg_7,psk_10,false,NoPubKey,master_secret_8,chk_7,shk_7,cfin_7,sfin_7,cur_log_EE))
            )
            else
                {347}out(io, illegal_parameter)
        )
        else
            {348}out(io, illegal_parameter)
    )
    else
        {349}out(io, handshake_failure)
) | (
    {350}!
    {351}in(io, a: domain);
    {352}event Same(a);
    {353}new s_4: seed;
    {354}let sk_h: privkey = uc_privkey(s_4) in
    {355}event GenCert(a,pk(sk_h));
    {356}insert long_term_keys(a,sk_h,pk(sk_h),valid_cert(a,pk(sk_h)));
    {357}out(io, pk(sk_h))
) | (
    {358}!
    {359}in(io, (c_dom_3: domain,s_dom_4: domain));
    {360}event Same((c_dom_3,s_dom_4));
    {361}new s_5: seed;
    {362}let psk_11: internal_preSharedKey = uc_psk(s_5) in
    {364}event GenPsk(c_dom_3,s_dom_4,PSK(psk_11));
    {363}let id_1: identityPsk = mk_idpsk(c_dom_3,s_dom_4,tls_h,psk_11) in
    {365}insert pre_shared_keys(c_dom_3,s_dom_4,tls_h,id_1,psk_11)
) | (
    {366}!
    {367}in(io, o_dom: domain);
    {368}new id_2: configId;
    {369}new s_6[]: seed;
    {6}let ech_g: group = id_g(StrongDH,2) in
    {370}let gx_1: element = dh_pub(ech_g,dh_k(s_6)) in
    {371}let (skR: bitstring,pkR: element) = (dh_k(s_6),gx_1) in
    {5}let ech_a: aead_alg = id_aead(StrongAE,2) in
    {4}let ech_h: hash_alg = id_hash(StrongHash,2) in
    {372}let config: echConfig = ech_config(id_2,ech_g,pkR,o_dom,ech_h,ech_a) in
    {373}insert ech_configurations(config,skR);
    {374}let config_1: echConfig = config in
    {375}out(io, config_1)
) | (
    {376}!
    {380}get pre_shared_keys(c_dom1: domain,s_dom1: domain,h_alg1: hash_alg,id1: identityPsk,psk1: internal_preSharedKey) in
    {379}get pre_shared_keys(c_dom2: domain,s_dom2: domain,h_alg2: hash_alg,id2: identityPsk,psk2: internal_preSharedKey) in
    {377}insert pre_shared_keys(choice[c_dom1,c_dom2],choice[s_dom1,s_dom2],choice[h_alg1,h_alg2],choice[id1,id2],choice[psk1,psk2]);
    {378}insert pre_shared_keys(choice[c_dom2,c_dom1],choice[s_dom2,s_dom1],choice[h_alg1,h_alg2],choice[id2,id1],choice[psk2,psk1])
) | (
    {381}!
    {385}get long_term_keys(dom1: domain,sk1: privkey,pk1: pubkey,cert1: certificate) in
    {384}get long_term_keys(dom2: domain,sk2: privkey,pk2: pubkey,cert2: certificate) in
    {382}insert long_term_keys(choice[dom1,dom2],choice[sk1,sk2],choice[pk1,pk2],choice[cert1,cert2]);
    {383}insert long_term_keys(choice[dom2,dom1],choice[sk2,sk1],choice[pk2,pk1],choice[cert2,cert1])
) | (
    {386}!
    {387}in(io, a_1: domain);
    {388}event Same(a_1);
    {389}new sk_d: privkey;
    {390}out(io, (sk_d,valid_cert(a_1,pk(sk_d))))
) | (
    {391}!
    {392}in(io, (c_dom_4: domain,s_dom_5: domain));
    {393}event Same((c_dom_4,s_dom_5));
    {394}new psk_d: internal_preSharedKey;
    {395}let id_3: identityPsk = mk_idpsk(c_dom_4,s_dom_5,tls_h,psk_d) in
    {396}insert pre_shared_keys(c_dom_4,s_dom_5,tls_h,id_3,psk_d);
    {397}out(io, id_3)
) | (
    {3}let tls_g: group = id_g(StrongDH,1) in
    {2}let tls_a: aead_alg = id_aead(StrongAE,1) in
    (
        {398}!
        {401}in(io, (c_dom_5: domain,s_dom_6: domain));
        {400}let send_kex: bool = true in
        {399}let use_psk_1: bool = false in
        {402}event Same((use_psk_1,send_kex,c_dom_5,s_dom_6));
        {404}new id_client_4[]: idProc;
        {405}event SanityClient(id_client_4,false,false,use_psk_1,send_kex);
        {407}new rand24_1[]: bytes24;
        {408}new rand8_1[]: bytes8;
        {410}new s_7[]: seed;
        {411}let gx_2: element = dh_pub(tls_g,dh_k(s_7)) in
        {412}let v_61: bitstring = (dh_k(s_7),gx_2) in
        {413}let v_62: bool = success?(1-proj-2-tuple(v_61)) in
        {414}let gx_3: element = (if v_62 then 2-proj-2-tuple(v_61) else caught-fail) in
        {415}let x_24: bitstring = (if v_62 then 1-proj-2-tuple(v_61) else caught-fail) in
        {416}let kex: kex_alg = (if v_62 then (if send_kex then DHE_kex(tls_g,gx_3) else DHE_group(tls_g)) else caught-fail) in
        {417}let (kex_ext_1: keyShareExt,kex_data: bitstring) = (if v_62 then (client_kex_ext(kex),(x_24,tls_g,send_kex)) else fail-any) in
        {738}get pre_shared_keys(c_dom'_1: domain,s_dom'_1: domain,=tls_h,id_4: identityPsk,internal_psk: internal_preSharedKey) in
        {419}event Selected_psk(c_dom_5,c_dom'_1,s_dom_6,s_dom'_1,id_4,internal_psk);
        {420}let v_63: bool = use_psk_1 in
        {421}let psk_12: preSharedKey = (if v_63 then PSK(internal_psk) else caught-fail) in
        {425}let k_4: bitstring = (if v_63 then catch-fail(psk2b(psk_12)) else caught-fail) in
        {426}let v_64: bool = not-caught-fail(k_4) in
        {424}let s_8: bitstring = (if v_63 then zero else caught-fail) in
        {427}let early_secret_5: bitstring = (if v_63 then catch-fail((if v_64 then hmac(tls_h,s_8,k_4) else fail-any)) else caught-fail) in
        {428}let v_65: bool = not-caught-fail(early_secret_5) in
        {430}let m_5: bitstring = (if v_65 then zero else caught-fail) in
        {431}let h_24: bitstring = (if v_65 then catch-fail(hash(tls_h,m_5)) else caught-fail) in
        {432}let v_66: bool = not-caught-fail(h_24) in
        {429}let l_24: label = (if v_65 then tls13_resumption_psk_binder_key else caught-fail) in
        {433}let x_25: bitstring = (if v_66 then (l_24,h_24) else caught-fail) in
        {434}let binder_key_3: bitstring = (if v_65 then catch-fail((if v_66 then hmac(tls_h,early_secret_5,x_25) else fail-any)) else caught-fail) in
        {435}let v_67: bool = not-caught-fail(binder_key_3) in
        {436}let v_68: bitstring = (if v_63 then catch-fail((if v_65 then (if v_67 then (early_secret_5,binder_key_3) else fail-any) else fail-any)) else caught-fail) in
        {437}let v_69: bool = (not-caught-fail(v_68) && success?(1-proj-2-tuple(v_68))) in
        {438}let kb_3: mac_key = (if v_69 then 2-proj-2-tuple(v_68) else caught-fail) in
        {439}let es_2: bitstring = (if v_69 then 1-proj-2-tuple(v_68) else caught-fail) in
        {442}let psk_13: preSharedKey = (if not(v_63) then NoPSK else caught-fail) in
        {444}let k_5: bitstring = (if not(v_63) then catch-fail(psk2b(psk_13)) else caught-fail) in
        {445}let v_71: bool = not-caught-fail(k_5) in
        {443}let s_9: bitstring = (if not(v_63) then zero else caught-fail) in
        {446}let early_secret_6: bitstring = (if not(v_63) then catch-fail((if v_71 then hmac(tls_h,s_9,k_5) else fail-any)) else caught-fail) in
        {447}let v_72: bool = not-caught-fail(early_secret_6) in
        {449}let m_6: bitstring = (if v_72 then zero else caught-fail) in
        {450}let h_25: bitstring = (if v_72 then catch-fail(hash(tls_h,m_6)) else caught-fail) in
        {451}let v_73: bool = not-caught-fail(h_25) in
        {448}let l_25: label = (if v_72 then tls13_resumption_psk_binder_key else caught-fail) in
        {452}let x_26: bitstring = (if v_73 then (l_25,h_25) else caught-fail) in
        {453}let binder_key_4: bitstring = (if v_72 then catch-fail((if v_73 then hmac(tls_h,early_secret_6,x_26) else fail-any)) else caught-fail) in
        {454}let v_74: bool = not-caught-fail(binder_key_4) in
        {455}let v_75: bitstring = (if not(v_63) then catch-fail((if v_72 then (if v_74 then (early_secret_6,binder_key_4) else fail-any) else fail-any)) else caught-fail) in
        {456}let v_76: bool = (not-caught-fail(v_75) && success?(1-proj-2-tuple(v_75))) in
        {457}let kb_4: mac_key = (if v_76 then 2-proj-2-tuple(v_75) else caught-fail) in
        {458}let es_3: bitstring = (if v_76 then 1-proj-2-tuple(v_75) else caught-fail) in
        {418}let ech_ext_2: echExt = empty_ech_ext in
        {403}let extra_2: extraExt = empty_extra_ext in
        {422}let offer_2: params = (if v_63 then nego(TLS13,tls_h,tls_a,kex_ext_1,SNI(s_dom_6),ech_ext_2,trunc_client_psk_ext(id_4),extra_2) else caught-fail) in
        {409}let cr_9: bytes32 = B32(rand24_1,rand8_1) in
        {406}let cur_log_8: bitstring = zero in
        {423}let cur_log'_2: bitstring = (if v_63 then (cur_log_8,CH(cr_9,offer_2)) else caught-fail) in
        {440}let binders_1: bitstring = (if v_69 then catch-fail(hmac(tls_h,kb_3,cur_log'_2)) else caught-fail) in
        {441}let v_70: bool = not-caught-fail(binders_1) in
        {459}let v_77: bitstring = catch-fail((if v_63 then (if v_69 then (if v_70 then (client_psk_ext(id_4,binders_1),(tls_h,psk_12,es_2)) else fail-any) else fail-any) else (if v_76 then (empty_psk_ext,(tls_h,NoPSK,es_3)) else fail-any))) in
        {460}let v_78: bool = (not-caught-fail(v_77) && success?(1-proj-2-tuple(v_77))) in
        {461}let psk_data: bitstring = (if v_78 then 2-proj-2-tuple(v_77) else caught-fail) in
        {462}let psk_ext_2: preSharedKeyExt = (if v_78 then 1-proj-2-tuple(v_77) else caught-fail) in
        {463}let offer_3: params = (if v_78 then nego(TLS13,tls_h,tls_a,kex_ext_1,SNI(s_dom_6),empty_ech_ext,psk_ext_2,extra_2) else caught-fail) in
        {464}let (client_hello_1: msg,cr_10: bytes32,kex_ext_2: keyShareExt,kex_data_1: bitstring,psk_data_1: bitstring) = (if v_78 then (CH(cr_9,offer_3),cr_9,kex_ext_1,kex_data,psk_data) else fail-any) in
        {465}out(io, client_hello_1);
        {467}let (=tls_h,psk_14: preSharedKey,es_4: bitstring) = psk_data_1 in
        {466}let cur_log2_4: bitstring = (cur_log_8,client_hello_1) in
        {468}event SanityClientCH(id_client_4,zero32,cr_10,c_dom_5,s_dom_6,psk_14,cur_log2_4);
        {469}in(io, server_hello_1: msg);
        {470}let SH(sr_8: bytes32,mode: params) = server_hello_1 in
        (
            {471}if (sr_8 = rand_HelloRetryRequest) then
            (
                {472}let (nego(=TLS13,=tls_h,=tls_a,hrr_kex_ext(=tls_g),=empty_sni_ext,=empty_ech_ext,=empty_psk_ext,srv_extra: extraExt),=false) = (mode,send_kex) in
                (
                    {473}let cur_log3_2: bitstring = (cur_log2_4,server_hello_1) in
                    {474}event SanityClientHRR(id_client_4,cr_10,c_dom_5,s_dom_6,cur_log3_2);
                    {476}new rand24_2[]: bytes24;
                    {477}new rand8_2[]: bytes8;
                    {479}new s_10[]: seed;
                    {480}let gx_4: element = dh_pub(tls_g,dh_k(s_10)) in
                    {481}let v_79: bitstring = (dh_k(s_10),gx_4) in
                    {482}let v_80: bool = success?(1-proj-2-tuple(v_79)) in
                    {483}let gx_5: element = (if v_80 then 2-proj-2-tuple(v_79) else caught-fail) in
                    {484}let x_27: bitstring = (if v_80 then 1-proj-2-tuple(v_79) else caught-fail) in
                    {475}let send_kex_1: bool = true in
                    {485}let kex_1: kex_alg = (if v_80 then (if send_kex_1 then DHE_kex(tls_g,gx_5) else DHE_group(tls_g)) else caught-fail) in
                    {486}let (kex_ext_3: keyShareExt,kex_data_2: bitstring) = (if v_80 then (client_kex_ext(kex_1),(x_27,tls_g,send_kex_1)) else fail-any) in
                    {638}get pre_shared_keys(c_dom'_2: domain,s_dom'_2: domain,=tls_h,id_5: identityPsk,internal_psk_1: internal_preSharedKey) in
                    {488}event Selected_psk(c_dom_5,c_dom'_2,s_dom_6,s_dom'_2,id_5,internal_psk_1);
                    {489}let v_81: bool = use_psk_1 in
                    {490}let psk_15: preSharedKey = (if v_81 then PSK(internal_psk_1) else caught-fail) in
                    {494}let k_6: bitstring = (if v_81 then catch-fail(psk2b(psk_15)) else caught-fail) in
                    {495}let v_82: bool = not-caught-fail(k_6) in
                    {493}let s_11: bitstring = (if v_81 then zero else caught-fail) in
                    {496}let early_secret_7: bitstring = (if v_81 then catch-fail((if v_82 then hmac(tls_h,s_11,k_6) else fail-any)) else caught-fail) in
                    {497}let v_83: bool = not-caught-fail(early_secret_7) in
                    {499}let m_7: bitstring = (if v_83 then zero else caught-fail) in
                    {500}let h_26: bitstring = (if v_83 then catch-fail(hash(tls_h,m_7)) else caught-fail) in
                    {501}let v_84: bool = not-caught-fail(h_26) in
                    {498}let l_26: label = (if v_83 then tls13_resumption_psk_binder_key else caught-fail) in
                    {502}let x_28: bitstring = (if v_84 then (l_26,h_26) else caught-fail) in
                    {503}let binder_key_5: bitstring = (if v_83 then catch-fail((if v_84 then hmac(tls_h,early_secret_7,x_28) else fail-any)) else caught-fail) in
                    {504}let v_85: bool = not-caught-fail(binder_key_5) in
                    {505}let v_86: bitstring = (if v_81 then catch-fail((if v_83 then (if v_85 then (early_secret_7,binder_key_5) else fail-any) else fail-any)) else caught-fail) in
                    {506}let v_87: bool = (not-caught-fail(v_86) && success?(1-proj-2-tuple(v_86))) in
                    {507}let kb_5: mac_key = (if v_87 then 2-proj-2-tuple(v_86) else caught-fail) in
                    {508}let es_5: bitstring = (if v_87 then 1-proj-2-tuple(v_86) else caught-fail) in
                    {511}let psk_16: preSharedKey = (if not(v_81) then NoPSK else caught-fail) in
                    {513}let k_7: bitstring = (if not(v_81) then catch-fail(psk2b(psk_16)) else caught-fail) in
                    {514}let v_89: bool = not-caught-fail(k_7) in
                    {512}let s_12: bitstring = (if not(v_81) then zero else caught-fail) in
                    {515}let early_secret_8: bitstring = (if not(v_81) then catch-fail((if v_89 then hmac(tls_h,s_12,k_7) else fail-any)) else caught-fail) in
                    {516}let v_90: bool = not-caught-fail(early_secret_8) in
                    {518}let m_8: bitstring = (if v_90 then zero else caught-fail) in
                    {519}let h_27: bitstring = (if v_90 then catch-fail(hash(tls_h,m_8)) else caught-fail) in
                    {520}let v_91: bool = not-caught-fail(h_27) in
                    {517}let l_27: label = (if v_90 then tls13_resumption_psk_binder_key else caught-fail) in
                    {521}let x_29: bitstring = (if v_91 then (l_27,h_27) else caught-fail) in
                    {522}let binder_key_6: bitstring = (if v_90 then catch-fail((if v_91 then hmac(tls_h,early_secret_8,x_29) else fail-any)) else caught-fail) in
                    {523}let v_92: bool = not-caught-fail(binder_key_6) in
                    {524}let v_93: bitstring = (if not(v_81) then catch-fail((if v_90 then (if v_92 then (early_secret_8,binder_key_6) else fail-any) else fail-any)) else caught-fail) in
                    {525}let v_94: bool = (not-caught-fail(v_93) && success?(1-proj-2-tuple(v_93))) in
                    {526}let kb_6: mac_key = (if v_94 then 2-proj-2-tuple(v_93) else caught-fail) in
                    {527}let es_6: bitstring = (if v_94 then 1-proj-2-tuple(v_93) else caught-fail) in
                    {487}let ech_ext_3: echExt = empty_ech_ext in
                    {491}let offer_4: params = (if v_81 then nego(TLS13,tls_h,tls_a,kex_ext_3,SNI(s_dom_6),ech_ext_3,trunc_client_psk_ext(id_5),extra_2) else caught-fail) in
                    {478}let cr_11: bytes32 = B32(rand24_2,rand8_2) in
                    {492}let cur_log'_3: bitstring = (if v_81 then (cur_log3_2,CH(cr_11,offer_4)) else caught-fail) in
                    {509}let binders_2: bitstring = (if v_87 then catch-fail(hmac(tls_h,kb_5,cur_log'_3)) else caught-fail) in
                    {510}let v_88: bool = not-caught-fail(binders_2) in
                    {528}let v_95: bitstring = catch-fail((if v_81 then (if v_87 then (if v_88 then (client_psk_ext(id_5,binders_2),(tls_h,psk_15,es_5)) else fail-any) else fail-any) else (if v_94 then (empty_psk_ext,(tls_h,NoPSK,es_6)) else fail-any))) in
                    {529}let v_96: bool = (not-caught-fail(v_95) && success?(1-proj-2-tuple(v_95))) in
                    {530}let psk_data_2: bitstring = (if v_96 then 2-proj-2-tuple(v_95) else caught-fail) in
                    {531}let psk_ext_3: preSharedKeyExt = (if v_96 then 1-proj-2-tuple(v_95) else caught-fail) in
                    {532}let offer_5: params = (if v_96 then nego(TLS13,tls_h,tls_a,kex_ext_3,SNI(s_dom_6),empty_ech_ext,psk_ext_3,extra_2) else caught-fail) in
                    {533}let (client_hello': msg,cr': bytes32,kex_ext': keyShareExt,kex_data': bitstring,psk_data': bitstring) = (if v_96 then (CH(cr_11,offer_5),cr_11,kex_ext_3,kex_data_2,psk_data_2) else fail-any) in
                    {534}out(io, client_hello');
                    {536}let (=tls_h,psk': preSharedKey,es': bitstring) = psk_data' in
                    {535}let cur_log4: bitstring = (cur_log3_2,client_hello') in
                    {537}event SanityClientCH(id_client_4,cr_10,cr',c_dom_5,s_dom_6,psk',cur_log4);
                    {538}in(io, server_hello': msg);
                    {539}let SH(sr': bytes32,mode': params) = server_hello' in
                    (
                        {540}if (sr' = rand_HelloRetryRequest) then
                            {541}out(io, unexpected_message)
                        else
                            {543}let SH(sr_9: bytes32,mode_1: params) = server_hello' in
                            {544}let (x_30: bitstring,g_1: group,=true) = kex_data' in
                            {545}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_1,gy_1: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_4: preSharedKeyExt,extra_3: extraExt) = mode_1 in
                            (
                                {547}let v_97: bool = (psk_ext_4 = empty_psk_ext) in
                                {548}let psk_17: preSharedKey = (if v_97 then NoPSK else caught-fail) in
                                {550}let k_8: bitstring = (if v_97 then catch-fail(psk2b(psk_17)) else caught-fail) in
                                {551}let v_98: bool = not-caught-fail(k_8) in
                                {549}let s_13: bitstring = (if v_97 then zero else caught-fail) in
                                {552}let early_secret_9: bitstring = (if v_97 then catch-fail((if v_98 then hmac(tls_h,s_13,k_8) else fail-any)) else caught-fail) in
                                {553}let v_99: bool = not-caught-fail(early_secret_9) in
                                {555}let m_9: bitstring = (if v_99 then zero else caught-fail) in
                                {556}let h_28: bitstring = (if v_99 then catch-fail(hash(tls_h,m_9)) else caught-fail) in
                                {557}let v_100: bool = not-caught-fail(h_28) in
                                {554}let l_28: label = (if v_99 then tls13_resumption_psk_binder_key else caught-fail) in
                                {558}let x_31: bitstring = (if v_100 then (l_28,h_28) else caught-fail) in
                                {559}let binder_key_7: bitstring = (if v_99 then catch-fail((if v_100 then hmac(tls_h,early_secret_9,x_31) else fail-any)) else caught-fail) in
                                {560}let v_101: bool = not-caught-fail(binder_key_7) in
                                {561}let v_102: bitstring = (if v_97 then catch-fail((if v_99 then (if v_101 then (early_secret_9,binder_key_7) else fail-any) else fail-any)) else caught-fail) in
                                {562}let v_103: bool = (not-caught-fail(v_102) && success?(1-proj-2-tuple(v_102))) in
                                {563}let kb_7: mac_key = (if v_103 then 2-proj-2-tuple(v_102) else caught-fail) in
                                {564}let es_7: bitstring = (if v_103 then 1-proj-2-tuple(v_102) else caught-fail) in
                                {565}let v_104: bitstring = (if not(v_97) then catch-fail(psk_data') else caught-fail) in
                                {566}let v_105: bool = (not-caught-fail(v_104) && success?(1-proj-3-tuple(v_104))) in
                                {567}let es_8: bitstring = (if v_105 then 3-proj-3-tuple(v_104) else caught-fail) in
                                {568}let psk_18: preSharedKey = (if v_105 then 2-proj-3-tuple(v_104) else caught-fail) in
                                {569}let h'_alg: hash_alg = (if v_105 then 1-proj-3-tuple(v_104) else caught-fail) in
                                {570}let (psk_19: preSharedKey,early_secret_10: bitstring,valid: bool) = (if v_97 then (if v_103 then (NoPSK,es_7,true) else fail-any) else (if v_105 then (psk_18,es_8,((h'_alg = tls_h) && ((server_psk_ext(1) = psk_ext_4) && use_psk_1))) else fail-any)) in
                                {571}if valid then
                                (
                                    {574}new s_14[]: seed;
                                    {577}let m_10: bitstring = catch-fail(hash(tls_h,zero)) in
                                    {578}let v_107: bool = not-caught-fail(m_10) in
                                    {579}let h_29: bitstring = (if v_107 then catch-fail(hash(tls_h,m_10)) else caught-fail) in
                                    {580}let v_108: bool = not-caught-fail(h_29) in
                                    {576}let l_29: label = tls13_derived in
                                    {581}let x_32: bitstring = (if v_108 then (l_29,h_29) else caught-fail) in
                                    {582}let extra_4: bitstring = catch-fail((if v_107 then (if v_108 then hmac(tls_h,early_secret_10,x_32) else fail-any) else fail-any)) in
                                    {583}let v_109: bool = not-caught-fail(extra_4) in
                                    {572}let gxy_1: element = catch-fail(dh_decap_fun(g_1,gy_1,x_30)) in
                                    {573}let v_106: bool = not-caught-fail(gxy_1) in
                                    {575}let gxy_2: element = (if v_106 then gxy_1 else dh_f(s_14)) in
                                    {584}let handshake_secret_1: bitstring = (if v_109 then hmac(tls_h,extra_4,gxy_2) else fail-any) in
                                    {546}let cur_log2_5: bitstring = (cur_log4,server_hello') in
                                    {542}let id_client_5: idProc = id_client_4 in
                                    {585}event SanityClientSH(id_client_5,cr',sr_9,c_dom_5,s_dom_6,handshake_secret_1,psk_19,cur_log2_5);
                                    {587}let m_11: bitstring = catch-fail(hash(tls_h,zero)) in
                                    {588}let v_110: bool = not-caught-fail(m_11) in
                                    {589}let h_30: bitstring = (if v_110 then catch-fail(hash(tls_h,m_11)) else caught-fail) in
                                    {590}let v_111: bool = not-caught-fail(h_30) in
                                    {586}let l_30: label = tls13_derived in
                                    {591}let x_33: bitstring = (if v_111 then (l_30,h_30) else caught-fail) in
                                    {592}let extra_5: bitstring = catch-fail((if v_110 then (if v_111 then hmac(tls_h,handshake_secret_1,x_33) else fail-any) else fail-any)) in
                                    {593}let v_112: bool = not-caught-fail(extra_5) in
                                    {594}let k_9: bitstring = (if v_112 then zero else caught-fail) in
                                    {595}let master_secret_9: bitstring = (if v_112 then catch-fail(hmac(tls_h,handshake_secret_1,k_9)) else caught-fail) in
                                    {596}let v_113: bool = not-caught-fail(master_secret_9) in
                                    {598}let h_31: bitstring = (if v_113 then catch-fail(hash(tls_h,cur_log2_5)) else caught-fail) in
                                    {599}let v_114: bool = not-caught-fail(h_31) in
                                    {597}let l_31: label = (if v_113 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {600}let x_34: bitstring = (if v_114 then (l_31,h_31) else caught-fail) in
                                    {601}let client_hts_1: bitstring = (if v_113 then catch-fail((if v_114 then hmac(tls_h,handshake_secret_1,x_34) else fail-any)) else caught-fail) in
                                    {602}let v_115: bool = not-caught-fail(client_hts_1) in
                                    {604}let h_32: bitstring = (if v_115 then catch-fail(hash(tls_h,cur_log2_5)) else caught-fail) in
                                    {605}let v_116: bool = not-caught-fail(h_32) in
                                    {603}let l_32: label = (if v_115 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {606}let x_35: bitstring = (if v_116 then (l_32,h_32) else caught-fail) in
                                    {607}let server_hts_1: bitstring = (if v_115 then catch-fail((if v_116 then hmac(tls_h,handshake_secret_1,x_35) else fail-any)) else caught-fail) in
                                    {608}let v_117: bool = not-caught-fail(server_hts_1) in
                                    {610}let h_33: bitstring = (if v_117 then zero else caught-fail) in
                                    {609}let l_33: label = (if v_117 then tls13_key else caught-fail) in
                                    {611}let x_36: bitstring = (if v_117 then (l_33,h_33) else caught-fail) in
                                    {612}let client_wkh_1: bitstring = (if v_117 then catch-fail(hmac(tls_h,client_hts_1,x_36)) else caught-fail) in
                                    {613}let v_118: bool = not-caught-fail(client_wkh_1) in
                                    {615}let h_34: bitstring = (if v_118 then zero else caught-fail) in
                                    {614}let l_34: label = (if v_118 then tls13_key else caught-fail) in
                                    {616}let x_37: bitstring = (if v_118 then (l_34,h_34) else caught-fail) in
                                    {617}let server_wkh_1: bitstring = (if v_118 then catch-fail(hmac(tls_h,server_hts_1,x_37)) else caught-fail) in
                                    {618}let v_119: bool = not-caught-fail(server_wkh_1) in
                                    {620}let h_35: bitstring = (if v_119 then zero else caught-fail) in
                                    {619}let l_35: label = (if v_119 then tls13_finished else caught-fail) in
                                    {621}let x_38: bitstring = (if v_119 then (l_35,h_35) else caught-fail) in
                                    {622}let client_fk_1: bitstring = (if v_119 then catch-fail(hmac(tls_h,client_hts_1,x_38)) else caught-fail) in
                                    {623}let v_120: bool = not-caught-fail(client_fk_1) in
                                    {625}let h_36: bitstring = (if v_120 then zero else caught-fail) in
                                    {624}let l_36: label = (if v_120 then tls13_finished else caught-fail) in
                                    {626}let x_39: bitstring = (if v_120 then (l_36,h_36) else caught-fail) in
                                    {627}let server_fk_1: bitstring = (if v_120 then catch-fail(hmac(tls_h,server_hts_1,x_39)) else caught-fail) in
                                    {628}let v_121: bool = not-caught-fail(server_fk_1) in
                                    {629}let (master_secret_10: bitstring,chk_8: aead_key,shk_8: aead_key,cfin_8: mac_key,sfin_8: mac_key) = (if v_112 then (if v_113 then (if v_115 then (if v_117 then (if v_118 then (if v_119 then (if v_120 then (if v_121 then (master_secret_9,client_wkh_1,server_wkh_1,client_fk_1,server_fk_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {630}in(io, enc_ee_msg: bitstring);
                                    {631}let ee_msg_1: msg = aead_dec(tls_a,shk_8,zero,zero,enc_ee_msg) in
                                    {632}let EE(x_40: bitstring) = ee_msg_1 in
                                    {633}let cur_log2_6: bitstring = (cur_log2_5,ee_msg_1) in
                                    {634}out(ch_client_after_EE, (id_client_5,cr',sr_9,tls_h,tls_a,c_dom_5,s_dom_6,psk_19,master_secret_10,chk_8,shk_8,cfin_8,sfin_8,cur_log2_6))
                                )
                                else
                                    {635}out(io, illegal_parameter)
                            )
                            else
                                {636}out(io, illegal_parameter)
                    )
                    else
                        {637}out(io, unexpected_message)
                )
                else
                    {639}out(io, illegal_parameter)
            )
            else
                {640}if send_kex then
                (
                    {642}let SH(sr_10: bytes32,mode_2: params) = server_hello_1 in
                    {643}let (x_41: bitstring,g_2: group,=true) = kex_data_1 in
                    {644}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_2,gy_2: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_5: preSharedKeyExt,extra_6: extraExt) = mode_2 in
                    (
                        {646}let v_122: bool = (psk_ext_5 = empty_psk_ext) in
                        {647}let psk_20: preSharedKey = (if v_122 then NoPSK else caught-fail) in
                        {649}let k_10: bitstring = (if v_122 then catch-fail(psk2b(psk_20)) else caught-fail) in
                        {650}let v_123: bool = not-caught-fail(k_10) in
                        {648}let s_15: bitstring = (if v_122 then zero else caught-fail) in
                        {651}let early_secret_11: bitstring = (if v_122 then catch-fail((if v_123 then hmac(tls_h,s_15,k_10) else fail-any)) else caught-fail) in
                        {652}let v_124: bool = not-caught-fail(early_secret_11) in
                        {654}let m_12: bitstring = (if v_124 then zero else caught-fail) in
                        {655}let h_37: bitstring = (if v_124 then catch-fail(hash(tls_h,m_12)) else caught-fail) in
                        {656}let v_125: bool = not-caught-fail(h_37) in
                        {653}let l_37: label = (if v_124 then tls13_resumption_psk_binder_key else caught-fail) in
                        {657}let x_42: bitstring = (if v_125 then (l_37,h_37) else caught-fail) in
                        {658}let binder_key_8: bitstring = (if v_124 then catch-fail((if v_125 then hmac(tls_h,early_secret_11,x_42) else fail-any)) else caught-fail) in
                        {659}let v_126: bool = not-caught-fail(binder_key_8) in
                        {660}let v_127: bitstring = (if v_122 then catch-fail((if v_124 then (if v_126 then (early_secret_11,binder_key_8) else fail-any) else fail-any)) else caught-fail) in
                        {661}let v_128: bool = (not-caught-fail(v_127) && success?(1-proj-2-tuple(v_127))) in
                        {662}let kb_8: mac_key = (if v_128 then 2-proj-2-tuple(v_127) else caught-fail) in
                        {663}let es_9: bitstring = (if v_128 then 1-proj-2-tuple(v_127) else caught-fail) in
                        {664}let v_129: bitstring = (if not(v_122) then catch-fail(psk_data_1) else caught-fail) in
                        {665}let v_130: bool = (not-caught-fail(v_129) && success?(1-proj-3-tuple(v_129))) in
                        {666}let es_10: bitstring = (if v_130 then 3-proj-3-tuple(v_129) else caught-fail) in
                        {667}let psk_21: preSharedKey = (if v_130 then 2-proj-3-tuple(v_129) else caught-fail) in
                        {668}let h'_alg_1: hash_alg = (if v_130 then 1-proj-3-tuple(v_129) else caught-fail) in
                        {669}let (psk_22: preSharedKey,early_secret_12: bitstring,valid_1: bool) = (if v_122 then (if v_128 then (NoPSK,es_9,true) else fail-any) else (if v_130 then (psk_21,es_10,((h'_alg_1 = tls_h) && ((server_psk_ext(1) = psk_ext_5) && use_psk_1))) else fail-any)) in
                        {670}if valid_1 then
                        (
                            {673}new s_16[]: seed;
                            {676}let m_13: bitstring = catch-fail(hash(tls_h,zero)) in
                            {677}let v_132: bool = not-caught-fail(m_13) in
                            {678}let h_38: bitstring = (if v_132 then catch-fail(hash(tls_h,m_13)) else caught-fail) in
                            {679}let v_133: bool = not-caught-fail(h_38) in
                            {675}let l_38: label = tls13_derived in
                            {680}let x_43: bitstring = (if v_133 then (l_38,h_38) else caught-fail) in
                            {681}let extra_7: bitstring = catch-fail((if v_132 then (if v_133 then hmac(tls_h,early_secret_12,x_43) else fail-any) else fail-any)) in
                            {682}let v_134: bool = not-caught-fail(extra_7) in
                            {671}let gxy_3: element = catch-fail(dh_decap_fun(g_2,gy_2,x_41)) in
                            {672}let v_131: bool = not-caught-fail(gxy_3) in
                            {674}let gxy_4: element = (if v_131 then gxy_3 else dh_f(s_16)) in
                            {683}let handshake_secret_2: bitstring = (if v_134 then hmac(tls_h,extra_7,gxy_4) else fail-any) in
                            {645}let cur_log2_7: bitstring = (cur_log2_4,server_hello_1) in
                            {641}let id_client_6: idProc = id_client_4 in
                            {684}event SanityClientSH(id_client_6,cr_10,sr_10,c_dom_5,s_dom_6,handshake_secret_2,psk_22,cur_log2_7);
                            {686}let m_14: bitstring = catch-fail(hash(tls_h,zero)) in
                            {687}let v_135: bool = not-caught-fail(m_14) in
                            {688}let h_39: bitstring = (if v_135 then catch-fail(hash(tls_h,m_14)) else caught-fail) in
                            {689}let v_136: bool = not-caught-fail(h_39) in
                            {685}let l_39: label = tls13_derived in
                            {690}let x_44: bitstring = (if v_136 then (l_39,h_39) else caught-fail) in
                            {691}let extra_8: bitstring = catch-fail((if v_135 then (if v_136 then hmac(tls_h,handshake_secret_2,x_44) else fail-any) else fail-any)) in
                            {692}let v_137: bool = not-caught-fail(extra_8) in
                            {693}let k_11: bitstring = (if v_137 then zero else caught-fail) in
                            {694}let master_secret_11: bitstring = (if v_137 then catch-fail(hmac(tls_h,handshake_secret_2,k_11)) else caught-fail) in
                            {695}let v_138: bool = not-caught-fail(master_secret_11) in
                            {697}let h_40: bitstring = (if v_138 then catch-fail(hash(tls_h,cur_log2_7)) else caught-fail) in
                            {698}let v_139: bool = not-caught-fail(h_40) in
                            {696}let l_40: label = (if v_138 then tls13_client_handshake_traffic_secret else caught-fail) in
                            {699}let x_45: bitstring = (if v_139 then (l_40,h_40) else caught-fail) in
                            {700}let client_hts_2: bitstring = (if v_138 then catch-fail((if v_139 then hmac(tls_h,handshake_secret_2,x_45) else fail-any)) else caught-fail) in
                            {701}let v_140: bool = not-caught-fail(client_hts_2) in
                            {703}let h_41: bitstring = (if v_140 then catch-fail(hash(tls_h,cur_log2_7)) else caught-fail) in
                            {704}let v_141: bool = not-caught-fail(h_41) in
                            {702}let l_41: label = (if v_140 then tls13_server_handshake_traffic_secret else caught-fail) in
                            {705}let x_46: bitstring = (if v_141 then (l_41,h_41) else caught-fail) in
                            {706}let server_hts_2: bitstring = (if v_140 then catch-fail((if v_141 then hmac(tls_h,handshake_secret_2,x_46) else fail-any)) else caught-fail) in
                            {707}let v_142: bool = not-caught-fail(server_hts_2) in
                            {709}let h_42: bitstring = (if v_142 then zero else caught-fail) in
                            {708}let l_42: label = (if v_142 then tls13_key else caught-fail) in
                            {710}let x_47: bitstring = (if v_142 then (l_42,h_42) else caught-fail) in
                            {711}let client_wkh_2: bitstring = (if v_142 then catch-fail(hmac(tls_h,client_hts_2,x_47)) else caught-fail) in
                            {712}let v_143: bool = not-caught-fail(client_wkh_2) in
                            {714}let h_43: bitstring = (if v_143 then zero else caught-fail) in
                            {713}let l_43: label = (if v_143 then tls13_key else caught-fail) in
                            {715}let x_48: bitstring = (if v_143 then (l_43,h_43) else caught-fail) in
                            {716}let server_wkh_2: bitstring = (if v_143 then catch-fail(hmac(tls_h,server_hts_2,x_48)) else caught-fail) in
                            {717}let v_144: bool = not-caught-fail(server_wkh_2) in
                            {719}let h_44: bitstring = (if v_144 then zero else caught-fail) in
                            {718}let l_44: label = (if v_144 then tls13_finished else caught-fail) in
                            {720}let x_49: bitstring = (if v_144 then (l_44,h_44) else caught-fail) in
                            {721}let client_fk_2: bitstring = (if v_144 then catch-fail(hmac(tls_h,client_hts_2,x_49)) else caught-fail) in
                            {722}let v_145: bool = not-caught-fail(client_fk_2) in
                            {724}let h_45: bitstring = (if v_145 then zero else caught-fail) in
                            {723}let l_45: label = (if v_145 then tls13_finished else caught-fail) in
                            {725}let x_50: bitstring = (if v_145 then (l_45,h_45) else caught-fail) in
                            {726}let server_fk_2: bitstring = (if v_145 then catch-fail(hmac(tls_h,server_hts_2,x_50)) else caught-fail) in
                            {727}let v_146: bool = not-caught-fail(server_fk_2) in
                            {728}let (master_secret_12: bitstring,chk_9: aead_key,shk_9: aead_key,cfin_9: mac_key,sfin_9: mac_key) = (if v_137 then (if v_138 then (if v_140 then (if v_142 then (if v_143 then (if v_144 then (if v_145 then (if v_146 then (master_secret_11,client_wkh_2,server_wkh_2,client_fk_2,server_fk_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                            {729}in(io, enc_ee_msg_1: bitstring);
                            {730}let ee_msg_2: msg = aead_dec(tls_a,shk_9,zero,zero,enc_ee_msg_1) in
                            {731}let EE(x_51: bitstring) = ee_msg_2 in
                            {732}let cur_log2_8: bitstring = (cur_log2_7,ee_msg_2) in
                            {733}out(ch_client_after_EE, (id_client_6,cr_10,sr_10,tls_h,tls_a,c_dom_5,s_dom_6,psk_22,master_secret_12,chk_9,shk_9,cfin_9,sfin_9,cur_log2_8))
                        )
                        else
                            {734}out(io, illegal_parameter)
                    )
                    else
                        {735}out(io, illegal_parameter)
                )
                else
                    {736}out(io, illegal_parameter)
        )
        else
            {737}out(io, unexpected_message)
    ) | (
        {739}!
        {740}in(io, x_52: extraExt);
        {741}in(io, x': extraExt);
        {746}in(io, (c_dom_6: domain,cfs_dom: domain,backend_dom: domain));
        {745}let send_kex_2: bool = true in
        {744}let use_psk_2: bool = false in
        {743}let use_grease: bool = false in
        {747}event Same((use_grease,use_psk_2,send_kex_2,c_dom_6,cfs_dom,backend_dom));
        {1094}get ech_configurations(ech_config(id_6: configId,g_3: group,pkR_1: element,=cfs_dom,h_alg_9: hash_alg,a_alg_9: aead_alg),skR_1: bitstring) in
        {750}new id_client_7[]: idProc;
        {751}event SanityClient(id_client_7,true,use_grease,use_psk_2,send_kex_2);
        {752}if not((use_grease && use_psk_2)) then
        {754}new s_17[]: seed;
        {755}let gx_6: element = dh_pub(tls_g,dh_k(s_17)) in
        {756}let v_147: bitstring = (dh_k(s_17),gx_6) in
        {757}let v_148: bool = success?(1-proj-2-tuple(v_147)) in
        {758}let i_gx: element = (if v_148 then 2-proj-2-tuple(v_147) else caught-fail) in
        {759}let i_x: bitstring = (if v_148 then 1-proj-2-tuple(v_147) else caught-fail) in
        {760}new s_18[]: seed;
        {761}let gx_7: element = (if v_148 then dh_pub(tls_g,dh_k(s_18)) else caught-fail) in
        {762}let v_149: bitstring = (if v_148 then catch-fail((dh_k(s_18),gx_7)) else caught-fail) in
        {763}let v_150: bool = (not-caught-fail(v_149) && success?(1-proj-2-tuple(v_149))) in
        {764}let o_gx: element = (if v_150 then 2-proj-2-tuple(v_149) else caught-fail) in
        {765}let o_x: bitstring = (if v_150 then 1-proj-2-tuple(v_149) else caught-fail) in
        {766}let v_151: bitstring = (if v_150 then catch-fail((if send_kex_2 then (DHE_kex(tls_g,i_gx),DHE_kex(tls_g,o_gx)) else (DHE_group(tls_g),DHE_group(tls_g)))) else caught-fail) in
        {767}let v_152: bool = (not-caught-fail(v_151) && success?(1-proj-2-tuple(v_151))) in
        {768}let o_kex: kex_alg = (if v_152 then 2-proj-2-tuple(v_151) else caught-fail) in
        {769}let i_kex: kex_alg = (if v_152 then 1-proj-2-tuple(v_151) else caught-fail) in
        {770}let (i_kex_ext: keyShareExt,o_kex_ext: keyShareExt,kex_data_3: bitstring) = (if v_148 then (if v_150 then (if v_152 then (client_kex_ext(i_kex),client_kex_ext(o_kex),(i_x,o_x,tls_g,send_kex_2)) else fail-any) else fail-any) else fail-any) in
        {771}new rand24_3[]: bytes24;
        {772}new rand8_3[]: bytes8;
        {1093}get pre_shared_keys(c_dom'_3: domain,s_dom'_3: domain,=tls_h,id_7: identityPsk,internal_psk_2: internal_preSharedKey) in
        {775}event Selected_psk(c_dom_6,c_dom'_3,backend_dom,s_dom'_3,id_7,internal_psk_2);
        {776}let v_153: bool = use_psk_2 in
        {777}let psk_23: preSharedKey = (if v_153 then PSK(internal_psk_2) else caught-fail) in
        {781}let k_12: bitstring = (if v_153 then catch-fail(psk2b(psk_23)) else caught-fail) in
        {782}let v_154: bool = not-caught-fail(k_12) in
        {780}let s_19: bitstring = (if v_153 then zero else caught-fail) in
        {783}let early_secret_13: bitstring = (if v_153 then catch-fail((if v_154 then hmac(tls_h,s_19,k_12) else fail-any)) else caught-fail) in
        {784}let v_155: bool = not-caught-fail(early_secret_13) in
        {786}let m_15: bitstring = (if v_155 then zero else caught-fail) in
        {787}let h_46: bitstring = (if v_155 then catch-fail(hash(tls_h,m_15)) else caught-fail) in
        {788}let v_156: bool = not-caught-fail(h_46) in
        {785}let l_46: label = (if v_155 then tls13_resumption_psk_binder_key else caught-fail) in
        {789}let x_53: bitstring = (if v_156 then (l_46,h_46) else caught-fail) in
        {790}let binder_key_9: bitstring = (if v_155 then catch-fail((if v_156 then hmac(tls_h,early_secret_13,x_53) else fail-any)) else caught-fail) in
        {791}let v_157: bool = not-caught-fail(binder_key_9) in
        {792}let v_158: bitstring = (if v_153 then catch-fail((if v_155 then (if v_157 then (early_secret_13,binder_key_9) else fail-any) else fail-any)) else caught-fail) in
        {793}let v_159: bool = (not-caught-fail(v_158) && success?(1-proj-2-tuple(v_158))) in
        {794}let kb_9: mac_key = (if v_159 then 2-proj-2-tuple(v_158) else caught-fail) in
        {795}let es_11: bitstring = (if v_159 then 1-proj-2-tuple(v_158) else caught-fail) in
        {798}let psk_24: preSharedKey = (if not(v_153) then NoPSK else caught-fail) in
        {800}let k_13: bitstring = (if not(v_153) then catch-fail(psk2b(psk_24)) else caught-fail) in
        {801}let v_161: bool = not-caught-fail(k_13) in
        {799}let s_20: bitstring = (if not(v_153) then zero else caught-fail) in
        {802}let early_secret_14: bitstring = (if not(v_153) then catch-fail((if v_161 then hmac(tls_h,s_20,k_13) else fail-any)) else caught-fail) in
        {803}let v_162: bool = not-caught-fail(early_secret_14) in
        {805}let m_16: bitstring = (if v_162 then zero else caught-fail) in
        {806}let h_47: bitstring = (if v_162 then catch-fail(hash(tls_h,m_16)) else caught-fail) in
        {807}let v_163: bool = not-caught-fail(h_47) in
        {804}let l_47: label = (if v_162 then tls13_resumption_psk_binder_key else caught-fail) in
        {808}let x_54: bitstring = (if v_163 then (l_47,h_47) else caught-fail) in
        {809}let binder_key_10: bitstring = (if v_162 then catch-fail((if v_163 then hmac(tls_h,early_secret_14,x_54) else fail-any)) else caught-fail) in
        {810}let v_164: bool = not-caught-fail(binder_key_10) in
        {811}let v_165: bitstring = (if not(v_153) then catch-fail((if v_162 then (if v_164 then (early_secret_14,binder_key_10) else fail-any) else fail-any)) else caught-fail) in
        {812}let v_166: bool = (not-caught-fail(v_165) && success?(1-proj-2-tuple(v_165))) in
        {813}let kb_10: mac_key = (if v_166 then 2-proj-2-tuple(v_165) else caught-fail) in
        {814}let es_12: bitstring = (if v_166 then 1-proj-2-tuple(v_165) else caught-fail) in
        {774}let ech_ext_4: echExt = ech_is_inner in
        {742}let inner_ext: extraExt = choice[x_52,x'] in
        {778}let offer_6: params = (if v_153 then nego(TLS13,tls_h,tls_a,i_kex_ext,SNI(backend_dom),ech_ext_4,trunc_client_psk_ext(id_7),inner_ext) else caught-fail) in
        {773}let i_cr: bytes32 = B32(rand24_3,rand8_3) in
        {753}let i_cur_log: bitstring = zero in
        {779}let cur_log'_4: bitstring = (if v_153 then (i_cur_log,CH(i_cr,offer_6)) else caught-fail) in
        {796}let binders_3: bitstring = (if v_159 then catch-fail(hmac(tls_h,kb_9,cur_log'_4)) else caught-fail) in
        {797}let v_160: bool = not-caught-fail(binders_3) in
        {815}let v_167: bitstring = catch-fail((if v_153 then (if v_159 then (if v_160 then (client_psk_ext(id_7,binders_3),(tls_h,psk_23,es_11)) else fail-any) else fail-any) else (if v_166 then (empty_psk_ext,(tls_h,NoPSK,es_12)) else fail-any))) in
        {816}let v_168: bool = (not-caught-fail(v_167) && success?(1-proj-2-tuple(v_167))) in
        {817}let psk_data_3: bitstring = (if v_168 then 2-proj-2-tuple(v_167) else caught-fail) in
        {818}let psk_ext_6: preSharedKeyExt = (if v_168 then 1-proj-2-tuple(v_167) else caught-fail) in
        {748}let ech_conf: echConfig = ech_config(id_6,g_3,pkR_1,cfs_dom,h_alg_9,a_alg_9) in
        {821}let v_169: echConfig = (if v_168 then catch-fail(ech_conf) else caught-fail) in
        {822}let v_170: bool = (not-caught-fail(v_169) && success?(1-proj-ech_config(v_169))) in
        {823}let a_alg_ech: aead_alg = (if v_170 then 6-proj-ech_config(v_169) else caught-fail) in
        {824}let h_alg_ech: hash_alg = (if v_170 then 5-proj-ech_config(v_169) else caught-fail) in
        {825}let o_dom_1: domain = (if v_170 then 4-proj-ech_config(v_169) else caught-fail) in
        {826}let pkR_2: element = (if v_170 then 3-proj-ech_config(v_169) else caught-fail) in
        {827}let g_ech: group = (if v_170 then 2-proj-ech_config(v_169) else caught-fail) in
        {828}let config_id: configId = (if v_170 then 1-proj-ech_config(v_169) else caught-fail) in
        {830}new s_21[]: seed;
        {831}let v_171: bitstring = (if v_170 then catch-fail((dh_xy(s_21,pkR_2),dh_encap_fun(g_ech,pkR_2,dh_xy(s_21,pkR_2)))) else caught-fail) in
        {832}let v_172: bool = (not-caught-fail(v_171) && success?(1-proj-2-tuple(v_171))) in
        {833}let enc: element = (if v_172 then 2-proj-2-tuple(v_171) else caught-fail) in
        {834}let shared_secret: element = (if v_172 then 1-proj-2-tuple(v_171) else caught-fail) in
        {829}let info: bitstring = (if v_170 then (tls_ech_str,ech_conf) else caught-fail) in
        {837}let k_14: bitstring = (if v_172 then (hpke_info_hash,info) else caught-fail) in
        {836}let s_22: bitstring = (if v_172 then zero else caught-fail) in
        {838}let info_hash: bitstring = (if v_172 then catch-fail(hmac(h_alg_ech,s_22,k_14)) else caught-fail) in
        {839}let v_173: bool = not-caught-fail(info_hash) in
        {840}let k_15: bitstring = (if v_173 then (hpke_secret,zero) else caught-fail) in
        {841}let xsecret: bitstring = (if v_173 then catch-fail(hmac(h_alg_ech,shared_secret,k_15)) else caught-fail) in
        {842}let v_174: bool = not-caught-fail(xsecret) in
        {843}let l_48: label = (if v_174 then hpke_key else caught-fail) in
        {844}let x_55: bitstring = (if v_174 then (l_48,info_hash) else caught-fail) in
        {845}let key: aead_key = (if v_174 then catch-fail(hmac(h_alg_ech,xsecret,x_55)) else caught-fail) in
        {846}let v_175: bool = not-caught-fail(key) in
        {847}let l_49: label = (if v_175 then hpke_base_nonce else caught-fail) in
        {848}let x_56: bitstring = (if v_175 then (l_49,info_hash) else caught-fail) in
        {849}let base_nonce: bitstring = (if v_175 then catch-fail(hmac(h_alg_ech,xsecret,x_56)) else caught-fail) in
        {850}let v_176: bool = not-caught-fail(base_nonce) in
        {851}let l_50: label = (if v_176 then hpke_exp else caught-fail) in
        {852}let x_57: bitstring = (if v_176 then (l_50,info_hash) else caught-fail) in
        {853}let exporter_secret: bitstring = (if v_176 then catch-fail(hmac(h_alg_ech,xsecret,x_57)) else caught-fail) in
        {854}let v_177: bool = not-caught-fail(exporter_secret) in
        {835}let m_17: hpkeMode = (if v_172 then S else caught-fail) in
        {855}let v_178: bitstring = (if v_170 then catch-fail((if v_172 then (enc,(if v_173 then (if v_174 then (if v_175 then (if v_176 then (if v_177 then hpke_context(m_17,key) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) else fail-any)) else caught-fail) in
        {856}let v_179: bool = (not-caught-fail(v_178) && success?(1-proj-2-tuple(v_178))) in
        {857}let context: hpkeContext = (if v_179 then 2-proj-2-tuple(v_178) else caught-fail) in
        {858}let enc_1: element = (if v_179 then 1-proj-2-tuple(v_178) else caught-fail) in
        {859}new rand24_4[]: bytes24;
        {860}new rand8_4[]: bytes8;
        {863}new payload[]: bitstring;
        {862}let v_180: bool = (if v_179 then catch-fail(use_grease) else caught-fail) in
        {866}let dummy_ech_ext: echExt = (if is-false(v_180) then client_ECH(h_alg_ech,a_alg_ech,config_id,enc_1,zero) else caught-fail) in
        {749}let o_extra: extraExt = empty_extra_ext in
        {867}let o_offer1: params = (if is-false(v_180) then nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom_1),dummy_ech_ext,empty_psk_ext,o_extra) else caught-fail) in
        {861}let o_cr: bytes32 = (if v_179 then B32(rand24_4,rand8_4) else caught-fail) in
        {868}let o_client_hello1: msg = (if is-false(v_180) then CH(o_cr,o_offer1) else caught-fail) in
        {869}let v_181: msg = (if is-false(v_180) then catch-fail(o_client_hello1) else caught-fail) in
        {870}let v_182: bool = (not-caught-fail(v_181) && (success?(1-proj-nego(2-proj-CH(v_181))) && success?(1-proj-CH(v_181)))) in
        {871}let extra_9: extraExt = (if v_182 then 8-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {872}let psk_ext_7: preSharedKeyExt = (if v_182 then 7-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {873}let ech_ext_6: echExt = (if v_182 then 6-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {874}let sni_ext_2: sniExt = (if v_182 then 5-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {875}let kex_ext_4: keyShareExt = (if v_182 then 4-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {876}let a_alg_10: aead_alg = (if v_182 then 3-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {877}let h_alg_10: hash_alg = (if v_182 then 2-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {878}let version: TLS_version = (if v_182 then 1-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {879}let r: bytes32 = (if v_182 then 1-proj-CH(v_181) else caught-fail) in
        {880}let v_183: echExt = (if v_182 then catch-fail(ech_ext_6) else caught-fail) in
        {881}let v_184: bool = (not-caught-fail(v_183) && success?(1-proj-client_ECH(v_183))) in
        {882}let payload_1: bitstring = (if v_184 then 5-proj-client_ECH(v_183) else caught-fail) in
        {883}let enc_2: element = (if v_184 then 4-proj-client_ECH(v_183) else caught-fail) in
        {884}let config_id_1: configId = (if v_184 then 3-proj-client_ECH(v_183) else caught-fail) in
        {885}let a_alg_ech_1: aead_alg = (if v_184 then 2-proj-client_ECH(v_183) else caught-fail) in
        {886}let h_alg_ech_1: hash_alg = (if v_184 then 1-proj-client_ECH(v_183) else caught-fail) in
        {887}let client_hello_outer': msg = (if v_184 then CH(r,nego(version,h_alg_10,a_alg_10,kex_ext_4,sni_ext_2,empty_ech_ext,psk_ext_7,extra_9)) else caught-fail) in
        {888}let client_hello_AAD: ClientHelloOuterAAD = (if is-false(v_180) then catch-fail((if v_182 then (if v_184 then client_hello_outer_AAD(h_alg_ech_1,a_alg_ech_1,config_id_1,enc_2,client_hello_outer') else fail-any) else fail-any)) else caught-fail) in
        {889}let v_185: bool = not-caught-fail(client_hello_AAD) in
        {890}let v_186: hpkeContext = (if v_185 then catch-fail(context) else caught-fail) in
        {891}let v_187: bool = (not-caught-fail(v_186) && ((S =nf 1-proj-hpke_context(v_186)) && success?(1-proj-hpke_context(v_186)))) in
        {892}let key_1: aead_key = (if v_187 then 2-proj-hpke_context(v_186) else caught-fail) in
        {819}let i_offer: params = (if v_168 then nego(TLS13,tls_h,tls_a,i_kex_ext,SNI(backend_dom),ech_is_inner,psk_ext_6,inner_ext) else caught-fail) in
        {820}let i_client_hello: msg = (if v_168 then CH(i_cr,i_offer) else caught-fail) in
        {893}let payload_2: bitstring = (if v_185 then catch-fail((if v_187 then aead_enc(a_alg_ech,key_1,nonce_for_seal_open,client_hello_AAD,i_client_hello) else fail-any)) else caught-fail) in
        {894}let v_188: bool = not-caught-fail(payload_2) in
        {895}let ech_ext_7: echExt = (if v_188 then client_ECH(h_alg_ech,a_alg_ech,config_id,enc_1,payload_2) else caught-fail) in
        {896}let o_offer_1: params = (if v_188 then nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom_1),ech_ext_7,empty_psk_ext,o_extra) else caught-fail) in
        {864}let ech_ext_5: echExt = (if v_180 then client_ECH(h_alg_ech,a_alg_ech,config_id,enc_1,payload) else caught-fail) in
        {865}let o_offer: params = (if v_180 then nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom_1),ech_ext_5,empty_psk_ext,o_extra) else caught-fail) in
        {897}let (o_client_hello: msg,i_client_hello_1: msg,i_cr_1: bytes32,o_cr_1: bytes32,i_kex_ext_1: keyShareExt,o_kex_ext_1: keyShareExt,kex_data_4: bitstring,psk_data_4: bitstring) = (if v_168 then (if v_170 then (if v_179 then (if undo-catch-fail(v_180) then (CH(o_cr,o_offer),CH(o_cr,o_offer),o_cr,o_cr,o_kex_ext,o_kex_ext,kex_data_3,psk_data_3) else (if v_185 then (if v_188 then (CH(o_cr,o_offer_1),i_client_hello,i_cr,o_cr,i_kex_ext,o_kex_ext,kex_data_3,psk_data_3) else fail-any) else fail-any)) else fail-any) else fail-any) else fail-any) in
        {898}out(io, o_client_hello);
        {899}let (=tls_h,psk_25: preSharedKey,es_13: bitstring) = psk_data_4 in
        {900}let v_189: echConfig = ech_conf in
        {901}let v_190: bool = success?(1-proj-ech_config(v_189)) in
        {902}let al: aead_alg = (if v_190 then 6-proj-ech_config(v_189) else caught-fail) in
        {903}let hl: hash_alg = (if v_190 then 5-proj-ech_config(v_189) else caught-fail) in
        {904}let dom: domain = (if v_190 then 4-proj-ech_config(v_189) else caught-fail) in
        {905}let public_key: element = (if v_190 then 3-proj-ech_config(v_189) else caught-fail) in
        {906}let g_4: group = (if v_190 then 2-proj-ech_config(v_189) else caught-fail) in
        {907}let id_8: configId = (if v_190 then 1-proj-ech_config(v_189) else caught-fail) in
        {908}let o_dom_2: domain = (if v_190 then dom else fail-any) in
        {909}let v_191: echConfig = ech_conf in
        {910}let v_192: bool = success?(1-proj-ech_config(v_191)) in
        {911}let al_1: aead_alg = (if v_192 then 6-proj-ech_config(v_191) else caught-fail) in
        {912}let hl_1: hash_alg = (if v_192 then 5-proj-ech_config(v_191) else caught-fail) in
        {913}let dom_1: domain = (if v_192 then 4-proj-ech_config(v_191) else caught-fail) in
        {914}let public_key_1: element = (if v_192 then 3-proj-ech_config(v_191) else caught-fail) in
        {915}let g_5: group = (if v_192 then 2-proj-ech_config(v_191) else caught-fail) in
        {916}let id_9: configId = (if v_192 then 1-proj-ech_config(v_191) else caught-fail) in
        {917}let ech_pk: element = (if v_192 then public_key_1 else fail-any) in
        {918}event SanityClientCH_ECH(id_client_7,zero32,i_cr_1,o_cr_1,c_dom_6,o_dom_2,backend_dom,ech_pk,psk_25,(zero,o_client_hello),(zero,i_client_hello_1));
        {919}in(io, server_hello_2: msg);
        {920}let SH(sr_11: bytes32,mode_3: params) = server_hello_2 in
        (
            {921}if (sr_11 = rand_HelloRetryRequest) then
                {922}out(io, illegal_parameter)
            else
                {923}let v_193: echConfig = ech_conf in
                {924}let v_194: bool = success?(1-proj-ech_config(v_193)) in
                {925}let al_2: aead_alg = (if v_194 then 6-proj-ech_config(v_193) else caught-fail) in
                {926}let hl_2: hash_alg = (if v_194 then 5-proj-ech_config(v_193) else caught-fail) in
                {927}let dom_2: domain = (if v_194 then 4-proj-ech_config(v_193) else caught-fail) in
                {928}let public_key_2: element = (if v_194 then 3-proj-ech_config(v_193) else caught-fail) in
                {929}let g_6: group = (if v_194 then 2-proj-ech_config(v_193) else caught-fail) in
                {930}let id_10: configId = (if v_194 then 1-proj-ech_config(v_193) else caught-fail) in
                {932}let o_dom_3: domain = (if v_194 then dom_2 else fail-any) in
                {935}let SH(B32(sr24_1: bytes24,sr8_1: bytes8),mode_4: params) = server_hello_2 in
                {936}let (i_x_1: bitstring,o_x_1: bitstring,g_7: group,=true) = kex_data_4 in
                {937}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_7,gy_srv: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_8: preSharedKeyExt,extra_10: extraExt) = mode_4 in
                (
                    {938}let v_195: bool = (psk_ext_8 = empty_psk_ext) in
                    {939}let psk_26: preSharedKey = (if v_195 then NoPSK else caught-fail) in
                    {941}let k_16: bitstring = (if v_195 then catch-fail(psk2b(psk_26)) else caught-fail) in
                    {942}let v_196: bool = not-caught-fail(k_16) in
                    {940}let s_23: bitstring = (if v_195 then zero else caught-fail) in
                    {943}let early_secret_15: bitstring = (if v_195 then catch-fail((if v_196 then hmac(tls_h,s_23,k_16) else fail-any)) else caught-fail) in
                    {944}let v_197: bool = not-caught-fail(early_secret_15) in
                    {946}let m_18: bitstring = (if v_197 then zero else caught-fail) in
                    {947}let h_48: bitstring = (if v_197 then catch-fail(hash(tls_h,m_18)) else caught-fail) in
                    {948}let v_198: bool = not-caught-fail(h_48) in
                    {945}let l_51: label = (if v_197 then tls13_resumption_psk_binder_key else caught-fail) in
                    {949}let x_58: bitstring = (if v_198 then (l_51,h_48) else caught-fail) in
                    {950}let binder_key_11: bitstring = (if v_197 then catch-fail((if v_198 then hmac(tls_h,early_secret_15,x_58) else fail-any)) else caught-fail) in
                    {951}let v_199: bool = not-caught-fail(binder_key_11) in
                    {952}let v_200: bitstring = (if v_195 then catch-fail((if v_197 then (if v_199 then (early_secret_15,binder_key_11) else fail-any) else fail-any)) else caught-fail) in
                    {953}let v_201: bool = (not-caught-fail(v_200) && success?(1-proj-2-tuple(v_200))) in
                    {954}let kb_11: mac_key = (if v_201 then 2-proj-2-tuple(v_200) else caught-fail) in
                    {955}let es_14: bitstring = (if v_201 then 1-proj-2-tuple(v_200) else caught-fail) in
                    {956}let v_202: bitstring = (if not(v_195) then catch-fail(psk_data_4) else caught-fail) in
                    {957}let v_203: bool = (not-caught-fail(v_202) && success?(1-proj-3-tuple(v_202))) in
                    {958}let es_15: bitstring = (if v_203 then 3-proj-3-tuple(v_202) else caught-fail) in
                    {959}let psk_27: preSharedKey = (if v_203 then 2-proj-3-tuple(v_202) else caught-fail) in
                    {960}let h'_alg_2: hash_alg = (if v_203 then 1-proj-3-tuple(v_202) else caught-fail) in
                    {961}let (psk_28: preSharedKey,early_secret_16: bitstring,valid_2: bool) = (if v_195 then (if v_201 then (NoPSK,es_14,true) else fail-any) else (if v_203 then (psk_27,es_15,((h'_alg_2 = tls_h) && ((server_psk_ext(1) = psk_ext_8) && use_psk_2))) else fail-any)) in
                    {962}if valid_2 then
                    (
                        {966}new s_24[]: seed;
                        {963}let v_204: bool = use_grease in
                        {969}let m_19: bitstring = (if not(v_204) then catch-fail(hash(tls_h,zero)) else caught-fail) in
                        {970}let v_206: bool = not-caught-fail(m_19) in
                        {971}let h_49: bitstring = (if v_206 then catch-fail(hash(tls_h,m_19)) else caught-fail) in
                        {972}let v_207: bool = not-caught-fail(h_49) in
                        {968}let l_52: label = (if not(v_204) then tls13_derived else caught-fail) in
                        {973}let x_59: bitstring = (if v_207 then (l_52,h_49) else caught-fail) in
                        {974}let extra_11: bitstring = (if not(v_204) then catch-fail((if v_206 then (if v_207 then hmac(tls_h,early_secret_16,x_59) else fail-any) else fail-any)) else caught-fail) in
                        {975}let v_208: bool = not-caught-fail(extra_11) in
                        {964}let gxy_5: element = (if not(v_204) then catch-fail(dh_decap_fun(g_7,gy_srv,i_x_1)) else caught-fail) in
                        {965}let v_205: bool = not-caught-fail(gxy_5) in
                        {967}let i_gxy: element = (if not(v_204) then (if v_205 then gxy_5 else dh_f(s_24)) else caught-fail) in
                        {976}let i_handshake_secret: bitstring = (if not(v_204) then catch-fail((if v_208 then hmac(tls_h,extra_11,i_gxy) else fail-any)) else caught-fail) in
                        {977}let v_209: bool = not-caught-fail(i_handshake_secret) in
                        {978}let SH_ECHConf_1: msg = (if v_209 then SH(B32(sr24_1,zero8),mode_4) else caught-fail) in
                        {933}let i_cur_log_1: bitstring = (zero,i_client_hello_1) in
                        {980}let m_20: bitstring = (if v_209 then (i_cur_log_1,SH_ECHConf_1) else caught-fail) in
                        {981}let h_50: bitstring = (if v_209 then catch-fail(hash(tls_h,m_20)) else caught-fail) in
                        {982}let v_210: bool = not-caught-fail(h_50) in
                        {979}let l_53: label = (if v_209 then ech_accept_confirmation else caught-fail) in
                        {983}let x_60: bitstring = (if v_210 then (l_53,h_50) else caught-fail) in
                        {984}let accept_confirmation_1: bitstring = (if v_209 then catch-fail((if v_210 then hmac(tls_h,i_handshake_secret,x_60) else fail-any)) else caught-fail) in
                        {985}let v_211: bool = not-caught-fail(accept_confirmation_1) in
                        {986}let is_accepted: bool = (if v_204 then false else (if v_209 then (if v_211 then (sr8_1 = crop_into_bytes8(accept_confirmation_1)) else fail-any) else fail-any)) in
                        {990}new s_25[]: seed;
                        {1004}new s_26[]: seed;
                        {987}let v_212: bool = is_accepted in
                        {1006}let psk_29: preSharedKey = (if not(v_212) then NoPSK else caught-fail) in
                        {1008}let k_17: bitstring = (if not(v_212) then catch-fail(psk2b(psk_29)) else caught-fail) in
                        {1009}let v_219: bool = not-caught-fail(k_17) in
                        {1007}let s_27: bitstring = (if not(v_212) then zero else caught-fail) in
                        {1010}let early_secret_17: bitstring = (if not(v_212) then catch-fail((if v_219 then hmac(tls_h,s_27,k_17) else fail-any)) else caught-fail) in
                        {1011}let v_220: bool = not-caught-fail(early_secret_17) in
                        {1013}let m_22: bitstring = (if v_220 then zero else caught-fail) in
                        {1014}let h_52: bitstring = (if v_220 then catch-fail(hash(tls_h,m_22)) else caught-fail) in
                        {1015}let v_221: bool = not-caught-fail(h_52) in
                        {1012}let l_55: label = (if v_220 then tls13_resumption_psk_binder_key else caught-fail) in
                        {1016}let x_62: bitstring = (if v_221 then (l_55,h_52) else caught-fail) in
                        {1017}let binder_key_12: bitstring = (if v_220 then catch-fail((if v_221 then hmac(tls_h,early_secret_17,x_62) else fail-any)) else caught-fail) in
                        {1018}let v_222: bool = not-caught-fail(binder_key_12) in
                        {1019}let v_223: bitstring = (if not(v_212) then catch-fail((if v_220 then (if v_222 then (early_secret_17,binder_key_12) else fail-any) else fail-any)) else caught-fail) in
                        {1020}let v_224: bool = (not-caught-fail(v_223) && success?(1-proj-2-tuple(v_223))) in
                        {1021}let kb_12: mac_key = (if v_224 then 2-proj-2-tuple(v_223) else caught-fail) in
                        {1022}let es_16: bitstring = (if v_224 then 1-proj-2-tuple(v_223) else caught-fail) in
                        {1024}let m_23: bitstring = (if v_224 then catch-fail(hash(tls_h,zero)) else caught-fail) in
                        {1025}let v_225: bool = not-caught-fail(m_23) in
                        {1026}let h_53: bitstring = (if v_225 then catch-fail(hash(tls_h,m_23)) else caught-fail) in
                        {1027}let v_226: bool = not-caught-fail(h_53) in
                        {1023}let l_56: label = (if v_224 then tls13_derived else caught-fail) in
                        {1028}let x_63: bitstring = (if v_226 then (l_56,h_53) else caught-fail) in
                        {1029}let extra_13: bitstring = (if v_224 then catch-fail((if v_225 then (if v_226 then hmac(tls_h,es_16,x_63) else fail-any) else fail-any)) else caught-fail) in
                        {1030}let v_227: bool = not-caught-fail(extra_13) in
                        {1002}let gxy_7: element = (if not(v_212) then catch-fail(dh_decap_fun(g_7,gy_srv,o_x_1)) else caught-fail) in
                        {1003}let v_218: bool = not-caught-fail(gxy_7) in
                        {1005}let o_gxy: element = (if not(v_212) then (if v_218 then gxy_7 else dh_f(s_26)) else caught-fail) in
                        {993}let m_21: bitstring = (if v_212 then catch-fail(hash(tls_h,zero)) else caught-fail) in
                        {994}let v_214: bool = not-caught-fail(m_21) in
                        {995}let h_51: bitstring = (if v_214 then catch-fail(hash(tls_h,m_21)) else caught-fail) in
                        {996}let v_215: bool = not-caught-fail(h_51) in
                        {992}let l_54: label = (if v_212 then tls13_derived else caught-fail) in
                        {997}let x_61: bitstring = (if v_215 then (l_54,h_51) else caught-fail) in
                        {998}let extra_12: bitstring = (if v_212 then catch-fail((if v_214 then (if v_215 then hmac(tls_h,early_secret_16,x_61) else fail-any) else fail-any)) else caught-fail) in
                        {999}let v_216: bool = not-caught-fail(extra_12) in
                        {988}let gxy_6: element = (if v_212 then catch-fail(dh_decap_fun(g_7,gy_srv,i_x_1)) else caught-fail) in
                        {989}let v_213: bool = not-caught-fail(gxy_6) in
                        {991}let i_gxy_1: element = (if v_212 then (if v_213 then gxy_6 else dh_f(s_25)) else caught-fail) in
                        {1000}let i_handshake_secret_1: bitstring = (if v_212 then catch-fail((if v_216 then hmac(tls_h,extra_12,i_gxy_1) else fail-any)) else caught-fail) in
                        {1001}let v_217: bool = not-caught-fail(i_handshake_secret_1) in
                        {934}let o_cur_log: bitstring = (zero,o_client_hello) in
                        {1031}let (cr_12: bytes32,handshake_secret_3: bitstring,s_dom_7: domain,cur_log_9: bitstring) = (if v_212 then (if v_217 then (i_cr_1,i_handshake_secret_1,backend_dom,(i_cur_log_1,server_hello_2)) else fail-any) else (if v_224 then (o_cr_1,(if v_227 then hmac(tls_h,extra_13,o_gxy) else fail-any),o_dom_3,(o_cur_log,server_hello_2)) else fail-any)) in
                        {1033}let m_24: bitstring = catch-fail(hash(tls_h,zero)) in
                        {1034}let v_228: bool = not-caught-fail(m_24) in
                        {1035}let h_54: bitstring = (if v_228 then catch-fail(hash(tls_h,m_24)) else caught-fail) in
                        {1036}let v_229: bool = not-caught-fail(h_54) in
                        {1032}let l_57: label = tls13_derived in
                        {1037}let x_64: bitstring = (if v_229 then (l_57,h_54) else caught-fail) in
                        {1038}let extra_14: bitstring = catch-fail((if v_228 then (if v_229 then hmac(tls_h,handshake_secret_3,x_64) else fail-any) else fail-any)) in
                        {1039}let v_230: bool = not-caught-fail(extra_14) in
                        {1040}let k_18: bitstring = (if v_230 then zero else caught-fail) in
                        {1041}let master_secret_13: bitstring = (if v_230 then catch-fail(hmac(tls_h,handshake_secret_3,k_18)) else caught-fail) in
                        {1042}let v_231: bool = not-caught-fail(master_secret_13) in
                        {1044}let h_55: bitstring = (if v_231 then catch-fail(hash(tls_h,cur_log_9)) else caught-fail) in
                        {1045}let v_232: bool = not-caught-fail(h_55) in
                        {1043}let l_58: label = (if v_231 then tls13_client_handshake_traffic_secret else caught-fail) in
                        {1046}let x_65: bitstring = (if v_232 then (l_58,h_55) else caught-fail) in
                        {1047}let client_hts_3: bitstring = (if v_231 then catch-fail((if v_232 then hmac(tls_h,handshake_secret_3,x_65) else fail-any)) else caught-fail) in
                        {1048}let v_233: bool = not-caught-fail(client_hts_3) in
                        {1050}let h_56: bitstring = (if v_233 then catch-fail(hash(tls_h,cur_log_9)) else caught-fail) in
                        {1051}let v_234: bool = not-caught-fail(h_56) in
                        {1049}let l_59: label = (if v_233 then tls13_server_handshake_traffic_secret else caught-fail) in
                        {1052}let x_66: bitstring = (if v_234 then (l_59,h_56) else caught-fail) in
                        {1053}let server_hts_3: bitstring = (if v_233 then catch-fail((if v_234 then hmac(tls_h,handshake_secret_3,x_66) else fail-any)) else caught-fail) in
                        {1054}let v_235: bool = not-caught-fail(server_hts_3) in
                        {1056}let h_57: bitstring = (if v_235 then zero else caught-fail) in
                        {1055}let l_60: label = (if v_235 then tls13_key else caught-fail) in
                        {1057}let x_67: bitstring = (if v_235 then (l_60,h_57) else caught-fail) in
                        {1058}let client_wkh_3: bitstring = (if v_235 then catch-fail(hmac(tls_h,client_hts_3,x_67)) else caught-fail) in
                        {1059}let v_236: bool = not-caught-fail(client_wkh_3) in
                        {1061}let h_58: bitstring = (if v_236 then zero else caught-fail) in
                        {1060}let l_61: label = (if v_236 then tls13_key else caught-fail) in
                        {1062}let x_68: bitstring = (if v_236 then (l_61,h_58) else caught-fail) in
                        {1063}let server_wkh_3: bitstring = (if v_236 then catch-fail(hmac(tls_h,server_hts_3,x_68)) else caught-fail) in
                        {1064}let v_237: bool = not-caught-fail(server_wkh_3) in
                        {1066}let h_59: bitstring = (if v_237 then zero else caught-fail) in
                        {1065}let l_62: label = (if v_237 then tls13_finished else caught-fail) in
                        {1067}let x_69: bitstring = (if v_237 then (l_62,h_59) else caught-fail) in
                        {1068}let client_fk_3: bitstring = (if v_237 then catch-fail(hmac(tls_h,client_hts_3,x_69)) else caught-fail) in
                        {1069}let v_238: bool = not-caught-fail(client_fk_3) in
                        {1071}let h_60: bitstring = (if v_238 then zero else caught-fail) in
                        {1070}let l_63: label = (if v_238 then tls13_finished else caught-fail) in
                        {1072}let x_70: bitstring = (if v_238 then (l_63,h_60) else caught-fail) in
                        {1073}let server_fk_3: bitstring = (if v_238 then catch-fail(hmac(tls_h,server_hts_3,x_70)) else caught-fail) in
                        {1074}let v_239: bool = not-caught-fail(server_fk_3) in
                        {1075}let (master_secret_14: bitstring,chk_10: aead_key,shk_10: aead_key,cfin_10: mac_key,sfin_10: mac_key) = (if v_230 then (if v_231 then (if v_233 then (if v_235 then (if v_236 then (if v_237 then (if v_238 then (if v_239 then (master_secret_13,client_wkh_3,server_wkh_3,client_fk_3,server_fk_3) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                        {931}let id_client_8: idProc = id_client_7 in
                        {1076}event SanityClientSH(id_client_8,cr_12,B32(sr24_1,sr8_1),c_dom_6,s_dom_7,handshake_secret_3,psk_28,cur_log_9);
                        {1077}if (is_accepted || (psk_ext_8 = empty_psk_ext)) then
                        (
                            {1079}in(io, enc_ee_msg_2: bitstring);
                            {1080}let ee_msg_3: msg = aead_dec(tls_a,shk_10,zero,zero,enc_ee_msg_2) in
                            {1081}let EE(x_71: bitstring) = ee_msg_3 in
                            {1082}let v_240: bool = not(is_accepted) in
                            {1083}let v_241: bitstring = (if v_240 then catch-fail(x_71) else caught-fail) in
                            {1084}let v_242: bool = (not-caught-fail(v_241) && success?(1-proj-server_ECH(v_241))) in
                            {1085}let ech_conf_1: echConfig = (if v_242 then 1-proj-server_ECH(v_241) else caught-fail) in
                            {1087}let cur_log2_9: bitstring = (cur_log_9,ee_msg_3) in
                            {1078}let sr_12: bytes32 = B32(sr24_1,sr8_1) in
                            {1088}out(ch_client_after_EE, (id_client_8,cr_12,sr_12,tls_h,tls_a,c_dom_6,s_dom_7,psk_28,master_secret_14,chk_10,shk_10,cfin_10,sfin_10,cur_log2_9))
                        )
                        else
                            {1089}out(io, illegal_parameter)
                    )
                    else
                        {1090}out(io, illegal_parameter)
                )
                else
                    {1091}out(io, illegal_parameter)
        )
        else
            {1092}out(io, unexpected_message)
    ) | (
        {1095}!
        {1098}in(io, (use_ech: bool,s_dom_8: domain));
        {1097}let cert_req_5: bool = true in
        {1096}let use_psk_3: bool = false in
        {1099}event Same((use_ech,use_psk_3,cert_req_5,s_dom_8));
        {1101}new id_server_4[]: idProc;
        {1102}event SanityServer(id_server_4,use_ech,use_psk_3,cert_req_5);
        {1103}if not((use_psk_3 && cert_req_5)) then
        {1104}in(io, x_client_hello: msg);
        {1105}let CH(cr_13: bytes32,offer_7: params) = x_client_hello in
        (
            {1106}let nego(=TLS13,c_h_alg: hash_alg,c_a_alg: aead_alg,kex_ext_5: keyShareExt,sni_ext_3: sniExt,ech_ext_8: echExt,psk_ext_9: preSharedKeyExt,extra_ext_2: extraExt) = offer_7 in
            {1107}if ((c_h_alg = tls_h) && (c_a_alg = tls_a)) then
            (
                {1100}let s_extra_1: extraExt = empty_extra_ext in
                {1108}let client_kex_ext(DHE_group(=tls_g)) = kex_ext_5 in
                (
                    {1109}if (sni_ext_3 = SNI(s_dom_8)) then
                    (
                        {1110}if use_ech then
                            {1111}out(io, abort_error)
                        else
                            {1112}let hrr_mode: params = nego(TLS13,tls_h,tls_a,hrr_kex_ext(tls_g),empty_sni_ext,empty_ech_ext,empty_psk_ext,empty_extra_ext) in
                            {1113}let hello_retry_request: msg = SH(rand_HelloRetryRequest,hrr_mode) in
                            {1114}out(io, hello_retry_request);
                            {1115}let cur_log_HRR: bitstring = ((zero,x_client_hello),hello_retry_request) in
                            {1116}event SanityServerHRR(id_server_4,cr_13,s_dom_8,cur_log_HRR);
                            {1117}in(io, client_hello'_1: msg);
                            {1118}let CH(cr'_1: bytes32,offer': params) = client_hello'_1 in
                                {1119}out(ch_server_SH, (id_server_4,use_psk_3,false,cert_req_5,s_dom_8,tls_g,tls_h,tls_a,s_extra_1,zero,client_hello'_1,cur_log_HRR))
                            else
                                {1120}out(io, unexpected_message)
                    )
                    else
                        {1121}out(io, illegal_parameter)
                )
                else
                    {1122}let client_kex_ext(DHE_kex(=tls_g,gx_8: element)) = kex_ext_5 in
                    (
                        {1123}let (client_ECH(ech_h_alg: hash_alg,ech_aead_alg: aead_alg,config_id_2: configId,enc_3: element,payload_3: bitstring),=true) = (ech_ext_8,use_ech) in
                        (
                            {1125}let CH(r_1: bytes32,offer_8: params) = x_client_hello in
                            {1126}let nego(=TLS13,=tls_h,=tls_a,kex_ext_6: keyShareExt,sni_ext_4: sniExt,ech_ext_9: echExt,=empty_psk_ext,extra_ext_3: extraExt) = offer_8 in
                            {1127}let client_ECH(ech_h_alg_1: hash_alg,ech_a_alg: aead_alg,config_id_3: configId,enc_4: element,payload_4: bitstring) = ech_ext_9 in
                            {1124}let id_server_5: idProc = id_server_4 in
                            {1251}get ech_configurations(ech_config(=config_id_3,ech_g_1: group,pkR_3: element,=s_dom_8,=ech_h_alg_1,=ech_a_alg),skR_2: bitstring) in
                            (
                                {1129}let v_243: msg = x_client_hello in
                                {1130}let v_244: bool = (success?(1-proj-nego(2-proj-CH(v_243))) && success?(1-proj-CH(v_243))) in
                                {1131}let extra_15: extraExt = (if v_244 then 8-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1132}let psk_ext_10: preSharedKeyExt = (if v_244 then 7-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1133}let ech_ext_10: echExt = (if v_244 then 6-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1134}let sni_ext_5: sniExt = (if v_244 then 5-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1135}let kex_ext_7: keyShareExt = (if v_244 then 4-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1136}let a_alg_11: aead_alg = (if v_244 then 3-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1137}let h_alg_11: hash_alg = (if v_244 then 2-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1138}let version_1: TLS_version = (if v_244 then 1-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1139}let r_2: bytes32 = (if v_244 then 1-proj-CH(v_243) else caught-fail) in
                                {1140}let v_245: echExt = (if v_244 then catch-fail(ech_ext_10) else caught-fail) in
                                {1141}let v_246: bool = (not-caught-fail(v_245) && success?(1-proj-client_ECH(v_245))) in
                                {1142}let payload_5: bitstring = (if v_246 then 5-proj-client_ECH(v_245) else caught-fail) in
                                {1143}let enc_5: element = (if v_246 then 4-proj-client_ECH(v_245) else caught-fail) in
                                {1144}let config_id_4: configId = (if v_246 then 3-proj-client_ECH(v_245) else caught-fail) in
                                {1145}let a_alg_ech_2: aead_alg = (if v_246 then 2-proj-client_ECH(v_245) else caught-fail) in
                                {1146}let h_alg_ech_2: hash_alg = (if v_246 then 1-proj-client_ECH(v_245) else caught-fail) in
                                {1153}new s_28[]: seed;
                                {1147}let client_hello_outer'_1: msg = (if v_246 then CH(r_2,nego(version_1,h_alg_11,a_alg_11,kex_ext_7,sni_ext_5,empty_ech_ext,psk_ext_10,extra_15)) else caught-fail) in
                                {1148}let client_hello_AAD_1: ClientHelloOuterAAD = catch-fail((if v_244 then (if v_246 then client_hello_outer_AAD(h_alg_ech_2,a_alg_ech_2,config_id_4,enc_5,client_hello_outer'_1) else fail-any) else fail-any)) in
                                {1149}let v_247: bool = not-caught-fail(client_hello_AAD_1) in
                                {1128}let ech_conf_2: echConfig = ech_config(config_id_3,ech_g_1,pkR_3,s_dom_8,ech_h_alg_1,ech_a_alg) in
                                {1150}let info_1: bitstring = (if v_247 then (tls_ech_str,ech_conf_2) else caught-fail) in
                                {1157}let k_19: bitstring = (if v_247 then (hpke_info_hash,info_1) else caught-fail) in
                                {1156}let s_29: bitstring = (if v_247 then zero else caught-fail) in
                                {1158}let info_hash_1: bitstring = (if v_247 then catch-fail(hmac(ech_h_alg_1,s_29,k_19)) else caught-fail) in
                                {1159}let v_249: bool = not-caught-fail(info_hash_1) in
                                {1160}let k_20: bitstring = (if v_249 then (hpke_secret,zero) else caught-fail) in
                                {1151}let gxy_8: element = (if v_247 then catch-fail(dh_decap_fun(ech_g_1,enc_4,skR_2)) else caught-fail) in
                                {1152}let v_248: bool = not-caught-fail(gxy_8) in
                                {1154}let shared_secret_1: element = (if v_247 then (if v_248 then gxy_8 else dh_f(s_28)) else caught-fail) in
                                {1161}let xsecret_1: bitstring = (if v_249 then catch-fail(hmac(ech_h_alg_1,shared_secret_1,k_20)) else caught-fail) in
                                {1162}let v_250: bool = not-caught-fail(xsecret_1) in
                                {1163}let l_64: label = (if v_250 then hpke_key else caught-fail) in
                                {1164}let x_72: bitstring = (if v_250 then (l_64,info_hash_1) else caught-fail) in
                                {1165}let key_2: aead_key = (if v_250 then catch-fail(hmac(ech_h_alg_1,xsecret_1,x_72)) else caught-fail) in
                                {1166}let v_251: bool = not-caught-fail(key_2) in
                                {1167}let l_65: label = (if v_251 then hpke_base_nonce else caught-fail) in
                                {1168}let x_73: bitstring = (if v_251 then (l_65,info_hash_1) else caught-fail) in
                                {1169}let base_nonce_1: bitstring = (if v_251 then catch-fail(hmac(ech_h_alg_1,xsecret_1,x_73)) else caught-fail) in
                                {1170}let v_252: bool = not-caught-fail(base_nonce_1) in
                                {1171}let l_66: label = (if v_252 then hpke_exp else caught-fail) in
                                {1172}let x_74: bitstring = (if v_252 then (l_66,info_hash_1) else caught-fail) in
                                {1173}let exporter_secret_1: bitstring = (if v_252 then catch-fail(hmac(ech_h_alg_1,xsecret_1,x_74)) else caught-fail) in
                                {1174}let v_253: bool = not-caught-fail(exporter_secret_1) in
                                {1155}let m_25: hpkeMode = (if v_247 then R else caught-fail) in
                                {1175}let context_1: hpkeContext = (if v_247 then catch-fail((if v_249 then (if v_250 then (if v_251 then (if v_252 then (if v_253 then hpke_context(m_25,key_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
                                {1176}let v_254: bool = not-caught-fail(context_1) in
                                {1177}let v_255: hpkeContext = (if v_254 then catch-fail(context_1) else caught-fail) in
                                {1178}let v_256: bool = (not-caught-fail(v_255) && ((R =nf 1-proj-hpke_context(v_255)) && success?(1-proj-hpke_context(v_255)))) in
                                {1179}let key_3: aead_key = (if v_256 then 2-proj-hpke_context(v_255) else caught-fail) in
                                {1180}let i_client_hello_2: msg = (if v_254 then catch-fail((if v_256 then aead_dec(ech_a_alg,key_3,nonce_for_seal_open,client_hello_AAD_1,payload_4) else fail-any)) else caught-fail) in
                                {1181}let v_257: bool = not-caught-fail(i_client_hello_2) in
                                {1182}let v_258: msg = (if v_257 then catch-fail(i_client_hello_2) else caught-fail) in
                                {1183}let v_259: bool = (not-caught-fail(v_258) && ((((TLS13 =nf 1-proj-nego(2-proj-CH(v_258))) && success?(1-proj-SNI(5-proj-nego(2-proj-CH(v_258))))) && success?(1-proj-nego(2-proj-CH(v_258)))) && success?(1-proj-CH(v_258)))) in
                                {1184}let extra_ext': extraExt = (if v_259 then 8-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                                {1185}let empty_psk_ext': preSharedKeyExt = (if v_259 then 7-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                                {1186}let ech_ext': echExt = (if v_259 then 6-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                                {1187}let i_dom: domain = (if v_259 then 1-proj-SNI(5-proj-nego(2-proj-CH(v_258))) else caught-fail) in
                                {1188}let kex_ext'_1: keyShareExt = (if v_259 then 4-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                                {1189}let a_alg': aead_alg = (if v_259 then 3-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                                {1190}let h_alg': hash_alg = (if v_259 then 2-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                                {1191}let cr'_2: bytes32 = (if v_259 then 1-proj-CH(v_258) else caught-fail) in
                                {1192}let v_260: bool = (v_257 && not(v_259)) in
                                {1193}let v_261: echConfig = (if v_260 then catch-fail(ech_conf_2) else caught-fail) in
                                {1194}let v_262: bool = (not-caught-fail(v_261) && success?(1-proj-ech_config(v_261))) in
                                {1195}let a_alg_12: aead_alg = (if v_262 then 6-proj-ech_config(v_261) else caught-fail) in
                                {1196}let h_alg_12: hash_alg = (if v_262 then 5-proj-ech_config(v_261) else caught-fail) in
                                {1197}let s_dom_9: domain = (if v_262 then 4-proj-ech_config(v_261) else caught-fail) in
                                {1198}let pkR_4: element = (if v_262 then 3-proj-ech_config(v_261) else caught-fail) in
                                {1199}let g_8: group = (if v_262 then 2-proj-ech_config(v_261) else caught-fail) in
                                {1200}let config_id_5: configId = (if v_262 then 1-proj-ech_config(v_261) else caught-fail) in
                                {1201}new s_30[]: seed;
                                {1202}let gx_9: element = (if v_262 then dh_pub(g_8,dh_k(s_30)) else caught-fail) in
                                {1203}let v_263: bitstring = (if v_262 then catch-fail((dh_k(s_30),gx_9)) else caught-fail) in
                                {1204}let v_264: bool = (not-caught-fail(v_263) && success?(1-proj-2-tuple(v_263))) in
                                {1205}let pkR': element = (if v_264 then 2-proj-2-tuple(v_263) else caught-fail) in
                                {1206}let skR': bitstring = (if v_264 then 1-proj-2-tuple(v_263) else caught-fail) in
                                {1207}new config_id'[]: configId;
                                {1210}let v_266: bool = (v_254 && not(v_257)) in
                                {1211}let v_267: echConfig = (if v_266 then catch-fail(ech_conf_2) else caught-fail) in
                                {1212}let v_268: bool = (not-caught-fail(v_267) && success?(1-proj-ech_config(v_267))) in
                                {1213}let a_alg_13: aead_alg = (if v_268 then 6-proj-ech_config(v_267) else caught-fail) in
                                {1214}let h_alg_13: hash_alg = (if v_268 then 5-proj-ech_config(v_267) else caught-fail) in
                                {1215}let s_dom_10: domain = (if v_268 then 4-proj-ech_config(v_267) else caught-fail) in
                                {1216}let pkR_5: element = (if v_268 then 3-proj-ech_config(v_267) else caught-fail) in
                                {1217}let g_9: group = (if v_268 then 2-proj-ech_config(v_267) else caught-fail) in
                                {1218}let config_id_6: configId = (if v_268 then 1-proj-ech_config(v_267) else caught-fail) in
                                {1219}new s_31[]: seed;
                                {1220}let gx_10: element = (if v_268 then dh_pub(g_9,dh_k(s_31)) else caught-fail) in
                                {1221}let v_269: bitstring = (if v_268 then catch-fail((dh_k(s_31),gx_10)) else caught-fail) in
                                {1222}let v_270: bool = (not-caught-fail(v_269) && success?(1-proj-2-tuple(v_269))) in
                                {1223}let pkR'_1: element = (if v_270 then 2-proj-2-tuple(v_269) else caught-fail) in
                                {1224}let skR'_1: bitstring = (if v_270 then 1-proj-2-tuple(v_269) else caught-fail) in
                                {1225}new config_id'_1[]: configId;
                                {1226}let retry_config_1: echConfig = (if v_266 then catch-fail((if v_268 then (if v_270 then ech_config(config_id'_1,g_9,pkR'_1,s_dom_10,h_alg_13,a_alg_13) else fail-any) else fail-any)) else caught-fail) in
                                {1227}let v_271: bool = not-caught-fail(retry_config_1) in
                                {1208}let retry_config: echConfig = (if v_260 then catch-fail((if v_262 then (if v_264 then ech_config(config_id',g_8,pkR',s_dom_9,h_alg_12,a_alg_12) else fail-any) else fail-any)) else caught-fail) in
                                {1209}let v_265: bool = not-caught-fail(retry_config) in
                                {1228}let (s_dom_11: domain,client_hello_2: msg,encrypted_ext_1: bitstring,is_backend_1: bool) = (if v_247 then (if v_254 then (if v_257 then (if v_259 then (i_dom,i_client_hello_2,zero,true) else (if v_265 then (s_dom_8,x_client_hello,server_ECH(retry_config),false) else fail-any)) else (if v_271 then (s_dom_8,x_client_hello,server_ECH(retry_config_1),false) else fail-any)) else fail-any) else fail-any) in
                                {1229}out(ch_server_SH, (id_server_5,use_psk_3,is_backend_1,cert_req_5,s_dom_11,tls_g,tls_h,tls_a,s_extra_1,encrypted_ext_1,client_hello_2,zero))
                            )
                            else
                                {1250}get ech_configurations(ech_config(config_id'_2: configId,ech_g': group,pkR'_2: element,=s_dom_8,ech_h_alg': hash_alg,ech_a_alg': aead_alg),skR'_2: bitstring) in
                                {1230}let config_2: echConfig = ech_config(config_id'_2,ech_g',pkR'_2,s_dom_8,ech_h_alg',ech_a_alg') in
                                {1231}let v_272: echConfig = config_2 in
                                {1232}let v_273: bool = success?(1-proj-ech_config(v_272)) in
                                {1233}let a_alg_14: aead_alg = (if v_273 then 6-proj-ech_config(v_272) else caught-fail) in
                                {1234}let h_alg_14: hash_alg = (if v_273 then 5-proj-ech_config(v_272) else caught-fail) in
                                {1235}let s_dom_12: domain = (if v_273 then 4-proj-ech_config(v_272) else caught-fail) in
                                {1236}let pkR_6: element = (if v_273 then 3-proj-ech_config(v_272) else caught-fail) in
                                {1237}let g_10: group = (if v_273 then 2-proj-ech_config(v_272) else caught-fail) in
                                {1238}let config_id_7: configId = (if v_273 then 1-proj-ech_config(v_272) else caught-fail) in
                                {1239}new s_32[]: seed;
                                {1240}let gx_11: element = (if v_273 then dh_pub(g_10,dh_k(s_32)) else caught-fail) in
                                {1241}let v_274: bitstring = (if v_273 then catch-fail((dh_k(s_32),gx_11)) else caught-fail) in
                                {1242}let v_275: bool = (not-caught-fail(v_274) && success?(1-proj-2-tuple(v_274))) in
                                {1243}let pkR'_3: element = (if v_275 then 2-proj-2-tuple(v_274) else caught-fail) in
                                {1244}let skR'_3: bitstring = (if v_275 then 1-proj-2-tuple(v_274) else caught-fail) in
                                {1245}new config_id'_3[]: configId;
                                {1246}let retry_config_2: echConfig = catch-fail((if v_273 then (if v_275 then ech_config(config_id'_3,g_10,pkR'_3,s_dom_12,h_alg_14,a_alg_14) else fail-any) else fail-any)) in
                                {1247}let v_276: bool = not-caught-fail(retry_config_2) in
                                {1248}let (s_dom_13: domain,client_hello_3: msg,encrypted_ext_2: bitstring,is_backend_2: bool) = (if v_276 then (s_dom_8,x_client_hello,server_ECH(retry_config_2),false) else fail-any) in
                                {1249}out(ch_server_SH, (id_server_5,use_psk_3,is_backend_2,cert_req_5,s_dom_13,tls_g,tls_h,tls_a,s_extra_1,encrypted_ext_2,client_hello_3,zero))
                        )
                        else
                            {1252}if ((ech_ext_8 = empty_ech_ext) || not(use_ech)) then
                                {1253}out(ch_server_SH, (id_server_4,use_psk_3,false,cert_req_5,s_dom_8,tls_g,tls_h,tls_a,s_extra_1,zero,x_client_hello,zero))
                            else
                                {1254}out(io, illegal_parameter)
                    )
                    else
                        {1255}out(io, handshake_failure)
            )
            else
                {1256}out(io, handshake_failure)
        )
        else
            {1257}out(io, unexpected_message)
    )
)

Declared: select mess2(ch_server_SH[],*x_75,ch_server_SH[],*x'_1)/3000
Declared: select mess2(ch_server_CRT[],*x_75,ch_server_CRT[],*x'_1)/3000
Declared: select mess2(ch_server_FIN[],*x_75,ch_server_FIN[],*x'_1)/3000
Declared: select mess2(ch_server_CFIN[],*x_75,ch_server_CFIN[],*x'_1)/3000
Declared: select mess2(ch_client_after_EE[],*x_75,ch_client_after_EE[],*x'_1)/3000
Declared: select mess2(ch_client_CRT[],*x_75,ch_client_CRT[],*x'_1)/3000
Declared: select mess2(ch_client_FIN[],*x_75,ch_client_FIN[],*x'_1)/3000
Declared: select mess2(ch_client_CFIN[],*x_75,ch_client_CFIN[],*x'_1)/3000
Declared: select table2(ech_configurations(*config_3,*skR_3),ech_configurations(*config',*skR'_4))/5000
Declared: select table2(long_term_keys(*c_dom_7,*sk_d_1,*pkr,*crt_5),long_term_keys(*c_dom'_4,*sk_d',*pkr',*crt'))/5000
Declared: select table2(pre_shared_keys(*c_dom_7,*s_dom_14,*h_61,*id_11,*x_75),pre_shared_keys(*c_dom'_4,*s_dom'_4,*h',*id',*x'_1))/5000
-- Restriction event(Same(choice[x_75,x'_1])) ==> x_75 = x'_1 encoded as event2(Same(x_75),Same(x'_1)) ==> x_75 = x'_1 in biprocess 1.
-- Axiom event(PreciseMess(ch,choice[id_11,id2_1],choice[st1,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id_11,id2'],choice[st1',st2'],choice[x1',x2'])) ==> st1 = st1' && x1 = x1'; event(PreciseMess(ch,choice[id1_1,id_11],choice[st1,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id_11],choice[st1',st2'],choice[x1',x2'])) ==> st2 = st2' && x2 = x2'; event(PreciseMess(ch,choice[id1_1,id2_1],choice[st_4,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st_4,st2'],choice[x1',x2'])) ==> id1_1 = id1' && x1 = x1'; event(PreciseMess(ch,choice[id1_1,id2_1],choice[st1,st_4],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st1',st_4],choice[x1',x2'])) ==> id2_1 = id2' && x2 = x2'
Encoding: 
axiom event(PreciseMess(ch,choice[id_11,id2_1],choice[st1,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id_11,id2'],choice[st1',st2'],choice[x1',x2'])) ==> st1 = st1' && x1 = x1' encoded as event2(PreciseMess(ch,id_11,st1,x1),PreciseMess(ch,id2_1,st2,x2)) && event2(PreciseMess(ch,id_11,st1',x1'),PreciseMess(ch,id2',st2',x2')) ==> st1 = st1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id_11],choice[st1,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id_11],choice[st1',st2'],choice[x1',x2'])) ==> st2 = st2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1,x1),PreciseMess(ch,id_11,st2,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id_11,st2',x2')) ==> st2 = st2' && x2 = x2'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st_4,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st_4,st2'],choice[x1',x2'])) ==> id1_1 = id1' && x1 = x1' encoded as event2(PreciseMess(ch,id1_1,st_4,x1),PreciseMess(ch,id2_1,st2,x2)) && event2(PreciseMess(ch,id1',st_4,x1'),PreciseMess(ch,id2',st2',x2')) ==> id1_1 = id1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st1,st_4],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st1',st_4],choice[x1',x2'])) ==> id2_1 = id2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1,x1),PreciseMess(ch,id2_1,st_4,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id2',st_4,x2')) ==> id2_1 = id2' && x2 = x2'
in biprocess 1.
-- Restriction event(Selected_lgt(choice[c_dom1_1,c_dom1'],choice[c_dom2_1,c_dom2'],choice[sk_2,sk'],choice[spkey,spkey'],choice[crt_5,crt'])) ==> c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && c_dom1_1 = c_dom1' && sk_2 = sk' && spkey = spkey' && crt_5 = crt' encoded as event2(Selected_lgt(c_dom1_1,c_dom2_1,sk_2,spkey,crt_5),Selected_lgt(c_dom1',c_dom2',sk',spkey',crt')) ==> c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && c_dom1_1 = c_dom1' && sk_2 = sk' && spkey = spkey' && crt_5 = crt' in biprocess 1.
-- Restriction event(Selected_psk(choice[c_dom1_1,c_dom1'],choice[c_dom2_1,c_dom2'],choice[s_dom1_1,s_dom1'],choice[s_dom2_1,s_dom2'],choice[id_11,id'],choice[ipsk,ipsk'])) ==> s_dom1_1 = s_dom2_1 && s_dom1' = s_dom2' && c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && s_dom1_1 = s_dom1' && c_dom1_1 = c_dom1' && id_11 = id' && ipsk = ipsk' encoded as event2(Selected_psk(c_dom1_1,c_dom2_1,s_dom1_1,s_dom2_1,id_11,ipsk),Selected_psk(c_dom1',c_dom2',s_dom1',s_dom2',id',ipsk')) ==> s_dom1_1 = s_dom2_1 && s_dom1' = s_dom2' && c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && s_dom1_1 = s_dom1' && c_dom1_1 = c_dom1' && id_11 = id' && ipsk = ipsk' in biprocess 1.
-- Diff-equivalence in biprocess 1.
Translating the process into Horn clauses...
Termination warning: v_277 ≠ v_278 && attacker2(v_279,v_277) && attacker2(v_279,v_278) -> bad
Selecting 0
Termination warning: v_277 ≠ v_278 && attacker2(v_277,v_279) && attacker2(v_278,v_279) -> bad
Selecting 0
Completing...
200 rules inserted. Base: 200 rules (86 with conclusion selected). Queue: 7532 rules.
Termination warning: v_277 ≠ v_278 && attacker2(v_279,v_277) && attacker2(v_279,v_278) -> bad
Selecting 0
Termination warning: v_277 ≠ v_278 && attacker2(v_277,v_279) && attacker2(v_278,v_279) -> bad
Selecting 0
400 rules inserted. Base: 400 rules (116 with conclusion selected). Queue: 7430 rules.
600 rules inserted. Base: 600 rules (117 with conclusion selected). Queue: 7232 rules.
800 rules inserted. Base: 800 rules (117 with conclusion selected). Queue: 7032 rules.
1000 rules inserted. Base: 1000 rules (120 with conclusion selected). Queue: 6838 rules.
1200 rules inserted. Base: 1200 rules (120 with conclusion selected). Queue: 6638 rules.
1400 rules inserted. Base: 1400 rules (120 with conclusion selected). Queue: 6438 rules.
1600 rules inserted. Base: 1600 rules (122 with conclusion selected). Queue: 6242 rules.
1800 rules inserted. Base: 1800 rules (122 with conclusion selected). Queue: 6042 rules.
2000 rules inserted. Base: 2000 rules (122 with conclusion selected). Queue: 5842 rules.
2200 rules inserted. Base: 2200 rules (122 with conclusion selected). Queue: 5642 rules.
2400 rules inserted. Base: 2400 rules (122 with conclusion selected). Queue: 5442 rules.
2600 rules inserted. Base: 2600 rules (122 with conclusion selected). Queue: 5242 rules.
2800 rules inserted. Base: 2800 rules (122 with conclusion selected). Queue: 5042 rules.
3000 rules inserted. Base: 3000 rules (122 with conclusion selected). Queue: 4842 rules.
3200 rules inserted. Base: 3200 rules (122 with conclusion selected). Queue: 4642 rules.
3400 rules inserted. Base: 3400 rules (122 with conclusion selected). Queue: 4442 rules.
3600 rules inserted. Base: 3600 rules (122 with conclusion selected). Queue: 4242 rules.
3800 rules inserted. Base: 3800 rules (122 with conclusion selected). Queue: 4042 rules.
4000 rules inserted. Base: 4000 rules (122 with conclusion selected). Queue: 3842 rules.
4200 rules inserted. Base: 4200 rules (122 with conclusion selected). Queue: 3642 rules.
4400 rules inserted. Base: 4400 rules (122 with conclusion selected). Queue: 3442 rules.
4600 rules inserted. Base: 4600 rules (122 with conclusion selected). Queue: 3242 rules.
4800 rules inserted. Base: 4800 rules (122 with conclusion selected). Queue: 3042 rules.
5000 rules inserted. Base: 5000 rules (122 with conclusion selected). Queue: 2842 rules.
5200 rules inserted. Base: 5200 rules (122 with conclusion selected). Queue: 2642 rules.
5400 rules inserted. Base: 5400 rules (122 with conclusion selected). Queue: 2442 rules.
5600 rules inserted. Base: 5600 rules (122 with conclusion selected). Queue: 2242 rules.
5800 rules inserted. Base: 5800 rules (122 with conclusion selected). Queue: 2042 rules.
6000 rules inserted. Base: 6000 rules (122 with conclusion selected). Queue: 1842 rules.
6200 rules inserted. Base: 6200 rules (122 with conclusion selected). Queue: 1642 rules.
6400 rules inserted. Base: 6400 rules (122 with conclusion selected). Queue: 1442 rules.
6600 rules inserted. Base: 6600 rules (133 with conclusion selected). Queue: 1557 rules.
6800 rules inserted. Base: 6798 rules (134 with conclusion selected). Queue: 1655 rules.
7000 rules inserted. Base: 6998 rules (134 with conclusion selected). Queue: 1527 rules.
7200 rules inserted. Base: 7198 rules (134 with conclusion selected). Queue: 1368 rules.
7400 rules inserted. Base: 7398 rules (134 with conclusion selected). Queue: 1193 rules.
7600 rules inserted. Base: 7598 rules (134 with conclusion selected). Queue: 993 rules.
7800 rules inserted. Base: 7797 rules (137 with conclusion selected). Queue: 819 rules.
8000 rules inserted. Base: 7997 rules (144 with conclusion selected). Queue: 693 rules.
8200 rules inserted. Base: 8171 rules (144 with conclusion selected). Queue: 450 rules.
8400 rules inserted. Base: 8370 rules (158 with conclusion selected). Queue: 300 rules.
8600 rules inserted. Base: 8570 rules (185 with conclusion selected). Queue: 268 rules.
8800 rules inserted. Base: 8761 rules (225 with conclusion selected). Queue: 388 rules.
9000 rules inserted. Base: 8953 rules (236 with conclusion selected). Queue: 374 rules.
9200 rules inserted. Base: 9139 rules (246 with conclusion selected). Queue: 377 rules.
9400 rules inserted. Base: 9332 rules (253 with conclusion selected). Queue: 398 rules.
9600 rules inserted. Base: 9524 rules (255 with conclusion selected). Queue: 379 rules.
9800 rules inserted. Base: 9713 rules (278 with conclusion selected). Queue: 408 rules.
10000 rules inserted. Base: 9885 rules (278 with conclusion selected). Queue: 390 rules.
10200 rules inserted. Base: 10076 rules (290 with conclusion selected). Queue: 401 rules.
10400 rules inserted. Base: 10242 rules (290 with conclusion selected). Queue: 377 rules.
10600 rules inserted. Base: 10429 rules (296 with conclusion selected). Queue: 382 rules.
10800 rules inserted. Base: 10583 rules (296 with conclusion selected). Queue: 378 rules.
11000 rules inserted. Base: 10773 rules (303 with conclusion selected). Queue: 433 rules.
11200 rules inserted. Base: 10937 rules (303 with conclusion selected). Queue: 421 rules.
11400 rules inserted. Base: 11128 rules (353 with conclusion selected). Queue: 563 rules.
11600 rules inserted. Base: 11291 rules (363 with conclusion selected). Queue: 606 rules.
11800 rules inserted. Base: 11470 rules (371 with conclusion selected). Queue: 607 rules.
12000 rules inserted. Base: 11646 rules (395 with conclusion selected). Queue: 655 rules.
12200 rules inserted. Base: 11807 rules (397 with conclusion selected). Queue: 645 rules.
12400 rules inserted. Base: 11976 rules (399 with conclusion selected). Queue: 591 rules.
12600 rules inserted. Base: 12176 rules (408 with conclusion selected). Queue: 583 rules.
12800 rules inserted. Base: 12309 rules (411 with conclusion selected). Queue: 617 rules.
13000 rules inserted. Base: 12464 rules (411 with conclusion selected). Queue: 581 rules.
13200 rules inserted. Base: 12664 rules (411 with conclusion selected). Queue: 541 rules.
13400 rules inserted. Base: 12808 rules (411 with conclusion selected). Queue: 481 rules.
13600 rules inserted. Base: 12883 rules (413 with conclusion selected). Queue: 498 rules.
13800 rules inserted. Base: 13051 rules (413 with conclusion selected). Queue: 488 rules.
14000 rules inserted. Base: 13199 rules (422 with conclusion selected). Queue: 497 rules.
14200 rules inserted. Base: 13375 rules (425 with conclusion selected). Queue: 478 rules.
14400 rules inserted. Base: 13499 rules (433 with conclusion selected). Queue: 509 rules.
14600 rules inserted. Base: 13662 rules (441 with conclusion selected). Queue: 540 rules.
14800 rules inserted. Base: 13817 rules (449 with conclusion selected). Queue: 571 rules.
15000 rules inserted. Base: 13961 rules (463 with conclusion selected). Queue: 593 rules.
15200 rules inserted. Base: 14145 rules (465 with conclusion selected). Queue: 573 rules.
15400 rules inserted. Base: 14303 rules (478 with conclusion selected). Queue: 543 rules.
15600 rules inserted. Base: 14465 rules (478 with conclusion selected). Queue: 492 rules.
15800 rules inserted. Base: 14636 rules (479 with conclusion selected). Queue: 500 rules.
16000 rules inserted. Base: 14796 rules (482 with conclusion selected). Queue: 494 rules.
16200 rules inserted. Base: 14947 rules (487 with conclusion selected). Queue: 482 rules.
16400 rules inserted. Base: 15111 rules (489 with conclusion selected). Queue: 469 rules.
16600 rules inserted. Base: 15227 rules (493 with conclusion selected). Queue: 461 rules.
16800 rules inserted. Base: 15385 rules (494 with conclusion selected). Queue: 437 rules.
17000 rules inserted. Base: 15511 rules (506 with conclusion selected). Queue: 527 rules.
17200 rules inserted. Base: 15653 rules (512 with conclusion selected). Queue: 522 rules.
17400 rules inserted. Base: 15791 rules (516 with conclusion selected). Queue: 524 rules.
17600 rules inserted. Base: 15959 rules (520 with conclusion selected). Queue: 450 rules.
17800 rules inserted. Base: 16073 rules (525 with conclusion selected). Queue: 453 rules.
18000 rules inserted. Base: 16241 rules (531 with conclusion selected). Queue: 445 rules.
18200 rules inserted. Base: 16383 rules (536 with conclusion selected). Queue: 461 rules.
18400 rules inserted. Base: 16525 rules (536 with conclusion selected). Queue: 442 rules.
18600 rules inserted. Base: 16670 rules (536 with conclusion selected). Queue: 424 rules.
18800 rules inserted. Base: 16812 rules (536 with conclusion selected). Queue: 410 rules.
19000 rules inserted. Base: 16931 rules (536 with conclusion selected). Queue: 402 rules.
19200 rules inserted. Base: 17064 rules (536 with conclusion selected). Queue: 406 rules.
19400 rules inserted. Base: 17190 rules (536 with conclusion selected). Queue: 396 rules.
19600 rules inserted. Base: 17331 rules (536 with conclusion selected). Queue: 388 rules.
19800 rules inserted. Base: 17427 rules (536 with conclusion selected). Queue: 368 rules.
20000 rules inserted. Base: 17524 rules (546 with conclusion selected). Queue: 373 rules.
20200 rules inserted. Base: 17656 rules (556 with conclusion selected). Queue: 416 rules.
20400 rules inserted. Base: 17770 rules (572 with conclusion selected). Queue: 442 rules.
20600 rules inserted. Base: 17902 rules (580 with conclusion selected). Queue: 434 rules.
20800 rules inserted. Base: 18043 rules (594 with conclusion selected). Queue: 407 rules.
21000 rules inserted. Base: 18188 rules (598 with conclusion selected). Queue: 414 rules.
21200 rules inserted. Base: 18341 rules (608 with conclusion selected). Queue: 380 rules.
21400 rules inserted. Base: 18503 rules (612 with conclusion selected). Queue: 416 rules.
21600 rules inserted. Base: 18643 rules (614 with conclusion selected). Queue: 401 rules.
21800 rules inserted. Base: 18783 rules (614 with conclusion selected). Queue: 385 rules.
22000 rules inserted. Base: 18941 rules (620 with conclusion selected). Queue: 378 rules.
22200 rules inserted. Base: 19092 rules (620 with conclusion selected). Queue: 359 rules.
22400 rules inserted. Base: 19227 rules (620 with conclusion selected). Queue: 319 rules.
22600 rules inserted. Base: 19385 rules (625 with conclusion selected). Queue: 315 rules.
22800 rules inserted. Base: 19502 rules (631 with conclusion selected). Queue: 325 rules.
23000 rules inserted. Base: 19679 rules (633 with conclusion selected). Queue: 313 rules.
23200 rules inserted. Base: 19842 rules (633 with conclusion selected). Queue: 295 rules.
23400 rules inserted. Base: 19958 rules (633 with conclusion selected). Queue: 292 rules.
23600 rules inserted. Base: 20129 rules (635 with conclusion selected). Queue: 298 rules.
23800 rules inserted. Base: 20288 rules (655 with conclusion selected). Queue: 386 rules.
24000 rules inserted. Base: 20468 rules (659 with conclusion selected). Queue: 363 rules.
24200 rules inserted. Base: 20637 rules (659 with conclusion selected). Queue: 347 rules.
24400 rules inserted. Base: 20788 rules (659 with conclusion selected). Queue: 336 rules.
24600 rules inserted. Base: 20952 rules (660 with conclusion selected). Queue: 340 rules.
24800 rules inserted. Base: 21120 rules (660 with conclusion selected). Queue: 334 rules.
25000 rules inserted. Base: 21271 rules (660 with conclusion selected). Queue: 338 rules.
25200 rules inserted. Base: 21453 rules (660 with conclusion selected). Queue: 349 rules.
25400 rules inserted. Base: 21612 rules (660 with conclusion selected). Queue: 345 rules.
25600 rules inserted. Base: 21731 rules (660 with conclusion selected). Queue: 344 rules.
25800 rules inserted. Base: 21879 rules (660 with conclusion selected). Queue: 346 rules.
26000 rules inserted. Base: 21993 rules (665 with conclusion selected). Queue: 370 rules.
26200 rules inserted. Base: 22172 rules (666 with conclusion selected). Queue: 369 rules.
26400 rules inserted. Base: 22339 rules (678 with conclusion selected). Queue: 393 rules.
26600 rules inserted. Base: 22483 rules (678 with conclusion selected). Queue: 387 rules.
26800 rules inserted. Base: 22665 rules (688 with conclusion selected). Queue: 382 rules.
27000 rules inserted. Base: 22811 rules (688 with conclusion selected). Queue: 370 rules.
27200 rules inserted. Base: 22963 rules (690 with conclusion selected). Queue: 366 rules.
27400 rules inserted. Base: 23147 rules (690 with conclusion selected). Queue: 354 rules.
27600 rules inserted. Base: 23297 rules (690 with conclusion selected). Queue: 352 rules.
27800 rules inserted. Base: 23381 rules (690 with conclusion selected). Queue: 348 rules.
28000 rules inserted. Base: 23554 rules (690 with conclusion selected). Queue: 350 rules.
28200 rules inserted. Base: 23703 rules (694 with conclusion selected). Queue: 338 rules.
28400 rules inserted. Base: 23825 rules (694 with conclusion selected). Queue: 334 rules.
28600 rules inserted. Base: 23995 rules (702 with conclusion selected). Queue: 386 rules.
28800 rules inserted. Base: 24185 rules (738 with conclusion selected). Queue: 550 rules.
29000 rules inserted. Base: 24357 rules (740 with conclusion selected). Queue: 544 rules.
29200 rules inserted. Base: 24555 rules (740 with conclusion selected). Queue: 492 rules.
29400 rules inserted. Base: 24736 rules (744 with conclusion selected). Queue: 456 rules.
29600 rules inserted. Base: 24883 rules (744 with conclusion selected). Queue: 456 rules.
29800 rules inserted. Base: 25067 rules (748 with conclusion selected). Queue: 454 rules.
30000 rules inserted. Base: 25247 rules (748 with conclusion selected). Queue: 442 rules.
30200 rules inserted. Base: 25444 rules (748 with conclusion selected). Queue: 442 rules.
30400 rules inserted. Base: 25609 rules (748 with conclusion selected). Queue: 430 rules.
30600 rules inserted. Base: 25805 rules (748 with conclusion selected). Queue: 430 rules.
30800 rules inserted. Base: 25979 rules (748 with conclusion selected). Queue: 408 rules.
31000 rules inserted. Base: 26177 rules (748 with conclusion selected). Queue: 390 rules.
31200 rules inserted. Base: 26333 rules (748 with conclusion selected). Queue: 380 rules.
31400 rules inserted. Base: 26523 rules (748 with conclusion selected). Queue: 380 rules.
31600 rules inserted. Base: 26693 rules (748 with conclusion selected). Queue: 366 rules.
31800 rules inserted. Base: 26891 rules (748 with conclusion selected). Queue: 342 rules.
32000 rules inserted. Base: 27011 rules (748 with conclusion selected). Queue: 330 rules.
32200 rules inserted. Base: 27197 rules (748 with conclusion selected). Queue: 324 rules.
32400 rules inserted. Base: 27318 rules (754 with conclusion selected). Queue: 370 rules.
32600 rules inserted. Base: 27493 rules (756 with conclusion selected). Queue: 366 rules.
32800 rules inserted. Base: 27669 rules (756 with conclusion selected). Queue: 408 rules.
33000 rules inserted. Base: 27807 rules (756 with conclusion selected). Queue: 436 rules.
33200 rules inserted. Base: 28005 rules (756 with conclusion selected). Queue: 428 rules.
33400 rules inserted. Base: 28205 rules (756 with conclusion selected). Queue: 434 rules.
33600 rules inserted. Base: 28333 rules (762 with conclusion selected). Queue: 392 rules.
33800 rules inserted. Base: 28523 rules (762 with conclusion selected). Queue: 392 rules.
34000 rules inserted. Base: 28667 rules (776 with conclusion selected). Queue: 432 rules.
34200 rules inserted. Base: 28859 rules (776 with conclusion selected). Queue: 424 rules.
34400 rules inserted. Base: 29049 rules (780 with conclusion selected). Queue: 410 rules.
34600 rules inserted. Base: 29243 rules (780 with conclusion selected). Queue: 402 rules.
34800 rules inserted. Base: 29431 rules (780 with conclusion selected). Queue: 382 rules.
35000 rules inserted. Base: 29631 rules (780 with conclusion selected). Queue: 458 rules.
35200 rules inserted. Base: 29787 rules (780 with conclusion selected). Queue: 448 rules.
35400 rules inserted. Base: 29987 rules (780 with conclusion selected). Queue: 448 rules.
35600 rules inserted. Base: 30161 rules (780 with conclusion selected). Queue: 448 rules.
35800 rules inserted. Base: 30311 rules (780 with conclusion selected). Queue: 448 rules.
36000 rules inserted. Base: 30423 rules (780 with conclusion selected). Queue: 460 rules.
36200 rules inserted. Base: 30615 rules (780 with conclusion selected). Queue: 488 rules.
36400 rules inserted. Base: 30811 rules (796 with conclusion selected). Queue: 538 rules.
36600 rules inserted. Base: 30993 rules (796 with conclusion selected). Queue: 528 rules.
36800 rules inserted. Base: 31193 rules (796 with conclusion selected). Queue: 528 rules.
37000 rules inserted. Base: 31367 rules (796 with conclusion selected). Queue: 478 rules.
37200 rules inserted. Base: 31563 rules (796 with conclusion selected). Queue: 418 rules.
37400 rules inserted. Base: 31759 rules (796 with conclusion selected). Queue: 392 rules.
37600 rules inserted. Base: 31941 rules (796 with conclusion selected). Queue: 392 rules.
37800 rules inserted. Base: 32139 rules (796 with conclusion selected). Queue: 374 rules.
38000 rules inserted. Base: 32285 rules (796 with conclusion selected). Queue: 372 rules.
38200 rules inserted. Base: 32483 rules (796 with conclusion selected). Queue: 374 rules.
38400 rules inserted. Base: 32663 rules (796 with conclusion selected). Queue: 370 rules.
38600 rules inserted. Base: 32820 rules (796 with conclusion selected). Queue: 370 rules.
38800 rules inserted. Base: 33013 rules (796 with conclusion selected). Queue: 370 rules.
39000 rules inserted. Base: 33193 rules (806 with conclusion selected). Queue: 436 rules.
39200 rules inserted. Base: 33393 rules (806 with conclusion selected). Queue: 436 rules.
39400 rules inserted. Base: 33573 rules (809 with conclusion selected). Queue: 427 rules.
39600 rules inserted. Base: 33723 rules (810 with conclusion selected). Queue: 378 rules.
39800 rules inserted. Base: 33865 rules (810 with conclusion selected). Queue: 348 rules.
40000 rules inserted. Base: 33995 rules (810 with conclusion selected). Queue: 344 rules.
40200 rules inserted. Base: 34179 rules (810 with conclusion selected). Queue: 340 rules.
40400 rules inserted. Base: 34373 rules (810 with conclusion selected). Queue: 350 rules.
40600 rules inserted. Base: 34539 rules (810 with conclusion selected). Queue: 362 rules.
40800 rules inserted. Base: 34733 rules (810 with conclusion selected). Queue: 360 rules.
41000 rules inserted. Base: 34875 rules (810 with conclusion selected). Queue: 334 rules.
41200 rules inserted. Base: 35065 rules (810 with conclusion selected). Queue: 326 rules.
41400 rules inserted. Base: 35263 rules (810 with conclusion selected). Queue: 320 rules.
41600 rules inserted. Base: 35417 rules (810 with conclusion selected). Queue: 320 rules.
41800 rules inserted. Base: 35613 rules (810 with conclusion selected). Queue: 318 rules.
42000 rules inserted. Base: 35803 rules (810 with conclusion selected). Queue: 320 rules.
42200 rules inserted. Base: 35959 rules (810 with conclusion selected). Queue: 314 rules.
42400 rules inserted. Base: 36159 rules (810 with conclusion selected). Queue: 314 rules.
42600 rules inserted. Base: 36315 rules (826 with conclusion selected). Queue: 323 rules.
42800 rules inserted. Base: 36511 rules (826 with conclusion selected). Queue: 274 rules.
43000 rules inserted. Base: 36707 rules (826 with conclusion selected). Queue: 262 rules.
43200 rules inserted. Base: 36899 rules (826 with conclusion selected). Queue: 226 rules.
43400 rules inserted. Base: 37099 rules (826 with conclusion selected). Queue: 222 rules.
43600 rules inserted. Base: 37297 rules (826 with conclusion selected). Queue: 222 rules.
43800 rules inserted. Base: 37497 rules (826 with conclusion selected). Queue: 214 rules.
44000 rules inserted. Base: 37697 rules (826 with conclusion selected). Queue: 206 rules.
44200 rules inserted. Base: 37893 rules (826 with conclusion selected). Queue: 204 rules.
44400 rules inserted. Base: 38015 rules (826 with conclusion selected). Queue: 200 rules.
44600 rules inserted. Base: 38207 rules (826 with conclusion selected). Queue: 200 rules.
44800 rules inserted. Base: 38375 rules (826 with conclusion selected). Queue: 188 rules.
45000 rules inserted. Base: 38541 rules (826 with conclusion selected). Queue: 200 rules.
45200 rules inserted. Base: 38733 rules (826 with conclusion selected). Queue: 200 rules.
45400 rules inserted. Base: 38925 rules (826 with conclusion selected). Queue: 200 rules.
45600 rules inserted. Base: 39049 rules (826 with conclusion selected). Queue: 200 rules.
45800 rules inserted. Base: 39177 rules (826 with conclusion selected). Queue: 200 rules.
46000 rules inserted. Base: 39377 rules (826 with conclusion selected). Queue: 208 rules.
46200 rules inserted. Base: 39577 rules (826 with conclusion selected). Queue: 208 rules.
46400 rules inserted. Base: 39705 rules (826 with conclusion selected). Queue: 200 rules.
46600 rules inserted. Base: 39905 rules (826 with conclusion selected). Queue: 184 rules.
46800 rules inserted. Base: 40097 rules (826 with conclusion selected). Queue: 180 rules.
47000 rules inserted. Base: 40297 rules (826 with conclusion selected). Queue: 176 rules.
47200 rules inserted. Base: 40483 rules (826 with conclusion selected). Queue: 168 rules.
47400 rules inserted. Base: 40625 rules (826 with conclusion selected). Queue: 168 rules.
47600 rules inserted. Base: 40825 rules (826 with conclusion selected). Queue: 114 rules.
47800 rules inserted. Base: 40985 rules (826 with conclusion selected). Queue: 64 rules.
48000 rules inserted. Base: 41153 rules (826 with conclusion selected). Queue: 64 rules.
48200 rules inserted. Base: 41317 rules (826 with conclusion selected). Queue: 72 rules.
48400 rules inserted. Base: 41501 rules (826 with conclusion selected). Queue: 40 rules.
48600 rules inserted. Base: 41677 rules (826 with conclusion selected). Queue: 40 rules.
48800 rules inserted. Base: 41849 rules (826 with conclusion selected). Queue: 24 rules.
49000 rules inserted. Base: 41977 rules (826 with conclusion selected). Queue: 16 rules.
ok, secrecy assumption verified: fact unreachable attacker2(uc_privkey(s_33),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,uc_privkey(s_33))
ok, secrecy assumption verified: fact unreachable attacker2(uc_psk(s_33),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,uc_psk(s_33))
ok, secrecy assumption verified: fact unreachable attacker2(x_75,dh_k(s_33))
ok, secrecy assumption verified: fact unreachable attacker2(dh_k(s_33),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_CFIN[],ch_client_CFIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_FIN[],ch_client_FIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_CRT[],ch_client_CRT[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_after_EE[],ch_client_after_EE[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_CFIN[],ch_server_CFIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_FIN[],ch_server_FIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_CRT[],ch_server_CRT[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_SH[],ch_server_SH[])
ok, secrecy assumption verified: fact unreachable attacker2(x_75,hmac_ideal(i,zero,uc_psk(s_33)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,zero,uc_psk(s_33)),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_33)),(tls13_resumption_psk_binder_key,hash_ideal(i,zero))))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_33)),(tls13_resumption_psk_binder_key,hash_ideal(i,zero))),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,dh_f(s_33))
ok, secrecy assumption verified: fact unreachable attacker2(dh_f(s_33),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))))
ok, secrecy assumption verified: fact unreachable attacker2(dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_33)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_33)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,hmac_ideal(i,extra_es,dh_f(s_33)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,extra_es,dh_f(s_33)),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_33)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_33)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_33)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_33)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_33)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_33)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_33)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_33)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(t,aead_enc(a_2,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_33)),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)),x_75,y,z))
ok, secrecy assumption verified: fact unreachable attacker2(aead_enc(a_2,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_33)),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)),x_75,y,z),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_33)),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_33)),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,aead_enc(a_2,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_33)),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)),x_75,y,z))
ok, secrecy assumption verified: fact unreachable attacker2(aead_enc(a_2,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_33)),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)),x_75,y,z),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_33)),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_33)),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)),t)
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 25 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 40 rules.
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_client_handshake_traffic_secret,hash_ideal(i,((log,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_key,zero)))
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 23 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 40 rules.
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_client_handshake_traffic_secret,hash_ideal(i,((log,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_key,zero)),t)
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 25 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 40 rules.
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_client_handshake_traffic_secret,hash_ideal(i,((log,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_finished,zero)))
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 23 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 40 rules.
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_client_handshake_traffic_secret,hash_ideal(i,((log,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_finished,zero)),t)
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 25 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 40 rules.
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_server_handshake_traffic_secret,hash_ideal(i,((log,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_key,zero)))
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 23 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 40 rules.
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_server_handshake_traffic_secret,hash_ideal(i,((log,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_key,zero)),t)
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 25 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 40 rules.
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_server_handshake_traffic_secret,hash_ideal(i,((log,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_finished,zero)))
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 23 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 40 rules.
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_server_handshake_traffic_secret,hash_ideal(i,((log,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_277,h_61,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_finished,zero)),t)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,dh_xy(s',dh_pub(id_g(StrongDH,2),dh_k(s_33))))
ok, secrecy assumption verified: fact unreachable attacker2(dh_xy(s',dh_pub(id_g(StrongDH,2),dh_k(s_33))),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,hmac_ideal(2,hmac_ideal(2,dh_xy(s',dh_pub(id_g(StrongDH,2),dh_k(s_33))),(hpke_secret,zero)),(hpke_key,hmac_ideal(2,zero,(hpke_info_hash,info_2)))))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(2,hmac_ideal(2,dh_xy(s',dh_pub(id_g(StrongDH,2),dh_k(s_33))),(hpke_secret,zero)),(hpke_key,hmac_ideal(2,zero,(hpke_info_hash,info_2)))),x_75)
ok, secrecy assumption verified: fact unreachable attacker2(x_75,hmac_ideal(2,hmac_ideal(2,dh_f(s'),(hpke_secret,zero)),(hpke_key,hmac_ideal(2,zero,(hpke_info_hash,info_2)))))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(2,hmac_ideal(2,dh_f(s'),(hpke_secret,zero)),(hpke_key,hmac_ideal(2,zero,(hpke_info_hash,info_2)))),x_75)
RESULT Diff-equivalence is true.

--------------------------------------------------------------
Verification summary:

Query(ies):
 - Diff-equivalence is true.
Associated axiom(s):
 - 
Axiom event(PreciseMess(ch,choice[id_11,id2_1],choice[st1,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id_11,id2'],choice[st1',st2'],choice[x1',x2'])) ==> st1 = st1' && x1 = x1' encoded as event2(PreciseMess(ch,id_11,st1,x1),PreciseMess(ch,id2_1,st2,x2)) && event2(PreciseMess(ch,id_11,st1',x1'),PreciseMess(ch,id2',st2',x2')) ==> st1 = st1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id_11],choice[st1,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id_11],choice[st1',st2'],choice[x1',x2'])) ==> st2 = st2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1,x1),PreciseMess(ch,id_11,st2,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id_11,st2',x2')) ==> st2 = st2' && x2 = x2'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st_4,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st_4,st2'],choice[x1',x2'])) ==> id1_1 = id1' && x1 = x1' encoded as event2(PreciseMess(ch,id1_1,st_4,x1),PreciseMess(ch,id2_1,st2,x2)) && event2(PreciseMess(ch,id1',st_4,x1'),PreciseMess(ch,id2',st2',x2')) ==> id1_1 = id1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st1,st_4],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st1',st_4],choice[x1',x2'])) ==> id2_1 = id2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1,x1),PreciseMess(ch,id2_1,st_4,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id2',st_4,x2')) ==> id2_1 = id2' && x2 = x2'
 in biprocess 1.
Associated restriction(s):
 - Restriction event(Same(choice[x_75,x'_1])) ==> x_75 = x'_1 encoded as event2(Same(x_75),Same(x'_1)) ==> x_75 = x'_1 in biprocess 1.
 - Restriction event(Selected_lgt(choice[c_dom1_1,c_dom1'],choice[c_dom2_1,c_dom2'],choice[sk_2,sk'],choice[spkey,spkey'],choice[crt_5,crt'])) ==> c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && c_dom1_1 = c_dom1' && sk_2 = sk' && spkey = spkey' && crt_5 = crt' encoded as event2(Selected_lgt(c_dom1_1,c_dom2_1,sk_2,spkey,crt_5),Selected_lgt(c_dom1',c_dom2',sk',spkey',crt')) ==> c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && c_dom1_1 = c_dom1' && sk_2 = sk' && spkey = spkey' && crt_5 = crt' in biprocess 1.
 - Restriction event(Selected_psk(choice[c_dom1_1,c_dom1'],choice[c_dom2_1,c_dom2'],choice[s_dom1_1,s_dom1'],choice[s_dom2_1,s_dom2'],choice[id_11,id'],choice[ipsk,ipsk'])) ==> s_dom1_1 = s_dom2_1 && s_dom1' = s_dom2' && c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && s_dom1_1 = s_dom1' && c_dom1_1 = c_dom1' && id_11 = id' && ipsk = ipsk' encoded as event2(Selected_psk(c_dom1_1,c_dom2_1,s_dom1_1,s_dom2_1,id_11,ipsk),Selected_psk(c_dom1',c_dom2',s_dom1',s_dom2',id',ipsk')) ==> s_dom1_1 = s_dom2_1 && s_dom1' = s_dom2' && c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && s_dom1_1 = s_dom1' && c_dom1_1 = c_dom1' && id_11 = id' && ipsk = ipsk' in biprocess 1.

--------------------------------------------------------------

