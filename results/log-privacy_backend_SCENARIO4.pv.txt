PROTOCOL generated_models/privacy_backend_SCENARIO4.pv
Biprocess 0 (that is, the initial process):
{1}let tls_h: hash_alg = id_hash(StrongHash,1) in
{2}let tls_a: aead_alg = id_aead(StrongAE,1) in
{3}let tls_g: group = id_g(StrongDH,1) in
{4}let ech_h: hash_alg = id_hash(StrongHash,2) in
{5}let ech_a: aead_alg = id_aead(StrongAE,2) in
{6}let ech_g: group = id_g(StrongDH,2) in
(
    {7}!
    {8}in(ch_client_CFIN, (id_client: idProc,cr: bytes32,sr: bytes32,h_alg: hash_alg,a_alg: aead_alg,psk: preSharedKey,s_pkey: pubkey,c_pkey: pubkey,master_secret: bitstring,chk: aead_key,shk: aead_key,cfin: mac_key,sfin: mac_key,cur_log: bitstring));
    {9}let l: label = tls13_client_application_traffic_secret in
    {10}let h: bitstring = catch-fail(hash(h_alg,cur_log)) in
    {11}let v: bool = not-caught-fail(h) in
    {12}let x: bitstring = (if v then (l,h) else caught-fail) in
    {13}let client_ats: bitstring = catch-fail((if v then hmac(h_alg,master_secret,x) else fail-any)) in
    {14}let v_1: bool = not-caught-fail(client_ats) in
    {15}let l_1: label = (if v_1 then tls13_server_application_traffic_secret else caught-fail) in
    {16}let h_1: bitstring = (if v_1 then catch-fail(hash(h_alg,cur_log)) else caught-fail) in
    {17}let v_2: bool = not-caught-fail(h_1) in
    {18}let x_1: bitstring = (if v_2 then (l_1,h_1) else caught-fail) in
    {19}let server_ats: bitstring = (if v_1 then catch-fail((if v_2 then hmac(h_alg,master_secret,x_1) else fail-any)) else caught-fail) in
    {20}let v_3: bool = not-caught-fail(server_ats) in
    {21}let l_2: label = (if v_3 then tls13_exporter_master_secret else caught-fail) in
    {22}let h_2: bitstring = (if v_3 then catch-fail(hash(h_alg,cur_log)) else caught-fail) in
    {23}let v_4: bool = not-caught-fail(h_2) in
    {24}let x_2: bitstring = (if v_4 then (l_2,h_2) else caught-fail) in
    {25}let ems: bitstring = (if v_3 then catch-fail((if v_4 then hmac(h_alg,master_secret,x_2) else fail-any)) else caught-fail) in
    {26}let v_5: bool = not-caught-fail(ems) in
    {27}let l_3: label = (if v_5 then tls13_key else caught-fail) in
    {28}let h_3: bitstring = (if v_5 then zero else caught-fail) in
    {29}let x_3: bitstring = (if v_5 then (l_3,h_3) else caught-fail) in
    {30}let client_wkad: bitstring = (if v_5 then catch-fail(hmac(h_alg,client_ats,x_3)) else caught-fail) in
    {31}let v_6: bool = not-caught-fail(client_wkad) in
    {32}let l_4: label = (if v_6 then tls13_key else caught-fail) in
    {33}let h_4: bitstring = (if v_6 then zero else caught-fail) in
    {34}let x_4: bitstring = (if v_6 then (l_4,h_4) else caught-fail) in
    {35}let server_wkad: bitstring = (if v_6 then catch-fail(hmac(h_alg,server_ats,x_4)) else caught-fail) in
    {36}let v_7: bool = not-caught-fail(server_wkad) in
    {37}let (cak: aead_key,sak: aead_key,ems_1: bitstring) = (if v_1 then (if v_3 then (if v_5 then (if v_6 then (if v_7 then (client_wkad,server_wkad,ems) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {38}let client_hash_msg: bitstring = hmac(h_alg,cfin,cur_log) in
    {39}let client_finished_msg: msg = FIN(client_hash_msg) in
    {40}let cur_log': bitstring = (cur_log,client_finished_msg) in
    {41}let l_5: label = tls13_resumption_master_secret in
    {42}let h_5: bitstring = catch-fail(hash(h_alg,cur_log')) in
    {43}let v_8: bool = not-caught-fail(h_5) in
    {44}let x_5: bitstring = (if v_8 then (l_5,h_5) else caught-fail) in
    {45}let rms: bitstring = (if v_8 then hmac(h_alg,master_secret,x_5) else fail-any) in
    {46}let enc_client_finished_msg: bitstring = aead_enc(a_alg,chk,zero,zero,client_finished_msg) in
    {47}out(io, enc_client_finished_msg);
    {48}event SanityClientCFIN(id_client,cr,sr,psk,master_secret,chk,shk,cfin,sfin,s_pkey,c_pkey,cak,sak,ems_1,rms,cur_log')
) | (
    {49}!
    {50}in(ch_client_FIN, (id_client_1: idProc,cr_1: bytes32,sr_1: bytes32,h_alg_1: hash_alg,a_alg_1: aead_alg,c_dom: domain,psk_1: preSharedKey,cert_req: bool,s_pkey_1: pubkey,master_secret_1: bitstring,chk_1: aead_key,shk_1: aead_key,cfin_1: mac_key,sfin_1: mac_key,cur_log_1: bitstring));
    {51}new st[]: bitstring;
    {52}event PreciseMess(ch_client_FIN,id_client_1,st,master_secret_1);
    {53}in(io, enc_finished_msg: bitstring);
    {54}let finished_msg: msg = aead_dec(a_alg_1,shk_1,zero,zero,enc_finished_msg) in
    (
        {55}let FIN(hash_msg: bitstring) = finished_msg in
        (
            {56}if (hash_msg = hmac(h_alg_1,sfin_1,cur_log_1)) then
            {57}let cur_log2: bitstring = (cur_log_1,finished_msg) in
            {58}if cert_req then
            (
                {70}get long_term_keys(c_dom': domain,sk: privkey,c_pkey_1: pubkey,crt: certificate) in
                {59}event Selected_lgt(c_dom',c_dom,sk,c_pkey_1,crt);
                {60}let certificate_msg: msg = CRT(zero,crt) in
                {61}let encrypted_certificate_msg: bitstring = aead_enc(a_alg_1,chk_1,zero,zero,certificate_msg) in
                {62}out(io, encrypted_certificate_msg);
                {63}let cur_log2_1: bitstring = (cur_log2,certificate_msg) in
                {64}let signed_log: bitstring = sign(sk,hash(h_alg_1,cur_log2_1)) in
                {65}let certificate_verify_msg: msg = CV(signed_log) in
                {66}let encrypted_certificate_verify_msg: bitstring = aead_enc(a_alg_1,chk_1,zero,zero,certificate_verify_msg) in
                {67}out(io, encrypted_certificate_verify_msg);
                {68}let cur_log3: bitstring = (cur_log2_1,certificate_verify_msg) in
                {69}out(ch_client_CFIN, (id_client_1,cr_1,sr_1,h_alg_1,a_alg_1,NoPSK,s_pkey_1,c_pkey_1,master_secret_1,chk_1,shk_1,cfin_1,sfin_1,cur_log3))
            )
            else
                {71}out(ch_client_CFIN, (id_client_1,cr_1,sr_1,h_alg_1,a_alg_1,psk_1,s_pkey_1,NoPubKey,master_secret_1,chk_1,shk_1,cfin_1,sfin_1,cur_log2))
        )
        else
            {72}out(io, unexpected_message)
    )
    else
        {73}out(io, bad_record_mac)
) | (
    {74}!
    {75}in(ch_client_CRT, (id_client_2: idProc,cr_2: bytes32,sr_2: bytes32,h_alg_2: hash_alg,a_alg_2: aead_alg,c_dom_1: domain,s_dom: domain,psk_2: preSharedKey,cert_req_1: bool,master_secret_2: bitstring,chk_2: aead_key,shk_2: aead_key,cfin_2: mac_key,sfin_2: mac_key,cur_log_2: bitstring,certificate_msg_1: msg));
    {76}let CRT(=zero,crt_1: certificate) = certificate_msg_1 in
    {77}let cur_log2_2: bitstring = (cur_log_2,certificate_msg_1) in
    {78}in(io, enc_crt_verif_msg: bitstring);
    {79}let certificate_verify_msg_1: msg = aead_dec(a_alg_2,shk_2,zero,zero,enc_crt_verif_msg) in
    {80}let CV(signed_log_1: bitstring) = certificate_verify_msg_1 in
    {81}if (verify(get_pkey(crt_1),hash(h_alg_2,cur_log2_2),signed_log_1) && ((get_domain(crt_1) = s_dom) && verify_cert(crt_1))) then
    {82}let s_pkey_2: pubkey = get_pkey(crt_1) in
    {83}let cur_log3_1: bitstring = (cur_log2_2,certificate_verify_msg_1) in
    {84}out(ch_client_FIN, (id_client_2,cr_2,sr_2,h_alg_2,a_alg_2,c_dom_1,psk_2,cert_req_1,s_pkey_2,master_secret_2,chk_2,shk_2,cfin_2,sfin_2,cur_log3_1))
) | (
    {85}!
    {86}in(ch_client_after_EE, (id_client_3: idProc,cr_3: bytes32,sr_3: bytes32,h_alg_3: hash_alg,a_alg_3: aead_alg,c_dom_2: domain,s_dom_1: domain,psk_3: preSharedKey,master_secret_3: bitstring,chk_3: aead_key,shk_3: aead_key,cfin_3: mac_key,sfin_3: mac_key,cur_log_3: bitstring));
    {87}new st_1[]: bitstring;
    {88}event PreciseMess(ch_client_after_EE,id_client_3,st_1,master_secret_3);
    {89}if (psk_3 = NoPSK) then
    (
        {90}in(io, enc_msg: bitstring);
        {91}let msg': msg = aead_dec(a_alg_3,shk_3,zero,zero,enc_msg) in
        {92}let CRTR(=zero) = msg' in
        (
            {93}let cur_log2_3: bitstring = (cur_log_3,msg') in
            {94}in(io, enc_crt_msg: bitstring);
            {95}let certificate_msg_2: msg = aead_dec(a_alg_3,shk_3,zero,zero,enc_crt_msg) in
            {96}out(ch_client_CRT, (id_client_3,cr_3,sr_3,h_alg_3,a_alg_3,c_dom_2,s_dom_1,psk_3,true,master_secret_3,chk_3,shk_3,cfin_3,sfin_3,cur_log2_3,certificate_msg_2))
        )
        else
            {97}let CRT(=zero,crt_2: certificate) = msg' in
                {98}out(ch_client_CRT, (id_client_3,cr_3,sr_3,h_alg_3,a_alg_3,c_dom_2,s_dom_1,psk_3,false,master_secret_3,chk_3,shk_3,cfin_3,sfin_3,cur_log_3,msg'))
            else
                {99}out(io, unexpected_message)
    )
    else
        {100}out(ch_client_FIN, (id_client_3,cr_3,sr_3,h_alg_3,a_alg_3,c_dom_2,psk_3,false,NoPubKey,master_secret_3,chk_3,shk_3,cfin_3,sfin_3,cur_log_3))
) | (
    {101}!
    {102}in(ch_server_CFIN, (id_server: idProc,cr_4: bytes32,sr_4: bytes32,h_alg_4: hash_alg,a_alg_4: aead_alg,psk_4: preSharedKey,s_pkey_3: pubkey,c_pkey_2: pubkey,master_secret_4: bitstring,chk_4: aead_key,shk_4: aead_key,cfin_4: mac_key,sfin_4: mac_key,cur_log_4: bitstring));
    {103}in(io, enc_fin: bitstring);
    {104}let fin_msg: msg = aead_dec(a_alg_4,chk_4,zero,zero,enc_fin) in
    {105}let FIN(hash_msg_1: bitstring) = fin_msg in
    {106}if (hash_msg_1 = hmac(h_alg_4,cfin_4,cur_log_4)) then
    {107}let l_6: label = tls13_client_application_traffic_secret in
    {108}let h_6: bitstring = catch-fail(hash(h_alg_4,cur_log_4)) in
    {109}let v_9: bool = not-caught-fail(h_6) in
    {110}let x_6: bitstring = (if v_9 then (l_6,h_6) else caught-fail) in
    {111}let client_ats_1: bitstring = catch-fail((if v_9 then hmac(h_alg_4,master_secret_4,x_6) else fail-any)) in
    {112}let v_10: bool = not-caught-fail(client_ats_1) in
    {113}let l_7: label = (if v_10 then tls13_server_application_traffic_secret else caught-fail) in
    {114}let h_7: bitstring = (if v_10 then catch-fail(hash(h_alg_4,cur_log_4)) else caught-fail) in
    {115}let v_11: bool = not-caught-fail(h_7) in
    {116}let x_7: bitstring = (if v_11 then (l_7,h_7) else caught-fail) in
    {117}let server_ats_1: bitstring = (if v_10 then catch-fail((if v_11 then hmac(h_alg_4,master_secret_4,x_7) else fail-any)) else caught-fail) in
    {118}let v_12: bool = not-caught-fail(server_ats_1) in
    {119}let l_8: label = (if v_12 then tls13_exporter_master_secret else caught-fail) in
    {120}let h_8: bitstring = (if v_12 then catch-fail(hash(h_alg_4,cur_log_4)) else caught-fail) in
    {121}let v_13: bool = not-caught-fail(h_8) in
    {122}let x_8: bitstring = (if v_13 then (l_8,h_8) else caught-fail) in
    {123}let ems_2: bitstring = (if v_12 then catch-fail((if v_13 then hmac(h_alg_4,master_secret_4,x_8) else fail-any)) else caught-fail) in
    {124}let v_14: bool = not-caught-fail(ems_2) in
    {125}let l_9: label = (if v_14 then tls13_key else caught-fail) in
    {126}let h_9: bitstring = (if v_14 then zero else caught-fail) in
    {127}let x_9: bitstring = (if v_14 then (l_9,h_9) else caught-fail) in
    {128}let client_wkad_1: bitstring = (if v_14 then catch-fail(hmac(h_alg_4,client_ats_1,x_9)) else caught-fail) in
    {129}let v_15: bool = not-caught-fail(client_wkad_1) in
    {130}let l_10: label = (if v_15 then tls13_key else caught-fail) in
    {131}let h_10: bitstring = (if v_15 then zero else caught-fail) in
    {132}let x_10: bitstring = (if v_15 then (l_10,h_10) else caught-fail) in
    {133}let server_wkad_1: bitstring = (if v_15 then catch-fail(hmac(h_alg_4,server_ats_1,x_10)) else caught-fail) in
    {134}let v_16: bool = not-caught-fail(server_wkad_1) in
    {135}let (cak_1: aead_key,sak_1: aead_key,ems_3: bitstring) = (if v_10 then (if v_12 then (if v_14 then (if v_15 then (if v_16 then (client_wkad_1,server_wkad_1,ems_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {136}let cur_log_CFIN: bitstring = (cur_log_4,fin_msg) in
    {137}let l_11: label = tls13_resumption_master_secret in
    {138}let h_11: bitstring = catch-fail(hash(h_alg_4,cur_log_CFIN)) in
    {139}let v_17: bool = not-caught-fail(h_11) in
    {140}let x_11: bitstring = (if v_17 then (l_11,h_11) else caught-fail) in
    {141}let rms_1: bitstring = (if v_17 then hmac(h_alg_4,master_secret_4,x_11) else fail-any) in
    {142}event SanityServerCFIN(id_server,cr_4,sr_4,psk_4,master_secret_4,chk_4,shk_4,cfin_4,sfin_4,s_pkey_3,c_pkey_2,cak_1,sak_1,ems_3,rms_1,cur_log_CFIN)
) | (
    {143}!
    {144}in(ch_server_FIN, (id_server_1: idProc,cr_5: bytes32,sr_5: bytes32,h_alg_5: hash_alg,a_alg_5: aead_alg,psk_5: preSharedKey,cert_req_2: bool,s_pkey_4: pubkey,master_secret_5: bitstring,chk_5: aead_key,shk_5: aead_key,cfin_5: mac_key,sfin_5: mac_key,cur_log_5: bitstring));
    {145}let hash_msg_2: bitstring = hmac(h_alg_5,sfin_5,cur_log_5) in
    {146}let finished_msg_1: msg = FIN(hash_msg_2) in
    {147}let enc_finished: bitstring = aead_enc(a_alg_5,shk_5,zero,zero,finished_msg_1) in
    {148}out(io, enc_finished);
    {149}let cur_log_FIN: bitstring = (cur_log_5,finished_msg_1) in
    {150}if ((psk_5 = NoPSK) && cert_req_2) then
    (
        {151}in(io, enc_cert_msg: bitstring);
        {152}let cert_msg: msg = aead_dec(a_alg_5,chk_5,zero,zero,enc_cert_msg) in
        {153}let CRT(=zero,crt_3: certificate) = cert_msg in
        {154}let cur_log_CRT: bitstring = (cur_log_FIN,cert_msg) in
        {155}in(io, enc_cert_verif_msg: bitstring);
        {156}let cert_verify_msg: msg = aead_dec(a_alg_5,chk_5,zero,zero,enc_cert_verif_msg) in
        {157}let CV(signed_log_2: bitstring) = cert_verify_msg in
        {158}if (verify(get_pkey(crt_3),hash(h_alg_5,cur_log_CRT),signed_log_2) && verify_cert(crt_3)) then
        {159}let c_pkey_3: pubkey = get_pkey(crt_3) in
        {160}let cur_log_CV: bitstring = (cur_log_CRT,cert_verify_msg) in
        {161}out(ch_server_CFIN, (id_server_1,cr_5,sr_5,h_alg_5,a_alg_5,psk_5,s_pkey_4,c_pkey_3,master_secret_5,chk_5,shk_5,cfin_5,sfin_5,cur_log_CV))
    )
    else
        {162}out(ch_server_CFIN, (id_server_1,cr_5,sr_5,h_alg_5,a_alg_5,psk_5,s_pkey_4,NoPubKey,master_secret_5,chk_5,shk_5,cfin_5,sfin_5,cur_log_FIN))
) | (
    {163}!
    {164}in(ch_server_CRT, (id_server_2: idProc,cr_6: bytes32,sr_6: bytes32,h_alg_6: hash_alg,a_alg_6: aead_alg,s_dom_2: domain,psk_6: preSharedKey,cert_req_3: bool,master_secret_6: bitstring,chk_6: aead_key,shk_6: aead_key,cfin_6: mac_key,sfin_6: mac_key,cur_log_6: bitstring));
    {165}new st_2[]: bitstring;
    {166}event PreciseMess(ch_server_CRT,id_server_2,st_2,master_secret_6);
    {178}get long_term_keys(s_dom': domain,sk_1: privkey,s_pkey_5: pubkey,crt_4: certificate) in
    {167}event Selected_lgt(s_dom',s_dom_2,sk_1,s_pkey_5,crt_4);
    {168}let certificate_msg_3: msg = CRT(zero,crt_4) in
    {169}let encrypted_certificate_msg_1: bitstring = aead_enc(a_alg_6,shk_6,zero,zero,certificate_msg_3) in
    {170}out(io, encrypted_certificate_msg_1);
    {171}let cur_log_CRT_1: bitstring = (cur_log_6,certificate_msg_3) in
    {172}let signed_log_3: bitstring = sign(sk_1,hash(h_alg_6,cur_log_CRT_1)) in
    {173}let certificate_verify_msg_2: msg = CV(signed_log_3) in
    {174}let encrypted_certificate_verify_msg_1: bitstring = aead_enc(a_alg_6,shk_6,zero,zero,certificate_verify_msg_2) in
    {175}out(io, encrypted_certificate_verify_msg_1);
    {176}let cur_log_CV_1: bitstring = (cur_log_CRT_1,certificate_verify_msg_2) in
    {177}out(ch_server_FIN, (id_server_2,cr_6,sr_6,h_alg_6,a_alg_6,psk_6,cert_req_3,s_pkey_5,master_secret_6,chk_6,shk_6,cfin_6,sfin_6,cur_log_CV_1))
) | (
    {179}!
    {180}in(ch_server_SH, (id_server_3: idProc,use_psk: bool,is_backend: bool,cert_req_4: bool,s_dom_3: domain,g: group,h_alg_7: hash_alg,a_alg_7: aead_alg,s_extra: extraExt,encrypted_ext: bitstring,client_hello: msg,cur_log_7: bitstring));
    {181}new st_3[]: bitstring;
    {182}event PreciseMess(ch_server_SH,id_server_3,st_3,client_hello);
    {183}let CH(cr_7: bytes32,offer: params) = client_hello in
    {184}let nego(=TLS13,=h_alg_7,=a_alg_7,client_kex_ext(DHE_kex(=g,gx: element)),sni_ext: sniExt,ech_ext: echExt,psk_ext: preSharedKeyExt,extra_ext: extraExt) = offer in
    (
        {185}if (not(is_backend) || (ech_ext = ech_is_inner)) then
        (
            {186}if (sni_ext = SNI(s_dom_3)) then
            (
                {187}let v_18: msg = client_hello in
                {188}let v_19: bool = (((TLS13 =nf 1-proj-nego(2-proj-CH(v_18))) && success?(1-proj-nego(2-proj-CH(v_18)))) && success?(1-proj-CH(v_18))) in
                {189}let extra_ext_1: extraExt = (if v_19 then 8-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {190}let psk_ext_1: preSharedKeyExt = (if v_19 then 7-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {191}let ech_ext_1: echExt = (if v_19 then 6-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {192}let sni_ext_1: sniExt = (if v_19 then 5-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {193}let kex_ext: keyShareExt = (if v_19 then 4-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {194}let a_alg_8: aead_alg = (if v_19 then 3-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {195}let h_alg_8: hash_alg = (if v_19 then 2-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {196}let cr_8: bytes32 = (if v_19 then 1-proj-CH(v_18) else caught-fail) in
                {197}let v_20: bitstring = (if v_19 then catch-fail((psk_ext_1,use_psk)) else caught-fail) in
                {198}let v_21: bool = (not-caught-fail(v_20) && ((success?(1-proj-client_psk_ext(1-proj-2-tuple(v_20))) && (true =nf 2-proj-2-tuple(v_20))) && success?(1-proj-2-tuple(v_20)))) in
                {199}let binders: bitstring = (if v_21 then 2-proj-client_psk_ext(1-proj-2-tuple(v_20)) else caught-fail) in
                {200}let id: identityPsk = (if v_21 then 1-proj-client_psk_ext(1-proj-2-tuple(v_20)) else caught-fail) in
                {201}let v_22: bool = (if v_21 then catch-fail(((get_receiver_psk(id) = s_dom_3) && (get_hash_psk(id) = h_alg_8))) else caught-fail) in
                {202}let psk_7: preSharedKey = (if v_22 then catch-fail(PSK(get_ipsk(id))) else caught-fail) in
                {203}let v_23: bool = not-caught-fail(psk_7) in
                {204}let s: bitstring = (if v_23 then zero else caught-fail) in
                {205}let k: bitstring = (if v_23 then catch-fail(psk2b(psk_7)) else caught-fail) in
                {206}let v_24: bool = not-caught-fail(k) in
                {207}let early_secret: bitstring = (if v_23 then catch-fail((if v_24 then hmac(h_alg_8,s,k) else fail-any)) else caught-fail) in
                {208}let v_25: bool = not-caught-fail(early_secret) in
                {209}let l_12: label = (if v_25 then tls13_resumption_psk_binder_key else caught-fail) in
                {210}let m: bitstring = (if v_25 then zero else caught-fail) in
                {211}let h_12: bitstring = (if v_25 then catch-fail(hash(h_alg_8,m)) else caught-fail) in
                {212}let v_26: bool = not-caught-fail(h_12) in
                {213}let x_12: bitstring = (if v_26 then (l_12,h_12) else caught-fail) in
                {214}let binder_key: bitstring = (if v_25 then catch-fail((if v_26 then hmac(h_alg_8,early_secret,x_12) else fail-any)) else caught-fail) in
                {215}let v_27: bool = not-caught-fail(binder_key) in
                {216}let v_28: bitstring = (if v_23 then catch-fail((if v_25 then (if v_27 then (early_secret,binder_key) else fail-any) else fail-any)) else caught-fail) in
                {217}let v_29: bool = (not-caught-fail(v_28) && success?(1-proj-2-tuple(v_28))) in
                {218}let kb: mac_key = (if v_29 then 2-proj-2-tuple(v_28) else caught-fail) in
                {219}let early_secret_1: bitstring = (if v_29 then 1-proj-2-tuple(v_28) else caught-fail) in
                {220}let offer_1: params = (if v_29 then nego(TLS13,h_alg_8,a_alg_8,kex_ext,sni_ext_1,ech_ext_1,trunc_client_psk_ext(id),extra_ext_1) else caught-fail) in
                {221}let cur_log'_1: bitstring = (if v_29 then (cur_log_7,CH(cr_8,offer_1)) else caught-fail) in
                {222}let psk_8: preSharedKey = (if is-false(v_22) then NoPSK else caught-fail) in
                {223}let s_1: bitstring = (if is-false(v_22) then zero else caught-fail) in
                {224}let k_1: bitstring = (if is-false(v_22) then catch-fail(psk2b(psk_8)) else caught-fail) in
                {225}let v_30: bool = not-caught-fail(k_1) in
                {226}let early_secret_2: bitstring = (if is-false(v_22) then catch-fail((if v_30 then hmac(h_alg_8,s_1,k_1) else fail-any)) else caught-fail) in
                {227}let v_31: bool = not-caught-fail(early_secret_2) in
                {228}let l_13: label = (if v_31 then tls13_resumption_psk_binder_key else caught-fail) in
                {229}let m_1: bitstring = (if v_31 then zero else caught-fail) in
                {230}let h_13: bitstring = (if v_31 then catch-fail(hash(h_alg_8,m_1)) else caught-fail) in
                {231}let v_32: bool = not-caught-fail(h_13) in
                {232}let x_13: bitstring = (if v_32 then (l_13,h_13) else caught-fail) in
                {233}let binder_key_1: bitstring = (if v_31 then catch-fail((if v_32 then hmac(h_alg_8,early_secret_2,x_13) else fail-any)) else caught-fail) in
                {234}let v_33: bool = not-caught-fail(binder_key_1) in
                {235}let v_34: bitstring = (if is-false(v_22) then catch-fail((if v_31 then (if v_33 then (early_secret_2,binder_key_1) else fail-any) else fail-any)) else caught-fail) in
                {236}let v_35: bool = (not-caught-fail(v_34) && success?(1-proj-2-tuple(v_34))) in
                {237}let kb_1: mac_key = (if v_35 then 2-proj-2-tuple(v_34) else caught-fail) in
                {238}let es: bitstring = (if v_35 then 1-proj-2-tuple(v_34) else caught-fail) in
                {239}let v_36: bool = (v_19 && not(v_21)) in
                {240}let psk_9: preSharedKey = (if v_36 then NoPSK else caught-fail) in
                {241}let s_2: bitstring = (if v_36 then zero else caught-fail) in
                {242}let k_2: bitstring = (if v_36 then catch-fail(psk2b(psk_9)) else caught-fail) in
                {243}let v_37: bool = not-caught-fail(k_2) in
                {244}let early_secret_3: bitstring = (if v_36 then catch-fail((if v_37 then hmac(h_alg_8,s_2,k_2) else fail-any)) else caught-fail) in
                {245}let v_38: bool = not-caught-fail(early_secret_3) in
                {246}let l_14: label = (if v_38 then tls13_resumption_psk_binder_key else caught-fail) in
                {247}let m_2: bitstring = (if v_38 then zero else caught-fail) in
                {248}let h_14: bitstring = (if v_38 then catch-fail(hash(h_alg_8,m_2)) else caught-fail) in
                {249}let v_39: bool = not-caught-fail(h_14) in
                {250}let x_14: bitstring = (if v_39 then (l_14,h_14) else caught-fail) in
                {251}let binder_key_2: bitstring = (if v_38 then catch-fail((if v_39 then hmac(h_alg_8,early_secret_3,x_14) else fail-any)) else caught-fail) in
                {252}let v_40: bool = not-caught-fail(binder_key_2) in
                {253}let v_41: bitstring = (if v_36 then catch-fail((if v_38 then (if v_40 then (early_secret_3,binder_key_2) else fail-any) else fail-any)) else caught-fail) in
                {254}let v_42: bool = (not-caught-fail(v_41) && success?(1-proj-2-tuple(v_41))) in
                {255}let kb_2: mac_key = (if v_42 then 2-proj-2-tuple(v_41) else caught-fail) in
                {256}let es_1: bitstring = (if v_42 then 1-proj-2-tuple(v_41) else caught-fail) in
                {257}let (early_secret_4: bitstring,s_psk_ext: preSharedKeyExt,psk_10: preSharedKey) = (if v_19 then (if v_21 then (if undo-catch-fail(v_22) then (if v_23 then (if v_29 then (if (binders = hmac(h_alg_8,kb,cur_log'_1)) then (early_secret_1,server_psk_ext(1),psk_7) else fail-any) else fail-any) else fail-any) else (if v_35 then (es,empty_psk_ext,NoPSK) else fail-any)) else (if v_42 then (es_1,empty_psk_ext,NoPSK) else fail-any)) else fail-any) in
                {258}let cur_log_CH: bitstring = (cur_log_7,client_hello) in
                {259}event SanityServerCH(id_server_3,is_backend,cr_7,s_dom_3,psk_10,cur_log_CH);
                {260}new s_3[]: seed;
                {261}let (gxy: element,gy: element) = (dh_xy(s_3,client_hello),dh_encap_fun(g,gx,dh_xy(s_3,client_hello))) in
                {262}let l_15: label = tls13_derived in
                {263}let m_3: bitstring = catch-fail(hash(h_alg_7,zero)) in
                {264}let v_43: bool = not-caught-fail(m_3) in
                {265}let h_15: bitstring = (if v_43 then catch-fail(hash(h_alg_7,m_3)) else caught-fail) in
                {266}let v_44: bool = not-caught-fail(h_15) in
                {267}let x_15: bitstring = (if v_44 then (l_15,h_15) else caught-fail) in
                {268}let extra: bitstring = catch-fail((if v_43 then (if v_44 then hmac(h_alg_7,early_secret_4,x_15) else fail-any) else fail-any)) in
                {269}let v_45: bool = not-caught-fail(extra) in
                {270}let handshake_secret: bitstring = (if v_45 then hmac(h_alg_7,extra,gxy) else fail-any) in
                {271}let s_offer: params = nego(TLS13,h_alg_7,a_alg_7,server_kex_ext(DHE_kex(g,gy)),empty_sni_ext,empty_ech_ext,s_psk_ext,s_extra) in
                {272}let v_46: bool = is_backend in
                {273}new sr24[]: bytes24;
                {274}let SH_ECHConf: msg = (if v_46 then SH(B32(sr24,zero8),s_offer) else caught-fail) in
                {275}let cur_log_SH_ech: bitstring = (if v_46 then (cur_log_CH,SH_ECHConf) else caught-fail) in
                {276}let l_16: label = (if v_46 then ech_accept_confirmation else caught-fail) in
                {277}let h_16: bitstring = (if v_46 then catch-fail(hash(h_alg_7,cur_log_SH_ech)) else caught-fail) in
                {278}let v_47: bool = not-caught-fail(h_16) in
                {279}let x_16: bitstring = (if v_47 then (l_16,h_16) else caught-fail) in
                {280}let accept_confirmation: bitstring = (if v_46 then catch-fail((if v_47 then hmac(h_alg_7,handshake_secret,x_16) else fail-any)) else caught-fail) in
                {281}let v_48: bool = not-caught-fail(accept_confirmation) in
                {282}let sr8: bytes8 = (if v_48 then crop_into_bytes8(accept_confirmation) else caught-fail) in
                {283}new rand24[]: bytes24;
                {284}new rand8[]: bytes8;
                {285}let sr_7: bytes32 = (if v_46 then (if v_48 then B32(sr24,sr8) else fail-any) else B32(rand24,rand8)) in
                {286}let server_hello: msg = SH(sr_7,s_offer) in
                {287}out(io, server_hello);
                {288}let cur_log_SH: bitstring = (cur_log_CH,server_hello) in
                {289}event SanityServerSH(id_server_3,cr_7,sr_7,s_dom_3,handshake_secret,psk_10,cur_log_SH);
                {290}let l_17: label = tls13_derived in
                {291}let m_4: bitstring = catch-fail(hash(h_alg_7,zero)) in
                {292}let v_49: bool = not-caught-fail(m_4) in
                {293}let h_17: bitstring = (if v_49 then catch-fail(hash(h_alg_7,m_4)) else caught-fail) in
                {294}let v_50: bool = not-caught-fail(h_17) in
                {295}let x_17: bitstring = (if v_50 then (l_17,h_17) else caught-fail) in
                {296}let extra_1: bitstring = catch-fail((if v_49 then (if v_50 then hmac(h_alg_7,handshake_secret,x_17) else fail-any) else fail-any)) in
                {297}let v_51: bool = not-caught-fail(extra_1) in
                {298}let k_3: bitstring = (if v_51 then zero else caught-fail) in
                {299}let master_secret_7: bitstring = (if v_51 then catch-fail(hmac(h_alg_7,handshake_secret,k_3)) else caught-fail) in
                {300}let v_52: bool = not-caught-fail(master_secret_7) in
                {301}let l_18: label = (if v_52 then tls13_client_handshake_traffic_secret else caught-fail) in
                {302}let h_18: bitstring = (if v_52 then catch-fail(hash(h_alg_7,cur_log_SH)) else caught-fail) in
                {303}let v_53: bool = not-caught-fail(h_18) in
                {304}let x_18: bitstring = (if v_53 then (l_18,h_18) else caught-fail) in
                {305}let client_hts: bitstring = (if v_52 then catch-fail((if v_53 then hmac(h_alg_7,handshake_secret,x_18) else fail-any)) else caught-fail) in
                {306}let v_54: bool = not-caught-fail(client_hts) in
                {307}let l_19: label = (if v_54 then tls13_server_handshake_traffic_secret else caught-fail) in
                {308}let h_19: bitstring = (if v_54 then catch-fail(hash(h_alg_7,cur_log_SH)) else caught-fail) in
                {309}let v_55: bool = not-caught-fail(h_19) in
                {310}let x_19: bitstring = (if v_55 then (l_19,h_19) else caught-fail) in
                {311}let server_hts: bitstring = (if v_54 then catch-fail((if v_55 then hmac(h_alg_7,handshake_secret,x_19) else fail-any)) else caught-fail) in
                {312}let v_56: bool = not-caught-fail(server_hts) in
                {313}let l_20: label = (if v_56 then tls13_key else caught-fail) in
                {314}let h_20: bitstring = (if v_56 then zero else caught-fail) in
                {315}let x_20: bitstring = (if v_56 then (l_20,h_20) else caught-fail) in
                {316}let client_wkh: bitstring = (if v_56 then catch-fail(hmac(h_alg_7,client_hts,x_20)) else caught-fail) in
                {317}let v_57: bool = not-caught-fail(client_wkh) in
                {318}let l_21: label = (if v_57 then tls13_key else caught-fail) in
                {319}let h_21: bitstring = (if v_57 then zero else caught-fail) in
                {320}let x_21: bitstring = (if v_57 then (l_21,h_21) else caught-fail) in
                {321}let server_wkh: bitstring = (if v_57 then catch-fail(hmac(h_alg_7,server_hts,x_21)) else caught-fail) in
                {322}let v_58: bool = not-caught-fail(server_wkh) in
                {323}let l_22: label = (if v_58 then tls13_finished else caught-fail) in
                {324}let h_22: bitstring = (if v_58 then zero else caught-fail) in
                {325}let x_22: bitstring = (if v_58 then (l_22,h_22) else caught-fail) in
                {326}let client_fk: bitstring = (if v_58 then catch-fail(hmac(h_alg_7,client_hts,x_22)) else caught-fail) in
                {327}let v_59: bool = not-caught-fail(client_fk) in
                {328}let l_23: label = (if v_59 then tls13_finished else caught-fail) in
                {329}let h_23: bitstring = (if v_59 then zero else caught-fail) in
                {330}let x_23: bitstring = (if v_59 then (l_23,h_23) else caught-fail) in
                {331}let server_fk: bitstring = (if v_59 then catch-fail(hmac(h_alg_7,server_hts,x_23)) else caught-fail) in
                {332}let v_60: bool = not-caught-fail(server_fk) in
                {333}let (master_secret_8: bitstring,chk_7: aead_key,shk_7: aead_key,cfin_7: mac_key,sfin_7: mac_key) = (if v_51 then (if v_52 then (if v_54 then (if v_56 then (if v_57 then (if v_58 then (if v_59 then (if v_60 then (master_secret_7,client_wkh,server_wkh,client_fk,server_fk) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                {334}let ee_msg: msg = EE(encrypted_ext) in
                {335}let enc_ee: bitstring = aead_enc(a_alg_7,shk_7,zero,zero,ee_msg) in
                {336}out(io, enc_ee);
                {337}let cur_log_EE: bitstring = (cur_log_SH,ee_msg) in
                {338}if (psk_10 = NoPSK) then
                (
                    {339}if cert_req_4 then
                    (
                        {340}let crtr_msg: msg = CRTR(zero) in
                        {341}let enc_crt: bitstring = aead_enc(a_alg_7,shk_7,zero,zero,crtr_msg) in
                        {342}out(io, enc_crt);
                        {343}let cur_log_CRTR: bitstring = (cur_log_EE,crtr_msg) in
                        {344}out(ch_server_CRT, (id_server_3,cr_7,sr_7,h_alg_7,a_alg_7,s_dom_3,psk_10,cert_req_4,master_secret_8,chk_7,shk_7,cfin_7,sfin_7,cur_log_CRTR))
                    )
                    else
                        {345}out(ch_server_CRT, (id_server_3,cr_7,sr_7,h_alg_7,a_alg_7,s_dom_3,psk_10,cert_req_4,master_secret_8,chk_7,shk_7,cfin_7,sfin_7,cur_log_EE))
                )
                else
                    {346}out(ch_server_FIN, (id_server_3,cr_7,sr_7,h_alg_7,a_alg_7,psk_10,false,NoPubKey,master_secret_8,chk_7,shk_7,cfin_7,sfin_7,cur_log_EE))
            )
            else
                {347}out(io, illegal_parameter)
        )
        else
            {348}out(io, illegal_parameter)
    )
    else
        {349}out(io, handshake_failure)
) | (
    {350}!
    {351}in(io, a: domain);
    {352}event Same(a);
    {353}new s_4: seed;
    {354}let sk_h: privkey = uc_privkey(s_4) in
    {355}event GenCert(a,pk(sk_h));
    {356}insert long_term_keys(a,sk_h,pk(sk_h),valid_cert(a,pk(sk_h)));
    {357}out(io, pk(sk_h))
) | (
    {358}!
    {359}in(io, (c_dom_3: domain,s_dom_4: domain));
    {360}event Same((c_dom_3,s_dom_4));
    {361}new s_5: seed;
    {362}let psk_11: internal_preSharedKey = uc_psk(s_5) in
    {363}let id_1: identityPsk = mk_idpsk(c_dom_3,s_dom_4,tls_h,psk_11) in
    {364}event GenPsk(c_dom_3,s_dom_4,PSK(psk_11));
    {365}insert pre_shared_keys(c_dom_3,s_dom_4,tls_h,id_1,psk_11)
) | (
    {366}!
    {367}in(io, o_dom: domain);
    {368}new id_2: configId;
    {369}new s_6[]: seed;
    {370}let gx_1: element = dh_pub(ech_g,dh_k(s_6)) in
    {371}let (skR: bitstring,pkR: element) = (dh_k(s_6),gx_1) in
    {372}let config: echConfig = ech_config(id_2,ech_g,pkR,o_dom,ech_h,ech_a) in
    {373}insert ech_configurations(config,skR);
    {374}let config_1: echConfig = config in
    {375}out(io, config_1)
) | (
    {376}!
    {380}get pre_shared_keys(c_dom1: domain,s_dom1: domain,h_alg1: hash_alg,id1: identityPsk,psk1: internal_preSharedKey) in
    {379}get pre_shared_keys(c_dom2: domain,s_dom2: domain,h_alg2: hash_alg,id2: identityPsk,psk2: internal_preSharedKey) in
    {377}insert pre_shared_keys(choice[c_dom1,c_dom2],choice[s_dom1,s_dom2],choice[h_alg1,h_alg2],choice[id1,id2],choice[psk1,psk2]);
    {378}insert pre_shared_keys(choice[c_dom2,c_dom1],choice[s_dom2,s_dom1],choice[h_alg1,h_alg2],choice[id2,id1],choice[psk2,psk1])
) | (
    {381}!
    {385}get long_term_keys(dom1: domain,sk1: privkey,pk1: pubkey,cert1: certificate) in
    {384}get long_term_keys(dom2: domain,sk2: privkey,pk2: pubkey,cert2: certificate) in
    {382}insert long_term_keys(choice[dom1,dom2],choice[sk1,sk2],choice[pk1,pk2],choice[cert1,cert2]);
    {383}insert long_term_keys(choice[dom2,dom1],choice[sk2,sk1],choice[pk2,pk1],choice[cert2,cert1])
) | (
    {386}!
    {387}in(io, a_1: domain);
    {388}event Same(a_1);
    {389}new sk_d: privkey;
    {390}out(io, (sk_d,valid_cert(a_1,pk(sk_d))))
) | (
    {391}!
    {392}in(io, (c_dom_4: domain,s_dom_5: domain));
    {393}event Same((c_dom_4,s_dom_5));
    {394}new psk_d: internal_preSharedKey;
    {395}let id_3: identityPsk = mk_idpsk(c_dom_4,s_dom_5,tls_h,psk_d) in
    {396}insert pre_shared_keys(c_dom_4,s_dom_5,tls_h,id_3,psk_d);
    {397}out(io, id_3)
) | (
    {398}!
    {399}in(io, use_psk_1: bool);
    {400}let send_kex: bool = true in
    {401}in(io, (c_dom_5: domain,s_dom_6: domain));
    {402}event Same((use_psk_1,send_kex,c_dom_5,s_dom_6));
    {403}let extra_2: extraExt = empty_extra_ext in
    {404}new id_client_4[]: idProc;
    {405}event SanityClient(id_client_4,false,false,use_psk_1,send_kex);
    {406}let cur_log_8: bitstring = zero in
    {407}new rand24_1[]: bytes24;
    {408}new rand8_1[]: bytes8;
    {409}let cr_9: bytes32 = B32(rand24_1,rand8_1) in
    {410}new s_7[]: seed;
    {411}let gx_2: element = dh_pub(tls_g,dh_k(s_7)) in
    {412}let v_61: bitstring = (dh_k(s_7),gx_2) in
    {413}let v_62: bool = success?(1-proj-2-tuple(v_61)) in
    {414}let gx_3: element = (if v_62 then 2-proj-2-tuple(v_61) else caught-fail) in
    {415}let x_24: bitstring = (if v_62 then 1-proj-2-tuple(v_61) else caught-fail) in
    {416}let kex: kex_alg = (if v_62 then (if send_kex then DHE_kex(tls_g,gx_3) else DHE_group(tls_g)) else caught-fail) in
    {417}let (kex_ext_1: keyShareExt,kex_data: bitstring) = (if v_62 then (client_kex_ext(kex),(x_24,tls_g,send_kex)) else fail-any) in
    {418}let ech_ext_2: echExt = empty_ech_ext in
    {738}get pre_shared_keys(c_dom'_1: domain,s_dom'_1: domain,=tls_h,id_4: identityPsk,internal_psk: internal_preSharedKey) in
    {419}event Selected_psk(c_dom_5,c_dom'_1,s_dom_6,s_dom'_1,id_4,internal_psk);
    {420}let v_63: bool = use_psk_1 in
    {421}let psk_12: preSharedKey = (if v_63 then PSK(internal_psk) else caught-fail) in
    {422}let offer_2: params = (if v_63 then nego(TLS13,tls_h,tls_a,kex_ext_1,SNI(s_dom_6),ech_ext_2,trunc_client_psk_ext(id_4),extra_2) else caught-fail) in
    {423}let cur_log'_2: bitstring = (if v_63 then (cur_log_8,CH(cr_9,offer_2)) else caught-fail) in
    {424}let s_8: bitstring = (if v_63 then zero else caught-fail) in
    {425}let k_4: bitstring = (if v_63 then catch-fail(psk2b(psk_12)) else caught-fail) in
    {426}let v_64: bool = not-caught-fail(k_4) in
    {427}let early_secret_5: bitstring = (if v_63 then catch-fail((if v_64 then hmac(tls_h,s_8,k_4) else fail-any)) else caught-fail) in
    {428}let v_65: bool = not-caught-fail(early_secret_5) in
    {429}let l_24: label = (if v_65 then tls13_resumption_psk_binder_key else caught-fail) in
    {430}let m_5: bitstring = (if v_65 then zero else caught-fail) in
    {431}let h_24: bitstring = (if v_65 then catch-fail(hash(tls_h,m_5)) else caught-fail) in
    {432}let v_66: bool = not-caught-fail(h_24) in
    {433}let x_25: bitstring = (if v_66 then (l_24,h_24) else caught-fail) in
    {434}let binder_key_3: bitstring = (if v_65 then catch-fail((if v_66 then hmac(tls_h,early_secret_5,x_25) else fail-any)) else caught-fail) in
    {435}let v_67: bool = not-caught-fail(binder_key_3) in
    {436}let v_68: bitstring = (if v_63 then catch-fail((if v_65 then (if v_67 then (early_secret_5,binder_key_3) else fail-any) else fail-any)) else caught-fail) in
    {437}let v_69: bool = (not-caught-fail(v_68) && success?(1-proj-2-tuple(v_68))) in
    {438}let kb_3: mac_key = (if v_69 then 2-proj-2-tuple(v_68) else caught-fail) in
    {439}let es_2: bitstring = (if v_69 then 1-proj-2-tuple(v_68) else caught-fail) in
    {440}let binders_1: bitstring = (if v_69 then catch-fail(hmac(tls_h,kb_3,cur_log'_2)) else caught-fail) in
    {441}let v_70: bool = not-caught-fail(binders_1) in
    {442}let psk_13: preSharedKey = (if not(v_63) then NoPSK else caught-fail) in
    {443}let s_9: bitstring = (if not(v_63) then zero else caught-fail) in
    {444}let k_5: bitstring = (if not(v_63) then catch-fail(psk2b(psk_13)) else caught-fail) in
    {445}let v_71: bool = not-caught-fail(k_5) in
    {446}let early_secret_6: bitstring = (if not(v_63) then catch-fail((if v_71 then hmac(tls_h,s_9,k_5) else fail-any)) else caught-fail) in
    {447}let v_72: bool = not-caught-fail(early_secret_6) in
    {448}let l_25: label = (if v_72 then tls13_resumption_psk_binder_key else caught-fail) in
    {449}let m_6: bitstring = (if v_72 then zero else caught-fail) in
    {450}let h_25: bitstring = (if v_72 then catch-fail(hash(tls_h,m_6)) else caught-fail) in
    {451}let v_73: bool = not-caught-fail(h_25) in
    {452}let x_26: bitstring = (if v_73 then (l_25,h_25) else caught-fail) in
    {453}let binder_key_4: bitstring = (if v_72 then catch-fail((if v_73 then hmac(tls_h,early_secret_6,x_26) else fail-any)) else caught-fail) in
    {454}let v_74: bool = not-caught-fail(binder_key_4) in
    {455}let v_75: bitstring = (if not(v_63) then catch-fail((if v_72 then (if v_74 then (early_secret_6,binder_key_4) else fail-any) else fail-any)) else caught-fail) in
    {456}let v_76: bool = (not-caught-fail(v_75) && success?(1-proj-2-tuple(v_75))) in
    {457}let kb_4: mac_key = (if v_76 then 2-proj-2-tuple(v_75) else caught-fail) in
    {458}let es_3: bitstring = (if v_76 then 1-proj-2-tuple(v_75) else caught-fail) in
    {459}let v_77: bitstring = catch-fail((if v_63 then (if v_69 then (if v_70 then (client_psk_ext(id_4,binders_1),(tls_h,psk_12,es_2)) else fail-any) else fail-any) else (if v_76 then (empty_psk_ext,(tls_h,NoPSK,es_3)) else fail-any))) in
    {460}let v_78: bool = (not-caught-fail(v_77) && success?(1-proj-2-tuple(v_77))) in
    {461}let psk_data: bitstring = (if v_78 then 2-proj-2-tuple(v_77) else caught-fail) in
    {462}let psk_ext_2: preSharedKeyExt = (if v_78 then 1-proj-2-tuple(v_77) else caught-fail) in
    {463}let offer_3: params = (if v_78 then nego(TLS13,tls_h,tls_a,kex_ext_1,SNI(s_dom_6),empty_ech_ext,psk_ext_2,extra_2) else caught-fail) in
    {464}let (client_hello_1: msg,cr_10: bytes32,kex_ext_2: keyShareExt,kex_data_1: bitstring,psk_data_1: bitstring) = (if v_78 then (CH(cr_9,offer_3),cr_9,kex_ext_1,kex_data,psk_data) else fail-any) in
    {465}out(io, client_hello_1);
    {466}let cur_log2_4: bitstring = (cur_log_8,client_hello_1) in
    {467}let (=tls_h,psk_14: preSharedKey,es_4: bitstring) = psk_data_1 in
    {468}event SanityClientCH(id_client_4,zero32,cr_10,c_dom_5,s_dom_6,psk_14,cur_log2_4);
    {469}in(io, server_hello_1: msg);
    {470}let SH(sr_8: bytes32,mode: params) = server_hello_1 in
    (
        {471}if (sr_8 = rand_HelloRetryRequest) then
        (
            {472}let (nego(=TLS13,=tls_h,=tls_a,hrr_kex_ext(=tls_g),=empty_sni_ext,=empty_ech_ext,=empty_psk_ext,srv_extra: extraExt),=false) = (mode,send_kex) in
            (
                {473}let cur_log3_2: bitstring = (cur_log2_4,server_hello_1) in
                {474}event SanityClientHRR(id_client_4,cr_10,c_dom_5,s_dom_6,cur_log3_2);
                {475}let send_kex_1: bool = true in
                {476}new rand24_2[]: bytes24;
                {477}new rand8_2[]: bytes8;
                {478}let cr_11: bytes32 = B32(rand24_2,rand8_2) in
                {479}new s_10[]: seed;
                {480}let gx_4: element = dh_pub(tls_g,dh_k(s_10)) in
                {481}let v_79: bitstring = (dh_k(s_10),gx_4) in
                {482}let v_80: bool = success?(1-proj-2-tuple(v_79)) in
                {483}let gx_5: element = (if v_80 then 2-proj-2-tuple(v_79) else caught-fail) in
                {484}let x_27: bitstring = (if v_80 then 1-proj-2-tuple(v_79) else caught-fail) in
                {485}let kex_1: kex_alg = (if v_80 then (if send_kex_1 then DHE_kex(tls_g,gx_5) else DHE_group(tls_g)) else caught-fail) in
                {486}let (kex_ext_3: keyShareExt,kex_data_2: bitstring) = (if v_80 then (client_kex_ext(kex_1),(x_27,tls_g,send_kex_1)) else fail-any) in
                {487}let ech_ext_3: echExt = empty_ech_ext in
                {638}get pre_shared_keys(c_dom'_2: domain,s_dom'_2: domain,=tls_h,id_5: identityPsk,internal_psk_1: internal_preSharedKey) in
                {488}event Selected_psk(c_dom_5,c_dom'_2,s_dom_6,s_dom'_2,id_5,internal_psk_1);
                {489}let v_81: bool = use_psk_1 in
                {490}let psk_15: preSharedKey = (if v_81 then PSK(internal_psk_1) else caught-fail) in
                {491}let offer_4: params = (if v_81 then nego(TLS13,tls_h,tls_a,kex_ext_3,SNI(s_dom_6),ech_ext_3,trunc_client_psk_ext(id_5),extra_2) else caught-fail) in
                {492}let cur_log'_3: bitstring = (if v_81 then (cur_log3_2,CH(cr_11,offer_4)) else caught-fail) in
                {493}let s_11: bitstring = (if v_81 then zero else caught-fail) in
                {494}let k_6: bitstring = (if v_81 then catch-fail(psk2b(psk_15)) else caught-fail) in
                {495}let v_82: bool = not-caught-fail(k_6) in
                {496}let early_secret_7: bitstring = (if v_81 then catch-fail((if v_82 then hmac(tls_h,s_11,k_6) else fail-any)) else caught-fail) in
                {497}let v_83: bool = not-caught-fail(early_secret_7) in
                {498}let l_26: label = (if v_83 then tls13_resumption_psk_binder_key else caught-fail) in
                {499}let m_7: bitstring = (if v_83 then zero else caught-fail) in
                {500}let h_26: bitstring = (if v_83 then catch-fail(hash(tls_h,m_7)) else caught-fail) in
                {501}let v_84: bool = not-caught-fail(h_26) in
                {502}let x_28: bitstring = (if v_84 then (l_26,h_26) else caught-fail) in
                {503}let binder_key_5: bitstring = (if v_83 then catch-fail((if v_84 then hmac(tls_h,early_secret_7,x_28) else fail-any)) else caught-fail) in
                {504}let v_85: bool = not-caught-fail(binder_key_5) in
                {505}let v_86: bitstring = (if v_81 then catch-fail((if v_83 then (if v_85 then (early_secret_7,binder_key_5) else fail-any) else fail-any)) else caught-fail) in
                {506}let v_87: bool = (not-caught-fail(v_86) && success?(1-proj-2-tuple(v_86))) in
                {507}let kb_5: mac_key = (if v_87 then 2-proj-2-tuple(v_86) else caught-fail) in
                {508}let es_5: bitstring = (if v_87 then 1-proj-2-tuple(v_86) else caught-fail) in
                {509}let binders_2: bitstring = (if v_87 then catch-fail(hmac(tls_h,kb_5,cur_log'_3)) else caught-fail) in
                {510}let v_88: bool = not-caught-fail(binders_2) in
                {511}let psk_16: preSharedKey = (if not(v_81) then NoPSK else caught-fail) in
                {512}let s_12: bitstring = (if not(v_81) then zero else caught-fail) in
                {513}let k_7: bitstring = (if not(v_81) then catch-fail(psk2b(psk_16)) else caught-fail) in
                {514}let v_89: bool = not-caught-fail(k_7) in
                {515}let early_secret_8: bitstring = (if not(v_81) then catch-fail((if v_89 then hmac(tls_h,s_12,k_7) else fail-any)) else caught-fail) in
                {516}let v_90: bool = not-caught-fail(early_secret_8) in
                {517}let l_27: label = (if v_90 then tls13_resumption_psk_binder_key else caught-fail) in
                {518}let m_8: bitstring = (if v_90 then zero else caught-fail) in
                {519}let h_27: bitstring = (if v_90 then catch-fail(hash(tls_h,m_8)) else caught-fail) in
                {520}let v_91: bool = not-caught-fail(h_27) in
                {521}let x_29: bitstring = (if v_91 then (l_27,h_27) else caught-fail) in
                {522}let binder_key_6: bitstring = (if v_90 then catch-fail((if v_91 then hmac(tls_h,early_secret_8,x_29) else fail-any)) else caught-fail) in
                {523}let v_92: bool = not-caught-fail(binder_key_6) in
                {524}let v_93: bitstring = (if not(v_81) then catch-fail((if v_90 then (if v_92 then (early_secret_8,binder_key_6) else fail-any) else fail-any)) else caught-fail) in
                {525}let v_94: bool = (not-caught-fail(v_93) && success?(1-proj-2-tuple(v_93))) in
                {526}let kb_6: mac_key = (if v_94 then 2-proj-2-tuple(v_93) else caught-fail) in
                {527}let es_6: bitstring = (if v_94 then 1-proj-2-tuple(v_93) else caught-fail) in
                {528}let v_95: bitstring = catch-fail((if v_81 then (if v_87 then (if v_88 then (client_psk_ext(id_5,binders_2),(tls_h,psk_15,es_5)) else fail-any) else fail-any) else (if v_94 then (empty_psk_ext,(tls_h,NoPSK,es_6)) else fail-any))) in
                {529}let v_96: bool = (not-caught-fail(v_95) && success?(1-proj-2-tuple(v_95))) in
                {530}let psk_data_2: bitstring = (if v_96 then 2-proj-2-tuple(v_95) else caught-fail) in
                {531}let psk_ext_3: preSharedKeyExt = (if v_96 then 1-proj-2-tuple(v_95) else caught-fail) in
                {532}let offer_5: params = (if v_96 then nego(TLS13,tls_h,tls_a,kex_ext_3,SNI(s_dom_6),empty_ech_ext,psk_ext_3,extra_2) else caught-fail) in
                {533}let (client_hello': msg,cr': bytes32,kex_ext': keyShareExt,kex_data': bitstring,psk_data': bitstring) = (if v_96 then (CH(cr_11,offer_5),cr_11,kex_ext_3,kex_data_2,psk_data_2) else fail-any) in
                {534}out(io, client_hello');
                {535}let cur_log4: bitstring = (cur_log3_2,client_hello') in
                {536}let (=tls_h,psk': preSharedKey,es': bitstring) = psk_data' in
                {537}event SanityClientCH(id_client_4,cr_10,cr',c_dom_5,s_dom_6,psk',cur_log4);
                {538}in(io, server_hello': msg);
                {539}let SH(sr': bytes32,mode': params) = server_hello' in
                (
                    {540}if (sr' = rand_HelloRetryRequest) then
                        {541}out(io, unexpected_message)
                    else
                        {542}let id_client_5: idProc = id_client_4 in
                        {543}let SH(sr_9: bytes32,mode_1: params) = server_hello' in
                        {544}let (x_30: bitstring,g_1: group,=true) = kex_data' in
                        {545}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_1,gy_1: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_4: preSharedKeyExt,extra_3: extraExt) = mode_1 in
                        (
                            {546}let cur_log2_5: bitstring = (cur_log4,server_hello') in
                            {547}let v_97: bool = (psk_ext_4 = empty_psk_ext) in
                            {548}let psk_17: preSharedKey = (if v_97 then NoPSK else caught-fail) in
                            {549}let s_13: bitstring = (if v_97 then zero else caught-fail) in
                            {550}let k_8: bitstring = (if v_97 then catch-fail(psk2b(psk_17)) else caught-fail) in
                            {551}let v_98: bool = not-caught-fail(k_8) in
                            {552}let early_secret_9: bitstring = (if v_97 then catch-fail((if v_98 then hmac(tls_h,s_13,k_8) else fail-any)) else caught-fail) in
                            {553}let v_99: bool = not-caught-fail(early_secret_9) in
                            {554}let l_28: label = (if v_99 then tls13_resumption_psk_binder_key else caught-fail) in
                            {555}let m_9: bitstring = (if v_99 then zero else caught-fail) in
                            {556}let h_28: bitstring = (if v_99 then catch-fail(hash(tls_h,m_9)) else caught-fail) in
                            {557}let v_100: bool = not-caught-fail(h_28) in
                            {558}let x_31: bitstring = (if v_100 then (l_28,h_28) else caught-fail) in
                            {559}let binder_key_7: bitstring = (if v_99 then catch-fail((if v_100 then hmac(tls_h,early_secret_9,x_31) else fail-any)) else caught-fail) in
                            {560}let v_101: bool = not-caught-fail(binder_key_7) in
                            {561}let v_102: bitstring = (if v_97 then catch-fail((if v_99 then (if v_101 then (early_secret_9,binder_key_7) else fail-any) else fail-any)) else caught-fail) in
                            {562}let v_103: bool = (not-caught-fail(v_102) && success?(1-proj-2-tuple(v_102))) in
                            {563}let kb_7: mac_key = (if v_103 then 2-proj-2-tuple(v_102) else caught-fail) in
                            {564}let es_7: bitstring = (if v_103 then 1-proj-2-tuple(v_102) else caught-fail) in
                            {565}let v_104: bitstring = (if not(v_97) then catch-fail(psk_data') else caught-fail) in
                            {566}let v_105: bool = (not-caught-fail(v_104) && success?(1-proj-3-tuple(v_104))) in
                            {567}let es_8: bitstring = (if v_105 then 3-proj-3-tuple(v_104) else caught-fail) in
                            {568}let psk_18: preSharedKey = (if v_105 then 2-proj-3-tuple(v_104) else caught-fail) in
                            {569}let h'_alg: hash_alg = (if v_105 then 1-proj-3-tuple(v_104) else caught-fail) in
                            {570}let (psk_19: preSharedKey,early_secret_10: bitstring,valid: bool) = (if v_97 then (if v_103 then (NoPSK,es_7,true) else fail-any) else (if v_105 then (psk_18,es_8,((h'_alg = tls_h) && ((server_psk_ext(1) = psk_ext_4) && use_psk_1))) else fail-any)) in
                            {571}if valid then
                            (
                                {572}let gxy_1: element = catch-fail(dh_decap_fun(g_1,gy_1,x_30)) in
                                {573}let v_106: bool = not-caught-fail(gxy_1) in
                                {574}new s_14[]: seed;
                                {575}let gxy_2: element = (if v_106 then gxy_1 else dh_f(s_14)) in
                                {576}let l_29: label = tls13_derived in
                                {577}let m_10: bitstring = catch-fail(hash(tls_h,zero)) in
                                {578}let v_107: bool = not-caught-fail(m_10) in
                                {579}let h_29: bitstring = (if v_107 then catch-fail(hash(tls_h,m_10)) else caught-fail) in
                                {580}let v_108: bool = not-caught-fail(h_29) in
                                {581}let x_32: bitstring = (if v_108 then (l_29,h_29) else caught-fail) in
                                {582}let extra_4: bitstring = catch-fail((if v_107 then (if v_108 then hmac(tls_h,early_secret_10,x_32) else fail-any) else fail-any)) in
                                {583}let v_109: bool = not-caught-fail(extra_4) in
                                {584}let handshake_secret_1: bitstring = (if v_109 then hmac(tls_h,extra_4,gxy_2) else fail-any) in
                                {585}event SanityClientSH(id_client_5,cr',sr_9,c_dom_5,s_dom_6,handshake_secret_1,psk_19,cur_log2_5);
                                {586}let l_30: label = tls13_derived in
                                {587}let m_11: bitstring = catch-fail(hash(tls_h,zero)) in
                                {588}let v_110: bool = not-caught-fail(m_11) in
                                {589}let h_30: bitstring = (if v_110 then catch-fail(hash(tls_h,m_11)) else caught-fail) in
                                {590}let v_111: bool = not-caught-fail(h_30) in
                                {591}let x_33: bitstring = (if v_111 then (l_30,h_30) else caught-fail) in
                                {592}let extra_5: bitstring = catch-fail((if v_110 then (if v_111 then hmac(tls_h,handshake_secret_1,x_33) else fail-any) else fail-any)) in
                                {593}let v_112: bool = not-caught-fail(extra_5) in
                                {594}let k_9: bitstring = (if v_112 then zero else caught-fail) in
                                {595}let master_secret_9: bitstring = (if v_112 then catch-fail(hmac(tls_h,handshake_secret_1,k_9)) else caught-fail) in
                                {596}let v_113: bool = not-caught-fail(master_secret_9) in
                                {597}let l_31: label = (if v_113 then tls13_client_handshake_traffic_secret else caught-fail) in
                                {598}let h_31: bitstring = (if v_113 then catch-fail(hash(tls_h,cur_log2_5)) else caught-fail) in
                                {599}let v_114: bool = not-caught-fail(h_31) in
                                {600}let x_34: bitstring = (if v_114 then (l_31,h_31) else caught-fail) in
                                {601}let client_hts_1: bitstring = (if v_113 then catch-fail((if v_114 then hmac(tls_h,handshake_secret_1,x_34) else fail-any)) else caught-fail) in
                                {602}let v_115: bool = not-caught-fail(client_hts_1) in
                                {603}let l_32: label = (if v_115 then tls13_server_handshake_traffic_secret else caught-fail) in
                                {604}let h_32: bitstring = (if v_115 then catch-fail(hash(tls_h,cur_log2_5)) else caught-fail) in
                                {605}let v_116: bool = not-caught-fail(h_32) in
                                {606}let x_35: bitstring = (if v_116 then (l_32,h_32) else caught-fail) in
                                {607}let server_hts_1: bitstring = (if v_115 then catch-fail((if v_116 then hmac(tls_h,handshake_secret_1,x_35) else fail-any)) else caught-fail) in
                                {608}let v_117: bool = not-caught-fail(server_hts_1) in
                                {609}let l_33: label = (if v_117 then tls13_key else caught-fail) in
                                {610}let h_33: bitstring = (if v_117 then zero else caught-fail) in
                                {611}let x_36: bitstring = (if v_117 then (l_33,h_33) else caught-fail) in
                                {612}let client_wkh_1: bitstring = (if v_117 then catch-fail(hmac(tls_h,client_hts_1,x_36)) else caught-fail) in
                                {613}let v_118: bool = not-caught-fail(client_wkh_1) in
                                {614}let l_34: label = (if v_118 then tls13_key else caught-fail) in
                                {615}let h_34: bitstring = (if v_118 then zero else caught-fail) in
                                {616}let x_37: bitstring = (if v_118 then (l_34,h_34) else caught-fail) in
                                {617}let server_wkh_1: bitstring = (if v_118 then catch-fail(hmac(tls_h,server_hts_1,x_37)) else caught-fail) in
                                {618}let v_119: bool = not-caught-fail(server_wkh_1) in
                                {619}let l_35: label = (if v_119 then tls13_finished else caught-fail) in
                                {620}let h_35: bitstring = (if v_119 then zero else caught-fail) in
                                {621}let x_38: bitstring = (if v_119 then (l_35,h_35) else caught-fail) in
                                {622}let client_fk_1: bitstring = (if v_119 then catch-fail(hmac(tls_h,client_hts_1,x_38)) else caught-fail) in
                                {623}let v_120: bool = not-caught-fail(client_fk_1) in
                                {624}let l_36: label = (if v_120 then tls13_finished else caught-fail) in
                                {625}let h_36: bitstring = (if v_120 then zero else caught-fail) in
                                {626}let x_39: bitstring = (if v_120 then (l_36,h_36) else caught-fail) in
                                {627}let server_fk_1: bitstring = (if v_120 then catch-fail(hmac(tls_h,server_hts_1,x_39)) else caught-fail) in
                                {628}let v_121: bool = not-caught-fail(server_fk_1) in
                                {629}let (master_secret_10: bitstring,chk_8: aead_key,shk_8: aead_key,cfin_8: mac_key,sfin_8: mac_key) = (if v_112 then (if v_113 then (if v_115 then (if v_117 then (if v_118 then (if v_119 then (if v_120 then (if v_121 then (master_secret_9,client_wkh_1,server_wkh_1,client_fk_1,server_fk_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                {630}in(io, enc_ee_msg: bitstring);
                                {631}let ee_msg_1: msg = aead_dec(tls_a,shk_8,zero,zero,enc_ee_msg) in
                                {632}let EE(x_40: bitstring) = ee_msg_1 in
                                {633}let cur_log2_6: bitstring = (cur_log2_5,ee_msg_1) in
                                {634}out(ch_client_after_EE, (id_client_5,cr',sr_9,tls_h,tls_a,c_dom_5,s_dom_6,psk_19,master_secret_10,chk_8,shk_8,cfin_8,sfin_8,cur_log2_6))
                            )
                            else
                                {635}out(io, illegal_parameter)
                        )
                        else
                            {636}out(io, illegal_parameter)
                )
                else
                    {637}out(io, unexpected_message)
            )
            else
                {639}out(io, illegal_parameter)
        )
        else
            {640}if send_kex then
            (
                {641}let id_client_6: idProc = id_client_4 in
                {642}let SH(sr_10: bytes32,mode_2: params) = server_hello_1 in
                {643}let (x_41: bitstring,g_2: group,=true) = kex_data_1 in
                {644}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_2,gy_2: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_5: preSharedKeyExt,extra_6: extraExt) = mode_2 in
                (
                    {645}let cur_log2_7: bitstring = (cur_log2_4,server_hello_1) in
                    {646}let v_122: bool = (psk_ext_5 = empty_psk_ext) in
                    {647}let psk_20: preSharedKey = (if v_122 then NoPSK else caught-fail) in
                    {648}let s_15: bitstring = (if v_122 then zero else caught-fail) in
                    {649}let k_10: bitstring = (if v_122 then catch-fail(psk2b(psk_20)) else caught-fail) in
                    {650}let v_123: bool = not-caught-fail(k_10) in
                    {651}let early_secret_11: bitstring = (if v_122 then catch-fail((if v_123 then hmac(tls_h,s_15,k_10) else fail-any)) else caught-fail) in
                    {652}let v_124: bool = not-caught-fail(early_secret_11) in
                    {653}let l_37: label = (if v_124 then tls13_resumption_psk_binder_key else caught-fail) in
                    {654}let m_12: bitstring = (if v_124 then zero else caught-fail) in
                    {655}let h_37: bitstring = (if v_124 then catch-fail(hash(tls_h,m_12)) else caught-fail) in
                    {656}let v_125: bool = not-caught-fail(h_37) in
                    {657}let x_42: bitstring = (if v_125 then (l_37,h_37) else caught-fail) in
                    {658}let binder_key_8: bitstring = (if v_124 then catch-fail((if v_125 then hmac(tls_h,early_secret_11,x_42) else fail-any)) else caught-fail) in
                    {659}let v_126: bool = not-caught-fail(binder_key_8) in
                    {660}let v_127: bitstring = (if v_122 then catch-fail((if v_124 then (if v_126 then (early_secret_11,binder_key_8) else fail-any) else fail-any)) else caught-fail) in
                    {661}let v_128: bool = (not-caught-fail(v_127) && success?(1-proj-2-tuple(v_127))) in
                    {662}let kb_8: mac_key = (if v_128 then 2-proj-2-tuple(v_127) else caught-fail) in
                    {663}let es_9: bitstring = (if v_128 then 1-proj-2-tuple(v_127) else caught-fail) in
                    {664}let v_129: bitstring = (if not(v_122) then catch-fail(psk_data_1) else caught-fail) in
                    {665}let v_130: bool = (not-caught-fail(v_129) && success?(1-proj-3-tuple(v_129))) in
                    {666}let es_10: bitstring = (if v_130 then 3-proj-3-tuple(v_129) else caught-fail) in
                    {667}let psk_21: preSharedKey = (if v_130 then 2-proj-3-tuple(v_129) else caught-fail) in
                    {668}let h'_alg_1: hash_alg = (if v_130 then 1-proj-3-tuple(v_129) else caught-fail) in
                    {669}let (psk_22: preSharedKey,early_secret_12: bitstring,valid_1: bool) = (if v_122 then (if v_128 then (NoPSK,es_9,true) else fail-any) else (if v_130 then (psk_21,es_10,((h'_alg_1 = tls_h) && ((server_psk_ext(1) = psk_ext_5) && use_psk_1))) else fail-any)) in
                    {670}if valid_1 then
                    (
                        {671}let gxy_3: element = catch-fail(dh_decap_fun(g_2,gy_2,x_41)) in
                        {672}let v_131: bool = not-caught-fail(gxy_3) in
                        {673}new s_16[]: seed;
                        {674}let gxy_4: element = (if v_131 then gxy_3 else dh_f(s_16)) in
                        {675}let l_38: label = tls13_derived in
                        {676}let m_13: bitstring = catch-fail(hash(tls_h,zero)) in
                        {677}let v_132: bool = not-caught-fail(m_13) in
                        {678}let h_38: bitstring = (if v_132 then catch-fail(hash(tls_h,m_13)) else caught-fail) in
                        {679}let v_133: bool = not-caught-fail(h_38) in
                        {680}let x_43: bitstring = (if v_133 then (l_38,h_38) else caught-fail) in
                        {681}let extra_7: bitstring = catch-fail((if v_132 then (if v_133 then hmac(tls_h,early_secret_12,x_43) else fail-any) else fail-any)) in
                        {682}let v_134: bool = not-caught-fail(extra_7) in
                        {683}let handshake_secret_2: bitstring = (if v_134 then hmac(tls_h,extra_7,gxy_4) else fail-any) in
                        {684}event SanityClientSH(id_client_6,cr_10,sr_10,c_dom_5,s_dom_6,handshake_secret_2,psk_22,cur_log2_7);
                        {685}let l_39: label = tls13_derived in
                        {686}let m_14: bitstring = catch-fail(hash(tls_h,zero)) in
                        {687}let v_135: bool = not-caught-fail(m_14) in
                        {688}let h_39: bitstring = (if v_135 then catch-fail(hash(tls_h,m_14)) else caught-fail) in
                        {689}let v_136: bool = not-caught-fail(h_39) in
                        {690}let x_44: bitstring = (if v_136 then (l_39,h_39) else caught-fail) in
                        {691}let extra_8: bitstring = catch-fail((if v_135 then (if v_136 then hmac(tls_h,handshake_secret_2,x_44) else fail-any) else fail-any)) in
                        {692}let v_137: bool = not-caught-fail(extra_8) in
                        {693}let k_11: bitstring = (if v_137 then zero else caught-fail) in
                        {694}let master_secret_11: bitstring = (if v_137 then catch-fail(hmac(tls_h,handshake_secret_2,k_11)) else caught-fail) in
                        {695}let v_138: bool = not-caught-fail(master_secret_11) in
                        {696}let l_40: label = (if v_138 then tls13_client_handshake_traffic_secret else caught-fail) in
                        {697}let h_40: bitstring = (if v_138 then catch-fail(hash(tls_h,cur_log2_7)) else caught-fail) in
                        {698}let v_139: bool = not-caught-fail(h_40) in
                        {699}let x_45: bitstring = (if v_139 then (l_40,h_40) else caught-fail) in
                        {700}let client_hts_2: bitstring = (if v_138 then catch-fail((if v_139 then hmac(tls_h,handshake_secret_2,x_45) else fail-any)) else caught-fail) in
                        {701}let v_140: bool = not-caught-fail(client_hts_2) in
                        {702}let l_41: label = (if v_140 then tls13_server_handshake_traffic_secret else caught-fail) in
                        {703}let h_41: bitstring = (if v_140 then catch-fail(hash(tls_h,cur_log2_7)) else caught-fail) in
                        {704}let v_141: bool = not-caught-fail(h_41) in
                        {705}let x_46: bitstring = (if v_141 then (l_41,h_41) else caught-fail) in
                        {706}let server_hts_2: bitstring = (if v_140 then catch-fail((if v_141 then hmac(tls_h,handshake_secret_2,x_46) else fail-any)) else caught-fail) in
                        {707}let v_142: bool = not-caught-fail(server_hts_2) in
                        {708}let l_42: label = (if v_142 then tls13_key else caught-fail) in
                        {709}let h_42: bitstring = (if v_142 then zero else caught-fail) in
                        {710}let x_47: bitstring = (if v_142 then (l_42,h_42) else caught-fail) in
                        {711}let client_wkh_2: bitstring = (if v_142 then catch-fail(hmac(tls_h,client_hts_2,x_47)) else caught-fail) in
                        {712}let v_143: bool = not-caught-fail(client_wkh_2) in
                        {713}let l_43: label = (if v_143 then tls13_key else caught-fail) in
                        {714}let h_43: bitstring = (if v_143 then zero else caught-fail) in
                        {715}let x_48: bitstring = (if v_143 then (l_43,h_43) else caught-fail) in
                        {716}let server_wkh_2: bitstring = (if v_143 then catch-fail(hmac(tls_h,server_hts_2,x_48)) else caught-fail) in
                        {717}let v_144: bool = not-caught-fail(server_wkh_2) in
                        {718}let l_44: label = (if v_144 then tls13_finished else caught-fail) in
                        {719}let h_44: bitstring = (if v_144 then zero else caught-fail) in
                        {720}let x_49: bitstring = (if v_144 then (l_44,h_44) else caught-fail) in
                        {721}let client_fk_2: bitstring = (if v_144 then catch-fail(hmac(tls_h,client_hts_2,x_49)) else caught-fail) in
                        {722}let v_145: bool = not-caught-fail(client_fk_2) in
                        {723}let l_45: label = (if v_145 then tls13_finished else caught-fail) in
                        {724}let h_45: bitstring = (if v_145 then zero else caught-fail) in
                        {725}let x_50: bitstring = (if v_145 then (l_45,h_45) else caught-fail) in
                        {726}let server_fk_2: bitstring = (if v_145 then catch-fail(hmac(tls_h,server_hts_2,x_50)) else caught-fail) in
                        {727}let v_146: bool = not-caught-fail(server_fk_2) in
                        {728}let (master_secret_12: bitstring,chk_9: aead_key,shk_9: aead_key,cfin_9: mac_key,sfin_9: mac_key) = (if v_137 then (if v_138 then (if v_140 then (if v_142 then (if v_143 then (if v_144 then (if v_145 then (if v_146 then (master_secret_11,client_wkh_2,server_wkh_2,client_fk_2,server_fk_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                        {729}in(io, enc_ee_msg_1: bitstring);
                        {730}let ee_msg_2: msg = aead_dec(tls_a,shk_9,zero,zero,enc_ee_msg_1) in
                        {731}let EE(x_51: bitstring) = ee_msg_2 in
                        {732}let cur_log2_8: bitstring = (cur_log2_7,ee_msg_2) in
                        {733}out(ch_client_after_EE, (id_client_6,cr_10,sr_10,tls_h,tls_a,c_dom_5,s_dom_6,psk_22,master_secret_12,chk_9,shk_9,cfin_9,sfin_9,cur_log2_8))
                    )
                    else
                        {734}out(io, illegal_parameter)
                )
                else
                    {735}out(io, illegal_parameter)
            )
            else
                {736}out(io, illegal_parameter)
    )
    else
        {737}out(io, unexpected_message)
) | (
    {739}!
    {740}let use_grease: bool = false in
    {741}in(io, use_psk_2: bool);
    {742}let send_kex_2: bool = true in
    {743}in(io, (c_dom_6: domain,cfs_dom: domain,backend_dom: domain));
    {744}event Same((use_grease,use_psk_2,send_kex_2,c_dom_6,cfs_dom,backend_dom));
    {1092}get ech_configurations(ech_config(id_6: configId,g_3: group,pkR_1: element,=cfs_dom,h_alg_9: hash_alg,a_alg_9: aead_alg),skR_1: bitstring) in
    {745}let ech_conf: echConfig = ech_config(id_6,g_3,pkR_1,cfs_dom,h_alg_9,a_alg_9) in
    {746}let i_extra: extraExt = empty_extra_ext in
    {747}let o_extra: extraExt = empty_extra_ext in
    {748}new id_client_7[]: idProc;
    {749}event SanityClient(id_client_7,true,use_grease,use_psk_2,send_kex_2);
    {750}if not((use_grease && use_psk_2)) then
    {751}let i_cur_log: bitstring = zero in
    {752}new s_17[]: seed;
    {753}let gx_6: element = dh_pub(tls_g,dh_k(s_17)) in
    {754}let v_147: bitstring = (dh_k(s_17),gx_6) in
    {755}let v_148: bool = success?(1-proj-2-tuple(v_147)) in
    {756}let i_gx: element = (if v_148 then 2-proj-2-tuple(v_147) else caught-fail) in
    {757}let i_x: bitstring = (if v_148 then 1-proj-2-tuple(v_147) else caught-fail) in
    {758}new s_18[]: seed;
    {759}let gx_7: element = (if v_148 then dh_pub(tls_g,dh_k(s_18)) else caught-fail) in
    {760}let v_149: bitstring = (if v_148 then catch-fail((dh_k(s_18),gx_7)) else caught-fail) in
    {761}let v_150: bool = (not-caught-fail(v_149) && success?(1-proj-2-tuple(v_149))) in
    {762}let o_gx: element = (if v_150 then 2-proj-2-tuple(v_149) else caught-fail) in
    {763}let o_x: bitstring = (if v_150 then 1-proj-2-tuple(v_149) else caught-fail) in
    {764}let v_151: bitstring = (if v_150 then catch-fail((if send_kex_2 then (DHE_kex(tls_g,i_gx),DHE_kex(tls_g,o_gx)) else (DHE_group(tls_g),DHE_group(tls_g)))) else caught-fail) in
    {765}let v_152: bool = (not-caught-fail(v_151) && success?(1-proj-2-tuple(v_151))) in
    {766}let o_kex: kex_alg = (if v_152 then 2-proj-2-tuple(v_151) else caught-fail) in
    {767}let i_kex: kex_alg = (if v_152 then 1-proj-2-tuple(v_151) else caught-fail) in
    {768}let (i_kex_ext: keyShareExt,o_kex_ext: keyShareExt,kex_data_3: bitstring) = (if v_148 then (if v_150 then (if v_152 then (client_kex_ext(i_kex),client_kex_ext(o_kex),(i_x,o_x,tls_g,send_kex_2)) else fail-any) else fail-any) else fail-any) in
    {769}new rand24_3[]: bytes24;
    {770}new rand8_3[]: bytes8;
    {771}let i_cr: bytes32 = B32(rand24_3,rand8_3) in
    {772}let ech_ext_4: echExt = ech_is_inner in
    {1091}get pre_shared_keys(c_dom'_3: domain,s_dom'_3: domain,=tls_h,id_7: identityPsk,internal_psk_2: internal_preSharedKey) in
    {773}event Selected_psk(c_dom_6,c_dom'_3,backend_dom,s_dom'_3,id_7,internal_psk_2);
    {774}let v_153: bool = use_psk_2 in
    {775}let psk_23: preSharedKey = (if v_153 then PSK(internal_psk_2) else caught-fail) in
    {776}let offer_6: params = (if v_153 then nego(TLS13,tls_h,tls_a,i_kex_ext,SNI(backend_dom),ech_ext_4,trunc_client_psk_ext(id_7),i_extra) else caught-fail) in
    {777}let cur_log'_4: bitstring = (if v_153 then (i_cur_log,CH(i_cr,offer_6)) else caught-fail) in
    {778}let s_19: bitstring = (if v_153 then zero else caught-fail) in
    {779}let k_12: bitstring = (if v_153 then catch-fail(psk2b(psk_23)) else caught-fail) in
    {780}let v_154: bool = not-caught-fail(k_12) in
    {781}let early_secret_13: bitstring = (if v_153 then catch-fail((if v_154 then hmac(tls_h,s_19,k_12) else fail-any)) else caught-fail) in
    {782}let v_155: bool = not-caught-fail(early_secret_13) in
    {783}let l_46: label = (if v_155 then tls13_resumption_psk_binder_key else caught-fail) in
    {784}let m_15: bitstring = (if v_155 then zero else caught-fail) in
    {785}let h_46: bitstring = (if v_155 then catch-fail(hash(tls_h,m_15)) else caught-fail) in
    {786}let v_156: bool = not-caught-fail(h_46) in
    {787}let x_52: bitstring = (if v_156 then (l_46,h_46) else caught-fail) in
    {788}let binder_key_9: bitstring = (if v_155 then catch-fail((if v_156 then hmac(tls_h,early_secret_13,x_52) else fail-any)) else caught-fail) in
    {789}let v_157: bool = not-caught-fail(binder_key_9) in
    {790}let v_158: bitstring = (if v_153 then catch-fail((if v_155 then (if v_157 then (early_secret_13,binder_key_9) else fail-any) else fail-any)) else caught-fail) in
    {791}let v_159: bool = (not-caught-fail(v_158) && success?(1-proj-2-tuple(v_158))) in
    {792}let kb_9: mac_key = (if v_159 then 2-proj-2-tuple(v_158) else caught-fail) in
    {793}let es_11: bitstring = (if v_159 then 1-proj-2-tuple(v_158) else caught-fail) in
    {794}let binders_3: bitstring = (if v_159 then catch-fail(hmac(tls_h,kb_9,cur_log'_4)) else caught-fail) in
    {795}let v_160: bool = not-caught-fail(binders_3) in
    {796}let psk_24: preSharedKey = (if not(v_153) then NoPSK else caught-fail) in
    {797}let s_20: bitstring = (if not(v_153) then zero else caught-fail) in
    {798}let k_13: bitstring = (if not(v_153) then catch-fail(psk2b(psk_24)) else caught-fail) in
    {799}let v_161: bool = not-caught-fail(k_13) in
    {800}let early_secret_14: bitstring = (if not(v_153) then catch-fail((if v_161 then hmac(tls_h,s_20,k_13) else fail-any)) else caught-fail) in
    {801}let v_162: bool = not-caught-fail(early_secret_14) in
    {802}let l_47: label = (if v_162 then tls13_resumption_psk_binder_key else caught-fail) in
    {803}let m_16: bitstring = (if v_162 then zero else caught-fail) in
    {804}let h_47: bitstring = (if v_162 then catch-fail(hash(tls_h,m_16)) else caught-fail) in
    {805}let v_163: bool = not-caught-fail(h_47) in
    {806}let x_53: bitstring = (if v_163 then (l_47,h_47) else caught-fail) in
    {807}let binder_key_10: bitstring = (if v_162 then catch-fail((if v_163 then hmac(tls_h,early_secret_14,x_53) else fail-any)) else caught-fail) in
    {808}let v_164: bool = not-caught-fail(binder_key_10) in
    {809}let v_165: bitstring = (if not(v_153) then catch-fail((if v_162 then (if v_164 then (early_secret_14,binder_key_10) else fail-any) else fail-any)) else caught-fail) in
    {810}let v_166: bool = (not-caught-fail(v_165) && success?(1-proj-2-tuple(v_165))) in
    {811}let kb_10: mac_key = (if v_166 then 2-proj-2-tuple(v_165) else caught-fail) in
    {812}let es_12: bitstring = (if v_166 then 1-proj-2-tuple(v_165) else caught-fail) in
    {813}let v_167: bitstring = catch-fail((if v_153 then (if v_159 then (if v_160 then (client_psk_ext(id_7,binders_3),(tls_h,psk_23,es_11)) else fail-any) else fail-any) else (if v_166 then (empty_psk_ext,(tls_h,NoPSK,es_12)) else fail-any))) in
    {814}let v_168: bool = (not-caught-fail(v_167) && success?(1-proj-2-tuple(v_167))) in
    {815}let psk_data_3: bitstring = (if v_168 then 2-proj-2-tuple(v_167) else caught-fail) in
    {816}let psk_ext_6: preSharedKeyExt = (if v_168 then 1-proj-2-tuple(v_167) else caught-fail) in
    {817}let i_offer: params = (if v_168 then nego(TLS13,tls_h,tls_a,i_kex_ext,SNI(backend_dom),ech_is_inner,psk_ext_6,i_extra) else caught-fail) in
    {818}let i_client_hello: msg = (if v_168 then CH(i_cr,i_offer) else caught-fail) in
    {819}let v_169: echConfig = (if v_168 then catch-fail(ech_conf) else caught-fail) in
    {820}let v_170: bool = (not-caught-fail(v_169) && success?(1-proj-ech_config(v_169))) in
    {821}let a_alg_ech: aead_alg = (if v_170 then 6-proj-ech_config(v_169) else caught-fail) in
    {822}let h_alg_ech: hash_alg = (if v_170 then 5-proj-ech_config(v_169) else caught-fail) in
    {823}let o_dom_1: domain = (if v_170 then 4-proj-ech_config(v_169) else caught-fail) in
    {824}let pkR_2: element = (if v_170 then 3-proj-ech_config(v_169) else caught-fail) in
    {825}let g_ech: group = (if v_170 then 2-proj-ech_config(v_169) else caught-fail) in
    {826}let config_id: configId = (if v_170 then 1-proj-ech_config(v_169) else caught-fail) in
    {827}let info: bitstring = (if v_170 then (tls_ech_str,ech_conf) else caught-fail) in
    {828}new s_21[]: seed;
    {829}let v_171: bitstring = (if v_170 then catch-fail((dh_xy(s_21,pkR_2),dh_encap_fun(g_ech,pkR_2,dh_xy(s_21,pkR_2)))) else caught-fail) in
    {830}let v_172: bool = (not-caught-fail(v_171) && success?(1-proj-2-tuple(v_171))) in
    {831}let enc: element = (if v_172 then 2-proj-2-tuple(v_171) else caught-fail) in
    {832}let shared_secret: element = (if v_172 then 1-proj-2-tuple(v_171) else caught-fail) in
    {833}let m_17: hpkeMode = (if v_172 then S else caught-fail) in
    {834}let s_22: bitstring = (if v_172 then zero else caught-fail) in
    {835}let k_14: bitstring = (if v_172 then (hpke_info_hash,info) else caught-fail) in
    {836}let info_hash: bitstring = (if v_172 then catch-fail(hmac(h_alg_ech,s_22,k_14)) else caught-fail) in
    {837}let v_173: bool = not-caught-fail(info_hash) in
    {838}let k_15: bitstring = (if v_173 then (hpke_secret,zero) else caught-fail) in
    {839}let xsecret: bitstring = (if v_173 then catch-fail(hmac(h_alg_ech,shared_secret,k_15)) else caught-fail) in
    {840}let v_174: bool = not-caught-fail(xsecret) in
    {841}let l_48: label = (if v_174 then hpke_key else caught-fail) in
    {842}let x_54: bitstring = (if v_174 then (l_48,info_hash) else caught-fail) in
    {843}let key: aead_key = (if v_174 then catch-fail(hmac(h_alg_ech,xsecret,x_54)) else caught-fail) in
    {844}let v_175: bool = not-caught-fail(key) in
    {845}let l_49: label = (if v_175 then hpke_base_nonce else caught-fail) in
    {846}let x_55: bitstring = (if v_175 then (l_49,info_hash) else caught-fail) in
    {847}let base_nonce: bitstring = (if v_175 then catch-fail(hmac(h_alg_ech,xsecret,x_55)) else caught-fail) in
    {848}let v_176: bool = not-caught-fail(base_nonce) in
    {849}let l_50: label = (if v_176 then hpke_exp else caught-fail) in
    {850}let x_56: bitstring = (if v_176 then (l_50,info_hash) else caught-fail) in
    {851}let exporter_secret: bitstring = (if v_176 then catch-fail(hmac(h_alg_ech,xsecret,x_56)) else caught-fail) in
    {852}let v_177: bool = not-caught-fail(exporter_secret) in
    {853}let v_178: bitstring = (if v_170 then catch-fail((if v_172 then (enc,(if v_173 then (if v_174 then (if v_175 then (if v_176 then (if v_177 then hpke_context(m_17,key) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) else fail-any)) else caught-fail) in
    {854}let v_179: bool = (not-caught-fail(v_178) && success?(1-proj-2-tuple(v_178))) in
    {855}let context: hpkeContext = (if v_179 then 2-proj-2-tuple(v_178) else caught-fail) in
    {856}let enc_1: element = (if v_179 then 1-proj-2-tuple(v_178) else caught-fail) in
    {857}new rand24_4[]: bytes24;
    {858}new rand8_4[]: bytes8;
    {859}let o_cr: bytes32 = (if v_179 then B32(rand24_4,rand8_4) else caught-fail) in
    {860}let v_180: bool = (if v_179 then catch-fail(use_grease) else caught-fail) in
    {861}new payload[]: bitstring;
    {862}let ech_ext_5: echExt = (if v_180 then client_ECH(h_alg_ech,a_alg_ech,config_id,enc_1,payload) else caught-fail) in
    {863}let o_offer: params = (if v_180 then nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom_1),ech_ext_5,empty_psk_ext,o_extra) else caught-fail) in
    {864}let dummy_ech_ext: echExt = (if is-false(v_180) then client_ECH(h_alg_ech,a_alg_ech,config_id,enc_1,zero) else caught-fail) in
    {865}let o_offer1: params = (if is-false(v_180) then nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom_1),dummy_ech_ext,empty_psk_ext,o_extra) else caught-fail) in
    {866}let o_client_hello1: msg = (if is-false(v_180) then CH(o_cr,o_offer1) else caught-fail) in
    {867}let v_181: msg = (if is-false(v_180) then catch-fail(o_client_hello1) else caught-fail) in
    {868}let v_182: bool = (not-caught-fail(v_181) && (success?(1-proj-nego(2-proj-CH(v_181))) && success?(1-proj-CH(v_181)))) in
    {869}let extra_9: extraExt = (if v_182 then 8-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {870}let psk_ext_7: preSharedKeyExt = (if v_182 then 7-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {871}let ech_ext_6: echExt = (if v_182 then 6-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {872}let sni_ext_2: sniExt = (if v_182 then 5-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {873}let kex_ext_4: keyShareExt = (if v_182 then 4-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {874}let a_alg_10: aead_alg = (if v_182 then 3-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {875}let h_alg_10: hash_alg = (if v_182 then 2-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {876}let version: TLS_version = (if v_182 then 1-proj-nego(2-proj-CH(v_181)) else caught-fail) in
    {877}let r: bytes32 = (if v_182 then 1-proj-CH(v_181) else caught-fail) in
    {878}let v_183: echExt = (if v_182 then catch-fail(ech_ext_6) else caught-fail) in
    {879}let v_184: bool = (not-caught-fail(v_183) && success?(1-proj-client_ECH(v_183))) in
    {880}let payload_1: bitstring = (if v_184 then 5-proj-client_ECH(v_183) else caught-fail) in
    {881}let enc_2: element = (if v_184 then 4-proj-client_ECH(v_183) else caught-fail) in
    {882}let config_id_1: configId = (if v_184 then 3-proj-client_ECH(v_183) else caught-fail) in
    {883}let a_alg_ech_1: aead_alg = (if v_184 then 2-proj-client_ECH(v_183) else caught-fail) in
    {884}let h_alg_ech_1: hash_alg = (if v_184 then 1-proj-client_ECH(v_183) else caught-fail) in
    {885}let client_hello_outer': msg = (if v_184 then CH(r,nego(version,h_alg_10,a_alg_10,kex_ext_4,sni_ext_2,empty_ech_ext,psk_ext_7,extra_9)) else caught-fail) in
    {886}let client_hello_AAD: ClientHelloOuterAAD = (if is-false(v_180) then catch-fail((if v_182 then (if v_184 then client_hello_outer_AAD(h_alg_ech_1,a_alg_ech_1,config_id_1,enc_2,client_hello_outer') else fail-any) else fail-any)) else caught-fail) in
    {887}let v_185: bool = not-caught-fail(client_hello_AAD) in
    {888}let v_186: hpkeContext = (if v_185 then catch-fail(context) else caught-fail) in
    {889}let v_187: bool = (not-caught-fail(v_186) && ((S =nf 1-proj-hpke_context(v_186)) && success?(1-proj-hpke_context(v_186)))) in
    {890}let key_1: aead_key = (if v_187 then 2-proj-hpke_context(v_186) else caught-fail) in
    {891}let payload_2: bitstring = (if v_185 then catch-fail((if v_187 then aead_enc(a_alg_ech,key_1,nonce_for_seal_open,client_hello_AAD,i_client_hello) else fail-any)) else caught-fail) in
    {892}let v_188: bool = not-caught-fail(payload_2) in
    {893}let ech_ext_7: echExt = (if v_188 then client_ECH(h_alg_ech,a_alg_ech,config_id,enc_1,payload_2) else caught-fail) in
    {894}let o_offer_1: params = (if v_188 then nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom_1),ech_ext_7,empty_psk_ext,o_extra) else caught-fail) in
    {895}let (o_client_hello: msg,i_client_hello_1: msg,i_cr_1: bytes32,o_cr_1: bytes32,i_kex_ext_1: keyShareExt,o_kex_ext_1: keyShareExt,kex_data_4: bitstring,psk_data_4: bitstring) = (if v_168 then (if v_170 then (if v_179 then (if undo-catch-fail(v_180) then (CH(o_cr,o_offer),CH(o_cr,o_offer),o_cr,o_cr,o_kex_ext,o_kex_ext,kex_data_3,psk_data_3) else (if v_185 then (if v_188 then (CH(o_cr,o_offer_1),i_client_hello,i_cr,o_cr,i_kex_ext,o_kex_ext,kex_data_3,psk_data_3) else fail-any) else fail-any)) else fail-any) else fail-any) else fail-any) in
    {896}out(io, o_client_hello);
    {897}let (=tls_h,psk_25: preSharedKey,es_13: bitstring) = psk_data_4 in
    {898}let v_189: echConfig = ech_conf in
    {899}let v_190: bool = success?(1-proj-ech_config(v_189)) in
    {900}let al: aead_alg = (if v_190 then 6-proj-ech_config(v_189) else caught-fail) in
    {901}let hl: hash_alg = (if v_190 then 5-proj-ech_config(v_189) else caught-fail) in
    {902}let dom: domain = (if v_190 then 4-proj-ech_config(v_189) else caught-fail) in
    {903}let public_key: element = (if v_190 then 3-proj-ech_config(v_189) else caught-fail) in
    {904}let g_4: group = (if v_190 then 2-proj-ech_config(v_189) else caught-fail) in
    {905}let id_8: configId = (if v_190 then 1-proj-ech_config(v_189) else caught-fail) in
    {906}let o_dom_2: domain = (if v_190 then dom else fail-any) in
    {907}let v_191: echConfig = ech_conf in
    {908}let v_192: bool = success?(1-proj-ech_config(v_191)) in
    {909}let al_1: aead_alg = (if v_192 then 6-proj-ech_config(v_191) else caught-fail) in
    {910}let hl_1: hash_alg = (if v_192 then 5-proj-ech_config(v_191) else caught-fail) in
    {911}let dom_1: domain = (if v_192 then 4-proj-ech_config(v_191) else caught-fail) in
    {912}let public_key_1: element = (if v_192 then 3-proj-ech_config(v_191) else caught-fail) in
    {913}let g_5: group = (if v_192 then 2-proj-ech_config(v_191) else caught-fail) in
    {914}let id_9: configId = (if v_192 then 1-proj-ech_config(v_191) else caught-fail) in
    {915}let ech_pk: element = (if v_192 then public_key_1 else fail-any) in
    {916}event SanityClientCH_ECH(id_client_7,zero32,i_cr_1,o_cr_1,c_dom_6,o_dom_2,backend_dom,ech_pk,psk_25,(zero,o_client_hello),(zero,i_client_hello_1));
    {917}in(io, server_hello_2: msg);
    {918}let SH(sr_11: bytes32,mode_3: params) = server_hello_2 in
    (
        {919}if (sr_11 = rand_HelloRetryRequest) then
            {920}out(io, illegal_parameter)
        else
            {921}let v_193: echConfig = ech_conf in
            {922}let v_194: bool = success?(1-proj-ech_config(v_193)) in
            {923}let al_2: aead_alg = (if v_194 then 6-proj-ech_config(v_193) else caught-fail) in
            {924}let hl_2: hash_alg = (if v_194 then 5-proj-ech_config(v_193) else caught-fail) in
            {925}let dom_2: domain = (if v_194 then 4-proj-ech_config(v_193) else caught-fail) in
            {926}let public_key_2: element = (if v_194 then 3-proj-ech_config(v_193) else caught-fail) in
            {927}let g_6: group = (if v_194 then 2-proj-ech_config(v_193) else caught-fail) in
            {928}let id_10: configId = (if v_194 then 1-proj-ech_config(v_193) else caught-fail) in
            {929}let id_client_8: idProc = id_client_7 in
            {930}let o_dom_3: domain = (if v_194 then dom_2 else fail-any) in
            {931}let i_cur_log_1: bitstring = (zero,i_client_hello_1) in
            {932}let o_cur_log: bitstring = (zero,o_client_hello) in
            {933}let SH(B32(sr24_1: bytes24,sr8_1: bytes8),mode_4: params) = server_hello_2 in
            {934}let (i_x_1: bitstring,o_x_1: bitstring,g_7: group,=true) = kex_data_4 in
            {935}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_7,gy_srv: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_8: preSharedKeyExt,extra_10: extraExt) = mode_4 in
            (
                {936}let v_195: bool = (psk_ext_8 = empty_psk_ext) in
                {937}let psk_26: preSharedKey = (if v_195 then NoPSK else caught-fail) in
                {938}let s_23: bitstring = (if v_195 then zero else caught-fail) in
                {939}let k_16: bitstring = (if v_195 then catch-fail(psk2b(psk_26)) else caught-fail) in
                {940}let v_196: bool = not-caught-fail(k_16) in
                {941}let early_secret_15: bitstring = (if v_195 then catch-fail((if v_196 then hmac(tls_h,s_23,k_16) else fail-any)) else caught-fail) in
                {942}let v_197: bool = not-caught-fail(early_secret_15) in
                {943}let l_51: label = (if v_197 then tls13_resumption_psk_binder_key else caught-fail) in
                {944}let m_18: bitstring = (if v_197 then zero else caught-fail) in
                {945}let h_48: bitstring = (if v_197 then catch-fail(hash(tls_h,m_18)) else caught-fail) in
                {946}let v_198: bool = not-caught-fail(h_48) in
                {947}let x_57: bitstring = (if v_198 then (l_51,h_48) else caught-fail) in
                {948}let binder_key_11: bitstring = (if v_197 then catch-fail((if v_198 then hmac(tls_h,early_secret_15,x_57) else fail-any)) else caught-fail) in
                {949}let v_199: bool = not-caught-fail(binder_key_11) in
                {950}let v_200: bitstring = (if v_195 then catch-fail((if v_197 then (if v_199 then (early_secret_15,binder_key_11) else fail-any) else fail-any)) else caught-fail) in
                {951}let v_201: bool = (not-caught-fail(v_200) && success?(1-proj-2-tuple(v_200))) in
                {952}let kb_11: mac_key = (if v_201 then 2-proj-2-tuple(v_200) else caught-fail) in
                {953}let es_14: bitstring = (if v_201 then 1-proj-2-tuple(v_200) else caught-fail) in
                {954}let v_202: bitstring = (if not(v_195) then catch-fail(psk_data_4) else caught-fail) in
                {955}let v_203: bool = (not-caught-fail(v_202) && success?(1-proj-3-tuple(v_202))) in
                {956}let es_15: bitstring = (if v_203 then 3-proj-3-tuple(v_202) else caught-fail) in
                {957}let psk_27: preSharedKey = (if v_203 then 2-proj-3-tuple(v_202) else caught-fail) in
                {958}let h'_alg_2: hash_alg = (if v_203 then 1-proj-3-tuple(v_202) else caught-fail) in
                {959}let (psk_28: preSharedKey,early_secret_16: bitstring,valid_2: bool) = (if v_195 then (if v_201 then (NoPSK,es_14,true) else fail-any) else (if v_203 then (psk_27,es_15,((h'_alg_2 = tls_h) && ((server_psk_ext(1) = psk_ext_8) && use_psk_2))) else fail-any)) in
                {960}if valid_2 then
                (
                    {961}let v_204: bool = use_grease in
                    {962}let gxy_5: element = (if not(v_204) then catch-fail(dh_decap_fun(g_7,gy_srv,i_x_1)) else caught-fail) in
                    {963}let v_205: bool = not-caught-fail(gxy_5) in
                    {964}new s_24[]: seed;
                    {965}let i_gxy: element = (if not(v_204) then (if v_205 then gxy_5 else dh_f(s_24)) else caught-fail) in
                    {966}let l_52: label = (if not(v_204) then tls13_derived else caught-fail) in
                    {967}let m_19: bitstring = (if not(v_204) then catch-fail(hash(tls_h,zero)) else caught-fail) in
                    {968}let v_206: bool = not-caught-fail(m_19) in
                    {969}let h_49: bitstring = (if v_206 then catch-fail(hash(tls_h,m_19)) else caught-fail) in
                    {970}let v_207: bool = not-caught-fail(h_49) in
                    {971}let x_58: bitstring = (if v_207 then (l_52,h_49) else caught-fail) in
                    {972}let extra_11: bitstring = (if not(v_204) then catch-fail((if v_206 then (if v_207 then hmac(tls_h,early_secret_16,x_58) else fail-any) else fail-any)) else caught-fail) in
                    {973}let v_208: bool = not-caught-fail(extra_11) in
                    {974}let i_handshake_secret: bitstring = (if not(v_204) then catch-fail((if v_208 then hmac(tls_h,extra_11,i_gxy) else fail-any)) else caught-fail) in
                    {975}let v_209: bool = not-caught-fail(i_handshake_secret) in
                    {976}let SH_ECHConf_1: msg = (if v_209 then SH(B32(sr24_1,zero8),mode_4) else caught-fail) in
                    {977}let l_53: label = (if v_209 then ech_accept_confirmation else caught-fail) in
                    {978}let m_20: bitstring = (if v_209 then (i_cur_log_1,SH_ECHConf_1) else caught-fail) in
                    {979}let h_50: bitstring = (if v_209 then catch-fail(hash(tls_h,m_20)) else caught-fail) in
                    {980}let v_210: bool = not-caught-fail(h_50) in
                    {981}let x_59: bitstring = (if v_210 then (l_53,h_50) else caught-fail) in
                    {982}let accept_confirmation_1: bitstring = (if v_209 then catch-fail((if v_210 then hmac(tls_h,i_handshake_secret,x_59) else fail-any)) else caught-fail) in
                    {983}let v_211: bool = not-caught-fail(accept_confirmation_1) in
                    {984}let is_accepted: bool = (if v_204 then false else (if v_209 then (if v_211 then (sr8_1 = crop_into_bytes8(accept_confirmation_1)) else fail-any) else fail-any)) in
                    {985}let v_212: bool = is_accepted in
                    {986}let gxy_6: element = (if v_212 then catch-fail(dh_decap_fun(g_7,gy_srv,i_x_1)) else caught-fail) in
                    {987}let v_213: bool = not-caught-fail(gxy_6) in
                    {988}new s_25[]: seed;
                    {989}let i_gxy_1: element = (if v_212 then (if v_213 then gxy_6 else dh_f(s_25)) else caught-fail) in
                    {990}let l_54: label = (if v_212 then tls13_derived else caught-fail) in
                    {991}let m_21: bitstring = (if v_212 then catch-fail(hash(tls_h,zero)) else caught-fail) in
                    {992}let v_214: bool = not-caught-fail(m_21) in
                    {993}let h_51: bitstring = (if v_214 then catch-fail(hash(tls_h,m_21)) else caught-fail) in
                    {994}let v_215: bool = not-caught-fail(h_51) in
                    {995}let x_60: bitstring = (if v_215 then (l_54,h_51) else caught-fail) in
                    {996}let extra_12: bitstring = (if v_212 then catch-fail((if v_214 then (if v_215 then hmac(tls_h,early_secret_16,x_60) else fail-any) else fail-any)) else caught-fail) in
                    {997}let v_216: bool = not-caught-fail(extra_12) in
                    {998}let i_handshake_secret_1: bitstring = (if v_212 then catch-fail((if v_216 then hmac(tls_h,extra_12,i_gxy_1) else fail-any)) else caught-fail) in
                    {999}let v_217: bool = not-caught-fail(i_handshake_secret_1) in
                    {1000}let gxy_7: element = (if not(v_212) then catch-fail(dh_decap_fun(g_7,gy_srv,o_x_1)) else caught-fail) in
                    {1001}let v_218: bool = not-caught-fail(gxy_7) in
                    {1002}new s_26[]: seed;
                    {1003}let o_gxy: element = (if not(v_212) then (if v_218 then gxy_7 else dh_f(s_26)) else caught-fail) in
                    {1004}let psk_29: preSharedKey = (if not(v_212) then NoPSK else caught-fail) in
                    {1005}let s_27: bitstring = (if not(v_212) then zero else caught-fail) in
                    {1006}let k_17: bitstring = (if not(v_212) then catch-fail(psk2b(psk_29)) else caught-fail) in
                    {1007}let v_219: bool = not-caught-fail(k_17) in
                    {1008}let early_secret_17: bitstring = (if not(v_212) then catch-fail((if v_219 then hmac(tls_h,s_27,k_17) else fail-any)) else caught-fail) in
                    {1009}let v_220: bool = not-caught-fail(early_secret_17) in
                    {1010}let l_55: label = (if v_220 then tls13_resumption_psk_binder_key else caught-fail) in
                    {1011}let m_22: bitstring = (if v_220 then zero else caught-fail) in
                    {1012}let h_52: bitstring = (if v_220 then catch-fail(hash(tls_h,m_22)) else caught-fail) in
                    {1013}let v_221: bool = not-caught-fail(h_52) in
                    {1014}let x_61: bitstring = (if v_221 then (l_55,h_52) else caught-fail) in
                    {1015}let binder_key_12: bitstring = (if v_220 then catch-fail((if v_221 then hmac(tls_h,early_secret_17,x_61) else fail-any)) else caught-fail) in
                    {1016}let v_222: bool = not-caught-fail(binder_key_12) in
                    {1017}let v_223: bitstring = (if not(v_212) then catch-fail((if v_220 then (if v_222 then (early_secret_17,binder_key_12) else fail-any) else fail-any)) else caught-fail) in
                    {1018}let v_224: bool = (not-caught-fail(v_223) && success?(1-proj-2-tuple(v_223))) in
                    {1019}let kb_12: mac_key = (if v_224 then 2-proj-2-tuple(v_223) else caught-fail) in
                    {1020}let es_16: bitstring = (if v_224 then 1-proj-2-tuple(v_223) else caught-fail) in
                    {1021}let l_56: label = (if v_224 then tls13_derived else caught-fail) in
                    {1022}let m_23: bitstring = (if v_224 then catch-fail(hash(tls_h,zero)) else caught-fail) in
                    {1023}let v_225: bool = not-caught-fail(m_23) in
                    {1024}let h_53: bitstring = (if v_225 then catch-fail(hash(tls_h,m_23)) else caught-fail) in
                    {1025}let v_226: bool = not-caught-fail(h_53) in
                    {1026}let x_62: bitstring = (if v_226 then (l_56,h_53) else caught-fail) in
                    {1027}let extra_13: bitstring = (if v_224 then catch-fail((if v_225 then (if v_226 then hmac(tls_h,es_16,x_62) else fail-any) else fail-any)) else caught-fail) in
                    {1028}let v_227: bool = not-caught-fail(extra_13) in
                    {1029}let (cr_12: bytes32,handshake_secret_3: bitstring,s_dom_7: domain,cur_log_9: bitstring) = (if v_212 then (if v_217 then (i_cr_1,i_handshake_secret_1,backend_dom,(i_cur_log_1,server_hello_2)) else fail-any) else (if v_224 then (o_cr_1,(if v_227 then hmac(tls_h,extra_13,o_gxy) else fail-any),o_dom_3,(o_cur_log,server_hello_2)) else fail-any)) in
                    {1030}let l_57: label = tls13_derived in
                    {1031}let m_24: bitstring = catch-fail(hash(tls_h,zero)) in
                    {1032}let v_228: bool = not-caught-fail(m_24) in
                    {1033}let h_54: bitstring = (if v_228 then catch-fail(hash(tls_h,m_24)) else caught-fail) in
                    {1034}let v_229: bool = not-caught-fail(h_54) in
                    {1035}let x_63: bitstring = (if v_229 then (l_57,h_54) else caught-fail) in
                    {1036}let extra_14: bitstring = catch-fail((if v_228 then (if v_229 then hmac(tls_h,handshake_secret_3,x_63) else fail-any) else fail-any)) in
                    {1037}let v_230: bool = not-caught-fail(extra_14) in
                    {1038}let k_18: bitstring = (if v_230 then zero else caught-fail) in
                    {1039}let master_secret_13: bitstring = (if v_230 then catch-fail(hmac(tls_h,handshake_secret_3,k_18)) else caught-fail) in
                    {1040}let v_231: bool = not-caught-fail(master_secret_13) in
                    {1041}let l_58: label = (if v_231 then tls13_client_handshake_traffic_secret else caught-fail) in
                    {1042}let h_55: bitstring = (if v_231 then catch-fail(hash(tls_h,cur_log_9)) else caught-fail) in
                    {1043}let v_232: bool = not-caught-fail(h_55) in
                    {1044}let x_64: bitstring = (if v_232 then (l_58,h_55) else caught-fail) in
                    {1045}let client_hts_3: bitstring = (if v_231 then catch-fail((if v_232 then hmac(tls_h,handshake_secret_3,x_64) else fail-any)) else caught-fail) in
                    {1046}let v_233: bool = not-caught-fail(client_hts_3) in
                    {1047}let l_59: label = (if v_233 then tls13_server_handshake_traffic_secret else caught-fail) in
                    {1048}let h_56: bitstring = (if v_233 then catch-fail(hash(tls_h,cur_log_9)) else caught-fail) in
                    {1049}let v_234: bool = not-caught-fail(h_56) in
                    {1050}let x_65: bitstring = (if v_234 then (l_59,h_56) else caught-fail) in
                    {1051}let server_hts_3: bitstring = (if v_233 then catch-fail((if v_234 then hmac(tls_h,handshake_secret_3,x_65) else fail-any)) else caught-fail) in
                    {1052}let v_235: bool = not-caught-fail(server_hts_3) in
                    {1053}let l_60: label = (if v_235 then tls13_key else caught-fail) in
                    {1054}let h_57: bitstring = (if v_235 then zero else caught-fail) in
                    {1055}let x_66: bitstring = (if v_235 then (l_60,h_57) else caught-fail) in
                    {1056}let client_wkh_3: bitstring = (if v_235 then catch-fail(hmac(tls_h,client_hts_3,x_66)) else caught-fail) in
                    {1057}let v_236: bool = not-caught-fail(client_wkh_3) in
                    {1058}let l_61: label = (if v_236 then tls13_key else caught-fail) in
                    {1059}let h_58: bitstring = (if v_236 then zero else caught-fail) in
                    {1060}let x_67: bitstring = (if v_236 then (l_61,h_58) else caught-fail) in
                    {1061}let server_wkh_3: bitstring = (if v_236 then catch-fail(hmac(tls_h,server_hts_3,x_67)) else caught-fail) in
                    {1062}let v_237: bool = not-caught-fail(server_wkh_3) in
                    {1063}let l_62: label = (if v_237 then tls13_finished else caught-fail) in
                    {1064}let h_59: bitstring = (if v_237 then zero else caught-fail) in
                    {1065}let x_68: bitstring = (if v_237 then (l_62,h_59) else caught-fail) in
                    {1066}let client_fk_3: bitstring = (if v_237 then catch-fail(hmac(tls_h,client_hts_3,x_68)) else caught-fail) in
                    {1067}let v_238: bool = not-caught-fail(client_fk_3) in
                    {1068}let l_63: label = (if v_238 then tls13_finished else caught-fail) in
                    {1069}let h_60: bitstring = (if v_238 then zero else caught-fail) in
                    {1070}let x_69: bitstring = (if v_238 then (l_63,h_60) else caught-fail) in
                    {1071}let server_fk_3: bitstring = (if v_238 then catch-fail(hmac(tls_h,server_hts_3,x_69)) else caught-fail) in
                    {1072}let v_239: bool = not-caught-fail(server_fk_3) in
                    {1073}let (master_secret_14: bitstring,chk_10: aead_key,shk_10: aead_key,cfin_10: mac_key,sfin_10: mac_key) = (if v_230 then (if v_231 then (if v_233 then (if v_235 then (if v_236 then (if v_237 then (if v_238 then (if v_239 then (master_secret_13,client_wkh_3,server_wkh_3,client_fk_3,server_fk_3) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                    {1074}event SanityClientSH(id_client_8,cr_12,B32(sr24_1,sr8_1),c_dom_6,s_dom_7,handshake_secret_3,psk_28,cur_log_9);
                    {1075}if (is_accepted || (psk_ext_8 = empty_psk_ext)) then
                    (
                        {1076}let sr_12: bytes32 = B32(sr24_1,sr8_1) in
                        {1077}in(io, enc_ee_msg_2: bitstring);
                        {1078}let ee_msg_3: msg = aead_dec(tls_a,shk_10,zero,zero,enc_ee_msg_2) in
                        {1079}let EE(x_70: bitstring) = ee_msg_3 in
                        {1080}let v_240: bool = not(is_accepted) in
                        {1081}let v_241: bitstring = (if v_240 then catch-fail(x_70) else caught-fail) in
                        {1082}let v_242: bool = (not-caught-fail(v_241) && success?(1-proj-server_ECH(v_241))) in
                        {1083}let ech_conf_1: echConfig = (if v_242 then 1-proj-server_ECH(v_241) else caught-fail) in
                        {1084}let update_ech_conf: bitstring = (if v_240 then (if v_242 then () else ()) else ()) in
                        {1085}let cur_log2_9: bitstring = (cur_log_9,ee_msg_3) in
                        {1086}out(ch_client_after_EE, (id_client_8,cr_12,sr_12,tls_h,tls_a,c_dom_6,s_dom_7,psk_28,master_secret_14,chk_10,shk_10,cfin_10,sfin_10,cur_log2_9))
                    )
                    else
                        {1087}out(io, illegal_parameter)
                )
                else
                    {1088}out(io, illegal_parameter)
            )
            else
                {1089}out(io, illegal_parameter)
    )
    else
        {1090}out(io, unexpected_message)
) | (
    {1093}!
    {1094}in(io, use_psk_3: bool);
    {1095}in(io, cert_req_5: bool);
    {1096}in(io, (use_ech: bool,s_dom_8: domain));
    {1097}event Same((use_ech,use_psk_3,cert_req_5,s_dom_8));
    {1098}let s_extra_1: extraExt = empty_extra_ext in
    {1099}new id_server_4[]: idProc;
    {1100}event SanityServer(id_server_4,use_ech,use_psk_3,cert_req_5);
    {1101}if not((use_psk_3 && cert_req_5)) then
    {1102}in(io, x_client_hello: msg);
    {1103}let CH(cr_13: bytes32,offer_7: params) = x_client_hello in
    (
        {1104}let nego(=TLS13,c_h_alg: hash_alg,c_a_alg: aead_alg,kex_ext_5: keyShareExt,sni_ext_3: sniExt,ech_ext_8: echExt,psk_ext_9: preSharedKeyExt,extra_ext_2: extraExt) = offer_7 in
        {1105}if ((c_h_alg = tls_h) && (c_a_alg = tls_a)) then
        (
            {1106}let client_kex_ext(DHE_group(=tls_g)) = kex_ext_5 in
            (
                {1107}if (sni_ext_3 = SNI(s_dom_8)) then
                (
                    {1108}if use_ech then
                        {1109}out(io, abort_error)
                    else
                        {1110}let hrr_mode: params = nego(TLS13,tls_h,tls_a,hrr_kex_ext(tls_g),empty_sni_ext,empty_ech_ext,empty_psk_ext,empty_extra_ext) in
                        {1111}let hello_retry_request: msg = SH(rand_HelloRetryRequest,hrr_mode) in
                        {1112}out(io, hello_retry_request);
                        {1113}let cur_log_HRR: bitstring = ((zero,x_client_hello),hello_retry_request) in
                        {1114}event SanityServerHRR(id_server_4,cr_13,s_dom_8,cur_log_HRR);
                        {1115}in(io, client_hello'_1: msg);
                        {1116}let CH(cr'_1: bytes32,offer': params) = client_hello'_1 in
                            {1117}out(ch_server_SH, (id_server_4,use_psk_3,false,cert_req_5,s_dom_8,tls_g,tls_h,tls_a,s_extra_1,zero,client_hello'_1,cur_log_HRR))
                        else
                            {1118}out(io, unexpected_message)
                )
                else
                    {1119}out(io, illegal_parameter)
            )
            else
                {1120}let client_kex_ext(DHE_kex(=tls_g,gx_8: element)) = kex_ext_5 in
                (
                    {1121}let (client_ECH(ech_h_alg: hash_alg,ech_aead_alg: aead_alg,config_id_2: configId,enc_3: element,payload_3: bitstring),=true) = (ech_ext_8,use_ech) in
                    (
                        {1122}let id_server_5: idProc = id_server_4 in
                        {1123}let CH(r_1: bytes32,offer_8: params) = x_client_hello in
                        {1124}let nego(=TLS13,=tls_h,=tls_a,kex_ext_6: keyShareExt,sni_ext_4: sniExt,ech_ext_9: echExt,=empty_psk_ext,extra_ext_3: extraExt) = offer_8 in
                        {1125}let client_ECH(ech_h_alg_1: hash_alg,ech_a_alg: aead_alg,config_id_3: configId,enc_4: element,payload_4: bitstring) = ech_ext_9 in
                        {1249}get ech_configurations(ech_config(=config_id_3,ech_g_1: group,pkR_3: element,=s_dom_8,=ech_h_alg_1,=ech_a_alg),skR_2: bitstring) in
                        (
                            {1126}let ech_conf_2: echConfig = ech_config(config_id_3,ech_g_1,pkR_3,s_dom_8,ech_h_alg_1,ech_a_alg) in
                            {1127}let v_243: msg = x_client_hello in
                            {1128}let v_244: bool = (success?(1-proj-nego(2-proj-CH(v_243))) && success?(1-proj-CH(v_243))) in
                            {1129}let extra_15: extraExt = (if v_244 then 8-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1130}let psk_ext_10: preSharedKeyExt = (if v_244 then 7-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1131}let ech_ext_10: echExt = (if v_244 then 6-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1132}let sni_ext_5: sniExt = (if v_244 then 5-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1133}let kex_ext_7: keyShareExt = (if v_244 then 4-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1134}let a_alg_11: aead_alg = (if v_244 then 3-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1135}let h_alg_11: hash_alg = (if v_244 then 2-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1136}let version_1: TLS_version = (if v_244 then 1-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                            {1137}let r_2: bytes32 = (if v_244 then 1-proj-CH(v_243) else caught-fail) in
                            {1138}let v_245: echExt = (if v_244 then catch-fail(ech_ext_10) else caught-fail) in
                            {1139}let v_246: bool = (not-caught-fail(v_245) && success?(1-proj-client_ECH(v_245))) in
                            {1140}let payload_5: bitstring = (if v_246 then 5-proj-client_ECH(v_245) else caught-fail) in
                            {1141}let enc_5: element = (if v_246 then 4-proj-client_ECH(v_245) else caught-fail) in
                            {1142}let config_id_4: configId = (if v_246 then 3-proj-client_ECH(v_245) else caught-fail) in
                            {1143}let a_alg_ech_2: aead_alg = (if v_246 then 2-proj-client_ECH(v_245) else caught-fail) in
                            {1144}let h_alg_ech_2: hash_alg = (if v_246 then 1-proj-client_ECH(v_245) else caught-fail) in
                            {1145}let client_hello_outer'_1: msg = (if v_246 then CH(r_2,nego(version_1,h_alg_11,a_alg_11,kex_ext_7,sni_ext_5,empty_ech_ext,psk_ext_10,extra_15)) else caught-fail) in
                            {1146}let client_hello_AAD_1: ClientHelloOuterAAD = catch-fail((if v_244 then (if v_246 then client_hello_outer_AAD(h_alg_ech_2,a_alg_ech_2,config_id_4,enc_5,client_hello_outer'_1) else fail-any) else fail-any)) in
                            {1147}let v_247: bool = not-caught-fail(client_hello_AAD_1) in
                            {1148}let info_1: bitstring = (if v_247 then (tls_ech_str,ech_conf_2) else caught-fail) in
                            {1149}let gxy_8: element = (if v_247 then catch-fail(dh_decap_fun(ech_g_1,enc_4,skR_2)) else caught-fail) in
                            {1150}let v_248: bool = not-caught-fail(gxy_8) in
                            {1151}new s_28[]: seed;
                            {1152}let shared_secret_1: element = (if v_247 then (if v_248 then gxy_8 else dh_f(s_28)) else caught-fail) in
                            {1153}let m_25: hpkeMode = (if v_247 then R else caught-fail) in
                            {1154}let s_29: bitstring = (if v_247 then zero else caught-fail) in
                            {1155}let k_19: bitstring = (if v_247 then (hpke_info_hash,info_1) else caught-fail) in
                            {1156}let info_hash_1: bitstring = (if v_247 then catch-fail(hmac(ech_h_alg_1,s_29,k_19)) else caught-fail) in
                            {1157}let v_249: bool = not-caught-fail(info_hash_1) in
                            {1158}let k_20: bitstring = (if v_249 then (hpke_secret,zero) else caught-fail) in
                            {1159}let xsecret_1: bitstring = (if v_249 then catch-fail(hmac(ech_h_alg_1,shared_secret_1,k_20)) else caught-fail) in
                            {1160}let v_250: bool = not-caught-fail(xsecret_1) in
                            {1161}let l_64: label = (if v_250 then hpke_key else caught-fail) in
                            {1162}let x_71: bitstring = (if v_250 then (l_64,info_hash_1) else caught-fail) in
                            {1163}let key_2: aead_key = (if v_250 then catch-fail(hmac(ech_h_alg_1,xsecret_1,x_71)) else caught-fail) in
                            {1164}let v_251: bool = not-caught-fail(key_2) in
                            {1165}let l_65: label = (if v_251 then hpke_base_nonce else caught-fail) in
                            {1166}let x_72: bitstring = (if v_251 then (l_65,info_hash_1) else caught-fail) in
                            {1167}let base_nonce_1: bitstring = (if v_251 then catch-fail(hmac(ech_h_alg_1,xsecret_1,x_72)) else caught-fail) in
                            {1168}let v_252: bool = not-caught-fail(base_nonce_1) in
                            {1169}let l_66: label = (if v_252 then hpke_exp else caught-fail) in
                            {1170}let x_73: bitstring = (if v_252 then (l_66,info_hash_1) else caught-fail) in
                            {1171}let exporter_secret_1: bitstring = (if v_252 then catch-fail(hmac(ech_h_alg_1,xsecret_1,x_73)) else caught-fail) in
                            {1172}let v_253: bool = not-caught-fail(exporter_secret_1) in
                            {1173}let context_1: hpkeContext = (if v_247 then catch-fail((if v_249 then (if v_250 then (if v_251 then (if v_252 then (if v_253 then hpke_context(m_25,key_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
                            {1174}let v_254: bool = not-caught-fail(context_1) in
                            {1175}let v_255: hpkeContext = (if v_254 then catch-fail(context_1) else caught-fail) in
                            {1176}let v_256: bool = (not-caught-fail(v_255) && ((R =nf 1-proj-hpke_context(v_255)) && success?(1-proj-hpke_context(v_255)))) in
                            {1177}let key_3: aead_key = (if v_256 then 2-proj-hpke_context(v_255) else caught-fail) in
                            {1178}let i_client_hello_2: msg = (if v_254 then catch-fail((if v_256 then aead_dec(ech_a_alg,key_3,nonce_for_seal_open,client_hello_AAD_1,payload_4) else fail-any)) else caught-fail) in
                            {1179}let v_257: bool = not-caught-fail(i_client_hello_2) in
                            {1180}let v_258: msg = (if v_257 then catch-fail(i_client_hello_2) else caught-fail) in
                            {1181}let v_259: bool = (not-caught-fail(v_258) && ((((TLS13 =nf 1-proj-nego(2-proj-CH(v_258))) && success?(1-proj-SNI(5-proj-nego(2-proj-CH(v_258))))) && success?(1-proj-nego(2-proj-CH(v_258)))) && success?(1-proj-CH(v_258)))) in
                            {1182}let extra_ext': extraExt = (if v_259 then 8-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                            {1183}let empty_psk_ext': preSharedKeyExt = (if v_259 then 7-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                            {1184}let ech_ext': echExt = (if v_259 then 6-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                            {1185}let i_dom: domain = (if v_259 then 1-proj-SNI(5-proj-nego(2-proj-CH(v_258))) else caught-fail) in
                            {1186}let kex_ext'_1: keyShareExt = (if v_259 then 4-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                            {1187}let a_alg': aead_alg = (if v_259 then 3-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                            {1188}let h_alg': hash_alg = (if v_259 then 2-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                            {1189}let cr'_2: bytes32 = (if v_259 then 1-proj-CH(v_258) else caught-fail) in
                            {1190}let v_260: bool = (v_257 && not(v_259)) in
                            {1191}let v_261: echConfig = (if v_260 then catch-fail(ech_conf_2) else caught-fail) in
                            {1192}let v_262: bool = (not-caught-fail(v_261) && success?(1-proj-ech_config(v_261))) in
                            {1193}let a_alg_12: aead_alg = (if v_262 then 6-proj-ech_config(v_261) else caught-fail) in
                            {1194}let h_alg_12: hash_alg = (if v_262 then 5-proj-ech_config(v_261) else caught-fail) in
                            {1195}let s_dom_9: domain = (if v_262 then 4-proj-ech_config(v_261) else caught-fail) in
                            {1196}let pkR_4: element = (if v_262 then 3-proj-ech_config(v_261) else caught-fail) in
                            {1197}let g_8: group = (if v_262 then 2-proj-ech_config(v_261) else caught-fail) in
                            {1198}let config_id_5: configId = (if v_262 then 1-proj-ech_config(v_261) else caught-fail) in
                            {1199}new s_30[]: seed;
                            {1200}let gx_9: element = (if v_262 then dh_pub(g_8,dh_k(s_30)) else caught-fail) in
                            {1201}let v_263: bitstring = (if v_262 then catch-fail((dh_k(s_30),gx_9)) else caught-fail) in
                            {1202}let v_264: bool = (not-caught-fail(v_263) && success?(1-proj-2-tuple(v_263))) in
                            {1203}let pkR': element = (if v_264 then 2-proj-2-tuple(v_263) else caught-fail) in
                            {1204}let skR': bitstring = (if v_264 then 1-proj-2-tuple(v_263) else caught-fail) in
                            {1205}new config_id'[]: configId;
                            {1206}let retry_config: echConfig = (if v_260 then catch-fail((if v_262 then (if v_264 then ech_config(config_id',g_8,pkR',s_dom_9,h_alg_12,a_alg_12) else fail-any) else fail-any)) else caught-fail) in
                            {1207}let v_265: bool = not-caught-fail(retry_config) in
                            {1208}let v_266: bool = (v_254 && not(v_257)) in
                            {1209}let v_267: echConfig = (if v_266 then catch-fail(ech_conf_2) else caught-fail) in
                            {1210}let v_268: bool = (not-caught-fail(v_267) && success?(1-proj-ech_config(v_267))) in
                            {1211}let a_alg_13: aead_alg = (if v_268 then 6-proj-ech_config(v_267) else caught-fail) in
                            {1212}let h_alg_13: hash_alg = (if v_268 then 5-proj-ech_config(v_267) else caught-fail) in
                            {1213}let s_dom_10: domain = (if v_268 then 4-proj-ech_config(v_267) else caught-fail) in
                            {1214}let pkR_5: element = (if v_268 then 3-proj-ech_config(v_267) else caught-fail) in
                            {1215}let g_9: group = (if v_268 then 2-proj-ech_config(v_267) else caught-fail) in
                            {1216}let config_id_6: configId = (if v_268 then 1-proj-ech_config(v_267) else caught-fail) in
                            {1217}new s_31[]: seed;
                            {1218}let gx_10: element = (if v_268 then dh_pub(g_9,dh_k(s_31)) else caught-fail) in
                            {1219}let v_269: bitstring = (if v_268 then catch-fail((dh_k(s_31),gx_10)) else caught-fail) in
                            {1220}let v_270: bool = (not-caught-fail(v_269) && success?(1-proj-2-tuple(v_269))) in
                            {1221}let pkR'_1: element = (if v_270 then 2-proj-2-tuple(v_269) else caught-fail) in
                            {1222}let skR'_1: bitstring = (if v_270 then 1-proj-2-tuple(v_269) else caught-fail) in
                            {1223}new config_id'_1[]: configId;
                            {1224}let retry_config_1: echConfig = (if v_266 then catch-fail((if v_268 then (if v_270 then ech_config(config_id'_1,g_9,pkR'_1,s_dom_10,h_alg_13,a_alg_13) else fail-any) else fail-any)) else caught-fail) in
                            {1225}let v_271: bool = not-caught-fail(retry_config_1) in
                            {1226}let (s_dom_11: domain,client_hello_2: msg,encrypted_ext_1: bitstring,is_backend_1: bool) = (if v_247 then (if v_254 then (if v_257 then (if v_259 then (i_dom,i_client_hello_2,zero,true) else (if v_265 then (s_dom_8,x_client_hello,server_ECH(retry_config),false) else fail-any)) else (if v_271 then (s_dom_8,x_client_hello,server_ECH(retry_config_1),false) else fail-any)) else fail-any) else fail-any) in
                            {1227}out(ch_server_SH, (id_server_5,use_psk_3,is_backend_1,cert_req_5,s_dom_11,tls_g,tls_h,tls_a,s_extra_1,encrypted_ext_1,client_hello_2,zero))
                        )
                        else
                            {1248}get ech_configurations(ech_config(config_id'_2: configId,ech_g': group,pkR'_2: element,=s_dom_8,ech_h_alg': hash_alg,ech_a_alg': aead_alg),skR'_2: bitstring) in
                            {1228}let config_2: echConfig = ech_config(config_id'_2,ech_g',pkR'_2,s_dom_8,ech_h_alg',ech_a_alg') in
                            {1229}let v_272: echConfig = config_2 in
                            {1230}let v_273: bool = success?(1-proj-ech_config(v_272)) in
                            {1231}let a_alg_14: aead_alg = (if v_273 then 6-proj-ech_config(v_272) else caught-fail) in
                            {1232}let h_alg_14: hash_alg = (if v_273 then 5-proj-ech_config(v_272) else caught-fail) in
                            {1233}let s_dom_12: domain = (if v_273 then 4-proj-ech_config(v_272) else caught-fail) in
                            {1234}let pkR_6: element = (if v_273 then 3-proj-ech_config(v_272) else caught-fail) in
                            {1235}let g_10: group = (if v_273 then 2-proj-ech_config(v_272) else caught-fail) in
                            {1236}let config_id_7: configId = (if v_273 then 1-proj-ech_config(v_272) else caught-fail) in
                            {1237}new s_32[]: seed;
                            {1238}let gx_11: element = (if v_273 then dh_pub(g_10,dh_k(s_32)) else caught-fail) in
                            {1239}let v_274: bitstring = (if v_273 then catch-fail((dh_k(s_32),gx_11)) else caught-fail) in
                            {1240}let v_275: bool = (not-caught-fail(v_274) && success?(1-proj-2-tuple(v_274))) in
                            {1241}let pkR'_3: element = (if v_275 then 2-proj-2-tuple(v_274) else caught-fail) in
                            {1242}let skR'_3: bitstring = (if v_275 then 1-proj-2-tuple(v_274) else caught-fail) in
                            {1243}new config_id'_3[]: configId;
                            {1244}let retry_config_2: echConfig = catch-fail((if v_273 then (if v_275 then ech_config(config_id'_3,g_10,pkR'_3,s_dom_12,h_alg_14,a_alg_14) else fail-any) else fail-any)) in
                            {1245}let v_276: bool = not-caught-fail(retry_config_2) in
                            {1246}let (s_dom_13: domain,client_hello_3: msg,encrypted_ext_2: bitstring,is_backend_2: bool) = (if v_276 then (s_dom_8,x_client_hello,server_ECH(retry_config_2),false) else fail-any) in
                            {1247}out(ch_server_SH, (id_server_5,use_psk_3,is_backend_2,cert_req_5,s_dom_13,tls_g,tls_h,tls_a,s_extra_1,encrypted_ext_2,client_hello_3,zero))
                    )
                    else
                        {1250}if ((ech_ext_8 = empty_ech_ext) || not(use_ech)) then
                            {1251}out(ch_server_SH, (id_server_4,use_psk_3,false,cert_req_5,s_dom_8,tls_g,tls_h,tls_a,s_extra_1,zero,x_client_hello,zero))
                        else
                            {1252}out(io, illegal_parameter)
                )
                else
                    {1253}out(io, handshake_failure)
        )
        else
            {1254}out(io, handshake_failure)
    )
    else
        {1255}out(io, unexpected_message)
) | (
    {1256}let use_grease_1: bool = false in
    {1257}in(io, use_psk_4: bool);
    {1258}let send_kex_3: bool = true in
    {1259}in(io, (c_dom_7: domain,cfs_dom_1: domain));
    {1260}event Same((use_grease_1,use_psk_4,send_kex_3,c_dom_7,cfs_dom_1));
    {1609}get ech_configurations(ech_config(id_11: configId,g_11: group,pkR_7: element,=cfs_dom_1,h_alg_15: hash_alg,a_alg_15: aead_alg),skR_3: bitstring) in
    {1261}let ech_conf_3: echConfig = ech_config(id_11,g_11,pkR_7,cfs_dom_1,h_alg_15,a_alg_15) in
    {1262}let i_dom_1: domain = choice[BackendA,BackendB] in
    {1263}let i_extra_1: extraExt = empty_extra_ext in
    {1264}let o_extra_1: extraExt = empty_extra_ext in
    {1265}new id_client_9[]: idProc;
    {1266}event SanityClient(id_client_9,true,use_grease_1,use_psk_4,send_kex_3);
    {1267}if not((use_grease_1 && use_psk_4)) then
    {1268}let i_cur_log_2: bitstring = zero in
    {1269}new s_33[]: seed;
    {1270}let gx_12: element = dh_pub(tls_g,dh_k(s_33)) in
    {1271}let v_277: bitstring = (dh_k(s_33),gx_12) in
    {1272}let v_278: bool = success?(1-proj-2-tuple(v_277)) in
    {1273}let i_gx_1: element = (if v_278 then 2-proj-2-tuple(v_277) else caught-fail) in
    {1274}let i_x_2: bitstring = (if v_278 then 1-proj-2-tuple(v_277) else caught-fail) in
    {1275}new s_34[]: seed;
    {1276}let gx_13: element = (if v_278 then dh_pub(tls_g,dh_k(s_34)) else caught-fail) in
    {1277}let v_279: bitstring = (if v_278 then catch-fail((dh_k(s_34),gx_13)) else caught-fail) in
    {1278}let v_280: bool = (not-caught-fail(v_279) && success?(1-proj-2-tuple(v_279))) in
    {1279}let o_gx_1: element = (if v_280 then 2-proj-2-tuple(v_279) else caught-fail) in
    {1280}let o_x_2: bitstring = (if v_280 then 1-proj-2-tuple(v_279) else caught-fail) in
    {1281}let v_281: bitstring = (if v_280 then catch-fail((if send_kex_3 then (DHE_kex(tls_g,i_gx_1),DHE_kex(tls_g,o_gx_1)) else (DHE_group(tls_g),DHE_group(tls_g)))) else caught-fail) in
    {1282}let v_282: bool = (not-caught-fail(v_281) && success?(1-proj-2-tuple(v_281))) in
    {1283}let o_kex_1: kex_alg = (if v_282 then 2-proj-2-tuple(v_281) else caught-fail) in
    {1284}let i_kex_1: kex_alg = (if v_282 then 1-proj-2-tuple(v_281) else caught-fail) in
    {1285}let (i_kex_ext_2: keyShareExt,o_kex_ext_2: keyShareExt,kex_data_5: bitstring) = (if v_278 then (if v_280 then (if v_282 then (client_kex_ext(i_kex_1),client_kex_ext(o_kex_1),(i_x_2,o_x_2,tls_g,send_kex_3)) else fail-any) else fail-any) else fail-any) in
    {1286}new rand24_5[]: bytes24;
    {1287}new rand8_5[]: bytes8;
    {1288}let i_cr_2: bytes32 = B32(rand24_5,rand8_5) in
    {1289}let ech_ext_11: echExt = ech_is_inner in
    {1608}get pre_shared_keys(c_dom'_4: domain,s_dom'_4: domain,=tls_h,id_12: identityPsk,internal_psk_3: internal_preSharedKey) in
    {1290}event Selected_psk(c_dom_7,c_dom'_4,i_dom_1,s_dom'_4,id_12,internal_psk_3);
    {1291}let v_283: bool = use_psk_4 in
    {1292}let psk_30: preSharedKey = (if v_283 then PSK(internal_psk_3) else caught-fail) in
    {1293}let offer_9: params = (if v_283 then nego(TLS13,tls_h,tls_a,i_kex_ext_2,SNI(i_dom_1),ech_ext_11,trunc_client_psk_ext(id_12),i_extra_1) else caught-fail) in
    {1294}let cur_log'_5: bitstring = (if v_283 then (i_cur_log_2,CH(i_cr_2,offer_9)) else caught-fail) in
    {1295}let s_35: bitstring = (if v_283 then zero else caught-fail) in
    {1296}let k_21: bitstring = (if v_283 then catch-fail(psk2b(psk_30)) else caught-fail) in
    {1297}let v_284: bool = not-caught-fail(k_21) in
    {1298}let early_secret_18: bitstring = (if v_283 then catch-fail((if v_284 then hmac(tls_h,s_35,k_21) else fail-any)) else caught-fail) in
    {1299}let v_285: bool = not-caught-fail(early_secret_18) in
    {1300}let l_67: label = (if v_285 then tls13_resumption_psk_binder_key else caught-fail) in
    {1301}let m_26: bitstring = (if v_285 then zero else caught-fail) in
    {1302}let h_61: bitstring = (if v_285 then catch-fail(hash(tls_h,m_26)) else caught-fail) in
    {1303}let v_286: bool = not-caught-fail(h_61) in
    {1304}let x_74: bitstring = (if v_286 then (l_67,h_61) else caught-fail) in
    {1305}let binder_key_13: bitstring = (if v_285 then catch-fail((if v_286 then hmac(tls_h,early_secret_18,x_74) else fail-any)) else caught-fail) in
    {1306}let v_287: bool = not-caught-fail(binder_key_13) in
    {1307}let v_288: bitstring = (if v_283 then catch-fail((if v_285 then (if v_287 then (early_secret_18,binder_key_13) else fail-any) else fail-any)) else caught-fail) in
    {1308}let v_289: bool = (not-caught-fail(v_288) && success?(1-proj-2-tuple(v_288))) in
    {1309}let kb_13: mac_key = (if v_289 then 2-proj-2-tuple(v_288) else caught-fail) in
    {1310}let es_17: bitstring = (if v_289 then 1-proj-2-tuple(v_288) else caught-fail) in
    {1311}let binders_4: bitstring = (if v_289 then catch-fail(hmac(tls_h,kb_13,cur_log'_5)) else caught-fail) in
    {1312}let v_290: bool = not-caught-fail(binders_4) in
    {1313}let psk_31: preSharedKey = (if not(v_283) then NoPSK else caught-fail) in
    {1314}let s_36: bitstring = (if not(v_283) then zero else caught-fail) in
    {1315}let k_22: bitstring = (if not(v_283) then catch-fail(psk2b(psk_31)) else caught-fail) in
    {1316}let v_291: bool = not-caught-fail(k_22) in
    {1317}let early_secret_19: bitstring = (if not(v_283) then catch-fail((if v_291 then hmac(tls_h,s_36,k_22) else fail-any)) else caught-fail) in
    {1318}let v_292: bool = not-caught-fail(early_secret_19) in
    {1319}let l_68: label = (if v_292 then tls13_resumption_psk_binder_key else caught-fail) in
    {1320}let m_27: bitstring = (if v_292 then zero else caught-fail) in
    {1321}let h_62: bitstring = (if v_292 then catch-fail(hash(tls_h,m_27)) else caught-fail) in
    {1322}let v_293: bool = not-caught-fail(h_62) in
    {1323}let x_75: bitstring = (if v_293 then (l_68,h_62) else caught-fail) in
    {1324}let binder_key_14: bitstring = (if v_292 then catch-fail((if v_293 then hmac(tls_h,early_secret_19,x_75) else fail-any)) else caught-fail) in
    {1325}let v_294: bool = not-caught-fail(binder_key_14) in
    {1326}let v_295: bitstring = (if not(v_283) then catch-fail((if v_292 then (if v_294 then (early_secret_19,binder_key_14) else fail-any) else fail-any)) else caught-fail) in
    {1327}let v_296: bool = (not-caught-fail(v_295) && success?(1-proj-2-tuple(v_295))) in
    {1328}let kb_14: mac_key = (if v_296 then 2-proj-2-tuple(v_295) else caught-fail) in
    {1329}let es_18: bitstring = (if v_296 then 1-proj-2-tuple(v_295) else caught-fail) in
    {1330}let v_297: bitstring = catch-fail((if v_283 then (if v_289 then (if v_290 then (client_psk_ext(id_12,binders_4),(tls_h,psk_30,es_17)) else fail-any) else fail-any) else (if v_296 then (empty_psk_ext,(tls_h,NoPSK,es_18)) else fail-any))) in
    {1331}let v_298: bool = (not-caught-fail(v_297) && success?(1-proj-2-tuple(v_297))) in
    {1332}let psk_data_5: bitstring = (if v_298 then 2-proj-2-tuple(v_297) else caught-fail) in
    {1333}let psk_ext_11: preSharedKeyExt = (if v_298 then 1-proj-2-tuple(v_297) else caught-fail) in
    {1334}let i_offer_1: params = (if v_298 then nego(TLS13,tls_h,tls_a,i_kex_ext_2,SNI(i_dom_1),ech_is_inner,psk_ext_11,i_extra_1) else caught-fail) in
    {1335}let i_client_hello_3: msg = (if v_298 then CH(i_cr_2,i_offer_1) else caught-fail) in
    {1336}let v_299: echConfig = (if v_298 then catch-fail(ech_conf_3) else caught-fail) in
    {1337}let v_300: bool = (not-caught-fail(v_299) && success?(1-proj-ech_config(v_299))) in
    {1338}let a_alg_ech_3: aead_alg = (if v_300 then 6-proj-ech_config(v_299) else caught-fail) in
    {1339}let h_alg_ech_3: hash_alg = (if v_300 then 5-proj-ech_config(v_299) else caught-fail) in
    {1340}let o_dom_4: domain = (if v_300 then 4-proj-ech_config(v_299) else caught-fail) in
    {1341}let pkR_8: element = (if v_300 then 3-proj-ech_config(v_299) else caught-fail) in
    {1342}let g_ech_1: group = (if v_300 then 2-proj-ech_config(v_299) else caught-fail) in
    {1343}let config_id_8: configId = (if v_300 then 1-proj-ech_config(v_299) else caught-fail) in
    {1344}let info_2: bitstring = (if v_300 then (tls_ech_str,ech_conf_3) else caught-fail) in
    {1345}new s_37[]: seed;
    {1346}let v_301: bitstring = (if v_300 then catch-fail((dh_xy(s_37,pkR_8),dh_encap_fun(g_ech_1,pkR_8,dh_xy(s_37,pkR_8)))) else caught-fail) in
    {1347}let v_302: bool = (not-caught-fail(v_301) && success?(1-proj-2-tuple(v_301))) in
    {1348}let enc_6: element = (if v_302 then 2-proj-2-tuple(v_301) else caught-fail) in
    {1349}let shared_secret_2: element = (if v_302 then 1-proj-2-tuple(v_301) else caught-fail) in
    {1350}let m_28: hpkeMode = (if v_302 then S else caught-fail) in
    {1351}let s_38: bitstring = (if v_302 then zero else caught-fail) in
    {1352}let k_23: bitstring = (if v_302 then (hpke_info_hash,info_2) else caught-fail) in
    {1353}let info_hash_2: bitstring = (if v_302 then catch-fail(hmac(h_alg_ech_3,s_38,k_23)) else caught-fail) in
    {1354}let v_303: bool = not-caught-fail(info_hash_2) in
    {1355}let k_24: bitstring = (if v_303 then (hpke_secret,zero) else caught-fail) in
    {1356}let xsecret_2: bitstring = (if v_303 then catch-fail(hmac(h_alg_ech_3,shared_secret_2,k_24)) else caught-fail) in
    {1357}let v_304: bool = not-caught-fail(xsecret_2) in
    {1358}let l_69: label = (if v_304 then hpke_key else caught-fail) in
    {1359}let x_76: bitstring = (if v_304 then (l_69,info_hash_2) else caught-fail) in
    {1360}let key_4: aead_key = (if v_304 then catch-fail(hmac(h_alg_ech_3,xsecret_2,x_76)) else caught-fail) in
    {1361}let v_305: bool = not-caught-fail(key_4) in
    {1362}let l_70: label = (if v_305 then hpke_base_nonce else caught-fail) in
    {1363}let x_77: bitstring = (if v_305 then (l_70,info_hash_2) else caught-fail) in
    {1364}let base_nonce_2: bitstring = (if v_305 then catch-fail(hmac(h_alg_ech_3,xsecret_2,x_77)) else caught-fail) in
    {1365}let v_306: bool = not-caught-fail(base_nonce_2) in
    {1366}let l_71: label = (if v_306 then hpke_exp else caught-fail) in
    {1367}let x_78: bitstring = (if v_306 then (l_71,info_hash_2) else caught-fail) in
    {1368}let exporter_secret_2: bitstring = (if v_306 then catch-fail(hmac(h_alg_ech_3,xsecret_2,x_78)) else caught-fail) in
    {1369}let v_307: bool = not-caught-fail(exporter_secret_2) in
    {1370}let v_308: bitstring = (if v_300 then catch-fail((if v_302 then (enc_6,(if v_303 then (if v_304 then (if v_305 then (if v_306 then (if v_307 then hpke_context(m_28,key_4) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) else fail-any)) else caught-fail) in
    {1371}let v_309: bool = (not-caught-fail(v_308) && success?(1-proj-2-tuple(v_308))) in
    {1372}let context_2: hpkeContext = (if v_309 then 2-proj-2-tuple(v_308) else caught-fail) in
    {1373}let enc_7: element = (if v_309 then 1-proj-2-tuple(v_308) else caught-fail) in
    {1374}new rand24_6[]: bytes24;
    {1375}new rand8_6[]: bytes8;
    {1376}let o_cr_2: bytes32 = (if v_309 then B32(rand24_6,rand8_6) else caught-fail) in
    {1377}let v_310: bool = (if v_309 then catch-fail(use_grease_1) else caught-fail) in
    {1378}new payload_6[]: bitstring;
    {1379}let ech_ext_12: echExt = (if v_310 then client_ECH(h_alg_ech_3,a_alg_ech_3,config_id_8,enc_7,payload_6) else caught-fail) in
    {1380}let o_offer_2: params = (if v_310 then nego(TLS13,tls_h,tls_a,o_kex_ext_2,SNI(o_dom_4),ech_ext_12,empty_psk_ext,o_extra_1) else caught-fail) in
    {1381}let dummy_ech_ext_1: echExt = (if is-false(v_310) then client_ECH(h_alg_ech_3,a_alg_ech_3,config_id_8,enc_7,zero) else caught-fail) in
    {1382}let o_offer1_1: params = (if is-false(v_310) then nego(TLS13,tls_h,tls_a,o_kex_ext_2,SNI(o_dom_4),dummy_ech_ext_1,empty_psk_ext,o_extra_1) else caught-fail) in
    {1383}let o_client_hello1_1: msg = (if is-false(v_310) then CH(o_cr_2,o_offer1_1) else caught-fail) in
    {1384}let v_311: msg = (if is-false(v_310) then catch-fail(o_client_hello1_1) else caught-fail) in
    {1385}let v_312: bool = (not-caught-fail(v_311) && (success?(1-proj-nego(2-proj-CH(v_311))) && success?(1-proj-CH(v_311)))) in
    {1386}let extra_16: extraExt = (if v_312 then 8-proj-nego(2-proj-CH(v_311)) else caught-fail) in
    {1387}let psk_ext_12: preSharedKeyExt = (if v_312 then 7-proj-nego(2-proj-CH(v_311)) else caught-fail) in
    {1388}let ech_ext_13: echExt = (if v_312 then 6-proj-nego(2-proj-CH(v_311)) else caught-fail) in
    {1389}let sni_ext_6: sniExt = (if v_312 then 5-proj-nego(2-proj-CH(v_311)) else caught-fail) in
    {1390}let kex_ext_8: keyShareExt = (if v_312 then 4-proj-nego(2-proj-CH(v_311)) else caught-fail) in
    {1391}let a_alg_16: aead_alg = (if v_312 then 3-proj-nego(2-proj-CH(v_311)) else caught-fail) in
    {1392}let h_alg_16: hash_alg = (if v_312 then 2-proj-nego(2-proj-CH(v_311)) else caught-fail) in
    {1393}let version_2: TLS_version = (if v_312 then 1-proj-nego(2-proj-CH(v_311)) else caught-fail) in
    {1394}let r_3: bytes32 = (if v_312 then 1-proj-CH(v_311) else caught-fail) in
    {1395}let v_313: echExt = (if v_312 then catch-fail(ech_ext_13) else caught-fail) in
    {1396}let v_314: bool = (not-caught-fail(v_313) && success?(1-proj-client_ECH(v_313))) in
    {1397}let payload_7: bitstring = (if v_314 then 5-proj-client_ECH(v_313) else caught-fail) in
    {1398}let enc_8: element = (if v_314 then 4-proj-client_ECH(v_313) else caught-fail) in
    {1399}let config_id_9: configId = (if v_314 then 3-proj-client_ECH(v_313) else caught-fail) in
    {1400}let a_alg_ech_4: aead_alg = (if v_314 then 2-proj-client_ECH(v_313) else caught-fail) in
    {1401}let h_alg_ech_4: hash_alg = (if v_314 then 1-proj-client_ECH(v_313) else caught-fail) in
    {1402}let client_hello_outer'_2: msg = (if v_314 then CH(r_3,nego(version_2,h_alg_16,a_alg_16,kex_ext_8,sni_ext_6,empty_ech_ext,psk_ext_12,extra_16)) else caught-fail) in
    {1403}let client_hello_AAD_2: ClientHelloOuterAAD = (if is-false(v_310) then catch-fail((if v_312 then (if v_314 then client_hello_outer_AAD(h_alg_ech_4,a_alg_ech_4,config_id_9,enc_8,client_hello_outer'_2) else fail-any) else fail-any)) else caught-fail) in
    {1404}let v_315: bool = not-caught-fail(client_hello_AAD_2) in
    {1405}let v_316: hpkeContext = (if v_315 then catch-fail(context_2) else caught-fail) in
    {1406}let v_317: bool = (not-caught-fail(v_316) && ((S =nf 1-proj-hpke_context(v_316)) && success?(1-proj-hpke_context(v_316)))) in
    {1407}let key_5: aead_key = (if v_317 then 2-proj-hpke_context(v_316) else caught-fail) in
    {1408}let payload_8: bitstring = (if v_315 then catch-fail((if v_317 then aead_enc(a_alg_ech_3,key_5,nonce_for_seal_open,client_hello_AAD_2,i_client_hello_3) else fail-any)) else caught-fail) in
    {1409}let v_318: bool = not-caught-fail(payload_8) in
    {1410}let ech_ext_14: echExt = (if v_318 then client_ECH(h_alg_ech_3,a_alg_ech_3,config_id_8,enc_7,payload_8) else caught-fail) in
    {1411}let o_offer_3: params = (if v_318 then nego(TLS13,tls_h,tls_a,o_kex_ext_2,SNI(o_dom_4),ech_ext_14,empty_psk_ext,o_extra_1) else caught-fail) in
    {1412}let (o_client_hello_1: msg,i_client_hello_4: msg,i_cr_3: bytes32,o_cr_3: bytes32,i_kex_ext_3: keyShareExt,o_kex_ext_3: keyShareExt,kex_data_6: bitstring,psk_data_6: bitstring) = (if v_298 then (if v_300 then (if v_309 then (if undo-catch-fail(v_310) then (CH(o_cr_2,o_offer_2),CH(o_cr_2,o_offer_2),o_cr_2,o_cr_2,o_kex_ext_2,o_kex_ext_2,kex_data_5,psk_data_5) else (if v_315 then (if v_318 then (CH(o_cr_2,o_offer_3),i_client_hello_3,i_cr_2,o_cr_2,i_kex_ext_2,o_kex_ext_2,kex_data_5,psk_data_5) else fail-any) else fail-any)) else fail-any) else fail-any) else fail-any) in
    {1413}out(io, o_client_hello_1);
    {1414}let (=tls_h,psk_32: preSharedKey,es_19: bitstring) = psk_data_6 in
    {1415}let v_319: echConfig = ech_conf_3 in
    {1416}let v_320: bool = success?(1-proj-ech_config(v_319)) in
    {1417}let al_3: aead_alg = (if v_320 then 6-proj-ech_config(v_319) else caught-fail) in
    {1418}let hl_3: hash_alg = (if v_320 then 5-proj-ech_config(v_319) else caught-fail) in
    {1419}let dom_3: domain = (if v_320 then 4-proj-ech_config(v_319) else caught-fail) in
    {1420}let public_key_3: element = (if v_320 then 3-proj-ech_config(v_319) else caught-fail) in
    {1421}let g_12: group = (if v_320 then 2-proj-ech_config(v_319) else caught-fail) in
    {1422}let id_13: configId = (if v_320 then 1-proj-ech_config(v_319) else caught-fail) in
    {1423}let o_dom_5: domain = (if v_320 then dom_3 else fail-any) in
    {1424}let v_321: echConfig = ech_conf_3 in
    {1425}let v_322: bool = success?(1-proj-ech_config(v_321)) in
    {1426}let al_4: aead_alg = (if v_322 then 6-proj-ech_config(v_321) else caught-fail) in
    {1427}let hl_4: hash_alg = (if v_322 then 5-proj-ech_config(v_321) else caught-fail) in
    {1428}let dom_4: domain = (if v_322 then 4-proj-ech_config(v_321) else caught-fail) in
    {1429}let public_key_4: element = (if v_322 then 3-proj-ech_config(v_321) else caught-fail) in
    {1430}let g_13: group = (if v_322 then 2-proj-ech_config(v_321) else caught-fail) in
    {1431}let id_14: configId = (if v_322 then 1-proj-ech_config(v_321) else caught-fail) in
    {1432}let ech_pk_1: element = (if v_322 then public_key_4 else fail-any) in
    {1433}event SanityClientCH_ECH(id_client_9,zero32,i_cr_3,o_cr_3,c_dom_7,o_dom_5,i_dom_1,ech_pk_1,psk_32,(zero,o_client_hello_1),(zero,i_client_hello_4));
    {1434}in(io, server_hello_3: msg);
    {1435}let SH(sr_13: bytes32,mode_5: params) = server_hello_3 in
    (
        {1436}if (sr_13 = rand_HelloRetryRequest) then
            {1437}out(io, illegal_parameter)
        else
            {1438}let v_323: echConfig = ech_conf_3 in
            {1439}let v_324: bool = success?(1-proj-ech_config(v_323)) in
            {1440}let al_5: aead_alg = (if v_324 then 6-proj-ech_config(v_323) else caught-fail) in
            {1441}let hl_5: hash_alg = (if v_324 then 5-proj-ech_config(v_323) else caught-fail) in
            {1442}let dom_5: domain = (if v_324 then 4-proj-ech_config(v_323) else caught-fail) in
            {1443}let public_key_5: element = (if v_324 then 3-proj-ech_config(v_323) else caught-fail) in
            {1444}let g_14: group = (if v_324 then 2-proj-ech_config(v_323) else caught-fail) in
            {1445}let id_15: configId = (if v_324 then 1-proj-ech_config(v_323) else caught-fail) in
            {1446}let id_client_10: idProc = id_client_9 in
            {1447}let o_dom_6: domain = (if v_324 then dom_5 else fail-any) in
            {1448}let i_cur_log_3: bitstring = (zero,i_client_hello_4) in
            {1449}let o_cur_log_1: bitstring = (zero,o_client_hello_1) in
            {1450}let SH(B32(sr24_2: bytes24,sr8_2: bytes8),mode_6: params) = server_hello_3 in
            {1451}let (i_x_3: bitstring,o_x_3: bitstring,g_15: group,=true) = kex_data_6 in
            {1452}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_15,gy_srv_1: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_13: preSharedKeyExt,extra_17: extraExt) = mode_6 in
            (
                {1453}let v_325: bool = (psk_ext_13 = empty_psk_ext) in
                {1454}let psk_33: preSharedKey = (if v_325 then NoPSK else caught-fail) in
                {1455}let s_39: bitstring = (if v_325 then zero else caught-fail) in
                {1456}let k_25: bitstring = (if v_325 then catch-fail(psk2b(psk_33)) else caught-fail) in
                {1457}let v_326: bool = not-caught-fail(k_25) in
                {1458}let early_secret_20: bitstring = (if v_325 then catch-fail((if v_326 then hmac(tls_h,s_39,k_25) else fail-any)) else caught-fail) in
                {1459}let v_327: bool = not-caught-fail(early_secret_20) in
                {1460}let l_72: label = (if v_327 then tls13_resumption_psk_binder_key else caught-fail) in
                {1461}let m_29: bitstring = (if v_327 then zero else caught-fail) in
                {1462}let h_63: bitstring = (if v_327 then catch-fail(hash(tls_h,m_29)) else caught-fail) in
                {1463}let v_328: bool = not-caught-fail(h_63) in
                {1464}let x_79: bitstring = (if v_328 then (l_72,h_63) else caught-fail) in
                {1465}let binder_key_15: bitstring = (if v_327 then catch-fail((if v_328 then hmac(tls_h,early_secret_20,x_79) else fail-any)) else caught-fail) in
                {1466}let v_329: bool = not-caught-fail(binder_key_15) in
                {1467}let v_330: bitstring = (if v_325 then catch-fail((if v_327 then (if v_329 then (early_secret_20,binder_key_15) else fail-any) else fail-any)) else caught-fail) in
                {1468}let v_331: bool = (not-caught-fail(v_330) && success?(1-proj-2-tuple(v_330))) in
                {1469}let kb_15: mac_key = (if v_331 then 2-proj-2-tuple(v_330) else caught-fail) in
                {1470}let es_20: bitstring = (if v_331 then 1-proj-2-tuple(v_330) else caught-fail) in
                {1471}let v_332: bitstring = (if not(v_325) then catch-fail(psk_data_6) else caught-fail) in
                {1472}let v_333: bool = (not-caught-fail(v_332) && success?(1-proj-3-tuple(v_332))) in
                {1473}let es_21: bitstring = (if v_333 then 3-proj-3-tuple(v_332) else caught-fail) in
                {1474}let psk_34: preSharedKey = (if v_333 then 2-proj-3-tuple(v_332) else caught-fail) in
                {1475}let h'_alg_3: hash_alg = (if v_333 then 1-proj-3-tuple(v_332) else caught-fail) in
                {1476}let (psk_35: preSharedKey,early_secret_21: bitstring,valid_3: bool) = (if v_325 then (if v_331 then (NoPSK,es_20,true) else fail-any) else (if v_333 then (psk_34,es_21,((h'_alg_3 = tls_h) && ((server_psk_ext(1) = psk_ext_13) && use_psk_4))) else fail-any)) in
                {1477}if valid_3 then
                (
                    {1478}let v_334: bool = use_grease_1 in
                    {1479}let gxy_9: element = (if not(v_334) then catch-fail(dh_decap_fun(g_15,gy_srv_1,i_x_3)) else caught-fail) in
                    {1480}let v_335: bool = not-caught-fail(gxy_9) in
                    {1481}new s_40[]: seed;
                    {1482}let i_gxy_2: element = (if not(v_334) then (if v_335 then gxy_9 else dh_f(s_40)) else caught-fail) in
                    {1483}let l_73: label = (if not(v_334) then tls13_derived else caught-fail) in
                    {1484}let m_30: bitstring = (if not(v_334) then catch-fail(hash(tls_h,zero)) else caught-fail) in
                    {1485}let v_336: bool = not-caught-fail(m_30) in
                    {1486}let h_64: bitstring = (if v_336 then catch-fail(hash(tls_h,m_30)) else caught-fail) in
                    {1487}let v_337: bool = not-caught-fail(h_64) in
                    {1488}let x_80: bitstring = (if v_337 then (l_73,h_64) else caught-fail) in
                    {1489}let extra_18: bitstring = (if not(v_334) then catch-fail((if v_336 then (if v_337 then hmac(tls_h,early_secret_21,x_80) else fail-any) else fail-any)) else caught-fail) in
                    {1490}let v_338: bool = not-caught-fail(extra_18) in
                    {1491}let i_handshake_secret_2: bitstring = (if not(v_334) then catch-fail((if v_338 then hmac(tls_h,extra_18,i_gxy_2) else fail-any)) else caught-fail) in
                    {1492}let v_339: bool = not-caught-fail(i_handshake_secret_2) in
                    {1493}let SH_ECHConf_2: msg = (if v_339 then SH(B32(sr24_2,zero8),mode_6) else caught-fail) in
                    {1494}let l_74: label = (if v_339 then ech_accept_confirmation else caught-fail) in
                    {1495}let m_31: bitstring = (if v_339 then (i_cur_log_3,SH_ECHConf_2) else caught-fail) in
                    {1496}let h_65: bitstring = (if v_339 then catch-fail(hash(tls_h,m_31)) else caught-fail) in
                    {1497}let v_340: bool = not-caught-fail(h_65) in
                    {1498}let x_81: bitstring = (if v_340 then (l_74,h_65) else caught-fail) in
                    {1499}let accept_confirmation_2: bitstring = (if v_339 then catch-fail((if v_340 then hmac(tls_h,i_handshake_secret_2,x_81) else fail-any)) else caught-fail) in
                    {1500}let v_341: bool = not-caught-fail(accept_confirmation_2) in
                    {1501}let is_accepted_1: bool = (if v_334 then false else (if v_339 then (if v_341 then (sr8_2 = crop_into_bytes8(accept_confirmation_2)) else fail-any) else fail-any)) in
                    {1502}let v_342: bool = is_accepted_1 in
                    {1503}let gxy_10: element = (if v_342 then catch-fail(dh_decap_fun(g_15,gy_srv_1,i_x_3)) else caught-fail) in
                    {1504}let v_343: bool = not-caught-fail(gxy_10) in
                    {1505}new s_41[]: seed;
                    {1506}let i_gxy_3: element = (if v_342 then (if v_343 then gxy_10 else dh_f(s_41)) else caught-fail) in
                    {1507}let l_75: label = (if v_342 then tls13_derived else caught-fail) in
                    {1508}let m_32: bitstring = (if v_342 then catch-fail(hash(tls_h,zero)) else caught-fail) in
                    {1509}let v_344: bool = not-caught-fail(m_32) in
                    {1510}let h_66: bitstring = (if v_344 then catch-fail(hash(tls_h,m_32)) else caught-fail) in
                    {1511}let v_345: bool = not-caught-fail(h_66) in
                    {1512}let x_82: bitstring = (if v_345 then (l_75,h_66) else caught-fail) in
                    {1513}let extra_19: bitstring = (if v_342 then catch-fail((if v_344 then (if v_345 then hmac(tls_h,early_secret_21,x_82) else fail-any) else fail-any)) else caught-fail) in
                    {1514}let v_346: bool = not-caught-fail(extra_19) in
                    {1515}let i_handshake_secret_3: bitstring = (if v_342 then catch-fail((if v_346 then hmac(tls_h,extra_19,i_gxy_3) else fail-any)) else caught-fail) in
                    {1516}let v_347: bool = not-caught-fail(i_handshake_secret_3) in
                    {1517}let gxy_11: element = (if not(v_342) then catch-fail(dh_decap_fun(g_15,gy_srv_1,o_x_3)) else caught-fail) in
                    {1518}let v_348: bool = not-caught-fail(gxy_11) in
                    {1519}new s_42[]: seed;
                    {1520}let o_gxy_1: element = (if not(v_342) then (if v_348 then gxy_11 else dh_f(s_42)) else caught-fail) in
                    {1521}let psk_36: preSharedKey = (if not(v_342) then NoPSK else caught-fail) in
                    {1522}let s_43: bitstring = (if not(v_342) then zero else caught-fail) in
                    {1523}let k_26: bitstring = (if not(v_342) then catch-fail(psk2b(psk_36)) else caught-fail) in
                    {1524}let v_349: bool = not-caught-fail(k_26) in
                    {1525}let early_secret_22: bitstring = (if not(v_342) then catch-fail((if v_349 then hmac(tls_h,s_43,k_26) else fail-any)) else caught-fail) in
                    {1526}let v_350: bool = not-caught-fail(early_secret_22) in
                    {1527}let l_76: label = (if v_350 then tls13_resumption_psk_binder_key else caught-fail) in
                    {1528}let m_33: bitstring = (if v_350 then zero else caught-fail) in
                    {1529}let h_67: bitstring = (if v_350 then catch-fail(hash(tls_h,m_33)) else caught-fail) in
                    {1530}let v_351: bool = not-caught-fail(h_67) in
                    {1531}let x_83: bitstring = (if v_351 then (l_76,h_67) else caught-fail) in
                    {1532}let binder_key_16: bitstring = (if v_350 then catch-fail((if v_351 then hmac(tls_h,early_secret_22,x_83) else fail-any)) else caught-fail) in
                    {1533}let v_352: bool = not-caught-fail(binder_key_16) in
                    {1534}let v_353: bitstring = (if not(v_342) then catch-fail((if v_350 then (if v_352 then (early_secret_22,binder_key_16) else fail-any) else fail-any)) else caught-fail) in
                    {1535}let v_354: bool = (not-caught-fail(v_353) && success?(1-proj-2-tuple(v_353))) in
                    {1536}let kb_16: mac_key = (if v_354 then 2-proj-2-tuple(v_353) else caught-fail) in
                    {1537}let es_22: bitstring = (if v_354 then 1-proj-2-tuple(v_353) else caught-fail) in
                    {1538}let l_77: label = (if v_354 then tls13_derived else caught-fail) in
                    {1539}let m_34: bitstring = (if v_354 then catch-fail(hash(tls_h,zero)) else caught-fail) in
                    {1540}let v_355: bool = not-caught-fail(m_34) in
                    {1541}let h_68: bitstring = (if v_355 then catch-fail(hash(tls_h,m_34)) else caught-fail) in
                    {1542}let v_356: bool = not-caught-fail(h_68) in
                    {1543}let x_84: bitstring = (if v_356 then (l_77,h_68) else caught-fail) in
                    {1544}let extra_20: bitstring = (if v_354 then catch-fail((if v_355 then (if v_356 then hmac(tls_h,es_22,x_84) else fail-any) else fail-any)) else caught-fail) in
                    {1545}let v_357: bool = not-caught-fail(extra_20) in
                    {1546}let (cr_14: bytes32,handshake_secret_4: bitstring,s_dom_14: domain,cur_log_10: bitstring) = (if v_342 then (if v_347 then (i_cr_3,i_handshake_secret_3,i_dom_1,(i_cur_log_3,server_hello_3)) else fail-any) else (if v_354 then (o_cr_3,(if v_357 then hmac(tls_h,extra_20,o_gxy_1) else fail-any),o_dom_6,(o_cur_log_1,server_hello_3)) else fail-any)) in
                    {1547}let l_78: label = tls13_derived in
                    {1548}let m_35: bitstring = catch-fail(hash(tls_h,zero)) in
                    {1549}let v_358: bool = not-caught-fail(m_35) in
                    {1550}let h_69: bitstring = (if v_358 then catch-fail(hash(tls_h,m_35)) else caught-fail) in
                    {1551}let v_359: bool = not-caught-fail(h_69) in
                    {1552}let x_85: bitstring = (if v_359 then (l_78,h_69) else caught-fail) in
                    {1553}let extra_21: bitstring = catch-fail((if v_358 then (if v_359 then hmac(tls_h,handshake_secret_4,x_85) else fail-any) else fail-any)) in
                    {1554}let v_360: bool = not-caught-fail(extra_21) in
                    {1555}let k_27: bitstring = (if v_360 then zero else caught-fail) in
                    {1556}let master_secret_15: bitstring = (if v_360 then catch-fail(hmac(tls_h,handshake_secret_4,k_27)) else caught-fail) in
                    {1557}let v_361: bool = not-caught-fail(master_secret_15) in
                    {1558}let l_79: label = (if v_361 then tls13_client_handshake_traffic_secret else caught-fail) in
                    {1559}let h_70: bitstring = (if v_361 then catch-fail(hash(tls_h,cur_log_10)) else caught-fail) in
                    {1560}let v_362: bool = not-caught-fail(h_70) in
                    {1561}let x_86: bitstring = (if v_362 then (l_79,h_70) else caught-fail) in
                    {1562}let client_hts_4: bitstring = (if v_361 then catch-fail((if v_362 then hmac(tls_h,handshake_secret_4,x_86) else fail-any)) else caught-fail) in
                    {1563}let v_363: bool = not-caught-fail(client_hts_4) in
                    {1564}let l_80: label = (if v_363 then tls13_server_handshake_traffic_secret else caught-fail) in
                    {1565}let h_71: bitstring = (if v_363 then catch-fail(hash(tls_h,cur_log_10)) else caught-fail) in
                    {1566}let v_364: bool = not-caught-fail(h_71) in
                    {1567}let x_87: bitstring = (if v_364 then (l_80,h_71) else caught-fail) in
                    {1568}let server_hts_4: bitstring = (if v_363 then catch-fail((if v_364 then hmac(tls_h,handshake_secret_4,x_87) else fail-any)) else caught-fail) in
                    {1569}let v_365: bool = not-caught-fail(server_hts_4) in
                    {1570}let l_81: label = (if v_365 then tls13_key else caught-fail) in
                    {1571}let h_72: bitstring = (if v_365 then zero else caught-fail) in
                    {1572}let x_88: bitstring = (if v_365 then (l_81,h_72) else caught-fail) in
                    {1573}let client_wkh_4: bitstring = (if v_365 then catch-fail(hmac(tls_h,client_hts_4,x_88)) else caught-fail) in
                    {1574}let v_366: bool = not-caught-fail(client_wkh_4) in
                    {1575}let l_82: label = (if v_366 then tls13_key else caught-fail) in
                    {1576}let h_73: bitstring = (if v_366 then zero else caught-fail) in
                    {1577}let x_89: bitstring = (if v_366 then (l_82,h_73) else caught-fail) in
                    {1578}let server_wkh_4: bitstring = (if v_366 then catch-fail(hmac(tls_h,server_hts_4,x_89)) else caught-fail) in
                    {1579}let v_367: bool = not-caught-fail(server_wkh_4) in
                    {1580}let l_83: label = (if v_367 then tls13_finished else caught-fail) in
                    {1581}let h_74: bitstring = (if v_367 then zero else caught-fail) in
                    {1582}let x_90: bitstring = (if v_367 then (l_83,h_74) else caught-fail) in
                    {1583}let client_fk_4: bitstring = (if v_367 then catch-fail(hmac(tls_h,client_hts_4,x_90)) else caught-fail) in
                    {1584}let v_368: bool = not-caught-fail(client_fk_4) in
                    {1585}let l_84: label = (if v_368 then tls13_finished else caught-fail) in
                    {1586}let h_75: bitstring = (if v_368 then zero else caught-fail) in
                    {1587}let x_91: bitstring = (if v_368 then (l_84,h_75) else caught-fail) in
                    {1588}let server_fk_4: bitstring = (if v_368 then catch-fail(hmac(tls_h,server_hts_4,x_91)) else caught-fail) in
                    {1589}let v_369: bool = not-caught-fail(server_fk_4) in
                    {1590}let (master_secret_16: bitstring,chk_11: aead_key,shk_11: aead_key,cfin_11: mac_key,sfin_11: mac_key) = (if v_360 then (if v_361 then (if v_363 then (if v_365 then (if v_366 then (if v_367 then (if v_368 then (if v_369 then (master_secret_15,client_wkh_4,server_wkh_4,client_fk_4,server_fk_4) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                    {1591}event SanityClientSH(id_client_10,cr_14,B32(sr24_2,sr8_2),c_dom_7,s_dom_14,handshake_secret_4,psk_35,cur_log_10);
                    {1592}if (is_accepted_1 || (psk_ext_13 = empty_psk_ext)) then
                    (
                        {1593}let sr_14: bytes32 = B32(sr24_2,sr8_2) in
                        {1594}in(io, enc_ee_msg_3: bitstring);
                        {1595}let ee_msg_4: msg = aead_dec(tls_a,shk_11,zero,zero,enc_ee_msg_3) in
                        {1596}let EE(x_92: bitstring) = ee_msg_4 in
                        {1597}let v_370: bool = not(is_accepted_1) in
                        {1598}let v_371: bitstring = (if v_370 then catch-fail(x_92) else caught-fail) in
                        {1599}let v_372: bool = (not-caught-fail(v_371) && success?(1-proj-server_ECH(v_371))) in
                        {1600}let ech_conf_4: echConfig = (if v_372 then 1-proj-server_ECH(v_371) else caught-fail) in
                        {1601}let update_ech_conf_1: bitstring = (if v_370 then (if v_372 then () else ()) else ()) in
                        {1602}let cur_log2_10: bitstring = (cur_log_10,ee_msg_4) in
                        {1603}out(ch_client_after_EE, (id_client_10,cr_14,sr_14,tls_h,tls_a,c_dom_7,s_dom_14,psk_35,master_secret_16,chk_11,shk_11,cfin_11,sfin_11,cur_log2_10))
                    )
                    else
                        {1604}out(io, illegal_parameter)
                )
                else
                    {1605}out(io, illegal_parameter)
            )
            else
                {1606}out(io, illegal_parameter)
    )
    else
        {1607}out(io, unexpected_message)
)

--  Biprocess 1 (that is, biprocess 0, with let moved downwards):
{1}let tls_h: hash_alg = id_hash(StrongHash,1) in
(
    {7}!
    {8}in(ch_client_CFIN, (id_client: idProc,cr: bytes32,sr: bytes32,h_alg: hash_alg,a_alg: aead_alg,psk: preSharedKey,s_pkey: pubkey,c_pkey: pubkey,master_secret: bitstring,chk: aead_key,shk: aead_key,cfin: mac_key,sfin: mac_key,cur_log: bitstring));
    {10}let h: bitstring = catch-fail(hash(h_alg,cur_log)) in
    {11}let v: bool = not-caught-fail(h) in
    {9}let l: label = tls13_client_application_traffic_secret in
    {12}let x: bitstring = (if v then (l,h) else caught-fail) in
    {13}let client_ats: bitstring = catch-fail((if v then hmac(h_alg,master_secret,x) else fail-any)) in
    {14}let v_1: bool = not-caught-fail(client_ats) in
    {16}let h_1: bitstring = (if v_1 then catch-fail(hash(h_alg,cur_log)) else caught-fail) in
    {17}let v_2: bool = not-caught-fail(h_1) in
    {15}let l_1: label = (if v_1 then tls13_server_application_traffic_secret else caught-fail) in
    {18}let x_1: bitstring = (if v_2 then (l_1,h_1) else caught-fail) in
    {19}let server_ats: bitstring = (if v_1 then catch-fail((if v_2 then hmac(h_alg,master_secret,x_1) else fail-any)) else caught-fail) in
    {20}let v_3: bool = not-caught-fail(server_ats) in
    {22}let h_2: bitstring = (if v_3 then catch-fail(hash(h_alg,cur_log)) else caught-fail) in
    {23}let v_4: bool = not-caught-fail(h_2) in
    {21}let l_2: label = (if v_3 then tls13_exporter_master_secret else caught-fail) in
    {24}let x_2: bitstring = (if v_4 then (l_2,h_2) else caught-fail) in
    {25}let ems: bitstring = (if v_3 then catch-fail((if v_4 then hmac(h_alg,master_secret,x_2) else fail-any)) else caught-fail) in
    {26}let v_5: bool = not-caught-fail(ems) in
    {28}let h_3: bitstring = (if v_5 then zero else caught-fail) in
    {27}let l_3: label = (if v_5 then tls13_key else caught-fail) in
    {29}let x_3: bitstring = (if v_5 then (l_3,h_3) else caught-fail) in
    {30}let client_wkad: bitstring = (if v_5 then catch-fail(hmac(h_alg,client_ats,x_3)) else caught-fail) in
    {31}let v_6: bool = not-caught-fail(client_wkad) in
    {33}let h_4: bitstring = (if v_6 then zero else caught-fail) in
    {32}let l_4: label = (if v_6 then tls13_key else caught-fail) in
    {34}let x_4: bitstring = (if v_6 then (l_4,h_4) else caught-fail) in
    {35}let server_wkad: bitstring = (if v_6 then catch-fail(hmac(h_alg,server_ats,x_4)) else caught-fail) in
    {36}let v_7: bool = not-caught-fail(server_wkad) in
    {37}let (cak: aead_key,sak: aead_key,ems_1: bitstring) = (if v_1 then (if v_3 then (if v_5 then (if v_6 then (if v_7 then (client_wkad,server_wkad,ems) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {38}let client_hash_msg: bitstring = hmac(h_alg,cfin,cur_log) in
    {39}let client_finished_msg: msg = FIN(client_hash_msg) in
    {40}let cur_log': bitstring = (cur_log,client_finished_msg) in
    {42}let h_5: bitstring = catch-fail(hash(h_alg,cur_log')) in
    {43}let v_8: bool = not-caught-fail(h_5) in
    {41}let l_5: label = tls13_resumption_master_secret in
    {44}let x_5: bitstring = (if v_8 then (l_5,h_5) else caught-fail) in
    {45}let rms: bitstring = (if v_8 then hmac(h_alg,master_secret,x_5) else fail-any) in
    {46}let enc_client_finished_msg: bitstring = aead_enc(a_alg,chk,zero,zero,client_finished_msg) in
    {47}out(io, enc_client_finished_msg);
    {48}event SanityClientCFIN(id_client,cr,sr,psk,master_secret,chk,shk,cfin,sfin,s_pkey,c_pkey,cak,sak,ems_1,rms,cur_log')
) | (
    {49}!
    {50}in(ch_client_FIN, (id_client_1: idProc,cr_1: bytes32,sr_1: bytes32,h_alg_1: hash_alg,a_alg_1: aead_alg,c_dom: domain,psk_1: preSharedKey,cert_req: bool,s_pkey_1: pubkey,master_secret_1: bitstring,chk_1: aead_key,shk_1: aead_key,cfin_1: mac_key,sfin_1: mac_key,cur_log_1: bitstring));
    {51}new st[]: bitstring;
    {52}event PreciseMess(ch_client_FIN,id_client_1,st,master_secret_1);
    {53}in(io, enc_finished_msg: bitstring);
    {54}let finished_msg: msg = aead_dec(a_alg_1,shk_1,zero,zero,enc_finished_msg) in
    (
        {55}let FIN(hash_msg: bitstring) = finished_msg in
        (
            {56}if (hash_msg = hmac(h_alg_1,sfin_1,cur_log_1)) then
            {57}let cur_log2: bitstring = (cur_log_1,finished_msg) in
            {58}if cert_req then
            (
                {70}get long_term_keys(c_dom': domain,sk: privkey,c_pkey_1: pubkey,crt: certificate) in
                {59}event Selected_lgt(c_dom',c_dom,sk,c_pkey_1,crt);
                {60}let certificate_msg: msg = CRT(zero,crt) in
                {61}let encrypted_certificate_msg: bitstring = aead_enc(a_alg_1,chk_1,zero,zero,certificate_msg) in
                {62}out(io, encrypted_certificate_msg);
                {63}let cur_log2_1: bitstring = (cur_log2,certificate_msg) in
                {64}let signed_log: bitstring = sign(sk,hash(h_alg_1,cur_log2_1)) in
                {65}let certificate_verify_msg: msg = CV(signed_log) in
                {66}let encrypted_certificate_verify_msg: bitstring = aead_enc(a_alg_1,chk_1,zero,zero,certificate_verify_msg) in
                {67}out(io, encrypted_certificate_verify_msg);
                {68}let cur_log3: bitstring = (cur_log2_1,certificate_verify_msg) in
                {69}out(ch_client_CFIN, (id_client_1,cr_1,sr_1,h_alg_1,a_alg_1,NoPSK,s_pkey_1,c_pkey_1,master_secret_1,chk_1,shk_1,cfin_1,sfin_1,cur_log3))
            )
            else
                {71}out(ch_client_CFIN, (id_client_1,cr_1,sr_1,h_alg_1,a_alg_1,psk_1,s_pkey_1,NoPubKey,master_secret_1,chk_1,shk_1,cfin_1,sfin_1,cur_log2))
        )
        else
            {72}out(io, unexpected_message)
    )
    else
        {73}out(io, bad_record_mac)
) | (
    {74}!
    {75}in(ch_client_CRT, (id_client_2: idProc,cr_2: bytes32,sr_2: bytes32,h_alg_2: hash_alg,a_alg_2: aead_alg,c_dom_1: domain,s_dom: domain,psk_2: preSharedKey,cert_req_1: bool,master_secret_2: bitstring,chk_2: aead_key,shk_2: aead_key,cfin_2: mac_key,sfin_2: mac_key,cur_log_2: bitstring,certificate_msg_1: msg));
    {76}let CRT(=zero,crt_1: certificate) = certificate_msg_1 in
    {78}in(io, enc_crt_verif_msg: bitstring);
    {79}let certificate_verify_msg_1: msg = aead_dec(a_alg_2,shk_2,zero,zero,enc_crt_verif_msg) in
    {80}let CV(signed_log_1: bitstring) = certificate_verify_msg_1 in
    {77}let cur_log2_2: bitstring = (cur_log_2,certificate_msg_1) in
    {81}if (verify(get_pkey(crt_1),hash(h_alg_2,cur_log2_2),signed_log_1) && ((get_domain(crt_1) = s_dom) && verify_cert(crt_1))) then
    {82}let s_pkey_2: pubkey = get_pkey(crt_1) in
    {83}let cur_log3_1: bitstring = (cur_log2_2,certificate_verify_msg_1) in
    {84}out(ch_client_FIN, (id_client_2,cr_2,sr_2,h_alg_2,a_alg_2,c_dom_1,psk_2,cert_req_1,s_pkey_2,master_secret_2,chk_2,shk_2,cfin_2,sfin_2,cur_log3_1))
) | (
    {85}!
    {86}in(ch_client_after_EE, (id_client_3: idProc,cr_3: bytes32,sr_3: bytes32,h_alg_3: hash_alg,a_alg_3: aead_alg,c_dom_2: domain,s_dom_1: domain,psk_3: preSharedKey,master_secret_3: bitstring,chk_3: aead_key,shk_3: aead_key,cfin_3: mac_key,sfin_3: mac_key,cur_log_3: bitstring));
    {87}new st_1[]: bitstring;
    {88}event PreciseMess(ch_client_after_EE,id_client_3,st_1,master_secret_3);
    {89}if (psk_3 = NoPSK) then
    (
        {90}in(io, enc_msg: bitstring);
        {91}let msg': msg = aead_dec(a_alg_3,shk_3,zero,zero,enc_msg) in
        {92}let CRTR(=zero) = msg' in
        (
            {94}in(io, enc_crt_msg: bitstring);
            {95}let certificate_msg_2: msg = aead_dec(a_alg_3,shk_3,zero,zero,enc_crt_msg) in
            {93}let cur_log2_3: bitstring = (cur_log_3,msg') in
            {96}out(ch_client_CRT, (id_client_3,cr_3,sr_3,h_alg_3,a_alg_3,c_dom_2,s_dom_1,psk_3,true,master_secret_3,chk_3,shk_3,cfin_3,sfin_3,cur_log2_3,certificate_msg_2))
        )
        else
            {97}let CRT(=zero,crt_2: certificate) = msg' in
                {98}out(ch_client_CRT, (id_client_3,cr_3,sr_3,h_alg_3,a_alg_3,c_dom_2,s_dom_1,psk_3,false,master_secret_3,chk_3,shk_3,cfin_3,sfin_3,cur_log_3,msg'))
            else
                {99}out(io, unexpected_message)
    )
    else
        {100}out(ch_client_FIN, (id_client_3,cr_3,sr_3,h_alg_3,a_alg_3,c_dom_2,psk_3,false,NoPubKey,master_secret_3,chk_3,shk_3,cfin_3,sfin_3,cur_log_3))
) | (
    {101}!
    {102}in(ch_server_CFIN, (id_server: idProc,cr_4: bytes32,sr_4: bytes32,h_alg_4: hash_alg,a_alg_4: aead_alg,psk_4: preSharedKey,s_pkey_3: pubkey,c_pkey_2: pubkey,master_secret_4: bitstring,chk_4: aead_key,shk_4: aead_key,cfin_4: mac_key,sfin_4: mac_key,cur_log_4: bitstring));
    {103}in(io, enc_fin: bitstring);
    {104}let fin_msg: msg = aead_dec(a_alg_4,chk_4,zero,zero,enc_fin) in
    {105}let FIN(hash_msg_1: bitstring) = fin_msg in
    {106}if (hash_msg_1 = hmac(h_alg_4,cfin_4,cur_log_4)) then
    {108}let h_6: bitstring = catch-fail(hash(h_alg_4,cur_log_4)) in
    {109}let v_9: bool = not-caught-fail(h_6) in
    {107}let l_6: label = tls13_client_application_traffic_secret in
    {110}let x_6: bitstring = (if v_9 then (l_6,h_6) else caught-fail) in
    {111}let client_ats_1: bitstring = catch-fail((if v_9 then hmac(h_alg_4,master_secret_4,x_6) else fail-any)) in
    {112}let v_10: bool = not-caught-fail(client_ats_1) in
    {114}let h_7: bitstring = (if v_10 then catch-fail(hash(h_alg_4,cur_log_4)) else caught-fail) in
    {115}let v_11: bool = not-caught-fail(h_7) in
    {113}let l_7: label = (if v_10 then tls13_server_application_traffic_secret else caught-fail) in
    {116}let x_7: bitstring = (if v_11 then (l_7,h_7) else caught-fail) in
    {117}let server_ats_1: bitstring = (if v_10 then catch-fail((if v_11 then hmac(h_alg_4,master_secret_4,x_7) else fail-any)) else caught-fail) in
    {118}let v_12: bool = not-caught-fail(server_ats_1) in
    {120}let h_8: bitstring = (if v_12 then catch-fail(hash(h_alg_4,cur_log_4)) else caught-fail) in
    {121}let v_13: bool = not-caught-fail(h_8) in
    {119}let l_8: label = (if v_12 then tls13_exporter_master_secret else caught-fail) in
    {122}let x_8: bitstring = (if v_13 then (l_8,h_8) else caught-fail) in
    {123}let ems_2: bitstring = (if v_12 then catch-fail((if v_13 then hmac(h_alg_4,master_secret_4,x_8) else fail-any)) else caught-fail) in
    {124}let v_14: bool = not-caught-fail(ems_2) in
    {126}let h_9: bitstring = (if v_14 then zero else caught-fail) in
    {125}let l_9: label = (if v_14 then tls13_key else caught-fail) in
    {127}let x_9: bitstring = (if v_14 then (l_9,h_9) else caught-fail) in
    {128}let client_wkad_1: bitstring = (if v_14 then catch-fail(hmac(h_alg_4,client_ats_1,x_9)) else caught-fail) in
    {129}let v_15: bool = not-caught-fail(client_wkad_1) in
    {131}let h_10: bitstring = (if v_15 then zero else caught-fail) in
    {130}let l_10: label = (if v_15 then tls13_key else caught-fail) in
    {132}let x_10: bitstring = (if v_15 then (l_10,h_10) else caught-fail) in
    {133}let server_wkad_1: bitstring = (if v_15 then catch-fail(hmac(h_alg_4,server_ats_1,x_10)) else caught-fail) in
    {134}let v_16: bool = not-caught-fail(server_wkad_1) in
    {135}let (cak_1: aead_key,sak_1: aead_key,ems_3: bitstring) = (if v_10 then (if v_12 then (if v_14 then (if v_15 then (if v_16 then (client_wkad_1,server_wkad_1,ems_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {136}let cur_log_CFIN: bitstring = (cur_log_4,fin_msg) in
    {138}let h_11: bitstring = catch-fail(hash(h_alg_4,cur_log_CFIN)) in
    {139}let v_17: bool = not-caught-fail(h_11) in
    {137}let l_11: label = tls13_resumption_master_secret in
    {140}let x_11: bitstring = (if v_17 then (l_11,h_11) else caught-fail) in
    {141}let rms_1: bitstring = (if v_17 then hmac(h_alg_4,master_secret_4,x_11) else fail-any) in
    {142}event SanityServerCFIN(id_server,cr_4,sr_4,psk_4,master_secret_4,chk_4,shk_4,cfin_4,sfin_4,s_pkey_3,c_pkey_2,cak_1,sak_1,ems_3,rms_1,cur_log_CFIN)
) | (
    {143}!
    {144}in(ch_server_FIN, (id_server_1: idProc,cr_5: bytes32,sr_5: bytes32,h_alg_5: hash_alg,a_alg_5: aead_alg,psk_5: preSharedKey,cert_req_2: bool,s_pkey_4: pubkey,master_secret_5: bitstring,chk_5: aead_key,shk_5: aead_key,cfin_5: mac_key,sfin_5: mac_key,cur_log_5: bitstring));
    {145}let hash_msg_2: bitstring = hmac(h_alg_5,sfin_5,cur_log_5) in
    {146}let finished_msg_1: msg = FIN(hash_msg_2) in
    {147}let enc_finished: bitstring = aead_enc(a_alg_5,shk_5,zero,zero,finished_msg_1) in
    {148}out(io, enc_finished);
    {149}let cur_log_FIN: bitstring = (cur_log_5,finished_msg_1) in
    {150}if ((psk_5 = NoPSK) && cert_req_2) then
    (
        {151}in(io, enc_cert_msg: bitstring);
        {152}let cert_msg: msg = aead_dec(a_alg_5,chk_5,zero,zero,enc_cert_msg) in
        {153}let CRT(=zero,crt_3: certificate) = cert_msg in
        {155}in(io, enc_cert_verif_msg: bitstring);
        {156}let cert_verify_msg: msg = aead_dec(a_alg_5,chk_5,zero,zero,enc_cert_verif_msg) in
        {157}let CV(signed_log_2: bitstring) = cert_verify_msg in
        {154}let cur_log_CRT: bitstring = (cur_log_FIN,cert_msg) in
        {158}if (verify(get_pkey(crt_3),hash(h_alg_5,cur_log_CRT),signed_log_2) && verify_cert(crt_3)) then
        {159}let c_pkey_3: pubkey = get_pkey(crt_3) in
        {160}let cur_log_CV: bitstring = (cur_log_CRT,cert_verify_msg) in
        {161}out(ch_server_CFIN, (id_server_1,cr_5,sr_5,h_alg_5,a_alg_5,psk_5,s_pkey_4,c_pkey_3,master_secret_5,chk_5,shk_5,cfin_5,sfin_5,cur_log_CV))
    )
    else
        {162}out(ch_server_CFIN, (id_server_1,cr_5,sr_5,h_alg_5,a_alg_5,psk_5,s_pkey_4,NoPubKey,master_secret_5,chk_5,shk_5,cfin_5,sfin_5,cur_log_FIN))
) | (
    {163}!
    {164}in(ch_server_CRT, (id_server_2: idProc,cr_6: bytes32,sr_6: bytes32,h_alg_6: hash_alg,a_alg_6: aead_alg,s_dom_2: domain,psk_6: preSharedKey,cert_req_3: bool,master_secret_6: bitstring,chk_6: aead_key,shk_6: aead_key,cfin_6: mac_key,sfin_6: mac_key,cur_log_6: bitstring));
    {165}new st_2[]: bitstring;
    {166}event PreciseMess(ch_server_CRT,id_server_2,st_2,master_secret_6);
    {178}get long_term_keys(s_dom': domain,sk_1: privkey,s_pkey_5: pubkey,crt_4: certificate) in
    {167}event Selected_lgt(s_dom',s_dom_2,sk_1,s_pkey_5,crt_4);
    {168}let certificate_msg_3: msg = CRT(zero,crt_4) in
    {169}let encrypted_certificate_msg_1: bitstring = aead_enc(a_alg_6,shk_6,zero,zero,certificate_msg_3) in
    {170}out(io, encrypted_certificate_msg_1);
    {171}let cur_log_CRT_1: bitstring = (cur_log_6,certificate_msg_3) in
    {172}let signed_log_3: bitstring = sign(sk_1,hash(h_alg_6,cur_log_CRT_1)) in
    {173}let certificate_verify_msg_2: msg = CV(signed_log_3) in
    {174}let encrypted_certificate_verify_msg_1: bitstring = aead_enc(a_alg_6,shk_6,zero,zero,certificate_verify_msg_2) in
    {175}out(io, encrypted_certificate_verify_msg_1);
    {176}let cur_log_CV_1: bitstring = (cur_log_CRT_1,certificate_verify_msg_2) in
    {177}out(ch_server_FIN, (id_server_2,cr_6,sr_6,h_alg_6,a_alg_6,psk_6,cert_req_3,s_pkey_5,master_secret_6,chk_6,shk_6,cfin_6,sfin_6,cur_log_CV_1))
) | (
    {179}!
    {180}in(ch_server_SH, (id_server_3: idProc,use_psk: bool,is_backend: bool,cert_req_4: bool,s_dom_3: domain,g: group,h_alg_7: hash_alg,a_alg_7: aead_alg,s_extra: extraExt,encrypted_ext: bitstring,client_hello: msg,cur_log_7: bitstring));
    {181}new st_3[]: bitstring;
    {182}event PreciseMess(ch_server_SH,id_server_3,st_3,client_hello);
    {183}let CH(cr_7: bytes32,offer: params) = client_hello in
    {184}let nego(=TLS13,=h_alg_7,=a_alg_7,client_kex_ext(DHE_kex(=g,gx: element)),sni_ext: sniExt,ech_ext: echExt,psk_ext: preSharedKeyExt,extra_ext: extraExt) = offer in
    (
        {185}if (not(is_backend) || (ech_ext = ech_is_inner)) then
        (
            {186}if (sni_ext = SNI(s_dom_3)) then
            (
                {187}let v_18: msg = client_hello in
                {188}let v_19: bool = (((TLS13 =nf 1-proj-nego(2-proj-CH(v_18))) && success?(1-proj-nego(2-proj-CH(v_18)))) && success?(1-proj-CH(v_18))) in
                {189}let extra_ext_1: extraExt = (if v_19 then 8-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {190}let psk_ext_1: preSharedKeyExt = (if v_19 then 7-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {191}let ech_ext_1: echExt = (if v_19 then 6-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {192}let sni_ext_1: sniExt = (if v_19 then 5-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {193}let kex_ext: keyShareExt = (if v_19 then 4-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {194}let a_alg_8: aead_alg = (if v_19 then 3-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {195}let h_alg_8: hash_alg = (if v_19 then 2-proj-nego(2-proj-CH(v_18)) else caught-fail) in
                {196}let cr_8: bytes32 = (if v_19 then 1-proj-CH(v_18) else caught-fail) in
                {197}let v_20: bitstring = (if v_19 then catch-fail((psk_ext_1,use_psk)) else caught-fail) in
                {198}let v_21: bool = (not-caught-fail(v_20) && ((success?(1-proj-client_psk_ext(1-proj-2-tuple(v_20))) && (true =nf 2-proj-2-tuple(v_20))) && success?(1-proj-2-tuple(v_20)))) in
                {199}let binders: bitstring = (if v_21 then 2-proj-client_psk_ext(1-proj-2-tuple(v_20)) else caught-fail) in
                {200}let id: identityPsk = (if v_21 then 1-proj-client_psk_ext(1-proj-2-tuple(v_20)) else caught-fail) in
                {201}let v_22: bool = (if v_21 then catch-fail(((get_receiver_psk(id) = s_dom_3) && (get_hash_psk(id) = h_alg_8))) else caught-fail) in
                {202}let psk_7: preSharedKey = (if v_22 then catch-fail(PSK(get_ipsk(id))) else caught-fail) in
                {203}let v_23: bool = not-caught-fail(psk_7) in
                {205}let k: bitstring = (if v_23 then catch-fail(psk2b(psk_7)) else caught-fail) in
                {206}let v_24: bool = not-caught-fail(k) in
                {204}let s: bitstring = (if v_23 then zero else caught-fail) in
                {207}let early_secret: bitstring = (if v_23 then catch-fail((if v_24 then hmac(h_alg_8,s,k) else fail-any)) else caught-fail) in
                {208}let v_25: bool = not-caught-fail(early_secret) in
                {210}let m: bitstring = (if v_25 then zero else caught-fail) in
                {211}let h_12: bitstring = (if v_25 then catch-fail(hash(h_alg_8,m)) else caught-fail) in
                {212}let v_26: bool = not-caught-fail(h_12) in
                {209}let l_12: label = (if v_25 then tls13_resumption_psk_binder_key else caught-fail) in
                {213}let x_12: bitstring = (if v_26 then (l_12,h_12) else caught-fail) in
                {214}let binder_key: bitstring = (if v_25 then catch-fail((if v_26 then hmac(h_alg_8,early_secret,x_12) else fail-any)) else caught-fail) in
                {215}let v_27: bool = not-caught-fail(binder_key) in
                {216}let v_28: bitstring = (if v_23 then catch-fail((if v_25 then (if v_27 then (early_secret,binder_key) else fail-any) else fail-any)) else caught-fail) in
                {217}let v_29: bool = (not-caught-fail(v_28) && success?(1-proj-2-tuple(v_28))) in
                {218}let kb: mac_key = (if v_29 then 2-proj-2-tuple(v_28) else caught-fail) in
                {219}let early_secret_1: bitstring = (if v_29 then 1-proj-2-tuple(v_28) else caught-fail) in
                {222}let psk_8: preSharedKey = (if is-false(v_22) then NoPSK else caught-fail) in
                {224}let k_1: bitstring = (if is-false(v_22) then catch-fail(psk2b(psk_8)) else caught-fail) in
                {225}let v_30: bool = not-caught-fail(k_1) in
                {223}let s_1: bitstring = (if is-false(v_22) then zero else caught-fail) in
                {226}let early_secret_2: bitstring = (if is-false(v_22) then catch-fail((if v_30 then hmac(h_alg_8,s_1,k_1) else fail-any)) else caught-fail) in
                {227}let v_31: bool = not-caught-fail(early_secret_2) in
                {229}let m_1: bitstring = (if v_31 then zero else caught-fail) in
                {230}let h_13: bitstring = (if v_31 then catch-fail(hash(h_alg_8,m_1)) else caught-fail) in
                {231}let v_32: bool = not-caught-fail(h_13) in
                {228}let l_13: label = (if v_31 then tls13_resumption_psk_binder_key else caught-fail) in
                {232}let x_13: bitstring = (if v_32 then (l_13,h_13) else caught-fail) in
                {233}let binder_key_1: bitstring = (if v_31 then catch-fail((if v_32 then hmac(h_alg_8,early_secret_2,x_13) else fail-any)) else caught-fail) in
                {234}let v_33: bool = not-caught-fail(binder_key_1) in
                {235}let v_34: bitstring = (if is-false(v_22) then catch-fail((if v_31 then (if v_33 then (early_secret_2,binder_key_1) else fail-any) else fail-any)) else caught-fail) in
                {236}let v_35: bool = (not-caught-fail(v_34) && success?(1-proj-2-tuple(v_34))) in
                {237}let kb_1: mac_key = (if v_35 then 2-proj-2-tuple(v_34) else caught-fail) in
                {238}let es: bitstring = (if v_35 then 1-proj-2-tuple(v_34) else caught-fail) in
                {239}let v_36: bool = (v_19 && not(v_21)) in
                {240}let psk_9: preSharedKey = (if v_36 then NoPSK else caught-fail) in
                {242}let k_2: bitstring = (if v_36 then catch-fail(psk2b(psk_9)) else caught-fail) in
                {243}let v_37: bool = not-caught-fail(k_2) in
                {241}let s_2: bitstring = (if v_36 then zero else caught-fail) in
                {244}let early_secret_3: bitstring = (if v_36 then catch-fail((if v_37 then hmac(h_alg_8,s_2,k_2) else fail-any)) else caught-fail) in
                {245}let v_38: bool = not-caught-fail(early_secret_3) in
                {247}let m_2: bitstring = (if v_38 then zero else caught-fail) in
                {248}let h_14: bitstring = (if v_38 then catch-fail(hash(h_alg_8,m_2)) else caught-fail) in
                {249}let v_39: bool = not-caught-fail(h_14) in
                {246}let l_14: label = (if v_38 then tls13_resumption_psk_binder_key else caught-fail) in
                {250}let x_14: bitstring = (if v_39 then (l_14,h_14) else caught-fail) in
                {251}let binder_key_2: bitstring = (if v_38 then catch-fail((if v_39 then hmac(h_alg_8,early_secret_3,x_14) else fail-any)) else caught-fail) in
                {252}let v_40: bool = not-caught-fail(binder_key_2) in
                {253}let v_41: bitstring = (if v_36 then catch-fail((if v_38 then (if v_40 then (early_secret_3,binder_key_2) else fail-any) else fail-any)) else caught-fail) in
                {254}let v_42: bool = (not-caught-fail(v_41) && success?(1-proj-2-tuple(v_41))) in
                {255}let kb_2: mac_key = (if v_42 then 2-proj-2-tuple(v_41) else caught-fail) in
                {256}let es_1: bitstring = (if v_42 then 1-proj-2-tuple(v_41) else caught-fail) in
                {220}let offer_1: params = (if v_29 then nego(TLS13,h_alg_8,a_alg_8,kex_ext,sni_ext_1,ech_ext_1,trunc_client_psk_ext(id),extra_ext_1) else caught-fail) in
                {221}let cur_log'_1: bitstring = (if v_29 then (cur_log_7,CH(cr_8,offer_1)) else caught-fail) in
                {257}let (early_secret_4: bitstring,s_psk_ext: preSharedKeyExt,psk_10: preSharedKey) = (if v_19 then (if v_21 then (if undo-catch-fail(v_22) then (if v_23 then (if v_29 then (if (binders = hmac(h_alg_8,kb,cur_log'_1)) then (early_secret_1,server_psk_ext(1),psk_7) else fail-any) else fail-any) else fail-any) else (if v_35 then (es,empty_psk_ext,NoPSK) else fail-any)) else (if v_42 then (es_1,empty_psk_ext,NoPSK) else fail-any)) else fail-any) in
                {258}let cur_log_CH: bitstring = (cur_log_7,client_hello) in
                {259}event SanityServerCH(id_server_3,is_backend,cr_7,s_dom_3,psk_10,cur_log_CH);
                {260}new s_3[]: seed;
                {261}let (gxy: element,gy: element) = (dh_xy(s_3,client_hello),dh_encap_fun(g,gx,dh_xy(s_3,client_hello))) in
                {263}let m_3: bitstring = catch-fail(hash(h_alg_7,zero)) in
                {264}let v_43: bool = not-caught-fail(m_3) in
                {265}let h_15: bitstring = (if v_43 then catch-fail(hash(h_alg_7,m_3)) else caught-fail) in
                {266}let v_44: bool = not-caught-fail(h_15) in
                {262}let l_15: label = tls13_derived in
                {267}let x_15: bitstring = (if v_44 then (l_15,h_15) else caught-fail) in
                {268}let extra: bitstring = catch-fail((if v_43 then (if v_44 then hmac(h_alg_7,early_secret_4,x_15) else fail-any) else fail-any)) in
                {269}let v_45: bool = not-caught-fail(extra) in
                {270}let handshake_secret: bitstring = (if v_45 then hmac(h_alg_7,extra,gxy) else fail-any) in
                {273}new sr24[]: bytes24;
                {283}new rand24[]: bytes24;
                {284}new rand8[]: bytes8;
                {272}let v_46: bool = is_backend in
                {271}let s_offer: params = nego(TLS13,h_alg_7,a_alg_7,server_kex_ext(DHE_kex(g,gy)),empty_sni_ext,empty_ech_ext,s_psk_ext,s_extra) in
                {274}let SH_ECHConf: msg = (if v_46 then SH(B32(sr24,zero8),s_offer) else caught-fail) in
                {275}let cur_log_SH_ech: bitstring = (if v_46 then (cur_log_CH,SH_ECHConf) else caught-fail) in
                {277}let h_16: bitstring = (if v_46 then catch-fail(hash(h_alg_7,cur_log_SH_ech)) else caught-fail) in
                {278}let v_47: bool = not-caught-fail(h_16) in
                {276}let l_16: label = (if v_46 then ech_accept_confirmation else caught-fail) in
                {279}let x_16: bitstring = (if v_47 then (l_16,h_16) else caught-fail) in
                {280}let accept_confirmation: bitstring = (if v_46 then catch-fail((if v_47 then hmac(h_alg_7,handshake_secret,x_16) else fail-any)) else caught-fail) in
                {281}let v_48: bool = not-caught-fail(accept_confirmation) in
                {282}let sr8: bytes8 = (if v_48 then crop_into_bytes8(accept_confirmation) else caught-fail) in
                {285}let sr_7: bytes32 = (if v_46 then (if v_48 then B32(sr24,sr8) else fail-any) else B32(rand24,rand8)) in
                {286}let server_hello: msg = SH(sr_7,s_offer) in
                {287}out(io, server_hello);
                {288}let cur_log_SH: bitstring = (cur_log_CH,server_hello) in
                {289}event SanityServerSH(id_server_3,cr_7,sr_7,s_dom_3,handshake_secret,psk_10,cur_log_SH);
                {291}let m_4: bitstring = catch-fail(hash(h_alg_7,zero)) in
                {292}let v_49: bool = not-caught-fail(m_4) in
                {293}let h_17: bitstring = (if v_49 then catch-fail(hash(h_alg_7,m_4)) else caught-fail) in
                {294}let v_50: bool = not-caught-fail(h_17) in
                {290}let l_17: label = tls13_derived in
                {295}let x_17: bitstring = (if v_50 then (l_17,h_17) else caught-fail) in
                {296}let extra_1: bitstring = catch-fail((if v_49 then (if v_50 then hmac(h_alg_7,handshake_secret,x_17) else fail-any) else fail-any)) in
                {297}let v_51: bool = not-caught-fail(extra_1) in
                {298}let k_3: bitstring = (if v_51 then zero else caught-fail) in
                {299}let master_secret_7: bitstring = (if v_51 then catch-fail(hmac(h_alg_7,handshake_secret,k_3)) else caught-fail) in
                {300}let v_52: bool = not-caught-fail(master_secret_7) in
                {302}let h_18: bitstring = (if v_52 then catch-fail(hash(h_alg_7,cur_log_SH)) else caught-fail) in
                {303}let v_53: bool = not-caught-fail(h_18) in
                {301}let l_18: label = (if v_52 then tls13_client_handshake_traffic_secret else caught-fail) in
                {304}let x_18: bitstring = (if v_53 then (l_18,h_18) else caught-fail) in
                {305}let client_hts: bitstring = (if v_52 then catch-fail((if v_53 then hmac(h_alg_7,handshake_secret,x_18) else fail-any)) else caught-fail) in
                {306}let v_54: bool = not-caught-fail(client_hts) in
                {308}let h_19: bitstring = (if v_54 then catch-fail(hash(h_alg_7,cur_log_SH)) else caught-fail) in
                {309}let v_55: bool = not-caught-fail(h_19) in
                {307}let l_19: label = (if v_54 then tls13_server_handshake_traffic_secret else caught-fail) in
                {310}let x_19: bitstring = (if v_55 then (l_19,h_19) else caught-fail) in
                {311}let server_hts: bitstring = (if v_54 then catch-fail((if v_55 then hmac(h_alg_7,handshake_secret,x_19) else fail-any)) else caught-fail) in
                {312}let v_56: bool = not-caught-fail(server_hts) in
                {314}let h_20: bitstring = (if v_56 then zero else caught-fail) in
                {313}let l_20: label = (if v_56 then tls13_key else caught-fail) in
                {315}let x_20: bitstring = (if v_56 then (l_20,h_20) else caught-fail) in
                {316}let client_wkh: bitstring = (if v_56 then catch-fail(hmac(h_alg_7,client_hts,x_20)) else caught-fail) in
                {317}let v_57: bool = not-caught-fail(client_wkh) in
                {319}let h_21: bitstring = (if v_57 then zero else caught-fail) in
                {318}let l_21: label = (if v_57 then tls13_key else caught-fail) in
                {320}let x_21: bitstring = (if v_57 then (l_21,h_21) else caught-fail) in
                {321}let server_wkh: bitstring = (if v_57 then catch-fail(hmac(h_alg_7,server_hts,x_21)) else caught-fail) in
                {322}let v_58: bool = not-caught-fail(server_wkh) in
                {324}let h_22: bitstring = (if v_58 then zero else caught-fail) in
                {323}let l_22: label = (if v_58 then tls13_finished else caught-fail) in
                {325}let x_22: bitstring = (if v_58 then (l_22,h_22) else caught-fail) in
                {326}let client_fk: bitstring = (if v_58 then catch-fail(hmac(h_alg_7,client_hts,x_22)) else caught-fail) in
                {327}let v_59: bool = not-caught-fail(client_fk) in
                {329}let h_23: bitstring = (if v_59 then zero else caught-fail) in
                {328}let l_23: label = (if v_59 then tls13_finished else caught-fail) in
                {330}let x_23: bitstring = (if v_59 then (l_23,h_23) else caught-fail) in
                {331}let server_fk: bitstring = (if v_59 then catch-fail(hmac(h_alg_7,server_hts,x_23)) else caught-fail) in
                {332}let v_60: bool = not-caught-fail(server_fk) in
                {333}let (master_secret_8: bitstring,chk_7: aead_key,shk_7: aead_key,cfin_7: mac_key,sfin_7: mac_key) = (if v_51 then (if v_52 then (if v_54 then (if v_56 then (if v_57 then (if v_58 then (if v_59 then (if v_60 then (master_secret_7,client_wkh,server_wkh,client_fk,server_fk) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                {334}let ee_msg: msg = EE(encrypted_ext) in
                {335}let enc_ee: bitstring = aead_enc(a_alg_7,shk_7,zero,zero,ee_msg) in
                {336}out(io, enc_ee);
                {337}let cur_log_EE: bitstring = (cur_log_SH,ee_msg) in
                {338}if (psk_10 = NoPSK) then
                (
                    {339}if cert_req_4 then
                    (
                        {340}let crtr_msg: msg = CRTR(zero) in
                        {341}let enc_crt: bitstring = aead_enc(a_alg_7,shk_7,zero,zero,crtr_msg) in
                        {342}out(io, enc_crt);
                        {343}let cur_log_CRTR: bitstring = (cur_log_EE,crtr_msg) in
                        {344}out(ch_server_CRT, (id_server_3,cr_7,sr_7,h_alg_7,a_alg_7,s_dom_3,psk_10,cert_req_4,master_secret_8,chk_7,shk_7,cfin_7,sfin_7,cur_log_CRTR))
                    )
                    else
                        {345}out(ch_server_CRT, (id_server_3,cr_7,sr_7,h_alg_7,a_alg_7,s_dom_3,psk_10,cert_req_4,master_secret_8,chk_7,shk_7,cfin_7,sfin_7,cur_log_EE))
                )
                else
                    {346}out(ch_server_FIN, (id_server_3,cr_7,sr_7,h_alg_7,a_alg_7,psk_10,false,NoPubKey,master_secret_8,chk_7,shk_7,cfin_7,sfin_7,cur_log_EE))
            )
            else
                {347}out(io, illegal_parameter)
        )
        else
            {348}out(io, illegal_parameter)
    )
    else
        {349}out(io, handshake_failure)
) | (
    {350}!
    {351}in(io, a: domain);
    {352}event Same(a);
    {353}new s_4: seed;
    {354}let sk_h: privkey = uc_privkey(s_4) in
    {355}event GenCert(a,pk(sk_h));
    {356}insert long_term_keys(a,sk_h,pk(sk_h),valid_cert(a,pk(sk_h)));
    {357}out(io, pk(sk_h))
) | (
    {358}!
    {359}in(io, (c_dom_3: domain,s_dom_4: domain));
    {360}event Same((c_dom_3,s_dom_4));
    {361}new s_5: seed;
    {362}let psk_11: internal_preSharedKey = uc_psk(s_5) in
    {364}event GenPsk(c_dom_3,s_dom_4,PSK(psk_11));
    {363}let id_1: identityPsk = mk_idpsk(c_dom_3,s_dom_4,tls_h,psk_11) in
    {365}insert pre_shared_keys(c_dom_3,s_dom_4,tls_h,id_1,psk_11)
) | (
    {366}!
    {367}in(io, o_dom: domain);
    {368}new id_2: configId;
    {369}new s_6[]: seed;
    {6}let ech_g: group = id_g(StrongDH,2) in
    {370}let gx_1: element = dh_pub(ech_g,dh_k(s_6)) in
    {371}let (skR: bitstring,pkR: element) = (dh_k(s_6),gx_1) in
    {5}let ech_a: aead_alg = id_aead(StrongAE,2) in
    {4}let ech_h: hash_alg = id_hash(StrongHash,2) in
    {372}let config: echConfig = ech_config(id_2,ech_g,pkR,o_dom,ech_h,ech_a) in
    {373}insert ech_configurations(config,skR);
    {374}let config_1: echConfig = config in
    {375}out(io, config_1)
) | (
    {376}!
    {380}get pre_shared_keys(c_dom1: domain,s_dom1: domain,h_alg1: hash_alg,id1: identityPsk,psk1: internal_preSharedKey) in
    {379}get pre_shared_keys(c_dom2: domain,s_dom2: domain,h_alg2: hash_alg,id2: identityPsk,psk2: internal_preSharedKey) in
    {377}insert pre_shared_keys(choice[c_dom1,c_dom2],choice[s_dom1,s_dom2],choice[h_alg1,h_alg2],choice[id1,id2],choice[psk1,psk2]);
    {378}insert pre_shared_keys(choice[c_dom2,c_dom1],choice[s_dom2,s_dom1],choice[h_alg1,h_alg2],choice[id2,id1],choice[psk2,psk1])
) | (
    {381}!
    {385}get long_term_keys(dom1: domain,sk1: privkey,pk1: pubkey,cert1: certificate) in
    {384}get long_term_keys(dom2: domain,sk2: privkey,pk2: pubkey,cert2: certificate) in
    {382}insert long_term_keys(choice[dom1,dom2],choice[sk1,sk2],choice[pk1,pk2],choice[cert1,cert2]);
    {383}insert long_term_keys(choice[dom2,dom1],choice[sk2,sk1],choice[pk2,pk1],choice[cert2,cert1])
) | (
    {386}!
    {387}in(io, a_1: domain);
    {388}event Same(a_1);
    {389}new sk_d: privkey;
    {390}out(io, (sk_d,valid_cert(a_1,pk(sk_d))))
) | (
    {391}!
    {392}in(io, (c_dom_4: domain,s_dom_5: domain));
    {393}event Same((c_dom_4,s_dom_5));
    {394}new psk_d: internal_preSharedKey;
    {395}let id_3: identityPsk = mk_idpsk(c_dom_4,s_dom_5,tls_h,psk_d) in
    {396}insert pre_shared_keys(c_dom_4,s_dom_5,tls_h,id_3,psk_d);
    {397}out(io, id_3)
) | (
    {3}let tls_g: group = id_g(StrongDH,1) in
    {2}let tls_a: aead_alg = id_aead(StrongAE,1) in
    (
        {398}!
        {399}in(io, use_psk_1: bool);
        {401}in(io, (c_dom_5: domain,s_dom_6: domain));
        {400}let send_kex: bool = true in
        {402}event Same((use_psk_1,send_kex,c_dom_5,s_dom_6));
        {404}new id_client_4[]: idProc;
        {405}event SanityClient(id_client_4,false,false,use_psk_1,send_kex);
        {407}new rand24_1[]: bytes24;
        {408}new rand8_1[]: bytes8;
        {410}new s_7[]: seed;
        {411}let gx_2: element = dh_pub(tls_g,dh_k(s_7)) in
        {412}let v_61: bitstring = (dh_k(s_7),gx_2) in
        {413}let v_62: bool = success?(1-proj-2-tuple(v_61)) in
        {414}let gx_3: element = (if v_62 then 2-proj-2-tuple(v_61) else caught-fail) in
        {415}let x_24: bitstring = (if v_62 then 1-proj-2-tuple(v_61) else caught-fail) in
        {416}let kex: kex_alg = (if v_62 then (if send_kex then DHE_kex(tls_g,gx_3) else DHE_group(tls_g)) else caught-fail) in
        {417}let (kex_ext_1: keyShareExt,kex_data: bitstring) = (if v_62 then (client_kex_ext(kex),(x_24,tls_g,send_kex)) else fail-any) in
        {738}get pre_shared_keys(c_dom'_1: domain,s_dom'_1: domain,=tls_h,id_4: identityPsk,internal_psk: internal_preSharedKey) in
        {419}event Selected_psk(c_dom_5,c_dom'_1,s_dom_6,s_dom'_1,id_4,internal_psk);
        {420}let v_63: bool = use_psk_1 in
        {421}let psk_12: preSharedKey = (if v_63 then PSK(internal_psk) else caught-fail) in
        {425}let k_4: bitstring = (if v_63 then catch-fail(psk2b(psk_12)) else caught-fail) in
        {426}let v_64: bool = not-caught-fail(k_4) in
        {424}let s_8: bitstring = (if v_63 then zero else caught-fail) in
        {427}let early_secret_5: bitstring = (if v_63 then catch-fail((if v_64 then hmac(tls_h,s_8,k_4) else fail-any)) else caught-fail) in
        {428}let v_65: bool = not-caught-fail(early_secret_5) in
        {430}let m_5: bitstring = (if v_65 then zero else caught-fail) in
        {431}let h_24: bitstring = (if v_65 then catch-fail(hash(tls_h,m_5)) else caught-fail) in
        {432}let v_66: bool = not-caught-fail(h_24) in
        {429}let l_24: label = (if v_65 then tls13_resumption_psk_binder_key else caught-fail) in
        {433}let x_25: bitstring = (if v_66 then (l_24,h_24) else caught-fail) in
        {434}let binder_key_3: bitstring = (if v_65 then catch-fail((if v_66 then hmac(tls_h,early_secret_5,x_25) else fail-any)) else caught-fail) in
        {435}let v_67: bool = not-caught-fail(binder_key_3) in
        {436}let v_68: bitstring = (if v_63 then catch-fail((if v_65 then (if v_67 then (early_secret_5,binder_key_3) else fail-any) else fail-any)) else caught-fail) in
        {437}let v_69: bool = (not-caught-fail(v_68) && success?(1-proj-2-tuple(v_68))) in
        {438}let kb_3: mac_key = (if v_69 then 2-proj-2-tuple(v_68) else caught-fail) in
        {439}let es_2: bitstring = (if v_69 then 1-proj-2-tuple(v_68) else caught-fail) in
        {442}let psk_13: preSharedKey = (if not(v_63) then NoPSK else caught-fail) in
        {444}let k_5: bitstring = (if not(v_63) then catch-fail(psk2b(psk_13)) else caught-fail) in
        {445}let v_71: bool = not-caught-fail(k_5) in
        {443}let s_9: bitstring = (if not(v_63) then zero else caught-fail) in
        {446}let early_secret_6: bitstring = (if not(v_63) then catch-fail((if v_71 then hmac(tls_h,s_9,k_5) else fail-any)) else caught-fail) in
        {447}let v_72: bool = not-caught-fail(early_secret_6) in
        {449}let m_6: bitstring = (if v_72 then zero else caught-fail) in
        {450}let h_25: bitstring = (if v_72 then catch-fail(hash(tls_h,m_6)) else caught-fail) in
        {451}let v_73: bool = not-caught-fail(h_25) in
        {448}let l_25: label = (if v_72 then tls13_resumption_psk_binder_key else caught-fail) in
        {452}let x_26: bitstring = (if v_73 then (l_25,h_25) else caught-fail) in
        {453}let binder_key_4: bitstring = (if v_72 then catch-fail((if v_73 then hmac(tls_h,early_secret_6,x_26) else fail-any)) else caught-fail) in
        {454}let v_74: bool = not-caught-fail(binder_key_4) in
        {455}let v_75: bitstring = (if not(v_63) then catch-fail((if v_72 then (if v_74 then (early_secret_6,binder_key_4) else fail-any) else fail-any)) else caught-fail) in
        {456}let v_76: bool = (not-caught-fail(v_75) && success?(1-proj-2-tuple(v_75))) in
        {457}let kb_4: mac_key = (if v_76 then 2-proj-2-tuple(v_75) else caught-fail) in
        {458}let es_3: bitstring = (if v_76 then 1-proj-2-tuple(v_75) else caught-fail) in
        {418}let ech_ext_2: echExt = empty_ech_ext in
        {403}let extra_2: extraExt = empty_extra_ext in
        {422}let offer_2: params = (if v_63 then nego(TLS13,tls_h,tls_a,kex_ext_1,SNI(s_dom_6),ech_ext_2,trunc_client_psk_ext(id_4),extra_2) else caught-fail) in
        {409}let cr_9: bytes32 = B32(rand24_1,rand8_1) in
        {406}let cur_log_8: bitstring = zero in
        {423}let cur_log'_2: bitstring = (if v_63 then (cur_log_8,CH(cr_9,offer_2)) else caught-fail) in
        {440}let binders_1: bitstring = (if v_69 then catch-fail(hmac(tls_h,kb_3,cur_log'_2)) else caught-fail) in
        {441}let v_70: bool = not-caught-fail(binders_1) in
        {459}let v_77: bitstring = catch-fail((if v_63 then (if v_69 then (if v_70 then (client_psk_ext(id_4,binders_1),(tls_h,psk_12,es_2)) else fail-any) else fail-any) else (if v_76 then (empty_psk_ext,(tls_h,NoPSK,es_3)) else fail-any))) in
        {460}let v_78: bool = (not-caught-fail(v_77) && success?(1-proj-2-tuple(v_77))) in
        {461}let psk_data: bitstring = (if v_78 then 2-proj-2-tuple(v_77) else caught-fail) in
        {462}let psk_ext_2: preSharedKeyExt = (if v_78 then 1-proj-2-tuple(v_77) else caught-fail) in
        {463}let offer_3: params = (if v_78 then nego(TLS13,tls_h,tls_a,kex_ext_1,SNI(s_dom_6),empty_ech_ext,psk_ext_2,extra_2) else caught-fail) in
        {464}let (client_hello_1: msg,cr_10: bytes32,kex_ext_2: keyShareExt,kex_data_1: bitstring,psk_data_1: bitstring) = (if v_78 then (CH(cr_9,offer_3),cr_9,kex_ext_1,kex_data,psk_data) else fail-any) in
        {465}out(io, client_hello_1);
        {467}let (=tls_h,psk_14: preSharedKey,es_4: bitstring) = psk_data_1 in
        {466}let cur_log2_4: bitstring = (cur_log_8,client_hello_1) in
        {468}event SanityClientCH(id_client_4,zero32,cr_10,c_dom_5,s_dom_6,psk_14,cur_log2_4);
        {469}in(io, server_hello_1: msg);
        {470}let SH(sr_8: bytes32,mode: params) = server_hello_1 in
        (
            {471}if (sr_8 = rand_HelloRetryRequest) then
            (
                {472}let (nego(=TLS13,=tls_h,=tls_a,hrr_kex_ext(=tls_g),=empty_sni_ext,=empty_ech_ext,=empty_psk_ext,srv_extra: extraExt),=false) = (mode,send_kex) in
                (
                    {473}let cur_log3_2: bitstring = (cur_log2_4,server_hello_1) in
                    {474}event SanityClientHRR(id_client_4,cr_10,c_dom_5,s_dom_6,cur_log3_2);
                    {476}new rand24_2[]: bytes24;
                    {477}new rand8_2[]: bytes8;
                    {479}new s_10[]: seed;
                    {480}let gx_4: element = dh_pub(tls_g,dh_k(s_10)) in
                    {481}let v_79: bitstring = (dh_k(s_10),gx_4) in
                    {482}let v_80: bool = success?(1-proj-2-tuple(v_79)) in
                    {483}let gx_5: element = (if v_80 then 2-proj-2-tuple(v_79) else caught-fail) in
                    {484}let x_27: bitstring = (if v_80 then 1-proj-2-tuple(v_79) else caught-fail) in
                    {475}let send_kex_1: bool = true in
                    {485}let kex_1: kex_alg = (if v_80 then (if send_kex_1 then DHE_kex(tls_g,gx_5) else DHE_group(tls_g)) else caught-fail) in
                    {486}let (kex_ext_3: keyShareExt,kex_data_2: bitstring) = (if v_80 then (client_kex_ext(kex_1),(x_27,tls_g,send_kex_1)) else fail-any) in
                    {638}get pre_shared_keys(c_dom'_2: domain,s_dom'_2: domain,=tls_h,id_5: identityPsk,internal_psk_1: internal_preSharedKey) in
                    {488}event Selected_psk(c_dom_5,c_dom'_2,s_dom_6,s_dom'_2,id_5,internal_psk_1);
                    {489}let v_81: bool = use_psk_1 in
                    {490}let psk_15: preSharedKey = (if v_81 then PSK(internal_psk_1) else caught-fail) in
                    {494}let k_6: bitstring = (if v_81 then catch-fail(psk2b(psk_15)) else caught-fail) in
                    {495}let v_82: bool = not-caught-fail(k_6) in
                    {493}let s_11: bitstring = (if v_81 then zero else caught-fail) in
                    {496}let early_secret_7: bitstring = (if v_81 then catch-fail((if v_82 then hmac(tls_h,s_11,k_6) else fail-any)) else caught-fail) in
                    {497}let v_83: bool = not-caught-fail(early_secret_7) in
                    {499}let m_7: bitstring = (if v_83 then zero else caught-fail) in
                    {500}let h_26: bitstring = (if v_83 then catch-fail(hash(tls_h,m_7)) else caught-fail) in
                    {501}let v_84: bool = not-caught-fail(h_26) in
                    {498}let l_26: label = (if v_83 then tls13_resumption_psk_binder_key else caught-fail) in
                    {502}let x_28: bitstring = (if v_84 then (l_26,h_26) else caught-fail) in
                    {503}let binder_key_5: bitstring = (if v_83 then catch-fail((if v_84 then hmac(tls_h,early_secret_7,x_28) else fail-any)) else caught-fail) in
                    {504}let v_85: bool = not-caught-fail(binder_key_5) in
                    {505}let v_86: bitstring = (if v_81 then catch-fail((if v_83 then (if v_85 then (early_secret_7,binder_key_5) else fail-any) else fail-any)) else caught-fail) in
                    {506}let v_87: bool = (not-caught-fail(v_86) && success?(1-proj-2-tuple(v_86))) in
                    {507}let kb_5: mac_key = (if v_87 then 2-proj-2-tuple(v_86) else caught-fail) in
                    {508}let es_5: bitstring = (if v_87 then 1-proj-2-tuple(v_86) else caught-fail) in
                    {511}let psk_16: preSharedKey = (if not(v_81) then NoPSK else caught-fail) in
                    {513}let k_7: bitstring = (if not(v_81) then catch-fail(psk2b(psk_16)) else caught-fail) in
                    {514}let v_89: bool = not-caught-fail(k_7) in
                    {512}let s_12: bitstring = (if not(v_81) then zero else caught-fail) in
                    {515}let early_secret_8: bitstring = (if not(v_81) then catch-fail((if v_89 then hmac(tls_h,s_12,k_7) else fail-any)) else caught-fail) in
                    {516}let v_90: bool = not-caught-fail(early_secret_8) in
                    {518}let m_8: bitstring = (if v_90 then zero else caught-fail) in
                    {519}let h_27: bitstring = (if v_90 then catch-fail(hash(tls_h,m_8)) else caught-fail) in
                    {520}let v_91: bool = not-caught-fail(h_27) in
                    {517}let l_27: label = (if v_90 then tls13_resumption_psk_binder_key else caught-fail) in
                    {521}let x_29: bitstring = (if v_91 then (l_27,h_27) else caught-fail) in
                    {522}let binder_key_6: bitstring = (if v_90 then catch-fail((if v_91 then hmac(tls_h,early_secret_8,x_29) else fail-any)) else caught-fail) in
                    {523}let v_92: bool = not-caught-fail(binder_key_6) in
                    {524}let v_93: bitstring = (if not(v_81) then catch-fail((if v_90 then (if v_92 then (early_secret_8,binder_key_6) else fail-any) else fail-any)) else caught-fail) in
                    {525}let v_94: bool = (not-caught-fail(v_93) && success?(1-proj-2-tuple(v_93))) in
                    {526}let kb_6: mac_key = (if v_94 then 2-proj-2-tuple(v_93) else caught-fail) in
                    {527}let es_6: bitstring = (if v_94 then 1-proj-2-tuple(v_93) else caught-fail) in
                    {487}let ech_ext_3: echExt = empty_ech_ext in
                    {491}let offer_4: params = (if v_81 then nego(TLS13,tls_h,tls_a,kex_ext_3,SNI(s_dom_6),ech_ext_3,trunc_client_psk_ext(id_5),extra_2) else caught-fail) in
                    {478}let cr_11: bytes32 = B32(rand24_2,rand8_2) in
                    {492}let cur_log'_3: bitstring = (if v_81 then (cur_log3_2,CH(cr_11,offer_4)) else caught-fail) in
                    {509}let binders_2: bitstring = (if v_87 then catch-fail(hmac(tls_h,kb_5,cur_log'_3)) else caught-fail) in
                    {510}let v_88: bool = not-caught-fail(binders_2) in
                    {528}let v_95: bitstring = catch-fail((if v_81 then (if v_87 then (if v_88 then (client_psk_ext(id_5,binders_2),(tls_h,psk_15,es_5)) else fail-any) else fail-any) else (if v_94 then (empty_psk_ext,(tls_h,NoPSK,es_6)) else fail-any))) in
                    {529}let v_96: bool = (not-caught-fail(v_95) && success?(1-proj-2-tuple(v_95))) in
                    {530}let psk_data_2: bitstring = (if v_96 then 2-proj-2-tuple(v_95) else caught-fail) in
                    {531}let psk_ext_3: preSharedKeyExt = (if v_96 then 1-proj-2-tuple(v_95) else caught-fail) in
                    {532}let offer_5: params = (if v_96 then nego(TLS13,tls_h,tls_a,kex_ext_3,SNI(s_dom_6),empty_ech_ext,psk_ext_3,extra_2) else caught-fail) in
                    {533}let (client_hello': msg,cr': bytes32,kex_ext': keyShareExt,kex_data': bitstring,psk_data': bitstring) = (if v_96 then (CH(cr_11,offer_5),cr_11,kex_ext_3,kex_data_2,psk_data_2) else fail-any) in
                    {534}out(io, client_hello');
                    {536}let (=tls_h,psk': preSharedKey,es': bitstring) = psk_data' in
                    {535}let cur_log4: bitstring = (cur_log3_2,client_hello') in
                    {537}event SanityClientCH(id_client_4,cr_10,cr',c_dom_5,s_dom_6,psk',cur_log4);
                    {538}in(io, server_hello': msg);
                    {539}let SH(sr': bytes32,mode': params) = server_hello' in
                    (
                        {540}if (sr' = rand_HelloRetryRequest) then
                            {541}out(io, unexpected_message)
                        else
                            {543}let SH(sr_9: bytes32,mode_1: params) = server_hello' in
                            {544}let (x_30: bitstring,g_1: group,=true) = kex_data' in
                            {545}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_1,gy_1: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_4: preSharedKeyExt,extra_3: extraExt) = mode_1 in
                            (
                                {547}let v_97: bool = (psk_ext_4 = empty_psk_ext) in
                                {548}let psk_17: preSharedKey = (if v_97 then NoPSK else caught-fail) in
                                {550}let k_8: bitstring = (if v_97 then catch-fail(psk2b(psk_17)) else caught-fail) in
                                {551}let v_98: bool = not-caught-fail(k_8) in
                                {549}let s_13: bitstring = (if v_97 then zero else caught-fail) in
                                {552}let early_secret_9: bitstring = (if v_97 then catch-fail((if v_98 then hmac(tls_h,s_13,k_8) else fail-any)) else caught-fail) in
                                {553}let v_99: bool = not-caught-fail(early_secret_9) in
                                {555}let m_9: bitstring = (if v_99 then zero else caught-fail) in
                                {556}let h_28: bitstring = (if v_99 then catch-fail(hash(tls_h,m_9)) else caught-fail) in
                                {557}let v_100: bool = not-caught-fail(h_28) in
                                {554}let l_28: label = (if v_99 then tls13_resumption_psk_binder_key else caught-fail) in
                                {558}let x_31: bitstring = (if v_100 then (l_28,h_28) else caught-fail) in
                                {559}let binder_key_7: bitstring = (if v_99 then catch-fail((if v_100 then hmac(tls_h,early_secret_9,x_31) else fail-any)) else caught-fail) in
                                {560}let v_101: bool = not-caught-fail(binder_key_7) in
                                {561}let v_102: bitstring = (if v_97 then catch-fail((if v_99 then (if v_101 then (early_secret_9,binder_key_7) else fail-any) else fail-any)) else caught-fail) in
                                {562}let v_103: bool = (not-caught-fail(v_102) && success?(1-proj-2-tuple(v_102))) in
                                {563}let kb_7: mac_key = (if v_103 then 2-proj-2-tuple(v_102) else caught-fail) in
                                {564}let es_7: bitstring = (if v_103 then 1-proj-2-tuple(v_102) else caught-fail) in
                                {565}let v_104: bitstring = (if not(v_97) then catch-fail(psk_data') else caught-fail) in
                                {566}let v_105: bool = (not-caught-fail(v_104) && success?(1-proj-3-tuple(v_104))) in
                                {567}let es_8: bitstring = (if v_105 then 3-proj-3-tuple(v_104) else caught-fail) in
                                {568}let psk_18: preSharedKey = (if v_105 then 2-proj-3-tuple(v_104) else caught-fail) in
                                {569}let h'_alg: hash_alg = (if v_105 then 1-proj-3-tuple(v_104) else caught-fail) in
                                {570}let (psk_19: preSharedKey,early_secret_10: bitstring,valid: bool) = (if v_97 then (if v_103 then (NoPSK,es_7,true) else fail-any) else (if v_105 then (psk_18,es_8,((h'_alg = tls_h) && ((server_psk_ext(1) = psk_ext_4) && use_psk_1))) else fail-any)) in
                                {571}if valid then
                                (
                                    {574}new s_14[]: seed;
                                    {577}let m_10: bitstring = catch-fail(hash(tls_h,zero)) in
                                    {578}let v_107: bool = not-caught-fail(m_10) in
                                    {579}let h_29: bitstring = (if v_107 then catch-fail(hash(tls_h,m_10)) else caught-fail) in
                                    {580}let v_108: bool = not-caught-fail(h_29) in
                                    {576}let l_29: label = tls13_derived in
                                    {581}let x_32: bitstring = (if v_108 then (l_29,h_29) else caught-fail) in
                                    {582}let extra_4: bitstring = catch-fail((if v_107 then (if v_108 then hmac(tls_h,early_secret_10,x_32) else fail-any) else fail-any)) in
                                    {583}let v_109: bool = not-caught-fail(extra_4) in
                                    {572}let gxy_1: element = catch-fail(dh_decap_fun(g_1,gy_1,x_30)) in
                                    {573}let v_106: bool = not-caught-fail(gxy_1) in
                                    {575}let gxy_2: element = (if v_106 then gxy_1 else dh_f(s_14)) in
                                    {584}let handshake_secret_1: bitstring = (if v_109 then hmac(tls_h,extra_4,gxy_2) else fail-any) in
                                    {546}let cur_log2_5: bitstring = (cur_log4,server_hello') in
                                    {542}let id_client_5: idProc = id_client_4 in
                                    {585}event SanityClientSH(id_client_5,cr',sr_9,c_dom_5,s_dom_6,handshake_secret_1,psk_19,cur_log2_5);
                                    {587}let m_11: bitstring = catch-fail(hash(tls_h,zero)) in
                                    {588}let v_110: bool = not-caught-fail(m_11) in
                                    {589}let h_30: bitstring = (if v_110 then catch-fail(hash(tls_h,m_11)) else caught-fail) in
                                    {590}let v_111: bool = not-caught-fail(h_30) in
                                    {586}let l_30: label = tls13_derived in
                                    {591}let x_33: bitstring = (if v_111 then (l_30,h_30) else caught-fail) in
                                    {592}let extra_5: bitstring = catch-fail((if v_110 then (if v_111 then hmac(tls_h,handshake_secret_1,x_33) else fail-any) else fail-any)) in
                                    {593}let v_112: bool = not-caught-fail(extra_5) in
                                    {594}let k_9: bitstring = (if v_112 then zero else caught-fail) in
                                    {595}let master_secret_9: bitstring = (if v_112 then catch-fail(hmac(tls_h,handshake_secret_1,k_9)) else caught-fail) in
                                    {596}let v_113: bool = not-caught-fail(master_secret_9) in
                                    {598}let h_31: bitstring = (if v_113 then catch-fail(hash(tls_h,cur_log2_5)) else caught-fail) in
                                    {599}let v_114: bool = not-caught-fail(h_31) in
                                    {597}let l_31: label = (if v_113 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {600}let x_34: bitstring = (if v_114 then (l_31,h_31) else caught-fail) in
                                    {601}let client_hts_1: bitstring = (if v_113 then catch-fail((if v_114 then hmac(tls_h,handshake_secret_1,x_34) else fail-any)) else caught-fail) in
                                    {602}let v_115: bool = not-caught-fail(client_hts_1) in
                                    {604}let h_32: bitstring = (if v_115 then catch-fail(hash(tls_h,cur_log2_5)) else caught-fail) in
                                    {605}let v_116: bool = not-caught-fail(h_32) in
                                    {603}let l_32: label = (if v_115 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {606}let x_35: bitstring = (if v_116 then (l_32,h_32) else caught-fail) in
                                    {607}let server_hts_1: bitstring = (if v_115 then catch-fail((if v_116 then hmac(tls_h,handshake_secret_1,x_35) else fail-any)) else caught-fail) in
                                    {608}let v_117: bool = not-caught-fail(server_hts_1) in
                                    {610}let h_33: bitstring = (if v_117 then zero else caught-fail) in
                                    {609}let l_33: label = (if v_117 then tls13_key else caught-fail) in
                                    {611}let x_36: bitstring = (if v_117 then (l_33,h_33) else caught-fail) in
                                    {612}let client_wkh_1: bitstring = (if v_117 then catch-fail(hmac(tls_h,client_hts_1,x_36)) else caught-fail) in
                                    {613}let v_118: bool = not-caught-fail(client_wkh_1) in
                                    {615}let h_34: bitstring = (if v_118 then zero else caught-fail) in
                                    {614}let l_34: label = (if v_118 then tls13_key else caught-fail) in
                                    {616}let x_37: bitstring = (if v_118 then (l_34,h_34) else caught-fail) in
                                    {617}let server_wkh_1: bitstring = (if v_118 then catch-fail(hmac(tls_h,server_hts_1,x_37)) else caught-fail) in
                                    {618}let v_119: bool = not-caught-fail(server_wkh_1) in
                                    {620}let h_35: bitstring = (if v_119 then zero else caught-fail) in
                                    {619}let l_35: label = (if v_119 then tls13_finished else caught-fail) in
                                    {621}let x_38: bitstring = (if v_119 then (l_35,h_35) else caught-fail) in
                                    {622}let client_fk_1: bitstring = (if v_119 then catch-fail(hmac(tls_h,client_hts_1,x_38)) else caught-fail) in
                                    {623}let v_120: bool = not-caught-fail(client_fk_1) in
                                    {625}let h_36: bitstring = (if v_120 then zero else caught-fail) in
                                    {624}let l_36: label = (if v_120 then tls13_finished else caught-fail) in
                                    {626}let x_39: bitstring = (if v_120 then (l_36,h_36) else caught-fail) in
                                    {627}let server_fk_1: bitstring = (if v_120 then catch-fail(hmac(tls_h,server_hts_1,x_39)) else caught-fail) in
                                    {628}let v_121: bool = not-caught-fail(server_fk_1) in
                                    {629}let (master_secret_10: bitstring,chk_8: aead_key,shk_8: aead_key,cfin_8: mac_key,sfin_8: mac_key) = (if v_112 then (if v_113 then (if v_115 then (if v_117 then (if v_118 then (if v_119 then (if v_120 then (if v_121 then (master_secret_9,client_wkh_1,server_wkh_1,client_fk_1,server_fk_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {630}in(io, enc_ee_msg: bitstring);
                                    {631}let ee_msg_1: msg = aead_dec(tls_a,shk_8,zero,zero,enc_ee_msg) in
                                    {632}let EE(x_40: bitstring) = ee_msg_1 in
                                    {633}let cur_log2_6: bitstring = (cur_log2_5,ee_msg_1) in
                                    {634}out(ch_client_after_EE, (id_client_5,cr',sr_9,tls_h,tls_a,c_dom_5,s_dom_6,psk_19,master_secret_10,chk_8,shk_8,cfin_8,sfin_8,cur_log2_6))
                                )
                                else
                                    {635}out(io, illegal_parameter)
                            )
                            else
                                {636}out(io, illegal_parameter)
                    )
                    else
                        {637}out(io, unexpected_message)
                )
                else
                    {639}out(io, illegal_parameter)
            )
            else
                {640}if send_kex then
                (
                    {642}let SH(sr_10: bytes32,mode_2: params) = server_hello_1 in
                    {643}let (x_41: bitstring,g_2: group,=true) = kex_data_1 in
                    {644}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_2,gy_2: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_5: preSharedKeyExt,extra_6: extraExt) = mode_2 in
                    (
                        {646}let v_122: bool = (psk_ext_5 = empty_psk_ext) in
                        {647}let psk_20: preSharedKey = (if v_122 then NoPSK else caught-fail) in
                        {649}let k_10: bitstring = (if v_122 then catch-fail(psk2b(psk_20)) else caught-fail) in
                        {650}let v_123: bool = not-caught-fail(k_10) in
                        {648}let s_15: bitstring = (if v_122 then zero else caught-fail) in
                        {651}let early_secret_11: bitstring = (if v_122 then catch-fail((if v_123 then hmac(tls_h,s_15,k_10) else fail-any)) else caught-fail) in
                        {652}let v_124: bool = not-caught-fail(early_secret_11) in
                        {654}let m_12: bitstring = (if v_124 then zero else caught-fail) in
                        {655}let h_37: bitstring = (if v_124 then catch-fail(hash(tls_h,m_12)) else caught-fail) in
                        {656}let v_125: bool = not-caught-fail(h_37) in
                        {653}let l_37: label = (if v_124 then tls13_resumption_psk_binder_key else caught-fail) in
                        {657}let x_42: bitstring = (if v_125 then (l_37,h_37) else caught-fail) in
                        {658}let binder_key_8: bitstring = (if v_124 then catch-fail((if v_125 then hmac(tls_h,early_secret_11,x_42) else fail-any)) else caught-fail) in
                        {659}let v_126: bool = not-caught-fail(binder_key_8) in
                        {660}let v_127: bitstring = (if v_122 then catch-fail((if v_124 then (if v_126 then (early_secret_11,binder_key_8) else fail-any) else fail-any)) else caught-fail) in
                        {661}let v_128: bool = (not-caught-fail(v_127) && success?(1-proj-2-tuple(v_127))) in
                        {662}let kb_8: mac_key = (if v_128 then 2-proj-2-tuple(v_127) else caught-fail) in
                        {663}let es_9: bitstring = (if v_128 then 1-proj-2-tuple(v_127) else caught-fail) in
                        {664}let v_129: bitstring = (if not(v_122) then catch-fail(psk_data_1) else caught-fail) in
                        {665}let v_130: bool = (not-caught-fail(v_129) && success?(1-proj-3-tuple(v_129))) in
                        {666}let es_10: bitstring = (if v_130 then 3-proj-3-tuple(v_129) else caught-fail) in
                        {667}let psk_21: preSharedKey = (if v_130 then 2-proj-3-tuple(v_129) else caught-fail) in
                        {668}let h'_alg_1: hash_alg = (if v_130 then 1-proj-3-tuple(v_129) else caught-fail) in
                        {669}let (psk_22: preSharedKey,early_secret_12: bitstring,valid_1: bool) = (if v_122 then (if v_128 then (NoPSK,es_9,true) else fail-any) else (if v_130 then (psk_21,es_10,((h'_alg_1 = tls_h) && ((server_psk_ext(1) = psk_ext_5) && use_psk_1))) else fail-any)) in
                        {670}if valid_1 then
                        (
                            {673}new s_16[]: seed;
                            {676}let m_13: bitstring = catch-fail(hash(tls_h,zero)) in
                            {677}let v_132: bool = not-caught-fail(m_13) in
                            {678}let h_38: bitstring = (if v_132 then catch-fail(hash(tls_h,m_13)) else caught-fail) in
                            {679}let v_133: bool = not-caught-fail(h_38) in
                            {675}let l_38: label = tls13_derived in
                            {680}let x_43: bitstring = (if v_133 then (l_38,h_38) else caught-fail) in
                            {681}let extra_7: bitstring = catch-fail((if v_132 then (if v_133 then hmac(tls_h,early_secret_12,x_43) else fail-any) else fail-any)) in
                            {682}let v_134: bool = not-caught-fail(extra_7) in
                            {671}let gxy_3: element = catch-fail(dh_decap_fun(g_2,gy_2,x_41)) in
                            {672}let v_131: bool = not-caught-fail(gxy_3) in
                            {674}let gxy_4: element = (if v_131 then gxy_3 else dh_f(s_16)) in
                            {683}let handshake_secret_2: bitstring = (if v_134 then hmac(tls_h,extra_7,gxy_4) else fail-any) in
                            {645}let cur_log2_7: bitstring = (cur_log2_4,server_hello_1) in
                            {641}let id_client_6: idProc = id_client_4 in
                            {684}event SanityClientSH(id_client_6,cr_10,sr_10,c_dom_5,s_dom_6,handshake_secret_2,psk_22,cur_log2_7);
                            {686}let m_14: bitstring = catch-fail(hash(tls_h,zero)) in
                            {687}let v_135: bool = not-caught-fail(m_14) in
                            {688}let h_39: bitstring = (if v_135 then catch-fail(hash(tls_h,m_14)) else caught-fail) in
                            {689}let v_136: bool = not-caught-fail(h_39) in
                            {685}let l_39: label = tls13_derived in
                            {690}let x_44: bitstring = (if v_136 then (l_39,h_39) else caught-fail) in
                            {691}let extra_8: bitstring = catch-fail((if v_135 then (if v_136 then hmac(tls_h,handshake_secret_2,x_44) else fail-any) else fail-any)) in
                            {692}let v_137: bool = not-caught-fail(extra_8) in
                            {693}let k_11: bitstring = (if v_137 then zero else caught-fail) in
                            {694}let master_secret_11: bitstring = (if v_137 then catch-fail(hmac(tls_h,handshake_secret_2,k_11)) else caught-fail) in
                            {695}let v_138: bool = not-caught-fail(master_secret_11) in
                            {697}let h_40: bitstring = (if v_138 then catch-fail(hash(tls_h,cur_log2_7)) else caught-fail) in
                            {698}let v_139: bool = not-caught-fail(h_40) in
                            {696}let l_40: label = (if v_138 then tls13_client_handshake_traffic_secret else caught-fail) in
                            {699}let x_45: bitstring = (if v_139 then (l_40,h_40) else caught-fail) in
                            {700}let client_hts_2: bitstring = (if v_138 then catch-fail((if v_139 then hmac(tls_h,handshake_secret_2,x_45) else fail-any)) else caught-fail) in
                            {701}let v_140: bool = not-caught-fail(client_hts_2) in
                            {703}let h_41: bitstring = (if v_140 then catch-fail(hash(tls_h,cur_log2_7)) else caught-fail) in
                            {704}let v_141: bool = not-caught-fail(h_41) in
                            {702}let l_41: label = (if v_140 then tls13_server_handshake_traffic_secret else caught-fail) in
                            {705}let x_46: bitstring = (if v_141 then (l_41,h_41) else caught-fail) in
                            {706}let server_hts_2: bitstring = (if v_140 then catch-fail((if v_141 then hmac(tls_h,handshake_secret_2,x_46) else fail-any)) else caught-fail) in
                            {707}let v_142: bool = not-caught-fail(server_hts_2) in
                            {709}let h_42: bitstring = (if v_142 then zero else caught-fail) in
                            {708}let l_42: label = (if v_142 then tls13_key else caught-fail) in
                            {710}let x_47: bitstring = (if v_142 then (l_42,h_42) else caught-fail) in
                            {711}let client_wkh_2: bitstring = (if v_142 then catch-fail(hmac(tls_h,client_hts_2,x_47)) else caught-fail) in
                            {712}let v_143: bool = not-caught-fail(client_wkh_2) in
                            {714}let h_43: bitstring = (if v_143 then zero else caught-fail) in
                            {713}let l_43: label = (if v_143 then tls13_key else caught-fail) in
                            {715}let x_48: bitstring = (if v_143 then (l_43,h_43) else caught-fail) in
                            {716}let server_wkh_2: bitstring = (if v_143 then catch-fail(hmac(tls_h,server_hts_2,x_48)) else caught-fail) in
                            {717}let v_144: bool = not-caught-fail(server_wkh_2) in
                            {719}let h_44: bitstring = (if v_144 then zero else caught-fail) in
                            {718}let l_44: label = (if v_144 then tls13_finished else caught-fail) in
                            {720}let x_49: bitstring = (if v_144 then (l_44,h_44) else caught-fail) in
                            {721}let client_fk_2: bitstring = (if v_144 then catch-fail(hmac(tls_h,client_hts_2,x_49)) else caught-fail) in
                            {722}let v_145: bool = not-caught-fail(client_fk_2) in
                            {724}let h_45: bitstring = (if v_145 then zero else caught-fail) in
                            {723}let l_45: label = (if v_145 then tls13_finished else caught-fail) in
                            {725}let x_50: bitstring = (if v_145 then (l_45,h_45) else caught-fail) in
                            {726}let server_fk_2: bitstring = (if v_145 then catch-fail(hmac(tls_h,server_hts_2,x_50)) else caught-fail) in
                            {727}let v_146: bool = not-caught-fail(server_fk_2) in
                            {728}let (master_secret_12: bitstring,chk_9: aead_key,shk_9: aead_key,cfin_9: mac_key,sfin_9: mac_key) = (if v_137 then (if v_138 then (if v_140 then (if v_142 then (if v_143 then (if v_144 then (if v_145 then (if v_146 then (master_secret_11,client_wkh_2,server_wkh_2,client_fk_2,server_fk_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                            {729}in(io, enc_ee_msg_1: bitstring);
                            {730}let ee_msg_2: msg = aead_dec(tls_a,shk_9,zero,zero,enc_ee_msg_1) in
                            {731}let EE(x_51: bitstring) = ee_msg_2 in
                            {732}let cur_log2_8: bitstring = (cur_log2_7,ee_msg_2) in
                            {733}out(ch_client_after_EE, (id_client_6,cr_10,sr_10,tls_h,tls_a,c_dom_5,s_dom_6,psk_22,master_secret_12,chk_9,shk_9,cfin_9,sfin_9,cur_log2_8))
                        )
                        else
                            {734}out(io, illegal_parameter)
                    )
                    else
                        {735}out(io, illegal_parameter)
                )
                else
                    {736}out(io, illegal_parameter)
        )
        else
            {737}out(io, unexpected_message)
    ) | (
        {739}!
        {741}in(io, use_psk_2: bool);
        {743}in(io, (c_dom_6: domain,cfs_dom: domain,backend_dom: domain));
        {742}let send_kex_2: bool = true in
        {740}let use_grease: bool = false in
        {744}event Same((use_grease,use_psk_2,send_kex_2,c_dom_6,cfs_dom,backend_dom));
        {1092}get ech_configurations(ech_config(id_6: configId,g_3: group,pkR_1: element,=cfs_dom,h_alg_9: hash_alg,a_alg_9: aead_alg),skR_1: bitstring) in
        {748}new id_client_7[]: idProc;
        {749}event SanityClient(id_client_7,true,use_grease,use_psk_2,send_kex_2);
        {750}if not((use_grease && use_psk_2)) then
        {752}new s_17[]: seed;
        {753}let gx_6: element = dh_pub(tls_g,dh_k(s_17)) in
        {754}let v_147: bitstring = (dh_k(s_17),gx_6) in
        {755}let v_148: bool = success?(1-proj-2-tuple(v_147)) in
        {756}let i_gx: element = (if v_148 then 2-proj-2-tuple(v_147) else caught-fail) in
        {757}let i_x: bitstring = (if v_148 then 1-proj-2-tuple(v_147) else caught-fail) in
        {758}new s_18[]: seed;
        {759}let gx_7: element = (if v_148 then dh_pub(tls_g,dh_k(s_18)) else caught-fail) in
        {760}let v_149: bitstring = (if v_148 then catch-fail((dh_k(s_18),gx_7)) else caught-fail) in
        {761}let v_150: bool = (not-caught-fail(v_149) && success?(1-proj-2-tuple(v_149))) in
        {762}let o_gx: element = (if v_150 then 2-proj-2-tuple(v_149) else caught-fail) in
        {763}let o_x: bitstring = (if v_150 then 1-proj-2-tuple(v_149) else caught-fail) in
        {764}let v_151: bitstring = (if v_150 then catch-fail((if send_kex_2 then (DHE_kex(tls_g,i_gx),DHE_kex(tls_g,o_gx)) else (DHE_group(tls_g),DHE_group(tls_g)))) else caught-fail) in
        {765}let v_152: bool = (not-caught-fail(v_151) && success?(1-proj-2-tuple(v_151))) in
        {766}let o_kex: kex_alg = (if v_152 then 2-proj-2-tuple(v_151) else caught-fail) in
        {767}let i_kex: kex_alg = (if v_152 then 1-proj-2-tuple(v_151) else caught-fail) in
        {768}let (i_kex_ext: keyShareExt,o_kex_ext: keyShareExt,kex_data_3: bitstring) = (if v_148 then (if v_150 then (if v_152 then (client_kex_ext(i_kex),client_kex_ext(o_kex),(i_x,o_x,tls_g,send_kex_2)) else fail-any) else fail-any) else fail-any) in
        {769}new rand24_3[]: bytes24;
        {770}new rand8_3[]: bytes8;
        {1091}get pre_shared_keys(c_dom'_3: domain,s_dom'_3: domain,=tls_h,id_7: identityPsk,internal_psk_2: internal_preSharedKey) in
        {773}event Selected_psk(c_dom_6,c_dom'_3,backend_dom,s_dom'_3,id_7,internal_psk_2);
        {774}let v_153: bool = use_psk_2 in
        {775}let psk_23: preSharedKey = (if v_153 then PSK(internal_psk_2) else caught-fail) in
        {779}let k_12: bitstring = (if v_153 then catch-fail(psk2b(psk_23)) else caught-fail) in
        {780}let v_154: bool = not-caught-fail(k_12) in
        {778}let s_19: bitstring = (if v_153 then zero else caught-fail) in
        {781}let early_secret_13: bitstring = (if v_153 then catch-fail((if v_154 then hmac(tls_h,s_19,k_12) else fail-any)) else caught-fail) in
        {782}let v_155: bool = not-caught-fail(early_secret_13) in
        {784}let m_15: bitstring = (if v_155 then zero else caught-fail) in
        {785}let h_46: bitstring = (if v_155 then catch-fail(hash(tls_h,m_15)) else caught-fail) in
        {786}let v_156: bool = not-caught-fail(h_46) in
        {783}let l_46: label = (if v_155 then tls13_resumption_psk_binder_key else caught-fail) in
        {787}let x_52: bitstring = (if v_156 then (l_46,h_46) else caught-fail) in
        {788}let binder_key_9: bitstring = (if v_155 then catch-fail((if v_156 then hmac(tls_h,early_secret_13,x_52) else fail-any)) else caught-fail) in
        {789}let v_157: bool = not-caught-fail(binder_key_9) in
        {790}let v_158: bitstring = (if v_153 then catch-fail((if v_155 then (if v_157 then (early_secret_13,binder_key_9) else fail-any) else fail-any)) else caught-fail) in
        {791}let v_159: bool = (not-caught-fail(v_158) && success?(1-proj-2-tuple(v_158))) in
        {792}let kb_9: mac_key = (if v_159 then 2-proj-2-tuple(v_158) else caught-fail) in
        {793}let es_11: bitstring = (if v_159 then 1-proj-2-tuple(v_158) else caught-fail) in
        {796}let psk_24: preSharedKey = (if not(v_153) then NoPSK else caught-fail) in
        {798}let k_13: bitstring = (if not(v_153) then catch-fail(psk2b(psk_24)) else caught-fail) in
        {799}let v_161: bool = not-caught-fail(k_13) in
        {797}let s_20: bitstring = (if not(v_153) then zero else caught-fail) in
        {800}let early_secret_14: bitstring = (if not(v_153) then catch-fail((if v_161 then hmac(tls_h,s_20,k_13) else fail-any)) else caught-fail) in
        {801}let v_162: bool = not-caught-fail(early_secret_14) in
        {803}let m_16: bitstring = (if v_162 then zero else caught-fail) in
        {804}let h_47: bitstring = (if v_162 then catch-fail(hash(tls_h,m_16)) else caught-fail) in
        {805}let v_163: bool = not-caught-fail(h_47) in
        {802}let l_47: label = (if v_162 then tls13_resumption_psk_binder_key else caught-fail) in
        {806}let x_53: bitstring = (if v_163 then (l_47,h_47) else caught-fail) in
        {807}let binder_key_10: bitstring = (if v_162 then catch-fail((if v_163 then hmac(tls_h,early_secret_14,x_53) else fail-any)) else caught-fail) in
        {808}let v_164: bool = not-caught-fail(binder_key_10) in
        {809}let v_165: bitstring = (if not(v_153) then catch-fail((if v_162 then (if v_164 then (early_secret_14,binder_key_10) else fail-any) else fail-any)) else caught-fail) in
        {810}let v_166: bool = (not-caught-fail(v_165) && success?(1-proj-2-tuple(v_165))) in
        {811}let kb_10: mac_key = (if v_166 then 2-proj-2-tuple(v_165) else caught-fail) in
        {812}let es_12: bitstring = (if v_166 then 1-proj-2-tuple(v_165) else caught-fail) in
        {772}let ech_ext_4: echExt = ech_is_inner in
        {746}let i_extra: extraExt = empty_extra_ext in
        {776}let offer_6: params = (if v_153 then nego(TLS13,tls_h,tls_a,i_kex_ext,SNI(backend_dom),ech_ext_4,trunc_client_psk_ext(id_7),i_extra) else caught-fail) in
        {771}let i_cr: bytes32 = B32(rand24_3,rand8_3) in
        {751}let i_cur_log: bitstring = zero in
        {777}let cur_log'_4: bitstring = (if v_153 then (i_cur_log,CH(i_cr,offer_6)) else caught-fail) in
        {794}let binders_3: bitstring = (if v_159 then catch-fail(hmac(tls_h,kb_9,cur_log'_4)) else caught-fail) in
        {795}let v_160: bool = not-caught-fail(binders_3) in
        {813}let v_167: bitstring = catch-fail((if v_153 then (if v_159 then (if v_160 then (client_psk_ext(id_7,binders_3),(tls_h,psk_23,es_11)) else fail-any) else fail-any) else (if v_166 then (empty_psk_ext,(tls_h,NoPSK,es_12)) else fail-any))) in
        {814}let v_168: bool = (not-caught-fail(v_167) && success?(1-proj-2-tuple(v_167))) in
        {815}let psk_data_3: bitstring = (if v_168 then 2-proj-2-tuple(v_167) else caught-fail) in
        {816}let psk_ext_6: preSharedKeyExt = (if v_168 then 1-proj-2-tuple(v_167) else caught-fail) in
        {745}let ech_conf: echConfig = ech_config(id_6,g_3,pkR_1,cfs_dom,h_alg_9,a_alg_9) in
        {819}let v_169: echConfig = (if v_168 then catch-fail(ech_conf) else caught-fail) in
        {820}let v_170: bool = (not-caught-fail(v_169) && success?(1-proj-ech_config(v_169))) in
        {821}let a_alg_ech: aead_alg = (if v_170 then 6-proj-ech_config(v_169) else caught-fail) in
        {822}let h_alg_ech: hash_alg = (if v_170 then 5-proj-ech_config(v_169) else caught-fail) in
        {823}let o_dom_1: domain = (if v_170 then 4-proj-ech_config(v_169) else caught-fail) in
        {824}let pkR_2: element = (if v_170 then 3-proj-ech_config(v_169) else caught-fail) in
        {825}let g_ech: group = (if v_170 then 2-proj-ech_config(v_169) else caught-fail) in
        {826}let config_id: configId = (if v_170 then 1-proj-ech_config(v_169) else caught-fail) in
        {828}new s_21[]: seed;
        {829}let v_171: bitstring = (if v_170 then catch-fail((dh_xy(s_21,pkR_2),dh_encap_fun(g_ech,pkR_2,dh_xy(s_21,pkR_2)))) else caught-fail) in
        {830}let v_172: bool = (not-caught-fail(v_171) && success?(1-proj-2-tuple(v_171))) in
        {831}let enc: element = (if v_172 then 2-proj-2-tuple(v_171) else caught-fail) in
        {832}let shared_secret: element = (if v_172 then 1-proj-2-tuple(v_171) else caught-fail) in
        {827}let info: bitstring = (if v_170 then (tls_ech_str,ech_conf) else caught-fail) in
        {835}let k_14: bitstring = (if v_172 then (hpke_info_hash,info) else caught-fail) in
        {834}let s_22: bitstring = (if v_172 then zero else caught-fail) in
        {836}let info_hash: bitstring = (if v_172 then catch-fail(hmac(h_alg_ech,s_22,k_14)) else caught-fail) in
        {837}let v_173: bool = not-caught-fail(info_hash) in
        {838}let k_15: bitstring = (if v_173 then (hpke_secret,zero) else caught-fail) in
        {839}let xsecret: bitstring = (if v_173 then catch-fail(hmac(h_alg_ech,shared_secret,k_15)) else caught-fail) in
        {840}let v_174: bool = not-caught-fail(xsecret) in
        {841}let l_48: label = (if v_174 then hpke_key else caught-fail) in
        {842}let x_54: bitstring = (if v_174 then (l_48,info_hash) else caught-fail) in
        {843}let key: aead_key = (if v_174 then catch-fail(hmac(h_alg_ech,xsecret,x_54)) else caught-fail) in
        {844}let v_175: bool = not-caught-fail(key) in
        {845}let l_49: label = (if v_175 then hpke_base_nonce else caught-fail) in
        {846}let x_55: bitstring = (if v_175 then (l_49,info_hash) else caught-fail) in
        {847}let base_nonce: bitstring = (if v_175 then catch-fail(hmac(h_alg_ech,xsecret,x_55)) else caught-fail) in
        {848}let v_176: bool = not-caught-fail(base_nonce) in
        {849}let l_50: label = (if v_176 then hpke_exp else caught-fail) in
        {850}let x_56: bitstring = (if v_176 then (l_50,info_hash) else caught-fail) in
        {851}let exporter_secret: bitstring = (if v_176 then catch-fail(hmac(h_alg_ech,xsecret,x_56)) else caught-fail) in
        {852}let v_177: bool = not-caught-fail(exporter_secret) in
        {833}let m_17: hpkeMode = (if v_172 then S else caught-fail) in
        {853}let v_178: bitstring = (if v_170 then catch-fail((if v_172 then (enc,(if v_173 then (if v_174 then (if v_175 then (if v_176 then (if v_177 then hpke_context(m_17,key) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) else fail-any)) else caught-fail) in
        {854}let v_179: bool = (not-caught-fail(v_178) && success?(1-proj-2-tuple(v_178))) in
        {855}let context: hpkeContext = (if v_179 then 2-proj-2-tuple(v_178) else caught-fail) in
        {856}let enc_1: element = (if v_179 then 1-proj-2-tuple(v_178) else caught-fail) in
        {857}new rand24_4[]: bytes24;
        {858}new rand8_4[]: bytes8;
        {861}new payload[]: bitstring;
        {860}let v_180: bool = (if v_179 then catch-fail(use_grease) else caught-fail) in
        {864}let dummy_ech_ext: echExt = (if is-false(v_180) then client_ECH(h_alg_ech,a_alg_ech,config_id,enc_1,zero) else caught-fail) in
        {747}let o_extra: extraExt = empty_extra_ext in
        {865}let o_offer1: params = (if is-false(v_180) then nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom_1),dummy_ech_ext,empty_psk_ext,o_extra) else caught-fail) in
        {859}let o_cr: bytes32 = (if v_179 then B32(rand24_4,rand8_4) else caught-fail) in
        {866}let o_client_hello1: msg = (if is-false(v_180) then CH(o_cr,o_offer1) else caught-fail) in
        {867}let v_181: msg = (if is-false(v_180) then catch-fail(o_client_hello1) else caught-fail) in
        {868}let v_182: bool = (not-caught-fail(v_181) && (success?(1-proj-nego(2-proj-CH(v_181))) && success?(1-proj-CH(v_181)))) in
        {869}let extra_9: extraExt = (if v_182 then 8-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {870}let psk_ext_7: preSharedKeyExt = (if v_182 then 7-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {871}let ech_ext_6: echExt = (if v_182 then 6-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {872}let sni_ext_2: sniExt = (if v_182 then 5-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {873}let kex_ext_4: keyShareExt = (if v_182 then 4-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {874}let a_alg_10: aead_alg = (if v_182 then 3-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {875}let h_alg_10: hash_alg = (if v_182 then 2-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {876}let version: TLS_version = (if v_182 then 1-proj-nego(2-proj-CH(v_181)) else caught-fail) in
        {877}let r: bytes32 = (if v_182 then 1-proj-CH(v_181) else caught-fail) in
        {878}let v_183: echExt = (if v_182 then catch-fail(ech_ext_6) else caught-fail) in
        {879}let v_184: bool = (not-caught-fail(v_183) && success?(1-proj-client_ECH(v_183))) in
        {880}let payload_1: bitstring = (if v_184 then 5-proj-client_ECH(v_183) else caught-fail) in
        {881}let enc_2: element = (if v_184 then 4-proj-client_ECH(v_183) else caught-fail) in
        {882}let config_id_1: configId = (if v_184 then 3-proj-client_ECH(v_183) else caught-fail) in
        {883}let a_alg_ech_1: aead_alg = (if v_184 then 2-proj-client_ECH(v_183) else caught-fail) in
        {884}let h_alg_ech_1: hash_alg = (if v_184 then 1-proj-client_ECH(v_183) else caught-fail) in
        {885}let client_hello_outer': msg = (if v_184 then CH(r,nego(version,h_alg_10,a_alg_10,kex_ext_4,sni_ext_2,empty_ech_ext,psk_ext_7,extra_9)) else caught-fail) in
        {886}let client_hello_AAD: ClientHelloOuterAAD = (if is-false(v_180) then catch-fail((if v_182 then (if v_184 then client_hello_outer_AAD(h_alg_ech_1,a_alg_ech_1,config_id_1,enc_2,client_hello_outer') else fail-any) else fail-any)) else caught-fail) in
        {887}let v_185: bool = not-caught-fail(client_hello_AAD) in
        {888}let v_186: hpkeContext = (if v_185 then catch-fail(context) else caught-fail) in
        {889}let v_187: bool = (not-caught-fail(v_186) && ((S =nf 1-proj-hpke_context(v_186)) && success?(1-proj-hpke_context(v_186)))) in
        {890}let key_1: aead_key = (if v_187 then 2-proj-hpke_context(v_186) else caught-fail) in
        {817}let i_offer: params = (if v_168 then nego(TLS13,tls_h,tls_a,i_kex_ext,SNI(backend_dom),ech_is_inner,psk_ext_6,i_extra) else caught-fail) in
        {818}let i_client_hello: msg = (if v_168 then CH(i_cr,i_offer) else caught-fail) in
        {891}let payload_2: bitstring = (if v_185 then catch-fail((if v_187 then aead_enc(a_alg_ech,key_1,nonce_for_seal_open,client_hello_AAD,i_client_hello) else fail-any)) else caught-fail) in
        {892}let v_188: bool = not-caught-fail(payload_2) in
        {893}let ech_ext_7: echExt = (if v_188 then client_ECH(h_alg_ech,a_alg_ech,config_id,enc_1,payload_2) else caught-fail) in
        {894}let o_offer_1: params = (if v_188 then nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom_1),ech_ext_7,empty_psk_ext,o_extra) else caught-fail) in
        {862}let ech_ext_5: echExt = (if v_180 then client_ECH(h_alg_ech,a_alg_ech,config_id,enc_1,payload) else caught-fail) in
        {863}let o_offer: params = (if v_180 then nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom_1),ech_ext_5,empty_psk_ext,o_extra) else caught-fail) in
        {895}let (o_client_hello: msg,i_client_hello_1: msg,i_cr_1: bytes32,o_cr_1: bytes32,i_kex_ext_1: keyShareExt,o_kex_ext_1: keyShareExt,kex_data_4: bitstring,psk_data_4: bitstring) = (if v_168 then (if v_170 then (if v_179 then (if undo-catch-fail(v_180) then (CH(o_cr,o_offer),CH(o_cr,o_offer),o_cr,o_cr,o_kex_ext,o_kex_ext,kex_data_3,psk_data_3) else (if v_185 then (if v_188 then (CH(o_cr,o_offer_1),i_client_hello,i_cr,o_cr,i_kex_ext,o_kex_ext,kex_data_3,psk_data_3) else fail-any) else fail-any)) else fail-any) else fail-any) else fail-any) in
        {896}out(io, o_client_hello);
        {897}let (=tls_h,psk_25: preSharedKey,es_13: bitstring) = psk_data_4 in
        {898}let v_189: echConfig = ech_conf in
        {899}let v_190: bool = success?(1-proj-ech_config(v_189)) in
        {900}let al: aead_alg = (if v_190 then 6-proj-ech_config(v_189) else caught-fail) in
        {901}let hl: hash_alg = (if v_190 then 5-proj-ech_config(v_189) else caught-fail) in
        {902}let dom: domain = (if v_190 then 4-proj-ech_config(v_189) else caught-fail) in
        {903}let public_key: element = (if v_190 then 3-proj-ech_config(v_189) else caught-fail) in
        {904}let g_4: group = (if v_190 then 2-proj-ech_config(v_189) else caught-fail) in
        {905}let id_8: configId = (if v_190 then 1-proj-ech_config(v_189) else caught-fail) in
        {906}let o_dom_2: domain = (if v_190 then dom else fail-any) in
        {907}let v_191: echConfig = ech_conf in
        {908}let v_192: bool = success?(1-proj-ech_config(v_191)) in
        {909}let al_1: aead_alg = (if v_192 then 6-proj-ech_config(v_191) else caught-fail) in
        {910}let hl_1: hash_alg = (if v_192 then 5-proj-ech_config(v_191) else caught-fail) in
        {911}let dom_1: domain = (if v_192 then 4-proj-ech_config(v_191) else caught-fail) in
        {912}let public_key_1: element = (if v_192 then 3-proj-ech_config(v_191) else caught-fail) in
        {913}let g_5: group = (if v_192 then 2-proj-ech_config(v_191) else caught-fail) in
        {914}let id_9: configId = (if v_192 then 1-proj-ech_config(v_191) else caught-fail) in
        {915}let ech_pk: element = (if v_192 then public_key_1 else fail-any) in
        {916}event SanityClientCH_ECH(id_client_7,zero32,i_cr_1,o_cr_1,c_dom_6,o_dom_2,backend_dom,ech_pk,psk_25,(zero,o_client_hello),(zero,i_client_hello_1));
        {917}in(io, server_hello_2: msg);
        {918}let SH(sr_11: bytes32,mode_3: params) = server_hello_2 in
        (
            {919}if (sr_11 = rand_HelloRetryRequest) then
                {920}out(io, illegal_parameter)
            else
                {921}let v_193: echConfig = ech_conf in
                {922}let v_194: bool = success?(1-proj-ech_config(v_193)) in
                {923}let al_2: aead_alg = (if v_194 then 6-proj-ech_config(v_193) else caught-fail) in
                {924}let hl_2: hash_alg = (if v_194 then 5-proj-ech_config(v_193) else caught-fail) in
                {925}let dom_2: domain = (if v_194 then 4-proj-ech_config(v_193) else caught-fail) in
                {926}let public_key_2: element = (if v_194 then 3-proj-ech_config(v_193) else caught-fail) in
                {927}let g_6: group = (if v_194 then 2-proj-ech_config(v_193) else caught-fail) in
                {928}let id_10: configId = (if v_194 then 1-proj-ech_config(v_193) else caught-fail) in
                {930}let o_dom_3: domain = (if v_194 then dom_2 else fail-any) in
                {933}let SH(B32(sr24_1: bytes24,sr8_1: bytes8),mode_4: params) = server_hello_2 in
                {934}let (i_x_1: bitstring,o_x_1: bitstring,g_7: group,=true) = kex_data_4 in
                {935}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_7,gy_srv: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_8: preSharedKeyExt,extra_10: extraExt) = mode_4 in
                (
                    {936}let v_195: bool = (psk_ext_8 = empty_psk_ext) in
                    {937}let psk_26: preSharedKey = (if v_195 then NoPSK else caught-fail) in
                    {939}let k_16: bitstring = (if v_195 then catch-fail(psk2b(psk_26)) else caught-fail) in
                    {940}let v_196: bool = not-caught-fail(k_16) in
                    {938}let s_23: bitstring = (if v_195 then zero else caught-fail) in
                    {941}let early_secret_15: bitstring = (if v_195 then catch-fail((if v_196 then hmac(tls_h,s_23,k_16) else fail-any)) else caught-fail) in
                    {942}let v_197: bool = not-caught-fail(early_secret_15) in
                    {944}let m_18: bitstring = (if v_197 then zero else caught-fail) in
                    {945}let h_48: bitstring = (if v_197 then catch-fail(hash(tls_h,m_18)) else caught-fail) in
                    {946}let v_198: bool = not-caught-fail(h_48) in
                    {943}let l_51: label = (if v_197 then tls13_resumption_psk_binder_key else caught-fail) in
                    {947}let x_57: bitstring = (if v_198 then (l_51,h_48) else caught-fail) in
                    {948}let binder_key_11: bitstring = (if v_197 then catch-fail((if v_198 then hmac(tls_h,early_secret_15,x_57) else fail-any)) else caught-fail) in
                    {949}let v_199: bool = not-caught-fail(binder_key_11) in
                    {950}let v_200: bitstring = (if v_195 then catch-fail((if v_197 then (if v_199 then (early_secret_15,binder_key_11) else fail-any) else fail-any)) else caught-fail) in
                    {951}let v_201: bool = (not-caught-fail(v_200) && success?(1-proj-2-tuple(v_200))) in
                    {952}let kb_11: mac_key = (if v_201 then 2-proj-2-tuple(v_200) else caught-fail) in
                    {953}let es_14: bitstring = (if v_201 then 1-proj-2-tuple(v_200) else caught-fail) in
                    {954}let v_202: bitstring = (if not(v_195) then catch-fail(psk_data_4) else caught-fail) in
                    {955}let v_203: bool = (not-caught-fail(v_202) && success?(1-proj-3-tuple(v_202))) in
                    {956}let es_15: bitstring = (if v_203 then 3-proj-3-tuple(v_202) else caught-fail) in
                    {957}let psk_27: preSharedKey = (if v_203 then 2-proj-3-tuple(v_202) else caught-fail) in
                    {958}let h'_alg_2: hash_alg = (if v_203 then 1-proj-3-tuple(v_202) else caught-fail) in
                    {959}let (psk_28: preSharedKey,early_secret_16: bitstring,valid_2: bool) = (if v_195 then (if v_201 then (NoPSK,es_14,true) else fail-any) else (if v_203 then (psk_27,es_15,((h'_alg_2 = tls_h) && ((server_psk_ext(1) = psk_ext_8) && use_psk_2))) else fail-any)) in
                    {960}if valid_2 then
                    (
                        {964}new s_24[]: seed;
                        {961}let v_204: bool = use_grease in
                        {967}let m_19: bitstring = (if not(v_204) then catch-fail(hash(tls_h,zero)) else caught-fail) in
                        {968}let v_206: bool = not-caught-fail(m_19) in
                        {969}let h_49: bitstring = (if v_206 then catch-fail(hash(tls_h,m_19)) else caught-fail) in
                        {970}let v_207: bool = not-caught-fail(h_49) in
                        {966}let l_52: label = (if not(v_204) then tls13_derived else caught-fail) in
                        {971}let x_58: bitstring = (if v_207 then (l_52,h_49) else caught-fail) in
                        {972}let extra_11: bitstring = (if not(v_204) then catch-fail((if v_206 then (if v_207 then hmac(tls_h,early_secret_16,x_58) else fail-any) else fail-any)) else caught-fail) in
                        {973}let v_208: bool = not-caught-fail(extra_11) in
                        {962}let gxy_5: element = (if not(v_204) then catch-fail(dh_decap_fun(g_7,gy_srv,i_x_1)) else caught-fail) in
                        {963}let v_205: bool = not-caught-fail(gxy_5) in
                        {965}let i_gxy: element = (if not(v_204) then (if v_205 then gxy_5 else dh_f(s_24)) else caught-fail) in
                        {974}let i_handshake_secret: bitstring = (if not(v_204) then catch-fail((if v_208 then hmac(tls_h,extra_11,i_gxy) else fail-any)) else caught-fail) in
                        {975}let v_209: bool = not-caught-fail(i_handshake_secret) in
                        {976}let SH_ECHConf_1: msg = (if v_209 then SH(B32(sr24_1,zero8),mode_4) else caught-fail) in
                        {931}let i_cur_log_1: bitstring = (zero,i_client_hello_1) in
                        {978}let m_20: bitstring = (if v_209 then (i_cur_log_1,SH_ECHConf_1) else caught-fail) in
                        {979}let h_50: bitstring = (if v_209 then catch-fail(hash(tls_h,m_20)) else caught-fail) in
                        {980}let v_210: bool = not-caught-fail(h_50) in
                        {977}let l_53: label = (if v_209 then ech_accept_confirmation else caught-fail) in
                        {981}let x_59: bitstring = (if v_210 then (l_53,h_50) else caught-fail) in
                        {982}let accept_confirmation_1: bitstring = (if v_209 then catch-fail((if v_210 then hmac(tls_h,i_handshake_secret,x_59) else fail-any)) else caught-fail) in
                        {983}let v_211: bool = not-caught-fail(accept_confirmation_1) in
                        {984}let is_accepted: bool = (if v_204 then false else (if v_209 then (if v_211 then (sr8_1 = crop_into_bytes8(accept_confirmation_1)) else fail-any) else fail-any)) in
                        {988}new s_25[]: seed;
                        {1002}new s_26[]: seed;
                        {985}let v_212: bool = is_accepted in
                        {1004}let psk_29: preSharedKey = (if not(v_212) then NoPSK else caught-fail) in
                        {1006}let k_17: bitstring = (if not(v_212) then catch-fail(psk2b(psk_29)) else caught-fail) in
                        {1007}let v_219: bool = not-caught-fail(k_17) in
                        {1005}let s_27: bitstring = (if not(v_212) then zero else caught-fail) in
                        {1008}let early_secret_17: bitstring = (if not(v_212) then catch-fail((if v_219 then hmac(tls_h,s_27,k_17) else fail-any)) else caught-fail) in
                        {1009}let v_220: bool = not-caught-fail(early_secret_17) in
                        {1011}let m_22: bitstring = (if v_220 then zero else caught-fail) in
                        {1012}let h_52: bitstring = (if v_220 then catch-fail(hash(tls_h,m_22)) else caught-fail) in
                        {1013}let v_221: bool = not-caught-fail(h_52) in
                        {1010}let l_55: label = (if v_220 then tls13_resumption_psk_binder_key else caught-fail) in
                        {1014}let x_61: bitstring = (if v_221 then (l_55,h_52) else caught-fail) in
                        {1015}let binder_key_12: bitstring = (if v_220 then catch-fail((if v_221 then hmac(tls_h,early_secret_17,x_61) else fail-any)) else caught-fail) in
                        {1016}let v_222: bool = not-caught-fail(binder_key_12) in
                        {1017}let v_223: bitstring = (if not(v_212) then catch-fail((if v_220 then (if v_222 then (early_secret_17,binder_key_12) else fail-any) else fail-any)) else caught-fail) in
                        {1018}let v_224: bool = (not-caught-fail(v_223) && success?(1-proj-2-tuple(v_223))) in
                        {1019}let kb_12: mac_key = (if v_224 then 2-proj-2-tuple(v_223) else caught-fail) in
                        {1020}let es_16: bitstring = (if v_224 then 1-proj-2-tuple(v_223) else caught-fail) in
                        {1022}let m_23: bitstring = (if v_224 then catch-fail(hash(tls_h,zero)) else caught-fail) in
                        {1023}let v_225: bool = not-caught-fail(m_23) in
                        {1024}let h_53: bitstring = (if v_225 then catch-fail(hash(tls_h,m_23)) else caught-fail) in
                        {1025}let v_226: bool = not-caught-fail(h_53) in
                        {1021}let l_56: label = (if v_224 then tls13_derived else caught-fail) in
                        {1026}let x_62: bitstring = (if v_226 then (l_56,h_53) else caught-fail) in
                        {1027}let extra_13: bitstring = (if v_224 then catch-fail((if v_225 then (if v_226 then hmac(tls_h,es_16,x_62) else fail-any) else fail-any)) else caught-fail) in
                        {1028}let v_227: bool = not-caught-fail(extra_13) in
                        {1000}let gxy_7: element = (if not(v_212) then catch-fail(dh_decap_fun(g_7,gy_srv,o_x_1)) else caught-fail) in
                        {1001}let v_218: bool = not-caught-fail(gxy_7) in
                        {1003}let o_gxy: element = (if not(v_212) then (if v_218 then gxy_7 else dh_f(s_26)) else caught-fail) in
                        {991}let m_21: bitstring = (if v_212 then catch-fail(hash(tls_h,zero)) else caught-fail) in
                        {992}let v_214: bool = not-caught-fail(m_21) in
                        {993}let h_51: bitstring = (if v_214 then catch-fail(hash(tls_h,m_21)) else caught-fail) in
                        {994}let v_215: bool = not-caught-fail(h_51) in
                        {990}let l_54: label = (if v_212 then tls13_derived else caught-fail) in
                        {995}let x_60: bitstring = (if v_215 then (l_54,h_51) else caught-fail) in
                        {996}let extra_12: bitstring = (if v_212 then catch-fail((if v_214 then (if v_215 then hmac(tls_h,early_secret_16,x_60) else fail-any) else fail-any)) else caught-fail) in
                        {997}let v_216: bool = not-caught-fail(extra_12) in
                        {986}let gxy_6: element = (if v_212 then catch-fail(dh_decap_fun(g_7,gy_srv,i_x_1)) else caught-fail) in
                        {987}let v_213: bool = not-caught-fail(gxy_6) in
                        {989}let i_gxy_1: element = (if v_212 then (if v_213 then gxy_6 else dh_f(s_25)) else caught-fail) in
                        {998}let i_handshake_secret_1: bitstring = (if v_212 then catch-fail((if v_216 then hmac(tls_h,extra_12,i_gxy_1) else fail-any)) else caught-fail) in
                        {999}let v_217: bool = not-caught-fail(i_handshake_secret_1) in
                        {932}let o_cur_log: bitstring = (zero,o_client_hello) in
                        {1029}let (cr_12: bytes32,handshake_secret_3: bitstring,s_dom_7: domain,cur_log_9: bitstring) = (if v_212 then (if v_217 then (i_cr_1,i_handshake_secret_1,backend_dom,(i_cur_log_1,server_hello_2)) else fail-any) else (if v_224 then (o_cr_1,(if v_227 then hmac(tls_h,extra_13,o_gxy) else fail-any),o_dom_3,(o_cur_log,server_hello_2)) else fail-any)) in
                        {1031}let m_24: bitstring = catch-fail(hash(tls_h,zero)) in
                        {1032}let v_228: bool = not-caught-fail(m_24) in
                        {1033}let h_54: bitstring = (if v_228 then catch-fail(hash(tls_h,m_24)) else caught-fail) in
                        {1034}let v_229: bool = not-caught-fail(h_54) in
                        {1030}let l_57: label = tls13_derived in
                        {1035}let x_63: bitstring = (if v_229 then (l_57,h_54) else caught-fail) in
                        {1036}let extra_14: bitstring = catch-fail((if v_228 then (if v_229 then hmac(tls_h,handshake_secret_3,x_63) else fail-any) else fail-any)) in
                        {1037}let v_230: bool = not-caught-fail(extra_14) in
                        {1038}let k_18: bitstring = (if v_230 then zero else caught-fail) in
                        {1039}let master_secret_13: bitstring = (if v_230 then catch-fail(hmac(tls_h,handshake_secret_3,k_18)) else caught-fail) in
                        {1040}let v_231: bool = not-caught-fail(master_secret_13) in
                        {1042}let h_55: bitstring = (if v_231 then catch-fail(hash(tls_h,cur_log_9)) else caught-fail) in
                        {1043}let v_232: bool = not-caught-fail(h_55) in
                        {1041}let l_58: label = (if v_231 then tls13_client_handshake_traffic_secret else caught-fail) in
                        {1044}let x_64: bitstring = (if v_232 then (l_58,h_55) else caught-fail) in
                        {1045}let client_hts_3: bitstring = (if v_231 then catch-fail((if v_232 then hmac(tls_h,handshake_secret_3,x_64) else fail-any)) else caught-fail) in
                        {1046}let v_233: bool = not-caught-fail(client_hts_3) in
                        {1048}let h_56: bitstring = (if v_233 then catch-fail(hash(tls_h,cur_log_9)) else caught-fail) in
                        {1049}let v_234: bool = not-caught-fail(h_56) in
                        {1047}let l_59: label = (if v_233 then tls13_server_handshake_traffic_secret else caught-fail) in
                        {1050}let x_65: bitstring = (if v_234 then (l_59,h_56) else caught-fail) in
                        {1051}let server_hts_3: bitstring = (if v_233 then catch-fail((if v_234 then hmac(tls_h,handshake_secret_3,x_65) else fail-any)) else caught-fail) in
                        {1052}let v_235: bool = not-caught-fail(server_hts_3) in
                        {1054}let h_57: bitstring = (if v_235 then zero else caught-fail) in
                        {1053}let l_60: label = (if v_235 then tls13_key else caught-fail) in
                        {1055}let x_66: bitstring = (if v_235 then (l_60,h_57) else caught-fail) in
                        {1056}let client_wkh_3: bitstring = (if v_235 then catch-fail(hmac(tls_h,client_hts_3,x_66)) else caught-fail) in
                        {1057}let v_236: bool = not-caught-fail(client_wkh_3) in
                        {1059}let h_58: bitstring = (if v_236 then zero else caught-fail) in
                        {1058}let l_61: label = (if v_236 then tls13_key else caught-fail) in
                        {1060}let x_67: bitstring = (if v_236 then (l_61,h_58) else caught-fail) in
                        {1061}let server_wkh_3: bitstring = (if v_236 then catch-fail(hmac(tls_h,server_hts_3,x_67)) else caught-fail) in
                        {1062}let v_237: bool = not-caught-fail(server_wkh_3) in
                        {1064}let h_59: bitstring = (if v_237 then zero else caught-fail) in
                        {1063}let l_62: label = (if v_237 then tls13_finished else caught-fail) in
                        {1065}let x_68: bitstring = (if v_237 then (l_62,h_59) else caught-fail) in
                        {1066}let client_fk_3: bitstring = (if v_237 then catch-fail(hmac(tls_h,client_hts_3,x_68)) else caught-fail) in
                        {1067}let v_238: bool = not-caught-fail(client_fk_3) in
                        {1069}let h_60: bitstring = (if v_238 then zero else caught-fail) in
                        {1068}let l_63: label = (if v_238 then tls13_finished else caught-fail) in
                        {1070}let x_69: bitstring = (if v_238 then (l_63,h_60) else caught-fail) in
                        {1071}let server_fk_3: bitstring = (if v_238 then catch-fail(hmac(tls_h,server_hts_3,x_69)) else caught-fail) in
                        {1072}let v_239: bool = not-caught-fail(server_fk_3) in
                        {1073}let (master_secret_14: bitstring,chk_10: aead_key,shk_10: aead_key,cfin_10: mac_key,sfin_10: mac_key) = (if v_230 then (if v_231 then (if v_233 then (if v_235 then (if v_236 then (if v_237 then (if v_238 then (if v_239 then (master_secret_13,client_wkh_3,server_wkh_3,client_fk_3,server_fk_3) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                        {929}let id_client_8: idProc = id_client_7 in
                        {1074}event SanityClientSH(id_client_8,cr_12,B32(sr24_1,sr8_1),c_dom_6,s_dom_7,handshake_secret_3,psk_28,cur_log_9);
                        {1075}if (is_accepted || (psk_ext_8 = empty_psk_ext)) then
                        (
                            {1077}in(io, enc_ee_msg_2: bitstring);
                            {1078}let ee_msg_3: msg = aead_dec(tls_a,shk_10,zero,zero,enc_ee_msg_2) in
                            {1079}let EE(x_70: bitstring) = ee_msg_3 in
                            {1080}let v_240: bool = not(is_accepted) in
                            {1081}let v_241: bitstring = (if v_240 then catch-fail(x_70) else caught-fail) in
                            {1082}let v_242: bool = (not-caught-fail(v_241) && success?(1-proj-server_ECH(v_241))) in
                            {1083}let ech_conf_1: echConfig = (if v_242 then 1-proj-server_ECH(v_241) else caught-fail) in
                            {1085}let cur_log2_9: bitstring = (cur_log_9,ee_msg_3) in
                            {1076}let sr_12: bytes32 = B32(sr24_1,sr8_1) in
                            {1086}out(ch_client_after_EE, (id_client_8,cr_12,sr_12,tls_h,tls_a,c_dom_6,s_dom_7,psk_28,master_secret_14,chk_10,shk_10,cfin_10,sfin_10,cur_log2_9))
                        )
                        else
                            {1087}out(io, illegal_parameter)
                    )
                    else
                        {1088}out(io, illegal_parameter)
                )
                else
                    {1089}out(io, illegal_parameter)
        )
        else
            {1090}out(io, unexpected_message)
    ) | (
        {1093}!
        {1094}in(io, use_psk_3: bool);
        {1095}in(io, cert_req_5: bool);
        {1096}in(io, (use_ech: bool,s_dom_8: domain));
        {1097}event Same((use_ech,use_psk_3,cert_req_5,s_dom_8));
        {1099}new id_server_4[]: idProc;
        {1100}event SanityServer(id_server_4,use_ech,use_psk_3,cert_req_5);
        {1101}if not((use_psk_3 && cert_req_5)) then
        {1102}in(io, x_client_hello: msg);
        {1103}let CH(cr_13: bytes32,offer_7: params) = x_client_hello in
        (
            {1104}let nego(=TLS13,c_h_alg: hash_alg,c_a_alg: aead_alg,kex_ext_5: keyShareExt,sni_ext_3: sniExt,ech_ext_8: echExt,psk_ext_9: preSharedKeyExt,extra_ext_2: extraExt) = offer_7 in
            {1105}if ((c_h_alg = tls_h) && (c_a_alg = tls_a)) then
            (
                {1098}let s_extra_1: extraExt = empty_extra_ext in
                {1106}let client_kex_ext(DHE_group(=tls_g)) = kex_ext_5 in
                (
                    {1107}if (sni_ext_3 = SNI(s_dom_8)) then
                    (
                        {1108}if use_ech then
                            {1109}out(io, abort_error)
                        else
                            {1110}let hrr_mode: params = nego(TLS13,tls_h,tls_a,hrr_kex_ext(tls_g),empty_sni_ext,empty_ech_ext,empty_psk_ext,empty_extra_ext) in
                            {1111}let hello_retry_request: msg = SH(rand_HelloRetryRequest,hrr_mode) in
                            {1112}out(io, hello_retry_request);
                            {1113}let cur_log_HRR: bitstring = ((zero,x_client_hello),hello_retry_request) in
                            {1114}event SanityServerHRR(id_server_4,cr_13,s_dom_8,cur_log_HRR);
                            {1115}in(io, client_hello'_1: msg);
                            {1116}let CH(cr'_1: bytes32,offer': params) = client_hello'_1 in
                                {1117}out(ch_server_SH, (id_server_4,use_psk_3,false,cert_req_5,s_dom_8,tls_g,tls_h,tls_a,s_extra_1,zero,client_hello'_1,cur_log_HRR))
                            else
                                {1118}out(io, unexpected_message)
                    )
                    else
                        {1119}out(io, illegal_parameter)
                )
                else
                    {1120}let client_kex_ext(DHE_kex(=tls_g,gx_8: element)) = kex_ext_5 in
                    (
                        {1121}let (client_ECH(ech_h_alg: hash_alg,ech_aead_alg: aead_alg,config_id_2: configId,enc_3: element,payload_3: bitstring),=true) = (ech_ext_8,use_ech) in
                        (
                            {1123}let CH(r_1: bytes32,offer_8: params) = x_client_hello in
                            {1124}let nego(=TLS13,=tls_h,=tls_a,kex_ext_6: keyShareExt,sni_ext_4: sniExt,ech_ext_9: echExt,=empty_psk_ext,extra_ext_3: extraExt) = offer_8 in
                            {1125}let client_ECH(ech_h_alg_1: hash_alg,ech_a_alg: aead_alg,config_id_3: configId,enc_4: element,payload_4: bitstring) = ech_ext_9 in
                            {1122}let id_server_5: idProc = id_server_4 in
                            {1249}get ech_configurations(ech_config(=config_id_3,ech_g_1: group,pkR_3: element,=s_dom_8,=ech_h_alg_1,=ech_a_alg),skR_2: bitstring) in
                            (
                                {1127}let v_243: msg = x_client_hello in
                                {1128}let v_244: bool = (success?(1-proj-nego(2-proj-CH(v_243))) && success?(1-proj-CH(v_243))) in
                                {1129}let extra_15: extraExt = (if v_244 then 8-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1130}let psk_ext_10: preSharedKeyExt = (if v_244 then 7-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1131}let ech_ext_10: echExt = (if v_244 then 6-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1132}let sni_ext_5: sniExt = (if v_244 then 5-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1133}let kex_ext_7: keyShareExt = (if v_244 then 4-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1134}let a_alg_11: aead_alg = (if v_244 then 3-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1135}let h_alg_11: hash_alg = (if v_244 then 2-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1136}let version_1: TLS_version = (if v_244 then 1-proj-nego(2-proj-CH(v_243)) else caught-fail) in
                                {1137}let r_2: bytes32 = (if v_244 then 1-proj-CH(v_243) else caught-fail) in
                                {1138}let v_245: echExt = (if v_244 then catch-fail(ech_ext_10) else caught-fail) in
                                {1139}let v_246: bool = (not-caught-fail(v_245) && success?(1-proj-client_ECH(v_245))) in
                                {1140}let payload_5: bitstring = (if v_246 then 5-proj-client_ECH(v_245) else caught-fail) in
                                {1141}let enc_5: element = (if v_246 then 4-proj-client_ECH(v_245) else caught-fail) in
                                {1142}let config_id_4: configId = (if v_246 then 3-proj-client_ECH(v_245) else caught-fail) in
                                {1143}let a_alg_ech_2: aead_alg = (if v_246 then 2-proj-client_ECH(v_245) else caught-fail) in
                                {1144}let h_alg_ech_2: hash_alg = (if v_246 then 1-proj-client_ECH(v_245) else caught-fail) in
                                {1151}new s_28[]: seed;
                                {1145}let client_hello_outer'_1: msg = (if v_246 then CH(r_2,nego(version_1,h_alg_11,a_alg_11,kex_ext_7,sni_ext_5,empty_ech_ext,psk_ext_10,extra_15)) else caught-fail) in
                                {1146}let client_hello_AAD_1: ClientHelloOuterAAD = catch-fail((if v_244 then (if v_246 then client_hello_outer_AAD(h_alg_ech_2,a_alg_ech_2,config_id_4,enc_5,client_hello_outer'_1) else fail-any) else fail-any)) in
                                {1147}let v_247: bool = not-caught-fail(client_hello_AAD_1) in
                                {1126}let ech_conf_2: echConfig = ech_config(config_id_3,ech_g_1,pkR_3,s_dom_8,ech_h_alg_1,ech_a_alg) in
                                {1148}let info_1: bitstring = (if v_247 then (tls_ech_str,ech_conf_2) else caught-fail) in
                                {1155}let k_19: bitstring = (if v_247 then (hpke_info_hash,info_1) else caught-fail) in
                                {1154}let s_29: bitstring = (if v_247 then zero else caught-fail) in
                                {1156}let info_hash_1: bitstring = (if v_247 then catch-fail(hmac(ech_h_alg_1,s_29,k_19)) else caught-fail) in
                                {1157}let v_249: bool = not-caught-fail(info_hash_1) in
                                {1158}let k_20: bitstring = (if v_249 then (hpke_secret,zero) else caught-fail) in
                                {1149}let gxy_8: element = (if v_247 then catch-fail(dh_decap_fun(ech_g_1,enc_4,skR_2)) else caught-fail) in
                                {1150}let v_248: bool = not-caught-fail(gxy_8) in
                                {1152}let shared_secret_1: element = (if v_247 then (if v_248 then gxy_8 else dh_f(s_28)) else caught-fail) in
                                {1159}let xsecret_1: bitstring = (if v_249 then catch-fail(hmac(ech_h_alg_1,shared_secret_1,k_20)) else caught-fail) in
                                {1160}let v_250: bool = not-caught-fail(xsecret_1) in
                                {1161}let l_64: label = (if v_250 then hpke_key else caught-fail) in
                                {1162}let x_71: bitstring = (if v_250 then (l_64,info_hash_1) else caught-fail) in
                                {1163}let key_2: aead_key = (if v_250 then catch-fail(hmac(ech_h_alg_1,xsecret_1,x_71)) else caught-fail) in
                                {1164}let v_251: bool = not-caught-fail(key_2) in
                                {1165}let l_65: label = (if v_251 then hpke_base_nonce else caught-fail) in
                                {1166}let x_72: bitstring = (if v_251 then (l_65,info_hash_1) else caught-fail) in
                                {1167}let base_nonce_1: bitstring = (if v_251 then catch-fail(hmac(ech_h_alg_1,xsecret_1,x_72)) else caught-fail) in
                                {1168}let v_252: bool = not-caught-fail(base_nonce_1) in
                                {1169}let l_66: label = (if v_252 then hpke_exp else caught-fail) in
                                {1170}let x_73: bitstring = (if v_252 then (l_66,info_hash_1) else caught-fail) in
                                {1171}let exporter_secret_1: bitstring = (if v_252 then catch-fail(hmac(ech_h_alg_1,xsecret_1,x_73)) else caught-fail) in
                                {1172}let v_253: bool = not-caught-fail(exporter_secret_1) in
                                {1153}let m_25: hpkeMode = (if v_247 then R else caught-fail) in
                                {1173}let context_1: hpkeContext = (if v_247 then catch-fail((if v_249 then (if v_250 then (if v_251 then (if v_252 then (if v_253 then hpke_context(m_25,key_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) else caught-fail) in
                                {1174}let v_254: bool = not-caught-fail(context_1) in
                                {1175}let v_255: hpkeContext = (if v_254 then catch-fail(context_1) else caught-fail) in
                                {1176}let v_256: bool = (not-caught-fail(v_255) && ((R =nf 1-proj-hpke_context(v_255)) && success?(1-proj-hpke_context(v_255)))) in
                                {1177}let key_3: aead_key = (if v_256 then 2-proj-hpke_context(v_255) else caught-fail) in
                                {1178}let i_client_hello_2: msg = (if v_254 then catch-fail((if v_256 then aead_dec(ech_a_alg,key_3,nonce_for_seal_open,client_hello_AAD_1,payload_4) else fail-any)) else caught-fail) in
                                {1179}let v_257: bool = not-caught-fail(i_client_hello_2) in
                                {1180}let v_258: msg = (if v_257 then catch-fail(i_client_hello_2) else caught-fail) in
                                {1181}let v_259: bool = (not-caught-fail(v_258) && ((((TLS13 =nf 1-proj-nego(2-proj-CH(v_258))) && success?(1-proj-SNI(5-proj-nego(2-proj-CH(v_258))))) && success?(1-proj-nego(2-proj-CH(v_258)))) && success?(1-proj-CH(v_258)))) in
                                {1182}let extra_ext': extraExt = (if v_259 then 8-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                                {1183}let empty_psk_ext': preSharedKeyExt = (if v_259 then 7-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                                {1184}let ech_ext': echExt = (if v_259 then 6-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                                {1185}let i_dom: domain = (if v_259 then 1-proj-SNI(5-proj-nego(2-proj-CH(v_258))) else caught-fail) in
                                {1186}let kex_ext'_1: keyShareExt = (if v_259 then 4-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                                {1187}let a_alg': aead_alg = (if v_259 then 3-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                                {1188}let h_alg': hash_alg = (if v_259 then 2-proj-nego(2-proj-CH(v_258)) else caught-fail) in
                                {1189}let cr'_2: bytes32 = (if v_259 then 1-proj-CH(v_258) else caught-fail) in
                                {1190}let v_260: bool = (v_257 && not(v_259)) in
                                {1191}let v_261: echConfig = (if v_260 then catch-fail(ech_conf_2) else caught-fail) in
                                {1192}let v_262: bool = (not-caught-fail(v_261) && success?(1-proj-ech_config(v_261))) in
                                {1193}let a_alg_12: aead_alg = (if v_262 then 6-proj-ech_config(v_261) else caught-fail) in
                                {1194}let h_alg_12: hash_alg = (if v_262 then 5-proj-ech_config(v_261) else caught-fail) in
                                {1195}let s_dom_9: domain = (if v_262 then 4-proj-ech_config(v_261) else caught-fail) in
                                {1196}let pkR_4: element = (if v_262 then 3-proj-ech_config(v_261) else caught-fail) in
                                {1197}let g_8: group = (if v_262 then 2-proj-ech_config(v_261) else caught-fail) in
                                {1198}let config_id_5: configId = (if v_262 then 1-proj-ech_config(v_261) else caught-fail) in
                                {1199}new s_30[]: seed;
                                {1200}let gx_9: element = (if v_262 then dh_pub(g_8,dh_k(s_30)) else caught-fail) in
                                {1201}let v_263: bitstring = (if v_262 then catch-fail((dh_k(s_30),gx_9)) else caught-fail) in
                                {1202}let v_264: bool = (not-caught-fail(v_263) && success?(1-proj-2-tuple(v_263))) in
                                {1203}let pkR': element = (if v_264 then 2-proj-2-tuple(v_263) else caught-fail) in
                                {1204}let skR': bitstring = (if v_264 then 1-proj-2-tuple(v_263) else caught-fail) in
                                {1205}new config_id'[]: configId;
                                {1208}let v_266: bool = (v_254 && not(v_257)) in
                                {1209}let v_267: echConfig = (if v_266 then catch-fail(ech_conf_2) else caught-fail) in
                                {1210}let v_268: bool = (not-caught-fail(v_267) && success?(1-proj-ech_config(v_267))) in
                                {1211}let a_alg_13: aead_alg = (if v_268 then 6-proj-ech_config(v_267) else caught-fail) in
                                {1212}let h_alg_13: hash_alg = (if v_268 then 5-proj-ech_config(v_267) else caught-fail) in
                                {1213}let s_dom_10: domain = (if v_268 then 4-proj-ech_config(v_267) else caught-fail) in
                                {1214}let pkR_5: element = (if v_268 then 3-proj-ech_config(v_267) else caught-fail) in
                                {1215}let g_9: group = (if v_268 then 2-proj-ech_config(v_267) else caught-fail) in
                                {1216}let config_id_6: configId = (if v_268 then 1-proj-ech_config(v_267) else caught-fail) in
                                {1217}new s_31[]: seed;
                                {1218}let gx_10: element = (if v_268 then dh_pub(g_9,dh_k(s_31)) else caught-fail) in
                                {1219}let v_269: bitstring = (if v_268 then catch-fail((dh_k(s_31),gx_10)) else caught-fail) in
                                {1220}let v_270: bool = (not-caught-fail(v_269) && success?(1-proj-2-tuple(v_269))) in
                                {1221}let pkR'_1: element = (if v_270 then 2-proj-2-tuple(v_269) else caught-fail) in
                                {1222}let skR'_1: bitstring = (if v_270 then 1-proj-2-tuple(v_269) else caught-fail) in
                                {1223}new config_id'_1[]: configId;
                                {1224}let retry_config_1: echConfig = (if v_266 then catch-fail((if v_268 then (if v_270 then ech_config(config_id'_1,g_9,pkR'_1,s_dom_10,h_alg_13,a_alg_13) else fail-any) else fail-any)) else caught-fail) in
                                {1225}let v_271: bool = not-caught-fail(retry_config_1) in
                                {1206}let retry_config: echConfig = (if v_260 then catch-fail((if v_262 then (if v_264 then ech_config(config_id',g_8,pkR',s_dom_9,h_alg_12,a_alg_12) else fail-any) else fail-any)) else caught-fail) in
                                {1207}let v_265: bool = not-caught-fail(retry_config) in
                                {1226}let (s_dom_11: domain,client_hello_2: msg,encrypted_ext_1: bitstring,is_backend_1: bool) = (if v_247 then (if v_254 then (if v_257 then (if v_259 then (i_dom,i_client_hello_2,zero,true) else (if v_265 then (s_dom_8,x_client_hello,server_ECH(retry_config),false) else fail-any)) else (if v_271 then (s_dom_8,x_client_hello,server_ECH(retry_config_1),false) else fail-any)) else fail-any) else fail-any) in
                                {1227}out(ch_server_SH, (id_server_5,use_psk_3,is_backend_1,cert_req_5,s_dom_11,tls_g,tls_h,tls_a,s_extra_1,encrypted_ext_1,client_hello_2,zero))
                            )
                            else
                                {1248}get ech_configurations(ech_config(config_id'_2: configId,ech_g': group,pkR'_2: element,=s_dom_8,ech_h_alg': hash_alg,ech_a_alg': aead_alg),skR'_2: bitstring) in
                                {1228}let config_2: echConfig = ech_config(config_id'_2,ech_g',pkR'_2,s_dom_8,ech_h_alg',ech_a_alg') in
                                {1229}let v_272: echConfig = config_2 in
                                {1230}let v_273: bool = success?(1-proj-ech_config(v_272)) in
                                {1231}let a_alg_14: aead_alg = (if v_273 then 6-proj-ech_config(v_272) else caught-fail) in
                                {1232}let h_alg_14: hash_alg = (if v_273 then 5-proj-ech_config(v_272) else caught-fail) in
                                {1233}let s_dom_12: domain = (if v_273 then 4-proj-ech_config(v_272) else caught-fail) in
                                {1234}let pkR_6: element = (if v_273 then 3-proj-ech_config(v_272) else caught-fail) in
                                {1235}let g_10: group = (if v_273 then 2-proj-ech_config(v_272) else caught-fail) in
                                {1236}let config_id_7: configId = (if v_273 then 1-proj-ech_config(v_272) else caught-fail) in
                                {1237}new s_32[]: seed;
                                {1238}let gx_11: element = (if v_273 then dh_pub(g_10,dh_k(s_32)) else caught-fail) in
                                {1239}let v_274: bitstring = (if v_273 then catch-fail((dh_k(s_32),gx_11)) else caught-fail) in
                                {1240}let v_275: bool = (not-caught-fail(v_274) && success?(1-proj-2-tuple(v_274))) in
                                {1241}let pkR'_3: element = (if v_275 then 2-proj-2-tuple(v_274) else caught-fail) in
                                {1242}let skR'_3: bitstring = (if v_275 then 1-proj-2-tuple(v_274) else caught-fail) in
                                {1243}new config_id'_3[]: configId;
                                {1244}let retry_config_2: echConfig = catch-fail((if v_273 then (if v_275 then ech_config(config_id'_3,g_10,pkR'_3,s_dom_12,h_alg_14,a_alg_14) else fail-any) else fail-any)) in
                                {1245}let v_276: bool = not-caught-fail(retry_config_2) in
                                {1246}let (s_dom_13: domain,client_hello_3: msg,encrypted_ext_2: bitstring,is_backend_2: bool) = (if v_276 then (s_dom_8,x_client_hello,server_ECH(retry_config_2),false) else fail-any) in
                                {1247}out(ch_server_SH, (id_server_5,use_psk_3,is_backend_2,cert_req_5,s_dom_13,tls_g,tls_h,tls_a,s_extra_1,encrypted_ext_2,client_hello_3,zero))
                        )
                        else
                            {1250}if ((ech_ext_8 = empty_ech_ext) || not(use_ech)) then
                                {1251}out(ch_server_SH, (id_server_4,use_psk_3,false,cert_req_5,s_dom_8,tls_g,tls_h,tls_a,s_extra_1,zero,x_client_hello,zero))
                            else
                                {1252}out(io, illegal_parameter)
                    )
                    else
                        {1253}out(io, handshake_failure)
            )
            else
                {1254}out(io, handshake_failure)
        )
        else
            {1255}out(io, unexpected_message)
    ) | (
        {1257}in(io, use_psk_4: bool);
        {1259}in(io, (c_dom_7: domain,cfs_dom_1: domain));
        {1258}let send_kex_3: bool = true in
        {1256}let use_grease_1: bool = false in
        {1260}event Same((use_grease_1,use_psk_4,send_kex_3,c_dom_7,cfs_dom_1));
        {1609}get ech_configurations(ech_config(id_11: configId,g_11: group,pkR_7: element,=cfs_dom_1,h_alg_15: hash_alg,a_alg_15: aead_alg),skR_3: bitstring) in
        {1265}new id_client_9[]: idProc;
        {1266}event SanityClient(id_client_9,true,use_grease_1,use_psk_4,send_kex_3);
        {1267}if not((use_grease_1 && use_psk_4)) then
        {1269}new s_33[]: seed;
        {1270}let gx_12: element = dh_pub(tls_g,dh_k(s_33)) in
        {1271}let v_277: bitstring = (dh_k(s_33),gx_12) in
        {1272}let v_278: bool = success?(1-proj-2-tuple(v_277)) in
        {1273}let i_gx_1: element = (if v_278 then 2-proj-2-tuple(v_277) else caught-fail) in
        {1274}let i_x_2: bitstring = (if v_278 then 1-proj-2-tuple(v_277) else caught-fail) in
        {1275}new s_34[]: seed;
        {1276}let gx_13: element = (if v_278 then dh_pub(tls_g,dh_k(s_34)) else caught-fail) in
        {1277}let v_279: bitstring = (if v_278 then catch-fail((dh_k(s_34),gx_13)) else caught-fail) in
        {1278}let v_280: bool = (not-caught-fail(v_279) && success?(1-proj-2-tuple(v_279))) in
        {1279}let o_gx_1: element = (if v_280 then 2-proj-2-tuple(v_279) else caught-fail) in
        {1280}let o_x_2: bitstring = (if v_280 then 1-proj-2-tuple(v_279) else caught-fail) in
        {1281}let v_281: bitstring = (if v_280 then catch-fail((if send_kex_3 then (DHE_kex(tls_g,i_gx_1),DHE_kex(tls_g,o_gx_1)) else (DHE_group(tls_g),DHE_group(tls_g)))) else caught-fail) in
        {1282}let v_282: bool = (not-caught-fail(v_281) && success?(1-proj-2-tuple(v_281))) in
        {1283}let o_kex_1: kex_alg = (if v_282 then 2-proj-2-tuple(v_281) else caught-fail) in
        {1284}let i_kex_1: kex_alg = (if v_282 then 1-proj-2-tuple(v_281) else caught-fail) in
        {1285}let (i_kex_ext_2: keyShareExt,o_kex_ext_2: keyShareExt,kex_data_5: bitstring) = (if v_278 then (if v_280 then (if v_282 then (client_kex_ext(i_kex_1),client_kex_ext(o_kex_1),(i_x_2,o_x_2,tls_g,send_kex_3)) else fail-any) else fail-any) else fail-any) in
        {1286}new rand24_5[]: bytes24;
        {1287}new rand8_5[]: bytes8;
        {1608}get pre_shared_keys(c_dom'_4: domain,s_dom'_4: domain,=tls_h,id_12: identityPsk,internal_psk_3: internal_preSharedKey) in
        {1262}let i_dom_1: domain = choice[BackendA,BackendB] in
        {1290}event Selected_psk(c_dom_7,c_dom'_4,i_dom_1,s_dom'_4,id_12,internal_psk_3);
        {1291}let v_283: bool = use_psk_4 in
        {1292}let psk_30: preSharedKey = (if v_283 then PSK(internal_psk_3) else caught-fail) in
        {1296}let k_21: bitstring = (if v_283 then catch-fail(psk2b(psk_30)) else caught-fail) in
        {1297}let v_284: bool = not-caught-fail(k_21) in
        {1295}let s_35: bitstring = (if v_283 then zero else caught-fail) in
        {1298}let early_secret_18: bitstring = (if v_283 then catch-fail((if v_284 then hmac(tls_h,s_35,k_21) else fail-any)) else caught-fail) in
        {1299}let v_285: bool = not-caught-fail(early_secret_18) in
        {1301}let m_26: bitstring = (if v_285 then zero else caught-fail) in
        {1302}let h_61: bitstring = (if v_285 then catch-fail(hash(tls_h,m_26)) else caught-fail) in
        {1303}let v_286: bool = not-caught-fail(h_61) in
        {1300}let l_67: label = (if v_285 then tls13_resumption_psk_binder_key else caught-fail) in
        {1304}let x_74: bitstring = (if v_286 then (l_67,h_61) else caught-fail) in
        {1305}let binder_key_13: bitstring = (if v_285 then catch-fail((if v_286 then hmac(tls_h,early_secret_18,x_74) else fail-any)) else caught-fail) in
        {1306}let v_287: bool = not-caught-fail(binder_key_13) in
        {1307}let v_288: bitstring = (if v_283 then catch-fail((if v_285 then (if v_287 then (early_secret_18,binder_key_13) else fail-any) else fail-any)) else caught-fail) in
        {1308}let v_289: bool = (not-caught-fail(v_288) && success?(1-proj-2-tuple(v_288))) in
        {1309}let kb_13: mac_key = (if v_289 then 2-proj-2-tuple(v_288) else caught-fail) in
        {1310}let es_17: bitstring = (if v_289 then 1-proj-2-tuple(v_288) else caught-fail) in
        {1313}let psk_31: preSharedKey = (if not(v_283) then NoPSK else caught-fail) in
        {1315}let k_22: bitstring = (if not(v_283) then catch-fail(psk2b(psk_31)) else caught-fail) in
        {1316}let v_291: bool = not-caught-fail(k_22) in
        {1314}let s_36: bitstring = (if not(v_283) then zero else caught-fail) in
        {1317}let early_secret_19: bitstring = (if not(v_283) then catch-fail((if v_291 then hmac(tls_h,s_36,k_22) else fail-any)) else caught-fail) in
        {1318}let v_292: bool = not-caught-fail(early_secret_19) in
        {1320}let m_27: bitstring = (if v_292 then zero else caught-fail) in
        {1321}let h_62: bitstring = (if v_292 then catch-fail(hash(tls_h,m_27)) else caught-fail) in
        {1322}let v_293: bool = not-caught-fail(h_62) in
        {1319}let l_68: label = (if v_292 then tls13_resumption_psk_binder_key else caught-fail) in
        {1323}let x_75: bitstring = (if v_293 then (l_68,h_62) else caught-fail) in
        {1324}let binder_key_14: bitstring = (if v_292 then catch-fail((if v_293 then hmac(tls_h,early_secret_19,x_75) else fail-any)) else caught-fail) in
        {1325}let v_294: bool = not-caught-fail(binder_key_14) in
        {1326}let v_295: bitstring = (if not(v_283) then catch-fail((if v_292 then (if v_294 then (early_secret_19,binder_key_14) else fail-any) else fail-any)) else caught-fail) in
        {1327}let v_296: bool = (not-caught-fail(v_295) && success?(1-proj-2-tuple(v_295))) in
        {1328}let kb_14: mac_key = (if v_296 then 2-proj-2-tuple(v_295) else caught-fail) in
        {1329}let es_18: bitstring = (if v_296 then 1-proj-2-tuple(v_295) else caught-fail) in
        {1289}let ech_ext_11: echExt = ech_is_inner in
        {1263}let i_extra_1: extraExt = empty_extra_ext in
        {1293}let offer_9: params = (if v_283 then nego(TLS13,tls_h,tls_a,i_kex_ext_2,SNI(i_dom_1),ech_ext_11,trunc_client_psk_ext(id_12),i_extra_1) else caught-fail) in
        {1288}let i_cr_2: bytes32 = B32(rand24_5,rand8_5) in
        {1268}let i_cur_log_2: bitstring = zero in
        {1294}let cur_log'_5: bitstring = (if v_283 then (i_cur_log_2,CH(i_cr_2,offer_9)) else caught-fail) in
        {1311}let binders_4: bitstring = (if v_289 then catch-fail(hmac(tls_h,kb_13,cur_log'_5)) else caught-fail) in
        {1312}let v_290: bool = not-caught-fail(binders_4) in
        {1330}let v_297: bitstring = catch-fail((if v_283 then (if v_289 then (if v_290 then (client_psk_ext(id_12,binders_4),(tls_h,psk_30,es_17)) else fail-any) else fail-any) else (if v_296 then (empty_psk_ext,(tls_h,NoPSK,es_18)) else fail-any))) in
        {1331}let v_298: bool = (not-caught-fail(v_297) && success?(1-proj-2-tuple(v_297))) in
        {1332}let psk_data_5: bitstring = (if v_298 then 2-proj-2-tuple(v_297) else caught-fail) in
        {1333}let psk_ext_11: preSharedKeyExt = (if v_298 then 1-proj-2-tuple(v_297) else caught-fail) in
        {1261}let ech_conf_3: echConfig = ech_config(id_11,g_11,pkR_7,cfs_dom_1,h_alg_15,a_alg_15) in
        {1336}let v_299: echConfig = (if v_298 then catch-fail(ech_conf_3) else caught-fail) in
        {1337}let v_300: bool = (not-caught-fail(v_299) && success?(1-proj-ech_config(v_299))) in
        {1338}let a_alg_ech_3: aead_alg = (if v_300 then 6-proj-ech_config(v_299) else caught-fail) in
        {1339}let h_alg_ech_3: hash_alg = (if v_300 then 5-proj-ech_config(v_299) else caught-fail) in
        {1340}let o_dom_4: domain = (if v_300 then 4-proj-ech_config(v_299) else caught-fail) in
        {1341}let pkR_8: element = (if v_300 then 3-proj-ech_config(v_299) else caught-fail) in
        {1342}let g_ech_1: group = (if v_300 then 2-proj-ech_config(v_299) else caught-fail) in
        {1343}let config_id_8: configId = (if v_300 then 1-proj-ech_config(v_299) else caught-fail) in
        {1345}new s_37[]: seed;
        {1346}let v_301: bitstring = (if v_300 then catch-fail((dh_xy(s_37,pkR_8),dh_encap_fun(g_ech_1,pkR_8,dh_xy(s_37,pkR_8)))) else caught-fail) in
        {1347}let v_302: bool = (not-caught-fail(v_301) && success?(1-proj-2-tuple(v_301))) in
        {1348}let enc_6: element = (if v_302 then 2-proj-2-tuple(v_301) else caught-fail) in
        {1349}let shared_secret_2: element = (if v_302 then 1-proj-2-tuple(v_301) else caught-fail) in
        {1344}let info_2: bitstring = (if v_300 then (tls_ech_str,ech_conf_3) else caught-fail) in
        {1352}let k_23: bitstring = (if v_302 then (hpke_info_hash,info_2) else caught-fail) in
        {1351}let s_38: bitstring = (if v_302 then zero else caught-fail) in
        {1353}let info_hash_2: bitstring = (if v_302 then catch-fail(hmac(h_alg_ech_3,s_38,k_23)) else caught-fail) in
        {1354}let v_303: bool = not-caught-fail(info_hash_2) in
        {1355}let k_24: bitstring = (if v_303 then (hpke_secret,zero) else caught-fail) in
        {1356}let xsecret_2: bitstring = (if v_303 then catch-fail(hmac(h_alg_ech_3,shared_secret_2,k_24)) else caught-fail) in
        {1357}let v_304: bool = not-caught-fail(xsecret_2) in
        {1358}let l_69: label = (if v_304 then hpke_key else caught-fail) in
        {1359}let x_76: bitstring = (if v_304 then (l_69,info_hash_2) else caught-fail) in
        {1360}let key_4: aead_key = (if v_304 then catch-fail(hmac(h_alg_ech_3,xsecret_2,x_76)) else caught-fail) in
        {1361}let v_305: bool = not-caught-fail(key_4) in
        {1362}let l_70: label = (if v_305 then hpke_base_nonce else caught-fail) in
        {1363}let x_77: bitstring = (if v_305 then (l_70,info_hash_2) else caught-fail) in
        {1364}let base_nonce_2: bitstring = (if v_305 then catch-fail(hmac(h_alg_ech_3,xsecret_2,x_77)) else caught-fail) in
        {1365}let v_306: bool = not-caught-fail(base_nonce_2) in
        {1366}let l_71: label = (if v_306 then hpke_exp else caught-fail) in
        {1367}let x_78: bitstring = (if v_306 then (l_71,info_hash_2) else caught-fail) in
        {1368}let exporter_secret_2: bitstring = (if v_306 then catch-fail(hmac(h_alg_ech_3,xsecret_2,x_78)) else caught-fail) in
        {1369}let v_307: bool = not-caught-fail(exporter_secret_2) in
        {1350}let m_28: hpkeMode = (if v_302 then S else caught-fail) in
        {1370}let v_308: bitstring = (if v_300 then catch-fail((if v_302 then (enc_6,(if v_303 then (if v_304 then (if v_305 then (if v_306 then (if v_307 then hpke_context(m_28,key_4) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) else fail-any)) else caught-fail) in
        {1371}let v_309: bool = (not-caught-fail(v_308) && success?(1-proj-2-tuple(v_308))) in
        {1372}let context_2: hpkeContext = (if v_309 then 2-proj-2-tuple(v_308) else caught-fail) in
        {1373}let enc_7: element = (if v_309 then 1-proj-2-tuple(v_308) else caught-fail) in
        {1374}new rand24_6[]: bytes24;
        {1375}new rand8_6[]: bytes8;
        {1378}new payload_6[]: bitstring;
        {1377}let v_310: bool = (if v_309 then catch-fail(use_grease_1) else caught-fail) in
        {1381}let dummy_ech_ext_1: echExt = (if is-false(v_310) then client_ECH(h_alg_ech_3,a_alg_ech_3,config_id_8,enc_7,zero) else caught-fail) in
        {1264}let o_extra_1: extraExt = empty_extra_ext in
        {1382}let o_offer1_1: params = (if is-false(v_310) then nego(TLS13,tls_h,tls_a,o_kex_ext_2,SNI(o_dom_4),dummy_ech_ext_1,empty_psk_ext,o_extra_1) else caught-fail) in
        {1376}let o_cr_2: bytes32 = (if v_309 then B32(rand24_6,rand8_6) else caught-fail) in
        {1383}let o_client_hello1_1: msg = (if is-false(v_310) then CH(o_cr_2,o_offer1_1) else caught-fail) in
        {1384}let v_311: msg = (if is-false(v_310) then catch-fail(o_client_hello1_1) else caught-fail) in
        {1385}let v_312: bool = (not-caught-fail(v_311) && (success?(1-proj-nego(2-proj-CH(v_311))) && success?(1-proj-CH(v_311)))) in
        {1386}let extra_16: extraExt = (if v_312 then 8-proj-nego(2-proj-CH(v_311)) else caught-fail) in
        {1387}let psk_ext_12: preSharedKeyExt = (if v_312 then 7-proj-nego(2-proj-CH(v_311)) else caught-fail) in
        {1388}let ech_ext_13: echExt = (if v_312 then 6-proj-nego(2-proj-CH(v_311)) else caught-fail) in
        {1389}let sni_ext_6: sniExt = (if v_312 then 5-proj-nego(2-proj-CH(v_311)) else caught-fail) in
        {1390}let kex_ext_8: keyShareExt = (if v_312 then 4-proj-nego(2-proj-CH(v_311)) else caught-fail) in
        {1391}let a_alg_16: aead_alg = (if v_312 then 3-proj-nego(2-proj-CH(v_311)) else caught-fail) in
        {1392}let h_alg_16: hash_alg = (if v_312 then 2-proj-nego(2-proj-CH(v_311)) else caught-fail) in
        {1393}let version_2: TLS_version = (if v_312 then 1-proj-nego(2-proj-CH(v_311)) else caught-fail) in
        {1394}let r_3: bytes32 = (if v_312 then 1-proj-CH(v_311) else caught-fail) in
        {1395}let v_313: echExt = (if v_312 then catch-fail(ech_ext_13) else caught-fail) in
        {1396}let v_314: bool = (not-caught-fail(v_313) && success?(1-proj-client_ECH(v_313))) in
        {1397}let payload_7: bitstring = (if v_314 then 5-proj-client_ECH(v_313) else caught-fail) in
        {1398}let enc_8: element = (if v_314 then 4-proj-client_ECH(v_313) else caught-fail) in
        {1399}let config_id_9: configId = (if v_314 then 3-proj-client_ECH(v_313) else caught-fail) in
        {1400}let a_alg_ech_4: aead_alg = (if v_314 then 2-proj-client_ECH(v_313) else caught-fail) in
        {1401}let h_alg_ech_4: hash_alg = (if v_314 then 1-proj-client_ECH(v_313) else caught-fail) in
        {1402}let client_hello_outer'_2: msg = (if v_314 then CH(r_3,nego(version_2,h_alg_16,a_alg_16,kex_ext_8,sni_ext_6,empty_ech_ext,psk_ext_12,extra_16)) else caught-fail) in
        {1403}let client_hello_AAD_2: ClientHelloOuterAAD = (if is-false(v_310) then catch-fail((if v_312 then (if v_314 then client_hello_outer_AAD(h_alg_ech_4,a_alg_ech_4,config_id_9,enc_8,client_hello_outer'_2) else fail-any) else fail-any)) else caught-fail) in
        {1404}let v_315: bool = not-caught-fail(client_hello_AAD_2) in
        {1405}let v_316: hpkeContext = (if v_315 then catch-fail(context_2) else caught-fail) in
        {1406}let v_317: bool = (not-caught-fail(v_316) && ((S =nf 1-proj-hpke_context(v_316)) && success?(1-proj-hpke_context(v_316)))) in
        {1407}let key_5: aead_key = (if v_317 then 2-proj-hpke_context(v_316) else caught-fail) in
        {1334}let i_offer_1: params = (if v_298 then nego(TLS13,tls_h,tls_a,i_kex_ext_2,SNI(i_dom_1),ech_is_inner,psk_ext_11,i_extra_1) else caught-fail) in
        {1335}let i_client_hello_3: msg = (if v_298 then CH(i_cr_2,i_offer_1) else caught-fail) in
        {1408}let payload_8: bitstring = (if v_315 then catch-fail((if v_317 then aead_enc(a_alg_ech_3,key_5,nonce_for_seal_open,client_hello_AAD_2,i_client_hello_3) else fail-any)) else caught-fail) in
        {1409}let v_318: bool = not-caught-fail(payload_8) in
        {1410}let ech_ext_14: echExt = (if v_318 then client_ECH(h_alg_ech_3,a_alg_ech_3,config_id_8,enc_7,payload_8) else caught-fail) in
        {1411}let o_offer_3: params = (if v_318 then nego(TLS13,tls_h,tls_a,o_kex_ext_2,SNI(o_dom_4),ech_ext_14,empty_psk_ext,o_extra_1) else caught-fail) in
        {1379}let ech_ext_12: echExt = (if v_310 then client_ECH(h_alg_ech_3,a_alg_ech_3,config_id_8,enc_7,payload_6) else caught-fail) in
        {1380}let o_offer_2: params = (if v_310 then nego(TLS13,tls_h,tls_a,o_kex_ext_2,SNI(o_dom_4),ech_ext_12,empty_psk_ext,o_extra_1) else caught-fail) in
        {1412}let (o_client_hello_1: msg,i_client_hello_4: msg,i_cr_3: bytes32,o_cr_3: bytes32,i_kex_ext_3: keyShareExt,o_kex_ext_3: keyShareExt,kex_data_6: bitstring,psk_data_6: bitstring) = (if v_298 then (if v_300 then (if v_309 then (if undo-catch-fail(v_310) then (CH(o_cr_2,o_offer_2),CH(o_cr_2,o_offer_2),o_cr_2,o_cr_2,o_kex_ext_2,o_kex_ext_2,kex_data_5,psk_data_5) else (if v_315 then (if v_318 then (CH(o_cr_2,o_offer_3),i_client_hello_3,i_cr_2,o_cr_2,i_kex_ext_2,o_kex_ext_2,kex_data_5,psk_data_5) else fail-any) else fail-any)) else fail-any) else fail-any) else fail-any) in
        {1413}out(io, o_client_hello_1);
        {1414}let (=tls_h,psk_32: preSharedKey,es_19: bitstring) = psk_data_6 in
        {1415}let v_319: echConfig = ech_conf_3 in
        {1416}let v_320: bool = success?(1-proj-ech_config(v_319)) in
        {1417}let al_3: aead_alg = (if v_320 then 6-proj-ech_config(v_319) else caught-fail) in
        {1418}let hl_3: hash_alg = (if v_320 then 5-proj-ech_config(v_319) else caught-fail) in
        {1419}let dom_3: domain = (if v_320 then 4-proj-ech_config(v_319) else caught-fail) in
        {1420}let public_key_3: element = (if v_320 then 3-proj-ech_config(v_319) else caught-fail) in
        {1421}let g_12: group = (if v_320 then 2-proj-ech_config(v_319) else caught-fail) in
        {1422}let id_13: configId = (if v_320 then 1-proj-ech_config(v_319) else caught-fail) in
        {1423}let o_dom_5: domain = (if v_320 then dom_3 else fail-any) in
        {1424}let v_321: echConfig = ech_conf_3 in
        {1425}let v_322: bool = success?(1-proj-ech_config(v_321)) in
        {1426}let al_4: aead_alg = (if v_322 then 6-proj-ech_config(v_321) else caught-fail) in
        {1427}let hl_4: hash_alg = (if v_322 then 5-proj-ech_config(v_321) else caught-fail) in
        {1428}let dom_4: domain = (if v_322 then 4-proj-ech_config(v_321) else caught-fail) in
        {1429}let public_key_4: element = (if v_322 then 3-proj-ech_config(v_321) else caught-fail) in
        {1430}let g_13: group = (if v_322 then 2-proj-ech_config(v_321) else caught-fail) in
        {1431}let id_14: configId = (if v_322 then 1-proj-ech_config(v_321) else caught-fail) in
        {1432}let ech_pk_1: element = (if v_322 then public_key_4 else fail-any) in
        {1433}event SanityClientCH_ECH(id_client_9,zero32,i_cr_3,o_cr_3,c_dom_7,o_dom_5,i_dom_1,ech_pk_1,psk_32,(zero,o_client_hello_1),(zero,i_client_hello_4));
        {1434}in(io, server_hello_3: msg);
        {1435}let SH(sr_13: bytes32,mode_5: params) = server_hello_3 in
        (
            {1436}if (sr_13 = rand_HelloRetryRequest) then
                {1437}out(io, illegal_parameter)
            else
                {1438}let v_323: echConfig = ech_conf_3 in
                {1439}let v_324: bool = success?(1-proj-ech_config(v_323)) in
                {1440}let al_5: aead_alg = (if v_324 then 6-proj-ech_config(v_323) else caught-fail) in
                {1441}let hl_5: hash_alg = (if v_324 then 5-proj-ech_config(v_323) else caught-fail) in
                {1442}let dom_5: domain = (if v_324 then 4-proj-ech_config(v_323) else caught-fail) in
                {1443}let public_key_5: element = (if v_324 then 3-proj-ech_config(v_323) else caught-fail) in
                {1444}let g_14: group = (if v_324 then 2-proj-ech_config(v_323) else caught-fail) in
                {1445}let id_15: configId = (if v_324 then 1-proj-ech_config(v_323) else caught-fail) in
                {1447}let o_dom_6: domain = (if v_324 then dom_5 else fail-any) in
                {1450}let SH(B32(sr24_2: bytes24,sr8_2: bytes8),mode_6: params) = server_hello_3 in
                {1451}let (i_x_3: bitstring,o_x_3: bitstring,g_15: group,=true) = kex_data_6 in
                {1452}let nego(=TLS13,=tls_h,=tls_a,server_kex_ext(DHE_kex(=g_15,gy_srv_1: element)),=empty_sni_ext,=empty_ech_ext,psk_ext_13: preSharedKeyExt,extra_17: extraExt) = mode_6 in
                (
                    {1453}let v_325: bool = (psk_ext_13 = empty_psk_ext) in
                    {1454}let psk_33: preSharedKey = (if v_325 then NoPSK else caught-fail) in
                    {1456}let k_25: bitstring = (if v_325 then catch-fail(psk2b(psk_33)) else caught-fail) in
                    {1457}let v_326: bool = not-caught-fail(k_25) in
                    {1455}let s_39: bitstring = (if v_325 then zero else caught-fail) in
                    {1458}let early_secret_20: bitstring = (if v_325 then catch-fail((if v_326 then hmac(tls_h,s_39,k_25) else fail-any)) else caught-fail) in
                    {1459}let v_327: bool = not-caught-fail(early_secret_20) in
                    {1461}let m_29: bitstring = (if v_327 then zero else caught-fail) in
                    {1462}let h_63: bitstring = (if v_327 then catch-fail(hash(tls_h,m_29)) else caught-fail) in
                    {1463}let v_328: bool = not-caught-fail(h_63) in
                    {1460}let l_72: label = (if v_327 then tls13_resumption_psk_binder_key else caught-fail) in
                    {1464}let x_79: bitstring = (if v_328 then (l_72,h_63) else caught-fail) in
                    {1465}let binder_key_15: bitstring = (if v_327 then catch-fail((if v_328 then hmac(tls_h,early_secret_20,x_79) else fail-any)) else caught-fail) in
                    {1466}let v_329: bool = not-caught-fail(binder_key_15) in
                    {1467}let v_330: bitstring = (if v_325 then catch-fail((if v_327 then (if v_329 then (early_secret_20,binder_key_15) else fail-any) else fail-any)) else caught-fail) in
                    {1468}let v_331: bool = (not-caught-fail(v_330) && success?(1-proj-2-tuple(v_330))) in
                    {1469}let kb_15: mac_key = (if v_331 then 2-proj-2-tuple(v_330) else caught-fail) in
                    {1470}let es_20: bitstring = (if v_331 then 1-proj-2-tuple(v_330) else caught-fail) in
                    {1471}let v_332: bitstring = (if not(v_325) then catch-fail(psk_data_6) else caught-fail) in
                    {1472}let v_333: bool = (not-caught-fail(v_332) && success?(1-proj-3-tuple(v_332))) in
                    {1473}let es_21: bitstring = (if v_333 then 3-proj-3-tuple(v_332) else caught-fail) in
                    {1474}let psk_34: preSharedKey = (if v_333 then 2-proj-3-tuple(v_332) else caught-fail) in
                    {1475}let h'_alg_3: hash_alg = (if v_333 then 1-proj-3-tuple(v_332) else caught-fail) in
                    {1476}let (psk_35: preSharedKey,early_secret_21: bitstring,valid_3: bool) = (if v_325 then (if v_331 then (NoPSK,es_20,true) else fail-any) else (if v_333 then (psk_34,es_21,((h'_alg_3 = tls_h) && ((server_psk_ext(1) = psk_ext_13) && use_psk_4))) else fail-any)) in
                    {1477}if valid_3 then
                    (
                        {1481}new s_40[]: seed;
                        {1478}let v_334: bool = use_grease_1 in
                        {1484}let m_30: bitstring = (if not(v_334) then catch-fail(hash(tls_h,zero)) else caught-fail) in
                        {1485}let v_336: bool = not-caught-fail(m_30) in
                        {1486}let h_64: bitstring = (if v_336 then catch-fail(hash(tls_h,m_30)) else caught-fail) in
                        {1487}let v_337: bool = not-caught-fail(h_64) in
                        {1483}let l_73: label = (if not(v_334) then tls13_derived else caught-fail) in
                        {1488}let x_80: bitstring = (if v_337 then (l_73,h_64) else caught-fail) in
                        {1489}let extra_18: bitstring = (if not(v_334) then catch-fail((if v_336 then (if v_337 then hmac(tls_h,early_secret_21,x_80) else fail-any) else fail-any)) else caught-fail) in
                        {1490}let v_338: bool = not-caught-fail(extra_18) in
                        {1479}let gxy_9: element = (if not(v_334) then catch-fail(dh_decap_fun(g_15,gy_srv_1,i_x_3)) else caught-fail) in
                        {1480}let v_335: bool = not-caught-fail(gxy_9) in
                        {1482}let i_gxy_2: element = (if not(v_334) then (if v_335 then gxy_9 else dh_f(s_40)) else caught-fail) in
                        {1491}let i_handshake_secret_2: bitstring = (if not(v_334) then catch-fail((if v_338 then hmac(tls_h,extra_18,i_gxy_2) else fail-any)) else caught-fail) in
                        {1492}let v_339: bool = not-caught-fail(i_handshake_secret_2) in
                        {1493}let SH_ECHConf_2: msg = (if v_339 then SH(B32(sr24_2,zero8),mode_6) else caught-fail) in
                        {1448}let i_cur_log_3: bitstring = (zero,i_client_hello_4) in
                        {1495}let m_31: bitstring = (if v_339 then (i_cur_log_3,SH_ECHConf_2) else caught-fail) in
                        {1496}let h_65: bitstring = (if v_339 then catch-fail(hash(tls_h,m_31)) else caught-fail) in
                        {1497}let v_340: bool = not-caught-fail(h_65) in
                        {1494}let l_74: label = (if v_339 then ech_accept_confirmation else caught-fail) in
                        {1498}let x_81: bitstring = (if v_340 then (l_74,h_65) else caught-fail) in
                        {1499}let accept_confirmation_2: bitstring = (if v_339 then catch-fail((if v_340 then hmac(tls_h,i_handshake_secret_2,x_81) else fail-any)) else caught-fail) in
                        {1500}let v_341: bool = not-caught-fail(accept_confirmation_2) in
                        {1501}let is_accepted_1: bool = (if v_334 then false else (if v_339 then (if v_341 then (sr8_2 = crop_into_bytes8(accept_confirmation_2)) else fail-any) else fail-any)) in
                        {1505}new s_41[]: seed;
                        {1519}new s_42[]: seed;
                        {1502}let v_342: bool = is_accepted_1 in
                        {1521}let psk_36: preSharedKey = (if not(v_342) then NoPSK else caught-fail) in
                        {1523}let k_26: bitstring = (if not(v_342) then catch-fail(psk2b(psk_36)) else caught-fail) in
                        {1524}let v_349: bool = not-caught-fail(k_26) in
                        {1522}let s_43: bitstring = (if not(v_342) then zero else caught-fail) in
                        {1525}let early_secret_22: bitstring = (if not(v_342) then catch-fail((if v_349 then hmac(tls_h,s_43,k_26) else fail-any)) else caught-fail) in
                        {1526}let v_350: bool = not-caught-fail(early_secret_22) in
                        {1528}let m_33: bitstring = (if v_350 then zero else caught-fail) in
                        {1529}let h_67: bitstring = (if v_350 then catch-fail(hash(tls_h,m_33)) else caught-fail) in
                        {1530}let v_351: bool = not-caught-fail(h_67) in
                        {1527}let l_76: label = (if v_350 then tls13_resumption_psk_binder_key else caught-fail) in
                        {1531}let x_83: bitstring = (if v_351 then (l_76,h_67) else caught-fail) in
                        {1532}let binder_key_16: bitstring = (if v_350 then catch-fail((if v_351 then hmac(tls_h,early_secret_22,x_83) else fail-any)) else caught-fail) in
                        {1533}let v_352: bool = not-caught-fail(binder_key_16) in
                        {1534}let v_353: bitstring = (if not(v_342) then catch-fail((if v_350 then (if v_352 then (early_secret_22,binder_key_16) else fail-any) else fail-any)) else caught-fail) in
                        {1535}let v_354: bool = (not-caught-fail(v_353) && success?(1-proj-2-tuple(v_353))) in
                        {1536}let kb_16: mac_key = (if v_354 then 2-proj-2-tuple(v_353) else caught-fail) in
                        {1537}let es_22: bitstring = (if v_354 then 1-proj-2-tuple(v_353) else caught-fail) in
                        {1539}let m_34: bitstring = (if v_354 then catch-fail(hash(tls_h,zero)) else caught-fail) in
                        {1540}let v_355: bool = not-caught-fail(m_34) in
                        {1541}let h_68: bitstring = (if v_355 then catch-fail(hash(tls_h,m_34)) else caught-fail) in
                        {1542}let v_356: bool = not-caught-fail(h_68) in
                        {1538}let l_77: label = (if v_354 then tls13_derived else caught-fail) in
                        {1543}let x_84: bitstring = (if v_356 then (l_77,h_68) else caught-fail) in
                        {1544}let extra_20: bitstring = (if v_354 then catch-fail((if v_355 then (if v_356 then hmac(tls_h,es_22,x_84) else fail-any) else fail-any)) else caught-fail) in
                        {1545}let v_357: bool = not-caught-fail(extra_20) in
                        {1517}let gxy_11: element = (if not(v_342) then catch-fail(dh_decap_fun(g_15,gy_srv_1,o_x_3)) else caught-fail) in
                        {1518}let v_348: bool = not-caught-fail(gxy_11) in
                        {1520}let o_gxy_1: element = (if not(v_342) then (if v_348 then gxy_11 else dh_f(s_42)) else caught-fail) in
                        {1508}let m_32: bitstring = (if v_342 then catch-fail(hash(tls_h,zero)) else caught-fail) in
                        {1509}let v_344: bool = not-caught-fail(m_32) in
                        {1510}let h_66: bitstring = (if v_344 then catch-fail(hash(tls_h,m_32)) else caught-fail) in
                        {1511}let v_345: bool = not-caught-fail(h_66) in
                        {1507}let l_75: label = (if v_342 then tls13_derived else caught-fail) in
                        {1512}let x_82: bitstring = (if v_345 then (l_75,h_66) else caught-fail) in
                        {1513}let extra_19: bitstring = (if v_342 then catch-fail((if v_344 then (if v_345 then hmac(tls_h,early_secret_21,x_82) else fail-any) else fail-any)) else caught-fail) in
                        {1514}let v_346: bool = not-caught-fail(extra_19) in
                        {1503}let gxy_10: element = (if v_342 then catch-fail(dh_decap_fun(g_15,gy_srv_1,i_x_3)) else caught-fail) in
                        {1504}let v_343: bool = not-caught-fail(gxy_10) in
                        {1506}let i_gxy_3: element = (if v_342 then (if v_343 then gxy_10 else dh_f(s_41)) else caught-fail) in
                        {1515}let i_handshake_secret_3: bitstring = (if v_342 then catch-fail((if v_346 then hmac(tls_h,extra_19,i_gxy_3) else fail-any)) else caught-fail) in
                        {1516}let v_347: bool = not-caught-fail(i_handshake_secret_3) in
                        {1449}let o_cur_log_1: bitstring = (zero,o_client_hello_1) in
                        {1546}let (cr_14: bytes32,handshake_secret_4: bitstring,s_dom_14: domain,cur_log_10: bitstring) = (if v_342 then (if v_347 then (i_cr_3,i_handshake_secret_3,i_dom_1,(i_cur_log_3,server_hello_3)) else fail-any) else (if v_354 then (o_cr_3,(if v_357 then hmac(tls_h,extra_20,o_gxy_1) else fail-any),o_dom_6,(o_cur_log_1,server_hello_3)) else fail-any)) in
                        {1548}let m_35: bitstring = catch-fail(hash(tls_h,zero)) in
                        {1549}let v_358: bool = not-caught-fail(m_35) in
                        {1550}let h_69: bitstring = (if v_358 then catch-fail(hash(tls_h,m_35)) else caught-fail) in
                        {1551}let v_359: bool = not-caught-fail(h_69) in
                        {1547}let l_78: label = tls13_derived in
                        {1552}let x_85: bitstring = (if v_359 then (l_78,h_69) else caught-fail) in
                        {1553}let extra_21: bitstring = catch-fail((if v_358 then (if v_359 then hmac(tls_h,handshake_secret_4,x_85) else fail-any) else fail-any)) in
                        {1554}let v_360: bool = not-caught-fail(extra_21) in
                        {1555}let k_27: bitstring = (if v_360 then zero else caught-fail) in
                        {1556}let master_secret_15: bitstring = (if v_360 then catch-fail(hmac(tls_h,handshake_secret_4,k_27)) else caught-fail) in
                        {1557}let v_361: bool = not-caught-fail(master_secret_15) in
                        {1559}let h_70: bitstring = (if v_361 then catch-fail(hash(tls_h,cur_log_10)) else caught-fail) in
                        {1560}let v_362: bool = not-caught-fail(h_70) in
                        {1558}let l_79: label = (if v_361 then tls13_client_handshake_traffic_secret else caught-fail) in
                        {1561}let x_86: bitstring = (if v_362 then (l_79,h_70) else caught-fail) in
                        {1562}let client_hts_4: bitstring = (if v_361 then catch-fail((if v_362 then hmac(tls_h,handshake_secret_4,x_86) else fail-any)) else caught-fail) in
                        {1563}let v_363: bool = not-caught-fail(client_hts_4) in
                        {1565}let h_71: bitstring = (if v_363 then catch-fail(hash(tls_h,cur_log_10)) else caught-fail) in
                        {1566}let v_364: bool = not-caught-fail(h_71) in
                        {1564}let l_80: label = (if v_363 then tls13_server_handshake_traffic_secret else caught-fail) in
                        {1567}let x_87: bitstring = (if v_364 then (l_80,h_71) else caught-fail) in
                        {1568}let server_hts_4: bitstring = (if v_363 then catch-fail((if v_364 then hmac(tls_h,handshake_secret_4,x_87) else fail-any)) else caught-fail) in
                        {1569}let v_365: bool = not-caught-fail(server_hts_4) in
                        {1571}let h_72: bitstring = (if v_365 then zero else caught-fail) in
                        {1570}let l_81: label = (if v_365 then tls13_key else caught-fail) in
                        {1572}let x_88: bitstring = (if v_365 then (l_81,h_72) else caught-fail) in
                        {1573}let client_wkh_4: bitstring = (if v_365 then catch-fail(hmac(tls_h,client_hts_4,x_88)) else caught-fail) in
                        {1574}let v_366: bool = not-caught-fail(client_wkh_4) in
                        {1576}let h_73: bitstring = (if v_366 then zero else caught-fail) in
                        {1575}let l_82: label = (if v_366 then tls13_key else caught-fail) in
                        {1577}let x_89: bitstring = (if v_366 then (l_82,h_73) else caught-fail) in
                        {1578}let server_wkh_4: bitstring = (if v_366 then catch-fail(hmac(tls_h,server_hts_4,x_89)) else caught-fail) in
                        {1579}let v_367: bool = not-caught-fail(server_wkh_4) in
                        {1581}let h_74: bitstring = (if v_367 then zero else caught-fail) in
                        {1580}let l_83: label = (if v_367 then tls13_finished else caught-fail) in
                        {1582}let x_90: bitstring = (if v_367 then (l_83,h_74) else caught-fail) in
                        {1583}let client_fk_4: bitstring = (if v_367 then catch-fail(hmac(tls_h,client_hts_4,x_90)) else caught-fail) in
                        {1584}let v_368: bool = not-caught-fail(client_fk_4) in
                        {1586}let h_75: bitstring = (if v_368 then zero else caught-fail) in
                        {1585}let l_84: label = (if v_368 then tls13_finished else caught-fail) in
                        {1587}let x_91: bitstring = (if v_368 then (l_84,h_75) else caught-fail) in
                        {1588}let server_fk_4: bitstring = (if v_368 then catch-fail(hmac(tls_h,server_hts_4,x_91)) else caught-fail) in
                        {1589}let v_369: bool = not-caught-fail(server_fk_4) in
                        {1590}let (master_secret_16: bitstring,chk_11: aead_key,shk_11: aead_key,cfin_11: mac_key,sfin_11: mac_key) = (if v_360 then (if v_361 then (if v_363 then (if v_365 then (if v_366 then (if v_367 then (if v_368 then (if v_369 then (master_secret_15,client_wkh_4,server_wkh_4,client_fk_4,server_fk_4) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                        {1446}let id_client_10: idProc = id_client_9 in
                        {1591}event SanityClientSH(id_client_10,cr_14,B32(sr24_2,sr8_2),c_dom_7,s_dom_14,handshake_secret_4,psk_35,cur_log_10);
                        {1592}if (is_accepted_1 || (psk_ext_13 = empty_psk_ext)) then
                        (
                            {1594}in(io, enc_ee_msg_3: bitstring);
                            {1595}let ee_msg_4: msg = aead_dec(tls_a,shk_11,zero,zero,enc_ee_msg_3) in
                            {1596}let EE(x_92: bitstring) = ee_msg_4 in
                            {1597}let v_370: bool = not(is_accepted_1) in
                            {1598}let v_371: bitstring = (if v_370 then catch-fail(x_92) else caught-fail) in
                            {1599}let v_372: bool = (not-caught-fail(v_371) && success?(1-proj-server_ECH(v_371))) in
                            {1600}let ech_conf_4: echConfig = (if v_372 then 1-proj-server_ECH(v_371) else caught-fail) in
                            {1602}let cur_log2_10: bitstring = (cur_log_10,ee_msg_4) in
                            {1593}let sr_14: bytes32 = B32(sr24_2,sr8_2) in
                            {1603}out(ch_client_after_EE, (id_client_10,cr_14,sr_14,tls_h,tls_a,c_dom_7,s_dom_14,psk_35,master_secret_16,chk_11,shk_11,cfin_11,sfin_11,cur_log2_10))
                        )
                        else
                            {1604}out(io, illegal_parameter)
                    )
                    else
                        {1605}out(io, illegal_parameter)
                )
                else
                    {1606}out(io, illegal_parameter)
        )
        else
            {1607}out(io, unexpected_message)
    )
)

Declared: select mess2(ch_server_SH[],*x_93,ch_server_SH[],*x')/3000
Declared: select mess2(ch_server_CRT[],*x_93,ch_server_CRT[],*x')/3000
Declared: select mess2(ch_server_FIN[],*x_93,ch_server_FIN[],*x')/3000
Declared: select mess2(ch_server_CFIN[],*x_93,ch_server_CFIN[],*x')/3000
Declared: select mess2(ch_client_after_EE[],*x_93,ch_client_after_EE[],*x')/3000
Declared: select mess2(ch_client_CRT[],*x_93,ch_client_CRT[],*x')/3000
Declared: select mess2(ch_client_FIN[],*x_93,ch_client_FIN[],*x')/3000
Declared: select mess2(ch_client_CFIN[],*x_93,ch_client_CFIN[],*x')/3000
Declared: select table2(ech_configurations(*config_3,*skR_4),ech_configurations(*config',*skR'_4))/5000
Declared: select table2(long_term_keys(*c_dom_8,*sk_d_1,*pkr,*crt_5),long_term_keys(*c_dom'_5,*sk_d',*pkr',*crt'))/5000
Declared: select table2(pre_shared_keys(*c_dom_8,*s_dom_15,*h_76,*id_16,*x_93),pre_shared_keys(*c_dom'_5,*s_dom'_5,*h',*id',*x'))/5000
-- Restriction event(Same(choice[x_93,x'])) ==> x_93 = x' encoded as event2(Same(x_93),Same(x')) ==> x_93 = x' in biprocess 1.
-- Axiom event(PreciseMess(ch,choice[id_16,id2_1],choice[st1,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id_16,id2'],choice[st1',st2'],choice[x1',x2'])) ==> st1 = st1' && x1 = x1'; event(PreciseMess(ch,choice[id1_1,id_16],choice[st1,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id_16],choice[st1',st2'],choice[x1',x2'])) ==> st2 = st2' && x2 = x2'; event(PreciseMess(ch,choice[id1_1,id2_1],choice[st_4,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st_4,st2'],choice[x1',x2'])) ==> id1_1 = id1' && x1 = x1'; event(PreciseMess(ch,choice[id1_1,id2_1],choice[st1,st_4],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st1',st_4],choice[x1',x2'])) ==> id2_1 = id2' && x2 = x2'
Encoding: 
axiom event(PreciseMess(ch,choice[id_16,id2_1],choice[st1,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id_16,id2'],choice[st1',st2'],choice[x1',x2'])) ==> st1 = st1' && x1 = x1' encoded as event2(PreciseMess(ch,id_16,st1,x1),PreciseMess(ch,id2_1,st2,x2)) && event2(PreciseMess(ch,id_16,st1',x1'),PreciseMess(ch,id2',st2',x2')) ==> st1 = st1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id_16],choice[st1,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id_16],choice[st1',st2'],choice[x1',x2'])) ==> st2 = st2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1,x1),PreciseMess(ch,id_16,st2,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id_16,st2',x2')) ==> st2 = st2' && x2 = x2'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st_4,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st_4,st2'],choice[x1',x2'])) ==> id1_1 = id1' && x1 = x1' encoded as event2(PreciseMess(ch,id1_1,st_4,x1),PreciseMess(ch,id2_1,st2,x2)) && event2(PreciseMess(ch,id1',st_4,x1'),PreciseMess(ch,id2',st2',x2')) ==> id1_1 = id1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st1,st_4],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st1',st_4],choice[x1',x2'])) ==> id2_1 = id2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1,x1),PreciseMess(ch,id2_1,st_4,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id2',st_4,x2')) ==> id2_1 = id2' && x2 = x2'
in biprocess 1.
-- Restriction event(Selected_lgt(choice[c_dom1_1,c_dom1'],choice[c_dom2_1,c_dom2'],choice[sk_2,sk'],choice[spkey,spkey'],choice[crt_5,crt'])) ==> c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && ((c_dom1_1 = c_dom1' && sk_2 = sk' && spkey = spkey' && crt_5 = crt') || c_dom1_1 ≠ c_dom1') encoded as event2(Selected_lgt(c_dom1_1,c_dom2_1,sk_2,spkey,crt_5),Selected_lgt(c_dom1',c_dom2',sk',spkey',crt')) ==> c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && ((c_dom1_1 = c_dom1' && sk_2 = sk' && spkey = spkey' && crt_5 = crt') || c_dom1_1 ≠ c_dom1') in biprocess 1.
-- Restriction event(Selected_psk(choice[c_dom1_1,c_dom1'],choice[c_dom2_1,c_dom2'],choice[s_dom1_1,s_dom1'],choice[s_dom2_1,s_dom2'],choice[id_16,id'],choice[ipsk,ipsk'])) ==> s_dom1_1 = s_dom2_1 && s_dom1' = s_dom2' && c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && c_dom1_1 = c_dom1' && ((s_dom1_1 = s_dom1' && id_16 = id' && ipsk = ipsk') || s_dom1_1 ≠ s_dom1') encoded as event2(Selected_psk(c_dom1_1,c_dom2_1,s_dom1_1,s_dom2_1,id_16,ipsk),Selected_psk(c_dom1',c_dom2',s_dom1',s_dom2',id',ipsk')) ==> s_dom1_1 = s_dom2_1 && s_dom1' = s_dom2' && c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && c_dom1_1 = c_dom1' && ((s_dom1_1 = s_dom1' && id_16 = id' && ipsk = ipsk') || s_dom1_1 ≠ s_dom1') in biprocess 1.
-- Diff-equivalence in biprocess 1.
Translating the process into Horn clauses...
Termination warning: v_373 ≠ v_374 && attacker2(v_375,v_373) && attacker2(v_375,v_374) -> bad
Selecting 0
Termination warning: v_373 ≠ v_374 && attacker2(v_373,v_375) && attacker2(v_374,v_375) -> bad
Selecting 0
Completing...
200 rules inserted. Base: 200 rules (86 with conclusion selected). Queue: 9473 rules.
Termination warning: v_373 ≠ v_374 && attacker2(v_375,v_373) && attacker2(v_375,v_374) -> bad
Selecting 0
Termination warning: v_373 ≠ v_374 && attacker2(v_373,v_375) && attacker2(v_374,v_375) -> bad
Selecting 0
400 rules inserted. Base: 400 rules (118 with conclusion selected). Queue: 9369 rules.
600 rules inserted. Base: 600 rules (118 with conclusion selected). Queue: 9169 rules.
800 rules inserted. Base: 800 rules (119 with conclusion selected). Queue: 8971 rules.
1000 rules inserted. Base: 1000 rules (121 with conclusion selected). Queue: 8775 rules.
1200 rules inserted. Base: 1200 rules (122 with conclusion selected). Queue: 8577 rules.
1400 rules inserted. Base: 1400 rules (122 with conclusion selected). Queue: 8377 rules.
1600 rules inserted. Base: 1600 rules (123 with conclusion selected). Queue: 8179 rules.
1800 rules inserted. Base: 1800 rules (124 with conclusion selected). Queue: 7981 rules.
2000 rules inserted. Base: 2000 rules (124 with conclusion selected). Queue: 7781 rules.
2200 rules inserted. Base: 2200 rules (124 with conclusion selected). Queue: 7581 rules.
2400 rules inserted. Base: 2400 rules (124 with conclusion selected). Queue: 7381 rules.
2600 rules inserted. Base: 2600 rules (124 with conclusion selected). Queue: 7181 rules.
2800 rules inserted. Base: 2800 rules (124 with conclusion selected). Queue: 6981 rules.
3000 rules inserted. Base: 3000 rules (124 with conclusion selected). Queue: 6781 rules.
3200 rules inserted. Base: 3200 rules (124 with conclusion selected). Queue: 6581 rules.
3400 rules inserted. Base: 3400 rules (124 with conclusion selected). Queue: 6381 rules.
3600 rules inserted. Base: 3600 rules (124 with conclusion selected). Queue: 6181 rules.
3800 rules inserted. Base: 3800 rules (124 with conclusion selected). Queue: 5981 rules.
4000 rules inserted. Base: 4000 rules (124 with conclusion selected). Queue: 5781 rules.
4200 rules inserted. Base: 4200 rules (124 with conclusion selected). Queue: 5581 rules.
4400 rules inserted. Base: 4400 rules (124 with conclusion selected). Queue: 5381 rules.
4600 rules inserted. Base: 4600 rules (124 with conclusion selected). Queue: 5181 rules.
4800 rules inserted. Base: 4800 rules (124 with conclusion selected). Queue: 4981 rules.
5000 rules inserted. Base: 5000 rules (124 with conclusion selected). Queue: 4781 rules.
5200 rules inserted. Base: 5200 rules (124 with conclusion selected). Queue: 4581 rules.
5400 rules inserted. Base: 5400 rules (124 with conclusion selected). Queue: 4381 rules.
5600 rules inserted. Base: 5600 rules (124 with conclusion selected). Queue: 4181 rules.
5800 rules inserted. Base: 5800 rules (124 with conclusion selected). Queue: 3981 rules.
6000 rules inserted. Base: 6000 rules (124 with conclusion selected). Queue: 3781 rules.
6200 rules inserted. Base: 6200 rules (124 with conclusion selected). Queue: 3581 rules.
6400 rules inserted. Base: 6400 rules (124 with conclusion selected). Queue: 3381 rules.
6600 rules inserted. Base: 6600 rules (135 with conclusion selected). Queue: 3333 rules.
6800 rules inserted. Base: 6800 rules (135 with conclusion selected). Queue: 3529 rules.
7000 rules inserted. Base: 7000 rules (135 with conclusion selected). Queue: 3729 rules.
7200 rules inserted. Base: 7198 rules (136 with conclusion selected). Queue: 3863 rules.
7400 rules inserted. Base: 7398 rules (136 with conclusion selected). Queue: 3729 rules.
7600 rules inserted. Base: 7598 rules (136 with conclusion selected). Queue: 3576 rules.
7800 rules inserted. Base: 7798 rules (136 with conclusion selected). Queue: 3401 rules.
8000 rules inserted. Base: 7998 rules (136 with conclusion selected). Queue: 3201 rules.
8200 rules inserted. Base: 8197 rules (140 with conclusion selected). Queue: 3087 rules.
8400 rules inserted. Base: 8397 rules (140 with conclusion selected). Queue: 2959 rules.
8600 rules inserted. Base: 8597 rules (140 with conclusion selected). Queue: 2804 rules.
8800 rules inserted. Base: 8797 rules (140 with conclusion selected). Queue: 2625 rules.
9000 rules inserted. Base: 8997 rules (140 with conclusion selected). Queue: 2425 rules.
9200 rules inserted. Base: 9196 rules (143 with conclusion selected). Queue: 2301 rules.
9400 rules inserted. Base: 9396 rules (143 with conclusion selected). Queue: 2101 rules.
9600 rules inserted. Base: 9596 rules (143 with conclusion selected). Queue: 1901 rules.
9800 rules inserted. Base: 9796 rules (143 with conclusion selected). Queue: 1719 rules.
10000 rules inserted. Base: 9957 rules (159 with conclusion selected). Queue: 1520 rules.
10200 rules inserted. Base: 10130 rules (159 with conclusion selected). Queue: 1298 rules.
10400 rules inserted. Base: 10328 rules (159 with conclusion selected). Queue: 1109 rules.
10600 rules inserted. Base: 10504 rules (159 with conclusion selected). Queue: 878 rules.
10800 rules inserted. Base: 10703 rules (177 with conclusion selected). Queue: 752 rules.
11000 rules inserted. Base: 10902 rules (211 with conclusion selected). Queue: 746 rules.
11200 rules inserted. Base: 11102 rules (226 with conclusion selected). Queue: 2929 rules.
11400 rules inserted. Base: 11302 rules (236 with conclusion selected). Queue: 2965 rules.
11600 rules inserted. Base: 11498 rules (284 with conclusion selected). Queue: 3166 rules.
11800 rules inserted. Base: 11679 rules (330 with conclusion selected). Queue: 3281 rules.
12000 rules inserted. Base: 11870 rules (346 with conclusion selected). Queue: 3162 rules.
12200 rules inserted. Base: 12070 rules (346 with conclusion selected). Queue: 3015 rules.
12400 rules inserted. Base: 12270 rules (346 with conclusion selected). Queue: 2888 rules.
12600 rules inserted. Base: 12470 rules (346 with conclusion selected). Queue: 2712 rules.
12800 rules inserted. Base: 12670 rules (346 with conclusion selected). Queue: 2541 rules.
13000 rules inserted. Base: 12870 rules (346 with conclusion selected). Queue: 2414 rules.
13200 rules inserted. Base: 13070 rules (346 with conclusion selected). Queue: 2267 rules.
13400 rules inserted. Base: 13270 rules (346 with conclusion selected). Queue: 2067 rules.
13600 rules inserted. Base: 13470 rules (346 with conclusion selected). Queue: 1940 rules.
13800 rules inserted. Base: 13670 rules (346 with conclusion selected). Queue: 1793 rules.
14000 rules inserted. Base: 13870 rules (346 with conclusion selected). Queue: 1593 rules.
14200 rules inserted. Base: 14070 rules (346 with conclusion selected). Queue: 1525 rules.
14400 rules inserted. Base: 14246 rules (346 with conclusion selected). Queue: 1469 rules.
14600 rules inserted. Base: 14436 rules (365 with conclusion selected). Queue: 1472 rules.
14800 rules inserted. Base: 14616 rules (384 with conclusion selected). Queue: 1479 rules.
15000 rules inserted. Base: 14804 rules (407 with conclusion selected). Queue: 1483 rules.
15200 rules inserted. Base: 14982 rules (436 with conclusion selected). Queue: 1515 rules.
15400 rules inserted. Base: 15182 rules (451 with conclusion selected). Queue: 1661 rules.
15600 rules inserted. Base: 15382 rules (471 with conclusion selected). Queue: 1795 rules.
15800 rules inserted. Base: 15572 rules (475 with conclusion selected). Queue: 1850 rules.
16000 rules inserted. Base: 15758 rules (479 with conclusion selected). Queue: 1854 rules.
16200 rules inserted. Base: 15949 rules (493 with conclusion selected). Queue: 1932 rules.
16400 rules inserted. Base: 16141 rules (501 with conclusion selected). Queue: 1911 rules.
16600 rules inserted. Base: 16320 rules (519 with conclusion selected). Queue: 1990 rules.
16800 rules inserted. Base: 16504 rules (522 with conclusion selected). Queue: 1928 rules.
17000 rules inserted. Base: 16680 rules (522 with conclusion selected). Queue: 1854 rules.
17200 rules inserted. Base: 16856 rules (522 with conclusion selected). Queue: 1774 rules.
17400 rules inserted. Base: 17032 rules (522 with conclusion selected). Queue: 1700 rules.
17600 rules inserted. Base: 17210 rules (522 with conclusion selected). Queue: 1656 rules.
17800 rules inserted. Base: 17378 rules (582 with conclusion selected). Queue: 1800 rules.
18000 rules inserted. Base: 17574 rules (596 with conclusion selected). Queue: 1763 rules.
18200 rules inserted. Base: 17753 rules (596 with conclusion selected). Queue: 1745 rules.
18400 rules inserted. Base: 17951 rules (606 with conclusion selected). Queue: 1719 rules.
18600 rules inserted. Base: 18128 rules (606 with conclusion selected). Queue: 1644 rules.
18800 rules inserted. Base: 18297 rules (612 with conclusion selected). Queue: 1675 rules.
19000 rules inserted. Base: 18460 rules (618 with conclusion selected). Queue: 1708 rules.
19200 rules inserted. Base: 18634 rules (622 with conclusion selected). Queue: 1727 rules.
19400 rules inserted. Base: 18812 rules (646 with conclusion selected). Queue: 1753 rules.
19600 rules inserted. Base: 18990 rules (670 with conclusion selected). Queue: 1777 rules.
19800 rules inserted. Base: 19153 rules (678 with conclusion selected). Queue: 1767 rules.
20000 rules inserted. Base: 19353 rules (678 with conclusion selected). Queue: 1735 rules.
20200 rules inserted. Base: 19516 rules (685 with conclusion selected). Queue: 1723 rules.
20400 rules inserted. Base: 19688 rules (724 with conclusion selected). Queue: 1790 rules.
20600 rules inserted. Base: 19854 rules (769 with conclusion selected). Queue: 1883 rules.
20800 rules inserted. Base: 20012 rules (803 with conclusion selected). Queue: 1954 rules.
21000 rules inserted. Base: 20167 rules (819 with conclusion selected). Queue: 1966 rules.
21200 rules inserted. Base: 20341 rules (835 with conclusion selected). Queue: 1981 rules.
21400 rules inserted. Base: 20527 rules (850 with conclusion selected). Queue: 1998 rules.
21600 rules inserted. Base: 20709 rules (855 with conclusion selected). Queue: 1997 rules.
21800 rules inserted. Base: 20878 rules (856 with conclusion selected). Queue: 1986 rules.
22000 rules inserted. Base: 21045 rules (865 with conclusion selected). Queue: 1970 rules.
22200 rules inserted. Base: 21208 rules (889 with conclusion selected). Queue: 1994 rules.
22400 rules inserted. Base: 21370 rules (913 with conclusion selected). Queue: 2016 rules.
22600 rules inserted. Base: 21534 rules (937 with conclusion selected). Queue: 2038 rules.
22800 rules inserted. Base: 21698 rules (961 with conclusion selected). Queue: 2060 rules.
23000 rules inserted. Base: 21869 rules (961 with conclusion selected). Queue: 2039 rules.
23200 rules inserted. Base: 22057 rules (965 with conclusion selected). Queue: 2031 rules.
23400 rules inserted. Base: 22247 rules (969 with conclusion selected). Queue: 2040 rules.
23600 rules inserted. Base: 22438 rules (974 with conclusion selected). Queue: 2200 rules.
23800 rules inserted. Base: 22616 rules (979 with conclusion selected). Queue: 2377 rules.
24000 rules inserted. Base: 22798 rules (987 with conclusion selected). Queue: 2361 rules.
24200 rules inserted. Base: 22964 rules (1002 with conclusion selected). Queue: 2373 rules.
24400 rules inserted. Base: 23130 rules (1015 with conclusion selected). Queue: 2383 rules.
24600 rules inserted. Base: 23310 rules (1033 with conclusion selected). Queue: 2401 rules.
24800 rules inserted. Base: 23479 rules (1051 with conclusion selected). Queue: 2421 rules.
25000 rules inserted. Base: 23629 rules (1051 with conclusion selected). Queue: 2403 rules.
25200 rules inserted. Base: 23813 rules (1081 with conclusion selected). Queue: 2448 rules.
25400 rules inserted. Base: 24001 rules (1111 with conclusion selected). Queue: 2509 rules.
25600 rules inserted. Base: 24197 rules (1111 with conclusion selected). Queue: 2505 rules.
25800 rules inserted. Base: 24371 rules (1165 with conclusion selected). Queue: 2799 rules.
26000 rules inserted. Base: 24551 rules (1165 with conclusion selected). Queue: 2797 rules.
26200 rules inserted. Base: 24739 rules (1195 with conclusion selected). Queue: 2906 rules.
26400 rules inserted. Base: 24923 rules (1199 with conclusion selected). Queue: 2898 rules.
26600 rules inserted. Base: 25123 rules (1201 with conclusion selected). Queue: 2875 rules.
26800 rules inserted. Base: 25323 rules (1205 with conclusion selected). Queue: 2869 rules.
27000 rules inserted. Base: 25523 rules (1207 with conclusion selected). Queue: 2854 rules.
27200 rules inserted. Base: 25723 rules (1211 with conclusion selected). Queue: 2842 rules.
27400 rules inserted. Base: 25905 rules (1215 with conclusion selected). Queue: 2865 rules.
27600 rules inserted. Base: 26083 rules (1237 with conclusion selected). Queue: 2865 rules.
27800 rules inserted. Base: 26264 rules (1249 with conclusion selected). Queue: 2872 rules.
28000 rules inserted. Base: 26443 rules (1261 with conclusion selected). Queue: 2873 rules.
28200 rules inserted. Base: 26640 rules (1279 with conclusion selected). Queue: 2898 rules.
28400 rules inserted. Base: 26762 rules (1309 with conclusion selected). Queue: 2907 rules.
28600 rules inserted. Base: 26922 rules (1311 with conclusion selected). Queue: 2905 rules.
28800 rules inserted. Base: 27110 rules (1311 with conclusion selected). Queue: 2903 rules.
29000 rules inserted. Base: 27259 rules (1343 with conclusion selected). Queue: 2912 rules.
29200 rules inserted. Base: 27432 rules (1364 with conclusion selected). Queue: 2949 rules.
29400 rules inserted. Base: 27621 rules (1394 with conclusion selected). Queue: 3000 rules.
29600 rules inserted. Base: 27801 rules (1424 with conclusion selected). Queue: 3048 rules.
29800 rules inserted. Base: 27981 rules (1454 with conclusion selected). Queue: 3095 rules.
30000 rules inserted. Base: 28161 rules (1469 with conclusion selected). Queue: 3109 rules.
30200 rules inserted. Base: 28309 rules (1467 with conclusion selected). Queue: 3105 rules.
30400 rules inserted. Base: 28471 rules (1475 with conclusion selected). Queue: 3043 rules.
30600 rules inserted. Base: 28653 rules (1488 with conclusion selected). Queue: 2997 rules.
30800 rules inserted. Base: 28817 rules (1489 with conclusion selected). Queue: 2975 rules.
31000 rules inserted. Base: 29017 rules (1503 with conclusion selected). Queue: 2990 rules.
31200 rules inserted. Base: 29211 rules (1517 with conclusion selected). Queue: 2981 rules.
31400 rules inserted. Base: 29359 rules (1519 with conclusion selected). Queue: 2967 rules.
31600 rules inserted. Base: 29513 rules (1519 with conclusion selected). Queue: 2939 rules.
31800 rules inserted. Base: 29711 rules (1535 with conclusion selected). Queue: 2936 rules.
32000 rules inserted. Base: 29870 rules (1551 with conclusion selected). Queue: 2937 rules.
32200 rules inserted. Base: 30041 rules (1574 with conclusion selected). Queue: 2943 rules.
32400 rules inserted. Base: 30220 rules (1586 with conclusion selected). Queue: 2930 rules.
32600 rules inserted. Base: 30386 rules (1605 with conclusion selected). Queue: 2920 rules.
32800 rules inserted. Base: 30563 rules (1620 with conclusion selected). Queue: 2922 rules.
33000 rules inserted. Base: 30731 rules (1635 with conclusion selected). Queue: 2912 rules.
33200 rules inserted. Base: 30901 rules (1647 with conclusion selected). Queue: 3143 rules.
33400 rules inserted. Base: 31040 rules (1647 with conclusion selected). Queue: 3119 rules.
33600 rules inserted. Base: 31205 rules (1647 with conclusion selected). Queue: 3079 rules.
33800 rules inserted. Base: 31370 rules (1647 with conclusion selected). Queue: 2989 rules.
34000 rules inserted. Base: 31567 rules (1647 with conclusion selected). Queue: 2924 rules.
34200 rules inserted. Base: 31767 rules (1647 with conclusion selected). Queue: 2855 rules.
34400 rules inserted. Base: 31885 rules (1647 with conclusion selected). Queue: 2852 rules.
34600 rules inserted. Base: 32063 rules (1647 with conclusion selected). Queue: 2735 rules.
34800 rules inserted. Base: 32262 rules (1655 with conclusion selected). Queue: 2686 rules.
35000 rules inserted. Base: 32408 rules (1662 with conclusion selected). Queue: 2640 rules.
35200 rules inserted. Base: 32560 rules (1666 with conclusion selected). Queue: 2604 rules.
35400 rules inserted. Base: 32724 rules (1677 with conclusion selected). Queue: 2551 rules.
35600 rules inserted. Base: 32888 rules (1684 with conclusion selected). Queue: 2522 rules.
35800 rules inserted. Base: 33040 rules (1694 with conclusion selected). Queue: 2478 rules.
36000 rules inserted. Base: 33207 rules (1699 with conclusion selected). Queue: 2433 rules.
36200 rules inserted. Base: 33388 rules (1699 with conclusion selected). Queue: 2304 rules.
36400 rules inserted. Base: 33463 rules (1699 with conclusion selected). Queue: 2215 rules.
36600 rules inserted. Base: 33537 rules (1703 with conclusion selected). Queue: 2247 rules.
36800 rules inserted. Base: 33699 rules (1707 with conclusion selected). Queue: 2281 rules.
37000 rules inserted. Base: 33899 rules (1707 with conclusion selected). Queue: 2267 rules.
37200 rules inserted. Base: 34021 rules (1707 with conclusion selected). Queue: 2273 rules.
37400 rules inserted. Base: 34176 rules (1707 with conclusion selected). Queue: 2255 rules.
37600 rules inserted. Base: 34324 rules (1711 with conclusion selected). Queue: 2237 rules.
37800 rules inserted. Base: 34458 rules (1711 with conclusion selected). Queue: 2214 rules.
38000 rules inserted. Base: 34592 rules (1711 with conclusion selected). Queue: 2184 rules.
38200 rules inserted. Base: 34738 rules (1711 with conclusion selected). Queue: 2152 rules.
38400 rules inserted. Base: 34879 rules (1711 with conclusion selected). Queue: 2120 rules.
38600 rules inserted. Base: 35035 rules (1717 with conclusion selected). Queue: 2448 rules.
38800 rules inserted. Base: 35203 rules (1727 with conclusion selected). Queue: 2436 rules.
39000 rules inserted. Base: 35362 rules (1739 with conclusion selected). Queue: 2456 rules.
39200 rules inserted. Base: 35549 rules (1739 with conclusion selected). Queue: 2420 rules.
39400 rules inserted. Base: 35696 rules (1742 with conclusion selected). Queue: 2441 rules.
39600 rules inserted. Base: 35826 rules (1756 with conclusion selected). Queue: 2497 rules.
39800 rules inserted. Base: 35982 rules (1762 with conclusion selected). Queue: 2506 rules.
40000 rules inserted. Base: 36099 rules (1769 with conclusion selected). Queue: 2539 rules.
40200 rules inserted. Base: 36213 rules (1775 with conclusion selected). Queue: 2571 rules.
40400 rules inserted. Base: 36327 rules (1779 with conclusion selected). Queue: 2595 rules.
40600 rules inserted. Base: 36447 rules (1779 with conclusion selected). Queue: 2551 rules.
40800 rules inserted. Base: 36647 rules (1779 with conclusion selected). Queue: 2363 rules.
41000 rules inserted. Base: 36835 rules (1779 with conclusion selected). Queue: 2273 rules.
41200 rules inserted. Base: 37010 rules (1787 with conclusion selected). Queue: 2270 rules.
41400 rules inserted. Base: 37191 rules (1806 with conclusion selected). Queue: 2322 rules.
41600 rules inserted. Base: 37354 rules (1807 with conclusion selected). Queue: 2300 rules.
41800 rules inserted. Base: 37498 rules (1812 with conclusion selected). Queue: 2300 rules.
42000 rules inserted. Base: 37663 rules (1831 with conclusion selected). Queue: 2364 rules.
42200 rules inserted. Base: 37831 rules (1833 with conclusion selected). Queue: 2331 rules.
42400 rules inserted. Base: 37988 rules (1846 with conclusion selected). Queue: 2339 rules.
42600 rules inserted. Base: 38152 rules (1852 with conclusion selected). Queue: 2327 rules.
42800 rules inserted. Base: 38318 rules (1860 with conclusion selected). Queue: 2319 rules.
43000 rules inserted. Base: 38486 rules (1866 with conclusion selected). Queue: 2311 rules.
43200 rules inserted. Base: 38629 rules (1873 with conclusion selected). Queue: 2471 rules.
43400 rules inserted. Base: 38787 rules (1887 with conclusion selected). Queue: 2700 rules.
43600 rules inserted. Base: 38956 rules (1897 with conclusion selected). Queue: 2659 rules.
43800 rules inserted. Base: 39134 rules (1899 with conclusion selected). Queue: 2628 rules.
44000 rules inserted. Base: 39322 rules (1899 with conclusion selected). Queue: 2619 rules.
44200 rules inserted. Base: 39478 rules (1910 with conclusion selected). Queue: 2594 rules.
44400 rules inserted. Base: 39658 rules (1925 with conclusion selected). Queue: 2608 rules.
44600 rules inserted. Base: 39823 rules (1934 with conclusion selected). Queue: 2622 rules.
44800 rules inserted. Base: 39995 rules (1944 with conclusion selected). Queue: 2623 rules.
45000 rules inserted. Base: 40160 rules (1954 with conclusion selected). Queue: 2627 rules.
45200 rules inserted. Base: 40325 rules (1964 with conclusion selected). Queue: 2632 rules.
45400 rules inserted. Base: 40493 rules (1974 with conclusion selected). Queue: 2636 rules.
45600 rules inserted. Base: 40663 rules (1974 with conclusion selected). Queue: 2854 rules.
45800 rules inserted. Base: 40841 rules (1974 with conclusion selected). Queue: 2748 rules.
46000 rules inserted. Base: 41019 rules (1980 with conclusion selected). Queue: 2616 rules.
46200 rules inserted. Base: 41190 rules (1984 with conclusion selected). Queue: 2546 rules.
46400 rules inserted. Base: 41361 rules (1990 with conclusion selected). Queue: 2560 rules.
46600 rules inserted. Base: 41539 rules (1990 with conclusion selected). Queue: 2576 rules.
46800 rules inserted. Base: 41703 rules (1994 with conclusion selected). Queue: 2570 rules.
47000 rules inserted. Base: 41889 rules (1999 with conclusion selected). Queue: 2567 rules.
47200 rules inserted. Base: 42056 rules (2006 with conclusion selected). Queue: 2585 rules.
47400 rules inserted. Base: 42211 rules (2018 with conclusion selected). Queue: 2623 rules.
47600 rules inserted. Base: 42359 rules (2030 with conclusion selected). Queue: 2742 rules.
47800 rules inserted. Base: 42506 rules (2042 with conclusion selected). Queue: 2860 rules.
48000 rules inserted. Base: 42655 rules (2054 with conclusion selected). Queue: 2981 rules.
48200 rules inserted. Base: 42842 rules (2054 with conclusion selected). Queue: 2919 rules.
48400 rules inserted. Base: 42990 rules (2054 with conclusion selected). Queue: 2756 rules.
48600 rules inserted. Base: 43146 rules (2058 with conclusion selected). Queue: 2711 rules.
48800 rules inserted. Base: 43298 rules (2062 with conclusion selected). Queue: 2698 rules.
49000 rules inserted. Base: 43456 rules (2064 with conclusion selected). Queue: 2693 rules.
49200 rules inserted. Base: 43640 rules (2064 with conclusion selected). Queue: 2681 rules.
49400 rules inserted. Base: 43800 rules (2068 with conclusion selected). Queue: 2685 rules.
49600 rules inserted. Base: 43979 rules (2069 with conclusion selected). Queue: 2673 rules.
49800 rules inserted. Base: 44157 rules (2071 with conclusion selected). Queue: 2671 rules.
50000 rules inserted. Base: 44321 rules (2078 with conclusion selected). Queue: 2598 rules.
50200 rules inserted. Base: 44484 rules (2082 with conclusion selected). Queue: 2524 rules.
50400 rules inserted. Base: 44649 rules (2085 with conclusion selected). Queue: 2413 rules.
50600 rules inserted. Base: 44820 rules (2089 with conclusion selected). Queue: 2303 rules.
50800 rules inserted. Base: 44982 rules (2096 with conclusion selected). Queue: 2226 rules.
51000 rules inserted. Base: 45143 rules (2099 with conclusion selected). Queue: 2151 rules.
51200 rules inserted. Base: 45253 rules (2099 with conclusion selected). Queue: 2067 rules.
51400 rules inserted. Base: 45405 rules (2117 with conclusion selected). Queue: 2065 rules.
51600 rules inserted. Base: 45583 rules (2127 with conclusion selected). Queue: 2038 rules.
51800 rules inserted. Base: 45750 rules (2127 with conclusion selected). Queue: 1999 rules.
52000 rules inserted. Base: 45915 rules (2129 with conclusion selected). Queue: 1981 rules.
52200 rules inserted. Base: 46069 rules (2129 with conclusion selected). Queue: 1970 rules.
52400 rules inserted. Base: 46248 rules (2130 with conclusion selected). Queue: 1953 rules.
52600 rules inserted. Base: 46392 rules (2134 with conclusion selected). Queue: 1942 rules.
52800 rules inserted. Base: 46528 rules (2138 with conclusion selected). Queue: 1931 rules.
53000 rules inserted. Base: 46660 rules (2142 with conclusion selected). Queue: 1915 rules.
53200 rules inserted. Base: 46788 rules (2146 with conclusion selected). Queue: 1903 rules.
53400 rules inserted. Base: 46908 rules (2174 with conclusion selected). Queue: 2001 rules.
53600 rules inserted. Base: 47068 rules (2192 with conclusion selected). Queue: 2255 rules.
53800 rules inserted. Base: 47216 rules (2194 with conclusion selected). Queue: 2243 rules.
54000 rules inserted. Base: 47370 rules (2202 with conclusion selected). Queue: 2261 rules.
54200 rules inserted. Base: 47504 rules (2204 with conclusion selected). Queue: 2253 rules.
54400 rules inserted. Base: 47676 rules (2208 with conclusion selected). Queue: 2267 rules.
54600 rules inserted. Base: 47821 rules (2232 with conclusion selected). Queue: 2253 rules.
54800 rules inserted. Base: 47967 rules (2248 with conclusion selected). Queue: 2236 rules.
55000 rules inserted. Base: 48105 rules (2264 with conclusion selected). Queue: 2211 rules.
55200 rules inserted. Base: 48252 rules (2270 with conclusion selected). Queue: 2189 rules.
55400 rules inserted. Base: 48420 rules (2278 with conclusion selected). Queue: 2171 rules.
55600 rules inserted. Base: 48620 rules (2278 with conclusion selected). Queue: 1975 rules.
55800 rules inserted. Base: 48791 rules (2286 with conclusion selected). Queue: 1941 rules.
56000 rules inserted. Base: 48900 rules (2288 with conclusion selected). Queue: 1939 rules.
56200 rules inserted. Base: 49052 rules (2296 with conclusion selected). Queue: 1953 rules.
56400 rules inserted. Base: 49206 rules (2300 with conclusion selected). Queue: 1947 rules.
56600 rules inserted. Base: 49350 rules (2303 with conclusion selected). Queue: 1924 rules.
56800 rules inserted. Base: 49508 rules (2323 with conclusion selected). Queue: 2056 rules.
57000 rules inserted. Base: 49646 rules (2360 with conclusion selected). Queue: 2284 rules.
57200 rules inserted. Base: 49783 rules (2391 with conclusion selected). Queue: 2583 rules.
57400 rules inserted. Base: 49918 rules (2403 with conclusion selected). Queue: 2630 rules.
57600 rules inserted. Base: 50084 rules (2407 with conclusion selected). Queue: 2606 rules.
57800 rules inserted. Base: 50246 rules (2411 with conclusion selected). Queue: 2574 rules.
58000 rules inserted. Base: 50392 rules (2416 with conclusion selected). Queue: 2587 rules.
58200 rules inserted. Base: 50546 rules (2417 with conclusion selected). Queue: 2586 rules.
58400 rules inserted. Base: 50667 rules (2418 with conclusion selected). Queue: 2567 rules.
58600 rules inserted. Base: 50817 rules (2420 with conclusion selected). Queue: 2553 rules.
58800 rules inserted. Base: 51001 rules (2423 with conclusion selected). Queue: 2447 rules.
59000 rules inserted. Base: 51178 rules (2431 with conclusion selected). Queue: 2411 rules.
59200 rules inserted. Base: 51361 rules (2435 with conclusion selected). Queue: 2317 rules.
59400 rules inserted. Base: 51542 rules (2439 with conclusion selected). Queue: 2211 rules.
59600 rules inserted. Base: 51710 rules (2445 with conclusion selected). Queue: 2162 rules.
59800 rules inserted. Base: 51891 rules (2449 with conclusion selected). Queue: 2058 rules.
60000 rules inserted. Base: 52002 rules (2451 with conclusion selected). Queue: 2038 rules.
60200 rules inserted. Base: 52162 rules (2451 with conclusion selected). Queue: 2030 rules.
60400 rules inserted. Base: 52324 rules (2451 with conclusion selected). Queue: 2022 rules.
60600 rules inserted. Base: 52470 rules (2451 with conclusion selected). Queue: 2008 rules.
60800 rules inserted. Base: 52587 rules (2458 with conclusion selected). Queue: 2032 rules.
61000 rules inserted. Base: 52724 rules (2463 with conclusion selected). Queue: 2038 rules.
61200 rules inserted. Base: 52886 rules (2465 with conclusion selected). Queue: 2026 rules.
61400 rules inserted. Base: 53036 rules (2469 with conclusion selected). Queue: 2009 rules.
61600 rules inserted. Base: 53186 rules (2473 with conclusion selected). Queue: 1993 rules.
61800 rules inserted. Base: 53334 rules (2477 with conclusion selected). Queue: 1978 rules.
62000 rules inserted. Base: 53470 rules (2483 with conclusion selected). Queue: 1982 rules.
62200 rules inserted. Base: 53592 rules (2483 with conclusion selected). Queue: 1974 rules.
62400 rules inserted. Base: 53730 rules (2483 with conclusion selected). Queue: 1970 rules.
62600 rules inserted. Base: 53908 rules (2483 with conclusion selected). Queue: 1970 rules.
62800 rules inserted. Base: 54022 rules (2483 with conclusion selected). Queue: 1968 rules.
63000 rules inserted. Base: 54180 rules (2493 with conclusion selected). Queue: 1946 rules.
63200 rules inserted. Base: 54342 rules (2495 with conclusion selected). Queue: 1948 rules.
63400 rules inserted. Base: 54480 rules (2495 with conclusion selected). Queue: 1943 rules.
63600 rules inserted. Base: 54614 rules (2495 with conclusion selected). Queue: 1939 rules.
63800 rules inserted. Base: 54736 rules (2495 with conclusion selected). Queue: 1934 rules.
64000 rules inserted. Base: 54862 rules (2497 with conclusion selected). Queue: 1940 rules.
64200 rules inserted. Base: 55000 rules (2497 with conclusion selected). Queue: 2046 rules.
64400 rules inserted. Base: 55158 rules (2497 with conclusion selected). Queue: 2025 rules.
64600 rules inserted. Base: 55308 rules (2497 with conclusion selected). Queue: 2017 rules.
64800 rules inserted. Base: 55434 rules (2501 with conclusion selected). Queue: 1984 rules.
65000 rules inserted. Base: 55582 rules (2501 with conclusion selected). Queue: 1973 rules.
65200 rules inserted. Base: 55728 rules (2505 with conclusion selected). Queue: 1938 rules.
65400 rules inserted. Base: 55858 rules (2505 with conclusion selected). Queue: 1934 rules.
65600 rules inserted. Base: 55986 rules (2505 with conclusion selected). Queue: 1929 rules.
65800 rules inserted. Base: 56098 rules (2505 with conclusion selected). Queue: 1925 rules.
66000 rules inserted. Base: 56210 rules (2505 with conclusion selected). Queue: 1836 rules.
66200 rules inserted. Base: 56310 rules (2505 with conclusion selected). Queue: 1787 rules.
66400 rules inserted. Base: 56447 rules (2505 with conclusion selected). Queue: 1777 rules.
66600 rules inserted. Base: 56575 rules (2505 with conclusion selected). Queue: 1759 rules.
66800 rules inserted. Base: 56699 rules (2515 with conclusion selected). Queue: 1763 rules.
67000 rules inserted. Base: 56860 rules (2515 with conclusion selected). Queue: 1749 rules.
67200 rules inserted. Base: 56992 rules (2517 with conclusion selected). Queue: 1779 rules.
67400 rules inserted. Base: 57113 rules (2517 with conclusion selected). Queue: 1771 rules.
67600 rules inserted. Base: 57227 rules (2517 with conclusion selected). Queue: 1803 rules.
67800 rules inserted. Base: 57334 rules (2523 with conclusion selected). Queue: 1899 rules.
68000 rules inserted. Base: 57473 rules (2529 with conclusion selected). Queue: 2079 rules.
68200 rules inserted. Base: 57610 rules (2535 with conclusion selected). Queue: 2150 rules.
68400 rules inserted. Base: 57729 rules (2535 with conclusion selected). Queue: 2121 rules.
68600 rules inserted. Base: 57860 rules (2543 with conclusion selected). Queue: 2103 rules.
68800 rules inserted. Base: 58002 rules (2543 with conclusion selected). Queue: 2084 rules.
69000 rules inserted. Base: 58082 rules (2543 with conclusion selected). Queue: 2040 rules.
69200 rules inserted. Base: 58115 rules (2543 with conclusion selected). Queue: 2036 rules.
69400 rules inserted. Base: 58195 rules (2543 with conclusion selected). Queue: 1992 rules.
69600 rules inserted. Base: 58329 rules (2543 with conclusion selected). Queue: 1905 rules.
69800 rules inserted. Base: 58437 rules (2559 with conclusion selected). Queue: 1936 rules.
70000 rules inserted. Base: 58542 rules (2575 with conclusion selected). Queue: 1968 rules.
70200 rules inserted. Base: 58615 rules (2575 with conclusion selected). Queue: 1952 rules.
70400 rules inserted. Base: 58763 rules (2583 with conclusion selected). Queue: 1947 rules.
70600 rules inserted. Base: 58883 rules (2599 with conclusion selected). Queue: 1970 rules.
70800 rules inserted. Base: 59030 rules (2615 with conclusion selected). Queue: 1987 rules.
71000 rules inserted. Base: 59148 rules (2621 with conclusion selected). Queue: 2054 rules.
71200 rules inserted. Base: 59264 rules (2627 with conclusion selected). Queue: 2159 rules.
71400 rules inserted. Base: 59366 rules (2636 with conclusion selected). Queue: 2243 rules.
71600 rules inserted. Base: 59522 rules (2649 with conclusion selected). Queue: 2233 rules.
71800 rules inserted. Base: 59606 rules (2649 with conclusion selected). Queue: 2231 rules.
72000 rules inserted. Base: 59744 rules (2659 with conclusion selected). Queue: 2189 rules.
72200 rules inserted. Base: 59847 rules (2659 with conclusion selected). Queue: 2178 rules.
72400 rules inserted. Base: 60020 rules (2677 with conclusion selected). Queue: 2190 rules.
72600 rules inserted. Base: 60145 rules (2687 with conclusion selected). Queue: 2149 rules.
72800 rules inserted. Base: 60304 rules (2691 with conclusion selected). Queue: 2134 rules.
73000 rules inserted. Base: 60410 rules (2710 with conclusion selected). Queue: 2167 rules.
73200 rules inserted. Base: 60528 rules (2733 with conclusion selected). Queue: 2209 rules.
73400 rules inserted. Base: 60640 rules (2761 with conclusion selected). Queue: 2269 rules.
73600 rules inserted. Base: 60745 rules (2784 with conclusion selected). Queue: 2313 rules.
73800 rules inserted. Base: 60870 rules (2803 with conclusion selected). Queue: 2340 rules.
74000 rules inserted. Base: 61050 rules (2803 with conclusion selected). Queue: 2340 rules.
74200 rules inserted. Base: 61232 rules (2803 with conclusion selected). Queue: 2340 rules.
74400 rules inserted. Base: 61386 rules (2805 with conclusion selected). Queue: 2351 rules.
74600 rules inserted. Base: 61541 rules (2811 with conclusion selected). Queue: 2366 rules.
74800 rules inserted. Base: 61672 rules (2820 with conclusion selected). Queue: 2380 rules.
75000 rules inserted. Base: 61790 rules (2821 with conclusion selected). Queue: 2381 rules.
75200 rules inserted. Base: 61954 rules (2836 with conclusion selected). Queue: 2312 rules.
75400 rules inserted. Base: 62110 rules (2851 with conclusion selected). Queue: 2267 rules.
75600 rules inserted. Base: 62246 rules (2865 with conclusion selected). Queue: 2213 rules.
75800 rules inserted. Base: 62410 rules (2881 with conclusion selected). Queue: 2154 rules.
76000 rules inserted. Base: 62543 rules (2891 with conclusion selected). Queue: 2115 rules.
76200 rules inserted. Base: 62707 rules (2901 with conclusion selected). Queue: 2070 rules.
76400 rules inserted. Base: 62722 rules (2901 with conclusion selected). Queue: 2059 rules.
76600 rules inserted. Base: 62746 rules (2901 with conclusion selected). Queue: 2045 rules.
76800 rules inserted. Base: 62913 rules (2901 with conclusion selected). Queue: 2025 rules.
77000 rules inserted. Base: 63060 rules (2903 with conclusion selected). Queue: 2009 rules.
77200 rules inserted. Base: 63240 rules (2911 with conclusion selected). Queue: 1991 rules.
77400 rules inserted. Base: 63388 rules (2911 with conclusion selected). Queue: 1975 rules.
77600 rules inserted. Base: 63560 rules (2911 with conclusion selected). Queue: 1973 rules.
77800 rules inserted. Base: 63728 rules (2911 with conclusion selected). Queue: 1971 rules.
78000 rules inserted. Base: 63900 rules (2911 with conclusion selected). Queue: 1965 rules.
78200 rules inserted. Base: 64052 rules (2911 with conclusion selected). Queue: 1959 rules.
78400 rules inserted. Base: 64128 rules (2911 with conclusion selected). Queue: 1946 rules.
78600 rules inserted. Base: 64208 rules (2911 with conclusion selected). Queue: 1930 rules.
78800 rules inserted. Base: 64337 rules (2911 with conclusion selected). Queue: 1918 rules.
79000 rules inserted. Base: 64481 rules (2911 with conclusion selected). Queue: 1894 rules.
79200 rules inserted. Base: 64655 rules (2911 with conclusion selected). Queue: 1857 rules.
79400 rules inserted. Base: 64773 rules (2911 with conclusion selected). Queue: 1837 rules.
79600 rules inserted. Base: 64871 rules (2911 with conclusion selected). Queue: 1823 rules.
79800 rules inserted. Base: 64968 rules (2911 with conclusion selected). Queue: 1807 rules.
80000 rules inserted. Base: 65065 rules (2911 with conclusion selected). Queue: 1793 rules.
80200 rules inserted. Base: 65163 rules (2911 with conclusion selected). Queue: 1764 rules.
80400 rules inserted. Base: 65318 rules (2911 with conclusion selected). Queue: 1746 rules.
80600 rules inserted. Base: 65486 rules (2912 with conclusion selected). Queue: 1733 rules.
80800 rules inserted. Base: 65662 rules (2914 with conclusion selected). Queue: 1715 rules.
81000 rules inserted. Base: 65800 rules (2918 with conclusion selected). Queue: 1710 rules.
81200 rules inserted. Base: 65929 rules (2918 with conclusion selected). Queue: 1685 rules.
81400 rules inserted. Base: 66018 rules (2918 with conclusion selected). Queue: 1669 rules.
81600 rules inserted. Base: 66105 rules (2918 with conclusion selected). Queue: 1653 rules.
81800 rules inserted. Base: 66192 rules (2918 with conclusion selected). Queue: 1635 rules.
82000 rules inserted. Base: 66210 rules (2922 with conclusion selected). Queue: 1635 rules.
82200 rules inserted. Base: 66131 rules (2922 with conclusion selected). Queue: 1635 rules.
82400 rules inserted. Base: 66197 rules (2922 with conclusion selected). Queue: 1633 rules.
82600 rules inserted. Base: 66361 rules (2922 with conclusion selected). Queue: 1618 rules.
82800 rules inserted. Base: 66514 rules (2922 with conclusion selected). Queue: 1603 rules.
83000 rules inserted. Base: 66649 rules (2922 with conclusion selected). Queue: 1581 rules.
83200 rules inserted. Base: 66785 rules (2922 with conclusion selected). Queue: 1561 rules.
83400 rules inserted. Base: 66910 rules (2922 with conclusion selected). Queue: 1538 rules.
83600 rules inserted. Base: 67025 rules (2924 with conclusion selected). Queue: 1527 rules.
83800 rules inserted. Base: 67173 rules (2924 with conclusion selected). Queue: 1519 rules.
84000 rules inserted. Base: 67345 rules (2924 with conclusion selected). Queue: 1499 rules.
84200 rules inserted. Base: 67493 rules (2924 with conclusion selected). Queue: 1476 rules.
84400 rules inserted. Base: 67628 rules (2924 with conclusion selected). Queue: 1448 rules.
84600 rules inserted. Base: 67577 rules (2924 with conclusion selected). Queue: 1448 rules.
84800 rules inserted. Base: 67561 rules (2924 with conclusion selected). Queue: 1448 rules.
85000 rules inserted. Base: 67512 rules (2924 with conclusion selected). Queue: 1448 rules.
85200 rules inserted. Base: 67510 rules (2932 with conclusion selected). Queue: 1464 rules.
85400 rules inserted. Base: 67420 rules (2940 with conclusion selected). Queue: 1484 rules.
85600 rules inserted. Base: 67577 rules (2940 with conclusion selected). Queue: 1476 rules.
85800 rules inserted. Base: 67718 rules (2948 with conclusion selected). Queue: 1483 rules.
86000 rules inserted. Base: 67839 rules (2956 with conclusion selected). Queue: 1480 rules.
86200 rules inserted. Base: 67954 rules (2956 with conclusion selected). Queue: 1472 rules.
86400 rules inserted. Base: 68057 rules (2956 with conclusion selected). Queue: 1460 rules.
86600 rules inserted. Base: 68207 rules (2995 with conclusion selected). Queue: 1493 rules.
86800 rules inserted. Base: 68383 rules (3103 with conclusion selected). Queue: 1741 rules.
87000 rules inserted. Base: 68555 rules (3168 with conclusion selected). Queue: 1944 rules.
87200 rules inserted. Base: 68717 rules (3180 with conclusion selected). Queue: 1945 rules.
87400 rules inserted. Base: 68809 rules (3188 with conclusion selected). Queue: 1944 rules.
87600 rules inserted. Base: 68764 rules (3208 with conclusion selected). Queue: 1989 rules.
87800 rules inserted. Base: 68732 rules (3228 with conclusion selected). Queue: 2034 rules.
88000 rules inserted. Base: 68778 rules (3244 with conclusion selected). Queue: 2058 rules.
88200 rules inserted. Base: 68975 rules (3244 with conclusion selected). Queue: 1991 rules.
88400 rules inserted. Base: 69168 rules (3244 with conclusion selected). Queue: 1926 rules.
88600 rules inserted. Base: 69350 rules (3244 with conclusion selected). Queue: 1866 rules.
88800 rules inserted. Base: 69547 rules (3244 with conclusion selected). Queue: 1800 rules.
89000 rules inserted. Base: 69711 rules (3244 with conclusion selected). Queue: 1798 rules.
89200 rules inserted. Base: 69876 rules (3254 with conclusion selected). Queue: 1797 rules.
89400 rules inserted. Base: 70048 rules (3320 with conclusion selected). Queue: 2072 rules.
89600 rules inserted. Base: 70219 rules (3388 with conclusion selected). Queue: 2342 rules.
89800 rules inserted. Base: 70392 rules (3458 with conclusion selected). Queue: 2616 rules.
90000 rules inserted. Base: 70557 rules (3526 with conclusion selected). Queue: 2896 rules.
90200 rules inserted. Base: 70716 rules (3526 with conclusion selected). Queue: 2896 rules.
90400 rules inserted. Base: 70883 rules (3526 with conclusion selected). Queue: 2896 rules.
90600 rules inserted. Base: 71080 rules (3526 with conclusion selected). Queue: 2896 rules.
90800 rules inserted. Base: 71241 rules (3527 with conclusion selected). Queue: 2889 rules.
91000 rules inserted. Base: 71395 rules (3529 with conclusion selected). Queue: 2864 rules.
91200 rules inserted. Base: 71585 rules (3529 with conclusion selected). Queue: 2806 rules.
91400 rules inserted. Base: 71767 rules (3529 with conclusion selected). Queue: 2744 rules.
91600 rules inserted. Base: 71949 rules (3529 with conclusion selected). Queue: 2682 rules.
91800 rules inserted. Base: 72131 rules (3529 with conclusion selected). Queue: 2620 rules.
92000 rules inserted. Base: 72313 rules (3529 with conclusion selected). Queue: 2558 rules.
92200 rules inserted. Base: 72495 rules (3529 with conclusion selected). Queue: 2496 rules.
92400 rules inserted. Base: 72681 rules (3529 with conclusion selected). Queue: 2434 rules.
92600 rules inserted. Base: 72876 rules (3529 with conclusion selected). Queue: 2368 rules.
92800 rules inserted. Base: 73059 rules (3529 with conclusion selected). Queue: 2306 rules.
93000 rules inserted. Base: 73213 rules (3533 with conclusion selected). Queue: 2292 rules.
93200 rules inserted. Base: 73408 rules (3533 with conclusion selected). Queue: 2292 rules.
93400 rules inserted. Base: 73578 rules (3533 with conclusion selected). Queue: 2288 rules.
93600 rules inserted. Base: 73749 rules (3533 with conclusion selected). Queue: 2280 rules.
93800 rules inserted. Base: 73885 rules (3533 with conclusion selected). Queue: 2271 rules.
94000 rules inserted. Base: 74054 rules (3533 with conclusion selected). Queue: 2251 rules.
94200 rules inserted. Base: 74202 rules (3533 with conclusion selected). Queue: 2251 rules.
94400 rules inserted. Base: 74376 rules (3533 with conclusion selected). Queue: 2251 rules.
94600 rules inserted. Base: 74550 rules (3533 with conclusion selected). Queue: 2251 rules.
94800 rules inserted. Base: 74720 rules (3533 with conclusion selected). Queue: 2251 rules.
95000 rules inserted. Base: 74872 rules (3533 with conclusion selected). Queue: 2251 rules.
95200 rules inserted. Base: 75029 rules (3535 with conclusion selected). Queue: 2255 rules.
95400 rules inserted. Base: 75219 rules (3535 with conclusion selected). Queue: 2255 rules.
95600 rules inserted. Base: 75396 rules (3535 with conclusion selected). Queue: 2255 rules.
95800 rules inserted. Base: 75594 rules (3535 with conclusion selected). Queue: 2255 rules.
96000 rules inserted. Base: 75736 rules (3535 with conclusion selected). Queue: 2347 rules.
96200 rules inserted. Base: 75905 rules (3535 with conclusion selected). Queue: 2345 rules.
96400 rules inserted. Base: 76082 rules (3535 with conclusion selected). Queue: 2343 rules.
96600 rules inserted. Base: 76236 rules (3535 with conclusion selected). Queue: 2339 rules.
96800 rules inserted. Base: 76413 rules (3535 with conclusion selected). Queue: 2337 rules.
97000 rules inserted. Base: 76590 rules (3535 with conclusion selected). Queue: 2335 rules.
97200 rules inserted. Base: 76763 rules (3535 with conclusion selected). Queue: 2333 rules.
97400 rules inserted. Base: 76925 rules (3535 with conclusion selected). Queue: 2329 rules.
97600 rules inserted. Base: 77089 rules (3535 with conclusion selected). Queue: 2329 rules.
97800 rules inserted. Base: 77263 rules (3535 with conclusion selected). Queue: 2329 rules.
98000 rules inserted. Base: 77463 rules (3535 with conclusion selected). Queue: 2329 rules.
98200 rules inserted. Base: 77556 rules (3535 with conclusion selected). Queue: 2323 rules.
98400 rules inserted. Base: 77655 rules (3535 with conclusion selected). Queue: 2318 rules.
98600 rules inserted. Base: 77817 rules (3535 with conclusion selected). Queue: 2310 rules.
98800 rules inserted. Base: 77984 rules (3535 with conclusion selected). Queue: 2310 rules.
99000 rules inserted. Base: 78164 rules (3535 with conclusion selected). Queue: 2310 rules.
99200 rules inserted. Base: 78344 rules (3535 with conclusion selected). Queue: 2310 rules.
99400 rules inserted. Base: 78504 rules (3535 with conclusion selected). Queue: 2310 rules.
99600 rules inserted. Base: 78684 rules (3535 with conclusion selected). Queue: 2310 rules.
99800 rules inserted. Base: 78808 rules (3535 with conclusion selected). Queue: 2306 rules.
100000 rules inserted. Base: 79008 rules (3535 with conclusion selected). Queue: 2302 rules.
100200 rules inserted. Base: 79166 rules (3535 with conclusion selected). Queue: 2298 rules.
100400 rules inserted. Base: 79361 rules (3535 with conclusion selected). Queue: 2296 rules.
100600 rules inserted. Base: 79414 rules (3535 with conclusion selected). Queue: 2297 rules.
100800 rules inserted. Base: 79536 rules (3535 with conclusion selected). Queue: 2308 rules.
101000 rules inserted. Base: 79715 rules (3535 with conclusion selected). Queue: 2308 rules.
101200 rules inserted. Base: 79894 rules (3535 with conclusion selected). Queue: 2308 rules.
101400 rules inserted. Base: 80052 rules (3535 with conclusion selected). Queue: 2308 rules.
101600 rules inserted. Base: 80231 rules (3535 with conclusion selected). Queue: 2308 rules.
101800 rules inserted. Base: 80410 rules (3535 with conclusion selected). Queue: 2308 rules.
102000 rules inserted. Base: 80585 rules (3535 with conclusion selected). Queue: 2308 rules.
102200 rules inserted. Base: 80724 rules (3549 with conclusion selected). Queue: 2316 rules.
102400 rules inserted. Base: 80896 rules (3563 with conclusion selected). Queue: 2318 rules.
102600 rules inserted. Base: 81096 rules (3563 with conclusion selected). Queue: 2314 rules.
102800 rules inserted. Base: 81275 rules (3563 with conclusion selected). Queue: 2307 rules.
103000 rules inserted. Base: 81426 rules (3571 with conclusion selected). Queue: 2295 rules.
103200 rules inserted. Base: 81608 rules (3579 with conclusion selected). Queue: 2274 rules.
103400 rules inserted. Base: 81742 rules (3579 with conclusion selected). Queue: 2266 rules.
103600 rules inserted. Base: 81909 rules (3579 with conclusion selected). Queue: 2262 rules.
103800 rules inserted. Base: 82076 rules (3579 with conclusion selected). Queue: 2258 rules.
104000 rules inserted. Base: 82231 rules (3579 with conclusion selected). Queue: 2254 rules.
104200 rules inserted. Base: 82377 rules (3579 with conclusion selected). Queue: 2246 rules.
104400 rules inserted. Base: 82526 rules (3592 with conclusion selected). Queue: 2267 rules.
104600 rules inserted. Base: 82726 rules (3595 with conclusion selected). Queue: 2279 rules.
104800 rules inserted. Base: 82926 rules (3611 with conclusion selected). Queue: 2312 rules.
105000 rules inserted. Base: 83120 rules (3611 with conclusion selected). Queue: 2307 rules.
105200 rules inserted. Base: 83176 rules (3611 with conclusion selected). Queue: 2304 rules.
105400 rules inserted. Base: 83354 rules (3639 with conclusion selected). Queue: 2331 rules.
105600 rules inserted. Base: 83532 rules (3650 with conclusion selected). Queue: 2330 rules.
105800 rules inserted. Base: 83700 rules (3667 with conclusion selected). Queue: 2329 rules.
106000 rules inserted. Base: 83866 rules (3683 with conclusion selected). Queue: 2327 rules.
106200 rules inserted. Base: 84044 rules (3694 with conclusion selected). Queue: 2326 rules.
106400 rules inserted. Base: 84222 rules (3709 with conclusion selected). Queue: 2321 rules.
106600 rules inserted. Base: 84374 rules (3727 with conclusion selected). Queue: 2325 rules.
106800 rules inserted. Base: 84560 rules (3729 with conclusion selected). Queue: 2303 rules.
107000 rules inserted. Base: 84756 rules (3731 with conclusion selected). Queue: 2281 rules.
107200 rules inserted. Base: 84956 rules (3731 with conclusion selected). Queue: 2281 rules.
107400 rules inserted. Base: 85084 rules (3731 with conclusion selected). Queue: 2269 rules.
107600 rules inserted. Base: 85202 rules (3735 with conclusion selected). Queue: 2221 rules.
107800 rules inserted. Base: 85396 rules (3735 with conclusion selected). Queue: 2184 rules.
108000 rules inserted. Base: 85596 rules (3763 with conclusion selected). Queue: 2234 rules.
108200 rules inserted. Base: 85796 rules (3777 with conclusion selected). Queue: 2259 rules.
108400 rules inserted. Base: 85996 rules (3791 with conclusion selected). Queue: 2284 rules.
108600 rules inserted. Base: 86196 rules (3819 with conclusion selected). Queue: 2334 rules.
108800 rules inserted. Base: 86396 rules (3833 with conclusion selected). Queue: 2359 rules.
109000 rules inserted. Base: 86548 rules (3847 with conclusion selected). Queue: 2378 rules.
109200 rules inserted. Base: 86748 rules (3847 with conclusion selected). Queue: 2476 rules.
109400 rules inserted. Base: 86936 rules (3847 with conclusion selected). Queue: 2542 rules.
109600 rules inserted. Base: 87127 rules (3847 with conclusion selected). Queue: 2608 rules.
109800 rules inserted. Base: 87312 rules (3847 with conclusion selected). Queue: 2586 rules.
110000 rules inserted. Base: 87506 rules (3847 with conclusion selected). Queue: 2575 rules.
110200 rules inserted. Base: 87700 rules (3850 with conclusion selected). Queue: 2545 rules.
110400 rules inserted. Base: 87894 rules (3853 with conclusion selected). Queue: 2513 rules.
110600 rules inserted. Base: 88090 rules (3855 with conclusion selected). Queue: 2491 rules.
110800 rules inserted. Base: 88286 rules (3857 with conclusion selected). Queue: 2469 rules.
111000 rules inserted. Base: 88482 rules (3859 with conclusion selected). Queue: 2447 rules.
111200 rules inserted. Base: 88678 rules (3861 with conclusion selected). Queue: 2425 rules.
111400 rules inserted. Base: 88818 rules (3863 with conclusion selected). Queue: 2403 rules.
111600 rules inserted. Base: 89016 rules (3863 with conclusion selected). Queue: 2403 rules.
111800 rules inserted. Base: 89202 rules (3863 with conclusion selected). Queue: 2403 rules.
112000 rules inserted. Base: 89400 rules (3863 with conclusion selected). Queue: 2403 rules.
112200 rules inserted. Base: 89595 rules (3863 with conclusion selected). Queue: 2399 rules.
112400 rules inserted. Base: 89536 rules (3863 with conclusion selected). Queue: 2400 rules.
112600 rules inserted. Base: 89724 rules (3863 with conclusion selected). Queue: 2458 rules.
112800 rules inserted. Base: 89916 rules (3863 with conclusion selected). Queue: 2533 rules.
113000 rules inserted. Base: 90108 rules (3863 with conclusion selected). Queue: 2612 rules.
113200 rules inserted. Base: 90296 rules (3863 with conclusion selected). Queue: 2684 rules.
113400 rules inserted. Base: 90484 rules (3863 with conclusion selected). Queue: 2749 rules.
113600 rules inserted. Base: 90676 rules (3863 with conclusion selected). Queue: 2828 rules.
113800 rules inserted. Base: 90810 rules (3863 with conclusion selected). Queue: 2846 rules.
114000 rules inserted. Base: 91010 rules (3863 with conclusion selected). Queue: 2846 rules.
114200 rules inserted. Base: 91190 rules (3863 with conclusion selected). Queue: 2846 rules.
114400 rules inserted. Base: 91390 rules (3863 with conclusion selected). Queue: 2846 rules.
114600 rules inserted. Base: 91581 rules (3863 with conclusion selected). Queue: 2848 rules.
114800 rules inserted. Base: 91754 rules (3863 with conclusion selected). Queue: 2845 rules.
115000 rules inserted. Base: 91946 rules (3863 with conclusion selected). Queue: 2842 rules.
115200 rules inserted. Base: 92136 rules (3863 with conclusion selected). Queue: 2842 rules.
115400 rules inserted. Base: 92326 rules (3863 with conclusion selected). Queue: 2842 rules.
115600 rules inserted. Base: 92516 rules (3863 with conclusion selected). Queue: 2842 rules.
115800 rules inserted. Base: 92706 rules (3863 with conclusion selected). Queue: 2842 rules.
116000 rules inserted. Base: 92896 rules (3863 with conclusion selected). Queue: 2842 rules.
116200 rules inserted. Base: 93086 rules (3863 with conclusion selected). Queue: 2842 rules.
116400 rules inserted. Base: 93276 rules (3863 with conclusion selected). Queue: 2842 rules.
116600 rules inserted. Base: 93432 rules (3867 with conclusion selected). Queue: 2836 rules.
116800 rules inserted. Base: 93628 rules (3867 with conclusion selected). Queue: 2836 rules.
117000 rules inserted. Base: 93824 rules (3867 with conclusion selected). Queue: 2836 rules.
117200 rules inserted. Base: 94016 rules (3867 with conclusion selected). Queue: 2836 rules.
117400 rules inserted. Base: 94216 rules (3867 with conclusion selected). Queue: 2836 rules.
117600 rules inserted. Base: 94167 rules (3867 with conclusion selected). Queue: 2831 rules.
117800 rules inserted. Base: 94348 rules (3867 with conclusion selected). Queue: 2825 rules.
118000 rules inserted. Base: 94536 rules (3867 with conclusion selected). Queue: 2825 rules.
118200 rules inserted. Base: 94724 rules (3867 with conclusion selected). Queue: 2825 rules.
118400 rules inserted. Base: 94912 rules (3867 with conclusion selected). Queue: 2825 rules.
118600 rules inserted. Base: 95100 rules (3867 with conclusion selected). Queue: 2825 rules.
118800 rules inserted. Base: 95288 rules (3867 with conclusion selected). Queue: 2825 rules.
119000 rules inserted. Base: 95476 rules (3867 with conclusion selected). Queue: 2825 rules.
119200 rules inserted. Base: 95664 rules (3867 with conclusion selected). Queue: 2825 rules.
119400 rules inserted. Base: 95840 rules (3868 with conclusion selected). Queue: 2831 rules.
119600 rules inserted. Base: 96018 rules (3875 with conclusion selected). Queue: 2905 rules.
119800 rules inserted. Base: 96218 rules (3875 with conclusion selected). Queue: 2963 rules.
120000 rules inserted. Base: 96400 rules (3875 with conclusion selected). Queue: 3015 rules.
120200 rules inserted. Base: 96600 rules (3875 with conclusion selected). Queue: 3073 rules.
120400 rules inserted. Base: 96791 rules (3972 with conclusion selected). Queue: 3547 rules.
120600 rules inserted. Base: 96976 rules (3995 with conclusion selected). Queue: 3654 rules.
120800 rules inserted. Base: 97168 rules (3995 with conclusion selected). Queue: 3654 rules.
121000 rules inserted. Base: 97360 rules (3995 with conclusion selected). Queue: 3654 rules.
121200 rules inserted. Base: 97552 rules (3995 with conclusion selected). Queue: 3654 rules.
121400 rules inserted. Base: 97744 rules (3995 with conclusion selected). Queue: 3654 rules.
121600 rules inserted. Base: 97936 rules (3995 with conclusion selected). Queue: 3654 rules.
121800 rules inserted. Base: 98128 rules (3995 with conclusion selected). Queue: 3654 rules.
122000 rules inserted. Base: 98320 rules (3995 with conclusion selected). Queue: 3654 rules.
122200 rules inserted. Base: 98512 rules (3995 with conclusion selected). Queue: 3654 rules.
122400 rules inserted. Base: 98674 rules (3997 with conclusion selected). Queue: 3648 rules.
122600 rules inserted. Base: 98874 rules (3997 with conclusion selected). Queue: 3648 rules.
122800 rules inserted. Base: 99063 rules (3997 with conclusion selected). Queue: 3647 rules.
123000 rules inserted. Base: 99246 rules (3997 with conclusion selected). Queue: 3646 rules.
123200 rules inserted. Base: 99446 rules (3997 with conclusion selected). Queue: 3646 rules.
123400 rules inserted. Base: 99645 rules (3997 with conclusion selected). Queue: 3621 rules.
123600 rules inserted. Base: 99843 rules (3997 with conclusion selected). Queue: 3556 rules.
123800 rules inserted. Base: 100039 rules (3997 with conclusion selected). Queue: 3492 rules.
124000 rules inserted. Base: 100235 rules (3997 with conclusion selected). Queue: 3429 rules.
124200 rules inserted. Base: 100416 rules (3997 with conclusion selected). Queue: 3450 rules.
124400 rules inserted. Base: 100605 rules (3997 with conclusion selected). Queue: 3505 rules.
124600 rules inserted. Base: 100794 rules (3997 with conclusion selected). Queue: 3560 rules.
124800 rules inserted. Base: 100983 rules (3997 with conclusion selected). Queue: 3615 rules.
125000 rules inserted. Base: 101172 rules (3997 with conclusion selected). Queue: 3612 rules.
125200 rules inserted. Base: 101364 rules (3997 with conclusion selected). Queue: 3668 rules.
125400 rules inserted. Base: 101556 rules (3997 with conclusion selected). Queue: 3724 rules.
125600 rules inserted. Base: 101750 rules (3997 with conclusion selected). Queue: 3780 rules.
125800 rules inserted. Base: 101939 rules (3997 with conclusion selected). Queue: 3835 rules.
126000 rules inserted. Base: 102044 rules (4001 with conclusion selected). Queue: 3828 rules.
126200 rules inserted. Base: 102224 rules (4001 with conclusion selected). Queue: 3828 rules.
126400 rules inserted. Base: 102382 rules (4001 with conclusion selected). Queue: 3828 rules.
126600 rules inserted. Base: 102506 rules (4005 with conclusion selected). Queue: 3832 rules.
126800 rules inserted. Base: 102646 rules (4005 with conclusion selected). Queue: 3832 rules.
127000 rules inserted. Base: 102837 rules (4005 with conclusion selected). Queue: 3832 rules.
127200 rules inserted. Base: 103033 rules (4005 with conclusion selected). Queue: 3832 rules.
127400 rules inserted. Base: 103225 rules (4005 with conclusion selected). Queue: 3828 rules.
127600 rules inserted. Base: 103410 rules (4013 with conclusion selected). Queue: 3830 rules.
127800 rules inserted. Base: 103604 rules (4013 with conclusion selected). Queue: 3830 rules.
128000 rules inserted. Base: 103794 rules (4013 with conclusion selected). Queue: 3829 rules.
128200 rules inserted. Base: 103978 rules (4013 with conclusion selected). Queue: 3828 rules.
128400 rules inserted. Base: 104162 rules (4013 with conclusion selected). Queue: 3827 rules.
128600 rules inserted. Base: 104350 rules (4013 with conclusion selected). Queue: 3826 rules.
128800 rules inserted. Base: 104546 rules (4013 with conclusion selected). Queue: 3826 rules.
129000 rules inserted. Base: 104730 rules (4013 with conclusion selected). Queue: 3825 rules.
129200 rules inserted. Base: 104914 rules (4013 with conclusion selected). Queue: 3824 rules.
129400 rules inserted. Base: 105098 rules (4013 with conclusion selected). Queue: 3823 rules.
129600 rules inserted. Base: 105298 rules (4013 with conclusion selected). Queue: 3823 rules.
129800 rules inserted. Base: 105456 rules (4013 with conclusion selected). Queue: 3810 rules.
130000 rules inserted. Base: 105656 rules (4013 with conclusion selected). Queue: 3810 rules.
130200 rules inserted. Base: 105856 rules (4013 with conclusion selected). Queue: 3810 rules.
130400 rules inserted. Base: 106040 rules (4013 with conclusion selected). Queue: 3802 rules.
130600 rules inserted. Base: 106240 rules (4013 with conclusion selected). Queue: 3802 rules.
130800 rules inserted. Base: 106439 rules (4013 with conclusion selected). Queue: 3802 rules.
131000 rules inserted. Base: 106637 rules (4013 with conclusion selected). Queue: 3802 rules.
131200 rules inserted. Base: 106833 rules (4013 with conclusion selected). Queue: 3802 rules.
131400 rules inserted. Base: 106996 rules (4013 with conclusion selected). Queue: 3782 rules.
131600 rules inserted. Base: 107164 rules (4013 with conclusion selected). Queue: 3782 rules.
131800 rules inserted. Base: 107296 rules (4017 with conclusion selected). Queue: 3786 rules.
132000 rules inserted. Base: 107428 rules (4021 with conclusion selected). Queue: 3790 rules.
132200 rules inserted. Base: 107584 rules (4025 with conclusion selected). Queue: 3794 rules.
132400 rules inserted. Base: 107760 rules (4025 with conclusion selected). Queue: 3794 rules.
132600 rules inserted. Base: 107892 rules (4029 with conclusion selected). Queue: 3798 rules.
132800 rules inserted. Base: 108024 rules (4033 with conclusion selected). Queue: 3802 rules.
133000 rules inserted. Base: 108172 rules (4037 with conclusion selected). Queue: 3806 rules.
133200 rules inserted. Base: 108356 rules (4039 with conclusion selected). Queue: 3808 rules.
133400 rules inserted. Base: 108488 rules (4041 with conclusion selected). Queue: 3810 rules.
133600 rules inserted. Base: 108622 rules (4045 with conclusion selected). Queue: 3810 rules.
133800 rules inserted. Base: 108822 rules (4045 with conclusion selected). Queue: 3810 rules.
134000 rules inserted. Base: 109022 rules (4045 with conclusion selected). Queue: 3810 rules.
134200 rules inserted. Base: 109198 rules (4045 with conclusion selected). Queue: 3810 rules.
134400 rules inserted. Base: 109398 rules (4045 with conclusion selected). Queue: 3810 rules.
134600 rules inserted. Base: 109595 rules (4045 with conclusion selected). Queue: 3810 rules.
134800 rules inserted. Base: 109793 rules (4045 with conclusion selected). Queue: 3810 rules.
135000 rules inserted. Base: 109989 rules (4045 with conclusion selected). Queue: 3810 rules.
135200 rules inserted. Base: 110184 rules (4045 with conclusion selected). Queue: 3806 rules.
135400 rules inserted. Base: 110384 rules (4045 with conclusion selected). Queue: 3802 rules.
135600 rules inserted. Base: 110576 rules (4045 with conclusion selected). Queue: 3798 rules.
135800 rules inserted. Base: 110768 rules (4045 with conclusion selected). Queue: 3790 rules.
136000 rules inserted. Base: 110960 rules (4045 with conclusion selected). Queue: 3782 rules.
136200 rules inserted. Base: 111160 rules (4045 with conclusion selected). Queue: 3780 rules.
136400 rules inserted. Base: 111352 rules (4045 with conclusion selected). Queue: 3774 rules.
136600 rules inserted. Base: 111544 rules (4045 with conclusion selected). Queue: 3766 rules.
136800 rules inserted. Base: 111736 rules (4045 with conclusion selected). Queue: 3758 rules.
137000 rules inserted. Base: 111936 rules (4045 with conclusion selected). Queue: 3758 rules.
137200 rules inserted. Base: 112128 rules (4045 with conclusion selected). Queue: 3750 rules.
137400 rules inserted. Base: 112264 rules (4045 with conclusion selected). Queue: 3724 rules.
137600 rules inserted. Base: 112464 rules (4045 with conclusion selected). Queue: 3682 rules.
137800 rules inserted. Base: 112664 rules (4045 with conclusion selected). Queue: 3622 rules.
138000 rules inserted. Base: 112848 rules (4045 with conclusion selected). Queue: 3562 rules.
138200 rules inserted. Base: 113048 rules (4045 with conclusion selected). Queue: 3504 rules.
138400 rules inserted. Base: 113248 rules (4045 with conclusion selected). Queue: 3502 rules.
138600 rules inserted. Base: 113445 rules (4045 with conclusion selected). Queue: 3502 rules.
138800 rules inserted. Base: 113641 rules (4045 with conclusion selected). Queue: 3502 rules.
139000 rules inserted. Base: 113822 rules (4045 with conclusion selected). Queue: 3496 rules.
139200 rules inserted. Base: 114022 rules (4045 with conclusion selected). Queue: 3496 rules.
139400 rules inserted. Base: 114210 rules (4045 with conclusion selected). Queue: 3496 rules.
139600 rules inserted. Base: 114398 rules (4045 with conclusion selected). Queue: 3496 rules.
139800 rules inserted. Base: 114586 rules (4045 with conclusion selected). Queue: 3496 rules.
140000 rules inserted. Base: 114774 rules (4045 with conclusion selected). Queue: 3496 rules.
140200 rules inserted. Base: 114974 rules (4045 with conclusion selected). Queue: 3496 rules.
140400 rules inserted. Base: 115162 rules (4045 with conclusion selected). Queue: 3496 rules.
140600 rules inserted. Base: 115350 rules (4045 with conclusion selected). Queue: 3496 rules.
140800 rules inserted. Base: 115538 rules (4045 with conclusion selected). Queue: 3496 rules.
141000 rules inserted. Base: 115738 rules (4045 with conclusion selected). Queue: 3496 rules.
141200 rules inserted. Base: 115868 rules (4045 with conclusion selected). Queue: 3492 rules.
141400 rules inserted. Base: 116068 rules (4045 with conclusion selected). Queue: 3492 rules.
141600 rules inserted. Base: 116252 rules (4045 with conclusion selected). Queue: 3492 rules.
141800 rules inserted. Base: 116452 rules (4045 with conclusion selected). Queue: 3492 rules.
142000 rules inserted. Base: 116643 rules (4045 with conclusion selected). Queue: 3492 rules.
142200 rules inserted. Base: 116839 rules (4045 with conclusion selected). Queue: 3492 rules.
142400 rules inserted. Base: 117037 rules (4045 with conclusion selected). Queue: 3492 rules.
142600 rules inserted. Base: 117228 rules (4045 with conclusion selected). Queue: 3432 rules.
142800 rules inserted. Base: 117420 rules (4045 with conclusion selected). Queue: 3372 rules.
143000 rules inserted. Base: 117612 rules (4045 with conclusion selected). Queue: 3348 rules.
143200 rules inserted. Base: 117812 rules (4045 with conclusion selected). Queue: 3312 rules.
143400 rules inserted. Base: 118004 rules (4045 with conclusion selected). Queue: 3252 rules.
143600 rules inserted. Base: 118196 rules (4045 with conclusion selected). Queue: 3192 rules.
143800 rules inserted. Base: 118388 rules (4045 with conclusion selected). Queue: 3148 rules.
144000 rules inserted. Base: 118586 rules (4045 with conclusion selected). Queue: 3132 rules.
144200 rules inserted. Base: 118780 rules (4045 with conclusion selected). Queue: 3072 rules.
144400 rules inserted. Base: 118972 rules (4045 with conclusion selected). Queue: 3012 rules.
144600 rules inserted. Base: 119128 rules (4049 with conclusion selected). Queue: 3006 rules.
144800 rules inserted. Base: 119322 rules (4049 with conclusion selected). Queue: 2946 rules.
145000 rules inserted. Base: 119512 rules (4049 with conclusion selected). Queue: 2886 rules.
145200 rules inserted. Base: 119706 rules (4049 with conclusion selected). Queue: 2826 rules.
145400 rules inserted. Base: 119905 rules (4049 with conclusion selected). Queue: 2764 rules.
145600 rules inserted. Base: 120103 rules (4049 with conclusion selected). Queue: 2764 rules.
145800 rules inserted. Base: 120299 rules (4049 with conclusion selected). Queue: 2764 rules.
146000 rules inserted. Base: 120494 rules (4049 with conclusion selected). Queue: 2756 rules.
146200 rules inserted. Base: 120686 rules (4049 with conclusion selected). Queue: 2756 rules.
146400 rules inserted. Base: 120878 rules (4049 with conclusion selected). Queue: 2756 rules.
146600 rules inserted. Base: 121070 rules (4049 with conclusion selected). Queue: 2756 rules.
146800 rules inserted. Base: 121262 rules (4049 with conclusion selected). Queue: 2756 rules.
147000 rules inserted. Base: 121454 rules (4049 with conclusion selected). Queue: 2756 rules.
147200 rules inserted. Base: 121646 rules (4049 with conclusion selected). Queue: 2756 rules.
147400 rules inserted. Base: 121838 rules (4049 with conclusion selected). Queue: 2756 rules.
147600 rules inserted. Base: 121966 rules (4057 with conclusion selected). Queue: 2784 rules.
147800 rules inserted. Base: 122152 rules (4057 with conclusion selected). Queue: 2780 rules.
148000 rules inserted. Base: 122300 rules (4057 with conclusion selected). Queue: 2776 rules.
148200 rules inserted. Base: 122497 rules (4057 with conclusion selected). Queue: 2774 rules.
148400 rules inserted. Base: 122693 rules (4057 with conclusion selected). Queue: 2774 rules.
148600 rules inserted. Base: 122885 rules (4057 with conclusion selected). Queue: 2774 rules.
148800 rules inserted. Base: 123076 rules (4057 with conclusion selected). Queue: 2746 rules.
149000 rules inserted. Base: 123268 rules (4057 with conclusion selected). Queue: 2686 rules.
149200 rules inserted. Base: 123460 rules (4057 with conclusion selected). Queue: 2626 rules.
149400 rules inserted. Base: 123652 rules (4057 with conclusion selected). Queue: 2566 rules.
149600 rules inserted. Base: 123844 rules (4057 with conclusion selected). Queue: 2506 rules.
149800 rules inserted. Base: 124036 rules (4057 with conclusion selected). Queue: 2446 rules.
150000 rules inserted. Base: 124228 rules (4057 with conclusion selected). Queue: 2386 rules.
150200 rules inserted. Base: 124420 rules (4057 with conclusion selected). Queue: 2326 rules.
150400 rules inserted. Base: 124548 rules (4065 with conclusion selected). Queue: 2394 rules.
150600 rules inserted. Base: 124740 rules (4065 with conclusion selected). Queue: 2394 rules.
150800 rules inserted. Base: 124880 rules (4065 with conclusion selected). Queue: 2390 rules.
151000 rules inserted. Base: 125078 rules (4065 with conclusion selected). Queue: 2390 rules.
151200 rules inserted. Base: 125272 rules (4065 with conclusion selected). Queue: 2390 rules.
151400 rules inserted. Base: 125469 rules (4065 with conclusion selected). Queue: 2390 rules.
151600 rules inserted. Base: 125666 rules (4065 with conclusion selected). Queue: 2390 rules.
151800 rules inserted. Base: 125814 rules (4065 with conclusion selected). Queue: 2386 rules.
152000 rules inserted. Base: 125988 rules (4065 with conclusion selected). Queue: 2384 rules.
152200 rules inserted. Base: 126136 rules (4065 with conclusion selected). Queue: 2380 rules.
152400 rules inserted. Base: 126310 rules (4065 with conclusion selected). Queue: 2378 rules.
152600 rules inserted. Base: 126458 rules (4065 with conclusion selected). Queue: 2374 rules.
152800 rules inserted. Base: 126594 rules (4067 with conclusion selected). Queue: 2360 rules.
153000 rules inserted. Base: 126794 rules (4067 with conclusion selected). Queue: 2360 rules.
153200 rules inserted. Base: 126970 rules (4067 with conclusion selected). Queue: 2360 rules.
153400 rules inserted. Base: 127170 rules (4067 with conclusion selected). Queue: 2406 rules.
153600 rules inserted. Base: 127370 rules (4067 with conclusion selected). Queue: 2498 rules.
153800 rules inserted. Base: 127570 rules (4067 with conclusion selected). Queue: 2594 rules.
154000 rules inserted. Base: 127758 rules (4067 with conclusion selected). Queue: 2604 rules.
154200 rules inserted. Base: 127910 rules (4067 with conclusion selected). Queue: 2600 rules.
154400 rules inserted. Base: 128080 rules (4067 with conclusion selected). Queue: 2598 rules.
154600 rules inserted. Base: 128220 rules (4067 with conclusion selected). Queue: 2594 rules.
154800 rules inserted. Base: 128390 rules (4067 with conclusion selected). Queue: 2592 rules.
155000 rules inserted. Base: 128530 rules (4067 with conclusion selected). Queue: 2586 rules.
155200 rules inserted. Base: 128602 rules (4067 with conclusion selected). Queue: 2582 rules.
155400 rules inserted. Base: 128790 rules (4067 with conclusion selected). Queue: 2582 rules.
155600 rules inserted. Base: 128962 rules (4067 with conclusion selected). Queue: 2582 rules.
155800 rules inserted. Base: 129162 rules (4067 with conclusion selected). Queue: 2574 rules.
156000 rules inserted. Base: 129362 rules (4067 with conclusion selected). Queue: 2574 rules.
156200 rules inserted. Base: 129562 rules (4067 with conclusion selected). Queue: 2574 rules.
156400 rules inserted. Base: 129762 rules (4067 with conclusion selected). Queue: 2574 rules.
156600 rules inserted. Base: 129958 rules (4067 with conclusion selected). Queue: 2580 rules.
156800 rules inserted. Base: 130138 rules (4067 with conclusion selected). Queue: 2580 rules.
157000 rules inserted. Base: 130326 rules (4067 with conclusion selected). Queue: 2580 rules.
157200 rules inserted. Base: 130502 rules (4067 with conclusion selected). Queue: 2580 rules.
157400 rules inserted. Base: 130690 rules (4067 with conclusion selected). Queue: 2580 rules.
157600 rules inserted. Base: 130856 rules (4067 with conclusion selected). Queue: 2580 rules.
157800 rules inserted. Base: 130991 rules (4073 with conclusion selected). Queue: 2543 rules.
158000 rules inserted. Base: 131080 rules (4078 with conclusion selected). Queue: 2448 rules.
158200 rules inserted. Base: 131173 rules (4079 with conclusion selected). Queue: 2353 rules.
158400 rules inserted. Base: 131348 rules (4079 with conclusion selected). Queue: 2328 rules.
158600 rules inserted. Base: 131546 rules (4079 with conclusion selected). Queue: 2328 rules.
158800 rules inserted. Base: 131744 rules (4079 with conclusion selected). Queue: 2328 rules.
159000 rules inserted. Base: 131942 rules (4079 with conclusion selected). Queue: 2328 rules.
159200 rules inserted. Base: 132116 rules (4079 with conclusion selected). Queue: 2328 rules.
159400 rules inserted. Base: 132296 rules (4079 with conclusion selected). Queue: 2328 rules.
159600 rules inserted. Base: 132456 rules (4079 with conclusion selected). Queue: 2328 rules.
159800 rules inserted. Base: 132636 rules (4079 with conclusion selected). Queue: 2328 rules.
160000 rules inserted. Base: 132802 rules (4079 with conclusion selected). Queue: 2328 rules.
160200 rules inserted. Base: 132945 rules (4079 with conclusion selected). Queue: 2328 rules.
160400 rules inserted. Base: 133030 rules (4093 with conclusion selected). Queue: 2368 rules.
160600 rules inserted. Base: 133078 rules (4107 with conclusion selected). Queue: 2406 rules.
160800 rules inserted. Base: 133278 rules (4107 with conclusion selected). Queue: 2404 rules.
161000 rules inserted. Base: 133478 rules (4107 with conclusion selected). Queue: 2402 rules.
161200 rules inserted. Base: 133678 rules (4107 with conclusion selected). Queue: 2400 rules.
161400 rules inserted. Base: 133870 rules (4107 with conclusion selected). Queue: 2378 rules.
161600 rules inserted. Base: 133961 rules (4110 with conclusion selected). Queue: 2283 rules.
161800 rules inserted. Base: 134043 rules (4116 with conclusion selected). Queue: 2193 rules.
162000 rules inserted. Base: 134134 rules (4119 with conclusion selected). Queue: 2098 rules.
162200 rules inserted. Base: 134216 rules (4125 with conclusion selected). Queue: 2008 rules.
162400 rules inserted. Base: 134307 rules (4128 with conclusion selected). Queue: 1913 rules.
162600 rules inserted. Base: 134414 rules (4131 with conclusion selected). Queue: 1838 rules.
162800 rules inserted. Base: 134614 rules (4135 with conclusion selected). Queue: 1822 rules.
163000 rules inserted. Base: 134812 rules (4139 with conclusion selected). Queue: 1818 rules.
163200 rules inserted. Base: 135012 rules (4139 with conclusion selected). Queue: 1814 rules.
163400 rules inserted. Base: 135212 rules (4139 with conclusion selected). Queue: 1811 rules.
163600 rules inserted. Base: 135412 rules (4139 with conclusion selected). Queue: 1808 rules.
163800 rules inserted. Base: 135570 rules (4139 with conclusion selected). Queue: 1802 rules.
164000 rules inserted. Base: 135609 rules (4160 with conclusion selected). Queue: 1862 rules.
164200 rules inserted. Base: 135640 rules (4175 with conclusion selected). Queue: 1906 rules.
164400 rules inserted. Base: 135708 rules (4195 with conclusion selected). Queue: 1962 rules.
164600 rules inserted. Base: 135908 rules (4195 with conclusion selected). Queue: 1946 rules.
164800 rules inserted. Base: 136108 rules (4195 with conclusion selected). Queue: 1930 rules.
165000 rules inserted. Base: 136302 rules (4195 with conclusion selected). Queue: 1988 rules.
165200 rules inserted. Base: 136502 rules (4195 with conclusion selected). Queue: 2048 rules.
165400 rules inserted. Base: 136702 rules (4195 with conclusion selected). Queue: 2109 rules.
165600 rules inserted. Base: 136902 rules (4195 with conclusion selected). Queue: 2170 rules.
165800 rules inserted. Base: 137102 rules (4199 with conclusion selected). Queue: 2166 rules.
166000 rules inserted. Base: 137302 rules (4203 with conclusion selected). Queue: 2162 rules.
166200 rules inserted. Base: 137502 rules (4208 with conclusion selected). Queue: 2160 rules.
166400 rules inserted. Base: 137612 rules (4211 with conclusion selected). Queue: 2150 rules.
166600 rules inserted. Base: 137799 rules (4211 with conclusion selected). Queue: 2142 rules.
166800 rules inserted. Base: 137992 rules (4211 with conclusion selected). Queue: 2140 rules.
167000 rules inserted. Base: 138192 rules (4211 with conclusion selected). Queue: 2140 rules.
167200 rules inserted. Base: 138392 rules (4211 with conclusion selected). Queue: 2140 rules.
167400 rules inserted. Base: 138592 rules (4211 with conclusion selected). Queue: 2140 rules.
167600 rules inserted. Base: 138792 rules (4211 with conclusion selected). Queue: 2140 rules.
167800 rules inserted. Base: 138988 rules (4211 with conclusion selected). Queue: 2140 rules.
168000 rules inserted. Base: 139188 rules (4211 with conclusion selected). Queue: 2120 rules.
168200 rules inserted. Base: 139388 rules (4211 with conclusion selected). Queue: 2100 rules.
168400 rules inserted. Base: 139588 rules (4211 with conclusion selected). Queue: 2084 rules.
168600 rules inserted. Base: 139758 rules (4211 with conclusion selected). Queue: 2076 rules.
168800 rules inserted. Base: 139940 rules (4211 with conclusion selected). Queue: 2076 rules.
169000 rules inserted. Base: 140140 rules (4211 with conclusion selected). Queue: 2076 rules.
169200 rules inserted. Base: 140276 rules (4211 with conclusion selected). Queue: 2076 rules.
169400 rules inserted. Base: 140412 rules (4211 with conclusion selected). Queue: 2076 rules.
169600 rules inserted. Base: 140564 rules (4211 with conclusion selected). Queue: 2076 rules.
169800 rules inserted. Base: 140744 rules (4211 with conclusion selected). Queue: 2076 rules.
170000 rules inserted. Base: 140880 rules (4211 with conclusion selected). Queue: 2078 rules.
170200 rules inserted. Base: 141070 rules (4211 with conclusion selected). Queue: 2072 rules.
170400 rules inserted. Base: 141260 rules (4211 with conclusion selected). Queue: 2068 rules.
170600 rules inserted. Base: 141378 rules (4211 with conclusion selected). Queue: 2066 rules.
170800 rules inserted. Base: 141520 rules (4211 with conclusion selected). Queue: 2186 rules.
171000 rules inserted. Base: 141702 rules (4211 with conclusion selected). Queue: 2306 rules.
171200 rules inserted. Base: 141902 rules (4211 with conclusion selected). Queue: 2306 rules.
171400 rules inserted. Base: 142102 rules (4211 with conclusion selected). Queue: 2306 rules.
171600 rules inserted. Base: 142302 rules (4211 with conclusion selected). Queue: 2306 rules.
171800 rules inserted. Base: 142502 rules (4211 with conclusion selected). Queue: 2306 rules.
172000 rules inserted. Base: 142702 rules (4211 with conclusion selected). Queue: 2306 rules.
172200 rules inserted. Base: 142877 rules (4211 with conclusion selected). Queue: 2306 rules.
172400 rules inserted. Base: 143057 rules (4211 with conclusion selected). Queue: 2306 rules.
172600 rules inserted. Base: 143234 rules (4211 with conclusion selected). Queue: 2306 rules.
172800 rules inserted. Base: 143400 rules (4257 with conclusion selected). Queue: 2564 rules.
173000 rules inserted. Base: 143592 rules (4257 with conclusion selected). Queue: 2560 rules.
173200 rules inserted. Base: 143786 rules (4257 with conclusion selected). Queue: 2556 rules.
173400 rules inserted. Base: 143982 rules (4257 with conclusion selected). Queue: 2556 rules.
173600 rules inserted. Base: 144182 rules (4257 with conclusion selected). Queue: 2556 rules.
173800 rules inserted. Base: 144382 rules (4257 with conclusion selected). Queue: 2556 rules.
174000 rules inserted. Base: 144582 rules (4257 with conclusion selected). Queue: 2556 rules.
174200 rules inserted. Base: 144782 rules (4257 with conclusion selected). Queue: 2556 rules.
174400 rules inserted. Base: 144971 rules (4257 with conclusion selected). Queue: 2655 rules.
174600 rules inserted. Base: 145150 rules (4257 with conclusion selected). Queue: 2792 rules.
174800 rules inserted. Base: 145336 rules (4257 with conclusion selected). Queue: 2950 rules.
175000 rules inserted. Base: 145502 rules (4259 with conclusion selected). Queue: 3022 rules.
175200 rules inserted. Base: 145682 rules (4259 with conclusion selected). Queue: 2976 rules.
175400 rules inserted. Base: 145860 rules (4259 with conclusion selected). Queue: 2904 rules.
175600 rules inserted. Base: 146038 rules (4259 with conclusion selected). Queue: 2821 rules.
175800 rules inserted. Base: 146238 rules (4259 with conclusion selected). Queue: 2721 rules.
176000 rules inserted. Base: 146434 rules (4259 with conclusion selected). Queue: 2716 rules.
176200 rules inserted. Base: 146634 rules (4259 with conclusion selected). Queue: 2652 rules.
176400 rules inserted. Base: 146834 rules (4259 with conclusion selected). Queue: 2588 rules.
176600 rules inserted. Base: 147034 rules (4259 with conclusion selected). Queue: 2524 rules.
176800 rules inserted. Base: 147234 rules (4259 with conclusion selected). Queue: 2524 rules.
177000 rules inserted. Base: 147423 rules (4259 with conclusion selected). Queue: 2520 rules.
177200 rules inserted. Base: 147616 rules (4259 with conclusion selected). Queue: 2516 rules.
177400 rules inserted. Base: 147802 rules (4259 with conclusion selected). Queue: 2508 rules.
177600 rules inserted. Base: 147995 rules (4259 with conclusion selected). Queue: 2504 rules.
177800 rules inserted. Base: 148181 rules (4259 with conclusion selected). Queue: 2496 rules.
178000 rules inserted. Base: 148328 rules (4259 with conclusion selected). Queue: 2490 rules.
178200 rules inserted. Base: 148468 rules (4259 with conclusion selected). Queue: 2488 rules.
178400 rules inserted. Base: 148644 rules (4259 with conclusion selected). Queue: 2488 rules.
178600 rules inserted. Base: 148836 rules (4259 with conclusion selected). Queue: 2488 rules.
178800 rules inserted. Base: 149036 rules (4259 with conclusion selected). Queue: 2488 rules.
179000 rules inserted. Base: 149236 rules (4259 with conclusion selected). Queue: 2488 rules.
179200 rules inserted. Base: 149436 rules (4259 with conclusion selected). Queue: 2488 rules.
179400 rules inserted. Base: 149634 rules (4259 with conclusion selected). Queue: 2396 rules.
179600 rules inserted. Base: 149818 rules (4259 with conclusion selected). Queue: 2308 rules.
179800 rules inserted. Base: 150001 rules (4259 with conclusion selected). Queue: 2222 rules.
180000 rules inserted. Base: 150190 rules (4259 with conclusion selected). Queue: 2130 rules.
180200 rules inserted. Base: 150368 rules (4259 with conclusion selected). Queue: 2047 rules.
180400 rules inserted. Base: 150557 rules (4259 with conclusion selected). Queue: 1956 rules.
180600 rules inserted. Base: 150746 rules (4259 with conclusion selected). Queue: 1948 rules.
180800 rules inserted. Base: 150874 rules (4259 with conclusion selected). Queue: 1948 rules.
181000 rules inserted. Base: 150894 rules (4259 with conclusion selected). Queue: 1948 rules.
181200 rules inserted. Base: 151074 rules (4259 with conclusion selected). Queue: 1946 rules.
181400 rules inserted. Base: 151274 rules (4259 with conclusion selected). Queue: 1946 rules.
181600 rules inserted. Base: 151474 rules (4259 with conclusion selected). Queue: 1946 rules.
181800 rules inserted. Base: 151674 rules (4259 with conclusion selected). Queue: 1948 rules.
182000 rules inserted. Base: 151853 rules (4259 with conclusion selected). Queue: 1948 rules.
182200 rules inserted. Base: 152039 rules (4259 with conclusion selected). Queue: 1948 rules.
182400 rules inserted. Base: 152210 rules (4259 with conclusion selected). Queue: 1948 rules.
182600 rules inserted. Base: 152368 rules (4259 with conclusion selected). Queue: 1948 rules.
182800 rules inserted. Base: 152546 rules (4259 with conclusion selected). Queue: 1948 rules.
183000 rules inserted. Base: 152724 rules (4259 with conclusion selected). Queue: 1944 rules.
183200 rules inserted. Base: 152924 rules (4259 with conclusion selected). Queue: 1944 rules.
183400 rules inserted. Base: 153124 rules (4259 with conclusion selected). Queue: 1944 rules.
183600 rules inserted. Base: 153324 rules (4259 with conclusion selected). Queue: 1944 rules.
183800 rules inserted. Base: 153442 rules (4259 with conclusion selected). Queue: 1944 rules.
184000 rules inserted. Base: 153462 rules (4259 with conclusion selected). Queue: 1944 rules.
184200 rules inserted. Base: 153492 rules (4259 with conclusion selected). Queue: 1944 rules.
184400 rules inserted. Base: 153564 rules (4259 with conclusion selected). Queue: 1910 rules.
184600 rules inserted. Base: 153744 rules (4259 with conclusion selected). Queue: 1880 rules.
184800 rules inserted. Base: 153856 rules (4259 with conclusion selected). Queue: 1880 rules.
185000 rules inserted. Base: 154054 rules (4259 with conclusion selected). Queue: 1880 rules.
185200 rules inserted. Base: 154254 rules (4259 with conclusion selected). Queue: 1880 rules.
185400 rules inserted. Base: 154454 rules (4259 with conclusion selected). Queue: 1880 rules.
185600 rules inserted. Base: 154654 rules (4259 with conclusion selected). Queue: 1880 rules.
185800 rules inserted. Base: 154834 rules (4259 with conclusion selected). Queue: 1876 rules.
186000 rules inserted. Base: 155006 rules (4259 with conclusion selected). Queue: 1876 rules.
186200 rules inserted. Base: 155173 rules (4259 with conclusion selected). Queue: 1876 rules.
186400 rules inserted. Base: 155358 rules (4259 with conclusion selected). Queue: 1870 rules.
186600 rules inserted. Base: 155542 rules (4269 with conclusion selected). Queue: 2006 rules.
186800 rules inserted. Base: 155726 rules (4279 with conclusion selected). Queue: 2144 rules.
187000 rules inserted. Base: 155926 rules (4279 with conclusion selected). Queue: 2144 rules.
187200 rules inserted. Base: 156126 rules (4279 with conclusion selected). Queue: 2144 rules.
187400 rules inserted. Base: 156326 rules (4279 with conclusion selected). Queue: 2144 rules.
187600 rules inserted. Base: 156513 rules (4279 with conclusion selected). Queue: 2144 rules.
187800 rules inserted. Base: 156660 rules (4279 with conclusion selected). Queue: 2144 rules.
188000 rules inserted. Base: 156794 rules (4279 with conclusion selected). Queue: 2144 rules.
188200 rules inserted. Base: 156894 rules (4279 with conclusion selected). Queue: 2140 rules.
188400 rules inserted. Base: 157042 rules (4280 with conclusion selected). Queue: 2139 rules.
188600 rules inserted. Base: 157222 rules (4283 with conclusion selected). Queue: 2132 rules.
188800 rules inserted. Base: 157382 rules (4286 with conclusion selected). Queue: 2126 rules.
189000 rules inserted. Base: 157562 rules (4287 with conclusion selected). Queue: 2104 rules.
189200 rules inserted. Base: 157695 rules (4287 with conclusion selected). Queue: 2037 rules.
189400 rules inserted. Base: 157828 rules (4287 with conclusion selected). Queue: 1970 rules.
189600 rules inserted. Base: 157962 rules (4287 with conclusion selected). Queue: 1904 rules.
189800 rules inserted. Base: 158134 rules (4292 with conclusion selected). Queue: 1940 rules.
190000 rules inserted. Base: 158310 rules (4307 with conclusion selected). Queue: 2120 rules.
190200 rules inserted. Base: 158494 rules (4318 with conclusion selected). Queue: 2243 rules.
190400 rules inserted. Base: 158672 rules (4327 with conclusion selected). Queue: 2360 rules.
190600 rules inserted. Base: 158792 rules (4327 with conclusion selected). Queue: 2356 rules.
190800 rules inserted. Base: 158956 rules (4327 with conclusion selected). Queue: 2350 rules.
191000 rules inserted. Base: 159062 rules (4327 with conclusion selected). Queue: 2344 rules.
191200 rules inserted. Base: 159194 rules (4327 with conclusion selected). Queue: 2344 rules.
191400 rules inserted. Base: 159294 rules (4327 with conclusion selected). Queue: 2344 rules.
191600 rules inserted. Base: 159420 rules (4327 with conclusion selected). Queue: 2340 rules.
191800 rules inserted. Base: 159594 rules (4330 with conclusion selected). Queue: 2335 rules.
192000 rules inserted. Base: 159781 rules (4333 with conclusion selected). Queue: 2328 rules.
192200 rules inserted. Base: 159955 rules (4336 with conclusion selected). Queue: 2323 rules.
192400 rules inserted. Base: 160142 rules (4339 with conclusion selected). Queue: 2316 rules.
192600 rules inserted. Base: 160319 rules (4342 with conclusion selected). Queue: 2311 rules.
192800 rules inserted. Base: 160428 rules (4343 with conclusion selected). Queue: 2308 rules.
193000 rules inserted. Base: 160628 rules (4343 with conclusion selected). Queue: 2308 rules.
193200 rules inserted. Base: 160828 rules (4343 with conclusion selected). Queue: 2308 rules.
193400 rules inserted. Base: 161028 rules (4343 with conclusion selected). Queue: 2308 rules.
193600 rules inserted. Base: 161228 rules (4343 with conclusion selected). Queue: 2308 rules.
193800 rules inserted. Base: 161428 rules (4343 with conclusion selected). Queue: 2308 rules.
194000 rules inserted. Base: 161600 rules (4343 with conclusion selected). Queue: 2304 rules.
194200 rules inserted. Base: 161762 rules (4343 with conclusion selected). Queue: 2298 rules.
194400 rules inserted. Base: 161906 rules (4343 with conclusion selected). Queue: 2292 rules.
194600 rules inserted. Base: 162069 rules (4343 with conclusion selected). Queue: 2286 rules.
194800 rules inserted. Base: 162212 rules (4343 with conclusion selected). Queue: 2280 rules.
195000 rules inserted. Base: 162372 rules (4363 with conclusion selected). Queue: 2346 rules.
195200 rules inserted. Base: 162542 rules (4383 with conclusion selected). Queue: 2486 rules.
195400 rules inserted. Base: 162712 rules (4383 with conclusion selected). Queue: 2486 rules.
195600 rules inserted. Base: 162856 rules (4383 with conclusion selected). Queue: 2486 rules.
195800 rules inserted. Base: 163052 rules (4383 with conclusion selected). Queue: 2486 rules.
196000 rules inserted. Base: 163252 rules (4383 with conclusion selected). Queue: 2486 rules.
196200 rules inserted. Base: 163452 rules (4383 with conclusion selected). Queue: 2486 rules.
196400 rules inserted. Base: 163652 rules (4383 with conclusion selected). Queue: 2486 rules.
196600 rules inserted. Base: 163852 rules (4383 with conclusion selected). Queue: 2486 rules.
196800 rules inserted. Base: 164052 rules (4383 with conclusion selected). Queue: 2486 rules.
197000 rules inserted. Base: 164252 rules (4383 with conclusion selected). Queue: 2486 rules.
197200 rules inserted. Base: 164452 rules (4383 with conclusion selected). Queue: 2486 rules.
197400 rules inserted. Base: 164648 rules (4383 with conclusion selected). Queue: 2434 rules.
197600 rules inserted. Base: 164844 rules (4383 with conclusion selected). Queue: 2418 rules.
197800 rules inserted. Base: 164996 rules (4383 with conclusion selected). Queue: 2350 rules.
198000 rules inserted. Base: 165052 rules (4383 with conclusion selected). Queue: 2316 rules.
198200 rules inserted. Base: 165108 rules (4383 with conclusion selected). Queue: 2282 rules.
198400 rules inserted. Base: 165308 rules (4383 with conclusion selected). Queue: 2282 rules.
198600 rules inserted. Base: 165508 rules (4383 with conclusion selected). Queue: 2282 rules.
198800 rules inserted. Base: 165689 rules (4383 with conclusion selected). Queue: 2282 rules.
199000 rules inserted. Base: 165866 rules (4383 with conclusion selected). Queue: 2282 rules.
199200 rules inserted. Base: 166024 rules (4383 with conclusion selected). Queue: 2282 rules.
199400 rules inserted. Base: 166201 rules (4383 with conclusion selected). Queue: 2282 rules.
199600 rules inserted. Base: 166361 rules (4383 with conclusion selected). Queue: 2282 rules.
199800 rules inserted. Base: 166536 rules (4383 with conclusion selected). Queue: 2282 rules.
200000 rules inserted. Base: 166732 rules (4383 with conclusion selected). Queue: 2282 rules.
200200 rules inserted. Base: 166924 rules (4383 with conclusion selected). Queue: 2270 rules.
200400 rules inserted. Base: 167116 rules (4383 with conclusion selected). Queue: 2258 rules.
200600 rules inserted. Base: 167316 rules (4383 with conclusion selected). Queue: 2256 rules.
200800 rules inserted. Base: 167516 rules (4383 with conclusion selected). Queue: 2256 rules.
201000 rules inserted. Base: 167684 rules (4383 with conclusion selected). Queue: 2256 rules.
201200 rules inserted. Base: 167744 rules (4383 with conclusion selected). Queue: 2226 rules.
201400 rules inserted. Base: 167804 rules (4383 with conclusion selected). Queue: 2196 rules.
201600 rules inserted. Base: 167872 rules (4383 with conclusion selected). Queue: 2158 rules.
201800 rules inserted. Base: 167924 rules (4383 with conclusion selected). Queue: 2136 rules.
202000 rules inserted. Base: 168002 rules (4383 with conclusion selected). Queue: 2096 rules.
202200 rules inserted. Base: 168196 rules (4383 with conclusion selected). Queue: 2096 rules.
202400 rules inserted. Base: 168318 rules (4383 with conclusion selected). Queue: 2096 rules.
202600 rules inserted. Base: 168422 rules (4383 with conclusion selected). Queue: 2096 rules.
202800 rules inserted. Base: 168618 rules (4383 with conclusion selected). Queue: 2096 rules.
203000 rules inserted. Base: 168818 rules (4383 with conclusion selected). Queue: 2096 rules.
203200 rules inserted. Base: 169018 rules (4383 with conclusion selected). Queue: 2096 rules.
203400 rules inserted. Base: 169212 rules (4383 with conclusion selected). Queue: 2080 rules.
203600 rules inserted. Base: 169406 rules (4383 with conclusion selected). Queue: 2058 rules.
203800 rules inserted. Base: 169598 rules (4383 with conclusion selected). Queue: 2034 rules.
204000 rules inserted. Base: 169790 rules (4383 with conclusion selected). Queue: 2010 rules.
204200 rules inserted. Base: 169984 rules (4383 with conclusion selected). Queue: 1998 rules.
204400 rules inserted. Base: 170180 rules (4383 with conclusion selected). Queue: 1998 rules.
204600 rules inserted. Base: 170372 rules (4383 with conclusion selected). Queue: 1998 rules.
204800 rules inserted. Base: 170564 rules (4383 with conclusion selected). Queue: 1998 rules.
205000 rules inserted. Base: 170762 rules (4383 with conclusion selected). Queue: 1998 rules.
205200 rules inserted. Base: 170962 rules (4383 with conclusion selected). Queue: 1998 rules.
205400 rules inserted. Base: 171136 rules (4383 with conclusion selected). Queue: 1994 rules.
205600 rules inserted. Base: 171257 rules (4383 with conclusion selected). Queue: 1994 rules.
205800 rules inserted. Base: 171382 rules (4383 with conclusion selected). Queue: 1994 rules.
206000 rules inserted. Base: 171510 rules (4383 with conclusion selected). Queue: 1994 rules.
206200 rules inserted. Base: 171674 rules (4383 with conclusion selected). Queue: 1994 rules.
206400 rules inserted. Base: 171870 rules (4383 with conclusion selected). Queue: 1994 rules.
206600 rules inserted. Base: 171982 rules (4383 with conclusion selected). Queue: 1994 rules.
206800 rules inserted. Base: 172094 rules (4383 with conclusion selected). Queue: 1994 rules.
207000 rules inserted. Base: 172294 rules (4383 with conclusion selected). Queue: 1994 rules.
207200 rules inserted. Base: 172494 rules (4383 with conclusion selected). Queue: 1994 rules.
207400 rules inserted. Base: 172692 rules (4383 with conclusion selected). Queue: 1989 rules.
207600 rules inserted. Base: 172882 rules (4383 with conclusion selected). Queue: 1976 rules.
207800 rules inserted. Base: 173074 rules (4383 with conclusion selected). Queue: 1964 rules.
208000 rules inserted. Base: 173266 rules (4383 with conclusion selected). Queue: 1952 rules.
208200 rules inserted. Base: 173462 rules (4383 with conclusion selected). Queue: 1942 rules.
208400 rules inserted. Base: 173662 rules (4383 with conclusion selected). Queue: 1942 rules.
208600 rules inserted. Base: 173764 rules (4423 with conclusion selected). Queue: 2082 rules.
208800 rules inserted. Base: 173832 rules (4463 with conclusion selected). Queue: 2222 rules.
209000 rules inserted. Base: 174006 rules (4463 with conclusion selected). Queue: 2136 rules.
209200 rules inserted. Base: 174206 rules (4463 with conclusion selected). Queue: 2036 rules.
209400 rules inserted. Base: 174376 rules (4463 with conclusion selected). Queue: 2043 rules.
209600 rules inserted. Base: 174516 rules (4463 with conclusion selected). Queue: 2181 rules.
209800 rules inserted. Base: 174656 rules (4463 with conclusion selected). Queue: 2319 rules.
210000 rules inserted. Base: 174796 rules (4463 with conclusion selected). Queue: 2457 rules.
210200 rules inserted. Base: 174964 rules (4463 with conclusion selected). Queue: 2460 rules.
210400 rules inserted. Base: 175162 rules (4463 with conclusion selected). Queue: 2454 rules.
210600 rules inserted. Base: 175356 rules (4463 with conclusion selected). Queue: 2396 rules.
210800 rules inserted. Base: 175554 rules (4463 with conclusion selected). Queue: 2368 rules.
211000 rules inserted. Base: 175748 rules (4463 with conclusion selected). Queue: 2332 rules.
211200 rules inserted. Base: 175948 rules (4463 with conclusion selected). Queue: 2332 rules.
211400 rules inserted. Base: 176038 rules (4463 with conclusion selected). Queue: 2332 rules.
211600 rules inserted. Base: 176092 rules (4489 with conclusion selected). Queue: 2402 rules.
211800 rules inserted. Base: 176119 rules (4502 with conclusion selected). Queue: 2437 rules.
212000 rules inserted. Base: 176146 rules (4515 with conclusion selected). Queue: 2472 rules.
212200 rules inserted. Base: 176200 rules (4541 with conclusion selected). Queue: 2542 rules.
212400 rules inserted. Base: 176227 rules (4554 with conclusion selected). Queue: 2577 rules.
212600 rules inserted. Base: 176354 rules (4567 with conclusion selected). Queue: 2612 rules.
212800 rules inserted. Base: 176554 rules (4567 with conclusion selected). Queue: 2612 rules.
213000 rules inserted. Base: 176746 rules (4567 with conclusion selected). Queue: 2600 rules.
213200 rules inserted. Base: 176942 rules (4567 with conclusion selected). Queue: 2492 rules.
213400 rules inserted. Base: 177138 rules (4567 with conclusion selected). Queue: 2372 rules.
213600 rules inserted. Base: 177338 rules (4567 with conclusion selected). Queue: 2372 rules.
213800 rules inserted. Base: 177536 rules (4567 with conclusion selected). Queue: 2354 rules.
214000 rules inserted. Base: 177730 rules (4567 with conclusion selected). Queue: 2336 rules.
214200 rules inserted. Base: 177926 rules (4567 with conclusion selected). Queue: 2318 rules.
214400 rules inserted. Base: 178122 rules (4567 with conclusion selected). Queue: 2300 rules.
214600 rules inserted. Base: 178318 rules (4567 with conclusion selected). Queue: 2282 rules.
214800 rules inserted. Base: 178514 rules (4567 with conclusion selected). Queue: 2264 rules.
215000 rules inserted. Base: 178710 rules (4567 with conclusion selected). Queue: 2246 rules.
215200 rules inserted. Base: 178906 rules (4567 with conclusion selected). Queue: 2228 rules.
215400 rules inserted. Base: 179106 rules (4567 with conclusion selected). Queue: 2224 rules.
215600 rules inserted. Base: 179306 rules (4567 with conclusion selected). Queue: 2224 rules.
215800 rules inserted. Base: 179506 rules (4567 with conclusion selected). Queue: 2224 rules.
216000 rules inserted. Base: 179706 rules (4567 with conclusion selected). Queue: 2218 rules.
216200 rules inserted. Base: 179902 rules (4567 with conclusion selected). Queue: 2066 rules.
216400 rules inserted. Base: 180098 rules (4567 with conclusion selected). Queue: 1914 rules.
216600 rules inserted. Base: 180294 rules (4567 with conclusion selected). Queue: 1762 rules.
216800 rules inserted. Base: 180488 rules (4567 with conclusion selected). Queue: 1624 rules.
217000 rules inserted. Base: 180682 rules (4567 with conclusion selected). Queue: 1504 rules.
217200 rules inserted. Base: 180878 rules (4567 with conclusion selected). Queue: 1354 rules.
217400 rules inserted. Base: 181072 rules (4567 with conclusion selected). Queue: 1292 rules.
217600 rules inserted. Base: 181272 rules (4567 with conclusion selected). Queue: 1328 rules.
217800 rules inserted. Base: 181472 rules (4567 with conclusion selected). Queue: 1328 rules.
218000 rules inserted. Base: 181670 rules (4567 with conclusion selected). Queue: 1328 rules.
218200 rules inserted. Base: 181870 rules (4567 with conclusion selected). Queue: 1328 rules.
218400 rules inserted. Base: 182070 rules (4567 with conclusion selected). Queue: 1328 rules.
218600 rules inserted. Base: 182270 rules (4567 with conclusion selected). Queue: 1328 rules.
218800 rules inserted. Base: 182468 rules (4567 with conclusion selected). Queue: 1328 rules.
219000 rules inserted. Base: 182668 rules (4567 with conclusion selected). Queue: 1280 rules.
219200 rules inserted. Base: 182868 rules (4567 with conclusion selected). Queue: 1280 rules.
219400 rules inserted. Base: 183068 rules (4567 with conclusion selected). Queue: 1280 rules.
219600 rules inserted. Base: 183268 rules (4567 with conclusion selected). Queue: 1280 rules.
219800 rules inserted. Base: 183468 rules (4567 with conclusion selected). Queue: 1280 rules.
220000 rules inserted. Base: 183668 rules (4567 with conclusion selected). Queue: 1282 rules.
220200 rules inserted. Base: 183868 rules (4567 with conclusion selected). Queue: 1280 rules.
220400 rules inserted. Base: 184068 rules (4567 with conclusion selected). Queue: 1274 rules.
220600 rules inserted. Base: 184268 rules (4567 with conclusion selected). Queue: 1268 rules.
220800 rules inserted. Base: 184468 rules (4567 with conclusion selected). Queue: 1268 rules.
221000 rules inserted. Base: 184668 rules (4567 with conclusion selected). Queue: 1268 rules.
221200 rules inserted. Base: 184868 rules (4567 with conclusion selected). Queue: 1268 rules.
221400 rules inserted. Base: 185064 rules (4567 with conclusion selected). Queue: 1268 rules.
221600 rules inserted. Base: 185262 rules (4567 with conclusion selected). Queue: 1268 rules.
221800 rules inserted. Base: 185452 rules (4567 with conclusion selected). Queue: 1264 rules.
222000 rules inserted. Base: 185502 rules (4567 with conclusion selected). Queue: 1260 rules.
222200 rules inserted. Base: 185608 rules (4567 with conclusion selected). Queue: 1256 rules.
222400 rules inserted. Base: 185808 rules (4567 with conclusion selected). Queue: 1248 rules.
222600 rules inserted. Base: 186004 rules (4567 with conclusion selected). Queue: 1244 rules.
222800 rules inserted. Base: 186204 rules (4567 with conclusion selected). Queue: 1244 rules.
223000 rules inserted. Base: 186394 rules (4567 with conclusion selected). Queue: 1244 rules.
223200 rules inserted. Base: 186588 rules (4567 with conclusion selected). Queue: 1244 rules.
223400 rules inserted. Base: 186784 rules (4567 with conclusion selected). Queue: 1242 rules.
223600 rules inserted. Base: 186966 rules (4567 with conclusion selected). Queue: 1232 rules.
223800 rules inserted. Base: 187154 rules (4567 with conclusion selected). Queue: 1228 rules.
224000 rules inserted. Base: 187352 rules (4567 with conclusion selected). Queue: 1228 rules.
224200 rules inserted. Base: 187548 rules (4567 with conclusion selected). Queue: 1228 rules.
224400 rules inserted. Base: 187736 rules (4567 with conclusion selected). Queue: 1228 rules.
224600 rules inserted. Base: 187934 rules (4567 with conclusion selected). Queue: 1228 rules.
224800 rules inserted. Base: 188118 rules (4567 with conclusion selected). Queue: 1228 rules.
225000 rules inserted. Base: 188302 rules (4567 with conclusion selected). Queue: 1228 rules.
225200 rules inserted. Base: 188481 rules (4567 with conclusion selected). Queue: 1209 rules.
225400 rules inserted. Base: 188632 rules (4567 with conclusion selected). Queue: 1212 rules.
225600 rules inserted. Base: 188820 rules (4567 with conclusion selected). Queue: 1292 rules.
225800 rules inserted. Base: 189020 rules (4567 with conclusion selected). Queue: 1292 rules.
226000 rules inserted. Base: 189204 rules (4567 with conclusion selected). Queue: 1292 rules.
226200 rules inserted. Base: 189386 rules (4567 with conclusion selected). Queue: 1292 rules.
226400 rules inserted. Base: 189576 rules (4567 with conclusion selected). Queue: 1292 rules.
226600 rules inserted. Base: 189718 rules (4567 with conclusion selected). Queue: 1292 rules.
226800 rules inserted. Base: 189910 rules (4567 with conclusion selected). Queue: 1292 rules.
227000 rules inserted. Base: 190106 rules (4567 with conclusion selected). Queue: 1292 rules.
227200 rules inserted. Base: 190300 rules (4567 with conclusion selected). Queue: 1328 rules.
227400 rules inserted. Base: 190480 rules (4567 with conclusion selected). Queue: 1408 rules.
227600 rules inserted. Base: 190672 rules (4567 with conclusion selected). Queue: 1436 rules.
227800 rules inserted. Base: 190870 rules (4567 with conclusion selected). Queue: 1436 rules.
228000 rules inserted. Base: 191062 rules (4567 with conclusion selected). Queue: 1436 rules.
228200 rules inserted. Base: 191256 rules (4567 with conclusion selected). Queue: 1436 rules.
228400 rules inserted. Base: 191456 rules (4567 with conclusion selected). Queue: 1436 rules.
228600 rules inserted. Base: 191642 rules (4567 with conclusion selected). Queue: 1436 rules.
228800 rules inserted. Base: 191830 rules (4567 with conclusion selected). Queue: 1436 rules.
229000 rules inserted. Base: 192022 rules (4567 with conclusion selected). Queue: 1436 rules.
229200 rules inserted. Base: 192220 rules (4567 with conclusion selected). Queue: 1436 rules.
229400 rules inserted. Base: 192412 rules (4567 with conclusion selected). Queue: 1436 rules.
229600 rules inserted. Base: 192608 rules (4567 with conclusion selected). Queue: 1436 rules.
229800 rules inserted. Base: 192612 rules (4567 with conclusion selected). Queue: 1436 rules.
230000 rules inserted. Base: 192756 rules (4567 with conclusion selected). Queue: 1436 rules.
230200 rules inserted. Base: 192944 rules (4567 with conclusion selected). Queue: 1436 rules.
230400 rules inserted. Base: 193132 rules (4567 with conclusion selected). Queue: 1434 rules.
230600 rules inserted. Base: 193332 rules (4567 with conclusion selected). Queue: 1432 rules.
230800 rules inserted. Base: 193532 rules (4567 with conclusion selected). Queue: 1432 rules.
231000 rules inserted. Base: 193732 rules (4567 with conclusion selected). Queue: 1432 rules.
231200 rules inserted. Base: 193774 rules (4567 with conclusion selected). Queue: 1432 rules.
231400 rules inserted. Base: 193886 rules (4567 with conclusion selected). Queue: 1432 rules.
231600 rules inserted. Base: 194070 rules (4567 with conclusion selected). Queue: 1432 rules.
231800 rules inserted. Base: 194258 rules (4567 with conclusion selected). Queue: 1432 rules.
232000 rules inserted. Base: 194458 rules (4567 with conclusion selected). Queue: 1384 rules.
232200 rules inserted. Base: 194658 rules (4567 with conclusion selected). Queue: 1384 rules.
232400 rules inserted. Base: 194858 rules (4567 with conclusion selected). Queue: 1384 rules.
232600 rules inserted. Base: 195058 rules (4567 with conclusion selected). Queue: 1384 rules.
232800 rules inserted. Base: 195258 rules (4567 with conclusion selected). Queue: 1384 rules.
233000 rules inserted. Base: 195458 rules (4567 with conclusion selected). Queue: 1384 rules.
233200 rules inserted. Base: 195658 rules (4567 with conclusion selected). Queue: 1384 rules.
233400 rules inserted. Base: 195856 rules (4567 with conclusion selected). Queue: 1406 rules.
233600 rules inserted. Base: 196056 rules (4567 with conclusion selected). Queue: 1432 rules.
233800 rules inserted. Base: 196256 rules (4567 with conclusion selected). Queue: 1432 rules.
234000 rules inserted. Base: 196456 rules (4567 with conclusion selected). Queue: 1432 rules.
234200 rules inserted. Base: 196656 rules (4567 with conclusion selected). Queue: 1432 rules.
234400 rules inserted. Base: 196856 rules (4567 with conclusion selected). Queue: 1432 rules.
234600 rules inserted. Base: 197056 rules (4567 with conclusion selected). Queue: 1430 rules.
234800 rules inserted. Base: 197256 rules (4567 with conclusion selected). Queue: 1430 rules.
235000 rules inserted. Base: 197456 rules (4567 with conclusion selected). Queue: 1430 rules.
235200 rules inserted. Base: 197656 rules (4567 with conclusion selected). Queue: 1430 rules.
235400 rules inserted. Base: 197746 rules (4567 with conclusion selected). Queue: 1430 rules.
235600 rules inserted. Base: 197816 rules (4567 with conclusion selected). Queue: 1430 rules.
235800 rules inserted. Base: 198016 rules (4567 with conclusion selected). Queue: 1430 rules.
236000 rules inserted. Base: 198216 rules (4567 with conclusion selected). Queue: 1430 rules.
236200 rules inserted. Base: 198416 rules (4567 with conclusion selected). Queue: 1426 rules.
236400 rules inserted. Base: 198616 rules (4567 with conclusion selected). Queue: 1382 rules.
236600 rules inserted. Base: 198816 rules (4567 with conclusion selected). Queue: 1382 rules.
236800 rules inserted. Base: 199016 rules (4567 with conclusion selected). Queue: 1382 rules.
237000 rules inserted. Base: 199216 rules (4567 with conclusion selected). Queue: 1382 rules.
237200 rules inserted. Base: 199416 rules (4567 with conclusion selected). Queue: 1382 rules.
237400 rules inserted. Base: 199616 rules (4567 with conclusion selected). Queue: 1382 rules.
237600 rules inserted. Base: 199816 rules (4567 with conclusion selected). Queue: 1378 rules.
237800 rules inserted. Base: 200016 rules (4567 with conclusion selected). Queue: 1362 rules.
238000 rules inserted. Base: 200216 rules (4567 with conclusion selected). Queue: 1362 rules.
238200 rules inserted. Base: 200416 rules (4567 with conclusion selected). Queue: 1362 rules.
238400 rules inserted. Base: 200616 rules (4567 with conclusion selected). Queue: 1362 rules.
238600 rules inserted. Base: 200816 rules (4567 with conclusion selected). Queue: 1362 rules.
238800 rules inserted. Base: 201016 rules (4567 with conclusion selected). Queue: 1362 rules.
239000 rules inserted. Base: 201144 rules (4567 with conclusion selected). Queue: 1298 rules.
239200 rules inserted. Base: 201304 rules (4567 with conclusion selected). Queue: 1294 rules.
239400 rules inserted. Base: 201504 rules (4567 with conclusion selected). Queue: 1290 rules.
239600 rules inserted. Base: 201704 rules (4567 with conclusion selected). Queue: 1290 rules.
239800 rules inserted. Base: 201904 rules (4567 with conclusion selected). Queue: 1290 rules.
240000 rules inserted. Base: 202104 rules (4567 with conclusion selected). Queue: 1290 rules.
240200 rules inserted. Base: 202304 rules (4567 with conclusion selected). Queue: 1290 rules.
240400 rules inserted. Base: 202440 rules (4567 with conclusion selected). Queue: 1282 rules.
240600 rules inserted. Base: 202640 rules (4567 with conclusion selected). Queue: 1230 rules.
240800 rules inserted. Base: 202840 rules (4567 with conclusion selected). Queue: 1186 rules.
241000 rules inserted. Base: 203040 rules (4567 with conclusion selected). Queue: 1186 rules.
241200 rules inserted. Base: 203240 rules (4567 with conclusion selected). Queue: 1180 rules.
241400 rules inserted. Base: 203440 rules (4567 with conclusion selected). Queue: 1174 rules.
241600 rules inserted. Base: 203640 rules (4567 with conclusion selected). Queue: 1170 rules.
241800 rules inserted. Base: 203840 rules (4567 with conclusion selected). Queue: 1170 rules.
242000 rules inserted. Base: 203980 rules (4567 with conclusion selected). Queue: 1170 rules.
242200 rules inserted. Base: 204000 rules (4567 with conclusion selected). Queue: 1168 rules.
242400 rules inserted. Base: 204200 rules (4567 with conclusion selected). Queue: 1128 rules.
242600 rules inserted. Base: 204400 rules (4567 with conclusion selected). Queue: 1086 rules.
242800 rules inserted. Base: 204600 rules (4567 with conclusion selected). Queue: 1074 rules.
243000 rules inserted. Base: 204800 rules (4567 with conclusion selected). Queue: 1074 rules.
243200 rules inserted. Base: 205000 rules (4567 with conclusion selected). Queue: 1074 rules.
243400 rules inserted. Base: 205200 rules (4567 with conclusion selected). Queue: 1074 rules.
243600 rules inserted. Base: 205400 rules (4567 with conclusion selected). Queue: 1074 rules.
243800 rules inserted. Base: 205600 rules (4567 with conclusion selected). Queue: 1074 rules.
244000 rules inserted. Base: 205800 rules (4567 with conclusion selected). Queue: 1074 rules.
244200 rules inserted. Base: 206000 rules (4567 with conclusion selected). Queue: 1058 rules.
244400 rules inserted. Base: 206200 rules (4567 with conclusion selected). Queue: 894 rules.
244600 rules inserted. Base: 206400 rules (4567 with conclusion selected). Queue: 894 rules.
244800 rules inserted. Base: 206600 rules (4567 with conclusion selected). Queue: 894 rules.
245000 rules inserted. Base: 206800 rules (4567 with conclusion selected). Queue: 890 rules.
245200 rules inserted. Base: 207000 rules (4567 with conclusion selected). Queue: 880 rules.
245400 rules inserted. Base: 207200 rules (4567 with conclusion selected). Queue: 816 rules.
245600 rules inserted. Base: 207400 rules (4567 with conclusion selected). Queue: 816 rules.
245800 rules inserted. Base: 207592 rules (4567 with conclusion selected). Queue: 864 rules.
246000 rules inserted. Base: 207716 rules (4567 with conclusion selected). Queue: 796 rules.
246200 rules inserted. Base: 207856 rules (4567 with conclusion selected). Queue: 730 rules.
246400 rules inserted. Base: 208056 rules (4567 with conclusion selected). Queue: 714 rules.
246600 rules inserted. Base: 208256 rules (4567 with conclusion selected). Queue: 704 rules.
246800 rules inserted. Base: 208386 rules (4567 with conclusion selected). Queue: 704 rules.
247000 rules inserted. Base: 208475 rules (4567 with conclusion selected). Queue: 651 rules.
247200 rules inserted. Base: 208594 rules (4567 with conclusion selected). Queue: 570 rules.
247400 rules inserted. Base: 208750 rules (4567 with conclusion selected). Queue: 512 rules.
247600 rules inserted. Base: 208918 rules (4567 with conclusion selected). Queue: 512 rules.
247800 rules inserted. Base: 208992 rules (4567 with conclusion selected). Queue: 504 rules.
248000 rules inserted. Base: 209192 rules (4567 with conclusion selected). Queue: 496 rules.
248200 rules inserted. Base: 209392 rules (4567 with conclusion selected). Queue: 496 rules.
248400 rules inserted. Base: 209544 rules (4567 with conclusion selected). Queue: 496 rules.
248600 rules inserted. Base: 209744 rules (4567 with conclusion selected). Queue: 496 rules.
248800 rules inserted. Base: 209944 rules (4567 with conclusion selected). Queue: 496 rules.
249000 rules inserted. Base: 210144 rules (4567 with conclusion selected). Queue: 496 rules.
249200 rules inserted. Base: 210344 rules (4567 with conclusion selected). Queue: 496 rules.
249400 rules inserted. Base: 210528 rules (4567 with conclusion selected). Queue: 522 rules.
249600 rules inserted. Base: 210728 rules (4567 with conclusion selected). Queue: 624 rules.
249800 rules inserted. Base: 210928 rules (4567 with conclusion selected). Queue: 624 rules.
250000 rules inserted. Base: 211032 rules (4567 with conclusion selected). Queue: 624 rules.
250200 rules inserted. Base: 211232 rules (4567 with conclusion selected). Queue: 624 rules.
250400 rules inserted. Base: 211432 rules (4567 with conclusion selected). Queue: 698 rules.
250600 rules inserted. Base: 211632 rules (4567 with conclusion selected). Queue: 695 rules.
250800 rules inserted. Base: 211832 rules (4567 with conclusion selected). Queue: 619 rules.
251000 rules inserted. Base: 212032 rules (4567 with conclusion selected). Queue: 608 rules.
251200 rules inserted. Base: 212232 rules (4567 with conclusion selected). Queue: 590 rules.
251400 rules inserted. Base: 212432 rules (4567 with conclusion selected). Queue: 499 rules.
251600 rules inserted. Base: 212632 rules (4567 with conclusion selected). Queue: 451 rules.
251800 rules inserted. Base: 212800 rules (4567 with conclusion selected). Queue: 416 rules.
252000 rules inserted. Base: 212904 rules (4567 with conclusion selected). Queue: 392 rules.
252200 rules inserted. Base: 213104 rules (4567 with conclusion selected). Queue: 352 rules.
252400 rules inserted. Base: 213274 rules (4567 with conclusion selected). Queue: 352 rules.
252600 rules inserted. Base: 213376 rules (4567 with conclusion selected). Queue: 352 rules.
252800 rules inserted. Base: 213576 rules (4567 with conclusion selected). Queue: 352 rules.
253000 rules inserted. Base: 213776 rules (4567 with conclusion selected). Queue: 352 rules.
253200 rules inserted. Base: 213976 rules (4567 with conclusion selected). Queue: 352 rules.
253400 rules inserted. Base: 214176 rules (4567 with conclusion selected). Queue: 352 rules.
253600 rules inserted. Base: 214376 rules (4567 with conclusion selected). Queue: 352 rules.
253800 rules inserted. Base: 214560 rules (4567 with conclusion selected). Queue: 352 rules.
254000 rules inserted. Base: 214736 rules (4567 with conclusion selected). Queue: 384 rules.
254200 rules inserted. Base: 214912 rules (4567 with conclusion selected). Queue: 384 rules.
254400 rules inserted. Base: 215016 rules (4567 with conclusion selected). Queue: 372 rules.
254600 rules inserted. Base: 215162 rules (4567 with conclusion selected). Queue: 372 rules.
254800 rules inserted. Base: 215304 rules (4567 with conclusion selected). Queue: 368 rules.
255000 rules inserted. Base: 215456 rules (4567 with conclusion selected). Queue: 368 rules.
255200 rules inserted. Base: 215656 rules (4567 with conclusion selected). Queue: 288 rules.
255400 rules inserted. Base: 215760 rules (4567 with conclusion selected). Queue: 288 rules.
255600 rules inserted. Base: 215960 rules (4567 with conclusion selected). Queue: 288 rules.
255800 rules inserted. Base: 216160 rules (4567 with conclusion selected). Queue: 288 rules.
256000 rules inserted. Base: 216346 rules (4567 with conclusion selected). Queue: 304 rules.
256200 rules inserted. Base: 216528 rules (4567 with conclusion selected). Queue: 352 rules.
256400 rules inserted. Base: 216578 rules (4567 with conclusion selected). Queue: 352 rules.
256600 rules inserted. Base: 216672 rules (4567 with conclusion selected). Queue: 352 rules.
256800 rules inserted. Base: 216866 rules (4567 with conclusion selected). Queue: 352 rules.
257000 rules inserted. Base: 216304 rules (4567 with conclusion selected). Queue: 314 rules.
257200 rules inserted. Base: 216276 rules (4567 with conclusion selected). Queue: 192 rules.
257400 rules inserted. Base: 216064 rules (4567 with conclusion selected). Queue: 162 rules.
257600 rules inserted. Base: 216200 rules (4567 with conclusion selected). Queue: 96 rules.
257800 rules inserted. Base: 216400 rules (4567 with conclusion selected). Queue: 96 rules.
258000 rules inserted. Base: 216568 rules (4567 with conclusion selected). Queue: 96 rules.
258200 rules inserted. Base: 216704 rules (4567 with conclusion selected). Queue: 52 rules.
ok, secrecy assumption verified: fact unreachable attacker2(uc_privkey(s_44),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,uc_privkey(s_44))
ok, secrecy assumption verified: fact unreachable attacker2(uc_psk(s_44),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,uc_psk(s_44))
ok, secrecy assumption verified: fact unreachable attacker2(x_93,dh_k(s_44))
ok, secrecy assumption verified: fact unreachable attacker2(dh_k(s_44),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_CFIN[],ch_client_CFIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_FIN[],ch_client_FIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_CRT[],ch_client_CRT[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_after_EE[],ch_client_after_EE[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_CFIN[],ch_server_CFIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_FIN[],ch_server_FIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_CRT[],ch_server_CRT[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_SH[],ch_server_SH[])
ok, secrecy assumption verified: fact unreachable attacker2(x_93,hmac_ideal(i,zero,uc_psk(s_44)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,zero,uc_psk(s_44)),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_44)),(tls13_resumption_psk_binder_key,hash_ideal(i,zero))))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_44)),(tls13_resumption_psk_binder_key,hash_ideal(i,zero))),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,dh_f(s_44))
ok, secrecy assumption verified: fact unreachable attacker2(dh_f(s_44),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))))
ok, secrecy assumption verified: fact unreachable attacker2(dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_44)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_44)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,hmac_ideal(i,extra_es,dh_f(s_44)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,extra_es,dh_f(s_44)),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_44)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_44)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_44)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_44)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_44)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_44)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_44)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,zero,uc_psk(s_44)),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(t,aead_enc(a_2,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_44)),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)),x_93,y,z))
ok, secrecy assumption verified: fact unreachable attacker2(aead_enc(a_2,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_44)),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)),x_93,y,z),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_44)),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_44)),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,aead_enc(a_2,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_44)),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)),x_93,y,z))
ok, secrecy assumption verified: fact unreachable attacker2(aead_enc(a_2,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_44)),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_key,zero)),x_93,y,z),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_44)),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_f(s_44)),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))),(tls13_finished,zero)),t)
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 83 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 59 rules.
600 rules inserted. Base: 600 rules (0 with conclusion selected). Queue: 258 rules.
800 rules inserted. Base: 800 rules (0 with conclusion selected). Queue: 139 rules.
1000 rules inserted. Base: 1000 rules (0 with conclusion selected). Queue: 443 rules.
1200 rules inserted. Base: 1200 rules (0 with conclusion selected). Queue: 318 rules.
1400 rules inserted. Base: 1400 rules (0 with conclusion selected). Queue: 382 rules.
1600 rules inserted. Base: 1600 rules (0 with conclusion selected). Queue: 246 rules.
1800 rules inserted. Base: 1800 rules (0 with conclusion selected). Queue: 115 rules.
2000 rules inserted. Base: 1997 rules (0 with conclusion selected). Queue: 106 rules.
2200 rules inserted. Base: 2197 rules (0 with conclusion selected). Queue: 108 rules.
2400 rules inserted. Base: 2397 rules (0 with conclusion selected). Queue: 32 rules.
2600 rules inserted. Base: 2597 rules (0 with conclusion selected). Queue: 272 rules.
2800 rules inserted. Base: 2797 rules (0 with conclusion selected). Queue: 189 rules.
3000 rules inserted. Base: 2997 rules (0 with conclusion selected). Queue: 72 rules.
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_client_handshake_traffic_secret,hash_ideal(i,((log,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_key,zero)))
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 60 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 59 rules.
600 rules inserted. Base: 600 rules (0 with conclusion selected). Queue: 259 rules.
800 rules inserted. Base: 800 rules (0 with conclusion selected). Queue: 135 rules.
1000 rules inserted. Base: 1000 rules (0 with conclusion selected). Queue: 444 rules.
1200 rules inserted. Base: 1200 rules (0 with conclusion selected). Queue: 318 rules.
1400 rules inserted. Base: 1400 rules (0 with conclusion selected). Queue: 382 rules.
1600 rules inserted. Base: 1600 rules (0 with conclusion selected). Queue: 246 rules.
1800 rules inserted. Base: 1800 rules (0 with conclusion selected). Queue: 116 rules.
2000 rules inserted. Base: 1997 rules (0 with conclusion selected). Queue: 106 rules.
2200 rules inserted. Base: 2197 rules (0 with conclusion selected). Queue: 106 rules.
2400 rules inserted. Base: 2397 rules (0 with conclusion selected). Queue: 32 rules.
2600 rules inserted. Base: 2597 rules (0 with conclusion selected). Queue: 272 rules.
2800 rules inserted. Base: 2797 rules (0 with conclusion selected). Queue: 189 rules.
3000 rules inserted. Base: 2997 rules (0 with conclusion selected). Queue: 84 rules.
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_client_handshake_traffic_secret,hash_ideal(i,((log,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_key,zero)),t)
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 83 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 59 rules.
600 rules inserted. Base: 600 rules (0 with conclusion selected). Queue: 258 rules.
800 rules inserted. Base: 800 rules (0 with conclusion selected). Queue: 139 rules.
1000 rules inserted. Base: 1000 rules (0 with conclusion selected). Queue: 443 rules.
1200 rules inserted. Base: 1200 rules (0 with conclusion selected). Queue: 318 rules.
1400 rules inserted. Base: 1400 rules (0 with conclusion selected). Queue: 382 rules.
1600 rules inserted. Base: 1600 rules (0 with conclusion selected). Queue: 246 rules.
1800 rules inserted. Base: 1800 rules (0 with conclusion selected). Queue: 115 rules.
2000 rules inserted. Base: 1997 rules (0 with conclusion selected). Queue: 106 rules.
2200 rules inserted. Base: 2197 rules (0 with conclusion selected). Queue: 108 rules.
2400 rules inserted. Base: 2397 rules (0 with conclusion selected). Queue: 32 rules.
2600 rules inserted. Base: 2597 rules (0 with conclusion selected). Queue: 272 rules.
2800 rules inserted. Base: 2797 rules (0 with conclusion selected). Queue: 189 rules.
3000 rules inserted. Base: 2997 rules (0 with conclusion selected). Queue: 72 rules.
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_client_handshake_traffic_secret,hash_ideal(i,((log,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_finished,zero)))
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 60 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 59 rules.
600 rules inserted. Base: 600 rules (0 with conclusion selected). Queue: 259 rules.
800 rules inserted. Base: 800 rules (0 with conclusion selected). Queue: 135 rules.
1000 rules inserted. Base: 1000 rules (0 with conclusion selected). Queue: 444 rules.
1200 rules inserted. Base: 1200 rules (0 with conclusion selected). Queue: 318 rules.
1400 rules inserted. Base: 1400 rules (0 with conclusion selected). Queue: 382 rules.
1600 rules inserted. Base: 1600 rules (0 with conclusion selected). Queue: 246 rules.
1800 rules inserted. Base: 1800 rules (0 with conclusion selected). Queue: 116 rules.
2000 rules inserted. Base: 1997 rules (0 with conclusion selected). Queue: 106 rules.
2200 rules inserted. Base: 2197 rules (0 with conclusion selected). Queue: 106 rules.
2400 rules inserted. Base: 2397 rules (0 with conclusion selected). Queue: 32 rules.
2600 rules inserted. Base: 2597 rules (0 with conclusion selected). Queue: 272 rules.
2800 rules inserted. Base: 2797 rules (0 with conclusion selected). Queue: 189 rules.
3000 rules inserted. Base: 2997 rules (0 with conclusion selected). Queue: 84 rules.
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_client_handshake_traffic_secret,hash_ideal(i,((log,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_finished,zero)),t)
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 83 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 59 rules.
600 rules inserted. Base: 600 rules (0 with conclusion selected). Queue: 258 rules.
800 rules inserted. Base: 800 rules (0 with conclusion selected). Queue: 139 rules.
1000 rules inserted. Base: 1000 rules (0 with conclusion selected). Queue: 443 rules.
1200 rules inserted. Base: 1200 rules (0 with conclusion selected). Queue: 318 rules.
1400 rules inserted. Base: 1400 rules (0 with conclusion selected). Queue: 382 rules.
1600 rules inserted. Base: 1600 rules (0 with conclusion selected). Queue: 246 rules.
1800 rules inserted. Base: 1800 rules (0 with conclusion selected). Queue: 115 rules.
2000 rules inserted. Base: 1997 rules (0 with conclusion selected). Queue: 106 rules.
2200 rules inserted. Base: 2197 rules (0 with conclusion selected). Queue: 108 rules.
2400 rules inserted. Base: 2397 rules (0 with conclusion selected). Queue: 32 rules.
2600 rules inserted. Base: 2597 rules (0 with conclusion selected). Queue: 272 rules.
2800 rules inserted. Base: 2797 rules (0 with conclusion selected). Queue: 189 rules.
3000 rules inserted. Base: 2997 rules (0 with conclusion selected). Queue: 72 rules.
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_server_handshake_traffic_secret,hash_ideal(i,((log,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_key,zero)))
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 60 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 59 rules.
600 rules inserted. Base: 600 rules (0 with conclusion selected). Queue: 259 rules.
800 rules inserted. Base: 800 rules (0 with conclusion selected). Queue: 135 rules.
1000 rules inserted. Base: 1000 rules (0 with conclusion selected). Queue: 444 rules.
1200 rules inserted. Base: 1200 rules (0 with conclusion selected). Queue: 318 rules.
1400 rules inserted. Base: 1400 rules (0 with conclusion selected). Queue: 382 rules.
1600 rules inserted. Base: 1600 rules (0 with conclusion selected). Queue: 246 rules.
1800 rules inserted. Base: 1800 rules (0 with conclusion selected). Queue: 116 rules.
2000 rules inserted. Base: 1997 rules (0 with conclusion selected). Queue: 106 rules.
2200 rules inserted. Base: 2197 rules (0 with conclusion selected). Queue: 106 rules.
2400 rules inserted. Base: 2397 rules (0 with conclusion selected). Queue: 32 rules.
2600 rules inserted. Base: 2597 rules (0 with conclusion selected). Queue: 272 rules.
2800 rules inserted. Base: 2797 rules (0 with conclusion selected). Queue: 189 rules.
3000 rules inserted. Base: 2997 rules (0 with conclusion selected). Queue: 84 rules.
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_server_handshake_traffic_secret,hash_ideal(i,((log,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_key,zero)),t)
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 83 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 59 rules.
600 rules inserted. Base: 600 rules (0 with conclusion selected). Queue: 258 rules.
800 rules inserted. Base: 800 rules (0 with conclusion selected). Queue: 139 rules.
1000 rules inserted. Base: 1000 rules (0 with conclusion selected). Queue: 443 rules.
1200 rules inserted. Base: 1200 rules (0 with conclusion selected). Queue: 318 rules.
1400 rules inserted. Base: 1400 rules (0 with conclusion selected). Queue: 382 rules.
1600 rules inserted. Base: 1600 rules (0 with conclusion selected). Queue: 246 rules.
1800 rules inserted. Base: 1800 rules (0 with conclusion selected). Queue: 115 rules.
2000 rules inserted. Base: 1997 rules (0 with conclusion selected). Queue: 106 rules.
2200 rules inserted. Base: 2197 rules (0 with conclusion selected). Queue: 108 rules.
2400 rules inserted. Base: 2397 rules (0 with conclusion selected). Queue: 32 rules.
2600 rules inserted. Base: 2597 rules (0 with conclusion selected). Queue: 272 rules.
2800 rules inserted. Base: 2797 rules (0 with conclusion selected). Queue: 189 rules.
3000 rules inserted. Base: 2997 rules (0 with conclusion selected). Queue: 72 rules.
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_server_handshake_traffic_secret,hash_ideal(i,((log,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_finished,zero)))
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 60 rules.
400 rules inserted. Base: 400 rules (0 with conclusion selected). Queue: 59 rules.
600 rules inserted. Base: 600 rules (0 with conclusion selected). Queue: 259 rules.
800 rules inserted. Base: 800 rules (0 with conclusion selected). Queue: 135 rules.
1000 rules inserted. Base: 1000 rules (0 with conclusion selected). Queue: 444 rules.
1200 rules inserted. Base: 1200 rules (0 with conclusion selected). Queue: 318 rules.
1400 rules inserted. Base: 1400 rules (0 with conclusion selected). Queue: 382 rules.
1600 rules inserted. Base: 1600 rules (0 with conclusion selected). Queue: 246 rules.
1800 rules inserted. Base: 1800 rules (0 with conclusion selected). Queue: 116 rules.
2000 rules inserted. Base: 1997 rules (0 with conclusion selected). Queue: 106 rules.
2200 rules inserted. Base: 2197 rules (0 with conclusion selected). Queue: 106 rules.
2400 rules inserted. Base: 2397 rules (0 with conclusion selected). Queue: 32 rules.
2600 rules inserted. Base: 2597 rules (0 with conclusion selected). Queue: 272 rules.
2800 rules inserted. Base: 2797 rules (0 with conclusion selected). Queue: 189 rules.
3000 rules inserted. Base: 2997 rules (0 with conclusion selected). Queue: 84 rules.
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i,hmac_ideal(i,hmac_ideal(i,extra_es,dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))),(tls13_server_handshake_traffic_secret,hash_ideal(i,((log,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i),dh_encap_fun(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)),dh_xy(s_xy,CH(r_4,nego(v_373,h_76,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i),dh_pub(id_g(StrongDH,i),dh_k(s_x)))),sn,e,p,ex)))))),sn',e',p',ex')))))),(tls13_finished,zero)),t)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,dh_xy(s',dh_pub(id_g(StrongDH,2),dh_k(s_44))))
ok, secrecy assumption verified: fact unreachable attacker2(dh_xy(s',dh_pub(id_g(StrongDH,2),dh_k(s_44))),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,hmac_ideal(2,hmac_ideal(2,dh_xy(s',dh_pub(id_g(StrongDH,2),dh_k(s_44))),(hpke_secret,zero)),(hpke_key,hmac_ideal(2,zero,(hpke_info_hash,info_3)))))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(2,hmac_ideal(2,dh_xy(s',dh_pub(id_g(StrongDH,2),dh_k(s_44))),(hpke_secret,zero)),(hpke_key,hmac_ideal(2,zero,(hpke_info_hash,info_3)))),x_93)
ok, secrecy assumption verified: fact unreachable attacker2(x_93,hmac_ideal(2,hmac_ideal(2,dh_f(s'),(hpke_secret,zero)),(hpke_key,hmac_ideal(2,zero,(hpke_info_hash,info_3)))))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(2,hmac_ideal(2,dh_f(s'),(hpke_secret,zero)),(hpke_key,hmac_ideal(2,zero,(hpke_info_hash,info_3)))),x_93)
RESULT Diff-equivalence is true.

--------------------------------------------------------------
Verification summary:

Query(ies):
 - Diff-equivalence is true.
Associated axiom(s):
 - 
Axiom event(PreciseMess(ch,choice[id_16,id2_1],choice[st1,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id_16,id2'],choice[st1',st2'],choice[x1',x2'])) ==> st1 = st1' && x1 = x1' encoded as event2(PreciseMess(ch,id_16,st1,x1),PreciseMess(ch,id2_1,st2,x2)) && event2(PreciseMess(ch,id_16,st1',x1'),PreciseMess(ch,id2',st2',x2')) ==> st1 = st1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id_16],choice[st1,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id_16],choice[st1',st2'],choice[x1',x2'])) ==> st2 = st2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1,x1),PreciseMess(ch,id_16,st2,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id_16,st2',x2')) ==> st2 = st2' && x2 = x2'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st_4,st2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st_4,st2'],choice[x1',x2'])) ==> id1_1 = id1' && x1 = x1' encoded as event2(PreciseMess(ch,id1_1,st_4,x1),PreciseMess(ch,id2_1,st2,x2)) && event2(PreciseMess(ch,id1',st_4,x1'),PreciseMess(ch,id2',st2',x2')) ==> id1_1 = id1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st1,st_4],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st1',st_4],choice[x1',x2'])) ==> id2_1 = id2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1,x1),PreciseMess(ch,id2_1,st_4,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id2',st_4,x2')) ==> id2_1 = id2' && x2 = x2'
 in biprocess 1.
Associated restriction(s):
 - Restriction event(Same(choice[x_93,x'])) ==> x_93 = x' encoded as event2(Same(x_93),Same(x')) ==> x_93 = x' in biprocess 1.
 - Restriction event(Selected_lgt(choice[c_dom1_1,c_dom1'],choice[c_dom2_1,c_dom2'],choice[sk_2,sk'],choice[spkey,spkey'],choice[crt_5,crt'])) ==> c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && ((c_dom1_1 = c_dom1' && sk_2 = sk' && spkey = spkey' && crt_5 = crt') || c_dom1_1 ≠ c_dom1') encoded as event2(Selected_lgt(c_dom1_1,c_dom2_1,sk_2,spkey,crt_5),Selected_lgt(c_dom1',c_dom2',sk',spkey',crt')) ==> c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && ((c_dom1_1 = c_dom1' && sk_2 = sk' && spkey = spkey' && crt_5 = crt') || c_dom1_1 ≠ c_dom1') in biprocess 1.
 - Restriction event(Selected_psk(choice[c_dom1_1,c_dom1'],choice[c_dom2_1,c_dom2'],choice[s_dom1_1,s_dom1'],choice[s_dom2_1,s_dom2'],choice[id_16,id'],choice[ipsk,ipsk'])) ==> s_dom1_1 = s_dom2_1 && s_dom1' = s_dom2' && c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && c_dom1_1 = c_dom1' && ((s_dom1_1 = s_dom1' && id_16 = id' && ipsk = ipsk') || s_dom1_1 ≠ s_dom1') encoded as event2(Selected_psk(c_dom1_1,c_dom2_1,s_dom1_1,s_dom2_1,id_16,ipsk),Selected_psk(c_dom1',c_dom2',s_dom1',s_dom2',id',ipsk')) ==> s_dom1_1 = s_dom2_1 && s_dom1' = s_dom2' && c_dom1_1 = c_dom2_1 && c_dom1' = c_dom2' && c_dom1_1 = c_dom1' && ((s_dom1_1 = s_dom1' && id_16 = id' && ipsk = ipsk') || s_dom1_1 ≠ s_dom1') in biprocess 1.

--------------------------------------------------------------

