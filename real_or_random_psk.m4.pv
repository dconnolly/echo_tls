set removeEventsForLemma = true.

(* Restriction for equivalence *)

lemma c_dom,c_dom',s_dom,s_dom':domain,h_alg',h_alg:hash_alg,id,id':identityPsk,ipsk,ipsk':internal_preSharedKey,
  c_dom1,c_dom2,s_dom1,s_dom2:domain,h_alg1,h_alg2:hash_alg,id1,id2:identityPsk,ipsk1,ipsk2:internal_preSharedKey,
  safe,safe',safe1,safe2:bool,idP,idP',idP1,idP2:idProc;
  table(pre_shared_keys(diff[c_dom,c_dom'],diff[s_dom,s_dom'],diff[h_alg,h_alg'],diff[id,id'],diff[ipsk,ipsk'],diff[idP,idP'],diff[safe,safe'])) ==>
    h_alg = id_hash(StrongHash,1) &&
    h_alg' = id_hash(StrongHash,1) &&
    id = mk_idpsk(c_dom,s_dom,h_alg,ipsk) &&
    id' = mk_idpsk(c_dom',s_dom',h_alg',ipsk') &&
    safe = safe' &&
    idP = idP';
  table(pre_shared_keys(diff[c_dom,c_dom1],diff[s_dom,s_dom1],diff[h_alg,h_alg1],diff[id,id1],diff[ipsk,ipsk1],idP,safe)) &&
  table(pre_shared_keys(diff[c_dom,c_dom2],diff[s_dom,s_dom2],diff[h_alg,h_alg2],diff[id,id2],diff[ipsk,ipsk2],idP',safe')) ==>
  c_dom1 = c_dom2 && s_dom1 = s_dom2 && h_alg1 = h_alg2 && id1 = id2 && ipsk1 = ipsk2 && safe = safe' && idP = idP';
  table(pre_shared_keys(diff[c_dom1,c_dom],diff[s_dom1,s_dom],diff[h_alg1,h_alg],diff[id1,id],diff[ipsk1,ipsk],idP,safe)) &&
  table(pre_shared_keys(diff[c_dom2,c_dom],diff[s_dom2,s_dom],diff[h_alg2,h_alg],diff[id2,id],diff[ipsk2,ipsk],idP',safe')) ==>
  c_dom1 = c_dom2 && s_dom1 = s_dom2 && h_alg1 = h_alg2 && id1 = id2 && ipsk1 = ipsk2 && safe = safe' && idP = idP';
  attacker(diff[ipsk,ipsk1]) &&  table(pre_shared_keys(diff[c_dom,c_dom'],diff[s_dom,s_dom'],diff[h_alg,h_alg'],diff[id,id'],diff[ipsk,ipsk2],idP,safe)) ==> ipsk1 = ipsk2 && safe <> true;
  attacker(diff[ipsk1,ipsk]) &&  table(pre_shared_keys(diff[c_dom,c_dom'],diff[s_dom,s_dom'],diff[h_alg,h_alg'],diff[id,id'],diff[ipsk2,ipsk],idP,safe)) ==> ipsk1 = ipsk2 && safe <> true
  [induction]
.

(* Dishonest key generation *)

let gen_dishonest_long_term_keys =
  !
  in(io,a:domain);
  event Same(d2b(a));
  new sk_d:privkey;
  out(io,(sk_d,valid_cert(a,pk(sk_d))))
.

let gen_dishonest_pre_shared_keys(h_alg:hash_alg) =
  !
  new idP:idProc;
  in(io,(c_dom:domain,s_dom:domain));
  event Same((c_dom,s_dom));
  new psk_d:internal_preSharedKey;
  let id = mk_idpsk(c_dom,s_dom,h_alg,psk_d) in
  insert pre_shared_keys(c_dom,s_dom,h_alg,id,psk_d,idP,false);
  out(io,psk_d)
.

ifdef(<!DISECH!>,<!dnl
let gen_dishonest_ech_config(g:group,h_alg:hash_alg,a_alg:aead_alg) =
  !
  in(io,o_dom:domain);
  event Same(d2b(o_dom));
  new id: configId;
  new skR_d:bitstring;
  let pkR_d = dh_pub(g,skR_d) in
  let config = ech_config(id,g,pkR_d,o_dom,h_alg,a_alg) in
  insert ech_configurations(config,skR_d);
  out(io,(config,skR_d))
.
!>)dnl

process
  (* The group and cipher suite between TLS and Ech should be incompatible *)
  let tls_h = id_hash(StrongHash,1) in
  let tls_a = id_aead(StrongAE,1) in
  let tls_g = id_g(StrongDH,1) in
  let ech_h = id_hash(StrongHash,2) in
  let ech_a = id_aead(StrongAE,2) in
  let ech_g = id_g(StrongDH,2) in
  (
      main_process(tls_h,ech_h,tls_a,ech_a,tls_g,ech_g)
    | gen_dishonest_long_term_keys
    | gen_dishonest_pre_shared_keys(tls_h)
ifdef(<!DISECH!>,<!dnl
    | gen_dishonest_ech_config(ech_g,ech_h,ech_a)
!>)dnl
    | (
      !
      new id_client:idProc;
      ifdef(<!DOPSK!>,<!let use_psk = true in!>) ifdef(<!NOPSK!>,<!let use_psk = false in!>) ifdef(<!UPSK!>,<!in(io,use_psk:bool)[precise];!>)
      ifdef(<!KEX!>,<!let send_kex = true in!>) ifdef(<!NOKEX!>,<!let send_kex = false in!>) ifdef(<!UKEX!>,<!in(io,send_kex:bool)[precise];!>)
      in(io,(c_dom:domain,s_dom:domain,comp_psk:bool)) [precise];
      event Same((use_psk,send_kex,c_dom,s_dom,comp_psk));
      standard_client(id_client,comp_psk,use_psk,send_kex,c_dom,s_dom,tls_g,tls_h,tls_a,empty_extra_ext)
    ) | (
      !
      ifdef(<!GREASE!>,<!let use_grease = true in!>) ifdef(<!NOGREASE!>,<!let use_grease = false in!>) ifdef(<!UGREASE!>,<!in(io,use_grease:bool)[precise];!>)
      ifdef(<!DOPSK!>,<!let use_psk = true in!>) ifdef(<!NOPSK!>,<!let use_psk = false in!>) ifdef(<!UPSK!>,<!in(io,use_psk:bool)[precise];!>)
      ifdef(<!KEX!>,<!let send_kex = true in!>) ifdef(<!NOKEX!>,<!let send_kex = false in!>) ifdef(<!UKEX!>,<!in(io,send_kex:bool)[precise];!>)
      in(io,(c_dom:domain,cfs_dom:domain,backend_dom:domain,comp_psk:bool)) [precise];
      event Same((use_grease,use_psk,send_kex,c_dom,cfs_dom,backend_dom,comp_psk));
      get ech_configurations(ech_config(id,g,pkR,=cfs_dom,h_alg,a_alg),skR) in
      let ech_conf = ech_config(id,g,pkR,cfs_dom,h_alg,a_alg) in
      echo_client(comp_psk,use_grease,use_psk,send_kex,c_dom,backend_dom,tls_g,tls_h,tls_a,ech_conf,empty_extra_ext,empty_extra_ext)
    ) | (
      !
      ifdef(<!DOPSK!>,<!let use_psk = true in!>) ifdef(<!NOPSK!>,<!let use_psk = false in!>) ifdef(<!UPSK!>,<!in(io,use_psk:bool) [precise];!>)
      ifdef(<!CERT!>,<!let cert_req = true in!>) ifdef(<!NOCERT!>,<!let cert_req = false in!>) ifdef(<!UCERT!>,<!in(io,cert_req:bool) [precise];!>)
      in(io,(use_ech:bool,s_dom:domain)) [precise];
      event Same((use_ech,use_psk,cert_req,s_dom));
      server(use_ech,use_psk,cert_req,s_dom,tls_g,tls_h,tls_a,empty_extra_ext)
    )
  )

ifdef(<!SCENARIO1!>,<!
ifdef(<!NOHRR!>,<!!>,<!
(* EXPECTPV FILENAME: ./real_or_random_psk.m4.pv TAG: 1
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO2!>,<!
ifdef(<!NOHRR!>,<!!>,<!
(* EXPECTPV FILENAME: ./real_or_random_psk.m4.pv TAG: 2
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO3!>,<!
ifdef(<!NOHRR!>,<!!>,<!
(* EXPECTPV FILENAME: ./real_or_random_psk.m4.pv TAG: 3
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO4!>,<!
ifdef(<!NOHRR!>,<!!>,<!
(* EXPECTPV FILENAME: ./real_or_random_psk.m4.pv TAG: 4
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO5!>,<!
ifdef(<!NOHRR!>,<!!>,<!
(* EXPECTPV FILENAME: ./real_or_random_psk.m4.pv TAG: 5
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO5!>,<!
ifdef(<!NOHRR!>,<!!>,<!
(* EXPECTPV FILENAME: ./real_or_random_psk.m4.pv TAG: 6
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO1!>,<!
ifdef(<!NOHRR!>,<!
(* EXPECTPV FILENAME: ./real_or_random_psk.m4.pv TAG: 7
RESULT table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_12,s_dom'],choice[h_alg_13,h_alg'_1],choice[id_8,id'],choice[ipsk,ipsk'],choice[idP_6,idP'_2],choice[safe_2,safe'])) ==> h_alg_13 = id_hash(StrongHash,1) && h_alg'_1 = id_hash(StrongHash,1) && id_8 = mk_idpsk(c_dom_8,s_dom_12,h_alg_13,ipsk) && id' = mk_idpsk(c_dom',s_dom',h_alg'_1,ipsk') && safe_2 = safe' && idP_6 = idP'_2 is true.
RESULT table(pre_shared_keys(choice[c_dom_8,c_dom1],choice[s_dom_12,s_dom1],choice[h_alg_13,h_alg1],choice[id_8,id1],choice[ipsk,ipsk1],idP_6,safe_2)) && table(pre_shared_keys(choice[c_dom_8,c_dom2],choice[s_dom_12,s_dom2],choice[h_alg_13,h_alg2],choice[id_8,id2],choice[ipsk,ipsk2],idP'_2,safe')) ==> c_dom1 = c_dom2 && s_dom1 = s_dom2 && h_alg1 = h_alg2 && id1 = id2 && ipsk1 = ipsk2 && safe_2 = safe' && idP_6 = idP'_2 is true.
RESULT table(pre_shared_keys(choice[c_dom1,c_dom_8],choice[s_dom1,s_dom_12],choice[h_alg1,h_alg_13],choice[id1,id_8],choice[ipsk1,ipsk],idP_6,safe_2)) && table(pre_shared_keys(choice[c_dom2,c_dom_8],choice[s_dom2,s_dom_12],choice[h_alg2,h_alg_13],choice[id2,id_8],choice[ipsk2,ipsk],idP'_2,safe')) ==> c_dom1 = c_dom2 && s_dom1 = s_dom2 && h_alg1 = h_alg2 && id1 = id2 && ipsk1 = ipsk2 && safe_2 = safe' && idP_6 = idP'_2 is true.
RESULT attacker(choice[ipsk,ipsk1]) && table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_12,s_dom'],choice[h_alg_13,h_alg'_1],choice[id_8,id'],choice[ipsk,ipsk2],idP_6,safe_2)) ==> ipsk1 = ipsk2 && safe_2 ≠ true is true.
RESULT attacker(choice[ipsk1,ipsk]) && table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_12,s_dom'],choice[h_alg_13,h_alg'_1],choice[id_8,id'],choice[ipsk2,ipsk],idP_6,safe_2)) ==> ipsk1 = ipsk2 && safe_2 ≠ true is true.
RESULT Diff-equivalence is true.
793.752s (user 789.736s + system 4.016s), max rss 2587996K
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO2!>,<!
ifdef(<!NOHRR!>,<!
(* EXPECTPV FILENAME: ./real_or_random_psk.m4.pv TAG: 8
RESULT table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_12,s_dom'],choice[h_alg_13,h_alg'_1],choice[id_8,id'],choice[ipsk,ipsk'],choice[idP_6,idP'_2],choice[safe_2,safe'])) ==> h_alg_13 = id_hash(StrongHash,1) && h_alg'_1 = id_hash(StrongHash,1) && id_8 = mk_idpsk(c_dom_8,s_dom_12,h_alg_13,ipsk) && id' = mk_idpsk(c_dom',s_dom',h_alg'_1,ipsk') && safe_2 = safe' && idP_6 = idP'_2 is true.
RESULT table(pre_shared_keys(choice[c_dom_8,c_dom1],choice[s_dom_12,s_dom1],choice[h_alg_13,h_alg1],choice[id_8,id1],choice[ipsk,ipsk1],idP_6,safe_2)) && table(pre_shared_keys(choice[c_dom_8,c_dom2],choice[s_dom_12,s_dom2],choice[h_alg_13,h_alg2],choice[id_8,id2],choice[ipsk,ipsk2],idP'_2,safe')) ==> c_dom1 = c_dom2 && s_dom1 = s_dom2 && h_alg1 = h_alg2 && id1 = id2 && ipsk1 = ipsk2 && safe_2 = safe' && idP_6 = idP'_2 is true.
RESULT table(pre_shared_keys(choice[c_dom1,c_dom_8],choice[s_dom1,s_dom_12],choice[h_alg1,h_alg_13],choice[id1,id_8],choice[ipsk1,ipsk],idP_6,safe_2)) && table(pre_shared_keys(choice[c_dom2,c_dom_8],choice[s_dom2,s_dom_12],choice[h_alg2,h_alg_13],choice[id2,id_8],choice[ipsk2,ipsk],idP'_2,safe')) ==> c_dom1 = c_dom2 && s_dom1 = s_dom2 && h_alg1 = h_alg2 && id1 = id2 && ipsk1 = ipsk2 && safe_2 = safe' && idP_6 = idP'_2 is true.
RESULT attacker(choice[ipsk,ipsk1]) && table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_12,s_dom'],choice[h_alg_13,h_alg'_1],choice[id_8,id'],choice[ipsk,ipsk2],idP_6,safe_2)) ==> ipsk1 = ipsk2 && safe_2 ≠ true is true.
RESULT attacker(choice[ipsk1,ipsk]) && table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_12,s_dom'],choice[h_alg_13,h_alg'_1],choice[id_8,id'],choice[ipsk2,ipsk],idP_6,safe_2)) ==> ipsk1 = ipsk2 && safe_2 ≠ true is true.
RESULT Diff-equivalence is true.
341.051s (user 339.627s + system 1.424s), max rss 1467396K
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO3!>,<!
ifdef(<!NOHRR!>,<!
(* EXPECTPV FILENAME: ./real_or_random_psk.m4.pv TAG: 9
RESULT table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_12,s_dom'],choice[h_alg_13,h_alg'_1],choice[id_8,id'],choice[ipsk,ipsk'],choice[idP_6,idP'_2],choice[safe_2,safe'])) ==> h_alg_13 = id_hash(StrongHash,1) && h_alg'_1 = id_hash(StrongHash,1) && id_8 = mk_idpsk(c_dom_8,s_dom_12,h_alg_13,ipsk) && id' = mk_idpsk(c_dom',s_dom',h_alg'_1,ipsk') && safe_2 = safe' && idP_6 = idP'_2 is true.
RESULT table(pre_shared_keys(choice[c_dom_8,c_dom1],choice[s_dom_12,s_dom1],choice[h_alg_13,h_alg1],choice[id_8,id1],choice[ipsk,ipsk1],idP_6,safe_2)) && table(pre_shared_keys(choice[c_dom_8,c_dom2],choice[s_dom_12,s_dom2],choice[h_alg_13,h_alg2],choice[id_8,id2],choice[ipsk,ipsk2],idP'_2,safe')) ==> c_dom1 = c_dom2 && s_dom1 = s_dom2 && h_alg1 = h_alg2 && id1 = id2 && ipsk1 = ipsk2 && safe_2 = safe' && idP_6 = idP'_2 is true.
RESULT table(pre_shared_keys(choice[c_dom1,c_dom_8],choice[s_dom1,s_dom_12],choice[h_alg1,h_alg_13],choice[id1,id_8],choice[ipsk1,ipsk],idP_6,safe_2)) && table(pre_shared_keys(choice[c_dom2,c_dom_8],choice[s_dom2,s_dom_12],choice[h_alg2,h_alg_13],choice[id2,id_8],choice[ipsk2,ipsk],idP'_2,safe')) ==> c_dom1 = c_dom2 && s_dom1 = s_dom2 && h_alg1 = h_alg2 && id1 = id2 && ipsk1 = ipsk2 && safe_2 = safe' && idP_6 = idP'_2 is true.
RESULT attacker(choice[ipsk,ipsk1]) && table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_12,s_dom'],choice[h_alg_13,h_alg'_1],choice[id_8,id'],choice[ipsk,ipsk2],idP_6,safe_2)) ==> ipsk1 = ipsk2 && safe_2 ≠ true is true.
RESULT attacker(choice[ipsk1,ipsk]) && table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_12,s_dom'],choice[h_alg_13,h_alg'_1],choice[id_8,id'],choice[ipsk2,ipsk],idP_6,safe_2)) ==> ipsk1 = ipsk2 && safe_2 ≠ true is true.
RESULT Diff-equivalence is true.
662.460s (user 658.584s + system 3.876s), max rss 2940664K
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO4!>,<!
ifdef(<!NOHRR!>,<!
(* EXPECTPV FILENAME: ./real_or_random_psk.m4.pv TAG: 10
RESULT table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_12,s_dom'],choice[h_alg_13,h_alg'_1],choice[id_8,id'],choice[ipsk,ipsk'],choice[idP_6,idP'_2],choice[safe_2,safe'])) ==> h_alg_13 = id_hash(StrongHash,1) && h_alg'_1 = id_hash(StrongHash,1) && id_8 = mk_idpsk(c_dom_8,s_dom_12,h_alg_13,ipsk) && id' = mk_idpsk(c_dom',s_dom',h_alg'_1,ipsk') && safe_2 = safe' && idP_6 = idP'_2 is true.
RESULT table(pre_shared_keys(choice[c_dom_8,c_dom1],choice[s_dom_12,s_dom1],choice[h_alg_13,h_alg1],choice[id_8,id1],choice[ipsk,ipsk1],idP_6,safe_2)) && table(pre_shared_keys(choice[c_dom_8,c_dom2],choice[s_dom_12,s_dom2],choice[h_alg_13,h_alg2],choice[id_8,id2],choice[ipsk,ipsk2],idP'_2,safe')) ==> c_dom1 = c_dom2 && s_dom1 = s_dom2 && h_alg1 = h_alg2 && id1 = id2 && ipsk1 = ipsk2 && safe_2 = safe' && idP_6 = idP'_2 is true.
RESULT table(pre_shared_keys(choice[c_dom1,c_dom_8],choice[s_dom1,s_dom_12],choice[h_alg1,h_alg_13],choice[id1,id_8],choice[ipsk1,ipsk],idP_6,safe_2)) && table(pre_shared_keys(choice[c_dom2,c_dom_8],choice[s_dom2,s_dom_12],choice[h_alg2,h_alg_13],choice[id2,id_8],choice[ipsk2,ipsk],idP'_2,safe')) ==> c_dom1 = c_dom2 && s_dom1 = s_dom2 && h_alg1 = h_alg2 && id1 = id2 && ipsk1 = ipsk2 && safe_2 = safe' && idP_6 = idP'_2 is true.
RESULT attacker(choice[ipsk,ipsk1]) && table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_12,s_dom'],choice[h_alg_13,h_alg'_1],choice[id_8,id'],choice[ipsk,ipsk2],idP_6,safe_2)) ==> ipsk1 = ipsk2 && safe_2 ≠ true is true.
RESULT attacker(choice[ipsk1,ipsk]) && table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_12,s_dom'],choice[h_alg_13,h_alg'_1],choice[id_8,id'],choice[ipsk2,ipsk],idP_6,safe_2)) ==> ipsk1 = ipsk2 && safe_2 ≠ true is true.
RESULT Diff-equivalence is true.
7148.652s (user 7110.048s + system 38.603s), max rss 9536724K
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO5!>,<!
ifdef(<!NOHRR!>,<!
(* EXPECTPV FILENAME: ./real_or_random_psk.m4.pv TAG: 11
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO6!>,<!
ifdef(<!NOHRR!>,<!
(* EXPECTPV FILENAME: ./real_or_random_psk.m4.pv TAG: 12
END *)
!>)dnl
!>)dnl
