(* changequote(<!,!>)dnl *)

(* M4 variables in this file:
  - SERVER_SELECT_CRT : For the selection of server certificate.
*)

(********************
  Server processes
*********************)

(* The private channels used for passing arguments *)

(* All communications through these channels should have the following format:
    (id_server:idProc,(arg1,...,arg_n))
  For each channel, we define a data function symbol define the arguments.
  It is not necessary as we could use a tuple but it allows us to do some type
  checking.
*)

(* The Post Handshake messages *)

let server_post_handshake(id_server:idProc,
    cr,sr:bytes32,h_alg:hash_alg,a_alg:aead_alg,
    s_dom:domain, s_pkey,c_pkey:pubkey,
    psk:preSharedKey,
    cak,sak:aead_key,cfkad:mac_key,rms:bitstring,
    cur_log:bitstring
  )=

  (
    (* New Session Ticket *)
    if allow_PH_new_session_ticket then

    (* Generate of a new ticket for the client *)
    in(io,seq_srv:nat) [precise];
    if is_nat(seq_srv) then

    new ticket_nonce[seq_srv]:bitstring;
    let new_psk = psk_from_ticket(h_alg,rms,ticket_nonce) in
    event Server_new_PSK(id_server,new_psk);
    let ticket_id = mk_idpsk(s_dom,h_alg,new_psk) in

    let ticket_msg = NST(ticket_nonce,ticket_id) in
    let enc_ticket_msg = aead_enc(a_alg,sak,n2b(seq_srv),zero,m2b(ticket_msg)) in
    new st[]:stamp;
    event ServerSequenceServerDataWriteKey(id_server,st,seq_srv); (* To model the sequence of messages using server write key *)
    event ServerNewTicket(id_server,psk,s_pkey,c_pkey,seq_srv,new_psk);
    event ServerSends(id_server,cr,sr,psk,s_pkey,c_pkey,seq_srv,zero,m2b(ticket_msg));
    out(io,enc_ticket_msg)
  ) | (
    (* Sending data if requested *)
    if allow_PH_data then
    (
      !
      in(io,(seq_srv:nat,ad:bitstring)) (*[precise]*);
      if is_nat(seq_srv) then
      new msgs[seq_srv,ad]:bitstring;
      new st[]:stamp;
      event ServerSequenceServerDataWriteKey(id_server,st,seq_srv); (* To model the sequence of messages using server write key *)
      event ServerSends(id_server,cr,sr,psk,s_pkey,c_pkey,seq_srv,ad,msgs);
      out(io,aead_enc(a_alg,sak,n2b(seq_srv),ad,msgs))
    ) | (
      !
      in(io,(seq_client:nat,ad:bitstring, enc_msg:bitstring));
      if is_nat(seq_client) then
      let msgs = aead_dec(a_alg,cak,n2b(seq_client),ad,enc_msg) in
        new st[]:stamp;
        event ServerSequenceClientDataWriteKey(id_server,st,seq_client); (* To model the sequence of messages using server write key *)
        event ServerReceives(id_server,cr,sr,psk,s_pkey,c_pkey,seq_client,ad,msgs)
      else out(io,bad_record_mac)
    )
  ) | (
    (* Rounds of post handshake authentication *)
    if allow_PH_authentication then
    !
    (* Selection of the sequence numbers *)
    in(io,(seq_srv:nat,seq_client:nat));
    if is_nat(seq_srv) && is_nat(seq_client) then

    (* The server requests a client certificate *)
    new req_rand:bitstring;
    event ServerRequestPH(id_server,cr,sr,psk,s_pkey,c_pkey,req_rand);

    let crtr_msg = CRTR(req_rand) in
    let enc_crt = aead_enc(a_alg,sak,n2b(seq_srv),zero,m2b(crtr_msg)) in
    new st[]:stamp;
    event ServerSequenceServerDataWriteKey(id_server,st,seq_srv); (* To model the sequence of messages using server write key *)
    event ServerSends(id_server,cr,sr,psk,s_pkey,c_pkey,seq_srv,zero,m2b(crtr_msg));
    out(io,enc_crt);
    let cur_log_CRTR = (cur_log,crtr_msg) in

    (* Waiting for the client certificate *)
    in(io,enc_cert_msg:bitstring);
    let m2b(cert_msg) = aead_dec(a_alg,cak,n2b(seq_client),zero,enc_cert_msg) in
    new st1[]:stamp;
    event ServerSequenceClientDataWriteKey(id_server,st1,seq_client); (* To model the sequence of messages using server write key *)
    event ServerReceives(id_server,cr,sr,psk,s_pkey,c_pkey,seq_client,zero,m2b(cert_msg));
    let CRT(=req_rand,crt) = cert_msg in
    let cur_log_CRT = (cur_log_CRTR,cert_msg) in

    in(io,enc_cert_verif_msg:bitstring);
    let m2b(cert_verify_msg) = aead_dec(a_alg,cak,n2b(seq_client+1),zero,enc_cert_verif_msg) in
    new st2[]:stamp;
    event ServerSequenceClientDataWriteKey(id_server,st2,seq_client); (* To model the sequence of messages using server write key *)
    event ServerReceives(id_server,cr,sr,psk,s_pkey,c_pkey,seq_client+1,zero,m2b(cert_verify_msg));
    let CV(signed_log) = cert_verify_msg in

    if verify(get_pkey(crt),hash(h_alg,cur_log_CRT),signed_log) && verify_cert(crt) then
    let c_pkey' = get_pkey(crt) in
    let cur_log_CV = (cur_log_CRT,cert_verify_msg) in

    in(io,enc_fin:bitstring);
    let m2b(fin_msg) = aead_dec(a_alg,cak,n2b(seq_client+2),zero,enc_fin) in
    new st3[]:stamp;
    event ServerSequenceClientDataWriteKey(id_server,st3,seq_client); (* To model the sequence of messages using server write key *)
    event ServerReceives(id_server,cr,sr,psk,s_pkey,c_pkey,seq_client+2,zero,m2b(fin_msg));
    let FIN(hash_msg) = fin_msg in

    if hash_msg = hmac(h_alg,cfkad,cur_log_CV)
    then event ServerFinishedPH(id_server,cr,sr,psk,s_pkey,c_pkey,req_rand,c_pkey')
    else out(io,handshake_failure)
  )
.

(* Receive the client finished message *)

free ch_server_CFIN:channel [private].
fun ArgsServerCFIN(
  bytes32,bytes32,hash_alg,aead_alg,
  domain, pubkey, pubkey,
  preSharedKey,
  bitstring,aead_key,nat,mac_key,
  bitstring
):bitstring [data].

let receive_client_finished_message =
  !
  in(ch_server_CFIN,(id_server:idProc,ArgsServerCFIN(
    cr,sr,h_alg,a_alg,
    s_dom, s_pkey, c_pkey,
    psk,
    master_secret,chk,c_seq,cfin,
    cur_log)));

  (* Begin Proof Helper *)
  new st[]:stamp;
  event PreciseIdProcess(ch_server_CFIN,id_server,st);
  event Server_Rand_client(id_server,cr);
  event Server_Rand_server(id_server,sr);
  event Server_PSKChoosen(id_server,psk);
  event Server_chk(id_server,chk);
  event Server_cfin(id_server,cfin);
  event Server_Cert_server(id_server,s_pkey);
  event Server_Cert_client(id_server,c_pkey);
  (* End Proof Helper *)

  new st1[]:stamp;
  (* event PreciseMess(ch_server_CFIN,id_server,st,(master_secret)); *)
  event PreciseMess(ch_server_CFIN,id_server,st1,(chk,cfin,master_secret));

  in(io,enc_fin:bitstring);
  let m2b(fin_msg) = aead_dec(a_alg,chk,n2b(c_seq),zero,enc_fin) in
  let FIN(hash_msg) = fin_msg in

  if hash_msg = hmac(h_alg,cfin,cur_log) then
  let (cak:aead_key,sak:aead_key,cfkad:mac_key,ems:bitstring) = kdf_k(h_alg,master_secret,cur_log) in
  let cur_log_CFIN = (cur_log,fin_msg) in
  let rms = kdf_psk(h_alg,master_secret,cur_log_CFIN) in

  event Server_cak(id_server,cak);
  event Server_sak(id_server,sak);
  event Server_cfkad(id_server,cfkad);
  event Server_rms(id_server,rms);

  (* End of the 1-RTT Handshake *)

  event ServerFinished(id_server,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms);

  server_post_handshake(id_server,
    cr,sr,h_alg,a_alg,
    s_dom, s_pkey, c_pkey,
    psk,
    cak,sak,cfkad,rms,
    cur_log_CFIN
  )
.

(* Sends the server finish message *)

free ch_server_FIN:channel[private].
fun ArgsServerFIN(
  bytes32,bytes32,hash_alg,aead_alg,
  domain, pubkey, bool,
  preSharedKey,
  bitstring,aead_key,nat,aead_key,nat,mac_key,mac_key,
  bitstring
):bitstring [data].

let send_server_finished_message =
  !
  in(ch_server_FIN,(id_server:idProc,ArgsServerFIN(
    cr,sr,h_alg,a_alg,
    s_dom, s_pkey, req_cert,
    psk,
    master_secret, chk, c_seq, shk, s_seq, cfin,sfin,
    cur_log)));

  (* Begin Proof Helper *)
  new st[]:stamp;
  event PreciseIdProcess(ch_server_FIN,id_server,st);
  event Server_Rand_client(id_server,cr);
  event Server_Rand_server(id_server,sr);
  event Server_PSKChoosen(id_server,psk);
  event Server_chk(id_server,chk);
  event Server_shk(id_server,shk);
  event Server_cfin(id_server,cfin);
  event Server_sfin(id_server,sfin);
  event Server_Cert_server(id_server,s_pkey);
  (* End Proof Helper *)

  new st1[]:stamp;
  (* event PreciseMess(ch_server_FIN,id_server,st,master_secret); *)
  event PreciseMess(ch_server_FIN,id_server,st1,(chk,shk,master_secret));

  let hash_msg = hmac(h_alg,sfin,cur_log) in
  let finished_msg = FIN(hash_msg) in
  let enc_finished = aead_enc(a_alg,shk,n2b(s_seq),zero,m2b(finished_msg)) in

  event PreServerFinished(id_server,cr,sr,psk,s_pkey);

  out(io,enc_finished);
  let cur_log_FIN = (cur_log,finished_msg) in

  (* Receiving messages from the client depending on psk and cert_req *)
  if req_cert && psk = NoPsk
  then (
      (* A certificate request from the client is requested *)
      in(io,enc_cert_msg:bitstring);
      let m2b(cert_msg) = aead_dec(a_alg,chk,n2b(c_seq),zero,enc_cert_msg) in
      let CRT(=zero,crt) = cert_msg in

      let cur_log_CRT = (cur_log_FIN,cert_msg) in

      in(io,enc_cert_verif_msg:bitstring);
      let m2b(cert_verify_msg) = aead_dec(a_alg,chk,n2b(c_seq+1),zero,enc_cert_verif_msg) in
      let CV(signed_log) = cert_verify_msg in

      if verify(get_pkey(crt),hash(h_alg,cur_log_CRT),signed_log) && verify_cert(crt) then
      let c_pkey = get_pkey(crt) in
      let cur_log_CV = (cur_log_CRT,cert_verify_msg) in

      event Server_Cert_client(id_server,c_pkey);

      out(ch_server_CFIN,(id_server,ArgsServerCFIN(
        cr,sr,h_alg,a_alg,
        s_dom, s_pkey, c_pkey,
        psk,
        master_secret, chk, c_seq+2, cfin,
        cur_log_CV)))
  )
  else
    (* A psk is used so no certificate or no psk is used but the server did not ask for a
    certificate request from the client *)
    event Server_Cert_client(id_server,NoPubKey);
    out(ch_server_CFIN,(id_server,ArgsServerCFIN(
      cr,sr,h_alg,a_alg,
      s_dom, s_pkey, NoPubKey,
      psk,
      master_secret, chk, c_seq, cfin,
      cur_log_FIN)))
.

(* Send server certificate message *)

free ch_server_CRT:channel [private].
fun ArgsServerCRT(
  bytes32,bytes32,hash_alg,aead_alg,
  domain, bool,
  bitstring,aead_key,nat,aead_key,nat,mac_key,mac_key,
  bitstring
):bitstring [data].

let send_server_certificate_message =
  !
  in(ch_server_CRT,(id_server:idProc,ArgsServerCRT(
    cr,sr,h_alg,a_alg,
    s_dom, req_cert,
    master_secret, chk, c_seq, shk, s_seq, cfin,sfin,
    cur_log)));

  (* Begin Proof Helper *)
  new st[]:stamp;
  event PreciseIdProcess(ch_server_CRT,id_server,st);
  event Server_Rand_client(id_server,cr);
  event Server_Rand_server(id_server,sr);
  event Server_PSKChoosen(id_server,NoPsk);
  event Server_chk(id_server,chk);
  event Server_shk(id_server,shk);
  event Server_cfin(id_server,cfin);
  event Server_sfin(id_server,sfin);
  (* End Proof Helper *)

  new st1[]:stamp;
  (* event PreciseMess(ch_server_CRT,id_server,st,master_secret); *)
  event PreciseMess(ch_server_CRT,id_server,st1,(master_secret,chk,shk));

  let (sk:privkey,s_pkey:pubkey,crt:certificate) =
    if select_server_certificate_by_restriction
    then (
      get long_term_keys(s_dom',sk,s_pkey,crt,idP) in
      let () = proof_helper_S_CRT_get((s_dom',sk,s_pkey,crt,idP)) in
      event Selected_ltk(s_dom,s_dom',idP);
      (sk,s_pkey,crt)
    )
    else
      get long_term_keys(=s_dom,sk,s_pkey,crt,idP) in
      let () = proof_helper_S_CRT_get((s_dom,sk,s_pkey,crt,idP)) in
      (sk,s_pkey,crt)
  in

  event Server_Cert_server(id_server,s_pkey);

  (* The Certificate message *)
  let certificate_msg = CRT(zero,crt) in
  let encrypted_certificate_msg = aead_enc(a_alg,shk,n2b(s_seq),zero,m2b(certificate_msg)) in
  out(io,encrypted_certificate_msg);
  let cur_log_CRT = (cur_log,certificate_msg) in

  (* The CertificateVerify message *)
  let signed_log = sign(sk,hash(h_alg,cur_log_CRT)) in
  let certificate_verify_msg = CV(signed_log) in
  let encrypted_certificate_verify_msg = aead_enc(a_alg,shk,n2b(s_seq+1),zero,m2b(certificate_verify_msg)) in
  out(io,encrypted_certificate_verify_msg);
  let cur_log_CV = (cur_log_CRT,certificate_verify_msg) in

  out(ch_server_FIN,(id_server,ArgsServerFIN(
    cr,sr,h_alg,a_alg,
    s_dom, s_pkey, req_cert,
    NoPsk,
    master_secret,chk,c_seq,shk,s_seq+2,cfin,sfin,
    cur_log_CV
  )))
.

(* When the server process the client hello and the HRR checks have already been
  perform *)

free ch_server_SH:channel [private].
fun ArgsServerSH(
  group,hash_alg,aead_alg,
  domain, bool,
  bool, bool,bool,
  msg,msg,bitstring
):bitstring [data].

let process_client_hello_noHRR =
  !
  in(ch_server_SH,(id_server:idProc,ArgsServerSH(
    tls_g,tls_h,tls_a,
    s_dom, req_cert,
    is_backend,use_psk,no_HRR,
    ee_msg,client_hello,cur_log (* Should not contain the current client hello *)
    )));

  new st[]:stamp;
  (* event PreciseMess(ch_server_SH,id_server,st,m2b(client_hello)); *)
  event PreciseMess(ch_server_SH,id_server,st,(use_psk,client_hello));

  let CH(cr,offer) = client_hello in
  event Server_Rand_client(id_server,cr);

  (* Verify the cipher suite and group *)
  let nego(=TLS13,=tls_h,=tls_a,client_kex_ext(DHE_kex(=tls_g,gx)),sni_ext,ech_ext,extra_ext,psk_ext) = offer in (
    if sni_ext = SNI(s_dom)
    then (
      event Server_DH_client(id_server,gx);

      (* Retrieve the early secret from the psk. *)
      let (early_secret:bitstring,s_psk_ext:preSharedKeyExt,psk:preSharedKey) = generate_early_secret_psk_extension(use_psk,s_dom,client_hello,cur_log) in

      event Server_PSKChoosen(id_server,psk);

      let cur_log_CH = (cur_log,client_hello) in (
        (* Checks if it needs to receive an early data message. If it does
          then it tries to decrypt it and output on the private channel ch_early_data_SH
          for continuation. *)
        (
          if allow_early_data && no_HRR && psk <> NoPsk then
          !
          in(io,(i:nat,ad:bitstring,enc_early_data:bitstring)) (*[precise]*);
          let (wkc0:aead_key,ems0:bitstring) = kdf_k0(tls_h,early_secret,cur_log_CH) in
          let early_data:bitstring = aead_dec(tls_a,wkc0,n2b(i),ad,enc_early_data) in (
            new st1[]:stamp;
            event ServerSequenceClient0RTTDataWriteKey(id_server,st1,i);
            event ServerReceives0(id_server,s_dom,cr,psk,i,ad,early_data)
          )
          else out(io,bad_record_mac)
        ) | (
          (* Generate key share and handshake secret *)
          let (gxy:element,gy:element) = dh_encap(tls_g,gx,m2b(client_hello)) in

          event Server_DH_server(id_server,gy);
          event Server_DH_gxy(id_server,gxy);

          let handshake_secret = kdf_hs(tls_h,early_secret,gxy) in

          let s_offer = nego(TLS13,tls_h,tls_a,server_kex_ext(DHE_kex(tls_g,gy)),empty_sni_ext,empty_ech_ext,empty_extra_ext,s_psk_ext) in

          let sr =
            if is_backend
            then
              new sr24[]:bytes24;
              generate_accept_confirmation(sr24,tls_h,s_offer,client_hello,cur_log_CH)
            else gen_B32_random ()
          in

          let server_hello = SH(sr,s_offer) in

          event Server_Rand_server(id_server,sr);
          event ServerChoosesGroup(id_server,tls_g);
          event ServerChoosesHash(cr,sr,tls_h);
          event ServerChoosesAead(cr,sr,tls_a);

          out(io,server_hello);
          let cur_log_SH = (cur_log_CH,server_hello) in

          (* Generate the master keys *)
          let (master_secret:bitstring,chk:aead_key,shk:aead_key,cfin:mac_key,sfin:mac_key) =
            kdf_ms(tls_h,handshake_secret,cur_log_SH)
          in

          event Server_chk(id_server,chk);
          event Server_shk(id_server,shk);
          event Server_cfin(id_server,cfin);
          event Server_sfin(id_server,sfin);

          (* Sending the encrypted extension *)
          let enc_ee = aead_enc(tls_a,shk,n2b(0),zero,m2b(ee_msg)) in
          out(io,enc_ee);
          let cur_log_EE = (cur_log_SH,ee_msg) in

          (* Sends either the finish message or the certificate messages *)
          if psk = NoPsk
          then
            if req_cert
            then (
              (* The server requests a client certificate *)
              let crtr_msg = CRTR(zero) in
              let enc_crt = aead_enc(tls_a,shk,n2b(1),zero,m2b(crtr_msg)) in
              out(io,enc_crt);
              let cur_log_CRTR = (cur_log_EE,crtr_msg) in

              (* Sends the certificate *)
              out(ch_server_CRT,(id_server,ArgsServerCRT(
                cr,sr,tls_h,tls_a,
                s_dom, req_cert,
                master_secret,chk,0,shk,2,cfin,sfin,
                cur_log_CRTR)))
            )
            else
              out(ch_server_CRT,(id_server,ArgsServerCRT(
                cr,sr,tls_h,tls_a,
                s_dom, req_cert,
                master_secret,chk,0,shk,1,cfin,sfin,
                cur_log_EE)))
          else
            out(ch_server_FIN,(id_server,ArgsServerFIN(
              cr,sr,tls_h,tls_a,
              s_dom, NoPubKey, false,
              psk,
              master_secret,chk,0,shk,1,cfin,sfin,
              cur_log_EE)))
        )
      )
    )
    else out(io,illegal_parameter)
  )
  else out(io,handshake_failure)
.

(* Case of:
  - a normal TLS server
  - an ECH server receiving no ECH extension
  - an ECH server where the ECH was not accepted.
*)
let standard_HRR_check(id_server:idProc,
  use_ech,use_psk,req_cert:bool,
  s_dom:domain,
  tls_g:group,tls_h:hash_alg,tls_a:aead_alg,
  ee_msg:msg,
  client_hello:msg
  ) =

  let CH(cr,nego(=TLS13,=tls_h,=tls_a,kex_ext,SNI(=s_dom),ech_ext,extra_ext,psk_ext)) = client_hello in (
    let (=true,client_kex_ext(DHE_group(=tls_g))) = (allow_HRR,kex_ext) in (
      (* Received a correct group but no key share : Send a HelloRetryRequest *)
      let hrr_mode = nego(TLS13,tls_h,tls_a,hrr_kex_ext(tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext) in
      let hello_retry_request = SH(rand_HelloRetryRequest,hrr_mode) in
      out(io,hello_retry_request);
      let cur_log_HRR = ((zero,client_hello),hello_retry_request) in

      (* Since an HRR was sent, the server should not accept early_data. Note that
        we do not model the fact that the server will ignore the early_data potentially
        sent by the client. Since the attacker has control over the interleaving, it
        corresponds to the trace where the attacker intercepts these early data
        messages and does not send them. *)

      (* Received the new client hello *)
      in(io,client_hello':msg);
      let CH(cr',offer') = client_hello' in
        out(ch_server_SH,(id_server,ArgsServerSH(
          tls_g,tls_h,tls_a,
          s_dom, req_cert,
          false,use_psk,false,
          ee_msg,client_hello',cur_log_HRR
        )))
      else out(io,unexpected_message)
    )
    else let client_kex_ext(DHE_kex(=tls_g,gx)) = kex_ext in (
      out(ch_server_SH,(id_server,ArgsServerSH(
        tls_g,tls_h,tls_a,
        s_dom, req_cert,
        false,use_psk,true,
        ee_msg,client_hello,zero
      )))
    )
    else
      (* Received an incorrect group or invalid kex extension *)
      out(io,handshake_failure)
  )
  else out(io,handshake_failure)
.

(* Part of the server that corresponds to the backend server. Includes the
  verifications that the frontend server must do when sending an HRR *)
let ech_HRR_check(id_server:idProc,
  use_psk,req_cert:bool,
  tls_g:group,tls_h:hash_alg,tls_a:aead_alg,
  ee_msg:msg,
  context:hpkeContext,
  ech_conf:echConfig, (* The ECH config of the frontend server *)
  i_client_hello:msg
  ) =

  (*** Backend server part *)
  let CH(cr,nego(=TLS13,=tls_h,=tls_a,kex_ext,SNI(i_dom),=ECHClientHelloInner,extra_ext,psk_ext)) = i_client_hello in (
    (* The Backend checks the key share *)
    let (=true,client_kex_ext(DHE_group(=tls_g))) = (allow_HRR,kex_ext) in (
      (* Received a correct group but no key share : Send a HelloRetryRequest *)
      let hrr_msg = generate_hello_retry_request(tls_g,tls_h,tls_a,i_client_hello) in

      (* The HRR is sent to the frontend that forwards it *)
      out(io,hrr_msg);

      (* Since an HRR was sent, the server should not accept early_data. Note that
        we do not model the fact that the server will ignore the early_data potentially
        sent by the client. Since the attacker has control over the interleaving, it
        corresponds to the trace where the attacker intercepts these early data
        messages and does not send them. *)

      (*** Frontend server part *)
      let ech_config(id_conf,ech_g,pkR,s_dom,ech_h,ech_a) = ech_conf in

      (* Receiving the new client hello *)
      in(io,o_client_hello:msg);

      (* It verifies that it is a client hello (otherwise raise "unexpected message") *)
      let CH(cr',nego(=TLS13,h_alg',a_alg',kex_ext',SNI(=s_dom),ech_ext,extra_ext',psk_ext')) = o_client_hello in (
        (* Note that the front-end does not check the ciphersuite nor the key share of the outer at that point. *)
        (* It verifies that there is an ECH extension *)
        if ech_ext = empty_ech_ext
        then out(io,missing_extension)
        else
          let ECHClientHelloOuter(=ech_h,=ech_a,=id_conf,=b2e(zero),payload) = ech_ext in (
            let client_hello_AAD = generate_client_hello_outer_AAD(o_client_hello) in
            let m2b(i_client_hello') = hpke_open(ech_a,context,2,m2b(client_hello_AAD),payload) in (
              (* The decryption worked. The new inner client hello was retrieved
                and is forwarded to the backend server. *)
              (*** Backend server part *)
              let CH(i_cr,nego(=TLS13,i_h_alg,i_a_alg,i_kex_ext,SNI(=i_dom),=ECHClientHelloInner,i_extra_ext,i_psk_ext)) = i_client_hello' in (
                out(ch_server_SH,(id_server,ArgsServerSH(
                  tls_g,tls_h,tls_a,
                  i_dom, req_cert,
                  true,use_psk,false,
                  ee_msg, i_client_hello',
                  ((zero,i_client_hello),hrr_msg) (* The current_log from Backend point of view
                    (last client_hello_excluded) *)
                )))
              )
              else out(io,illegal_parameter)
            )
            else out(io,decrypt_error)
          )
          else out(io,illegal_parameter)
      )
      else out(io,unexpected_message)
    )
    else let client_kex_ext(DHE_kex(=tls_g,gx)) = kex_ext in (
      (* Received a correct group and a key share. The backend can proceed *)
      out(ch_server_SH,(id_server,ArgsServerSH(
        tls_g,tls_h,tls_a,
        i_dom, req_cert,
        true,use_psk,true,
        ee_msg, i_client_hello, zero (* The current log (latest client_hello excluded) *)
      )))
    )
    else
      (* Received an incorrect group or invalid kex extension *)
      out(io,handshake_failure)
  )
  else out(io,handshake_failure)
.

(* The main server *)

let server(
  use_ech,use_psk,req_cert:bool,
  s_dom:domain,
  tls_g:group,tls_h:hash_alg,tls_a:aead_alg, (* The group and cipher suite accepted by the standard TLS server or frontend *)
  backend_g:group,backend_h:hash_alg,backend_a:aead_alg, (* The group and cipher suite accepted by the backend server *)
  ee_extra:extraExt (* Some extensions to be sent in the EncryptedExtension message *)
  ) =

  (* Identifier process *)
  new id_server[]:idProc;

  (* Receive a client hello *)
  in(io,o_client_hello:msg);
  let CH(cr,nego(=TLS13,c_h_alg,c_a_alg,kex_ext,sni_ext,ech_ext,extra_ext,psk_ext)) = o_client_hello in (
    (* Verify the domain *)
    if sni_ext = SNI(s_dom)
    then (
      (* We retrieve an ech configuration even if the server will not accept ECH.
        It is not a restriction as the attacker can always generate configuration
        for everyone that will not be used.
        Similarly, we directly generate the retry_ech_ext that may be used later
        on. Does not impact the verification but make the verification more efficient. *)
      get ech_configurations(ech_config(config_id,ech_g,pkR,=s_dom,ech_h,ech_a),skR) in
      let ech_conf = ech_config(config_id,ech_g,pkR,s_dom,ech_h,ech_a) in
      let () = proof_helper_S((ech_conf,skR)) in

      event ServerChoosesEchConfig(id_server,ech_conf,use_ech);

      let retry_ech_ext = generate_retry_ech_ext(ech_conf) in

      if use_ech <> true || ech_ext = empty_ech_ext
      then
        event ServerEchAcceptance(id_server,false);
        standard_HRR_check(id_server,
          use_ech,use_psk,req_cert,
          s_dom,
          tls_g,tls_h,tls_a,
          EE(empty_ech_ext,ee_extra),
          o_client_hello
        )
      else
        let ECHClientHelloOuter(ech_h',ech_a',config_id',enc,payload) = ech_ext in
          (* We check steps 1 and 2 (see scenario.txt) *)
          if ech_h' = ech_h && ech_a' = ech_a && config_id' = config_id
          then (
            (* The server tries to decrypt (Step 3 in scenario.txt) *)
            let context = generate_context_frontend_server(ech_h,ech_g,skR,ech_conf,enc) in
            let client_hello_AAD = generate_client_hello_outer_AAD(o_client_hello) in
            let m2b(i_client_hello) = hpke_open(ech_a,context,1,m2b(client_hello_AAD),payload) in (
              (* The decryption worked so the frontend must verify that the "encrypted_client_hello"
                is of type Inner and that the version is TLS 1.3*)
              let CH(cr',nego(=TLS13,c_h_alg',c_a_alg',kex_ext',SNI(i_dom),=ECHClientHelloInner,extra_ext',psk_ext')) = i_client_hello in (
                (* All checks were successful, the front forwards to the backend. *)
                event ServerEchAcceptance(id_server,true);
                ech_HRR_check(id_server,
                  use_psk,req_cert,
                  backend_g,backend_h,backend_a,
                  EE(empty_ech_ext,ee_extra),context,ech_conf,
                  i_client_hello
                )
              )
              else out(io,illegal_parameter)
            )
            else
              (* The decryption does not work *)
              event ServerEchAcceptance(id_server,false);
              standard_HRR_check(id_server,
                use_ech,use_psk,req_cert,
                s_dom,
                tls_g,tls_h,tls_a,
                EE(retry_ech_ext,ee_extra),
                o_client_hello
              )
          )
          else (
            (* ECH not accepted.
              The frontend ignores the extension and proceed with the OuterClientHello.
              It must send a retry configuration. *)
            event ServerEchAcceptance(id_server,false);
            standard_HRR_check(id_server,
              use_ech,use_psk,req_cert,
              s_dom,
              tls_g,tls_h,tls_a,
              EE(retry_ech_ext,ee_extra),
              o_client_hello
            )
          )
        else
          (* The type of the "encrypted_client_hello" extension is not outer. *)
          out(io,illegal_parameter)
    )
    else out(io,handshake_failure)
  )
  else out(io,unexpected_message)
.
