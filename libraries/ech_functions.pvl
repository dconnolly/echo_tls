(*******************************)
(*  Some ECH functionnalities  *)
(*******************************)

(* Authenticating the ClientHelloOuter. (Section 5.2 of ECH RFC) *)

letfun generate_client_hello_outer_AAD(client_hello_outer:msg) =
  let CH(r,nego(v,h_alg,a_alg,kex_ext,sni_ext,ech_ext,extra_ext,psk_ext)) = client_hello_outer in
  let ECHClientHelloOuter(h_alg_ech,a_alg_ech,config_id,enc,payload) = ech_ext in

  (* The client_hello_outer with the payload is set of zero *)
  let ech_ext' = ECHClientHelloOuter(h_alg_ech,a_alg_ech,config_id,enc,zero) in
  CH(r,nego(v,h_alg,a_alg,kex_ext,sni_ext,ech_ext',extra_ext,psk_ext)).

(* Generation of enc and context *)
letfun generate_enc_context_client(
  ech_h:hash_alg,
  pkR:kem_encaps_key, (* The public key of config *)
  config:echConfig (* The ECH configuration *)
  ) =
  hpke_setup_base_S(ech_h, pkR, (tls_ech_str,config))
.

(* Generation of the context for frontserver (Section 7.1 of ECH RFC) *)
letfun generate_context_frontend_server(
  ech_h:hash_alg,
  skR:kem_decaps_key, (* The private key associated to the public key of config *)
  config:echConfig, (* The ECH configuration *)
  enc:bitstring (* ECHClientHelloOuter.enc found in the client hello. *)
  ) =
  hpke_setup_base_R(ech_h, enc, skR, (tls_ech_str,config))
.

(* Generation of an "encrypted_client_hello" extension with retry configuration *)
letfun generate_retry_ech_ext(config:echConfig) =
  let ech_config(config_id,g,pkR,s_dom,h_alg,a_alg) = config in
  let (skR':bitstring,pkR':element) = dh_keygen(g) in
  new config_id'[]:configId;
  ECHConfigList(ech_config(config_id',g,pkR',s_dom,h_alg,a_alg))
.

(* The "accept_confirmation" that is used by the backend server to signal acc.
  See Section 7.2 of ECH RFC. *)

letfun generate_accept_confirmation(
  sr24:bytes24,
  tls_h:hash_alg,
  params_server_hello:params,
  inner_client_hello:msg, (* The lastest ClientHelloInner *)
  cur_log:bitstring (* From first ClientHelloInner up to and excluding the modified ServerHello *)
  ) =
  (* Generate a random first 24 bytes and create a modified Server Hello *)
  let sh_modified = SH(B32(sr24,zero8),params_server_hello) in
  let cur_log_sh = (cur_log,sh_modified) in
  let transcript_ech_conf = hash(tls_h,cur_log_sh) in
  let sr8 =
    crop_into_bytes8(hkdf_expand_label(
      tls_h,
      hkdf_extract(tls_h,zero,b32_2_b(get_random(inner_client_hello))),
      ech_accept_confirmation,
      cur_log_sh
    ))
  in
  B32(sr24,sr8)
.

(* The "hrr_accept_confirmation" that is used in the HelloRetryRequest from
  the backend server. See Section 7.2.1 of ECH RFC. *)

(* In the RFC, the acceptation message is computed by applying HKDF-Expand-Label
  with a length set to 8. We encode this by "cropping" to 8 bytes a standard
  application of hpke_label_expand. This is not exactly the same but it does not
  reduce capabilities of the attacker.
*)
letfun generate_hrr_accept_confirmation(
  tls_g:group,tls_h:hash_alg,tls_a:aead_alg,
  inner_client_hello:msg
  ) =

  (* Generate a standard HRR where the encrypted_client_hello extension has a payload
  of 8 zero bytes. *)
  let hrr_mode = nego(TLS13,tls_h,tls_a,hrr_kex_ext(tls_g),empty_sni_ext,ECHHelloRetryRequest(zero8),empty_extra_ext,empty_psk_ext) in
  let hrr = SH(rand_HelloRetryRequest,hrr_mode) in

  let cur_log = ((zero,inner_client_hello),hrr) in
  let transcript_hrr_ech_conf = hash(tls_h,cur_log) in

  crop_into_bytes8(hkdf_expand_label(
    tls_h,
    hkdf_extract(tls_h,zero,b32_2_b(get_random(inner_client_hello))),
    hrr_ech_accept_confirmation,
    cur_log
  ))
.

(* The generation of the random the must be sent by the backend in its HRR *)
letfun generate_hello_retry_request(
  tls_g:group,tls_h:hash_alg,tls_a:aead_alg, (* Params of the backend *)
  inner_client_hello:msg (* The inner client hello forwarded by the frontend *)
  ) =
  let hrr_accept_confirmation = generate_hrr_accept_confirmation(tls_g,tls_h,tls_a,inner_client_hello) in
  let hrr_mode = nego(TLS13,tls_h,tls_a,hrr_kex_ext(tls_g),empty_sni_ext,ECHHelloRetryRequest(hrr_accept_confirmation),empty_extra_ext,empty_psk_ext) in
  SH(rand_HelloRetryRequest,hrr_mode)
.


(* Generate the initial client hello *)
letfun generate_initial_client_hello_ech(
  id_client:idProc,
  use_grease,use_psk,send_kex:bool,c_dom,i_dom:domain,
  tls_g,backend_g:group,tls_h,backend_h:hash_alg,tls_a,backend_a:aead_alg,
  ech_conf:echConfig,enc:element,context:hpkeContext, (* For ech *)
  i_extra:extraExt
  ) =

  let ech_config(config_id, ech_g, pkR, o_dom, ech_h, ech_a) = ech_conf in

  (* The key share extension *)
  let (i_kex_ext:keyShareExt,i_kex_data:bitstring) = make_key_share_extension(backend_g,send_kex) in
  let (o_kex_ext:keyShareExt,o_kex_data:bitstring) = make_key_share_extension(tls_g,send_kex) in

  (* Generate the random for the inner and outer client hello *)
  let i_cr = gen_B32_random () in
  let o_cr = gen_B32_random () in

  (* Generate the ech_extension for the inner when grease <> true and outer when grease = true *)
  let ech_inner_or_grease =
    if use_grease
    then (
      new payload[]:bitstring;
      new configid[]:configId;
      let (x_grease:kem_decaps_key, gx_grease:kem_encaps_key) = kem_keygen() in
      let (secret_grease:bitstring, enc_grease:bitstring) = hpke_encap(gx_grease) in
      ECHClientHelloOuter(ech_h, ech_a, configid, enc_grease, payload)
    ) else ECHClientHelloInner
  in

  (* The pre shared key extension for the inner when grease <> true and outer when grease = true *)
  let (psk_ext:preSharedKeyExt,psk_data:bitstring) =
    let (dom_psk:domain,cr_psk:bytes32,kex_ext_psk:keyShareExt,extra_psk:extraExt,h_psk:hash_alg,a_psk:aead_alg) =
      if use_grease
      then (o_dom,o_cr,o_kex_ext,empty_extra_ext,tls_h,tls_a)
      else (i_dom,i_cr,i_kex_ext,i_extra,backend_h,backend_a)
    in
    make_pre_shared_key_extension(id_client,zero,use_psk,c_dom,dom_psk,cr_psk,h_psk,a_psk,kex_ext_psk,ech_inner_or_grease,extra_psk,zero)
  in

  (* The inner client hello *)
  let i_offer = nego(TLS13,backend_h,backend_a,i_kex_ext,SNI(i_dom),ECHClientHelloInner,i_extra,psk_ext) in
  let i_client_hello = CH(i_cr,i_offer) in

  if use_grease
  then (
    let o_offer = nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom),ech_inner_or_grease,empty_extra_ext,psk_ext) in
    (CH(o_cr,o_offer),CH(o_cr,o_offer),o_cr,o_cr,o_kex_data,o_kex_data,psk_ext,psk_data,ech_inner_or_grease)
  )
  else (
    let o_psk_ext =
      if use_psk
      then
        new fake_id[]:identityPsk;
        new fake_binder[]:bitstring;
        client_psk_ext(fake_id,fake_binder)
      else empty_psk_ext
    in

    (* Direct generation of ADD *)
    let o_ech_ext_ADD = ECHClientHelloOuter(ech_h,ech_a,config_id,enc,zero) in
    let o_offer_ADD = nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom),o_ech_ext_ADD,empty_extra_ext,o_psk_ext) in
    let o_client_hello_ADD = CH(o_cr,o_offer_ADD) in

    let payload = kpke_seal(ech_a,context,1,m2b(o_client_hello_ADD),m2b(i_client_hello)) in
    let o_ech_ext = ECHClientHelloOuter(ech_h,ech_a,config_id,enc,payload) in
    let o_offer = nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom),o_ech_ext,empty_extra_ext,o_psk_ext) in

    (CH(o_cr,o_offer),i_client_hello,o_cr,i_cr,o_kex_data,i_kex_data,o_psk_ext,psk_data,o_ech_ext)
  )
.

(* Generate the second client hello for the backend *)
letfun generate_second_client_hello_for_backend(
  id_client:idProc,old_psk_data:bitstring,
  use_psk:bool,c_dom,i_dom:domain,
  tls_g,backend_g:group,tls_h,backend_h:hash_alg,tls_a,backend_a:aead_alg,
  ech_conf:echConfig,context:hpkeContext, (* For ech *)
  i_extra:extraExt,
  cur_log:bitstring (* Should be ((zero,Inner1),HRR) *)
  ) =

  let ech_config(config_id,ech_g,pkR,o_dom,ech_h,ech_a) = ech_conf in

  (* The key share extension *)
  let (i_kex_ext:keyShareExt,i_kex_data:bitstring) = make_key_share_extension(backend_g,true) in
  let (o_kex_ext:keyShareExt,o_kex_data:bitstring) = make_key_share_extension(tls_g,true) in

  (* Generate the random for the inner and outer client hello *)
  let i_cr = gen_B32_random () in
  let o_cr = gen_B32_random () in

  (* The pre shared key extension for the inner  *)
  let (psk_ext:preSharedKeyExt,psk_data:bitstring) =
    make_pre_shared_key_extension(id_client,old_psk_data,use_psk,c_dom,i_dom,i_cr,backend_h,backend_a,i_kex_ext,ECHClientHelloInner,i_extra,cur_log)
  in

  (* The inner client hello *)
  let i_offer = nego(TLS13,backend_h,backend_a,i_kex_ext,SNI(i_dom),ECHClientHelloInner,i_extra,psk_ext) in
  let i_client_hello = CH(i_cr,i_offer) in

  let o_psk_ext =
    if use_psk
    then
      new fake_id[]:identityPsk;
      new fake_binder[]:bitstring;
      client_psk_ext(fake_id,fake_binder)
    else empty_psk_ext
  in

  (* Direct generation of ADD *)
  let o_ech_ext_ADD = ECHClientHelloOuter(ech_h,ech_a,config_id,b2e(zero),zero) in
  let o_offer_ADD = nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom),o_ech_ext_ADD,empty_extra_ext,o_psk_ext) in
  let o_client_hello_ADD = CH(o_cr,o_offer_ADD) in

  let payload = kpke_seal(ech_a,context,2,m2b(o_client_hello_ADD),m2b(i_client_hello)) in
  let o_ech_ext = ECHClientHelloOuter(ech_h,ech_a,config_id,b2e(zero),payload) in
  let o_offer = nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom),o_ech_ext,empty_extra_ext,o_psk_ext) in

  (CH(o_cr,o_offer),i_client_hello,i_cr,i_kex_data,psk_data)
.

(* Generate the second client hello for the frontend *)
letfun generate_second_client_hello_for_frontend(
  id_client:idProc,old_psk_data:bitstring,old_psk_ext:preSharedKeyExt,old_ech_ext:echExt,
  use_grease,use_psk:bool,c_dom:domain,
  tls_g:group,tls_h:hash_alg,tls_a:aead_alg,
  ech_conf:echConfig, (* For ech *)
  cur_log:bitstring (* Should be ((zero,Outer1),HRR) *)
  ) =

  let ech_config(config_id,ech_g,pkR,o_dom,ech_h,ech_a) = ech_conf in

  (* Generate the random for the outer client hello *)
  let o_cr = gen_B32_random () in

  (* The key share extension *)
  let (o_kex_ext:keyShareExt,kex_data:bitstring) = make_key_share_extension(tls_g,true) in

  let (psk_ext:preSharedKeyExt,psk_data:bitstring) =
    if use_grease
    then (
      make_pre_shared_key_extension(
        id_client,
        old_psk_data,
        use_psk,c_dom,o_dom,o_cr,
        tls_h,tls_a,o_kex_ext,old_ech_ext,empty_extra_ext,cur_log)
    )
    else
      (* When grease was not used then the PSK ext in Outer1 was a greased PSK.
        We need to generate a new Grease PSK in Outer2 with the same id. *)
      let (es:bitstring,kb:mac_key) = kdf_es(tls_h,NoPsk) in
      let client_psk_ext(fake_id,fake_binder) = old_psk_ext in (
        (* When use_psk = true *)
        new fake_binder'[]:bitstring;
        (client_psk_ext(fake_id,fake_binder'),(NoPsk,b2idpsk(zero),es,false))
      )
      else
        (* When use_psk = false *)
        (empty_psk_ext,(NoPsk,b2idpsk(zero),es,false))
  in

  (* The client hello *)
  let o_offer = nego(TLS13,tls_h,tls_a,o_kex_ext,SNI(o_dom),old_ech_ext,empty_extra_ext,psk_ext) in
  (CH(o_cr,o_offer),o_cr,kex_data,psk_data)
.
