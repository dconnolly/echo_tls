(********************************************************)
(* Key Schedule of TLS (Section 7.1 of RFC)             *)
(********************************************************)

const
  tls13_client_handshake_traffic_secret, (* "c hs traffic" of Section 7.1 TLS RFC *)
  tls13_server_handshake_traffic_secret, (* "s hs traffic" of Section 7.1 TLS RFC *)
  tls13_client_early_traffic_secret, (* "c e traffic" of Section 7.1 TLS RFC *)
  tls13_client_application_traffic_secret, (* "c ap traffic" of Section 7.1 TLS RFC *)
  tls13_server_application_traffic_secret, (* "s ap traffic" of Section 7.1 TLS RFC *)
  tls13_key, (* "key" of Section 7.3 TLS RFC. Note that we do not model the Record Protocol
   (Section 5 of TLS RFC. Hence we do not need "iv" of Section 7.3 TLS RFC *)
  tls13_early_exporter_master_secret, (* "e exp master" of Section 7.1 TLS RFC *)
  tls13_exporter_master_secret, (* "exp master" of Section 7.1 TLS RFC *)
  tls13_resumption, (* "resumption" of Section 4.6.1 TLS RFC *)
  tls13_resumption_master_secret, (* "res master" of Section 7.1 TLS RFC *)
  tls13_ext_binder, (* "ext binder" of Section 7.1 TLS RFC *)
  tls13_res_binder, (* "res binder" of Section 7.1 TLS RFC *)
  tls13_finished, (* "finished" of Section 4.4.4 of TLS RFC *)
  tls13_derived (* "derived" of Section 7.1 TLS RFC *)
  : label.

(** Key Schedule (Section 7.1 of TLS RFC *)

letfun derive_secret(h:hash_alg,k:bitstring,l:label,m:bitstring) =
  hkdf_expand_label(h,k,l,hash(h,m)).

(* Function to generate "Early Secret" + binder_key *)
letfun kdf_es(h:hash_alg,psk:preSharedKey,is_external:bool) =
  let early_secret = hkdf_extract(h,zero,psk2b(psk)) in
  let lbl = if is_external then tls13_ext_binder else tls13_res_binder in
  let binder_key = derive_secret(h,early_secret,lbl,zero) in
  (early_secret,b2mk(binder_key)).

(* Function to generate
  - client_write_key for 0-RTT Application
  - early_exporter_master_secret *)
letfun kdf_k0(h:hash_alg,early_secret:bitstring,client_hello:bitstring) =
  (* client_early_traffic_secret *)
  let atsc0 = derive_secret(h,early_secret,tls13_client_early_traffic_secret,client_hello) in
  (* client_write_key for *)
  let kc0 = hkdf_expand_label(h,atsc0,tls13_key,zero) in

  (* early_exporter_master_secret*)
  let ems0 = derive_secret(h,early_secret,tls13_early_exporter_master_secret,client_hello) in

  (b2ae(kc0),ems0).

(* Function to generate Handshake Secret. *)
letfun kdf_hs(h:hash_alg,early_secret:bitstring,e:element) =
  let extra = derive_secret(h,early_secret,tls13_derived,hash(h,zero)) in
  hkdf_extract(h,extra,e2b(e)).

(* Function to generate
  - client_handshake_traffic_secret
  - server_handshake_traffic_secret
  - Master Secret
  - client_write_key for handshake record (Section 7.3 of TLS RFC)
  - server_write_key for handshake record  (Section 7.3 of TLS RFC)
  - client_finished_key (Section 4.4.4 of TLS RFC)
  - server_finished_key (Section 4.4.4 of TLS RFC)
  The log should contain the client_hello and the server hello. *)
letfun kdf_ms(h:hash_alg,handshake_secret:bitstring,log:bitstring) =
  let extra = derive_secret(h,handshake_secret,tls13_derived,hash(h,zero)) in
  let master_secret = hkdf_extract(h,handshake_secret, zero) in
  let client_hts = derive_secret(h,handshake_secret, tls13_client_handshake_traffic_secret, log) in
  let server_hts = derive_secret(h,handshake_secret, tls13_server_handshake_traffic_secret, log) in

  (* [sender]_write_key for handshake record *)
  let client_wkh =  hkdf_expand_label(h,client_hts,tls13_key,zero) in
  let server_wkh =  hkdf_expand_label(h,server_hts,tls13_key,zero) in

  (* [sender]_finished_key *)
  let client_fk =  hkdf_expand_label(h,client_hts,tls13_finished,zero) in
  let server_fk =  hkdf_expand_label(h,server_hts,tls13_finished,zero) in
  (master_secret,b2ae(client_wkh),b2ae(server_wkh),b2mk(client_fk),b2mk(server_fk)).

(* Function to generate:
  - client_write_key for Application Data record
  - server_write_key for Application Data record
  - client_finished_key for Application Data record
  - server_finished_key for Application Data record
  - exporter_master_secret
  The log must contain ClientHello up to server Finished.
  *)
letfun kdf_k(h:hash_alg,master_secret:bitstring,log:bitstring) =
  let client_ats = derive_secret(h,master_secret, tls13_client_application_traffic_secret, log) in
  let server_ats = derive_secret(h,master_secret, tls13_server_application_traffic_secret, log) in

  let ems	= derive_secret(h,master_secret, tls13_exporter_master_secret, log) in

  (* [sender]_write_key *)
  let client_wkad = hkdf_expand_label(h,client_ats,tls13_key,zero) in
  let server_wkad = hkdf_expand_label(h,server_ats,tls13_key,zero) in

  (* [sender]_finished_key *)
  let client_fkad =  hkdf_expand_label(h,client_ats,tls13_finished,zero) in

  (b2ae(client_wkad),b2ae(server_wkad),b2mk(client_fkad),ems).

(* Function to generate resumption_master_secret. The log must contain:
  ClientHello up to client Finished. *)
letfun kdf_psk(h:hash_alg,master_secret:bitstring, log:bitstring) =
  derive_secret(h,master_secret,tls13_resumption_master_secret,log).

(* Function to generate the pre shared key from the ticket *)
letfun psk_from_ticket(h:hash_alg,resumption_master_secret:bitstring,ticket_nonce:bitstring) =
  b2psk(hkdf_expand_label(h,resumption_master_secret,tls13_resumption,ticket_nonce)).
