mkdir -p ../../generated_libraries
m4 ../../libraries/client.m4.pvl > ../../generated_libraries/client.pvl
proverif \
-lib config.m4.pvl \
-lib ../../libraries/primitives.pvl \
-lib ../../libraries/format.pvl \
-lib ../../libraries/key_schedule.pvl \
-lib ../../libraries/events.pvl \
-lib config_proof_helper.m4.pvl \
-lib ../../libraries/tls_functions.pvl \
-lib ../../libraries/ech_functions.pvl \
-lib ../../libraries/server.pvl \
-lib ../../generated_libraries/client.pvl \
-lib ../../libraries/main_processes.pvl \
-lib ../../libraries/proof_helper_equivalence.pvl \
anonymity_unlinkability_TLS_client_no_ticket.pv
File "anonymity_unlinkability_TLS_client_no_ticket.pv", line 142, characters 11-17:
Warning: identifier ClientA rebound.
File "anonymity_unlinkability_TLS_client_no_ticket.pv", line 143, characters 11-17:
Warning: identifier ClientB rebound.
Biprocess 0 (that is, the initial process):
(
    {1}!
    {2}in(io, a: domain);
    {3}new lgt_id: idProc;
    {4}event Same(a);
    {5}new s: seed;
    {6}let sk_h: privkey = uc_privkey(s) in
    {7}let crt: certificate = valid_cert(a,pk(sk_h)) in
    {8}insert long_term_keys(a,sk_h,pk(sk_h),crt,lgt_id);
    {9}out(io, crt)
) | (
    {10}!
    {11}in(io, (c_dom: domain,s_dom: domain));
    {12}let h_alg: hash_alg = id_hash(StrongHash,1) in
    {13}new psk_id: idProc;
    {14}event Same(c_dom);
    {15}event Same(s_dom);
    {16}new s_1: seed;
    {17}let psk: preSharedKey = uc_psk(s_1) in
    {18}let id: identityPsk = mk_idpsk(s_dom,h_alg,psk) in
    {19}insert pre_shared_keys(c_dom,s_dom,h_alg,id,psk,psk_id,true)
) | (
    {20}!
    {21}in(io, s_dom_1: domain);
    {22}let ech_h: hash_alg = id_hash(StrongHash,2) in
    {23}let ech_a: aead_alg = id_aead(StrongAE,2) in
    {24}let ech_g: group = id_g(StrongDH,2) in
    {25}event Same(s_dom_1);
    {26}new id_1: configId;
    {27}new s_2[]: seed;
    {28}let gx: element = dh_pub(ech_g,dh_k(s_2)) in
    {29}let (skR: bitstring,pkR: element) = (dh_k(s_2),gx) in
    {30}let config: echConfig = ech_config(id_1,ech_g,pkR,s_dom_1,ech_h,ech_a) in
    {31}insert ech_configurations(config,skR);
    {32}out(io, config)
) | (
    {33}!
    {34}in(io, a_1: domain);
    {35}new idP: idProc;
    {36}new sk_d: privkey;
    {37}event CompromisedLtkForEquiv(pk(sk_d));
    {38}event Same(a_1);
    {39}let crt_1: certificate = valid_cert(a_1,pk(sk_d)) in
    {40}insert long_term_keys(a_1,sk_d,pk(sk_d),crt_1,idP);
    {41}event CompromisedLtk(pk(sk_d));
    {42}out(io, (sk_d,crt_1))
) | (
    0
) | (
    {43}!
    {44}in(io, s_dom_2: domain);
    {45}let ech_h_1: hash_alg = id_hash(StrongHash,2) in
    {46}let ech_a_1: aead_alg = id_aead(StrongAE,2) in
    {47}let ech_g_1: group = id_g(StrongDH,2) in
    {48}event Same(s_dom_2);
    {49}new id_2: configId;
    {50}new skR_d: bitstring;
    {51}let pkR_d: element = dh_pub(ech_g_1,skR_d) in
    {52}let config_1: echConfig = ech_config(id_2,ech_g_1,pkR_d,s_dom_2,ech_h_1,ech_a_1) in
    {53}event CompromisedEchKeyForEquiv(config_1);
    {54}insert ech_configurations(config_1,skR_d);
    {55}out(io, config_1);
    {56}event CompromisedEchKey(config_1);
    {57}out(io, skR_d)
) | (
    {58}!
    {59}in(ch_server_CFIN, (id_server: idProc,ArgsServerCFIN(cr: bytes32,sr: bytes32,h_alg_1: hash_alg,a_alg: aead_alg,s_dom_3: domain,s_pkey: pubkey,c_pkey: pubkey,psk_1: preSharedKey,master_secret: bitstring,chk: aead_key,c_seq: nat,cfin: mac_key,cur_log: bitstring)));
    {60}new st[]: stamp;
    {61}event PreciseIdProcess(ch_server_CFIN,id_server,st);
    {62}event Server_Rand_client(id_server,cr);
    {63}event Server_Rand_server(id_server,sr);
    {64}event Server_PSKChoosen(id_server,psk_1);
    {65}event Server_chk(id_server,chk);
    {66}event Server_cfin(id_server,cfin);
    {67}event Server_Cert_server(id_server,s_pkey);
    {68}event Server_Cert_client(id_server,c_pkey);
    {69}new st1[]: stamp;
    {70}event PreciseMess(ch_server_CFIN,id_server,st1,(chk,cfin,master_secret));
    {71}in(io, enc_fin: bitstring);
    {72}let fin_msg: msg = aead_dec(a_alg,chk,c_seq,zero,enc_fin) in
    {73}let FIN(hash_msg: bitstring) = fin_msg in
    {74}if (hash_msg = hmac(h_alg_1,cfin,cur_log)) then
    {75}let l: label = tls13_client_application_traffic_secret in
    {76}let h: bitstring = catch-fail(hash(h_alg_1,cur_log)) in
    {77}let v: bool = not-caught-fail(h) in
    {78}let x: bitstring = (if v then (l,h) else caught-fail) in
    {79}let client_ats: bitstring = catch-fail((if v then hmac(h_alg_1,master_secret,x) else fail-any)) in
    {80}let v_1: bool = not-caught-fail(client_ats) in
    {81}let l_1: label = (if v_1 then tls13_server_application_traffic_secret else caught-fail) in
    {82}let h_1: bitstring = (if v_1 then catch-fail(hash(h_alg_1,cur_log)) else caught-fail) in
    {83}let v_2: bool = not-caught-fail(h_1) in
    {84}let x_1: bitstring = (if v_2 then (l_1,h_1) else caught-fail) in
    {85}let server_ats: bitstring = (if v_1 then catch-fail((if v_2 then hmac(h_alg_1,master_secret,x_1) else fail-any)) else caught-fail) in
    {86}let v_3: bool = not-caught-fail(server_ats) in
    {87}let l_2: label = (if v_3 then tls13_exporter_master_secret else caught-fail) in
    {88}let h_2: bitstring = (if v_3 then catch-fail(hash(h_alg_1,cur_log)) else caught-fail) in
    {89}let v_4: bool = not-caught-fail(h_2) in
    {90}let x_2: bitstring = (if v_4 then (l_2,h_2) else caught-fail) in
    {91}let ems: bitstring = (if v_3 then catch-fail((if v_4 then hmac(h_alg_1,master_secret,x_2) else fail-any)) else caught-fail) in
    {92}let v_5: bool = not-caught-fail(ems) in
    {93}let l_3: label = (if v_5 then tls13_key else caught-fail) in
    {94}let h_3: bitstring = (if v_5 then zero else caught-fail) in
    {95}let x_3: bitstring = (if v_5 then (l_3,h_3) else caught-fail) in
    {96}let client_wkad: bitstring = (if v_5 then catch-fail(hmac(h_alg_1,client_ats,x_3)) else caught-fail) in
    {97}let v_6: bool = not-caught-fail(client_wkad) in
    {98}let l_4: label = (if v_6 then tls13_key else caught-fail) in
    {99}let h_4: bitstring = (if v_6 then zero else caught-fail) in
    {100}let x_4: bitstring = (if v_6 then (l_4,h_4) else caught-fail) in
    {101}let server_wkad: bitstring = (if v_6 then catch-fail(hmac(h_alg_1,server_ats,x_4)) else caught-fail) in
    {102}let v_7: bool = not-caught-fail(server_wkad) in
    {103}let l_5: label = (if v_7 then tls13_finished else caught-fail) in
    {104}let h_5: bitstring = (if v_7 then zero else caught-fail) in
    {105}let x_5: bitstring = (if v_7 then (l_5,h_5) else caught-fail) in
    {106}let client_fkad: bitstring = (if v_7 then catch-fail(hmac(h_alg_1,client_ats,x_5)) else caught-fail) in
    {107}let v_8: bool = not-caught-fail(client_fkad) in
    {108}let (cak: aead_key,sak: aead_key,cfkad: mac_key,ems_1: bitstring) = (if v_1 then (if v_3 then (if v_5 then (if v_6 then (if v_7 then (if v_8 then (client_wkad,server_wkad,client_fkad,ems) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {109}let cur_log_CFIN: bitstring = (cur_log,fin_msg) in
    {110}let l_6: label = tls13_resumption_master_secret in
    {111}let h_6: bitstring = catch-fail(hash(h_alg_1,cur_log_CFIN)) in
    {112}let v_9: bool = not-caught-fail(h_6) in
    {113}let x_6: bitstring = (if v_9 then (l_6,h_6) else caught-fail) in
    {114}let rms: bitstring = (if v_9 then hmac(h_alg_1,master_secret,x_6) else fail-any) in
    {115}event Server_cak(id_server,cak);
    {116}event Server_sak(id_server,sak);
    {117}event Server_cfkad(id_server,cfkad);
    {118}event Server_rms(id_server,rms);
    {119}event ServerFinished(id_server,cr,sr,psk_1,s_pkey,c_pkey,cak,sak,ems_1,rms);
    (
        0
    ) | (
        0
    ) | (
        {120}!
        {121}in(io, (seq_srv: nat,seq_client: nat));
        {122}if (is_nat(seq_srv) && is_nat(seq_client)) then
        {123}new req_rand: bitstring;
        {124}event ServerRequestPH(id_server,cr,sr,psk_1,s_pkey,c_pkey,req_rand);
        {125}let crtr_msg: msg = CRTR(req_rand) in
        {126}let enc_crt: bitstring = aead_enc(a_alg,sak,seq_srv,zero,crtr_msg) in
        {127}new st_1[]: stamp;
        {128}event ServerSequenceServerDataWriteKey(id_server,st_1,seq_srv);
        {129}event ServerSends(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_srv,zero,crtr_msg);
        {130}out(io, enc_crt);
        {131}let cur_log_CRTR: bitstring = (cur_log_CFIN,crtr_msg) in
        {132}in(io, enc_cert_msg: bitstring);
        {133}let cert_msg: msg = aead_dec(a_alg,cak,seq_client,zero,enc_cert_msg) in
        {134}new st1_1[]: stamp;
        {135}event ServerSequenceClientDataWriteKey(id_server,st1_1,seq_client);
        {136}event ServerReceives(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_client,zero,cert_msg);
        {137}let CRT(=req_rand,crt_2: certificate) = cert_msg in
        {138}let cur_log_CRT: bitstring = (cur_log_CRTR,cert_msg) in
        {139}in(io, enc_cert_verif_msg: bitstring);
        {140}let cert_verify_msg: msg = aead_dec(a_alg,cak,seq_client + 1,zero,enc_cert_verif_msg) in
        {141}new st2[]: stamp;
        {142}event ServerSequenceClientDataWriteKey(id_server,st2,seq_client + 1);
        {143}event ServerReceives(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_client + 1,zero,cert_verify_msg);
        {144}let CV(signed_log: bitstring) = cert_verify_msg in
        {145}if (verify(get_pkey(crt_2),hash(h_alg_1,cur_log_CRT),signed_log) && verify_cert(crt_2)) then
        {146}let c_pkey': pubkey = get_pkey(crt_2) in
        {147}let cur_log_CV: bitstring = (cur_log_CRT,cert_verify_msg) in
        {148}in(io, enc_fin_1: bitstring);
        {149}let fin_msg_1: msg = aead_dec(a_alg,cak,seq_client + 2,zero,enc_fin_1) in
        {150}new st3[]: stamp;
        {151}event ServerSequenceClientDataWriteKey(id_server,st3,seq_client + 2);
        {152}event ServerReceives(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_client + 2,zero,fin_msg_1);
        {153}let FIN(hash_msg_1: bitstring) = fin_msg_1 in
        {154}if (hash_msg_1 = hmac(h_alg_1,cfkad,cur_log_CV)) then
            {155}event ServerFinishedPH(id_server,cr,sr,psk_1,s_pkey,c_pkey,req_rand,c_pkey')
        else
            {156}out(io, handshake_failure)
    )
) | (
    {157}!
    {158}in(ch_server_FIN, (id_server_1: idProc,ArgsServerFIN(cr_1: bytes32,sr_1: bytes32,h_alg_2: hash_alg,a_alg_1: aead_alg,s_dom_4: domain,s_pkey_1: pubkey,req_cert: bool,psk_2: preSharedKey,master_secret_1: bitstring,chk_1: aead_key,c_seq_1: nat,shk: aead_key,s_seq: nat,cfin_1: mac_key,sfin: mac_key,cur_log_1: bitstring)));
    {159}new st_2[]: stamp;
    {160}event PreciseIdProcess(ch_server_FIN,id_server_1,st_2);
    {161}event Server_Rand_client(id_server_1,cr_1);
    {162}event Server_Rand_server(id_server_1,sr_1);
    {163}event Server_PSKChoosen(id_server_1,psk_2);
    {164}event Server_chk(id_server_1,chk_1);
    {165}event Server_shk(id_server_1,shk);
    {166}event Server_cfin(id_server_1,cfin_1);
    {167}event Server_sfin(id_server_1,sfin);
    {168}event Server_Cert_server(id_server_1,s_pkey_1);
    {169}new st1_2[]: stamp;
    {170}event PreciseMess(ch_server_FIN,id_server_1,st1_2,(chk_1,shk,master_secret_1));
    {171}let hash_msg_2: bitstring = hmac(h_alg_2,sfin,cur_log_1) in
    {172}let finished_msg: msg = FIN(hash_msg_2) in
    {173}let enc_finished: bitstring = aead_enc(a_alg_1,shk,s_seq,zero,finished_msg) in
    {174}event PreServerFinished(id_server_1,cr_1,sr_1,psk_2,s_pkey_1);
    {175}out(io, enc_finished);
    {176}let cur_log_FIN: bitstring = (cur_log_1,finished_msg) in
    {177}if (req_cert && (psk_2 = NoPsk)) then
    (
        {178}in(io, enc_cert_msg_1: bitstring);
        {179}let cert_msg_1: msg = aead_dec(a_alg_1,chk_1,c_seq_1,zero,enc_cert_msg_1) in
        {180}let CRT(=zero,crt_3: certificate) = cert_msg_1 in
        {181}let cur_log_CRT_1: bitstring = (cur_log_FIN,cert_msg_1) in
        {182}in(io, enc_cert_verif_msg_1: bitstring);
        {183}let cert_verify_msg_1: msg = aead_dec(a_alg_1,chk_1,c_seq_1 + 1,zero,enc_cert_verif_msg_1) in
        {184}let CV(signed_log_1: bitstring) = cert_verify_msg_1 in
        {185}if (verify(get_pkey(crt_3),hash(h_alg_2,cur_log_CRT_1),signed_log_1) && verify_cert(crt_3)) then
        {186}let c_pkey_1: pubkey = get_pkey(crt_3) in
        {187}let cur_log_CV_1: bitstring = (cur_log_CRT_1,cert_verify_msg_1) in
        {188}event Server_Cert_client(id_server_1,c_pkey_1);
        {189}out(ch_server_CFIN, (id_server_1,ArgsServerCFIN(cr_1,sr_1,h_alg_2,a_alg_1,s_dom_4,s_pkey_1,c_pkey_1,psk_2,master_secret_1,chk_1,c_seq_1 + 2,cfin_1,cur_log_CV_1)))
    )
    else
        {190}event Server_Cert_client(id_server_1,NoPubKey);
        {191}out(ch_server_CFIN, (id_server_1,ArgsServerCFIN(cr_1,sr_1,h_alg_2,a_alg_1,s_dom_4,s_pkey_1,NoPubKey,psk_2,master_secret_1,chk_1,c_seq_1,cfin_1,cur_log_FIN)))
) | (
    {192}!
    {193}in(ch_server_CRT, (id_server_2: idProc,ArgsServerCRT(cr_2: bytes32,sr_2: bytes32,h_alg_3: hash_alg,a_alg_2: aead_alg,s_dom_5: domain,req_cert_1: bool,master_secret_2: bitstring,chk_2: aead_key,c_seq_2: nat,shk_1: aead_key,s_seq_1: nat,cfin_2: mac_key,sfin_1: mac_key,cur_log_2: bitstring)));
    {194}new st_3[]: stamp;
    {195}event PreciseIdProcess(ch_server_CRT,id_server_2,st_3);
    {196}event Server_Rand_client(id_server_2,cr_2);
    {197}event Server_Rand_server(id_server_2,sr_2);
    {198}event Server_PSKChoosen(id_server_2,NoPsk);
    {199}event Server_chk(id_server_2,chk_2);
    {200}event Server_shk(id_server_2,shk_1);
    {201}event Server_cfin(id_server_2,cfin_2);
    {202}event Server_sfin(id_server_2,sfin_1);
    {203}new st1_3[]: stamp;
    {204}event PreciseMess(ch_server_CRT,id_server_2,st1_3,(master_secret_2,chk_2,shk_1));
    {222}get long_term_keys(s_dom': domain,sk: privkey,s_pkey_2: pubkey,crt_4: certificate,idP_1: idProc) in
    {205}let @3_x: bitstring = (s_dom',sk,s_pkey_2,crt_4,idP_1) in
    {206}new @3_st[]: stamp;
    {207}event PreciseInput(@3_st,@3_x);
    {208}let () = () in
    {209}event Selected_ltk(s_dom_5,s_dom',idP_1);
    {210}let (sk_1: privkey,s_pkey_3: pubkey,crt_5: certificate) = (sk,s_pkey_2,crt_4) in
    {211}event Server_Cert_server(id_server_2,s_pkey_3);
    {212}let certificate_msg: msg = CRT(zero,crt_5) in
    {213}let encrypted_certificate_msg: bitstring = aead_enc(a_alg_2,shk_1,s_seq_1,zero,certificate_msg) in
    {214}out(io, encrypted_certificate_msg);
    {215}let cur_log_CRT_2: bitstring = (cur_log_2,certificate_msg) in
    {216}let signed_log_2: bitstring = sign(sk_1,hash(h_alg_3,cur_log_CRT_2)) in
    {217}let certificate_verify_msg: msg = CV(signed_log_2) in
    {218}let encrypted_certificate_verify_msg: bitstring = aead_enc(a_alg_2,shk_1,s_seq_1 + 1,zero,certificate_verify_msg) in
    {219}out(io, encrypted_certificate_verify_msg);
    {220}let cur_log_CV_2: bitstring = (cur_log_CRT_2,certificate_verify_msg) in
    {221}out(ch_server_FIN, (id_server_2,ArgsServerFIN(cr_2,sr_2,h_alg_3,a_alg_2,s_dom_5,s_pkey_3,req_cert_1,NoPsk,master_secret_2,chk_2,c_seq_2,shk_1,s_seq_1 + 2,cfin_2,sfin_1,cur_log_CV_2)))
) | (
    {223}!
    {224}in(ch_server_SH, (id_server_3: idProc,ArgsServerSH(tls_g: group,tls_h: hash_alg,tls_a: aead_alg,s_dom_6: domain,req_cert_2: bool,is_backend: bool,use_psk: bool,no_HRR: bool,ee_msg: msg,client_hello: msg,cur_log_3: bitstring)));
    {225}new st_4[]: stamp;
    {226}event PreciseMess(ch_server_SH,id_server_3,st_4,(use_psk,client_hello));
    {227}let CH(cr_3: bytes32,offer: params) = client_hello in
    {228}event Server_Rand_client(id_server_3,cr_3);
    {229}let nego(=TLS13,=tls_h,=tls_a,client_kex_ext(DHE_kex(=tls_g,gx_1: element)),sni_ext: sniExt,ech_ext: echExt,extra_ext: extraExt,psk_ext: preSharedKeyExt) = offer in
    (
        {230}if (sni_ext = SNI(s_dom_6)) then
        (
            {231}event Server_DH_client(id_server_3,gx_1);
            {232}let v_10: msg = client_hello in
            {233}let v_11: bool = (((TLS13 =nf 1-proj-nego(2-proj-CH(v_10))) && success?(1-proj-nego(2-proj-CH(v_10)))) && success?(1-proj-CH(v_10))) in
            {234}let psk_ext_1: preSharedKeyExt = (if v_11 then 8-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {235}let extra_ext_1: extraExt = (if v_11 then 7-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {236}let ech_ext_1: echExt = (if v_11 then 6-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {237}let sni_ext_1: sniExt = (if v_11 then 5-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {238}let kex_ext: keyShareExt = (if v_11 then 4-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {239}let a_alg_3: aead_alg = (if v_11 then 3-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {240}let h_alg_4: hash_alg = (if v_11 then 2-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {241}let cr_4: bytes32 = (if v_11 then 1-proj-CH(v_10) else caught-fail) in
            {242}let v_12: bitstring = (if v_11 then catch-fail((use_psk,psk_ext_1)) else caught-fail) in
            {243}let v_13: bool = (not-caught-fail(v_12) && (((true =nf 1-proj-2-tuple(v_12)) && success?(1-proj-client_psk_ext(2-proj-2-tuple(v_12)))) && success?(1-proj-2-tuple(v_12)))) in
            {244}let binders: bitstring = (if v_13 then 2-proj-client_psk_ext(2-proj-2-tuple(v_12)) else caught-fail) in
            {245}let id_3: identityPsk = (if v_13 then 1-proj-client_psk_ext(2-proj-2-tuple(v_12)) else caught-fail) in
            {246}let v_14: bitstring = (if v_13 then catch-fail((get_server_psk(id_3),get_hash_psk(id_3))) else caught-fail) in
            {247}let v_15: bool = (not-caught-fail(v_14) && (((s_dom_6 =nf 1-proj-2-tuple(v_14)) && (h_alg_4 =nf 2-proj-2-tuple(v_14))) && success?(1-proj-2-tuple(v_14)))) in
            {248}let psk_3: preSharedKey = (if v_15 then catch-fail(get_psk(id_3)) else caught-fail) in
            {249}let v_16: bool = not-caught-fail(psk_3) in
            {250}let s_3: bitstring = (if v_16 then zero else caught-fail) in
            {251}let k: bitstring = (if v_16 then catch-fail(psk2b(psk_3)) else caught-fail) in
            {252}let v_17: bool = not-caught-fail(k) in
            {253}let early_secret: bitstring = (if v_16 then catch-fail((if v_17 then hmac(h_alg_4,s_3,k) else fail-any)) else caught-fail) in
            {254}let v_18: bool = not-caught-fail(early_secret) in
            {255}let l_7: label = (if v_18 then tls13_ext_res_binder else caught-fail) in
            {256}let m: bitstring = (if v_18 then zero else caught-fail) in
            {257}let h_7: bitstring = (if v_18 then catch-fail(hash(h_alg_4,m)) else caught-fail) in
            {258}let v_19: bool = not-caught-fail(h_7) in
            {259}let x_7: bitstring = (if v_19 then (l_7,h_7) else caught-fail) in
            {260}let binder_key: bitstring = (if v_18 then catch-fail((if v_19 then hmac(h_alg_4,early_secret,x_7) else fail-any)) else caught-fail) in
            {261}let v_20: bool = not-caught-fail(binder_key) in
            {262}let v_21: bitstring = (if v_16 then catch-fail((if v_18 then (if v_20 then (early_secret,binder_key) else fail-any) else fail-any)) else caught-fail) in
            {263}let v_22: bool = (not-caught-fail(v_21) && success?(1-proj-2-tuple(v_21))) in
            {264}let kb: mac_key = (if v_22 then 2-proj-2-tuple(v_21) else caught-fail) in
            {265}let early_secret_1: bitstring = (if v_22 then 1-proj-2-tuple(v_21) else caught-fail) in
            {266}let offer_1: params = (if v_22 then nego(TLS13,h_alg_4,a_alg_3,kex_ext,sni_ext_1,ech_ext_1,extra_ext_1,trunc_client_psk_ext(id_3)) else caught-fail) in
            {267}let cur_log': bitstring = (if v_22 then (cur_log_3,CH(cr_4,offer_1)) else caught-fail) in
            {268}let v_23: bool = (v_13 && not(v_15)) in
            {269}let psk_4: preSharedKey = (if v_23 then NoPsk else caught-fail) in
            {270}let s_4: bitstring = (if v_23 then zero else caught-fail) in
            {271}let k_1: bitstring = (if v_23 then catch-fail(psk2b(psk_4)) else caught-fail) in
            {272}let v_24: bool = not-caught-fail(k_1) in
            {273}let early_secret_2: bitstring = (if v_23 then catch-fail((if v_24 then hmac(h_alg_4,s_4,k_1) else fail-any)) else caught-fail) in
            {274}let v_25: bool = not-caught-fail(early_secret_2) in
            {275}let l_8: label = (if v_25 then tls13_ext_res_binder else caught-fail) in
            {276}let m_1: bitstring = (if v_25 then zero else caught-fail) in
            {277}let h_8: bitstring = (if v_25 then catch-fail(hash(h_alg_4,m_1)) else caught-fail) in
            {278}let v_26: bool = not-caught-fail(h_8) in
            {279}let x_8: bitstring = (if v_26 then (l_8,h_8) else caught-fail) in
            {280}let binder_key_1: bitstring = (if v_25 then catch-fail((if v_26 then hmac(h_alg_4,early_secret_2,x_8) else fail-any)) else caught-fail) in
            {281}let v_27: bool = not-caught-fail(binder_key_1) in
            {282}let v_28: bitstring = (if v_23 then catch-fail((if v_25 then (if v_27 then (early_secret_2,binder_key_1) else fail-any) else fail-any)) else caught-fail) in
            {283}let v_29: bool = (not-caught-fail(v_28) && success?(1-proj-2-tuple(v_28))) in
            {284}let kb_1: mac_key = (if v_29 then 2-proj-2-tuple(v_28) else caught-fail) in
            {285}let es: bitstring = (if v_29 then 1-proj-2-tuple(v_28) else caught-fail) in
            {286}let v_30: bool = (v_11 && not(v_13)) in
            {287}let psk_5: preSharedKey = (if v_30 then NoPsk else caught-fail) in
            {288}let s_5: bitstring = (if v_30 then zero else caught-fail) in
            {289}let k_2: bitstring = (if v_30 then catch-fail(psk2b(psk_5)) else caught-fail) in
            {290}let v_31: bool = not-caught-fail(k_2) in
            {291}let early_secret_3: bitstring = (if v_30 then catch-fail((if v_31 then hmac(h_alg_4,s_5,k_2) else fail-any)) else caught-fail) in
            {292}let v_32: bool = not-caught-fail(early_secret_3) in
            {293}let l_9: label = (if v_32 then tls13_ext_res_binder else caught-fail) in
            {294}let m_2: bitstring = (if v_32 then zero else caught-fail) in
            {295}let h_9: bitstring = (if v_32 then catch-fail(hash(h_alg_4,m_2)) else caught-fail) in
            {296}let v_33: bool = not-caught-fail(h_9) in
            {297}let x_9: bitstring = (if v_33 then (l_9,h_9) else caught-fail) in
            {298}let binder_key_2: bitstring = (if v_32 then catch-fail((if v_33 then hmac(h_alg_4,early_secret_3,x_9) else fail-any)) else caught-fail) in
            {299}let v_34: bool = not-caught-fail(binder_key_2) in
            {300}let v_35: bitstring = (if v_30 then catch-fail((if v_32 then (if v_34 then (early_secret_3,binder_key_2) else fail-any) else fail-any)) else caught-fail) in
            {301}let v_36: bool = (not-caught-fail(v_35) && success?(1-proj-2-tuple(v_35))) in
            {302}let kb_2: mac_key = (if v_36 then 2-proj-2-tuple(v_35) else caught-fail) in
            {303}let es_1: bitstring = (if v_36 then 1-proj-2-tuple(v_35) else caught-fail) in
            {304}let (early_secret_4: bitstring,s_psk_ext: preSharedKeyExt,psk_6: preSharedKey) = (if v_11 then (if v_13 then (if v_15 then (if v_16 then (if v_22 then (if (binders = hmac(h_alg_4,kb,cur_log')) then (early_secret_1,server_psk_ext(1),psk_3) else fail-any) else fail-any) else fail-any) else (if v_29 then (es,empty_psk_ext,NoPsk) else fail-any)) else (if v_36 then (es_1,empty_psk_ext,NoPsk) else fail-any)) else fail-any) in
            {305}event Server_PSKChoosen(id_server_3,psk_6);
            {306}let cur_log_CH: bitstring = (cur_log_3,client_hello) in
            (
                {307}if (false && (no_HRR && (psk_6 ≠ NoPsk))) then
                {308}!
                {309}in(io, (i: nat,ad: bitstring,enc_early_data: bitstring));
                {310}let l_10: label = tls13_client_early_traffic_secret in
                {311}let h_10: bitstring = catch-fail(hash(tls_h,cur_log_CH)) in
                {312}let v_37: bool = not-caught-fail(h_10) in
                {313}let x_10: bitstring = (if v_37 then (l_10,h_10) else caught-fail) in
                {314}let atsc0: bitstring = catch-fail((if v_37 then hmac(tls_h,early_secret_4,x_10) else fail-any)) in
                {315}let v_38: bool = not-caught-fail(atsc0) in
                {316}let l_11: label = (if v_38 then tls13_key else caught-fail) in
                {317}let h_11: bitstring = (if v_38 then zero else caught-fail) in
                {318}let x_11: bitstring = (if v_38 then (l_11,h_11) else caught-fail) in
                {319}let kc0: bitstring = (if v_38 then catch-fail(hmac(tls_h,atsc0,x_11)) else caught-fail) in
                {320}let v_39: bool = not-caught-fail(kc0) in
                {321}let l_12: label = (if v_39 then tls13_early_exporter_master_secret else caught-fail) in
                {322}let h_12: bitstring = (if v_39 then catch-fail(hash(tls_h,cur_log_CH)) else caught-fail) in
                {323}let v_40: bool = not-caught-fail(h_12) in
                {324}let x_12: bitstring = (if v_40 then (l_12,h_12) else caught-fail) in
                {325}let ems0: bitstring = (if v_39 then catch-fail((if v_40 then hmac(tls_h,early_secret_4,x_12) else fail-any)) else caught-fail) in
                {326}let v_41: bool = not-caught-fail(ems0) in
                {327}let (wkc0: aead_key,ems0_1: bitstring) = (if v_38 then (if v_39 then (if v_41 then (kc0,ems0) else fail-any) else fail-any) else fail-any) in
                {328}let early_data: bitstring = aead_dec(tls_a,wkc0,i,ad,enc_early_data) in
                    {329}new st1_4[]: stamp;
                    {330}event ServerSequenceClient0RTTDataWriteKey(id_server_3,st1_4,i);
                    {331}event ServerReceives0(id_server_3,s_dom_6,cr_3,psk_6,i,ad,early_data)
                else
                    {332}out(io, bad_record_mac)
            ) | (
                {333}new s_6[]: seed;
                {334}let (gxy: element,gy: element) = (dh_xy(s_6,client_hello),dh_encap_fun(tls_g,gx_1,dh_xy(s_6,client_hello))) in
                {335}event Server_DH_server(id_server_3,gy);
                {336}event Server_DH_gxy(id_server_3,gxy);
                {337}let l_13: label = tls13_derived in
                {338}let m_3: bitstring = catch-fail(hash(tls_h,zero)) in
                {339}let v_42: bool = not-caught-fail(m_3) in
                {340}let h_13: bitstring = (if v_42 then catch-fail(hash(tls_h,m_3)) else caught-fail) in
                {341}let v_43: bool = not-caught-fail(h_13) in
                {342}let x_13: bitstring = (if v_43 then (l_13,h_13) else caught-fail) in
                {343}let extra: bitstring = catch-fail((if v_42 then (if v_43 then hmac(tls_h,early_secret_4,x_13) else fail-any) else fail-any)) in
                {344}let v_44: bool = not-caught-fail(extra) in
                {345}let handshake_secret: bitstring = (if v_44 then hmac(tls_h,extra,gxy) else fail-any) in
                {346}let s_offer: params = nego(TLS13,tls_h,tls_a,server_kex_ext(DHE_kex(tls_g,gy)),empty_sni_ext,empty_ech_ext,empty_extra_ext,s_psk_ext) in
                {347}let v_45: bool = is_backend in
                {348}new sr24[]: bytes24;
                {349}let sr24_1: bytes24 = (if v_45 then sr24 else caught-fail) in
                {350}let sh_modified: msg = (if v_45 then SH(B32(sr24_1,zero8),s_offer) else caught-fail) in
                {351}let cur_log_sh: bitstring = (if v_45 then (cur_log_CH,sh_modified) else caught-fail) in
                {352}let transcript_ech_conf: bitstring = (if v_45 then catch-fail(hash(tls_h,cur_log_sh)) else caught-fail) in
                {353}let v_46: bool = not-caught-fail(transcript_ech_conf) in
                {354}let s_7: bitstring = (if v_46 then zero else caught-fail) in
                {355}let k_3: bitstring = (if v_46 then catch-fail(b32_2_b(get_random(client_hello))) else caught-fail) in
                {356}let v_47: bool = not-caught-fail(k_3) in
                {357}let k_4: bitstring = (if v_46 then catch-fail((if v_47 then hmac(tls_h,s_7,k_3) else fail-any)) else caught-fail) in
                {358}let v_48: bool = not-caught-fail(k_4) in
                {359}let l_14: label = (if v_48 then ech_accept_confirmation else caught-fail) in
                {360}let x_14: bitstring = (if v_48 then (l_14,cur_log_sh) else caught-fail) in
                {361}let sr8: bytes8 = (if v_46 then catch-fail(crop_into_bytes8((if v_48 then hmac(tls_h,k_4,x_14) else fail-any))) else caught-fail) in
                {362}let v_49: bool = not-caught-fail(sr8) in
                {363}new rand24[]: bytes24;
                {364}new rand8[]: bytes8;
                {365}let sr_3: bytes32 = (if v_45 then (if v_46 then (if v_49 then B32(sr24_1,sr8) else fail-any) else fail-any) else B32(rand24,rand8)) in
                {366}let server_hello: msg = SH(sr_3,s_offer) in
                {367}event Server_Rand_server(id_server_3,sr_3);
                {368}event ServerChoosesGroup(id_server_3,tls_g);
                {369}event ServerChoosesHash(cr_3,sr_3,tls_h);
                {370}event ServerChoosesAead(cr_3,sr_3,tls_a);
                {371}out(io, server_hello);
                {372}let cur_log_SH: bitstring = (cur_log_CH,server_hello) in
                {373}let l_15: label = tls13_derived in
                {374}let m_4: bitstring = catch-fail(hash(tls_h,zero)) in
                {375}let v_50: bool = not-caught-fail(m_4) in
                {376}let h_14: bitstring = (if v_50 then catch-fail(hash(tls_h,m_4)) else caught-fail) in
                {377}let v_51: bool = not-caught-fail(h_14) in
                {378}let x_15: bitstring = (if v_51 then (l_15,h_14) else caught-fail) in
                {379}let extra_1: bitstring = catch-fail((if v_50 then (if v_51 then hmac(tls_h,handshake_secret,x_15) else fail-any) else fail-any)) in
                {380}let v_52: bool = not-caught-fail(extra_1) in
                {381}let k_5: bitstring = (if v_52 then zero else caught-fail) in
                {382}let master_secret_3: bitstring = (if v_52 then catch-fail(hmac(tls_h,handshake_secret,k_5)) else caught-fail) in
                {383}let v_53: bool = not-caught-fail(master_secret_3) in
                {384}let l_16: label = (if v_53 then tls13_client_handshake_traffic_secret else caught-fail) in
                {385}let h_15: bitstring = (if v_53 then catch-fail(hash(tls_h,cur_log_SH)) else caught-fail) in
                {386}let v_54: bool = not-caught-fail(h_15) in
                {387}let x_16: bitstring = (if v_54 then (l_16,h_15) else caught-fail) in
                {388}let client_hts: bitstring = (if v_53 then catch-fail((if v_54 then hmac(tls_h,handshake_secret,x_16) else fail-any)) else caught-fail) in
                {389}let v_55: bool = not-caught-fail(client_hts) in
                {390}let l_17: label = (if v_55 then tls13_server_handshake_traffic_secret else caught-fail) in
                {391}let h_16: bitstring = (if v_55 then catch-fail(hash(tls_h,cur_log_SH)) else caught-fail) in
                {392}let v_56: bool = not-caught-fail(h_16) in
                {393}let x_17: bitstring = (if v_56 then (l_17,h_16) else caught-fail) in
                {394}let server_hts: bitstring = (if v_55 then catch-fail((if v_56 then hmac(tls_h,handshake_secret,x_17) else fail-any)) else caught-fail) in
                {395}let v_57: bool = not-caught-fail(server_hts) in
                {396}let l_18: label = (if v_57 then tls13_key else caught-fail) in
                {397}let h_17: bitstring = (if v_57 then zero else caught-fail) in
                {398}let x_18: bitstring = (if v_57 then (l_18,h_17) else caught-fail) in
                {399}let client_wkh: bitstring = (if v_57 then catch-fail(hmac(tls_h,client_hts,x_18)) else caught-fail) in
                {400}let v_58: bool = not-caught-fail(client_wkh) in
                {401}let l_19: label = (if v_58 then tls13_key else caught-fail) in
                {402}let h_18: bitstring = (if v_58 then zero else caught-fail) in
                {403}let x_19: bitstring = (if v_58 then (l_19,h_18) else caught-fail) in
                {404}let server_wkh: bitstring = (if v_58 then catch-fail(hmac(tls_h,server_hts,x_19)) else caught-fail) in
                {405}let v_59: bool = not-caught-fail(server_wkh) in
                {406}let l_20: label = (if v_59 then tls13_finished else caught-fail) in
                {407}let h_19: bitstring = (if v_59 then zero else caught-fail) in
                {408}let x_20: bitstring = (if v_59 then (l_20,h_19) else caught-fail) in
                {409}let client_fk: bitstring = (if v_59 then catch-fail(hmac(tls_h,client_hts,x_20)) else caught-fail) in
                {410}let v_60: bool = not-caught-fail(client_fk) in
                {411}let l_21: label = (if v_60 then tls13_finished else caught-fail) in
                {412}let h_20: bitstring = (if v_60 then zero else caught-fail) in
                {413}let x_21: bitstring = (if v_60 then (l_21,h_20) else caught-fail) in
                {414}let server_fk: bitstring = (if v_60 then catch-fail(hmac(tls_h,server_hts,x_21)) else caught-fail) in
                {415}let v_61: bool = not-caught-fail(server_fk) in
                {416}let (master_secret_4: bitstring,chk_3: aead_key,shk_2: aead_key,cfin_3: mac_key,sfin_2: mac_key) = (if v_52 then (if v_53 then (if v_55 then (if v_57 then (if v_58 then (if v_59 then (if v_60 then (if v_61 then (master_secret_3,client_wkh,server_wkh,client_fk,server_fk) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                {417}event Server_chk(id_server_3,chk_3);
                {418}event Server_shk(id_server_3,shk_2);
                {419}event Server_cfin(id_server_3,cfin_3);
                {420}event Server_sfin(id_server_3,sfin_2);
                {421}let enc_ee: bitstring = aead_enc(tls_a,shk_2,0,zero,ee_msg) in
                {422}out(io, enc_ee);
                {423}let cur_log_EE: bitstring = (cur_log_SH,ee_msg) in
                {424}if (psk_6 = NoPsk) then
                (
                    {425}if req_cert_2 then
                    (
                        {426}let crtr_msg_1: msg = CRTR(zero) in
                        {427}let enc_crt_1: bitstring = aead_enc(tls_a,shk_2,1,zero,crtr_msg_1) in
                        {428}out(io, enc_crt_1);
                        {429}let cur_log_CRTR_1: bitstring = (cur_log_EE,crtr_msg_1) in
                        {430}out(ch_server_CRT, (id_server_3,ArgsServerCRT(cr_3,sr_3,tls_h,tls_a,s_dom_6,req_cert_2,master_secret_4,chk_3,0,shk_2,2,cfin_3,sfin_2,cur_log_CRTR_1)))
                    )
                    else
                        {431}out(ch_server_CRT, (id_server_3,ArgsServerCRT(cr_3,sr_3,tls_h,tls_a,s_dom_6,req_cert_2,master_secret_4,chk_3,0,shk_2,1,cfin_3,sfin_2,cur_log_EE)))
                )
                else
                    {432}out(ch_server_FIN, (id_server_3,ArgsServerFIN(cr_3,sr_3,tls_h,tls_a,s_dom_6,NoPubKey,false,psk_6,master_secret_4,chk_3,0,shk_2,1,cfin_3,sfin_2,cur_log_EE)))
            )
        )
        else
            {433}out(io, illegal_parameter)
    )
    else
        {434}out(io, handshake_failure)
) | (
    {435}!
    {436}in(ch_client_CFIN, (id_client: idProc,ArgsClientCFIN(cr_5: bytes32,sr_4: bytes32,h_alg_5: hash_alg,a_alg_4: aead_alg,c_dom_1: domain,s_dom_7: domain,s_pkey_4: pubkey,c_pkey_2: pubkey,psk_7: preSharedKey,safe_psk: bool,comp_psk: bool,master_secret_5: bitstring,chk_4: aead_key,seq_client_1: nat,shk_3: aead_key,seq_srv_1: nat,cfin_4: mac_key,sfin_3: mac_key,cur_log_4: bitstring)));
    {437}new st_5[]: stamp;
    {438}event PreciseIdProcess(ch_client_CFIN,id_client,st_5);
    {439}event Client_server_domain(id_client,s_dom_7);
    {440}event Client_Rand_client(id_client,cr_5);
    {441}event Client_Rand_server(id_client,sr_4);
    {442}event Client_PSKChoosen(id_client,psk_7,safe_psk);
    {443}event Client_comp_psk(id_client,comp_psk);
    {444}event Client_chk(id_client,chk_4);
    {445}event Client_shk(id_client,shk_3);
    {446}event Client_cfin(id_client,cfin_4);
    {447}event Client_sfin(id_client,sfin_3);
    {448}event Client_Cert_server(id_client,s_pkey_4);
    {449}event Client_Cert_client(id_client,c_pkey_2);
    {450}new st1_5[]: stamp;
    {451}let args: bitstring = (c_dom_1,s_dom_7,psk_7,s_pkey_4,master_secret_5,safe_psk,comp_psk,cur_log_4) in
    {452}event PreciseMess(ch_client_CFIN,id_client,st1_5,args);
    {453}let l_22: label = tls13_client_application_traffic_secret in
    {454}let h_21: bitstring = catch-fail(hash(h_alg_5,cur_log_4)) in
    {455}let v_62: bool = not-caught-fail(h_21) in
    {456}let x_22: bitstring = (if v_62 then (l_22,h_21) else caught-fail) in
    {457}let client_ats_1: bitstring = catch-fail((if v_62 then hmac(h_alg_5,master_secret_5,x_22) else fail-any)) in
    {458}let v_63: bool = not-caught-fail(client_ats_1) in
    {459}let l_23: label = (if v_63 then tls13_server_application_traffic_secret else caught-fail) in
    {460}let h_22: bitstring = (if v_63 then catch-fail(hash(h_alg_5,cur_log_4)) else caught-fail) in
    {461}let v_64: bool = not-caught-fail(h_22) in
    {462}let x_23: bitstring = (if v_64 then (l_23,h_22) else caught-fail) in
    {463}let server_ats_1: bitstring = (if v_63 then catch-fail((if v_64 then hmac(h_alg_5,master_secret_5,x_23) else fail-any)) else caught-fail) in
    {464}let v_65: bool = not-caught-fail(server_ats_1) in
    {465}let l_24: label = (if v_65 then tls13_exporter_master_secret else caught-fail) in
    {466}let h_23: bitstring = (if v_65 then catch-fail(hash(h_alg_5,cur_log_4)) else caught-fail) in
    {467}let v_66: bool = not-caught-fail(h_23) in
    {468}let x_24: bitstring = (if v_66 then (l_24,h_23) else caught-fail) in
    {469}let ems_2: bitstring = (if v_65 then catch-fail((if v_66 then hmac(h_alg_5,master_secret_5,x_24) else fail-any)) else caught-fail) in
    {470}let v_67: bool = not-caught-fail(ems_2) in
    {471}let l_25: label = (if v_67 then tls13_key else caught-fail) in
    {472}let h_24: bitstring = (if v_67 then zero else caught-fail) in
    {473}let x_25: bitstring = (if v_67 then (l_25,h_24) else caught-fail) in
    {474}let client_wkad_1: bitstring = (if v_67 then catch-fail(hmac(h_alg_5,client_ats_1,x_25)) else caught-fail) in
    {475}let v_68: bool = not-caught-fail(client_wkad_1) in
    {476}let l_26: label = (if v_68 then tls13_key else caught-fail) in
    {477}let h_25: bitstring = (if v_68 then zero else caught-fail) in
    {478}let x_26: bitstring = (if v_68 then (l_26,h_25) else caught-fail) in
    {479}let server_wkad_1: bitstring = (if v_68 then catch-fail(hmac(h_alg_5,server_ats_1,x_26)) else caught-fail) in
    {480}let v_69: bool = not-caught-fail(server_wkad_1) in
    {481}let l_27: label = (if v_69 then tls13_finished else caught-fail) in
    {482}let h_26: bitstring = (if v_69 then zero else caught-fail) in
    {483}let x_27: bitstring = (if v_69 then (l_27,h_26) else caught-fail) in
    {484}let client_fkad_1: bitstring = (if v_69 then catch-fail(hmac(h_alg_5,client_ats_1,x_27)) else caught-fail) in
    {485}let v_70: bool = not-caught-fail(client_fkad_1) in
    {486}let (cak_1: aead_key,sak_1: aead_key,cfkad_1: mac_key,ems_3: bitstring) = (if v_63 then (if v_65 then (if v_67 then (if v_68 then (if v_69 then (if v_70 then (client_wkad_1,server_wkad_1,client_fkad_1,ems_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {487}event Client_cak(id_client,cak_1);
    {488}event Client_sak(id_client,sak_1);
    {489}event Client_cfkad(id_client,cfkad_1);
    {490}let client_hash_msg: bitstring = hmac(h_alg_5,cfin_4,cur_log_4) in
    {491}let client_finished_msg: msg = FIN(client_hash_msg) in
    {492}let cur_log'_1: bitstring = (cur_log_4,client_finished_msg) in
    {493}let l_28: label = tls13_resumption_master_secret in
    {494}let h_27: bitstring = catch-fail(hash(h_alg_5,cur_log'_1)) in
    {495}let v_71: bool = not-caught-fail(h_27) in
    {496}let x_28: bitstring = (if v_71 then (l_28,h_27) else caught-fail) in
    {497}let rms_1: bitstring = (if v_71 then hmac(h_alg_5,master_secret_5,x_28) else fail-any) in
    {498}event Client_rms(id_client,rms_1);
    {499}let enc_client_finished_msg: bitstring = aead_enc(a_alg_4,chk_4,seq_client_1,zero,client_finished_msg) in
    {500}event ClientFinished(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,cak_1,sak_1,ems_3,rms_1);
    {501}out(io, enc_client_finished_msg);
    (
        0
    ) | (
        0
    ) | (
        {502}!
        {503}in(io, (seq_srv_2: nat,seq_client_2: nat));
        {504}if (is_nat(seq_srv_2) && is_nat(seq_client_2)) then
        {505}in(io, enc_msg: bitstring);
        {506}let CRTR(rand_crt: bitstring) = aead_dec(a_alg_4,sak_1,seq_srv_2,zero,enc_msg) in
        {507}new st_6[]: stamp;
        {508}event ClientSequenceServerDataWriteKey(id_client,st_6,seq_srv_2);
        {509}event ClientReceives(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_srv_2,zero,CRTR(rand_crt));
        {510}let cur_log_CRTR_2: bitstring = (cur_log'_1,CRTR(rand_crt)) in
        {539}get long_term_keys(c_dom': domain,sk_2: privkey,c_pkey'_1: pubkey,crt_6: certificate,idP_2: idProc) in
        {511}let @1_x: bitstring = (c_dom',sk_2,c_pkey'_1,crt_6,idP_2) in
        {512}new @1_st[]: stamp;
        {513}event PreciseInput(@1_st,@1_x);
        {514}let () = () in
        {515}event Selected_ltk(c_dom_1,c_dom',idP_2);
        {516}let (sk_3: privkey,c_pkey'_2: pubkey,crt_7: certificate) = (sk_2,c_pkey'_1,crt_6) in
        {517}let certificate_msg_1: msg = CRT(rand_crt,crt_7) in
        {518}let encrypted_certificate_msg_1: bitstring = aead_enc(a_alg_4,cak_1,seq_client_2,zero,certificate_msg_1) in
        {519}new st1_6[]: stamp;
        {520}event ClientSequenceClientDataWriteKey(id_client,st1_6,seq_client_2);
        {521}event ClientSends(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_client_2,zero,certificate_msg_1);
        {522}out(io, encrypted_certificate_msg_1);
        {523}let cur_log_CRT_3: bitstring = (cur_log_CRTR_2,certificate_msg_1) in
        {524}let signed_log_3: bitstring = sign(sk_3,hash(h_alg_5,cur_log_CRT_3)) in
        {525}let certificate_verify_msg_1: msg = CV(signed_log_3) in
        {526}let enc_verify_msg: bitstring = aead_enc(a_alg_4,cak_1,seq_client_2 + 1,zero,certificate_verify_msg_1) in
        {527}new st2_1[]: stamp;
        {528}event ClientSequenceClientDataWriteKey(id_client,st2_1,seq_client_2 + 1);
        {529}event ClientSends(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_client_2 + 1,zero,certificate_verify_msg_1);
        {530}out(io, enc_verify_msg);
        {531}let cur_log_CV_3: bitstring = (cur_log_CRT_3,certificate_verify_msg_1) in
        {532}let hash_msg_3: bitstring = hmac(h_alg_5,cfkad_1,cur_log_CV_3) in
        {533}let enc_fin_2: bitstring = aead_enc(a_alg_4,cak_1,seq_client_2 + 2,zero,FIN(hash_msg_3)) in
        {534}new st3_1[]: stamp;
        {535}event ClientSequenceClientDataWriteKey(id_client,st3_1,seq_client_2 + 2);
        {536}event ClientSends(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_client_2 + 2,zero,FIN(hash_msg_3));
        {537}event ClientFinishedPH(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,rand_crt,c_pkey'_2);
        {538}out(io, enc_fin_2)
    )
) | (
    {540}!
    {541}in(ch_client_FIN, (id_client_1: idProc,ArgsClientFIN(cr_6: bytes32,sr_5: bytes32,h_alg_6: hash_alg,a_alg_5: aead_alg,c_dom_2: domain,s_dom_8: domain,s_pkey_5: pubkey,cert_req: bool,psk_8: preSharedKey,safe_psk_1: bool,comp_psk_1: bool,master_secret_6: bitstring,chk_5: aead_key,seq_client_3: nat,shk_4: aead_key,seq_srv_3: nat,cfin_5: mac_key,sfin_4: mac_key,cur_log_5: bitstring)));
    {542}new st_7[]: stamp;
    {543}event PreciseIdProcess(ch_client_FIN,id_client_1,st_7);
    {544}event Client_server_domain(id_client_1,s_dom_8);
    {545}event Client_Rand_client(id_client_1,cr_6);
    {546}event Client_Rand_server(id_client_1,sr_5);
    {547}event Client_PSKChoosen(id_client_1,psk_8,safe_psk_1);
    {548}event Client_comp_psk(id_client_1,comp_psk_1);
    {549}event Client_chk(id_client_1,chk_5);
    {550}event Client_shk(id_client_1,shk_4);
    {551}event Client_cfin(id_client_1,cfin_5);
    {552}event Client_sfin(id_client_1,sfin_4);
    {553}event Client_Cert_server(id_client_1,s_pkey_5);
    {554}new st1_7[]: stamp;
    {555}event PreciseMess(ch_client_FIN,id_client_1,st1_7,(master_secret_6,s_pkey_5,psk_8,safe_psk_1,comp_psk_1));
    {556}in(io, enc_finished_msg: bitstring);
    {557}let finished_msg_1: msg = aead_dec(a_alg_5,shk_4,seq_srv_3,zero,enc_finished_msg) in
    (
        {558}let FIN(hash_msg_4: bitstring) = finished_msg_1 in
        (
            {559}if (hash_msg_4 = hmac(h_alg_6,sfin_4,cur_log_5)) then
            {560}let cur_log2: bitstring = (cur_log_5,finished_msg_1) in
            {561}if cert_req then
            (
                {562}let seq_srv_4: nat = seq_srv_3 + 1 in
                {580}get long_term_keys(c_dom'_1: domain,sk_4: privkey,c_pkey_3: pubkey,crt_8: certificate,idP_3: idProc) in
                {563}let @2_x: bitstring = (c_dom'_1,sk_4,c_pkey_3,crt_8,idP_3) in
                {564}new @2_st[]: stamp;
                {565}event PreciseInput(@2_st,@2_x);
                {566}let () = () in
                {567}event Selected_ltk(c_dom_2,c_dom'_1,idP_3);
                {568}let (sk_5: privkey,c_pkey_4: pubkey,crt_9: certificate) = (sk_4,c_pkey_3,crt_8) in
                {569}event Client_Cert_client(id_client_1,c_pkey_4);
                {570}let certificate_msg_2: msg = CRT(zero,crt_9) in
                {571}let encrypted_certificate_msg_2: bitstring = aead_enc(a_alg_5,chk_5,seq_client_3,zero,certificate_msg_2) in
                {572}out(io, encrypted_certificate_msg_2);
                {573}let cur_log2_1: bitstring = (cur_log2,certificate_msg_2) in
                {574}let signed_log_4: bitstring = sign(sk_5,hash(h_alg_6,cur_log2_1)) in
                {575}let certificate_verify_msg_2: msg = CV(signed_log_4) in
                {576}let encrypted_certificate_verify_msg_1: bitstring = aead_enc(a_alg_5,chk_5,seq_client_3 + 1,zero,certificate_verify_msg_2) in
                {577}out(io, encrypted_certificate_verify_msg_1);
                {578}let cur_log3: bitstring = (cur_log2_1,certificate_verify_msg_2) in
                {579}out(ch_client_CFIN, (id_client_1,ArgsClientCFIN(cr_6,sr_5,h_alg_6,a_alg_5,c_dom_2,s_dom_8,s_pkey_5,c_pkey_4,NoPsk,false,comp_psk_1,master_secret_6,chk_5,seq_client_3 + 2,shk_4,seq_srv_4,cfin_5,sfin_4,cur_log3)))
            )
            else
                {581}event Client_Cert_client(id_client_1,NoPubKey);
                {582}out(ch_client_CFIN, (id_client_1,ArgsClientCFIN(cr_6,sr_5,h_alg_6,a_alg_5,c_dom_2,s_dom_8,s_pkey_5,NoPubKey,psk_8,safe_psk_1,comp_psk_1,master_secret_6,chk_5,seq_client_3,shk_4,seq_srv_3 + 1,cfin_5,sfin_4,cur_log2)))
        )
        else
            {583}out(io, unexpected_message)
    )
    else
        {584}out(io, bad_record_mac)
) | (
    {585}!
    {586}in(ch_client_CRT, (id_client_2: idProc,ArgsClientCRT(cr_7: bytes32,sr_6: bytes32,h_alg_7: hash_alg,a_alg_6: aead_alg,c_dom_3: domain,s_dom_9: domain,cert_req_1: bool,certificate_msg_3: msg,comp_psk_2: bool,master_secret_7: bitstring,chk_6: aead_key,seq_client_4: nat,shk_5: aead_key,seq_srv_5: nat,cfin_6: mac_key,sfin_5: mac_key,cur_log_6: bitstring)));
    {587}new st_8[]: stamp;
    {588}event PreciseIdProcess(ch_client_CRT,id_client_2,st_8);
    {589}event Client_server_domain(id_client_2,s_dom_9);
    {590}event Client_Rand_client(id_client_2,cr_7);
    {591}event Client_Rand_server(id_client_2,sr_6);
    {592}event Client_comp_psk(id_client_2,comp_psk_2);
    {593}event Client_chk(id_client_2,chk_6);
    {594}event Client_shk(id_client_2,shk_5);
    {595}event Client_cfin(id_client_2,cfin_6);
    {596}event Client_sfin(id_client_2,sfin_5);
    {597}let CRT(=zero,crt_10: certificate) = certificate_msg_3 in
    {598}let cur_log2_2: bitstring = (cur_log_6,certificate_msg_3) in
    {599}in(io, enc_crt_verif_msg: bitstring);
    {600}let certificate_verify_msg_3: msg = aead_dec(a_alg_6,shk_5,seq_srv_5,zero,enc_crt_verif_msg) in
    {601}let CV(signed_log_5: bitstring) = certificate_verify_msg_3 in
    {602}if (verify(get_pkey(crt_10),hash(h_alg_7,cur_log2_2),signed_log_5) && ((get_domain(crt_10) = s_dom_9) && verify_cert(crt_10))) then
    {603}let s_pkey_6: pubkey = get_pkey(crt_10) in
    {604}let cur_log3_1: bitstring = (cur_log2_2,certificate_verify_msg_3) in
    {605}event Client_Cert_server(id_client_2,s_pkey_6);
    {606}out(ch_client_FIN, (id_client_2,ArgsClientFIN(cr_7,sr_6,h_alg_7,a_alg_6,c_dom_3,s_dom_9,s_pkey_6,cert_req_1,NoPsk,false,comp_psk_2,master_secret_7,chk_6,seq_client_4,shk_5,seq_srv_5 + 1,cfin_6,sfin_5,cur_log3_1)))
) | (
    {607}!
    {608}in(ch_client_after_EE, (id_client_3: idProc,ArgsClientAfterEE(cr_8: bytes32,sr_7: bytes32,h_alg_8: hash_alg,a_alg_7: aead_alg,c_dom_4: domain,s_dom_10: domain,psk_9: preSharedKey,safe_psk_2: bool,comp_psk_3: bool,master_secret_8: bitstring,chk_7: aead_key,seq_client_5: nat,shk_6: aead_key,seq_srv_6: nat,cfin_7: mac_key,sfin_6: mac_key,cur_log_7: bitstring)));
    {609}new st_9[]: stamp;
    {610}event PreciseIdProcess(ch_client_after_EE,id_client_3,st_9);
    {611}event Client_server_domain(id_client_3,s_dom_10);
    {612}event Client_Rand_client(id_client_3,cr_8);
    {613}event Client_Rand_server(id_client_3,sr_7);
    {614}event Client_PSKChoosen(id_client_3,psk_9,safe_psk_2);
    {615}event Client_comp_psk(id_client_3,comp_psk_3);
    {616}event Client_chk(id_client_3,chk_7);
    {617}event Client_shk(id_client_3,shk_6);
    {618}event Client_cfin(id_client_3,cfin_7);
    {619}event Client_sfin(id_client_3,sfin_6);
    {620}new st1_8[]: stamp;
    {621}event PreciseMess(ch_client_after_EE,id_client_3,st1_8,master_secret_8);
    {622}if (psk_9 = NoPsk) then
    (
        {623}in(io, enc_msg_1: bitstring);
        {624}let msg': msg = aead_dec(a_alg_7,shk_6,seq_srv_6,zero,enc_msg_1) in
        {625}let CRTR(=zero) = msg' in
        (
            {626}let cur_log2_3: bitstring = (cur_log_7,msg') in
            {627}in(io, enc_crt_msg: bitstring);
            {628}let certificate_msg_4: msg = aead_dec(a_alg_7,shk_6,seq_srv_6 + 1,zero,enc_crt_msg) in
            {629}out(ch_client_CRT, (id_client_3,ArgsClientCRT(cr_8,sr_7,h_alg_8,a_alg_7,c_dom_4,s_dom_10,true,certificate_msg_4,comp_psk_3,master_secret_8,chk_7,seq_client_5,shk_6,seq_srv_6 + 2,cfin_7,sfin_6,cur_log2_3)))
        )
        else
            {630}let CRT(=zero,crt_11: certificate) = msg' in
                {631}out(ch_client_CRT, (id_client_3,ArgsClientCRT(cr_8,sr_7,h_alg_8,a_alg_7,c_dom_4,s_dom_10,false,msg',comp_psk_3,master_secret_8,chk_7,seq_client_5,shk_6,seq_srv_6 + 1,cfin_7,sfin_6,cur_log_7)))
            else
                {632}out(io, unexpected_message)
    )
    else
        {633}event Client_Cert_server(id_client_3,NoPubKey);
        {634}out(ch_client_FIN, (id_client_3,ArgsClientFIN(cr_8,sr_7,h_alg_8,a_alg_7,c_dom_4,s_dom_10,NoPubKey,false,psk_9,safe_psk_2,comp_psk_3,master_secret_8,chk_7,seq_client_5,shk_6,seq_srv_6,cfin_7,sfin_6,cur_log_7)))
) | (
    {635}!
    {641}get long_term_keys(dom1: domain,sk1: privkey,pk1: pubkey,cert1: certificate,idP1: idProc) in
    {636}event Same(idP1);
    {640}get long_term_keys(dom2: domain,sk2: privkey,pk2: pubkey,cert2: certificate,idP2: idProc) in
    {637}event Same(idP2);
    {638}insert long_term_keys(choice[dom1,dom2],choice[sk1,sk2],choice[pk1,pk2],choice[cert1,cert2],choice[idP1,idP2]);
    {639}insert long_term_keys(choice[dom2,dom1],choice[sk2,sk1],choice[pk2,pk1],choice[cert2,cert1],choice[idP2,idP1])
) | (
    {642}!
    {648}get pre_shared_keys(c_dom1: domain,s_dom_11: domain,h_alg_9: hash_alg,id1: identityPsk,psk1: preSharedKey,idP1_1: idProc,safe1: bool) in
    {643}event Same(idP1_1);
    {647}get pre_shared_keys(c_dom2: domain,=s_dom_11,=h_alg_9,id2: identityPsk,psk2: preSharedKey,idP2_1: idProc,safe2: bool) in
    {644}event Same(idP2_1);
    {645}insert pre_shared_keys(choice[c_dom1,c_dom2],s_dom_11,h_alg_9,choice[id1,id2],choice[psk1,psk2],choice[idP1_1,idP2_1],choice[safe1,safe2]);
    {646}insert pre_shared_keys(choice[c_dom2,c_dom1],s_dom_11,h_alg_9,choice[id2,id1],choice[psk2,psk1],choice[idP2_1,idP1_1],choice[safe2,safe1])
) | (
    {649}!
    {650}new id_tls_client: idProc;
    {651}in(io, s_dom_12: domain);
    {652}event Same(s_dom_12);
    {653}in(io, c_dom_5: domain);
    {654}event Same(c_dom_5);
    {655}let @7_id_client: idProc = id_tls_client in
    {656}let @7_tls_h: hash_alg = id_hash(StrongHash,1) in
    {657}let @7_tls_a: aead_alg = id_aead(StrongAE,1) in
    {658}let @7_tls_g: group = id_g(StrongDH,1) in
    {659}let @7_use_psk: bool = false in
    {660}in(io, @7_send_kex: bool);
    {661}event Same(@7_send_kex);
    {662}let () = () in
    {663}let @7_comp_psk: bool = false in
    {664}let send_kex: bool = (not(false) || @7_send_kex) in
    {665}let cur_log_8: bitstring = zero in
    {666}let old_psk_data: bitstring = zero in
    {667}new rand24_1[]: bytes24;
    {668}new rand8_1[]: bytes8;
    {669}let cr_9: bytes32 = B32(rand24_1,rand8_1) in
    {670}new s_8[]: seed;
    {671}let gx_2: element = dh_pub(@7_tls_g,dh_k(s_8)) in
    {672}let v_72: bitstring = (dh_k(s_8),gx_2) in
    {673}let v_73: bool = success?(1-proj-2-tuple(v_72)) in
    {674}let gx_3: element = (if v_73 then 2-proj-2-tuple(v_72) else caught-fail) in
    {675}let x_29: bitstring = (if v_73 then 1-proj-2-tuple(v_72) else caught-fail) in
    {676}let kex: kex_alg = (if v_73 then (if send_kex then DHE_kex(@7_tls_g,gx_3) else DHE_group(@7_tls_g)) else caught-fail) in
    {677}let (kex_ext_1: keyShareExt,kex_data: bitstring) = (if v_73 then (client_kex_ext(kex),(x_29,@7_tls_g)) else fail-any) in
    {678}let ech_ext_2: echExt = empty_ech_ext in
    {679}let extra_2: extraExt = empty_extra_ext in
    {680}if @7_use_psk then
    (
        {681}let (psk_10: preSharedKey,id_4: identityPsk,old_es: bitstring,is_safe: bool) = old_psk_data in
        (
            {682}let offer_2: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_12),ech_ext_2,extra_2,trunc_client_psk_ext(id_4)) in
            {683}let cur_log'_2: bitstring = (cur_log_8,CH(cr_9,offer_2)) in
            {684}let s_9: bitstring = zero in
            {685}let k_6: bitstring = catch-fail(psk2b(psk_10)) in
            {686}let v_74: bool = not-caught-fail(k_6) in
            {687}let early_secret_5: bitstring = catch-fail((if v_74 then hmac(@7_tls_h,s_9,k_6) else fail-any)) in
            {688}let v_75: bool = not-caught-fail(early_secret_5) in
            {689}let l_29: label = (if v_75 then tls13_ext_res_binder else caught-fail) in
            {690}let m_5: bitstring = (if v_75 then zero else caught-fail) in
            {691}let h_28: bitstring = (if v_75 then catch-fail(hash(@7_tls_h,m_5)) else caught-fail) in
            {692}let v_76: bool = not-caught-fail(h_28) in
            {693}let x_30: bitstring = (if v_76 then (l_29,h_28) else caught-fail) in
            {694}let binder_key_3: bitstring = (if v_75 then catch-fail((if v_76 then hmac(@7_tls_h,early_secret_5,x_30) else fail-any)) else caught-fail) in
            {695}let v_77: bool = not-caught-fail(binder_key_3) in
            {696}let v_78: bitstring = catch-fail((if v_75 then (if v_77 then (early_secret_5,binder_key_3) else fail-any) else fail-any)) in
            {697}let v_79: bool = (not-caught-fail(v_78) && success?(1-proj-2-tuple(v_78))) in
            {698}let kb_3: mac_key = (if v_79 then 2-proj-2-tuple(v_78) else caught-fail) in
            {699}let es_2: bitstring = (if v_79 then 1-proj-2-tuple(v_78) else caught-fail) in
            {700}let binders_1: bitstring = (if v_79 then catch-fail(hmac(@7_tls_h,kb_3,cur_log'_2)) else caught-fail) in
            {701}let v_80: bool = not-caught-fail(binders_1) in
            {702}let v_81: bitstring = catch-fail((if v_79 then (if v_80 then (client_psk_ext(id_4,binders_1),(psk_10,id_4,es_2,is_safe)) else fail-any) else fail-any)) in
            {703}let v_82: bool = (not-caught-fail(v_81) && success?(1-proj-2-tuple(v_81))) in
            {704}let psk_data: bitstring = (if v_82 then 2-proj-2-tuple(v_81) else caught-fail) in
            {705}let psk_ext_2: preSharedKeyExt = (if v_82 then 1-proj-2-tuple(v_81) else caught-fail) in
            {706}let offer_3: params = (if v_82 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_2) else caught-fail) in
            {707}let (client_hello_1: msg,cr_10: bytes32,kex_data_1: bitstring,psk_data_1: bitstring) = (if v_82 then (CH(cr_9,offer_3),cr_9,kex_data,psk_data) else fail-any) in
            {708}event ClientOffersAead(cr_10,@7_tls_a);
            {709}event ClientOffersHash(cr_10,@7_tls_h);
            {710}event ClientOffersGroup(cr_10,@7_tls_g);
            {711}out(io, client_hello_1);
            {712}let cur_log2_4: bitstring = (cur_log_8,client_hello_1) in
            {713}let (psk_11: preSharedKey,id_5: identityPsk,es_3: bitstring,safe_psk_3: bool) = psk_data_1 in
            (
                {714}if (false && (psk_11 ≠ NoPsk)) then
                {715}let client_hello_2: bitstring = (zero,client_hello_1) in
                {716}let l_30: label = tls13_client_early_traffic_secret in
                {717}let h_29: bitstring = catch-fail(hash(@7_tls_h,client_hello_2)) in
                {718}let v_83: bool = not-caught-fail(h_29) in
                {719}let x_31: bitstring = (if v_83 then (l_30,h_29) else caught-fail) in
                {720}let atsc0_1: bitstring = catch-fail((if v_83 then hmac(@7_tls_h,es_3,x_31) else fail-any)) in
                {721}let v_84: bool = not-caught-fail(atsc0_1) in
                {722}let l_31: label = (if v_84 then tls13_key else caught-fail) in
                {723}let h_30: bitstring = (if v_84 then zero else caught-fail) in
                {724}let x_32: bitstring = (if v_84 then (l_31,h_30) else caught-fail) in
                {725}let kc0_1: bitstring = (if v_84 then catch-fail(hmac(@7_tls_h,atsc0_1,x_32)) else caught-fail) in
                {726}let v_85: bool = not-caught-fail(kc0_1) in
                {727}let l_32: label = (if v_85 then tls13_early_exporter_master_secret else caught-fail) in
                {728}let h_31: bitstring = (if v_85 then catch-fail(hash(@7_tls_h,client_hello_2)) else caught-fail) in
                {729}let v_86: bool = not-caught-fail(h_31) in
                {730}let x_33: bitstring = (if v_86 then (l_32,h_31) else caught-fail) in
                {731}let ems0_2: bitstring = (if v_85 then catch-fail((if v_86 then hmac(@7_tls_h,es_3,x_33) else fail-any)) else caught-fail) in
                {732}let v_87: bool = not-caught-fail(ems0_2) in
                {733}let (wkc0_1: aead_key,ems0_3: bitstring) = (if v_84 then (if v_85 then (if v_87 then (kc0_1,ems0_2) else fail-any) else fail-any) else fail-any) in
                {734}!
                {735}in(io, (i_1: nat,ad_1: bitstring));
                {736}if is_nat(i_1) then
                {737}new msg_ed[]: bitstring;
                {738}let enc_ed: bitstring = aead_enc(@7_tls_a,wkc0_1,i_1,ad_1,msg_ed) in
                {739}new st_10: stamp;
                {740}event ClientSequenceClient0RTTDataWriteKey(@7_id_client,st_10,i_1);
                {741}event ClientSends0(@7_id_client,cr_10,psk_11,i_1,ad_1,msg_ed);
                {742}out(io, enc_ed)
            ) | (
                {743}in(io, server_hello_1: msg);
                {744}let SH(sr_8: bytes32,mode: params) = server_hello_1 in
                (
                    {745}event ClientEchAcceptance(@7_id_client,false);
                    {746}if (false && (sr_8 = B32(HRR24,HRR8))) then
                    (
                        {747}if ((mode = nego(TLS13,@7_tls_h,@7_tls_a,hrr_kex_ext(@7_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex ≠ true)) then
                        (
                            {748}let cur_log3_2: bitstring = (cur_log2_4,server_hello_1) in
                            {749}let send_kex_1: bool = true in
                            {750}new rand24_2[]: bytes24;
                            {751}new rand8_2[]: bytes8;
                            {752}let cr_11: bytes32 = B32(rand24_2,rand8_2) in
                            {753}new s_10[]: seed;
                            {754}let gx_4: element = dh_pub(@7_tls_g,dh_k(s_10)) in
                            {755}let v_88: bitstring = (dh_k(s_10),gx_4) in
                            {756}let v_89: bool = success?(1-proj-2-tuple(v_88)) in
                            {757}let gx_5: element = (if v_89 then 2-proj-2-tuple(v_88) else caught-fail) in
                            {758}let x_34: bitstring = (if v_89 then 1-proj-2-tuple(v_88) else caught-fail) in
                            {759}let kex_1: kex_alg = (if v_89 then (if send_kex_1 then DHE_kex(@7_tls_g,gx_5) else DHE_group(@7_tls_g)) else caught-fail) in
                            {760}let (kex_ext_2: keyShareExt,kex_data_2: bitstring) = (if v_89 then (client_kex_ext(kex_1),(x_34,@7_tls_g)) else fail-any) in
                            {761}let ech_ext_3: echExt = empty_ech_ext in
                            {762}let extra_3: extraExt = empty_extra_ext in
                            {763}if @7_use_psk then
                            (
                                {764}let (psk_12: preSharedKey,id_6: identityPsk,old_es_1: bitstring,is_safe_1: bool) = psk_data_1 in
                                (
                                    {765}let offer_4: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_12),ech_ext_3,extra_3,trunc_client_psk_ext(id_6)) in
                                    {766}let cur_log'_3: bitstring = (cur_log3_2,CH(cr_11,offer_4)) in
                                    {767}let s_11: bitstring = zero in
                                    {768}let k_7: bitstring = catch-fail(psk2b(psk_12)) in
                                    {769}let v_90: bool = not-caught-fail(k_7) in
                                    {770}let early_secret_6: bitstring = catch-fail((if v_90 then hmac(@7_tls_h,s_11,k_7) else fail-any)) in
                                    {771}let v_91: bool = not-caught-fail(early_secret_6) in
                                    {772}let l_33: label = (if v_91 then tls13_ext_res_binder else caught-fail) in
                                    {773}let m_6: bitstring = (if v_91 then zero else caught-fail) in
                                    {774}let h_32: bitstring = (if v_91 then catch-fail(hash(@7_tls_h,m_6)) else caught-fail) in
                                    {775}let v_92: bool = not-caught-fail(h_32) in
                                    {776}let x_35: bitstring = (if v_92 then (l_33,h_32) else caught-fail) in
                                    {777}let binder_key_4: bitstring = (if v_91 then catch-fail((if v_92 then hmac(@7_tls_h,early_secret_6,x_35) else fail-any)) else caught-fail) in
                                    {778}let v_93: bool = not-caught-fail(binder_key_4) in
                                    {779}let v_94: bitstring = catch-fail((if v_91 then (if v_93 then (early_secret_6,binder_key_4) else fail-any) else fail-any)) in
                                    {780}let v_95: bool = (not-caught-fail(v_94) && success?(1-proj-2-tuple(v_94))) in
                                    {781}let kb_4: mac_key = (if v_95 then 2-proj-2-tuple(v_94) else caught-fail) in
                                    {782}let es_4: bitstring = (if v_95 then 1-proj-2-tuple(v_94) else caught-fail) in
                                    {783}let binders_2: bitstring = (if v_95 then catch-fail(hmac(@7_tls_h,kb_4,cur_log'_3)) else caught-fail) in
                                    {784}let v_96: bool = not-caught-fail(binders_2) in
                                    {785}let v_97: bitstring = catch-fail((if v_95 then (if v_96 then (client_psk_ext(id_6,binders_2),(psk_12,id_6,es_4,is_safe_1)) else fail-any) else fail-any)) in
                                    {786}let v_98: bool = (not-caught-fail(v_97) && success?(1-proj-2-tuple(v_97))) in
                                    {787}let psk_data_2: bitstring = (if v_98 then 2-proj-2-tuple(v_97) else caught-fail) in
                                    {788}let psk_ext_3: preSharedKeyExt = (if v_98 then 1-proj-2-tuple(v_97) else caught-fail) in
                                    {789}let offer_5: params = (if v_98 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_3) else caught-fail) in
                                    {790}let (client_hello': msg,cr': bytes32,kex_data': bitstring,psk_data': bitstring) = (if v_98 then (CH(cr_11,offer_5),cr_11,kex_data_2,psk_data_2) else fail-any) in
                                    {791}event ClientOffersAead(cr',@7_tls_a);
                                    {792}event ClientOffersHash(cr',@7_tls_h);
                                    {793}event ClientOffersGroup(cr',@7_tls_g);
                                    {794}out(io, client_hello');
                                    {795}let cur_log4: bitstring = (cur_log3_2,client_hello') in
                                    {796}in(io, server_hello': msg);
                                    {797}let SH(sr': bytes32,mode': params) = server_hello' in
                                    (
                                        {798}if (sr' = B32(HRR24,HRR8)) then
                                            {799}out(io, unexpected_message)
                                        else
                                            {800}let (x_36: bitstring,g: group) = kex_data' in
                                            {801}let (psk_offer: preSharedKey,id_offer: identityPsk,es_offer: bitstring,is_safe_offer: bool) = psk_data' in
                                            {802}event Client_PSKOffer(@7_id_client,psk_offer,id_offer,is_safe_offer);
                                            {803}event Client_Rand_client(@7_id_client,cr');
                                            {804}event Client_DH_client(@7_id_client,dh_pub(g,x_36));
                                            {805}event Client_server_domain(@7_id_client,s_dom_12);
                                            {806}let SH(sr_9: bytes32,mode_1: params) = server_hello' in
                                            {807}event Client_Rand_server(@7_id_client,sr_9);
                                            {808}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g,gy_1: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_4: preSharedKeyExt) = mode_1 in
                                            (
                                                {809}let cur_log2_5: bitstring = (cur_log4,server_hello') in
                                                {810}event Client_DH_server(@7_id_client,gy_1);
                                                {811}let v_99: bool = (psk_ext_4 = empty_psk_ext) in
                                                {812}let psk_13: preSharedKey = (if v_99 then NoPsk else caught-fail) in
                                                {813}let s_12: bitstring = (if v_99 then zero else caught-fail) in
                                                {814}let k_8: bitstring = (if v_99 then catch-fail(psk2b(psk_13)) else caught-fail) in
                                                {815}let v_100: bool = not-caught-fail(k_8) in
                                                {816}let early_secret_7: bitstring = (if v_99 then catch-fail((if v_100 then hmac(@7_tls_h,s_12,k_8) else fail-any)) else caught-fail) in
                                                {817}let v_101: bool = not-caught-fail(early_secret_7) in
                                                {818}let l_34: label = (if v_101 then tls13_ext_res_binder else caught-fail) in
                                                {819}let m_7: bitstring = (if v_101 then zero else caught-fail) in
                                                {820}let h_33: bitstring = (if v_101 then catch-fail(hash(@7_tls_h,m_7)) else caught-fail) in
                                                {821}let v_102: bool = not-caught-fail(h_33) in
                                                {822}let x_37: bitstring = (if v_102 then (l_34,h_33) else caught-fail) in
                                                {823}let binder_key_5: bitstring = (if v_101 then catch-fail((if v_102 then hmac(@7_tls_h,early_secret_7,x_37) else fail-any)) else caught-fail) in
                                                {824}let v_103: bool = not-caught-fail(binder_key_5) in
                                                {825}let v_104: bitstring = (if v_99 then catch-fail((if v_101 then (if v_103 then (early_secret_7,binder_key_5) else fail-any) else fail-any)) else caught-fail) in
                                                {826}let v_105: bool = (not-caught-fail(v_104) && success?(1-proj-2-tuple(v_104))) in
                                                {827}let kb_5: mac_key = (if v_105 then 2-proj-2-tuple(v_104) else caught-fail) in
                                                {828}let es_5: bitstring = (if v_105 then 1-proj-2-tuple(v_104) else caught-fail) in
                                                {829}let v_106: bitstring = (if not(v_99) then catch-fail(psk_data') else caught-fail) in
                                                {830}let v_107: bool = (not-caught-fail(v_106) && success?(1-proj-4-tuple(v_106))) in
                                                {831}let is_safe_2: bool = (if v_107 then 4-proj-4-tuple(v_106) else caught-fail) in
                                                {832}let es_6: bitstring = (if v_107 then 3-proj-4-tuple(v_106) else caught-fail) in
                                                {833}let id_7: identityPsk = (if v_107 then 2-proj-4-tuple(v_106) else caught-fail) in
                                                {834}let psk_14: preSharedKey = (if v_107 then 1-proj-4-tuple(v_106) else caught-fail) in
                                                {835}let (psk_15: preSharedKey,early_secret_8: bitstring,valid: bool,safe_psk_4: bool) = (if v_99 then (if v_105 then (NoPsk,es_5,true,false) else fail-any) else (if v_107 then (psk_14,es_6,((psk_14 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_4)),is_safe_2) else fail-any)) in
                                                {836}event Client_PSKChoosen(@7_id_client,psk_15,safe_psk_4);
                                                {837}if valid then
                                                (
                                                    {838}let gxy_1: element = catch-fail(dh_decap_fun(g,gy_1,x_36)) in
                                                    {839}let v_108: bool = not-caught-fail(gxy_1) in
                                                    {840}new s_13[]: seed;
                                                    {841}let gxy_2: element = (if v_108 then gxy_1 else dh_f(s_13)) in
                                                    {842}event Client_DH_gxy(@7_id_client,gxy_2);
                                                    {843}let l_35: label = tls13_derived in
                                                    {844}let m_8: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {845}let v_109: bool = not-caught-fail(m_8) in
                                                    {846}let h_34: bitstring = (if v_109 then catch-fail(hash(@7_tls_h,m_8)) else caught-fail) in
                                                    {847}let v_110: bool = not-caught-fail(h_34) in
                                                    {848}let x_38: bitstring = (if v_110 then (l_35,h_34) else caught-fail) in
                                                    {849}let extra_4: bitstring = catch-fail((if v_109 then (if v_110 then hmac(@7_tls_h,early_secret_8,x_38) else fail-any) else fail-any)) in
                                                    {850}let v_111: bool = not-caught-fail(extra_4) in
                                                    {851}let handshake_secret_1: bitstring = (if v_111 then hmac(@7_tls_h,extra_4,gxy_2) else fail-any) in
                                                    {852}let l_36: label = tls13_derived in
                                                    {853}let m_9: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {854}let v_112: bool = not-caught-fail(m_9) in
                                                    {855}let h_35: bitstring = (if v_112 then catch-fail(hash(@7_tls_h,m_9)) else caught-fail) in
                                                    {856}let v_113: bool = not-caught-fail(h_35) in
                                                    {857}let x_39: bitstring = (if v_113 then (l_36,h_35) else caught-fail) in
                                                    {858}let extra_5: bitstring = catch-fail((if v_112 then (if v_113 then hmac(@7_tls_h,handshake_secret_1,x_39) else fail-any) else fail-any)) in
                                                    {859}let v_114: bool = not-caught-fail(extra_5) in
                                                    {860}let k_9: bitstring = (if v_114 then zero else caught-fail) in
                                                    {861}let master_secret_9: bitstring = (if v_114 then catch-fail(hmac(@7_tls_h,handshake_secret_1,k_9)) else caught-fail) in
                                                    {862}let v_115: bool = not-caught-fail(master_secret_9) in
                                                    {863}let l_37: label = (if v_115 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {864}let h_36: bitstring = (if v_115 then catch-fail(hash(@7_tls_h,cur_log2_5)) else caught-fail) in
                                                    {865}let v_116: bool = not-caught-fail(h_36) in
                                                    {866}let x_40: bitstring = (if v_116 then (l_37,h_36) else caught-fail) in
                                                    {867}let client_hts_1: bitstring = (if v_115 then catch-fail((if v_116 then hmac(@7_tls_h,handshake_secret_1,x_40) else fail-any)) else caught-fail) in
                                                    {868}let v_117: bool = not-caught-fail(client_hts_1) in
                                                    {869}let l_38: label = (if v_117 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {870}let h_37: bitstring = (if v_117 then catch-fail(hash(@7_tls_h,cur_log2_5)) else caught-fail) in
                                                    {871}let v_118: bool = not-caught-fail(h_37) in
                                                    {872}let x_41: bitstring = (if v_118 then (l_38,h_37) else caught-fail) in
                                                    {873}let server_hts_1: bitstring = (if v_117 then catch-fail((if v_118 then hmac(@7_tls_h,handshake_secret_1,x_41) else fail-any)) else caught-fail) in
                                                    {874}let v_119: bool = not-caught-fail(server_hts_1) in
                                                    {875}let l_39: label = (if v_119 then tls13_key else caught-fail) in
                                                    {876}let h_38: bitstring = (if v_119 then zero else caught-fail) in
                                                    {877}let x_42: bitstring = (if v_119 then (l_39,h_38) else caught-fail) in
                                                    {878}let client_wkh_1: bitstring = (if v_119 then catch-fail(hmac(@7_tls_h,client_hts_1,x_42)) else caught-fail) in
                                                    {879}let v_120: bool = not-caught-fail(client_wkh_1) in
                                                    {880}let l_40: label = (if v_120 then tls13_key else caught-fail) in
                                                    {881}let h_39: bitstring = (if v_120 then zero else caught-fail) in
                                                    {882}let x_43: bitstring = (if v_120 then (l_40,h_39) else caught-fail) in
                                                    {883}let server_wkh_1: bitstring = (if v_120 then catch-fail(hmac(@7_tls_h,server_hts_1,x_43)) else caught-fail) in
                                                    {884}let v_121: bool = not-caught-fail(server_wkh_1) in
                                                    {885}let l_41: label = (if v_121 then tls13_finished else caught-fail) in
                                                    {886}let h_40: bitstring = (if v_121 then zero else caught-fail) in
                                                    {887}let x_44: bitstring = (if v_121 then (l_41,h_40) else caught-fail) in
                                                    {888}let client_fk_1: bitstring = (if v_121 then catch-fail(hmac(@7_tls_h,client_hts_1,x_44)) else caught-fail) in
                                                    {889}let v_122: bool = not-caught-fail(client_fk_1) in
                                                    {890}let l_42: label = (if v_122 then tls13_finished else caught-fail) in
                                                    {891}let h_41: bitstring = (if v_122 then zero else caught-fail) in
                                                    {892}let x_45: bitstring = (if v_122 then (l_42,h_41) else caught-fail) in
                                                    {893}let server_fk_1: bitstring = (if v_122 then catch-fail(hmac(@7_tls_h,server_hts_1,x_45)) else caught-fail) in
                                                    {894}let v_123: bool = not-caught-fail(server_fk_1) in
                                                    {895}let (master_secret_10: bitstring,chk_8: aead_key,shk_7: aead_key,cfin_8: mac_key,sfin_7: mac_key) = (if v_114 then (if v_115 then (if v_117 then (if v_119 then (if v_120 then (if v_121 then (if v_122 then (if v_123 then (master_secret_9,client_wkh_1,server_wkh_1,client_fk_1,server_fk_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {896}event Client_chk(@7_id_client,chk_8);
                                                    {897}event Client_shk(@7_id_client,shk_7);
                                                    {898}event Client_cfin(@7_id_client,cfin_8);
                                                    {899}event Client_sfin(@7_id_client,sfin_7);
                                                    {900}in(io, enc_ee_msg: bitstring);
                                                    {901}let ee_msg_1: msg = aead_dec(@7_tls_a,shk_7,0,zero,enc_ee_msg) in
                                                    {902}let EE(ech_ee: echExt,extra_ee: extraExt) = ee_msg_1 in
                                                    {903}let cur_log2_6: bitstring = (cur_log2_5,ee_msg_1) in
                                                    {904}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr',sr_9,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_15,safe_psk_4,@7_comp_psk,master_secret_10,chk_8,0,shk_7,1,cfin_8,sfin_7,cur_log2_6)))
                                                )
                                                else
                                                    {905}out(io, illegal_parameter)
                                            )
                                            else
                                                {906}out(io, illegal_parameter)
                                    )
                                    else
                                        {907}out(io, unexpected_message)
                                )
                                else
                                    {1060}get pre_shared_keys(c_dom'_2: domain,=s_dom_12,=@7_tls_h,id_8: identityPsk,psk_16: preSharedKey,idP_4: idProc,is_safe_3: bool) in
                                    {908}event Selected_one_time_used_psk(@7_id_client,psk_16,is_safe_3);
                                    {909}event Selected_psk(c_dom_5,c_dom'_2,idP_4,is_safe_3);
                                    {910}event Selected_psk_no_missmatch(@7_id_client,s_dom_12,@7_tls_h,psk_16,id_8);
                                    {911}event Selected_psk_with_ID(c_dom_5,c_dom'_2,id_8,idP_4,is_safe_3);
                                    {912}let v_124: bitstring = (id_8,psk_16,is_safe_3) in
                                    {913}let v_125: bool = success?(1-proj-3-tuple(v_124)) in
                                    {914}let is_safe_4: bool = (if v_125 then 3-proj-3-tuple(v_124) else caught-fail) in
                                    {915}let psk_17: preSharedKey = (if v_125 then 2-proj-3-tuple(v_124) else caught-fail) in
                                    {916}let id_9: identityPsk = (if v_125 then 1-proj-3-tuple(v_124) else caught-fail) in
                                    {917}let offer_6: params = (if v_125 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_12),ech_ext_3,extra_3,trunc_client_psk_ext(id_9)) else caught-fail) in
                                    {918}let cur_log'_4: bitstring = (if v_125 then (cur_log3_2,CH(cr_11,offer_6)) else caught-fail) in
                                    {919}let s_14: bitstring = (if v_125 then zero else caught-fail) in
                                    {920}let k_10: bitstring = (if v_125 then catch-fail(psk2b(psk_17)) else caught-fail) in
                                    {921}let v_126: bool = not-caught-fail(k_10) in
                                    {922}let early_secret_9: bitstring = (if v_125 then catch-fail((if v_126 then hmac(@7_tls_h,s_14,k_10) else fail-any)) else caught-fail) in
                                    {923}let v_127: bool = not-caught-fail(early_secret_9) in
                                    {924}let l_43: label = (if v_127 then tls13_ext_res_binder else caught-fail) in
                                    {925}let m_10: bitstring = (if v_127 then zero else caught-fail) in
                                    {926}let h_42: bitstring = (if v_127 then catch-fail(hash(@7_tls_h,m_10)) else caught-fail) in
                                    {927}let v_128: bool = not-caught-fail(h_42) in
                                    {928}let x_46: bitstring = (if v_128 then (l_43,h_42) else caught-fail) in
                                    {929}let binder_key_6: bitstring = (if v_127 then catch-fail((if v_128 then hmac(@7_tls_h,early_secret_9,x_46) else fail-any)) else caught-fail) in
                                    {930}let v_129: bool = not-caught-fail(binder_key_6) in
                                    {931}let v_130: bitstring = (if v_125 then catch-fail((if v_127 then (if v_129 then (early_secret_9,binder_key_6) else fail-any) else fail-any)) else caught-fail) in
                                    {932}let v_131: bool = (not-caught-fail(v_130) && success?(1-proj-2-tuple(v_130))) in
                                    {933}let kb_6: mac_key = (if v_131 then 2-proj-2-tuple(v_130) else caught-fail) in
                                    {934}let es_7: bitstring = (if v_131 then 1-proj-2-tuple(v_130) else caught-fail) in
                                    {935}let binders_3: bitstring = (if v_131 then catch-fail(hmac(@7_tls_h,kb_6,cur_log'_4)) else caught-fail) in
                                    {936}let v_132: bool = not-caught-fail(binders_3) in
                                    {937}let v_133: bitstring = catch-fail((if v_125 then (if v_131 then (if v_132 then (client_psk_ext(id_9,binders_3),(psk_17,id_9,es_7,is_safe_4)) else fail-any) else fail-any) else fail-any)) in
                                    {938}let v_134: bool = (not-caught-fail(v_133) && success?(1-proj-2-tuple(v_133))) in
                                    {939}let psk_data_3: bitstring = (if v_134 then 2-proj-2-tuple(v_133) else caught-fail) in
                                    {940}let psk_ext_5: preSharedKeyExt = (if v_134 then 1-proj-2-tuple(v_133) else caught-fail) in
                                    {941}let offer_7: params = (if v_134 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_5) else caught-fail) in
                                    {942}let (client_hello'_1: msg,cr'_1: bytes32,kex_data'_1: bitstring,psk_data'_1: bitstring) = (if v_134 then (CH(cr_11,offer_7),cr_11,kex_data_2,psk_data_3) else fail-any) in
                                    {943}event ClientOffersAead(cr'_1,@7_tls_a);
                                    {944}event ClientOffersHash(cr'_1,@7_tls_h);
                                    {945}event ClientOffersGroup(cr'_1,@7_tls_g);
                                    {946}out(io, client_hello'_1);
                                    {947}let cur_log4_1: bitstring = (cur_log3_2,client_hello'_1) in
                                    {948}in(io, server_hello'_1: msg);
                                    {949}let SH(sr'_1: bytes32,mode'_1: params) = server_hello'_1 in
                                    (
                                        {950}if (sr'_1 = B32(HRR24,HRR8)) then
                                            {951}out(io, unexpected_message)
                                        else
                                            {952}let (x_47: bitstring,g_1: group) = kex_data'_1 in
                                            {953}let (psk_offer_1: preSharedKey,id_offer_1: identityPsk,es_offer_1: bitstring,is_safe_offer_1: bool) = psk_data'_1 in
                                            {954}event Client_PSKOffer(@7_id_client,psk_offer_1,id_offer_1,is_safe_offer_1);
                                            {955}event Client_Rand_client(@7_id_client,cr'_1);
                                            {956}event Client_DH_client(@7_id_client,dh_pub(g_1,x_47));
                                            {957}event Client_server_domain(@7_id_client,s_dom_12);
                                            {958}let SH(sr_10: bytes32,mode_2: params) = server_hello'_1 in
                                            {959}event Client_Rand_server(@7_id_client,sr_10);
                                            {960}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_1,gy_2: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_6: preSharedKeyExt) = mode_2 in
                                            (
                                                {961}let cur_log2_7: bitstring = (cur_log4_1,server_hello'_1) in
                                                {962}event Client_DH_server(@7_id_client,gy_2);
                                                {963}let v_135: bool = (psk_ext_6 = empty_psk_ext) in
                                                {964}let psk_18: preSharedKey = (if v_135 then NoPsk else caught-fail) in
                                                {965}let s_15: bitstring = (if v_135 then zero else caught-fail) in
                                                {966}let k_11: bitstring = (if v_135 then catch-fail(psk2b(psk_18)) else caught-fail) in
                                                {967}let v_136: bool = not-caught-fail(k_11) in
                                                {968}let early_secret_10: bitstring = (if v_135 then catch-fail((if v_136 then hmac(@7_tls_h,s_15,k_11) else fail-any)) else caught-fail) in
                                                {969}let v_137: bool = not-caught-fail(early_secret_10) in
                                                {970}let l_44: label = (if v_137 then tls13_ext_res_binder else caught-fail) in
                                                {971}let m_11: bitstring = (if v_137 then zero else caught-fail) in
                                                {972}let h_43: bitstring = (if v_137 then catch-fail(hash(@7_tls_h,m_11)) else caught-fail) in
                                                {973}let v_138: bool = not-caught-fail(h_43) in
                                                {974}let x_48: bitstring = (if v_138 then (l_44,h_43) else caught-fail) in
                                                {975}let binder_key_7: bitstring = (if v_137 then catch-fail((if v_138 then hmac(@7_tls_h,early_secret_10,x_48) else fail-any)) else caught-fail) in
                                                {976}let v_139: bool = not-caught-fail(binder_key_7) in
                                                {977}let v_140: bitstring = (if v_135 then catch-fail((if v_137 then (if v_139 then (early_secret_10,binder_key_7) else fail-any) else fail-any)) else caught-fail) in
                                                {978}let v_141: bool = (not-caught-fail(v_140) && success?(1-proj-2-tuple(v_140))) in
                                                {979}let kb_7: mac_key = (if v_141 then 2-proj-2-tuple(v_140) else caught-fail) in
                                                {980}let es_8: bitstring = (if v_141 then 1-proj-2-tuple(v_140) else caught-fail) in
                                                {981}let v_142: bitstring = (if not(v_135) then catch-fail(psk_data'_1) else caught-fail) in
                                                {982}let v_143: bool = (not-caught-fail(v_142) && success?(1-proj-4-tuple(v_142))) in
                                                {983}let is_safe_5: bool = (if v_143 then 4-proj-4-tuple(v_142) else caught-fail) in
                                                {984}let es_9: bitstring = (if v_143 then 3-proj-4-tuple(v_142) else caught-fail) in
                                                {985}let id_10: identityPsk = (if v_143 then 2-proj-4-tuple(v_142) else caught-fail) in
                                                {986}let psk_19: preSharedKey = (if v_143 then 1-proj-4-tuple(v_142) else caught-fail) in
                                                {987}let (psk_20: preSharedKey,early_secret_11: bitstring,valid_1: bool,safe_psk_5: bool) = (if v_135 then (if v_141 then (NoPsk,es_8,true,false) else fail-any) else (if v_143 then (psk_19,es_9,((psk_19 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_6)),is_safe_5) else fail-any)) in
                                                {988}event Client_PSKChoosen(@7_id_client,psk_20,safe_psk_5);
                                                {989}if valid_1 then
                                                (
                                                    {990}let gxy_3: element = catch-fail(dh_decap_fun(g_1,gy_2,x_47)) in
                                                    {991}let v_144: bool = not-caught-fail(gxy_3) in
                                                    {992}new s_16[]: seed;
                                                    {993}let gxy_4: element = (if v_144 then gxy_3 else dh_f(s_16)) in
                                                    {994}event Client_DH_gxy(@7_id_client,gxy_4);
                                                    {995}let l_45: label = tls13_derived in
                                                    {996}let m_12: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {997}let v_145: bool = not-caught-fail(m_12) in
                                                    {998}let h_44: bitstring = (if v_145 then catch-fail(hash(@7_tls_h,m_12)) else caught-fail) in
                                                    {999}let v_146: bool = not-caught-fail(h_44) in
                                                    {1000}let x_49: bitstring = (if v_146 then (l_45,h_44) else caught-fail) in
                                                    {1001}let extra_6: bitstring = catch-fail((if v_145 then (if v_146 then hmac(@7_tls_h,early_secret_11,x_49) else fail-any) else fail-any)) in
                                                    {1002}let v_147: bool = not-caught-fail(extra_6) in
                                                    {1003}let handshake_secret_2: bitstring = (if v_147 then hmac(@7_tls_h,extra_6,gxy_4) else fail-any) in
                                                    {1004}let l_46: label = tls13_derived in
                                                    {1005}let m_13: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1006}let v_148: bool = not-caught-fail(m_13) in
                                                    {1007}let h_45: bitstring = (if v_148 then catch-fail(hash(@7_tls_h,m_13)) else caught-fail) in
                                                    {1008}let v_149: bool = not-caught-fail(h_45) in
                                                    {1009}let x_50: bitstring = (if v_149 then (l_46,h_45) else caught-fail) in
                                                    {1010}let extra_7: bitstring = catch-fail((if v_148 then (if v_149 then hmac(@7_tls_h,handshake_secret_2,x_50) else fail-any) else fail-any)) in
                                                    {1011}let v_150: bool = not-caught-fail(extra_7) in
                                                    {1012}let k_12: bitstring = (if v_150 then zero else caught-fail) in
                                                    {1013}let master_secret_11: bitstring = (if v_150 then catch-fail(hmac(@7_tls_h,handshake_secret_2,k_12)) else caught-fail) in
                                                    {1014}let v_151: bool = not-caught-fail(master_secret_11) in
                                                    {1015}let l_47: label = (if v_151 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {1016}let h_46: bitstring = (if v_151 then catch-fail(hash(@7_tls_h,cur_log2_7)) else caught-fail) in
                                                    {1017}let v_152: bool = not-caught-fail(h_46) in
                                                    {1018}let x_51: bitstring = (if v_152 then (l_47,h_46) else caught-fail) in
                                                    {1019}let client_hts_2: bitstring = (if v_151 then catch-fail((if v_152 then hmac(@7_tls_h,handshake_secret_2,x_51) else fail-any)) else caught-fail) in
                                                    {1020}let v_153: bool = not-caught-fail(client_hts_2) in
                                                    {1021}let l_48: label = (if v_153 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {1022}let h_47: bitstring = (if v_153 then catch-fail(hash(@7_tls_h,cur_log2_7)) else caught-fail) in
                                                    {1023}let v_154: bool = not-caught-fail(h_47) in
                                                    {1024}let x_52: bitstring = (if v_154 then (l_48,h_47) else caught-fail) in
                                                    {1025}let server_hts_2: bitstring = (if v_153 then catch-fail((if v_154 then hmac(@7_tls_h,handshake_secret_2,x_52) else fail-any)) else caught-fail) in
                                                    {1026}let v_155: bool = not-caught-fail(server_hts_2) in
                                                    {1027}let l_49: label = (if v_155 then tls13_key else caught-fail) in
                                                    {1028}let h_48: bitstring = (if v_155 then zero else caught-fail) in
                                                    {1029}let x_53: bitstring = (if v_155 then (l_49,h_48) else caught-fail) in
                                                    {1030}let client_wkh_2: bitstring = (if v_155 then catch-fail(hmac(@7_tls_h,client_hts_2,x_53)) else caught-fail) in
                                                    {1031}let v_156: bool = not-caught-fail(client_wkh_2) in
                                                    {1032}let l_50: label = (if v_156 then tls13_key else caught-fail) in
                                                    {1033}let h_49: bitstring = (if v_156 then zero else caught-fail) in
                                                    {1034}let x_54: bitstring = (if v_156 then (l_50,h_49) else caught-fail) in
                                                    {1035}let server_wkh_2: bitstring = (if v_156 then catch-fail(hmac(@7_tls_h,server_hts_2,x_54)) else caught-fail) in
                                                    {1036}let v_157: bool = not-caught-fail(server_wkh_2) in
                                                    {1037}let l_51: label = (if v_157 then tls13_finished else caught-fail) in
                                                    {1038}let h_50: bitstring = (if v_157 then zero else caught-fail) in
                                                    {1039}let x_55: bitstring = (if v_157 then (l_51,h_50) else caught-fail) in
                                                    {1040}let client_fk_2: bitstring = (if v_157 then catch-fail(hmac(@7_tls_h,client_hts_2,x_55)) else caught-fail) in
                                                    {1041}let v_158: bool = not-caught-fail(client_fk_2) in
                                                    {1042}let l_52: label = (if v_158 then tls13_finished else caught-fail) in
                                                    {1043}let h_51: bitstring = (if v_158 then zero else caught-fail) in
                                                    {1044}let x_56: bitstring = (if v_158 then (l_52,h_51) else caught-fail) in
                                                    {1045}let server_fk_2: bitstring = (if v_158 then catch-fail(hmac(@7_tls_h,server_hts_2,x_56)) else caught-fail) in
                                                    {1046}let v_159: bool = not-caught-fail(server_fk_2) in
                                                    {1047}let (master_secret_12: bitstring,chk_9: aead_key,shk_8: aead_key,cfin_9: mac_key,sfin_8: mac_key) = (if v_150 then (if v_151 then (if v_153 then (if v_155 then (if v_156 then (if v_157 then (if v_158 then (if v_159 then (master_secret_11,client_wkh_2,server_wkh_2,client_fk_2,server_fk_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {1048}event Client_chk(@7_id_client,chk_9);
                                                    {1049}event Client_shk(@7_id_client,shk_8);
                                                    {1050}event Client_cfin(@7_id_client,cfin_9);
                                                    {1051}event Client_sfin(@7_id_client,sfin_8);
                                                    {1052}in(io, enc_ee_msg_1: bitstring);
                                                    {1053}let ee_msg_2: msg = aead_dec(@7_tls_a,shk_8,0,zero,enc_ee_msg_1) in
                                                    {1054}let EE(ech_ee_1: echExt,extra_ee_1: extraExt) = ee_msg_2 in
                                                    {1055}let cur_log2_8: bitstring = (cur_log2_7,ee_msg_2) in
                                                    {1056}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_1,sr_10,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_20,safe_psk_5,@7_comp_psk,master_secret_12,chk_9,0,shk_8,1,cfin_9,sfin_8,cur_log2_8)))
                                                )
                                                else
                                                    {1057}out(io, illegal_parameter)
                                            )
                                            else
                                                {1058}out(io, illegal_parameter)
                                    )
                                    else
                                        {1059}out(io, unexpected_message)
                            )
                            else
                                {1061}let psk_21: preSharedKey = NoPsk in
                                {1062}let s_17: bitstring = zero in
                                {1063}let k_13: bitstring = catch-fail(psk2b(psk_21)) in
                                {1064}let v_160: bool = not-caught-fail(k_13) in
                                {1065}let early_secret_12: bitstring = catch-fail((if v_160 then hmac(@7_tls_h,s_17,k_13) else fail-any)) in
                                {1066}let v_161: bool = not-caught-fail(early_secret_12) in
                                {1067}let l_53: label = (if v_161 then tls13_ext_res_binder else caught-fail) in
                                {1068}let m_14: bitstring = (if v_161 then zero else caught-fail) in
                                {1069}let h_52: bitstring = (if v_161 then catch-fail(hash(@7_tls_h,m_14)) else caught-fail) in
                                {1070}let v_162: bool = not-caught-fail(h_52) in
                                {1071}let x_57: bitstring = (if v_162 then (l_53,h_52) else caught-fail) in
                                {1072}let binder_key_8: bitstring = (if v_161 then catch-fail((if v_162 then hmac(@7_tls_h,early_secret_12,x_57) else fail-any)) else caught-fail) in
                                {1073}let v_163: bool = not-caught-fail(binder_key_8) in
                                {1074}let v_164: bitstring = catch-fail((if v_161 then (if v_163 then (early_secret_12,binder_key_8) else fail-any) else fail-any)) in
                                {1075}let v_165: bool = (not-caught-fail(v_164) && success?(1-proj-2-tuple(v_164))) in
                                {1076}let kb_8: mac_key = (if v_165 then 2-proj-2-tuple(v_164) else caught-fail) in
                                {1077}let es_10: bitstring = (if v_165 then 1-proj-2-tuple(v_164) else caught-fail) in
                                {1078}let v_166: bitstring = catch-fail((if v_165 then (empty_psk_ext,(NoPsk,zero,es_10,false)) else fail-any)) in
                                {1079}let v_167: bool = (not-caught-fail(v_166) && success?(1-proj-2-tuple(v_166))) in
                                {1080}let psk_data_4: bitstring = (if v_167 then 2-proj-2-tuple(v_166) else caught-fail) in
                                {1081}let psk_ext_7: preSharedKeyExt = (if v_167 then 1-proj-2-tuple(v_166) else caught-fail) in
                                {1082}let offer_8: params = (if v_167 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_7) else caught-fail) in
                                {1083}let (client_hello'_2: msg,cr'_2: bytes32,kex_data'_2: bitstring,psk_data'_2: bitstring) = (if v_167 then (CH(cr_11,offer_8),cr_11,kex_data_2,psk_data_4) else fail-any) in
                                {1084}event ClientOffersAead(cr'_2,@7_tls_a);
                                {1085}event ClientOffersHash(cr'_2,@7_tls_h);
                                {1086}event ClientOffersGroup(cr'_2,@7_tls_g);
                                {1087}out(io, client_hello'_2);
                                {1088}let cur_log4_2: bitstring = (cur_log3_2,client_hello'_2) in
                                {1089}in(io, server_hello'_2: msg);
                                {1090}let SH(sr'_2: bytes32,mode'_2: params) = server_hello'_2 in
                                (
                                    {1091}if (sr'_2 = B32(HRR24,HRR8)) then
                                        {1092}out(io, unexpected_message)
                                    else
                                        {1093}let (x_58: bitstring,g_2: group) = kex_data'_2 in
                                        {1094}let (psk_offer_2: preSharedKey,id_offer_2: identityPsk,es_offer_2: bitstring,is_safe_offer_2: bool) = psk_data'_2 in
                                        {1095}event Client_PSKOffer(@7_id_client,psk_offer_2,id_offer_2,is_safe_offer_2);
                                        {1096}event Client_Rand_client(@7_id_client,cr'_2);
                                        {1097}event Client_DH_client(@7_id_client,dh_pub(g_2,x_58));
                                        {1098}event Client_server_domain(@7_id_client,s_dom_12);
                                        {1099}let SH(sr_11: bytes32,mode_3: params) = server_hello'_2 in
                                        {1100}event Client_Rand_server(@7_id_client,sr_11);
                                        {1101}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_2,gy_3: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_8: preSharedKeyExt) = mode_3 in
                                        (
                                            {1102}let cur_log2_9: bitstring = (cur_log4_2,server_hello'_2) in
                                            {1103}event Client_DH_server(@7_id_client,gy_3);
                                            {1104}let v_168: bool = (psk_ext_8 = empty_psk_ext) in
                                            {1105}let psk_22: preSharedKey = (if v_168 then NoPsk else caught-fail) in
                                            {1106}let s_18: bitstring = (if v_168 then zero else caught-fail) in
                                            {1107}let k_14: bitstring = (if v_168 then catch-fail(psk2b(psk_22)) else caught-fail) in
                                            {1108}let v_169: bool = not-caught-fail(k_14) in
                                            {1109}let early_secret_13: bitstring = (if v_168 then catch-fail((if v_169 then hmac(@7_tls_h,s_18,k_14) else fail-any)) else caught-fail) in
                                            {1110}let v_170: bool = not-caught-fail(early_secret_13) in
                                            {1111}let l_54: label = (if v_170 then tls13_ext_res_binder else caught-fail) in
                                            {1112}let m_15: bitstring = (if v_170 then zero else caught-fail) in
                                            {1113}let h_53: bitstring = (if v_170 then catch-fail(hash(@7_tls_h,m_15)) else caught-fail) in
                                            {1114}let v_171: bool = not-caught-fail(h_53) in
                                            {1115}let x_59: bitstring = (if v_171 then (l_54,h_53) else caught-fail) in
                                            {1116}let binder_key_9: bitstring = (if v_170 then catch-fail((if v_171 then hmac(@7_tls_h,early_secret_13,x_59) else fail-any)) else caught-fail) in
                                            {1117}let v_172: bool = not-caught-fail(binder_key_9) in
                                            {1118}let v_173: bitstring = (if v_168 then catch-fail((if v_170 then (if v_172 then (early_secret_13,binder_key_9) else fail-any) else fail-any)) else caught-fail) in
                                            {1119}let v_174: bool = (not-caught-fail(v_173) && success?(1-proj-2-tuple(v_173))) in
                                            {1120}let kb_9: mac_key = (if v_174 then 2-proj-2-tuple(v_173) else caught-fail) in
                                            {1121}let es_11: bitstring = (if v_174 then 1-proj-2-tuple(v_173) else caught-fail) in
                                            {1122}let v_175: bitstring = (if not(v_168) then catch-fail(psk_data'_2) else caught-fail) in
                                            {1123}let v_176: bool = (not-caught-fail(v_175) && success?(1-proj-4-tuple(v_175))) in
                                            {1124}let is_safe_6: bool = (if v_176 then 4-proj-4-tuple(v_175) else caught-fail) in
                                            {1125}let es_12: bitstring = (if v_176 then 3-proj-4-tuple(v_175) else caught-fail) in
                                            {1126}let id_11: identityPsk = (if v_176 then 2-proj-4-tuple(v_175) else caught-fail) in
                                            {1127}let psk_23: preSharedKey = (if v_176 then 1-proj-4-tuple(v_175) else caught-fail) in
                                            {1128}let (psk_24: preSharedKey,early_secret_14: bitstring,valid_2: bool,safe_psk_6: bool) = (if v_168 then (if v_174 then (NoPsk,es_11,true,false) else fail-any) else (if v_176 then (psk_23,es_12,((psk_23 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_8)),is_safe_6) else fail-any)) in
                                            {1129}event Client_PSKChoosen(@7_id_client,psk_24,safe_psk_6);
                                            {1130}if valid_2 then
                                            (
                                                {1131}let gxy_5: element = catch-fail(dh_decap_fun(g_2,gy_3,x_58)) in
                                                {1132}let v_177: bool = not-caught-fail(gxy_5) in
                                                {1133}new s_19[]: seed;
                                                {1134}let gxy_6: element = (if v_177 then gxy_5 else dh_f(s_19)) in
                                                {1135}event Client_DH_gxy(@7_id_client,gxy_6);
                                                {1136}let l_55: label = tls13_derived in
                                                {1137}let m_16: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1138}let v_178: bool = not-caught-fail(m_16) in
                                                {1139}let h_54: bitstring = (if v_178 then catch-fail(hash(@7_tls_h,m_16)) else caught-fail) in
                                                {1140}let v_179: bool = not-caught-fail(h_54) in
                                                {1141}let x_60: bitstring = (if v_179 then (l_55,h_54) else caught-fail) in
                                                {1142}let extra_8: bitstring = catch-fail((if v_178 then (if v_179 then hmac(@7_tls_h,early_secret_14,x_60) else fail-any) else fail-any)) in
                                                {1143}let v_180: bool = not-caught-fail(extra_8) in
                                                {1144}let handshake_secret_3: bitstring = (if v_180 then hmac(@7_tls_h,extra_8,gxy_6) else fail-any) in
                                                {1145}let l_56: label = tls13_derived in
                                                {1146}let m_17: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1147}let v_181: bool = not-caught-fail(m_17) in
                                                {1148}let h_55: bitstring = (if v_181 then catch-fail(hash(@7_tls_h,m_17)) else caught-fail) in
                                                {1149}let v_182: bool = not-caught-fail(h_55) in
                                                {1150}let x_61: bitstring = (if v_182 then (l_56,h_55) else caught-fail) in
                                                {1151}let extra_9: bitstring = catch-fail((if v_181 then (if v_182 then hmac(@7_tls_h,handshake_secret_3,x_61) else fail-any) else fail-any)) in
                                                {1152}let v_183: bool = not-caught-fail(extra_9) in
                                                {1153}let k_15: bitstring = (if v_183 then zero else caught-fail) in
                                                {1154}let master_secret_13: bitstring = (if v_183 then catch-fail(hmac(@7_tls_h,handshake_secret_3,k_15)) else caught-fail) in
                                                {1155}let v_184: bool = not-caught-fail(master_secret_13) in
                                                {1156}let l_57: label = (if v_184 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {1157}let h_56: bitstring = (if v_184 then catch-fail(hash(@7_tls_h,cur_log2_9)) else caught-fail) in
                                                {1158}let v_185: bool = not-caught-fail(h_56) in
                                                {1159}let x_62: bitstring = (if v_185 then (l_57,h_56) else caught-fail) in
                                                {1160}let client_hts_3: bitstring = (if v_184 then catch-fail((if v_185 then hmac(@7_tls_h,handshake_secret_3,x_62) else fail-any)) else caught-fail) in
                                                {1161}let v_186: bool = not-caught-fail(client_hts_3) in
                                                {1162}let l_58: label = (if v_186 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {1163}let h_57: bitstring = (if v_186 then catch-fail(hash(@7_tls_h,cur_log2_9)) else caught-fail) in
                                                {1164}let v_187: bool = not-caught-fail(h_57) in
                                                {1165}let x_63: bitstring = (if v_187 then (l_58,h_57) else caught-fail) in
                                                {1166}let server_hts_3: bitstring = (if v_186 then catch-fail((if v_187 then hmac(@7_tls_h,handshake_secret_3,x_63) else fail-any)) else caught-fail) in
                                                {1167}let v_188: bool = not-caught-fail(server_hts_3) in
                                                {1168}let l_59: label = (if v_188 then tls13_key else caught-fail) in
                                                {1169}let h_58: bitstring = (if v_188 then zero else caught-fail) in
                                                {1170}let x_64: bitstring = (if v_188 then (l_59,h_58) else caught-fail) in
                                                {1171}let client_wkh_3: bitstring = (if v_188 then catch-fail(hmac(@7_tls_h,client_hts_3,x_64)) else caught-fail) in
                                                {1172}let v_189: bool = not-caught-fail(client_wkh_3) in
                                                {1173}let l_60: label = (if v_189 then tls13_key else caught-fail) in
                                                {1174}let h_59: bitstring = (if v_189 then zero else caught-fail) in
                                                {1175}let x_65: bitstring = (if v_189 then (l_60,h_59) else caught-fail) in
                                                {1176}let server_wkh_3: bitstring = (if v_189 then catch-fail(hmac(@7_tls_h,server_hts_3,x_65)) else caught-fail) in
                                                {1177}let v_190: bool = not-caught-fail(server_wkh_3) in
                                                {1178}let l_61: label = (if v_190 then tls13_finished else caught-fail) in
                                                {1179}let h_60: bitstring = (if v_190 then zero else caught-fail) in
                                                {1180}let x_66: bitstring = (if v_190 then (l_61,h_60) else caught-fail) in
                                                {1181}let client_fk_3: bitstring = (if v_190 then catch-fail(hmac(@7_tls_h,client_hts_3,x_66)) else caught-fail) in
                                                {1182}let v_191: bool = not-caught-fail(client_fk_3) in
                                                {1183}let l_62: label = (if v_191 then tls13_finished else caught-fail) in
                                                {1184}let h_61: bitstring = (if v_191 then zero else caught-fail) in
                                                {1185}let x_67: bitstring = (if v_191 then (l_62,h_61) else caught-fail) in
                                                {1186}let server_fk_3: bitstring = (if v_191 then catch-fail(hmac(@7_tls_h,server_hts_3,x_67)) else caught-fail) in
                                                {1187}let v_192: bool = not-caught-fail(server_fk_3) in
                                                {1188}let (master_secret_14: bitstring,chk_10: aead_key,shk_9: aead_key,cfin_10: mac_key,sfin_9: mac_key) = (if v_183 then (if v_184 then (if v_186 then (if v_188 then (if v_189 then (if v_190 then (if v_191 then (if v_192 then (master_secret_13,client_wkh_3,server_wkh_3,client_fk_3,server_fk_3) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {1189}event Client_chk(@7_id_client,chk_10);
                                                {1190}event Client_shk(@7_id_client,shk_9);
                                                {1191}event Client_cfin(@7_id_client,cfin_10);
                                                {1192}event Client_sfin(@7_id_client,sfin_9);
                                                {1193}in(io, enc_ee_msg_2: bitstring);
                                                {1194}let ee_msg_3: msg = aead_dec(@7_tls_a,shk_9,0,zero,enc_ee_msg_2) in
                                                {1195}let EE(ech_ee_2: echExt,extra_ee_2: extraExt) = ee_msg_3 in
                                                {1196}let cur_log2_10: bitstring = (cur_log2_9,ee_msg_3) in
                                                {1197}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_2,sr_11,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_24,safe_psk_6,@7_comp_psk,master_secret_14,chk_10,0,shk_9,1,cfin_10,sfin_9,cur_log2_10)))
                                            )
                                            else
                                                {1198}out(io, illegal_parameter)
                                        )
                                        else
                                            {1199}out(io, illegal_parameter)
                                )
                                else
                                    {1200}out(io, unexpected_message)
                        )
                        else
                            {1201}out(io, illegal_parameter)
                    )
                    else
                        {1202}if send_kex then
                        (
                            {1203}let (x_68: bitstring,g_3: group) = kex_data_1 in
                            {1204}let (psk_offer_3: preSharedKey,id_offer_3: identityPsk,es_offer_3: bitstring,is_safe_offer_3: bool) = psk_data_1 in
                            {1205}event Client_PSKOffer(@7_id_client,psk_offer_3,id_offer_3,is_safe_offer_3);
                            {1206}event Client_Rand_client(@7_id_client,cr_10);
                            {1207}event Client_DH_client(@7_id_client,dh_pub(g_3,x_68));
                            {1208}event Client_server_domain(@7_id_client,s_dom_12);
                            {1209}let SH(sr_12: bytes32,mode_4: params) = server_hello_1 in
                            {1210}event Client_Rand_server(@7_id_client,sr_12);
                            {1211}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_3,gy_4: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_9: preSharedKeyExt) = mode_4 in
                            (
                                {1212}let cur_log2_11: bitstring = (cur_log2_4,server_hello_1) in
                                {1213}event Client_DH_server(@7_id_client,gy_4);
                                {1214}let v_193: bool = (psk_ext_9 = empty_psk_ext) in
                                {1215}let psk_25: preSharedKey = (if v_193 then NoPsk else caught-fail) in
                                {1216}let s_20: bitstring = (if v_193 then zero else caught-fail) in
                                {1217}let k_16: bitstring = (if v_193 then catch-fail(psk2b(psk_25)) else caught-fail) in
                                {1218}let v_194: bool = not-caught-fail(k_16) in
                                {1219}let early_secret_15: bitstring = (if v_193 then catch-fail((if v_194 then hmac(@7_tls_h,s_20,k_16) else fail-any)) else caught-fail) in
                                {1220}let v_195: bool = not-caught-fail(early_secret_15) in
                                {1221}let l_63: label = (if v_195 then tls13_ext_res_binder else caught-fail) in
                                {1222}let m_18: bitstring = (if v_195 then zero else caught-fail) in
                                {1223}let h_62: bitstring = (if v_195 then catch-fail(hash(@7_tls_h,m_18)) else caught-fail) in
                                {1224}let v_196: bool = not-caught-fail(h_62) in
                                {1225}let x_69: bitstring = (if v_196 then (l_63,h_62) else caught-fail) in
                                {1226}let binder_key_10: bitstring = (if v_195 then catch-fail((if v_196 then hmac(@7_tls_h,early_secret_15,x_69) else fail-any)) else caught-fail) in
                                {1227}let v_197: bool = not-caught-fail(binder_key_10) in
                                {1228}let v_198: bitstring = (if v_193 then catch-fail((if v_195 then (if v_197 then (early_secret_15,binder_key_10) else fail-any) else fail-any)) else caught-fail) in
                                {1229}let v_199: bool = (not-caught-fail(v_198) && success?(1-proj-2-tuple(v_198))) in
                                {1230}let kb_10: mac_key = (if v_199 then 2-proj-2-tuple(v_198) else caught-fail) in
                                {1231}let es_13: bitstring = (if v_199 then 1-proj-2-tuple(v_198) else caught-fail) in
                                {1232}let v_200: bitstring = (if not(v_193) then catch-fail(psk_data_1) else caught-fail) in
                                {1233}let v_201: bool = (not-caught-fail(v_200) && success?(1-proj-4-tuple(v_200))) in
                                {1234}let is_safe_7: bool = (if v_201 then 4-proj-4-tuple(v_200) else caught-fail) in
                                {1235}let es_14: bitstring = (if v_201 then 3-proj-4-tuple(v_200) else caught-fail) in
                                {1236}let id_12: identityPsk = (if v_201 then 2-proj-4-tuple(v_200) else caught-fail) in
                                {1237}let psk_26: preSharedKey = (if v_201 then 1-proj-4-tuple(v_200) else caught-fail) in
                                {1238}let (psk_27: preSharedKey,early_secret_16: bitstring,valid_3: bool,safe_psk_7: bool) = (if v_193 then (if v_199 then (NoPsk,es_13,true,false) else fail-any) else (if v_201 then (psk_26,es_14,((psk_26 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_9)),is_safe_7) else fail-any)) in
                                {1239}event Client_PSKChoosen(@7_id_client,psk_27,safe_psk_7);
                                {1240}if valid_3 then
                                (
                                    {1241}let gxy_7: element = catch-fail(dh_decap_fun(g_3,gy_4,x_68)) in
                                    {1242}let v_202: bool = not-caught-fail(gxy_7) in
                                    {1243}new s_21[]: seed;
                                    {1244}let gxy_8: element = (if v_202 then gxy_7 else dh_f(s_21)) in
                                    {1245}event Client_DH_gxy(@7_id_client,gxy_8);
                                    {1246}let l_64: label = tls13_derived in
                                    {1247}let m_19: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1248}let v_203: bool = not-caught-fail(m_19) in
                                    {1249}let h_63: bitstring = (if v_203 then catch-fail(hash(@7_tls_h,m_19)) else caught-fail) in
                                    {1250}let v_204: bool = not-caught-fail(h_63) in
                                    {1251}let x_70: bitstring = (if v_204 then (l_64,h_63) else caught-fail) in
                                    {1252}let extra_10: bitstring = catch-fail((if v_203 then (if v_204 then hmac(@7_tls_h,early_secret_16,x_70) else fail-any) else fail-any)) in
                                    {1253}let v_205: bool = not-caught-fail(extra_10) in
                                    {1254}let handshake_secret_4: bitstring = (if v_205 then hmac(@7_tls_h,extra_10,gxy_8) else fail-any) in
                                    {1255}let l_65: label = tls13_derived in
                                    {1256}let m_20: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1257}let v_206: bool = not-caught-fail(m_20) in
                                    {1258}let h_64: bitstring = (if v_206 then catch-fail(hash(@7_tls_h,m_20)) else caught-fail) in
                                    {1259}let v_207: bool = not-caught-fail(h_64) in
                                    {1260}let x_71: bitstring = (if v_207 then (l_65,h_64) else caught-fail) in
                                    {1261}let extra_11: bitstring = catch-fail((if v_206 then (if v_207 then hmac(@7_tls_h,handshake_secret_4,x_71) else fail-any) else fail-any)) in
                                    {1262}let v_208: bool = not-caught-fail(extra_11) in
                                    {1263}let k_17: bitstring = (if v_208 then zero else caught-fail) in
                                    {1264}let master_secret_15: bitstring = (if v_208 then catch-fail(hmac(@7_tls_h,handshake_secret_4,k_17)) else caught-fail) in
                                    {1265}let v_209: bool = not-caught-fail(master_secret_15) in
                                    {1266}let l_66: label = (if v_209 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {1267}let h_65: bitstring = (if v_209 then catch-fail(hash(@7_tls_h,cur_log2_11)) else caught-fail) in
                                    {1268}let v_210: bool = not-caught-fail(h_65) in
                                    {1269}let x_72: bitstring = (if v_210 then (l_66,h_65) else caught-fail) in
                                    {1270}let client_hts_4: bitstring = (if v_209 then catch-fail((if v_210 then hmac(@7_tls_h,handshake_secret_4,x_72) else fail-any)) else caught-fail) in
                                    {1271}let v_211: bool = not-caught-fail(client_hts_4) in
                                    {1272}let l_67: label = (if v_211 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {1273}let h_66: bitstring = (if v_211 then catch-fail(hash(@7_tls_h,cur_log2_11)) else caught-fail) in
                                    {1274}let v_212: bool = not-caught-fail(h_66) in
                                    {1275}let x_73: bitstring = (if v_212 then (l_67,h_66) else caught-fail) in
                                    {1276}let server_hts_4: bitstring = (if v_211 then catch-fail((if v_212 then hmac(@7_tls_h,handshake_secret_4,x_73) else fail-any)) else caught-fail) in
                                    {1277}let v_213: bool = not-caught-fail(server_hts_4) in
                                    {1278}let l_68: label = (if v_213 then tls13_key else caught-fail) in
                                    {1279}let h_67: bitstring = (if v_213 then zero else caught-fail) in
                                    {1280}let x_74: bitstring = (if v_213 then (l_68,h_67) else caught-fail) in
                                    {1281}let client_wkh_4: bitstring = (if v_213 then catch-fail(hmac(@7_tls_h,client_hts_4,x_74)) else caught-fail) in
                                    {1282}let v_214: bool = not-caught-fail(client_wkh_4) in
                                    {1283}let l_69: label = (if v_214 then tls13_key else caught-fail) in
                                    {1284}let h_68: bitstring = (if v_214 then zero else caught-fail) in
                                    {1285}let x_75: bitstring = (if v_214 then (l_69,h_68) else caught-fail) in
                                    {1286}let server_wkh_4: bitstring = (if v_214 then catch-fail(hmac(@7_tls_h,server_hts_4,x_75)) else caught-fail) in
                                    {1287}let v_215: bool = not-caught-fail(server_wkh_4) in
                                    {1288}let l_70: label = (if v_215 then tls13_finished else caught-fail) in
                                    {1289}let h_69: bitstring = (if v_215 then zero else caught-fail) in
                                    {1290}let x_76: bitstring = (if v_215 then (l_70,h_69) else caught-fail) in
                                    {1291}let client_fk_4: bitstring = (if v_215 then catch-fail(hmac(@7_tls_h,client_hts_4,x_76)) else caught-fail) in
                                    {1292}let v_216: bool = not-caught-fail(client_fk_4) in
                                    {1293}let l_71: label = (if v_216 then tls13_finished else caught-fail) in
                                    {1294}let h_70: bitstring = (if v_216 then zero else caught-fail) in
                                    {1295}let x_77: bitstring = (if v_216 then (l_71,h_70) else caught-fail) in
                                    {1296}let server_fk_4: bitstring = (if v_216 then catch-fail(hmac(@7_tls_h,server_hts_4,x_77)) else caught-fail) in
                                    {1297}let v_217: bool = not-caught-fail(server_fk_4) in
                                    {1298}let (master_secret_16: bitstring,chk_11: aead_key,shk_10: aead_key,cfin_11: mac_key,sfin_10: mac_key) = (if v_208 then (if v_209 then (if v_211 then (if v_213 then (if v_214 then (if v_215 then (if v_216 then (if v_217 then (master_secret_15,client_wkh_4,server_wkh_4,client_fk_4,server_fk_4) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {1299}event Client_chk(@7_id_client,chk_11);
                                    {1300}event Client_shk(@7_id_client,shk_10);
                                    {1301}event Client_cfin(@7_id_client,cfin_11);
                                    {1302}event Client_sfin(@7_id_client,sfin_10);
                                    {1303}in(io, enc_ee_msg_3: bitstring);
                                    {1304}let ee_msg_4: msg = aead_dec(@7_tls_a,shk_10,0,zero,enc_ee_msg_3) in
                                    {1305}let EE(ech_ee_3: echExt,extra_ee_3: extraExt) = ee_msg_4 in
                                    {1306}let cur_log2_12: bitstring = (cur_log2_11,ee_msg_4) in
                                    {1307}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr_10,sr_12,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_27,safe_psk_7,@7_comp_psk,master_secret_16,chk_11,0,shk_10,1,cfin_11,sfin_10,cur_log2_12)))
                                )
                                else
                                    {1308}out(io, illegal_parameter)
                            )
                            else
                                {1309}out(io, illegal_parameter)
                        )
                        else
                            {1310}out(io, illegal_parameter)
                )
                else
                    {1311}out(io, unexpected_message)
            )
        )
        else
            {1951}get pre_shared_keys(c_dom'_3: domain,=s_dom_12,=@7_tls_h,id_13: identityPsk,psk_28: preSharedKey,idP_5: idProc,is_safe_8: bool) in
            {1312}event Selected_one_time_used_psk(@7_id_client,psk_28,is_safe_8);
            {1313}event Selected_psk(c_dom_5,c_dom'_3,idP_5,is_safe_8);
            {1314}event Selected_psk_no_missmatch(@7_id_client,s_dom_12,@7_tls_h,psk_28,id_13);
            {1315}event Selected_psk_with_ID(c_dom_5,c_dom'_3,id_13,idP_5,is_safe_8);
            {1316}let v_218: bitstring = (id_13,psk_28,is_safe_8) in
            {1317}let v_219: bool = success?(1-proj-3-tuple(v_218)) in
            {1318}let is_safe_9: bool = (if v_219 then 3-proj-3-tuple(v_218) else caught-fail) in
            {1319}let psk_29: preSharedKey = (if v_219 then 2-proj-3-tuple(v_218) else caught-fail) in
            {1320}let id_14: identityPsk = (if v_219 then 1-proj-3-tuple(v_218) else caught-fail) in
            {1321}let offer_9: params = (if v_219 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_12),ech_ext_2,extra_2,trunc_client_psk_ext(id_14)) else caught-fail) in
            {1322}let cur_log'_5: bitstring = (if v_219 then (cur_log_8,CH(cr_9,offer_9)) else caught-fail) in
            {1323}let s_22: bitstring = (if v_219 then zero else caught-fail) in
            {1324}let k_18: bitstring = (if v_219 then catch-fail(psk2b(psk_29)) else caught-fail) in
            {1325}let v_220: bool = not-caught-fail(k_18) in
            {1326}let early_secret_17: bitstring = (if v_219 then catch-fail((if v_220 then hmac(@7_tls_h,s_22,k_18) else fail-any)) else caught-fail) in
            {1327}let v_221: bool = not-caught-fail(early_secret_17) in
            {1328}let l_72: label = (if v_221 then tls13_ext_res_binder else caught-fail) in
            {1329}let m_21: bitstring = (if v_221 then zero else caught-fail) in
            {1330}let h_71: bitstring = (if v_221 then catch-fail(hash(@7_tls_h,m_21)) else caught-fail) in
            {1331}let v_222: bool = not-caught-fail(h_71) in
            {1332}let x_78: bitstring = (if v_222 then (l_72,h_71) else caught-fail) in
            {1333}let binder_key_11: bitstring = (if v_221 then catch-fail((if v_222 then hmac(@7_tls_h,early_secret_17,x_78) else fail-any)) else caught-fail) in
            {1334}let v_223: bool = not-caught-fail(binder_key_11) in
            {1335}let v_224: bitstring = (if v_219 then catch-fail((if v_221 then (if v_223 then (early_secret_17,binder_key_11) else fail-any) else fail-any)) else caught-fail) in
            {1336}let v_225: bool = (not-caught-fail(v_224) && success?(1-proj-2-tuple(v_224))) in
            {1337}let kb_11: mac_key = (if v_225 then 2-proj-2-tuple(v_224) else caught-fail) in
            {1338}let es_15: bitstring = (if v_225 then 1-proj-2-tuple(v_224) else caught-fail) in
            {1339}let binders_4: bitstring = (if v_225 then catch-fail(hmac(@7_tls_h,kb_11,cur_log'_5)) else caught-fail) in
            {1340}let v_226: bool = not-caught-fail(binders_4) in
            {1341}let v_227: bitstring = catch-fail((if v_219 then (if v_225 then (if v_226 then (client_psk_ext(id_14,binders_4),(psk_29,id_14,es_15,is_safe_9)) else fail-any) else fail-any) else fail-any)) in
            {1342}let v_228: bool = (not-caught-fail(v_227) && success?(1-proj-2-tuple(v_227))) in
            {1343}let psk_data_5: bitstring = (if v_228 then 2-proj-2-tuple(v_227) else caught-fail) in
            {1344}let psk_ext_10: preSharedKeyExt = (if v_228 then 1-proj-2-tuple(v_227) else caught-fail) in
            {1345}let offer_10: params = (if v_228 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_10) else caught-fail) in
            {1346}let (client_hello_3: msg,cr_12: bytes32,kex_data_3: bitstring,psk_data_6: bitstring) = (if v_228 then (CH(cr_9,offer_10),cr_9,kex_data,psk_data_5) else fail-any) in
            {1347}event ClientOffersAead(cr_12,@7_tls_a);
            {1348}event ClientOffersHash(cr_12,@7_tls_h);
            {1349}event ClientOffersGroup(cr_12,@7_tls_g);
            {1350}out(io, client_hello_3);
            {1351}let cur_log2_13: bitstring = (cur_log_8,client_hello_3) in
            {1352}let (psk_30: preSharedKey,id_15: identityPsk,es_16: bitstring,safe_psk_8: bool) = psk_data_6 in
            (
                {1353}if (false && (psk_30 ≠ NoPsk)) then
                {1354}let client_hello_4: bitstring = (zero,client_hello_3) in
                {1355}let l_73: label = tls13_client_early_traffic_secret in
                {1356}let h_72: bitstring = catch-fail(hash(@7_tls_h,client_hello_4)) in
                {1357}let v_229: bool = not-caught-fail(h_72) in
                {1358}let x_79: bitstring = (if v_229 then (l_73,h_72) else caught-fail) in
                {1359}let atsc0_2: bitstring = catch-fail((if v_229 then hmac(@7_tls_h,es_16,x_79) else fail-any)) in
                {1360}let v_230: bool = not-caught-fail(atsc0_2) in
                {1361}let l_74: label = (if v_230 then tls13_key else caught-fail) in
                {1362}let h_73: bitstring = (if v_230 then zero else caught-fail) in
                {1363}let x_80: bitstring = (if v_230 then (l_74,h_73) else caught-fail) in
                {1364}let kc0_2: bitstring = (if v_230 then catch-fail(hmac(@7_tls_h,atsc0_2,x_80)) else caught-fail) in
                {1365}let v_231: bool = not-caught-fail(kc0_2) in
                {1366}let l_75: label = (if v_231 then tls13_early_exporter_master_secret else caught-fail) in
                {1367}let h_74: bitstring = (if v_231 then catch-fail(hash(@7_tls_h,client_hello_4)) else caught-fail) in
                {1368}let v_232: bool = not-caught-fail(h_74) in
                {1369}let x_81: bitstring = (if v_232 then (l_75,h_74) else caught-fail) in
                {1370}let ems0_4: bitstring = (if v_231 then catch-fail((if v_232 then hmac(@7_tls_h,es_16,x_81) else fail-any)) else caught-fail) in
                {1371}let v_233: bool = not-caught-fail(ems0_4) in
                {1372}let (wkc0_2: aead_key,ems0_5: bitstring) = (if v_230 then (if v_231 then (if v_233 then (kc0_2,ems0_4) else fail-any) else fail-any) else fail-any) in
                {1373}!
                {1374}in(io, (i_2: nat,ad_2: bitstring));
                {1375}if is_nat(i_2) then
                {1376}new msg_ed_1[]: bitstring;
                {1377}let enc_ed_1: bitstring = aead_enc(@7_tls_a,wkc0_2,i_2,ad_2,msg_ed_1) in
                {1378}new st_11: stamp;
                {1379}event ClientSequenceClient0RTTDataWriteKey(@7_id_client,st_11,i_2);
                {1380}event ClientSends0(@7_id_client,cr_12,psk_30,i_2,ad_2,msg_ed_1);
                {1381}out(io, enc_ed_1)
            ) | (
                {1382}in(io, server_hello_2: msg);
                {1383}let SH(sr_13: bytes32,mode_5: params) = server_hello_2 in
                (
                    {1384}event ClientEchAcceptance(@7_id_client,false);
                    {1385}if (false && (sr_13 = B32(HRR24,HRR8))) then
                    (
                        {1386}if ((mode_5 = nego(TLS13,@7_tls_h,@7_tls_a,hrr_kex_ext(@7_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex ≠ true)) then
                        (
                            {1387}let cur_log3_3: bitstring = (cur_log2_13,server_hello_2) in
                            {1388}let send_kex_2: bool = true in
                            {1389}new rand24_3[]: bytes24;
                            {1390}new rand8_3[]: bytes8;
                            {1391}let cr_13: bytes32 = B32(rand24_3,rand8_3) in
                            {1392}new s_23[]: seed;
                            {1393}let gx_6: element = dh_pub(@7_tls_g,dh_k(s_23)) in
                            {1394}let v_234: bitstring = (dh_k(s_23),gx_6) in
                            {1395}let v_235: bool = success?(1-proj-2-tuple(v_234)) in
                            {1396}let gx_7: element = (if v_235 then 2-proj-2-tuple(v_234) else caught-fail) in
                            {1397}let x_82: bitstring = (if v_235 then 1-proj-2-tuple(v_234) else caught-fail) in
                            {1398}let kex_2: kex_alg = (if v_235 then (if send_kex_2 then DHE_kex(@7_tls_g,gx_7) else DHE_group(@7_tls_g)) else caught-fail) in
                            {1399}let (kex_ext_3: keyShareExt,kex_data_4: bitstring) = (if v_235 then (client_kex_ext(kex_2),(x_82,@7_tls_g)) else fail-any) in
                            {1400}let ech_ext_4: echExt = empty_ech_ext in
                            {1401}let extra_12: extraExt = empty_extra_ext in
                            {1402}if @7_use_psk then
                            (
                                {1403}let (psk_31: preSharedKey,id_16: identityPsk,old_es_2: bitstring,is_safe_10: bool) = psk_data_6 in
                                (
                                    {1404}let offer_11: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_12),ech_ext_4,extra_12,trunc_client_psk_ext(id_16)) in
                                    {1405}let cur_log'_6: bitstring = (cur_log3_3,CH(cr_13,offer_11)) in
                                    {1406}let s_24: bitstring = zero in
                                    {1407}let k_19: bitstring = catch-fail(psk2b(psk_31)) in
                                    {1408}let v_236: bool = not-caught-fail(k_19) in
                                    {1409}let early_secret_18: bitstring = catch-fail((if v_236 then hmac(@7_tls_h,s_24,k_19) else fail-any)) in
                                    {1410}let v_237: bool = not-caught-fail(early_secret_18) in
                                    {1411}let l_76: label = (if v_237 then tls13_ext_res_binder else caught-fail) in
                                    {1412}let m_22: bitstring = (if v_237 then zero else caught-fail) in
                                    {1413}let h_75: bitstring = (if v_237 then catch-fail(hash(@7_tls_h,m_22)) else caught-fail) in
                                    {1414}let v_238: bool = not-caught-fail(h_75) in
                                    {1415}let x_83: bitstring = (if v_238 then (l_76,h_75) else caught-fail) in
                                    {1416}let binder_key_12: bitstring = (if v_237 then catch-fail((if v_238 then hmac(@7_tls_h,early_secret_18,x_83) else fail-any)) else caught-fail) in
                                    {1417}let v_239: bool = not-caught-fail(binder_key_12) in
                                    {1418}let v_240: bitstring = catch-fail((if v_237 then (if v_239 then (early_secret_18,binder_key_12) else fail-any) else fail-any)) in
                                    {1419}let v_241: bool = (not-caught-fail(v_240) && success?(1-proj-2-tuple(v_240))) in
                                    {1420}let kb_12: mac_key = (if v_241 then 2-proj-2-tuple(v_240) else caught-fail) in
                                    {1421}let es_17: bitstring = (if v_241 then 1-proj-2-tuple(v_240) else caught-fail) in
                                    {1422}let binders_5: bitstring = (if v_241 then catch-fail(hmac(@7_tls_h,kb_12,cur_log'_6)) else caught-fail) in
                                    {1423}let v_242: bool = not-caught-fail(binders_5) in
                                    {1424}let v_243: bitstring = catch-fail((if v_241 then (if v_242 then (client_psk_ext(id_16,binders_5),(psk_31,id_16,es_17,is_safe_10)) else fail-any) else fail-any)) in
                                    {1425}let v_244: bool = (not-caught-fail(v_243) && success?(1-proj-2-tuple(v_243))) in
                                    {1426}let psk_data_7: bitstring = (if v_244 then 2-proj-2-tuple(v_243) else caught-fail) in
                                    {1427}let psk_ext_11: preSharedKeyExt = (if v_244 then 1-proj-2-tuple(v_243) else caught-fail) in
                                    {1428}let offer_12: params = (if v_244 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_11) else caught-fail) in
                                    {1429}let (client_hello'_3: msg,cr'_3: bytes32,kex_data'_3: bitstring,psk_data'_3: bitstring) = (if v_244 then (CH(cr_13,offer_12),cr_13,kex_data_4,psk_data_7) else fail-any) in
                                    {1430}event ClientOffersAead(cr'_3,@7_tls_a);
                                    {1431}event ClientOffersHash(cr'_3,@7_tls_h);
                                    {1432}event ClientOffersGroup(cr'_3,@7_tls_g);
                                    {1433}out(io, client_hello'_3);
                                    {1434}let cur_log4_3: bitstring = (cur_log3_3,client_hello'_3) in
                                    {1435}in(io, server_hello'_3: msg);
                                    {1436}let SH(sr'_3: bytes32,mode'_3: params) = server_hello'_3 in
                                    (
                                        {1437}if (sr'_3 = B32(HRR24,HRR8)) then
                                            {1438}out(io, unexpected_message)
                                        else
                                            {1439}let (x_84: bitstring,g_4: group) = kex_data'_3 in
                                            {1440}let (psk_offer_4: preSharedKey,id_offer_4: identityPsk,es_offer_4: bitstring,is_safe_offer_4: bool) = psk_data'_3 in
                                            {1441}event Client_PSKOffer(@7_id_client,psk_offer_4,id_offer_4,is_safe_offer_4);
                                            {1442}event Client_Rand_client(@7_id_client,cr'_3);
                                            {1443}event Client_DH_client(@7_id_client,dh_pub(g_4,x_84));
                                            {1444}event Client_server_domain(@7_id_client,s_dom_12);
                                            {1445}let SH(sr_14: bytes32,mode_6: params) = server_hello'_3 in
                                            {1446}event Client_Rand_server(@7_id_client,sr_14);
                                            {1447}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_4,gy_5: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_12: preSharedKeyExt) = mode_6 in
                                            (
                                                {1448}let cur_log2_14: bitstring = (cur_log4_3,server_hello'_3) in
                                                {1449}event Client_DH_server(@7_id_client,gy_5);
                                                {1450}let v_245: bool = (psk_ext_12 = empty_psk_ext) in
                                                {1451}let psk_32: preSharedKey = (if v_245 then NoPsk else caught-fail) in
                                                {1452}let s_25: bitstring = (if v_245 then zero else caught-fail) in
                                                {1453}let k_20: bitstring = (if v_245 then catch-fail(psk2b(psk_32)) else caught-fail) in
                                                {1454}let v_246: bool = not-caught-fail(k_20) in
                                                {1455}let early_secret_19: bitstring = (if v_245 then catch-fail((if v_246 then hmac(@7_tls_h,s_25,k_20) else fail-any)) else caught-fail) in
                                                {1456}let v_247: bool = not-caught-fail(early_secret_19) in
                                                {1457}let l_77: label = (if v_247 then tls13_ext_res_binder else caught-fail) in
                                                {1458}let m_23: bitstring = (if v_247 then zero else caught-fail) in
                                                {1459}let h_76: bitstring = (if v_247 then catch-fail(hash(@7_tls_h,m_23)) else caught-fail) in
                                                {1460}let v_248: bool = not-caught-fail(h_76) in
                                                {1461}let x_85: bitstring = (if v_248 then (l_77,h_76) else caught-fail) in
                                                {1462}let binder_key_13: bitstring = (if v_247 then catch-fail((if v_248 then hmac(@7_tls_h,early_secret_19,x_85) else fail-any)) else caught-fail) in
                                                {1463}let v_249: bool = not-caught-fail(binder_key_13) in
                                                {1464}let v_250: bitstring = (if v_245 then catch-fail((if v_247 then (if v_249 then (early_secret_19,binder_key_13) else fail-any) else fail-any)) else caught-fail) in
                                                {1465}let v_251: bool = (not-caught-fail(v_250) && success?(1-proj-2-tuple(v_250))) in
                                                {1466}let kb_13: mac_key = (if v_251 then 2-proj-2-tuple(v_250) else caught-fail) in
                                                {1467}let es_18: bitstring = (if v_251 then 1-proj-2-tuple(v_250) else caught-fail) in
                                                {1468}let v_252: bitstring = (if not(v_245) then catch-fail(psk_data'_3) else caught-fail) in
                                                {1469}let v_253: bool = (not-caught-fail(v_252) && success?(1-proj-4-tuple(v_252))) in
                                                {1470}let is_safe_11: bool = (if v_253 then 4-proj-4-tuple(v_252) else caught-fail) in
                                                {1471}let es_19: bitstring = (if v_253 then 3-proj-4-tuple(v_252) else caught-fail) in
                                                {1472}let id_17: identityPsk = (if v_253 then 2-proj-4-tuple(v_252) else caught-fail) in
                                                {1473}let psk_33: preSharedKey = (if v_253 then 1-proj-4-tuple(v_252) else caught-fail) in
                                                {1474}let (psk_34: preSharedKey,early_secret_20: bitstring,valid_4: bool,safe_psk_9: bool) = (if v_245 then (if v_251 then (NoPsk,es_18,true,false) else fail-any) else (if v_253 then (psk_33,es_19,((psk_33 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_12)),is_safe_11) else fail-any)) in
                                                {1475}event Client_PSKChoosen(@7_id_client,psk_34,safe_psk_9);
                                                {1476}if valid_4 then
                                                (
                                                    {1477}let gxy_9: element = catch-fail(dh_decap_fun(g_4,gy_5,x_84)) in
                                                    {1478}let v_254: bool = not-caught-fail(gxy_9) in
                                                    {1479}new s_26[]: seed;
                                                    {1480}let gxy_10: element = (if v_254 then gxy_9 else dh_f(s_26)) in
                                                    {1481}event Client_DH_gxy(@7_id_client,gxy_10);
                                                    {1482}let l_78: label = tls13_derived in
                                                    {1483}let m_24: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1484}let v_255: bool = not-caught-fail(m_24) in
                                                    {1485}let h_77: bitstring = (if v_255 then catch-fail(hash(@7_tls_h,m_24)) else caught-fail) in
                                                    {1486}let v_256: bool = not-caught-fail(h_77) in
                                                    {1487}let x_86: bitstring = (if v_256 then (l_78,h_77) else caught-fail) in
                                                    {1488}let extra_13: bitstring = catch-fail((if v_255 then (if v_256 then hmac(@7_tls_h,early_secret_20,x_86) else fail-any) else fail-any)) in
                                                    {1489}let v_257: bool = not-caught-fail(extra_13) in
                                                    {1490}let handshake_secret_5: bitstring = (if v_257 then hmac(@7_tls_h,extra_13,gxy_10) else fail-any) in
                                                    {1491}let l_79: label = tls13_derived in
                                                    {1492}let m_25: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1493}let v_258: bool = not-caught-fail(m_25) in
                                                    {1494}let h_78: bitstring = (if v_258 then catch-fail(hash(@7_tls_h,m_25)) else caught-fail) in
                                                    {1495}let v_259: bool = not-caught-fail(h_78) in
                                                    {1496}let x_87: bitstring = (if v_259 then (l_79,h_78) else caught-fail) in
                                                    {1497}let extra_14: bitstring = catch-fail((if v_258 then (if v_259 then hmac(@7_tls_h,handshake_secret_5,x_87) else fail-any) else fail-any)) in
                                                    {1498}let v_260: bool = not-caught-fail(extra_14) in
                                                    {1499}let k_21: bitstring = (if v_260 then zero else caught-fail) in
                                                    {1500}let master_secret_17: bitstring = (if v_260 then catch-fail(hmac(@7_tls_h,handshake_secret_5,k_21)) else caught-fail) in
                                                    {1501}let v_261: bool = not-caught-fail(master_secret_17) in
                                                    {1502}let l_80: label = (if v_261 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {1503}let h_79: bitstring = (if v_261 then catch-fail(hash(@7_tls_h,cur_log2_14)) else caught-fail) in
                                                    {1504}let v_262: bool = not-caught-fail(h_79) in
                                                    {1505}let x_88: bitstring = (if v_262 then (l_80,h_79) else caught-fail) in
                                                    {1506}let client_hts_5: bitstring = (if v_261 then catch-fail((if v_262 then hmac(@7_tls_h,handshake_secret_5,x_88) else fail-any)) else caught-fail) in
                                                    {1507}let v_263: bool = not-caught-fail(client_hts_5) in
                                                    {1508}let l_81: label = (if v_263 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {1509}let h_80: bitstring = (if v_263 then catch-fail(hash(@7_tls_h,cur_log2_14)) else caught-fail) in
                                                    {1510}let v_264: bool = not-caught-fail(h_80) in
                                                    {1511}let x_89: bitstring = (if v_264 then (l_81,h_80) else caught-fail) in
                                                    {1512}let server_hts_5: bitstring = (if v_263 then catch-fail((if v_264 then hmac(@7_tls_h,handshake_secret_5,x_89) else fail-any)) else caught-fail) in
                                                    {1513}let v_265: bool = not-caught-fail(server_hts_5) in
                                                    {1514}let l_82: label = (if v_265 then tls13_key else caught-fail) in
                                                    {1515}let h_81: bitstring = (if v_265 then zero else caught-fail) in
                                                    {1516}let x_90: bitstring = (if v_265 then (l_82,h_81) else caught-fail) in
                                                    {1517}let client_wkh_5: bitstring = (if v_265 then catch-fail(hmac(@7_tls_h,client_hts_5,x_90)) else caught-fail) in
                                                    {1518}let v_266: bool = not-caught-fail(client_wkh_5) in
                                                    {1519}let l_83: label = (if v_266 then tls13_key else caught-fail) in
                                                    {1520}let h_82: bitstring = (if v_266 then zero else caught-fail) in
                                                    {1521}let x_91: bitstring = (if v_266 then (l_83,h_82) else caught-fail) in
                                                    {1522}let server_wkh_5: bitstring = (if v_266 then catch-fail(hmac(@7_tls_h,server_hts_5,x_91)) else caught-fail) in
                                                    {1523}let v_267: bool = not-caught-fail(server_wkh_5) in
                                                    {1524}let l_84: label = (if v_267 then tls13_finished else caught-fail) in
                                                    {1525}let h_83: bitstring = (if v_267 then zero else caught-fail) in
                                                    {1526}let x_92: bitstring = (if v_267 then (l_84,h_83) else caught-fail) in
                                                    {1527}let client_fk_5: bitstring = (if v_267 then catch-fail(hmac(@7_tls_h,client_hts_5,x_92)) else caught-fail) in
                                                    {1528}let v_268: bool = not-caught-fail(client_fk_5) in
                                                    {1529}let l_85: label = (if v_268 then tls13_finished else caught-fail) in
                                                    {1530}let h_84: bitstring = (if v_268 then zero else caught-fail) in
                                                    {1531}let x_93: bitstring = (if v_268 then (l_85,h_84) else caught-fail) in
                                                    {1532}let server_fk_5: bitstring = (if v_268 then catch-fail(hmac(@7_tls_h,server_hts_5,x_93)) else caught-fail) in
                                                    {1533}let v_269: bool = not-caught-fail(server_fk_5) in
                                                    {1534}let (master_secret_18: bitstring,chk_12: aead_key,shk_11: aead_key,cfin_12: mac_key,sfin_11: mac_key) = (if v_260 then (if v_261 then (if v_263 then (if v_265 then (if v_266 then (if v_267 then (if v_268 then (if v_269 then (master_secret_17,client_wkh_5,server_wkh_5,client_fk_5,server_fk_5) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {1535}event Client_chk(@7_id_client,chk_12);
                                                    {1536}event Client_shk(@7_id_client,shk_11);
                                                    {1537}event Client_cfin(@7_id_client,cfin_12);
                                                    {1538}event Client_sfin(@7_id_client,sfin_11);
                                                    {1539}in(io, enc_ee_msg_4: bitstring);
                                                    {1540}let ee_msg_5: msg = aead_dec(@7_tls_a,shk_11,0,zero,enc_ee_msg_4) in
                                                    {1541}let EE(ech_ee_4: echExt,extra_ee_4: extraExt) = ee_msg_5 in
                                                    {1542}let cur_log2_15: bitstring = (cur_log2_14,ee_msg_5) in
                                                    {1543}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_3,sr_14,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_34,safe_psk_9,@7_comp_psk,master_secret_18,chk_12,0,shk_11,1,cfin_12,sfin_11,cur_log2_15)))
                                                )
                                                else
                                                    {1544}out(io, illegal_parameter)
                                            )
                                            else
                                                {1545}out(io, illegal_parameter)
                                    )
                                    else
                                        {1546}out(io, unexpected_message)
                                )
                                else
                                    {1699}get pre_shared_keys(c_dom'_4: domain,=s_dom_12,=@7_tls_h,id_18: identityPsk,psk_35: preSharedKey,idP_6: idProc,is_safe_12: bool) in
                                    {1547}event Selected_one_time_used_psk(@7_id_client,psk_35,is_safe_12);
                                    {1548}event Selected_psk(c_dom_5,c_dom'_4,idP_6,is_safe_12);
                                    {1549}event Selected_psk_no_missmatch(@7_id_client,s_dom_12,@7_tls_h,psk_35,id_18);
                                    {1550}event Selected_psk_with_ID(c_dom_5,c_dom'_4,id_18,idP_6,is_safe_12);
                                    {1551}let v_270: bitstring = (id_18,psk_35,is_safe_12) in
                                    {1552}let v_271: bool = success?(1-proj-3-tuple(v_270)) in
                                    {1553}let is_safe_13: bool = (if v_271 then 3-proj-3-tuple(v_270) else caught-fail) in
                                    {1554}let psk_36: preSharedKey = (if v_271 then 2-proj-3-tuple(v_270) else caught-fail) in
                                    {1555}let id_19: identityPsk = (if v_271 then 1-proj-3-tuple(v_270) else caught-fail) in
                                    {1556}let offer_13: params = (if v_271 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_12),ech_ext_4,extra_12,trunc_client_psk_ext(id_19)) else caught-fail) in
                                    {1557}let cur_log'_7: bitstring = (if v_271 then (cur_log3_3,CH(cr_13,offer_13)) else caught-fail) in
                                    {1558}let s_27: bitstring = (if v_271 then zero else caught-fail) in
                                    {1559}let k_22: bitstring = (if v_271 then catch-fail(psk2b(psk_36)) else caught-fail) in
                                    {1560}let v_272: bool = not-caught-fail(k_22) in
                                    {1561}let early_secret_21: bitstring = (if v_271 then catch-fail((if v_272 then hmac(@7_tls_h,s_27,k_22) else fail-any)) else caught-fail) in
                                    {1562}let v_273: bool = not-caught-fail(early_secret_21) in
                                    {1563}let l_86: label = (if v_273 then tls13_ext_res_binder else caught-fail) in
                                    {1564}let m_26: bitstring = (if v_273 then zero else caught-fail) in
                                    {1565}let h_85: bitstring = (if v_273 then catch-fail(hash(@7_tls_h,m_26)) else caught-fail) in
                                    {1566}let v_274: bool = not-caught-fail(h_85) in
                                    {1567}let x_94: bitstring = (if v_274 then (l_86,h_85) else caught-fail) in
                                    {1568}let binder_key_14: bitstring = (if v_273 then catch-fail((if v_274 then hmac(@7_tls_h,early_secret_21,x_94) else fail-any)) else caught-fail) in
                                    {1569}let v_275: bool = not-caught-fail(binder_key_14) in
                                    {1570}let v_276: bitstring = (if v_271 then catch-fail((if v_273 then (if v_275 then (early_secret_21,binder_key_14) else fail-any) else fail-any)) else caught-fail) in
                                    {1571}let v_277: bool = (not-caught-fail(v_276) && success?(1-proj-2-tuple(v_276))) in
                                    {1572}let kb_14: mac_key = (if v_277 then 2-proj-2-tuple(v_276) else caught-fail) in
                                    {1573}let es_20: bitstring = (if v_277 then 1-proj-2-tuple(v_276) else caught-fail) in
                                    {1574}let binders_6: bitstring = (if v_277 then catch-fail(hmac(@7_tls_h,kb_14,cur_log'_7)) else caught-fail) in
                                    {1575}let v_278: bool = not-caught-fail(binders_6) in
                                    {1576}let v_279: bitstring = catch-fail((if v_271 then (if v_277 then (if v_278 then (client_psk_ext(id_19,binders_6),(psk_36,id_19,es_20,is_safe_13)) else fail-any) else fail-any) else fail-any)) in
                                    {1577}let v_280: bool = (not-caught-fail(v_279) && success?(1-proj-2-tuple(v_279))) in
                                    {1578}let psk_data_8: bitstring = (if v_280 then 2-proj-2-tuple(v_279) else caught-fail) in
                                    {1579}let psk_ext_13: preSharedKeyExt = (if v_280 then 1-proj-2-tuple(v_279) else caught-fail) in
                                    {1580}let offer_14: params = (if v_280 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_13) else caught-fail) in
                                    {1581}let (client_hello'_4: msg,cr'_4: bytes32,kex_data'_4: bitstring,psk_data'_4: bitstring) = (if v_280 then (CH(cr_13,offer_14),cr_13,kex_data_4,psk_data_8) else fail-any) in
                                    {1582}event ClientOffersAead(cr'_4,@7_tls_a);
                                    {1583}event ClientOffersHash(cr'_4,@7_tls_h);
                                    {1584}event ClientOffersGroup(cr'_4,@7_tls_g);
                                    {1585}out(io, client_hello'_4);
                                    {1586}let cur_log4_4: bitstring = (cur_log3_3,client_hello'_4) in
                                    {1587}in(io, server_hello'_4: msg);
                                    {1588}let SH(sr'_4: bytes32,mode'_4: params) = server_hello'_4 in
                                    (
                                        {1589}if (sr'_4 = B32(HRR24,HRR8)) then
                                            {1590}out(io, unexpected_message)
                                        else
                                            {1591}let (x_95: bitstring,g_5: group) = kex_data'_4 in
                                            {1592}let (psk_offer_5: preSharedKey,id_offer_5: identityPsk,es_offer_5: bitstring,is_safe_offer_5: bool) = psk_data'_4 in
                                            {1593}event Client_PSKOffer(@7_id_client,psk_offer_5,id_offer_5,is_safe_offer_5);
                                            {1594}event Client_Rand_client(@7_id_client,cr'_4);
                                            {1595}event Client_DH_client(@7_id_client,dh_pub(g_5,x_95));
                                            {1596}event Client_server_domain(@7_id_client,s_dom_12);
                                            {1597}let SH(sr_15: bytes32,mode_7: params) = server_hello'_4 in
                                            {1598}event Client_Rand_server(@7_id_client,sr_15);
                                            {1599}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_5,gy_6: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_14: preSharedKeyExt) = mode_7 in
                                            (
                                                {1600}let cur_log2_16: bitstring = (cur_log4_4,server_hello'_4) in
                                                {1601}event Client_DH_server(@7_id_client,gy_6);
                                                {1602}let v_281: bool = (psk_ext_14 = empty_psk_ext) in
                                                {1603}let psk_37: preSharedKey = (if v_281 then NoPsk else caught-fail) in
                                                {1604}let s_28: bitstring = (if v_281 then zero else caught-fail) in
                                                {1605}let k_23: bitstring = (if v_281 then catch-fail(psk2b(psk_37)) else caught-fail) in
                                                {1606}let v_282: bool = not-caught-fail(k_23) in
                                                {1607}let early_secret_22: bitstring = (if v_281 then catch-fail((if v_282 then hmac(@7_tls_h,s_28,k_23) else fail-any)) else caught-fail) in
                                                {1608}let v_283: bool = not-caught-fail(early_secret_22) in
                                                {1609}let l_87: label = (if v_283 then tls13_ext_res_binder else caught-fail) in
                                                {1610}let m_27: bitstring = (if v_283 then zero else caught-fail) in
                                                {1611}let h_86: bitstring = (if v_283 then catch-fail(hash(@7_tls_h,m_27)) else caught-fail) in
                                                {1612}let v_284: bool = not-caught-fail(h_86) in
                                                {1613}let x_96: bitstring = (if v_284 then (l_87,h_86) else caught-fail) in
                                                {1614}let binder_key_15: bitstring = (if v_283 then catch-fail((if v_284 then hmac(@7_tls_h,early_secret_22,x_96) else fail-any)) else caught-fail) in
                                                {1615}let v_285: bool = not-caught-fail(binder_key_15) in
                                                {1616}let v_286: bitstring = (if v_281 then catch-fail((if v_283 then (if v_285 then (early_secret_22,binder_key_15) else fail-any) else fail-any)) else caught-fail) in
                                                {1617}let v_287: bool = (not-caught-fail(v_286) && success?(1-proj-2-tuple(v_286))) in
                                                {1618}let kb_15: mac_key = (if v_287 then 2-proj-2-tuple(v_286) else caught-fail) in
                                                {1619}let es_21: bitstring = (if v_287 then 1-proj-2-tuple(v_286) else caught-fail) in
                                                {1620}let v_288: bitstring = (if not(v_281) then catch-fail(psk_data'_4) else caught-fail) in
                                                {1621}let v_289: bool = (not-caught-fail(v_288) && success?(1-proj-4-tuple(v_288))) in
                                                {1622}let is_safe_14: bool = (if v_289 then 4-proj-4-tuple(v_288) else caught-fail) in
                                                {1623}let es_22: bitstring = (if v_289 then 3-proj-4-tuple(v_288) else caught-fail) in
                                                {1624}let id_20: identityPsk = (if v_289 then 2-proj-4-tuple(v_288) else caught-fail) in
                                                {1625}let psk_38: preSharedKey = (if v_289 then 1-proj-4-tuple(v_288) else caught-fail) in
                                                {1626}let (psk_39: preSharedKey,early_secret_23: bitstring,valid_5: bool,safe_psk_10: bool) = (if v_281 then (if v_287 then (NoPsk,es_21,true,false) else fail-any) else (if v_289 then (psk_38,es_22,((psk_38 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_14)),is_safe_14) else fail-any)) in
                                                {1627}event Client_PSKChoosen(@7_id_client,psk_39,safe_psk_10);
                                                {1628}if valid_5 then
                                                (
                                                    {1629}let gxy_11: element = catch-fail(dh_decap_fun(g_5,gy_6,x_95)) in
                                                    {1630}let v_290: bool = not-caught-fail(gxy_11) in
                                                    {1631}new s_29[]: seed;
                                                    {1632}let gxy_12: element = (if v_290 then gxy_11 else dh_f(s_29)) in
                                                    {1633}event Client_DH_gxy(@7_id_client,gxy_12);
                                                    {1634}let l_88: label = tls13_derived in
                                                    {1635}let m_28: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1636}let v_291: bool = not-caught-fail(m_28) in
                                                    {1637}let h_87: bitstring = (if v_291 then catch-fail(hash(@7_tls_h,m_28)) else caught-fail) in
                                                    {1638}let v_292: bool = not-caught-fail(h_87) in
                                                    {1639}let x_97: bitstring = (if v_292 then (l_88,h_87) else caught-fail) in
                                                    {1640}let extra_15: bitstring = catch-fail((if v_291 then (if v_292 then hmac(@7_tls_h,early_secret_23,x_97) else fail-any) else fail-any)) in
                                                    {1641}let v_293: bool = not-caught-fail(extra_15) in
                                                    {1642}let handshake_secret_6: bitstring = (if v_293 then hmac(@7_tls_h,extra_15,gxy_12) else fail-any) in
                                                    {1643}let l_89: label = tls13_derived in
                                                    {1644}let m_29: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1645}let v_294: bool = not-caught-fail(m_29) in
                                                    {1646}let h_88: bitstring = (if v_294 then catch-fail(hash(@7_tls_h,m_29)) else caught-fail) in
                                                    {1647}let v_295: bool = not-caught-fail(h_88) in
                                                    {1648}let x_98: bitstring = (if v_295 then (l_89,h_88) else caught-fail) in
                                                    {1649}let extra_16: bitstring = catch-fail((if v_294 then (if v_295 then hmac(@7_tls_h,handshake_secret_6,x_98) else fail-any) else fail-any)) in
                                                    {1650}let v_296: bool = not-caught-fail(extra_16) in
                                                    {1651}let k_24: bitstring = (if v_296 then zero else caught-fail) in
                                                    {1652}let master_secret_19: bitstring = (if v_296 then catch-fail(hmac(@7_tls_h,handshake_secret_6,k_24)) else caught-fail) in
                                                    {1653}let v_297: bool = not-caught-fail(master_secret_19) in
                                                    {1654}let l_90: label = (if v_297 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {1655}let h_89: bitstring = (if v_297 then catch-fail(hash(@7_tls_h,cur_log2_16)) else caught-fail) in
                                                    {1656}let v_298: bool = not-caught-fail(h_89) in
                                                    {1657}let x_99: bitstring = (if v_298 then (l_90,h_89) else caught-fail) in
                                                    {1658}let client_hts_6: bitstring = (if v_297 then catch-fail((if v_298 then hmac(@7_tls_h,handshake_secret_6,x_99) else fail-any)) else caught-fail) in
                                                    {1659}let v_299: bool = not-caught-fail(client_hts_6) in
                                                    {1660}let l_91: label = (if v_299 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {1661}let h_90: bitstring = (if v_299 then catch-fail(hash(@7_tls_h,cur_log2_16)) else caught-fail) in
                                                    {1662}let v_300: bool = not-caught-fail(h_90) in
                                                    {1663}let x_100: bitstring = (if v_300 then (l_91,h_90) else caught-fail) in
                                                    {1664}let server_hts_6: bitstring = (if v_299 then catch-fail((if v_300 then hmac(@7_tls_h,handshake_secret_6,x_100) else fail-any)) else caught-fail) in
                                                    {1665}let v_301: bool = not-caught-fail(server_hts_6) in
                                                    {1666}let l_92: label = (if v_301 then tls13_key else caught-fail) in
                                                    {1667}let h_91: bitstring = (if v_301 then zero else caught-fail) in
                                                    {1668}let x_101: bitstring = (if v_301 then (l_92,h_91) else caught-fail) in
                                                    {1669}let client_wkh_6: bitstring = (if v_301 then catch-fail(hmac(@7_tls_h,client_hts_6,x_101)) else caught-fail) in
                                                    {1670}let v_302: bool = not-caught-fail(client_wkh_6) in
                                                    {1671}let l_93: label = (if v_302 then tls13_key else caught-fail) in
                                                    {1672}let h_92: bitstring = (if v_302 then zero else caught-fail) in
                                                    {1673}let x_102: bitstring = (if v_302 then (l_93,h_92) else caught-fail) in
                                                    {1674}let server_wkh_6: bitstring = (if v_302 then catch-fail(hmac(@7_tls_h,server_hts_6,x_102)) else caught-fail) in
                                                    {1675}let v_303: bool = not-caught-fail(server_wkh_6) in
                                                    {1676}let l_94: label = (if v_303 then tls13_finished else caught-fail) in
                                                    {1677}let h_93: bitstring = (if v_303 then zero else caught-fail) in
                                                    {1678}let x_103: bitstring = (if v_303 then (l_94,h_93) else caught-fail) in
                                                    {1679}let client_fk_6: bitstring = (if v_303 then catch-fail(hmac(@7_tls_h,client_hts_6,x_103)) else caught-fail) in
                                                    {1680}let v_304: bool = not-caught-fail(client_fk_6) in
                                                    {1681}let l_95: label = (if v_304 then tls13_finished else caught-fail) in
                                                    {1682}let h_94: bitstring = (if v_304 then zero else caught-fail) in
                                                    {1683}let x_104: bitstring = (if v_304 then (l_95,h_94) else caught-fail) in
                                                    {1684}let server_fk_6: bitstring = (if v_304 then catch-fail(hmac(@7_tls_h,server_hts_6,x_104)) else caught-fail) in
                                                    {1685}let v_305: bool = not-caught-fail(server_fk_6) in
                                                    {1686}let (master_secret_20: bitstring,chk_13: aead_key,shk_12: aead_key,cfin_13: mac_key,sfin_12: mac_key) = (if v_296 then (if v_297 then (if v_299 then (if v_301 then (if v_302 then (if v_303 then (if v_304 then (if v_305 then (master_secret_19,client_wkh_6,server_wkh_6,client_fk_6,server_fk_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {1687}event Client_chk(@7_id_client,chk_13);
                                                    {1688}event Client_shk(@7_id_client,shk_12);
                                                    {1689}event Client_cfin(@7_id_client,cfin_13);
                                                    {1690}event Client_sfin(@7_id_client,sfin_12);
                                                    {1691}in(io, enc_ee_msg_5: bitstring);
                                                    {1692}let ee_msg_6: msg = aead_dec(@7_tls_a,shk_12,0,zero,enc_ee_msg_5) in
                                                    {1693}let EE(ech_ee_5: echExt,extra_ee_5: extraExt) = ee_msg_6 in
                                                    {1694}let cur_log2_17: bitstring = (cur_log2_16,ee_msg_6) in
                                                    {1695}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_4,sr_15,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_39,safe_psk_10,@7_comp_psk,master_secret_20,chk_13,0,shk_12,1,cfin_13,sfin_12,cur_log2_17)))
                                                )
                                                else
                                                    {1696}out(io, illegal_parameter)
                                            )
                                            else
                                                {1697}out(io, illegal_parameter)
                                    )
                                    else
                                        {1698}out(io, unexpected_message)
                            )
                            else
                                {1700}let psk_40: preSharedKey = NoPsk in
                                {1701}let s_30: bitstring = zero in
                                {1702}let k_25: bitstring = catch-fail(psk2b(psk_40)) in
                                {1703}let v_306: bool = not-caught-fail(k_25) in
                                {1704}let early_secret_24: bitstring = catch-fail((if v_306 then hmac(@7_tls_h,s_30,k_25) else fail-any)) in
                                {1705}let v_307: bool = not-caught-fail(early_secret_24) in
                                {1706}let l_96: label = (if v_307 then tls13_ext_res_binder else caught-fail) in
                                {1707}let m_30: bitstring = (if v_307 then zero else caught-fail) in
                                {1708}let h_95: bitstring = (if v_307 then catch-fail(hash(@7_tls_h,m_30)) else caught-fail) in
                                {1709}let v_308: bool = not-caught-fail(h_95) in
                                {1710}let x_105: bitstring = (if v_308 then (l_96,h_95) else caught-fail) in
                                {1711}let binder_key_16: bitstring = (if v_307 then catch-fail((if v_308 then hmac(@7_tls_h,early_secret_24,x_105) else fail-any)) else caught-fail) in
                                {1712}let v_309: bool = not-caught-fail(binder_key_16) in
                                {1713}let v_310: bitstring = catch-fail((if v_307 then (if v_309 then (early_secret_24,binder_key_16) else fail-any) else fail-any)) in
                                {1714}let v_311: bool = (not-caught-fail(v_310) && success?(1-proj-2-tuple(v_310))) in
                                {1715}let kb_16: mac_key = (if v_311 then 2-proj-2-tuple(v_310) else caught-fail) in
                                {1716}let es_23: bitstring = (if v_311 then 1-proj-2-tuple(v_310) else caught-fail) in
                                {1717}let v_312: bitstring = catch-fail((if v_311 then (empty_psk_ext,(NoPsk,zero,es_23,false)) else fail-any)) in
                                {1718}let v_313: bool = (not-caught-fail(v_312) && success?(1-proj-2-tuple(v_312))) in
                                {1719}let psk_data_9: bitstring = (if v_313 then 2-proj-2-tuple(v_312) else caught-fail) in
                                {1720}let psk_ext_15: preSharedKeyExt = (if v_313 then 1-proj-2-tuple(v_312) else caught-fail) in
                                {1721}let offer_15: params = (if v_313 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_15) else caught-fail) in
                                {1722}let (client_hello'_5: msg,cr'_5: bytes32,kex_data'_5: bitstring,psk_data'_5: bitstring) = (if v_313 then (CH(cr_13,offer_15),cr_13,kex_data_4,psk_data_9) else fail-any) in
                                {1723}event ClientOffersAead(cr'_5,@7_tls_a);
                                {1724}event ClientOffersHash(cr'_5,@7_tls_h);
                                {1725}event ClientOffersGroup(cr'_5,@7_tls_g);
                                {1726}out(io, client_hello'_5);
                                {1727}let cur_log4_5: bitstring = (cur_log3_3,client_hello'_5) in
                                {1728}in(io, server_hello'_5: msg);
                                {1729}let SH(sr'_5: bytes32,mode'_5: params) = server_hello'_5 in
                                (
                                    {1730}if (sr'_5 = B32(HRR24,HRR8)) then
                                        {1731}out(io, unexpected_message)
                                    else
                                        {1732}let (x_106: bitstring,g_6: group) = kex_data'_5 in
                                        {1733}let (psk_offer_6: preSharedKey,id_offer_6: identityPsk,es_offer_6: bitstring,is_safe_offer_6: bool) = psk_data'_5 in
                                        {1734}event Client_PSKOffer(@7_id_client,psk_offer_6,id_offer_6,is_safe_offer_6);
                                        {1735}event Client_Rand_client(@7_id_client,cr'_5);
                                        {1736}event Client_DH_client(@7_id_client,dh_pub(g_6,x_106));
                                        {1737}event Client_server_domain(@7_id_client,s_dom_12);
                                        {1738}let SH(sr_16: bytes32,mode_8: params) = server_hello'_5 in
                                        {1739}event Client_Rand_server(@7_id_client,sr_16);
                                        {1740}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_6,gy_7: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_16: preSharedKeyExt) = mode_8 in
                                        (
                                            {1741}let cur_log2_18: bitstring = (cur_log4_5,server_hello'_5) in
                                            {1742}event Client_DH_server(@7_id_client,gy_7);
                                            {1743}let v_314: bool = (psk_ext_16 = empty_psk_ext) in
                                            {1744}let psk_41: preSharedKey = (if v_314 then NoPsk else caught-fail) in
                                            {1745}let s_31: bitstring = (if v_314 then zero else caught-fail) in
                                            {1746}let k_26: bitstring = (if v_314 then catch-fail(psk2b(psk_41)) else caught-fail) in
                                            {1747}let v_315: bool = not-caught-fail(k_26) in
                                            {1748}let early_secret_25: bitstring = (if v_314 then catch-fail((if v_315 then hmac(@7_tls_h,s_31,k_26) else fail-any)) else caught-fail) in
                                            {1749}let v_316: bool = not-caught-fail(early_secret_25) in
                                            {1750}let l_97: label = (if v_316 then tls13_ext_res_binder else caught-fail) in
                                            {1751}let m_31: bitstring = (if v_316 then zero else caught-fail) in
                                            {1752}let h_96: bitstring = (if v_316 then catch-fail(hash(@7_tls_h,m_31)) else caught-fail) in
                                            {1753}let v_317: bool = not-caught-fail(h_96) in
                                            {1754}let x_107: bitstring = (if v_317 then (l_97,h_96) else caught-fail) in
                                            {1755}let binder_key_17: bitstring = (if v_316 then catch-fail((if v_317 then hmac(@7_tls_h,early_secret_25,x_107) else fail-any)) else caught-fail) in
                                            {1756}let v_318: bool = not-caught-fail(binder_key_17) in
                                            {1757}let v_319: bitstring = (if v_314 then catch-fail((if v_316 then (if v_318 then (early_secret_25,binder_key_17) else fail-any) else fail-any)) else caught-fail) in
                                            {1758}let v_320: bool = (not-caught-fail(v_319) && success?(1-proj-2-tuple(v_319))) in
                                            {1759}let kb_17: mac_key = (if v_320 then 2-proj-2-tuple(v_319) else caught-fail) in
                                            {1760}let es_24: bitstring = (if v_320 then 1-proj-2-tuple(v_319) else caught-fail) in
                                            {1761}let v_321: bitstring = (if not(v_314) then catch-fail(psk_data'_5) else caught-fail) in
                                            {1762}let v_322: bool = (not-caught-fail(v_321) && success?(1-proj-4-tuple(v_321))) in
                                            {1763}let is_safe_15: bool = (if v_322 then 4-proj-4-tuple(v_321) else caught-fail) in
                                            {1764}let es_25: bitstring = (if v_322 then 3-proj-4-tuple(v_321) else caught-fail) in
                                            {1765}let id_21: identityPsk = (if v_322 then 2-proj-4-tuple(v_321) else caught-fail) in
                                            {1766}let psk_42: preSharedKey = (if v_322 then 1-proj-4-tuple(v_321) else caught-fail) in
                                            {1767}let (psk_43: preSharedKey,early_secret_26: bitstring,valid_6: bool,safe_psk_11: bool) = (if v_314 then (if v_320 then (NoPsk,es_24,true,false) else fail-any) else (if v_322 then (psk_42,es_25,((psk_42 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_16)),is_safe_15) else fail-any)) in
                                            {1768}event Client_PSKChoosen(@7_id_client,psk_43,safe_psk_11);
                                            {1769}if valid_6 then
                                            (
                                                {1770}let gxy_13: element = catch-fail(dh_decap_fun(g_6,gy_7,x_106)) in
                                                {1771}let v_323: bool = not-caught-fail(gxy_13) in
                                                {1772}new s_32[]: seed;
                                                {1773}let gxy_14: element = (if v_323 then gxy_13 else dh_f(s_32)) in
                                                {1774}event Client_DH_gxy(@7_id_client,gxy_14);
                                                {1775}let l_98: label = tls13_derived in
                                                {1776}let m_32: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1777}let v_324: bool = not-caught-fail(m_32) in
                                                {1778}let h_97: bitstring = (if v_324 then catch-fail(hash(@7_tls_h,m_32)) else caught-fail) in
                                                {1779}let v_325: bool = not-caught-fail(h_97) in
                                                {1780}let x_108: bitstring = (if v_325 then (l_98,h_97) else caught-fail) in
                                                {1781}let extra_17: bitstring = catch-fail((if v_324 then (if v_325 then hmac(@7_tls_h,early_secret_26,x_108) else fail-any) else fail-any)) in
                                                {1782}let v_326: bool = not-caught-fail(extra_17) in
                                                {1783}let handshake_secret_7: bitstring = (if v_326 then hmac(@7_tls_h,extra_17,gxy_14) else fail-any) in
                                                {1784}let l_99: label = tls13_derived in
                                                {1785}let m_33: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1786}let v_327: bool = not-caught-fail(m_33) in
                                                {1787}let h_98: bitstring = (if v_327 then catch-fail(hash(@7_tls_h,m_33)) else caught-fail) in
                                                {1788}let v_328: bool = not-caught-fail(h_98) in
                                                {1789}let x_109: bitstring = (if v_328 then (l_99,h_98) else caught-fail) in
                                                {1790}let extra_18: bitstring = catch-fail((if v_327 then (if v_328 then hmac(@7_tls_h,handshake_secret_7,x_109) else fail-any) else fail-any)) in
                                                {1791}let v_329: bool = not-caught-fail(extra_18) in
                                                {1792}let k_27: bitstring = (if v_329 then zero else caught-fail) in
                                                {1793}let master_secret_21: bitstring = (if v_329 then catch-fail(hmac(@7_tls_h,handshake_secret_7,k_27)) else caught-fail) in
                                                {1794}let v_330: bool = not-caught-fail(master_secret_21) in
                                                {1795}let l_100: label = (if v_330 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {1796}let h_99: bitstring = (if v_330 then catch-fail(hash(@7_tls_h,cur_log2_18)) else caught-fail) in
                                                {1797}let v_331: bool = not-caught-fail(h_99) in
                                                {1798}let x_110: bitstring = (if v_331 then (l_100,h_99) else caught-fail) in
                                                {1799}let client_hts_7: bitstring = (if v_330 then catch-fail((if v_331 then hmac(@7_tls_h,handshake_secret_7,x_110) else fail-any)) else caught-fail) in
                                                {1800}let v_332: bool = not-caught-fail(client_hts_7) in
                                                {1801}let l_101: label = (if v_332 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {1802}let h_100: bitstring = (if v_332 then catch-fail(hash(@7_tls_h,cur_log2_18)) else caught-fail) in
                                                {1803}let v_333: bool = not-caught-fail(h_100) in
                                                {1804}let x_111: bitstring = (if v_333 then (l_101,h_100) else caught-fail) in
                                                {1805}let server_hts_7: bitstring = (if v_332 then catch-fail((if v_333 then hmac(@7_tls_h,handshake_secret_7,x_111) else fail-any)) else caught-fail) in
                                                {1806}let v_334: bool = not-caught-fail(server_hts_7) in
                                                {1807}let l_102: label = (if v_334 then tls13_key else caught-fail) in
                                                {1808}let h_101: bitstring = (if v_334 then zero else caught-fail) in
                                                {1809}let x_112: bitstring = (if v_334 then (l_102,h_101) else caught-fail) in
                                                {1810}let client_wkh_7: bitstring = (if v_334 then catch-fail(hmac(@7_tls_h,client_hts_7,x_112)) else caught-fail) in
                                                {1811}let v_335: bool = not-caught-fail(client_wkh_7) in
                                                {1812}let l_103: label = (if v_335 then tls13_key else caught-fail) in
                                                {1813}let h_102: bitstring = (if v_335 then zero else caught-fail) in
                                                {1814}let x_113: bitstring = (if v_335 then (l_103,h_102) else caught-fail) in
                                                {1815}let server_wkh_7: bitstring = (if v_335 then catch-fail(hmac(@7_tls_h,server_hts_7,x_113)) else caught-fail) in
                                                {1816}let v_336: bool = not-caught-fail(server_wkh_7) in
                                                {1817}let l_104: label = (if v_336 then tls13_finished else caught-fail) in
                                                {1818}let h_103: bitstring = (if v_336 then zero else caught-fail) in
                                                {1819}let x_114: bitstring = (if v_336 then (l_104,h_103) else caught-fail) in
                                                {1820}let client_fk_7: bitstring = (if v_336 then catch-fail(hmac(@7_tls_h,client_hts_7,x_114)) else caught-fail) in
                                                {1821}let v_337: bool = not-caught-fail(client_fk_7) in
                                                {1822}let l_105: label = (if v_337 then tls13_finished else caught-fail) in
                                                {1823}let h_104: bitstring = (if v_337 then zero else caught-fail) in
                                                {1824}let x_115: bitstring = (if v_337 then (l_105,h_104) else caught-fail) in
                                                {1825}let server_fk_7: bitstring = (if v_337 then catch-fail(hmac(@7_tls_h,server_hts_7,x_115)) else caught-fail) in
                                                {1826}let v_338: bool = not-caught-fail(server_fk_7) in
                                                {1827}let (master_secret_22: bitstring,chk_14: aead_key,shk_13: aead_key,cfin_14: mac_key,sfin_13: mac_key) = (if v_329 then (if v_330 then (if v_332 then (if v_334 then (if v_335 then (if v_336 then (if v_337 then (if v_338 then (master_secret_21,client_wkh_7,server_wkh_7,client_fk_7,server_fk_7) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {1828}event Client_chk(@7_id_client,chk_14);
                                                {1829}event Client_shk(@7_id_client,shk_13);
                                                {1830}event Client_cfin(@7_id_client,cfin_14);
                                                {1831}event Client_sfin(@7_id_client,sfin_13);
                                                {1832}in(io, enc_ee_msg_6: bitstring);
                                                {1833}let ee_msg_7: msg = aead_dec(@7_tls_a,shk_13,0,zero,enc_ee_msg_6) in
                                                {1834}let EE(ech_ee_6: echExt,extra_ee_6: extraExt) = ee_msg_7 in
                                                {1835}let cur_log2_19: bitstring = (cur_log2_18,ee_msg_7) in
                                                {1836}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_5,sr_16,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_43,safe_psk_11,@7_comp_psk,master_secret_22,chk_14,0,shk_13,1,cfin_14,sfin_13,cur_log2_19)))
                                            )
                                            else
                                                {1837}out(io, illegal_parameter)
                                        )
                                        else
                                            {1838}out(io, illegal_parameter)
                                )
                                else
                                    {1839}out(io, unexpected_message)
                        )
                        else
                            {1840}out(io, illegal_parameter)
                    )
                    else
                        {1841}if send_kex then
                        (
                            {1842}let (x_116: bitstring,g_7: group) = kex_data_3 in
                            {1843}let (psk_offer_7: preSharedKey,id_offer_7: identityPsk,es_offer_7: bitstring,is_safe_offer_7: bool) = psk_data_6 in
                            {1844}event Client_PSKOffer(@7_id_client,psk_offer_7,id_offer_7,is_safe_offer_7);
                            {1845}event Client_Rand_client(@7_id_client,cr_12);
                            {1846}event Client_DH_client(@7_id_client,dh_pub(g_7,x_116));
                            {1847}event Client_server_domain(@7_id_client,s_dom_12);
                            {1848}let SH(sr_17: bytes32,mode_9: params) = server_hello_2 in
                            {1849}event Client_Rand_server(@7_id_client,sr_17);
                            {1850}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_7,gy_8: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_17: preSharedKeyExt) = mode_9 in
                            (
                                {1851}let cur_log2_20: bitstring = (cur_log2_13,server_hello_2) in
                                {1852}event Client_DH_server(@7_id_client,gy_8);
                                {1853}let v_339: bool = (psk_ext_17 = empty_psk_ext) in
                                {1854}let psk_44: preSharedKey = (if v_339 then NoPsk else caught-fail) in
                                {1855}let s_33: bitstring = (if v_339 then zero else caught-fail) in
                                {1856}let k_28: bitstring = (if v_339 then catch-fail(psk2b(psk_44)) else caught-fail) in
                                {1857}let v_340: bool = not-caught-fail(k_28) in
                                {1858}let early_secret_27: bitstring = (if v_339 then catch-fail((if v_340 then hmac(@7_tls_h,s_33,k_28) else fail-any)) else caught-fail) in
                                {1859}let v_341: bool = not-caught-fail(early_secret_27) in
                                {1860}let l_106: label = (if v_341 then tls13_ext_res_binder else caught-fail) in
                                {1861}let m_34: bitstring = (if v_341 then zero else caught-fail) in
                                {1862}let h_105: bitstring = (if v_341 then catch-fail(hash(@7_tls_h,m_34)) else caught-fail) in
                                {1863}let v_342: bool = not-caught-fail(h_105) in
                                {1864}let x_117: bitstring = (if v_342 then (l_106,h_105) else caught-fail) in
                                {1865}let binder_key_18: bitstring = (if v_341 then catch-fail((if v_342 then hmac(@7_tls_h,early_secret_27,x_117) else fail-any)) else caught-fail) in
                                {1866}let v_343: bool = not-caught-fail(binder_key_18) in
                                {1867}let v_344: bitstring = (if v_339 then catch-fail((if v_341 then (if v_343 then (early_secret_27,binder_key_18) else fail-any) else fail-any)) else caught-fail) in
                                {1868}let v_345: bool = (not-caught-fail(v_344) && success?(1-proj-2-tuple(v_344))) in
                                {1869}let kb_18: mac_key = (if v_345 then 2-proj-2-tuple(v_344) else caught-fail) in
                                {1870}let es_26: bitstring = (if v_345 then 1-proj-2-tuple(v_344) else caught-fail) in
                                {1871}let v_346: bitstring = (if not(v_339) then catch-fail(psk_data_6) else caught-fail) in
                                {1872}let v_347: bool = (not-caught-fail(v_346) && success?(1-proj-4-tuple(v_346))) in
                                {1873}let is_safe_16: bool = (if v_347 then 4-proj-4-tuple(v_346) else caught-fail) in
                                {1874}let es_27: bitstring = (if v_347 then 3-proj-4-tuple(v_346) else caught-fail) in
                                {1875}let id_22: identityPsk = (if v_347 then 2-proj-4-tuple(v_346) else caught-fail) in
                                {1876}let psk_45: preSharedKey = (if v_347 then 1-proj-4-tuple(v_346) else caught-fail) in
                                {1877}let (psk_46: preSharedKey,early_secret_28: bitstring,valid_7: bool,safe_psk_12: bool) = (if v_339 then (if v_345 then (NoPsk,es_26,true,false) else fail-any) else (if v_347 then (psk_45,es_27,((psk_45 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_17)),is_safe_16) else fail-any)) in
                                {1878}event Client_PSKChoosen(@7_id_client,psk_46,safe_psk_12);
                                {1879}if valid_7 then
                                (
                                    {1880}let gxy_15: element = catch-fail(dh_decap_fun(g_7,gy_8,x_116)) in
                                    {1881}let v_348: bool = not-caught-fail(gxy_15) in
                                    {1882}new s_34[]: seed;
                                    {1883}let gxy_16: element = (if v_348 then gxy_15 else dh_f(s_34)) in
                                    {1884}event Client_DH_gxy(@7_id_client,gxy_16);
                                    {1885}let l_107: label = tls13_derived in
                                    {1886}let m_35: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1887}let v_349: bool = not-caught-fail(m_35) in
                                    {1888}let h_106: bitstring = (if v_349 then catch-fail(hash(@7_tls_h,m_35)) else caught-fail) in
                                    {1889}let v_350: bool = not-caught-fail(h_106) in
                                    {1890}let x_118: bitstring = (if v_350 then (l_107,h_106) else caught-fail) in
                                    {1891}let extra_19: bitstring = catch-fail((if v_349 then (if v_350 then hmac(@7_tls_h,early_secret_28,x_118) else fail-any) else fail-any)) in
                                    {1892}let v_351: bool = not-caught-fail(extra_19) in
                                    {1893}let handshake_secret_8: bitstring = (if v_351 then hmac(@7_tls_h,extra_19,gxy_16) else fail-any) in
                                    {1894}let l_108: label = tls13_derived in
                                    {1895}let m_36: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1896}let v_352: bool = not-caught-fail(m_36) in
                                    {1897}let h_107: bitstring = (if v_352 then catch-fail(hash(@7_tls_h,m_36)) else caught-fail) in
                                    {1898}let v_353: bool = not-caught-fail(h_107) in
                                    {1899}let x_119: bitstring = (if v_353 then (l_108,h_107) else caught-fail) in
                                    {1900}let extra_20: bitstring = catch-fail((if v_352 then (if v_353 then hmac(@7_tls_h,handshake_secret_8,x_119) else fail-any) else fail-any)) in
                                    {1901}let v_354: bool = not-caught-fail(extra_20) in
                                    {1902}let k_29: bitstring = (if v_354 then zero else caught-fail) in
                                    {1903}let master_secret_23: bitstring = (if v_354 then catch-fail(hmac(@7_tls_h,handshake_secret_8,k_29)) else caught-fail) in
                                    {1904}let v_355: bool = not-caught-fail(master_secret_23) in
                                    {1905}let l_109: label = (if v_355 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {1906}let h_108: bitstring = (if v_355 then catch-fail(hash(@7_tls_h,cur_log2_20)) else caught-fail) in
                                    {1907}let v_356: bool = not-caught-fail(h_108) in
                                    {1908}let x_120: bitstring = (if v_356 then (l_109,h_108) else caught-fail) in
                                    {1909}let client_hts_8: bitstring = (if v_355 then catch-fail((if v_356 then hmac(@7_tls_h,handshake_secret_8,x_120) else fail-any)) else caught-fail) in
                                    {1910}let v_357: bool = not-caught-fail(client_hts_8) in
                                    {1911}let l_110: label = (if v_357 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {1912}let h_109: bitstring = (if v_357 then catch-fail(hash(@7_tls_h,cur_log2_20)) else caught-fail) in
                                    {1913}let v_358: bool = not-caught-fail(h_109) in
                                    {1914}let x_121: bitstring = (if v_358 then (l_110,h_109) else caught-fail) in
                                    {1915}let server_hts_8: bitstring = (if v_357 then catch-fail((if v_358 then hmac(@7_tls_h,handshake_secret_8,x_121) else fail-any)) else caught-fail) in
                                    {1916}let v_359: bool = not-caught-fail(server_hts_8) in
                                    {1917}let l_111: label = (if v_359 then tls13_key else caught-fail) in
                                    {1918}let h_110: bitstring = (if v_359 then zero else caught-fail) in
                                    {1919}let x_122: bitstring = (if v_359 then (l_111,h_110) else caught-fail) in
                                    {1920}let client_wkh_8: bitstring = (if v_359 then catch-fail(hmac(@7_tls_h,client_hts_8,x_122)) else caught-fail) in
                                    {1921}let v_360: bool = not-caught-fail(client_wkh_8) in
                                    {1922}let l_112: label = (if v_360 then tls13_key else caught-fail) in
                                    {1923}let h_111: bitstring = (if v_360 then zero else caught-fail) in
                                    {1924}let x_123: bitstring = (if v_360 then (l_112,h_111) else caught-fail) in
                                    {1925}let server_wkh_8: bitstring = (if v_360 then catch-fail(hmac(@7_tls_h,server_hts_8,x_123)) else caught-fail) in
                                    {1926}let v_361: bool = not-caught-fail(server_wkh_8) in
                                    {1927}let l_113: label = (if v_361 then tls13_finished else caught-fail) in
                                    {1928}let h_112: bitstring = (if v_361 then zero else caught-fail) in
                                    {1929}let x_124: bitstring = (if v_361 then (l_113,h_112) else caught-fail) in
                                    {1930}let client_fk_8: bitstring = (if v_361 then catch-fail(hmac(@7_tls_h,client_hts_8,x_124)) else caught-fail) in
                                    {1931}let v_362: bool = not-caught-fail(client_fk_8) in
                                    {1932}let l_114: label = (if v_362 then tls13_finished else caught-fail) in
                                    {1933}let h_113: bitstring = (if v_362 then zero else caught-fail) in
                                    {1934}let x_125: bitstring = (if v_362 then (l_114,h_113) else caught-fail) in
                                    {1935}let server_fk_8: bitstring = (if v_362 then catch-fail(hmac(@7_tls_h,server_hts_8,x_125)) else caught-fail) in
                                    {1936}let v_363: bool = not-caught-fail(server_fk_8) in
                                    {1937}let (master_secret_24: bitstring,chk_15: aead_key,shk_14: aead_key,cfin_15: mac_key,sfin_14: mac_key) = (if v_354 then (if v_355 then (if v_357 then (if v_359 then (if v_360 then (if v_361 then (if v_362 then (if v_363 then (master_secret_23,client_wkh_8,server_wkh_8,client_fk_8,server_fk_8) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {1938}event Client_chk(@7_id_client,chk_15);
                                    {1939}event Client_shk(@7_id_client,shk_14);
                                    {1940}event Client_cfin(@7_id_client,cfin_15);
                                    {1941}event Client_sfin(@7_id_client,sfin_14);
                                    {1942}in(io, enc_ee_msg_7: bitstring);
                                    {1943}let ee_msg_8: msg = aead_dec(@7_tls_a,shk_14,0,zero,enc_ee_msg_7) in
                                    {1944}let EE(ech_ee_7: echExt,extra_ee_7: extraExt) = ee_msg_8 in
                                    {1945}let cur_log2_21: bitstring = (cur_log2_20,ee_msg_8) in
                                    {1946}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr_12,sr_17,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_46,safe_psk_12,@7_comp_psk,master_secret_24,chk_15,0,shk_14,1,cfin_15,sfin_14,cur_log2_21)))
                                )
                                else
                                    {1947}out(io, illegal_parameter)
                            )
                            else
                                {1948}out(io, illegal_parameter)
                        )
                        else
                            {1949}out(io, illegal_parameter)
                )
                else
                    {1950}out(io, unexpected_message)
            )
    )
    else
        {1952}let psk_47: preSharedKey = NoPsk in
        {1953}let s_35: bitstring = zero in
        {1954}let k_30: bitstring = catch-fail(psk2b(psk_47)) in
        {1955}let v_364: bool = not-caught-fail(k_30) in
        {1956}let early_secret_29: bitstring = catch-fail((if v_364 then hmac(@7_tls_h,s_35,k_30) else fail-any)) in
        {1957}let v_365: bool = not-caught-fail(early_secret_29) in
        {1958}let l_115: label = (if v_365 then tls13_ext_res_binder else caught-fail) in
        {1959}let m_37: bitstring = (if v_365 then zero else caught-fail) in
        {1960}let h_114: bitstring = (if v_365 then catch-fail(hash(@7_tls_h,m_37)) else caught-fail) in
        {1961}let v_366: bool = not-caught-fail(h_114) in
        {1962}let x_126: bitstring = (if v_366 then (l_115,h_114) else caught-fail) in
        {1963}let binder_key_19: bitstring = (if v_365 then catch-fail((if v_366 then hmac(@7_tls_h,early_secret_29,x_126) else fail-any)) else caught-fail) in
        {1964}let v_367: bool = not-caught-fail(binder_key_19) in
        {1965}let v_368: bitstring = catch-fail((if v_365 then (if v_367 then (early_secret_29,binder_key_19) else fail-any) else fail-any)) in
        {1966}let v_369: bool = (not-caught-fail(v_368) && success?(1-proj-2-tuple(v_368))) in
        {1967}let kb_19: mac_key = (if v_369 then 2-proj-2-tuple(v_368) else caught-fail) in
        {1968}let es_28: bitstring = (if v_369 then 1-proj-2-tuple(v_368) else caught-fail) in
        {1969}let v_370: bitstring = catch-fail((if v_369 then (empty_psk_ext,(NoPsk,zero,es_28,false)) else fail-any)) in
        {1970}let v_371: bool = (not-caught-fail(v_370) && success?(1-proj-2-tuple(v_370))) in
        {1971}let psk_data_10: bitstring = (if v_371 then 2-proj-2-tuple(v_370) else caught-fail) in
        {1972}let psk_ext_18: preSharedKeyExt = (if v_371 then 1-proj-2-tuple(v_370) else caught-fail) in
        {1973}let offer_16: params = (if v_371 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_18) else caught-fail) in
        {1974}let (client_hello_5: msg,cr_14: bytes32,kex_data_5: bitstring,psk_data_11: bitstring) = (if v_371 then (CH(cr_9,offer_16),cr_9,kex_data,psk_data_10) else fail-any) in
        {1975}event ClientOffersAead(cr_14,@7_tls_a);
        {1976}event ClientOffersHash(cr_14,@7_tls_h);
        {1977}event ClientOffersGroup(cr_14,@7_tls_g);
        {1978}out(io, client_hello_5);
        {1979}let cur_log2_22: bitstring = (cur_log_8,client_hello_5) in
        {1980}let (psk_48: preSharedKey,id_23: identityPsk,es_29: bitstring,safe_psk_13: bool) = psk_data_11 in
        (
            {1981}if (false && (psk_48 ≠ NoPsk)) then
            {1982}let client_hello_6: bitstring = (zero,client_hello_5) in
            {1983}let l_116: label = tls13_client_early_traffic_secret in
            {1984}let h_115: bitstring = catch-fail(hash(@7_tls_h,client_hello_6)) in
            {1985}let v_372: bool = not-caught-fail(h_115) in
            {1986}let x_127: bitstring = (if v_372 then (l_116,h_115) else caught-fail) in
            {1987}let atsc0_3: bitstring = catch-fail((if v_372 then hmac(@7_tls_h,es_29,x_127) else fail-any)) in
            {1988}let v_373: bool = not-caught-fail(atsc0_3) in
            {1989}let l_117: label = (if v_373 then tls13_key else caught-fail) in
            {1990}let h_116: bitstring = (if v_373 then zero else caught-fail) in
            {1991}let x_128: bitstring = (if v_373 then (l_117,h_116) else caught-fail) in
            {1992}let kc0_3: bitstring = (if v_373 then catch-fail(hmac(@7_tls_h,atsc0_3,x_128)) else caught-fail) in
            {1993}let v_374: bool = not-caught-fail(kc0_3) in
            {1994}let l_118: label = (if v_374 then tls13_early_exporter_master_secret else caught-fail) in
            {1995}let h_117: bitstring = (if v_374 then catch-fail(hash(@7_tls_h,client_hello_6)) else caught-fail) in
            {1996}let v_375: bool = not-caught-fail(h_117) in
            {1997}let x_129: bitstring = (if v_375 then (l_118,h_117) else caught-fail) in
            {1998}let ems0_6: bitstring = (if v_374 then catch-fail((if v_375 then hmac(@7_tls_h,es_29,x_129) else fail-any)) else caught-fail) in
            {1999}let v_376: bool = not-caught-fail(ems0_6) in
            {2000}let (wkc0_3: aead_key,ems0_7: bitstring) = (if v_373 then (if v_374 then (if v_376 then (kc0_3,ems0_6) else fail-any) else fail-any) else fail-any) in
            {2001}!
            {2002}in(io, (i_3: nat,ad_3: bitstring));
            {2003}if is_nat(i_3) then
            {2004}new msg_ed_2[]: bitstring;
            {2005}let enc_ed_2: bitstring = aead_enc(@7_tls_a,wkc0_3,i_3,ad_3,msg_ed_2) in
            {2006}new st_12: stamp;
            {2007}event ClientSequenceClient0RTTDataWriteKey(@7_id_client,st_12,i_3);
            {2008}event ClientSends0(@7_id_client,cr_14,psk_48,i_3,ad_3,msg_ed_2);
            {2009}out(io, enc_ed_2)
        ) | (
            {2010}in(io, server_hello_3: msg);
            {2011}let SH(sr_18: bytes32,mode_10: params) = server_hello_3 in
            (
                {2012}event ClientEchAcceptance(@7_id_client,false);
                {2013}if (false && (sr_18 = B32(HRR24,HRR8))) then
                (
                    {2014}if ((mode_10 = nego(TLS13,@7_tls_h,@7_tls_a,hrr_kex_ext(@7_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex ≠ true)) then
                    (
                        {2015}let cur_log3_4: bitstring = (cur_log2_22,server_hello_3) in
                        {2016}let send_kex_3: bool = true in
                        {2017}new rand24_4[]: bytes24;
                        {2018}new rand8_4[]: bytes8;
                        {2019}let cr_15: bytes32 = B32(rand24_4,rand8_4) in
                        {2020}new s_36[]: seed;
                        {2021}let gx_8: element = dh_pub(@7_tls_g,dh_k(s_36)) in
                        {2022}let v_377: bitstring = (dh_k(s_36),gx_8) in
                        {2023}let v_378: bool = success?(1-proj-2-tuple(v_377)) in
                        {2024}let gx_9: element = (if v_378 then 2-proj-2-tuple(v_377) else caught-fail) in
                        {2025}let x_130: bitstring = (if v_378 then 1-proj-2-tuple(v_377) else caught-fail) in
                        {2026}let kex_3: kex_alg = (if v_378 then (if send_kex_3 then DHE_kex(@7_tls_g,gx_9) else DHE_group(@7_tls_g)) else caught-fail) in
                        {2027}let (kex_ext_4: keyShareExt,kex_data_6: bitstring) = (if v_378 then (client_kex_ext(kex_3),(x_130,@7_tls_g)) else fail-any) in
                        {2028}let ech_ext_5: echExt = empty_ech_ext in
                        {2029}let extra_21: extraExt = empty_extra_ext in
                        {2030}if @7_use_psk then
                        (
                            {2031}let (psk_49: preSharedKey,id_24: identityPsk,old_es_3: bitstring,is_safe_17: bool) = psk_data_11 in
                            (
                                {2032}let offer_17: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_12),ech_ext_5,extra_21,trunc_client_psk_ext(id_24)) in
                                {2033}let cur_log'_8: bitstring = (cur_log3_4,CH(cr_15,offer_17)) in
                                {2034}let s_37: bitstring = zero in
                                {2035}let k_31: bitstring = catch-fail(psk2b(psk_49)) in
                                {2036}let v_379: bool = not-caught-fail(k_31) in
                                {2037}let early_secret_30: bitstring = catch-fail((if v_379 then hmac(@7_tls_h,s_37,k_31) else fail-any)) in
                                {2038}let v_380: bool = not-caught-fail(early_secret_30) in
                                {2039}let l_119: label = (if v_380 then tls13_ext_res_binder else caught-fail) in
                                {2040}let m_38: bitstring = (if v_380 then zero else caught-fail) in
                                {2041}let h_118: bitstring = (if v_380 then catch-fail(hash(@7_tls_h,m_38)) else caught-fail) in
                                {2042}let v_381: bool = not-caught-fail(h_118) in
                                {2043}let x_131: bitstring = (if v_381 then (l_119,h_118) else caught-fail) in
                                {2044}let binder_key_20: bitstring = (if v_380 then catch-fail((if v_381 then hmac(@7_tls_h,early_secret_30,x_131) else fail-any)) else caught-fail) in
                                {2045}let v_382: bool = not-caught-fail(binder_key_20) in
                                {2046}let v_383: bitstring = catch-fail((if v_380 then (if v_382 then (early_secret_30,binder_key_20) else fail-any) else fail-any)) in
                                {2047}let v_384: bool = (not-caught-fail(v_383) && success?(1-proj-2-tuple(v_383))) in
                                {2048}let kb_20: mac_key = (if v_384 then 2-proj-2-tuple(v_383) else caught-fail) in
                                {2049}let es_30: bitstring = (if v_384 then 1-proj-2-tuple(v_383) else caught-fail) in
                                {2050}let binders_7: bitstring = (if v_384 then catch-fail(hmac(@7_tls_h,kb_20,cur_log'_8)) else caught-fail) in
                                {2051}let v_385: bool = not-caught-fail(binders_7) in
                                {2052}let v_386: bitstring = catch-fail((if v_384 then (if v_385 then (client_psk_ext(id_24,binders_7),(psk_49,id_24,es_30,is_safe_17)) else fail-any) else fail-any)) in
                                {2053}let v_387: bool = (not-caught-fail(v_386) && success?(1-proj-2-tuple(v_386))) in
                                {2054}let psk_data_12: bitstring = (if v_387 then 2-proj-2-tuple(v_386) else caught-fail) in
                                {2055}let psk_ext_19: preSharedKeyExt = (if v_387 then 1-proj-2-tuple(v_386) else caught-fail) in
                                {2056}let offer_18: params = (if v_387 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_19) else caught-fail) in
                                {2057}let (client_hello'_6: msg,cr'_6: bytes32,kex_data'_6: bitstring,psk_data'_6: bitstring) = (if v_387 then (CH(cr_15,offer_18),cr_15,kex_data_6,psk_data_12) else fail-any) in
                                {2058}event ClientOffersAead(cr'_6,@7_tls_a);
                                {2059}event ClientOffersHash(cr'_6,@7_tls_h);
                                {2060}event ClientOffersGroup(cr'_6,@7_tls_g);
                                {2061}out(io, client_hello'_6);
                                {2062}let cur_log4_6: bitstring = (cur_log3_4,client_hello'_6) in
                                {2063}in(io, server_hello'_6: msg);
                                {2064}let SH(sr'_6: bytes32,mode'_6: params) = server_hello'_6 in
                                (
                                    {2065}if (sr'_6 = B32(HRR24,HRR8)) then
                                        {2066}out(io, unexpected_message)
                                    else
                                        {2067}let (x_132: bitstring,g_8: group) = kex_data'_6 in
                                        {2068}let (psk_offer_8: preSharedKey,id_offer_8: identityPsk,es_offer_8: bitstring,is_safe_offer_8: bool) = psk_data'_6 in
                                        {2069}event Client_PSKOffer(@7_id_client,psk_offer_8,id_offer_8,is_safe_offer_8);
                                        {2070}event Client_Rand_client(@7_id_client,cr'_6);
                                        {2071}event Client_DH_client(@7_id_client,dh_pub(g_8,x_132));
                                        {2072}event Client_server_domain(@7_id_client,s_dom_12);
                                        {2073}let SH(sr_19: bytes32,mode_11: params) = server_hello'_6 in
                                        {2074}event Client_Rand_server(@7_id_client,sr_19);
                                        {2075}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_8,gy_9: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_20: preSharedKeyExt) = mode_11 in
                                        (
                                            {2076}let cur_log2_23: bitstring = (cur_log4_6,server_hello'_6) in
                                            {2077}event Client_DH_server(@7_id_client,gy_9);
                                            {2078}let v_388: bool = (psk_ext_20 = empty_psk_ext) in
                                            {2079}let psk_50: preSharedKey = (if v_388 then NoPsk else caught-fail) in
                                            {2080}let s_38: bitstring = (if v_388 then zero else caught-fail) in
                                            {2081}let k_32: bitstring = (if v_388 then catch-fail(psk2b(psk_50)) else caught-fail) in
                                            {2082}let v_389: bool = not-caught-fail(k_32) in
                                            {2083}let early_secret_31: bitstring = (if v_388 then catch-fail((if v_389 then hmac(@7_tls_h,s_38,k_32) else fail-any)) else caught-fail) in
                                            {2084}let v_390: bool = not-caught-fail(early_secret_31) in
                                            {2085}let l_120: label = (if v_390 then tls13_ext_res_binder else caught-fail) in
                                            {2086}let m_39: bitstring = (if v_390 then zero else caught-fail) in
                                            {2087}let h_119: bitstring = (if v_390 then catch-fail(hash(@7_tls_h,m_39)) else caught-fail) in
                                            {2088}let v_391: bool = not-caught-fail(h_119) in
                                            {2089}let x_133: bitstring = (if v_391 then (l_120,h_119) else caught-fail) in
                                            {2090}let binder_key_21: bitstring = (if v_390 then catch-fail((if v_391 then hmac(@7_tls_h,early_secret_31,x_133) else fail-any)) else caught-fail) in
                                            {2091}let v_392: bool = not-caught-fail(binder_key_21) in
                                            {2092}let v_393: bitstring = (if v_388 then catch-fail((if v_390 then (if v_392 then (early_secret_31,binder_key_21) else fail-any) else fail-any)) else caught-fail) in
                                            {2093}let v_394: bool = (not-caught-fail(v_393) && success?(1-proj-2-tuple(v_393))) in
                                            {2094}let kb_21: mac_key = (if v_394 then 2-proj-2-tuple(v_393) else caught-fail) in
                                            {2095}let es_31: bitstring = (if v_394 then 1-proj-2-tuple(v_393) else caught-fail) in
                                            {2096}let v_395: bitstring = (if not(v_388) then catch-fail(psk_data'_6) else caught-fail) in
                                            {2097}let v_396: bool = (not-caught-fail(v_395) && success?(1-proj-4-tuple(v_395))) in
                                            {2098}let is_safe_18: bool = (if v_396 then 4-proj-4-tuple(v_395) else caught-fail) in
                                            {2099}let es_32: bitstring = (if v_396 then 3-proj-4-tuple(v_395) else caught-fail) in
                                            {2100}let id_25: identityPsk = (if v_396 then 2-proj-4-tuple(v_395) else caught-fail) in
                                            {2101}let psk_51: preSharedKey = (if v_396 then 1-proj-4-tuple(v_395) else caught-fail) in
                                            {2102}let (psk_52: preSharedKey,early_secret_32: bitstring,valid_8: bool,safe_psk_14: bool) = (if v_388 then (if v_394 then (NoPsk,es_31,true,false) else fail-any) else (if v_396 then (psk_51,es_32,((psk_51 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_20)),is_safe_18) else fail-any)) in
                                            {2103}event Client_PSKChoosen(@7_id_client,psk_52,safe_psk_14);
                                            {2104}if valid_8 then
                                            (
                                                {2105}let gxy_17: element = catch-fail(dh_decap_fun(g_8,gy_9,x_132)) in
                                                {2106}let v_397: bool = not-caught-fail(gxy_17) in
                                                {2107}new s_39[]: seed;
                                                {2108}let gxy_18: element = (if v_397 then gxy_17 else dh_f(s_39)) in
                                                {2109}event Client_DH_gxy(@7_id_client,gxy_18);
                                                {2110}let l_121: label = tls13_derived in
                                                {2111}let m_40: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2112}let v_398: bool = not-caught-fail(m_40) in
                                                {2113}let h_120: bitstring = (if v_398 then catch-fail(hash(@7_tls_h,m_40)) else caught-fail) in
                                                {2114}let v_399: bool = not-caught-fail(h_120) in
                                                {2115}let x_134: bitstring = (if v_399 then (l_121,h_120) else caught-fail) in
                                                {2116}let extra_22: bitstring = catch-fail((if v_398 then (if v_399 then hmac(@7_tls_h,early_secret_32,x_134) else fail-any) else fail-any)) in
                                                {2117}let v_400: bool = not-caught-fail(extra_22) in
                                                {2118}let handshake_secret_9: bitstring = (if v_400 then hmac(@7_tls_h,extra_22,gxy_18) else fail-any) in
                                                {2119}let l_122: label = tls13_derived in
                                                {2120}let m_41: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2121}let v_401: bool = not-caught-fail(m_41) in
                                                {2122}let h_121: bitstring = (if v_401 then catch-fail(hash(@7_tls_h,m_41)) else caught-fail) in
                                                {2123}let v_402: bool = not-caught-fail(h_121) in
                                                {2124}let x_135: bitstring = (if v_402 then (l_122,h_121) else caught-fail) in
                                                {2125}let extra_23: bitstring = catch-fail((if v_401 then (if v_402 then hmac(@7_tls_h,handshake_secret_9,x_135) else fail-any) else fail-any)) in
                                                {2126}let v_403: bool = not-caught-fail(extra_23) in
                                                {2127}let k_33: bitstring = (if v_403 then zero else caught-fail) in
                                                {2128}let master_secret_25: bitstring = (if v_403 then catch-fail(hmac(@7_tls_h,handshake_secret_9,k_33)) else caught-fail) in
                                                {2129}let v_404: bool = not-caught-fail(master_secret_25) in
                                                {2130}let l_123: label = (if v_404 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {2131}let h_122: bitstring = (if v_404 then catch-fail(hash(@7_tls_h,cur_log2_23)) else caught-fail) in
                                                {2132}let v_405: bool = not-caught-fail(h_122) in
                                                {2133}let x_136: bitstring = (if v_405 then (l_123,h_122) else caught-fail) in
                                                {2134}let client_hts_9: bitstring = (if v_404 then catch-fail((if v_405 then hmac(@7_tls_h,handshake_secret_9,x_136) else fail-any)) else caught-fail) in
                                                {2135}let v_406: bool = not-caught-fail(client_hts_9) in
                                                {2136}let l_124: label = (if v_406 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {2137}let h_123: bitstring = (if v_406 then catch-fail(hash(@7_tls_h,cur_log2_23)) else caught-fail) in
                                                {2138}let v_407: bool = not-caught-fail(h_123) in
                                                {2139}let x_137: bitstring = (if v_407 then (l_124,h_123) else caught-fail) in
                                                {2140}let server_hts_9: bitstring = (if v_406 then catch-fail((if v_407 then hmac(@7_tls_h,handshake_secret_9,x_137) else fail-any)) else caught-fail) in
                                                {2141}let v_408: bool = not-caught-fail(server_hts_9) in
                                                {2142}let l_125: label = (if v_408 then tls13_key else caught-fail) in
                                                {2143}let h_124: bitstring = (if v_408 then zero else caught-fail) in
                                                {2144}let x_138: bitstring = (if v_408 then (l_125,h_124) else caught-fail) in
                                                {2145}let client_wkh_9: bitstring = (if v_408 then catch-fail(hmac(@7_tls_h,client_hts_9,x_138)) else caught-fail) in
                                                {2146}let v_409: bool = not-caught-fail(client_wkh_9) in
                                                {2147}let l_126: label = (if v_409 then tls13_key else caught-fail) in
                                                {2148}let h_125: bitstring = (if v_409 then zero else caught-fail) in
                                                {2149}let x_139: bitstring = (if v_409 then (l_126,h_125) else caught-fail) in
                                                {2150}let server_wkh_9: bitstring = (if v_409 then catch-fail(hmac(@7_tls_h,server_hts_9,x_139)) else caught-fail) in
                                                {2151}let v_410: bool = not-caught-fail(server_wkh_9) in
                                                {2152}let l_127: label = (if v_410 then tls13_finished else caught-fail) in
                                                {2153}let h_126: bitstring = (if v_410 then zero else caught-fail) in
                                                {2154}let x_140: bitstring = (if v_410 then (l_127,h_126) else caught-fail) in
                                                {2155}let client_fk_9: bitstring = (if v_410 then catch-fail(hmac(@7_tls_h,client_hts_9,x_140)) else caught-fail) in
                                                {2156}let v_411: bool = not-caught-fail(client_fk_9) in
                                                {2157}let l_128: label = (if v_411 then tls13_finished else caught-fail) in
                                                {2158}let h_127: bitstring = (if v_411 then zero else caught-fail) in
                                                {2159}let x_141: bitstring = (if v_411 then (l_128,h_127) else caught-fail) in
                                                {2160}let server_fk_9: bitstring = (if v_411 then catch-fail(hmac(@7_tls_h,server_hts_9,x_141)) else caught-fail) in
                                                {2161}let v_412: bool = not-caught-fail(server_fk_9) in
                                                {2162}let (master_secret_26: bitstring,chk_16: aead_key,shk_15: aead_key,cfin_16: mac_key,sfin_15: mac_key) = (if v_403 then (if v_404 then (if v_406 then (if v_408 then (if v_409 then (if v_410 then (if v_411 then (if v_412 then (master_secret_25,client_wkh_9,server_wkh_9,client_fk_9,server_fk_9) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {2163}event Client_chk(@7_id_client,chk_16);
                                                {2164}event Client_shk(@7_id_client,shk_15);
                                                {2165}event Client_cfin(@7_id_client,cfin_16);
                                                {2166}event Client_sfin(@7_id_client,sfin_15);
                                                {2167}in(io, enc_ee_msg_8: bitstring);
                                                {2168}let ee_msg_9: msg = aead_dec(@7_tls_a,shk_15,0,zero,enc_ee_msg_8) in
                                                {2169}let EE(ech_ee_8: echExt,extra_ee_8: extraExt) = ee_msg_9 in
                                                {2170}let cur_log2_24: bitstring = (cur_log2_23,ee_msg_9) in
                                                {2171}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_6,sr_19,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_52,safe_psk_14,@7_comp_psk,master_secret_26,chk_16,0,shk_15,1,cfin_16,sfin_15,cur_log2_24)))
                                            )
                                            else
                                                {2172}out(io, illegal_parameter)
                                        )
                                        else
                                            {2173}out(io, illegal_parameter)
                                )
                                else
                                    {2174}out(io, unexpected_message)
                            )
                            else
                                {2327}get pre_shared_keys(c_dom'_5: domain,=s_dom_12,=@7_tls_h,id_26: identityPsk,psk_53: preSharedKey,idP_7: idProc,is_safe_19: bool) in
                                {2175}event Selected_one_time_used_psk(@7_id_client,psk_53,is_safe_19);
                                {2176}event Selected_psk(c_dom_5,c_dom'_5,idP_7,is_safe_19);
                                {2177}event Selected_psk_no_missmatch(@7_id_client,s_dom_12,@7_tls_h,psk_53,id_26);
                                {2178}event Selected_psk_with_ID(c_dom_5,c_dom'_5,id_26,idP_7,is_safe_19);
                                {2179}let v_413: bitstring = (id_26,psk_53,is_safe_19) in
                                {2180}let v_414: bool = success?(1-proj-3-tuple(v_413)) in
                                {2181}let is_safe_20: bool = (if v_414 then 3-proj-3-tuple(v_413) else caught-fail) in
                                {2182}let psk_54: preSharedKey = (if v_414 then 2-proj-3-tuple(v_413) else caught-fail) in
                                {2183}let id_27: identityPsk = (if v_414 then 1-proj-3-tuple(v_413) else caught-fail) in
                                {2184}let offer_19: params = (if v_414 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_12),ech_ext_5,extra_21,trunc_client_psk_ext(id_27)) else caught-fail) in
                                {2185}let cur_log'_9: bitstring = (if v_414 then (cur_log3_4,CH(cr_15,offer_19)) else caught-fail) in
                                {2186}let s_40: bitstring = (if v_414 then zero else caught-fail) in
                                {2187}let k_34: bitstring = (if v_414 then catch-fail(psk2b(psk_54)) else caught-fail) in
                                {2188}let v_415: bool = not-caught-fail(k_34) in
                                {2189}let early_secret_33: bitstring = (if v_414 then catch-fail((if v_415 then hmac(@7_tls_h,s_40,k_34) else fail-any)) else caught-fail) in
                                {2190}let v_416: bool = not-caught-fail(early_secret_33) in
                                {2191}let l_129: label = (if v_416 then tls13_ext_res_binder else caught-fail) in
                                {2192}let m_42: bitstring = (if v_416 then zero else caught-fail) in
                                {2193}let h_128: bitstring = (if v_416 then catch-fail(hash(@7_tls_h,m_42)) else caught-fail) in
                                {2194}let v_417: bool = not-caught-fail(h_128) in
                                {2195}let x_142: bitstring = (if v_417 then (l_129,h_128) else caught-fail) in
                                {2196}let binder_key_22: bitstring = (if v_416 then catch-fail((if v_417 then hmac(@7_tls_h,early_secret_33,x_142) else fail-any)) else caught-fail) in
                                {2197}let v_418: bool = not-caught-fail(binder_key_22) in
                                {2198}let v_419: bitstring = (if v_414 then catch-fail((if v_416 then (if v_418 then (early_secret_33,binder_key_22) else fail-any) else fail-any)) else caught-fail) in
                                {2199}let v_420: bool = (not-caught-fail(v_419) && success?(1-proj-2-tuple(v_419))) in
                                {2200}let kb_22: mac_key = (if v_420 then 2-proj-2-tuple(v_419) else caught-fail) in
                                {2201}let es_33: bitstring = (if v_420 then 1-proj-2-tuple(v_419) else caught-fail) in
                                {2202}let binders_8: bitstring = (if v_420 then catch-fail(hmac(@7_tls_h,kb_22,cur_log'_9)) else caught-fail) in
                                {2203}let v_421: bool = not-caught-fail(binders_8) in
                                {2204}let v_422: bitstring = catch-fail((if v_414 then (if v_420 then (if v_421 then (client_psk_ext(id_27,binders_8),(psk_54,id_27,es_33,is_safe_20)) else fail-any) else fail-any) else fail-any)) in
                                {2205}let v_423: bool = (not-caught-fail(v_422) && success?(1-proj-2-tuple(v_422))) in
                                {2206}let psk_data_13: bitstring = (if v_423 then 2-proj-2-tuple(v_422) else caught-fail) in
                                {2207}let psk_ext_21: preSharedKeyExt = (if v_423 then 1-proj-2-tuple(v_422) else caught-fail) in
                                {2208}let offer_20: params = (if v_423 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_21) else caught-fail) in
                                {2209}let (client_hello'_7: msg,cr'_7: bytes32,kex_data'_7: bitstring,psk_data'_7: bitstring) = (if v_423 then (CH(cr_15,offer_20),cr_15,kex_data_6,psk_data_13) else fail-any) in
                                {2210}event ClientOffersAead(cr'_7,@7_tls_a);
                                {2211}event ClientOffersHash(cr'_7,@7_tls_h);
                                {2212}event ClientOffersGroup(cr'_7,@7_tls_g);
                                {2213}out(io, client_hello'_7);
                                {2214}let cur_log4_7: bitstring = (cur_log3_4,client_hello'_7) in
                                {2215}in(io, server_hello'_7: msg);
                                {2216}let SH(sr'_7: bytes32,mode'_7: params) = server_hello'_7 in
                                (
                                    {2217}if (sr'_7 = B32(HRR24,HRR8)) then
                                        {2218}out(io, unexpected_message)
                                    else
                                        {2219}let (x_143: bitstring,g_9: group) = kex_data'_7 in
                                        {2220}let (psk_offer_9: preSharedKey,id_offer_9: identityPsk,es_offer_9: bitstring,is_safe_offer_9: bool) = psk_data'_7 in
                                        {2221}event Client_PSKOffer(@7_id_client,psk_offer_9,id_offer_9,is_safe_offer_9);
                                        {2222}event Client_Rand_client(@7_id_client,cr'_7);
                                        {2223}event Client_DH_client(@7_id_client,dh_pub(g_9,x_143));
                                        {2224}event Client_server_domain(@7_id_client,s_dom_12);
                                        {2225}let SH(sr_20: bytes32,mode_12: params) = server_hello'_7 in
                                        {2226}event Client_Rand_server(@7_id_client,sr_20);
                                        {2227}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_9,gy_10: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_22: preSharedKeyExt) = mode_12 in
                                        (
                                            {2228}let cur_log2_25: bitstring = (cur_log4_7,server_hello'_7) in
                                            {2229}event Client_DH_server(@7_id_client,gy_10);
                                            {2230}let v_424: bool = (psk_ext_22 = empty_psk_ext) in
                                            {2231}let psk_55: preSharedKey = (if v_424 then NoPsk else caught-fail) in
                                            {2232}let s_41: bitstring = (if v_424 then zero else caught-fail) in
                                            {2233}let k_35: bitstring = (if v_424 then catch-fail(psk2b(psk_55)) else caught-fail) in
                                            {2234}let v_425: bool = not-caught-fail(k_35) in
                                            {2235}let early_secret_34: bitstring = (if v_424 then catch-fail((if v_425 then hmac(@7_tls_h,s_41,k_35) else fail-any)) else caught-fail) in
                                            {2236}let v_426: bool = not-caught-fail(early_secret_34) in
                                            {2237}let l_130: label = (if v_426 then tls13_ext_res_binder else caught-fail) in
                                            {2238}let m_43: bitstring = (if v_426 then zero else caught-fail) in
                                            {2239}let h_129: bitstring = (if v_426 then catch-fail(hash(@7_tls_h,m_43)) else caught-fail) in
                                            {2240}let v_427: bool = not-caught-fail(h_129) in
                                            {2241}let x_144: bitstring = (if v_427 then (l_130,h_129) else caught-fail) in
                                            {2242}let binder_key_23: bitstring = (if v_426 then catch-fail((if v_427 then hmac(@7_tls_h,early_secret_34,x_144) else fail-any)) else caught-fail) in
                                            {2243}let v_428: bool = not-caught-fail(binder_key_23) in
                                            {2244}let v_429: bitstring = (if v_424 then catch-fail((if v_426 then (if v_428 then (early_secret_34,binder_key_23) else fail-any) else fail-any)) else caught-fail) in
                                            {2245}let v_430: bool = (not-caught-fail(v_429) && success?(1-proj-2-tuple(v_429))) in
                                            {2246}let kb_23: mac_key = (if v_430 then 2-proj-2-tuple(v_429) else caught-fail) in
                                            {2247}let es_34: bitstring = (if v_430 then 1-proj-2-tuple(v_429) else caught-fail) in
                                            {2248}let v_431: bitstring = (if not(v_424) then catch-fail(psk_data'_7) else caught-fail) in
                                            {2249}let v_432: bool = (not-caught-fail(v_431) && success?(1-proj-4-tuple(v_431))) in
                                            {2250}let is_safe_21: bool = (if v_432 then 4-proj-4-tuple(v_431) else caught-fail) in
                                            {2251}let es_35: bitstring = (if v_432 then 3-proj-4-tuple(v_431) else caught-fail) in
                                            {2252}let id_28: identityPsk = (if v_432 then 2-proj-4-tuple(v_431) else caught-fail) in
                                            {2253}let psk_56: preSharedKey = (if v_432 then 1-proj-4-tuple(v_431) else caught-fail) in
                                            {2254}let (psk_57: preSharedKey,early_secret_35: bitstring,valid_9: bool,safe_psk_15: bool) = (if v_424 then (if v_430 then (NoPsk,es_34,true,false) else fail-any) else (if v_432 then (psk_56,es_35,((psk_56 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_22)),is_safe_21) else fail-any)) in
                                            {2255}event Client_PSKChoosen(@7_id_client,psk_57,safe_psk_15);
                                            {2256}if valid_9 then
                                            (
                                                {2257}let gxy_19: element = catch-fail(dh_decap_fun(g_9,gy_10,x_143)) in
                                                {2258}let v_433: bool = not-caught-fail(gxy_19) in
                                                {2259}new s_42[]: seed;
                                                {2260}let gxy_20: element = (if v_433 then gxy_19 else dh_f(s_42)) in
                                                {2261}event Client_DH_gxy(@7_id_client,gxy_20);
                                                {2262}let l_131: label = tls13_derived in
                                                {2263}let m_44: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2264}let v_434: bool = not-caught-fail(m_44) in
                                                {2265}let h_130: bitstring = (if v_434 then catch-fail(hash(@7_tls_h,m_44)) else caught-fail) in
                                                {2266}let v_435: bool = not-caught-fail(h_130) in
                                                {2267}let x_145: bitstring = (if v_435 then (l_131,h_130) else caught-fail) in
                                                {2268}let extra_24: bitstring = catch-fail((if v_434 then (if v_435 then hmac(@7_tls_h,early_secret_35,x_145) else fail-any) else fail-any)) in
                                                {2269}let v_436: bool = not-caught-fail(extra_24) in
                                                {2270}let handshake_secret_10: bitstring = (if v_436 then hmac(@7_tls_h,extra_24,gxy_20) else fail-any) in
                                                {2271}let l_132: label = tls13_derived in
                                                {2272}let m_45: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2273}let v_437: bool = not-caught-fail(m_45) in
                                                {2274}let h_131: bitstring = (if v_437 then catch-fail(hash(@7_tls_h,m_45)) else caught-fail) in
                                                {2275}let v_438: bool = not-caught-fail(h_131) in
                                                {2276}let x_146: bitstring = (if v_438 then (l_132,h_131) else caught-fail) in
                                                {2277}let extra_25: bitstring = catch-fail((if v_437 then (if v_438 then hmac(@7_tls_h,handshake_secret_10,x_146) else fail-any) else fail-any)) in
                                                {2278}let v_439: bool = not-caught-fail(extra_25) in
                                                {2279}let k_36: bitstring = (if v_439 then zero else caught-fail) in
                                                {2280}let master_secret_27: bitstring = (if v_439 then catch-fail(hmac(@7_tls_h,handshake_secret_10,k_36)) else caught-fail) in
                                                {2281}let v_440: bool = not-caught-fail(master_secret_27) in
                                                {2282}let l_133: label = (if v_440 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {2283}let h_132: bitstring = (if v_440 then catch-fail(hash(@7_tls_h,cur_log2_25)) else caught-fail) in
                                                {2284}let v_441: bool = not-caught-fail(h_132) in
                                                {2285}let x_147: bitstring = (if v_441 then (l_133,h_132) else caught-fail) in
                                                {2286}let client_hts_10: bitstring = (if v_440 then catch-fail((if v_441 then hmac(@7_tls_h,handshake_secret_10,x_147) else fail-any)) else caught-fail) in
                                                {2287}let v_442: bool = not-caught-fail(client_hts_10) in
                                                {2288}let l_134: label = (if v_442 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {2289}let h_133: bitstring = (if v_442 then catch-fail(hash(@7_tls_h,cur_log2_25)) else caught-fail) in
                                                {2290}let v_443: bool = not-caught-fail(h_133) in
                                                {2291}let x_148: bitstring = (if v_443 then (l_134,h_133) else caught-fail) in
                                                {2292}let server_hts_10: bitstring = (if v_442 then catch-fail((if v_443 then hmac(@7_tls_h,handshake_secret_10,x_148) else fail-any)) else caught-fail) in
                                                {2293}let v_444: bool = not-caught-fail(server_hts_10) in
                                                {2294}let l_135: label = (if v_444 then tls13_key else caught-fail) in
                                                {2295}let h_134: bitstring = (if v_444 then zero else caught-fail) in
                                                {2296}let x_149: bitstring = (if v_444 then (l_135,h_134) else caught-fail) in
                                                {2297}let client_wkh_10: bitstring = (if v_444 then catch-fail(hmac(@7_tls_h,client_hts_10,x_149)) else caught-fail) in
                                                {2298}let v_445: bool = not-caught-fail(client_wkh_10) in
                                                {2299}let l_136: label = (if v_445 then tls13_key else caught-fail) in
                                                {2300}let h_135: bitstring = (if v_445 then zero else caught-fail) in
                                                {2301}let x_150: bitstring = (if v_445 then (l_136,h_135) else caught-fail) in
                                                {2302}let server_wkh_10: bitstring = (if v_445 then catch-fail(hmac(@7_tls_h,server_hts_10,x_150)) else caught-fail) in
                                                {2303}let v_446: bool = not-caught-fail(server_wkh_10) in
                                                {2304}let l_137: label = (if v_446 then tls13_finished else caught-fail) in
                                                {2305}let h_136: bitstring = (if v_446 then zero else caught-fail) in
                                                {2306}let x_151: bitstring = (if v_446 then (l_137,h_136) else caught-fail) in
                                                {2307}let client_fk_10: bitstring = (if v_446 then catch-fail(hmac(@7_tls_h,client_hts_10,x_151)) else caught-fail) in
                                                {2308}let v_447: bool = not-caught-fail(client_fk_10) in
                                                {2309}let l_138: label = (if v_447 then tls13_finished else caught-fail) in
                                                {2310}let h_137: bitstring = (if v_447 then zero else caught-fail) in
                                                {2311}let x_152: bitstring = (if v_447 then (l_138,h_137) else caught-fail) in
                                                {2312}let server_fk_10: bitstring = (if v_447 then catch-fail(hmac(@7_tls_h,server_hts_10,x_152)) else caught-fail) in
                                                {2313}let v_448: bool = not-caught-fail(server_fk_10) in
                                                {2314}let (master_secret_28: bitstring,chk_17: aead_key,shk_16: aead_key,cfin_17: mac_key,sfin_16: mac_key) = (if v_439 then (if v_440 then (if v_442 then (if v_444 then (if v_445 then (if v_446 then (if v_447 then (if v_448 then (master_secret_27,client_wkh_10,server_wkh_10,client_fk_10,server_fk_10) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {2315}event Client_chk(@7_id_client,chk_17);
                                                {2316}event Client_shk(@7_id_client,shk_16);
                                                {2317}event Client_cfin(@7_id_client,cfin_17);
                                                {2318}event Client_sfin(@7_id_client,sfin_16);
                                                {2319}in(io, enc_ee_msg_9: bitstring);
                                                {2320}let ee_msg_10: msg = aead_dec(@7_tls_a,shk_16,0,zero,enc_ee_msg_9) in
                                                {2321}let EE(ech_ee_9: echExt,extra_ee_9: extraExt) = ee_msg_10 in
                                                {2322}let cur_log2_26: bitstring = (cur_log2_25,ee_msg_10) in
                                                {2323}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_7,sr_20,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_57,safe_psk_15,@7_comp_psk,master_secret_28,chk_17,0,shk_16,1,cfin_17,sfin_16,cur_log2_26)))
                                            )
                                            else
                                                {2324}out(io, illegal_parameter)
                                        )
                                        else
                                            {2325}out(io, illegal_parameter)
                                )
                                else
                                    {2326}out(io, unexpected_message)
                        )
                        else
                            {2328}let psk_58: preSharedKey = NoPsk in
                            {2329}let s_43: bitstring = zero in
                            {2330}let k_37: bitstring = catch-fail(psk2b(psk_58)) in
                            {2331}let v_449: bool = not-caught-fail(k_37) in
                            {2332}let early_secret_36: bitstring = catch-fail((if v_449 then hmac(@7_tls_h,s_43,k_37) else fail-any)) in
                            {2333}let v_450: bool = not-caught-fail(early_secret_36) in
                            {2334}let l_139: label = (if v_450 then tls13_ext_res_binder else caught-fail) in
                            {2335}let m_46: bitstring = (if v_450 then zero else caught-fail) in
                            {2336}let h_138: bitstring = (if v_450 then catch-fail(hash(@7_tls_h,m_46)) else caught-fail) in
                            {2337}let v_451: bool = not-caught-fail(h_138) in
                            {2338}let x_153: bitstring = (if v_451 then (l_139,h_138) else caught-fail) in
                            {2339}let binder_key_24: bitstring = (if v_450 then catch-fail((if v_451 then hmac(@7_tls_h,early_secret_36,x_153) else fail-any)) else caught-fail) in
                            {2340}let v_452: bool = not-caught-fail(binder_key_24) in
                            {2341}let v_453: bitstring = catch-fail((if v_450 then (if v_452 then (early_secret_36,binder_key_24) else fail-any) else fail-any)) in
                            {2342}let v_454: bool = (not-caught-fail(v_453) && success?(1-proj-2-tuple(v_453))) in
                            {2343}let kb_24: mac_key = (if v_454 then 2-proj-2-tuple(v_453) else caught-fail) in
                            {2344}let es_36: bitstring = (if v_454 then 1-proj-2-tuple(v_453) else caught-fail) in
                            {2345}let v_455: bitstring = catch-fail((if v_454 then (empty_psk_ext,(NoPsk,zero,es_36,false)) else fail-any)) in
                            {2346}let v_456: bool = (not-caught-fail(v_455) && success?(1-proj-2-tuple(v_455))) in
                            {2347}let psk_data_14: bitstring = (if v_456 then 2-proj-2-tuple(v_455) else caught-fail) in
                            {2348}let psk_ext_23: preSharedKeyExt = (if v_456 then 1-proj-2-tuple(v_455) else caught-fail) in
                            {2349}let offer_21: params = (if v_456 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_23) else caught-fail) in
                            {2350}let (client_hello'_8: msg,cr'_8: bytes32,kex_data'_8: bitstring,psk_data'_8: bitstring) = (if v_456 then (CH(cr_15,offer_21),cr_15,kex_data_6,psk_data_14) else fail-any) in
                            {2351}event ClientOffersAead(cr'_8,@7_tls_a);
                            {2352}event ClientOffersHash(cr'_8,@7_tls_h);
                            {2353}event ClientOffersGroup(cr'_8,@7_tls_g);
                            {2354}out(io, client_hello'_8);
                            {2355}let cur_log4_8: bitstring = (cur_log3_4,client_hello'_8) in
                            {2356}in(io, server_hello'_8: msg);
                            {2357}let SH(sr'_8: bytes32,mode'_8: params) = server_hello'_8 in
                            (
                                {2358}if (sr'_8 = B32(HRR24,HRR8)) then
                                    {2359}out(io, unexpected_message)
                                else
                                    {2360}let (x_154: bitstring,g_10: group) = kex_data'_8 in
                                    {2361}let (psk_offer_10: preSharedKey,id_offer_10: identityPsk,es_offer_10: bitstring,is_safe_offer_10: bool) = psk_data'_8 in
                                    {2362}event Client_PSKOffer(@7_id_client,psk_offer_10,id_offer_10,is_safe_offer_10);
                                    {2363}event Client_Rand_client(@7_id_client,cr'_8);
                                    {2364}event Client_DH_client(@7_id_client,dh_pub(g_10,x_154));
                                    {2365}event Client_server_domain(@7_id_client,s_dom_12);
                                    {2366}let SH(sr_21: bytes32,mode_13: params) = server_hello'_8 in
                                    {2367}event Client_Rand_server(@7_id_client,sr_21);
                                    {2368}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_10,gy_11: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_24: preSharedKeyExt) = mode_13 in
                                    (
                                        {2369}let cur_log2_27: bitstring = (cur_log4_8,server_hello'_8) in
                                        {2370}event Client_DH_server(@7_id_client,gy_11);
                                        {2371}let v_457: bool = (psk_ext_24 = empty_psk_ext) in
                                        {2372}let psk_59: preSharedKey = (if v_457 then NoPsk else caught-fail) in
                                        {2373}let s_44: bitstring = (if v_457 then zero else caught-fail) in
                                        {2374}let k_38: bitstring = (if v_457 then catch-fail(psk2b(psk_59)) else caught-fail) in
                                        {2375}let v_458: bool = not-caught-fail(k_38) in
                                        {2376}let early_secret_37: bitstring = (if v_457 then catch-fail((if v_458 then hmac(@7_tls_h,s_44,k_38) else fail-any)) else caught-fail) in
                                        {2377}let v_459: bool = not-caught-fail(early_secret_37) in
                                        {2378}let l_140: label = (if v_459 then tls13_ext_res_binder else caught-fail) in
                                        {2379}let m_47: bitstring = (if v_459 then zero else caught-fail) in
                                        {2380}let h_139: bitstring = (if v_459 then catch-fail(hash(@7_tls_h,m_47)) else caught-fail) in
                                        {2381}let v_460: bool = not-caught-fail(h_139) in
                                        {2382}let x_155: bitstring = (if v_460 then (l_140,h_139) else caught-fail) in
                                        {2383}let binder_key_25: bitstring = (if v_459 then catch-fail((if v_460 then hmac(@7_tls_h,early_secret_37,x_155) else fail-any)) else caught-fail) in
                                        {2384}let v_461: bool = not-caught-fail(binder_key_25) in
                                        {2385}let v_462: bitstring = (if v_457 then catch-fail((if v_459 then (if v_461 then (early_secret_37,binder_key_25) else fail-any) else fail-any)) else caught-fail) in
                                        {2386}let v_463: bool = (not-caught-fail(v_462) && success?(1-proj-2-tuple(v_462))) in
                                        {2387}let kb_25: mac_key = (if v_463 then 2-proj-2-tuple(v_462) else caught-fail) in
                                        {2388}let es_37: bitstring = (if v_463 then 1-proj-2-tuple(v_462) else caught-fail) in
                                        {2389}let v_464: bitstring = (if not(v_457) then catch-fail(psk_data'_8) else caught-fail) in
                                        {2390}let v_465: bool = (not-caught-fail(v_464) && success?(1-proj-4-tuple(v_464))) in
                                        {2391}let is_safe_22: bool = (if v_465 then 4-proj-4-tuple(v_464) else caught-fail) in
                                        {2392}let es_38: bitstring = (if v_465 then 3-proj-4-tuple(v_464) else caught-fail) in
                                        {2393}let id_29: identityPsk = (if v_465 then 2-proj-4-tuple(v_464) else caught-fail) in
                                        {2394}let psk_60: preSharedKey = (if v_465 then 1-proj-4-tuple(v_464) else caught-fail) in
                                        {2395}let (psk_61: preSharedKey,early_secret_38: bitstring,valid_10: bool,safe_psk_16: bool) = (if v_457 then (if v_463 then (NoPsk,es_37,true,false) else fail-any) else (if v_465 then (psk_60,es_38,((psk_60 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_24)),is_safe_22) else fail-any)) in
                                        {2396}event Client_PSKChoosen(@7_id_client,psk_61,safe_psk_16);
                                        {2397}if valid_10 then
                                        (
                                            {2398}let gxy_21: element = catch-fail(dh_decap_fun(g_10,gy_11,x_154)) in
                                            {2399}let v_466: bool = not-caught-fail(gxy_21) in
                                            {2400}new s_45[]: seed;
                                            {2401}let gxy_22: element = (if v_466 then gxy_21 else dh_f(s_45)) in
                                            {2402}event Client_DH_gxy(@7_id_client,gxy_22);
                                            {2403}let l_141: label = tls13_derived in
                                            {2404}let m_48: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                            {2405}let v_467: bool = not-caught-fail(m_48) in
                                            {2406}let h_140: bitstring = (if v_467 then catch-fail(hash(@7_tls_h,m_48)) else caught-fail) in
                                            {2407}let v_468: bool = not-caught-fail(h_140) in
                                            {2408}let x_156: bitstring = (if v_468 then (l_141,h_140) else caught-fail) in
                                            {2409}let extra_26: bitstring = catch-fail((if v_467 then (if v_468 then hmac(@7_tls_h,early_secret_38,x_156) else fail-any) else fail-any)) in
                                            {2410}let v_469: bool = not-caught-fail(extra_26) in
                                            {2411}let handshake_secret_11: bitstring = (if v_469 then hmac(@7_tls_h,extra_26,gxy_22) else fail-any) in
                                            {2412}let l_142: label = tls13_derived in
                                            {2413}let m_49: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                            {2414}let v_470: bool = not-caught-fail(m_49) in
                                            {2415}let h_141: bitstring = (if v_470 then catch-fail(hash(@7_tls_h,m_49)) else caught-fail) in
                                            {2416}let v_471: bool = not-caught-fail(h_141) in
                                            {2417}let x_157: bitstring = (if v_471 then (l_142,h_141) else caught-fail) in
                                            {2418}let extra_27: bitstring = catch-fail((if v_470 then (if v_471 then hmac(@7_tls_h,handshake_secret_11,x_157) else fail-any) else fail-any)) in
                                            {2419}let v_472: bool = not-caught-fail(extra_27) in
                                            {2420}let k_39: bitstring = (if v_472 then zero else caught-fail) in
                                            {2421}let master_secret_29: bitstring = (if v_472 then catch-fail(hmac(@7_tls_h,handshake_secret_11,k_39)) else caught-fail) in
                                            {2422}let v_473: bool = not-caught-fail(master_secret_29) in
                                            {2423}let l_143: label = (if v_473 then tls13_client_handshake_traffic_secret else caught-fail) in
                                            {2424}let h_142: bitstring = (if v_473 then catch-fail(hash(@7_tls_h,cur_log2_27)) else caught-fail) in
                                            {2425}let v_474: bool = not-caught-fail(h_142) in
                                            {2426}let x_158: bitstring = (if v_474 then (l_143,h_142) else caught-fail) in
                                            {2427}let client_hts_11: bitstring = (if v_473 then catch-fail((if v_474 then hmac(@7_tls_h,handshake_secret_11,x_158) else fail-any)) else caught-fail) in
                                            {2428}let v_475: bool = not-caught-fail(client_hts_11) in
                                            {2429}let l_144: label = (if v_475 then tls13_server_handshake_traffic_secret else caught-fail) in
                                            {2430}let h_143: bitstring = (if v_475 then catch-fail(hash(@7_tls_h,cur_log2_27)) else caught-fail) in
                                            {2431}let v_476: bool = not-caught-fail(h_143) in
                                            {2432}let x_159: bitstring = (if v_476 then (l_144,h_143) else caught-fail) in
                                            {2433}let server_hts_11: bitstring = (if v_475 then catch-fail((if v_476 then hmac(@7_tls_h,handshake_secret_11,x_159) else fail-any)) else caught-fail) in
                                            {2434}let v_477: bool = not-caught-fail(server_hts_11) in
                                            {2435}let l_145: label = (if v_477 then tls13_key else caught-fail) in
                                            {2436}let h_144: bitstring = (if v_477 then zero else caught-fail) in
                                            {2437}let x_160: bitstring = (if v_477 then (l_145,h_144) else caught-fail) in
                                            {2438}let client_wkh_11: bitstring = (if v_477 then catch-fail(hmac(@7_tls_h,client_hts_11,x_160)) else caught-fail) in
                                            {2439}let v_478: bool = not-caught-fail(client_wkh_11) in
                                            {2440}let l_146: label = (if v_478 then tls13_key else caught-fail) in
                                            {2441}let h_145: bitstring = (if v_478 then zero else caught-fail) in
                                            {2442}let x_161: bitstring = (if v_478 then (l_146,h_145) else caught-fail) in
                                            {2443}let server_wkh_11: bitstring = (if v_478 then catch-fail(hmac(@7_tls_h,server_hts_11,x_161)) else caught-fail) in
                                            {2444}let v_479: bool = not-caught-fail(server_wkh_11) in
                                            {2445}let l_147: label = (if v_479 then tls13_finished else caught-fail) in
                                            {2446}let h_146: bitstring = (if v_479 then zero else caught-fail) in
                                            {2447}let x_162: bitstring = (if v_479 then (l_147,h_146) else caught-fail) in
                                            {2448}let client_fk_11: bitstring = (if v_479 then catch-fail(hmac(@7_tls_h,client_hts_11,x_162)) else caught-fail) in
                                            {2449}let v_480: bool = not-caught-fail(client_fk_11) in
                                            {2450}let l_148: label = (if v_480 then tls13_finished else caught-fail) in
                                            {2451}let h_147: bitstring = (if v_480 then zero else caught-fail) in
                                            {2452}let x_163: bitstring = (if v_480 then (l_148,h_147) else caught-fail) in
                                            {2453}let server_fk_11: bitstring = (if v_480 then catch-fail(hmac(@7_tls_h,server_hts_11,x_163)) else caught-fail) in
                                            {2454}let v_481: bool = not-caught-fail(server_fk_11) in
                                            {2455}let (master_secret_30: bitstring,chk_18: aead_key,shk_17: aead_key,cfin_18: mac_key,sfin_17: mac_key) = (if v_472 then (if v_473 then (if v_475 then (if v_477 then (if v_478 then (if v_479 then (if v_480 then (if v_481 then (master_secret_29,client_wkh_11,server_wkh_11,client_fk_11,server_fk_11) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                            {2456}event Client_chk(@7_id_client,chk_18);
                                            {2457}event Client_shk(@7_id_client,shk_17);
                                            {2458}event Client_cfin(@7_id_client,cfin_18);
                                            {2459}event Client_sfin(@7_id_client,sfin_17);
                                            {2460}in(io, enc_ee_msg_10: bitstring);
                                            {2461}let ee_msg_11: msg = aead_dec(@7_tls_a,shk_17,0,zero,enc_ee_msg_10) in
                                            {2462}let EE(ech_ee_10: echExt,extra_ee_10: extraExt) = ee_msg_11 in
                                            {2463}let cur_log2_28: bitstring = (cur_log2_27,ee_msg_11) in
                                            {2464}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_8,sr_21,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_61,safe_psk_16,@7_comp_psk,master_secret_30,chk_18,0,shk_17,1,cfin_18,sfin_17,cur_log2_28)))
                                        )
                                        else
                                            {2465}out(io, illegal_parameter)
                                    )
                                    else
                                        {2466}out(io, illegal_parameter)
                            )
                            else
                                {2467}out(io, unexpected_message)
                    )
                    else
                        {2468}out(io, illegal_parameter)
                )
                else
                    {2469}if send_kex then
                    (
                        {2470}let (x_164: bitstring,g_11: group) = kex_data_5 in
                        {2471}let (psk_offer_11: preSharedKey,id_offer_11: identityPsk,es_offer_11: bitstring,is_safe_offer_11: bool) = psk_data_11 in
                        {2472}event Client_PSKOffer(@7_id_client,psk_offer_11,id_offer_11,is_safe_offer_11);
                        {2473}event Client_Rand_client(@7_id_client,cr_14);
                        {2474}event Client_DH_client(@7_id_client,dh_pub(g_11,x_164));
                        {2475}event Client_server_domain(@7_id_client,s_dom_12);
                        {2476}let SH(sr_22: bytes32,mode_14: params) = server_hello_3 in
                        {2477}event Client_Rand_server(@7_id_client,sr_22);
                        {2478}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_11,gy_12: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_25: preSharedKeyExt) = mode_14 in
                        (
                            {2479}let cur_log2_29: bitstring = (cur_log2_22,server_hello_3) in
                            {2480}event Client_DH_server(@7_id_client,gy_12);
                            {2481}let v_482: bool = (psk_ext_25 = empty_psk_ext) in
                            {2482}let psk_62: preSharedKey = (if v_482 then NoPsk else caught-fail) in
                            {2483}let s_46: bitstring = (if v_482 then zero else caught-fail) in
                            {2484}let k_40: bitstring = (if v_482 then catch-fail(psk2b(psk_62)) else caught-fail) in
                            {2485}let v_483: bool = not-caught-fail(k_40) in
                            {2486}let early_secret_39: bitstring = (if v_482 then catch-fail((if v_483 then hmac(@7_tls_h,s_46,k_40) else fail-any)) else caught-fail) in
                            {2487}let v_484: bool = not-caught-fail(early_secret_39) in
                            {2488}let l_149: label = (if v_484 then tls13_ext_res_binder else caught-fail) in
                            {2489}let m_50: bitstring = (if v_484 then zero else caught-fail) in
                            {2490}let h_148: bitstring = (if v_484 then catch-fail(hash(@7_tls_h,m_50)) else caught-fail) in
                            {2491}let v_485: bool = not-caught-fail(h_148) in
                            {2492}let x_165: bitstring = (if v_485 then (l_149,h_148) else caught-fail) in
                            {2493}let binder_key_26: bitstring = (if v_484 then catch-fail((if v_485 then hmac(@7_tls_h,early_secret_39,x_165) else fail-any)) else caught-fail) in
                            {2494}let v_486: bool = not-caught-fail(binder_key_26) in
                            {2495}let v_487: bitstring = (if v_482 then catch-fail((if v_484 then (if v_486 then (early_secret_39,binder_key_26) else fail-any) else fail-any)) else caught-fail) in
                            {2496}let v_488: bool = (not-caught-fail(v_487) && success?(1-proj-2-tuple(v_487))) in
                            {2497}let kb_26: mac_key = (if v_488 then 2-proj-2-tuple(v_487) else caught-fail) in
                            {2498}let es_39: bitstring = (if v_488 then 1-proj-2-tuple(v_487) else caught-fail) in
                            {2499}let v_489: bitstring = (if not(v_482) then catch-fail(psk_data_11) else caught-fail) in
                            {2500}let v_490: bool = (not-caught-fail(v_489) && success?(1-proj-4-tuple(v_489))) in
                            {2501}let is_safe_23: bool = (if v_490 then 4-proj-4-tuple(v_489) else caught-fail) in
                            {2502}let es_40: bitstring = (if v_490 then 3-proj-4-tuple(v_489) else caught-fail) in
                            {2503}let id_30: identityPsk = (if v_490 then 2-proj-4-tuple(v_489) else caught-fail) in
                            {2504}let psk_63: preSharedKey = (if v_490 then 1-proj-4-tuple(v_489) else caught-fail) in
                            {2505}let (psk_64: preSharedKey,early_secret_40: bitstring,valid_11: bool,safe_psk_17: bool) = (if v_482 then (if v_488 then (NoPsk,es_39,true,false) else fail-any) else (if v_490 then (psk_63,es_40,((psk_63 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_25)),is_safe_23) else fail-any)) in
                            {2506}event Client_PSKChoosen(@7_id_client,psk_64,safe_psk_17);
                            {2507}if valid_11 then
                            (
                                {2508}let gxy_23: element = catch-fail(dh_decap_fun(g_11,gy_12,x_164)) in
                                {2509}let v_491: bool = not-caught-fail(gxy_23) in
                                {2510}new s_47[]: seed;
                                {2511}let gxy_24: element = (if v_491 then gxy_23 else dh_f(s_47)) in
                                {2512}event Client_DH_gxy(@7_id_client,gxy_24);
                                {2513}let l_150: label = tls13_derived in
                                {2514}let m_51: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                {2515}let v_492: bool = not-caught-fail(m_51) in
                                {2516}let h_149: bitstring = (if v_492 then catch-fail(hash(@7_tls_h,m_51)) else caught-fail) in
                                {2517}let v_493: bool = not-caught-fail(h_149) in
                                {2518}let x_166: bitstring = (if v_493 then (l_150,h_149) else caught-fail) in
                                {2519}let extra_28: bitstring = catch-fail((if v_492 then (if v_493 then hmac(@7_tls_h,early_secret_40,x_166) else fail-any) else fail-any)) in
                                {2520}let v_494: bool = not-caught-fail(extra_28) in
                                {2521}let handshake_secret_12: bitstring = (if v_494 then hmac(@7_tls_h,extra_28,gxy_24) else fail-any) in
                                {2522}let l_151: label = tls13_derived in
                                {2523}let m_52: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                {2524}let v_495: bool = not-caught-fail(m_52) in
                                {2525}let h_150: bitstring = (if v_495 then catch-fail(hash(@7_tls_h,m_52)) else caught-fail) in
                                {2526}let v_496: bool = not-caught-fail(h_150) in
                                {2527}let x_167: bitstring = (if v_496 then (l_151,h_150) else caught-fail) in
                                {2528}let extra_29: bitstring = catch-fail((if v_495 then (if v_496 then hmac(@7_tls_h,handshake_secret_12,x_167) else fail-any) else fail-any)) in
                                {2529}let v_497: bool = not-caught-fail(extra_29) in
                                {2530}let k_41: bitstring = (if v_497 then zero else caught-fail) in
                                {2531}let master_secret_31: bitstring = (if v_497 then catch-fail(hmac(@7_tls_h,handshake_secret_12,k_41)) else caught-fail) in
                                {2532}let v_498: bool = not-caught-fail(master_secret_31) in
                                {2533}let l_152: label = (if v_498 then tls13_client_handshake_traffic_secret else caught-fail) in
                                {2534}let h_151: bitstring = (if v_498 then catch-fail(hash(@7_tls_h,cur_log2_29)) else caught-fail) in
                                {2535}let v_499: bool = not-caught-fail(h_151) in
                                {2536}let x_168: bitstring = (if v_499 then (l_152,h_151) else caught-fail) in
                                {2537}let client_hts_12: bitstring = (if v_498 then catch-fail((if v_499 then hmac(@7_tls_h,handshake_secret_12,x_168) else fail-any)) else caught-fail) in
                                {2538}let v_500: bool = not-caught-fail(client_hts_12) in
                                {2539}let l_153: label = (if v_500 then tls13_server_handshake_traffic_secret else caught-fail) in
                                {2540}let h_152: bitstring = (if v_500 then catch-fail(hash(@7_tls_h,cur_log2_29)) else caught-fail) in
                                {2541}let v_501: bool = not-caught-fail(h_152) in
                                {2542}let x_169: bitstring = (if v_501 then (l_153,h_152) else caught-fail) in
                                {2543}let server_hts_12: bitstring = (if v_500 then catch-fail((if v_501 then hmac(@7_tls_h,handshake_secret_12,x_169) else fail-any)) else caught-fail) in
                                {2544}let v_502: bool = not-caught-fail(server_hts_12) in
                                {2545}let l_154: label = (if v_502 then tls13_key else caught-fail) in
                                {2546}let h_153: bitstring = (if v_502 then zero else caught-fail) in
                                {2547}let x_170: bitstring = (if v_502 then (l_154,h_153) else caught-fail) in
                                {2548}let client_wkh_12: bitstring = (if v_502 then catch-fail(hmac(@7_tls_h,client_hts_12,x_170)) else caught-fail) in
                                {2549}let v_503: bool = not-caught-fail(client_wkh_12) in
                                {2550}let l_155: label = (if v_503 then tls13_key else caught-fail) in
                                {2551}let h_154: bitstring = (if v_503 then zero else caught-fail) in
                                {2552}let x_171: bitstring = (if v_503 then (l_155,h_154) else caught-fail) in
                                {2553}let server_wkh_12: bitstring = (if v_503 then catch-fail(hmac(@7_tls_h,server_hts_12,x_171)) else caught-fail) in
                                {2554}let v_504: bool = not-caught-fail(server_wkh_12) in
                                {2555}let l_156: label = (if v_504 then tls13_finished else caught-fail) in
                                {2556}let h_155: bitstring = (if v_504 then zero else caught-fail) in
                                {2557}let x_172: bitstring = (if v_504 then (l_156,h_155) else caught-fail) in
                                {2558}let client_fk_12: bitstring = (if v_504 then catch-fail(hmac(@7_tls_h,client_hts_12,x_172)) else caught-fail) in
                                {2559}let v_505: bool = not-caught-fail(client_fk_12) in
                                {2560}let l_157: label = (if v_505 then tls13_finished else caught-fail) in
                                {2561}let h_156: bitstring = (if v_505 then zero else caught-fail) in
                                {2562}let x_173: bitstring = (if v_505 then (l_157,h_156) else caught-fail) in
                                {2563}let server_fk_12: bitstring = (if v_505 then catch-fail(hmac(@7_tls_h,server_hts_12,x_173)) else caught-fail) in
                                {2564}let v_506: bool = not-caught-fail(server_fk_12) in
                                {2565}let (master_secret_32: bitstring,chk_19: aead_key,shk_18: aead_key,cfin_19: mac_key,sfin_18: mac_key) = (if v_497 then (if v_498 then (if v_500 then (if v_502 then (if v_503 then (if v_504 then (if v_505 then (if v_506 then (master_secret_31,client_wkh_12,server_wkh_12,client_fk_12,server_fk_12) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                {2566}event Client_chk(@7_id_client,chk_19);
                                {2567}event Client_shk(@7_id_client,shk_18);
                                {2568}event Client_cfin(@7_id_client,cfin_19);
                                {2569}event Client_sfin(@7_id_client,sfin_18);
                                {2570}in(io, enc_ee_msg_11: bitstring);
                                {2571}let ee_msg_12: msg = aead_dec(@7_tls_a,shk_18,0,zero,enc_ee_msg_11) in
                                {2572}let EE(ech_ee_11: echExt,extra_ee_11: extraExt) = ee_msg_12 in
                                {2573}let cur_log2_30: bitstring = (cur_log2_29,ee_msg_12) in
                                {2574}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr_14,sr_22,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_64,safe_psk_17,@7_comp_psk,master_secret_32,chk_19,0,shk_18,1,cfin_19,sfin_18,cur_log2_30)))
                            )
                            else
                                {2575}out(io, illegal_parameter)
                        )
                        else
                            {2576}out(io, illegal_parameter)
                    )
                    else
                        {2577}out(io, illegal_parameter)
            )
            else
                {2578}out(io, unexpected_message)
        )
) | (
    0
) | (
    {2579}!
    {2580}new id_server_4: idProc;
    {2581}in(io, s_dom_13: domain);
    {2582}event Same(s_dom_13);
    {2583}let id_server_5: idProc = id_server_4 in
    {2584}let extra_ext_2: extraExt = empty_extra_ext in
    {2585}let tls_h_1: hash_alg = id_hash(StrongHash,1) in
    {2586}let tls_a_1: aead_alg = id_aead(StrongAE,1) in
    {2587}let tls_g_1: group = id_g(StrongDH,1) in
    {2588}let backend_h: hash_alg = id_hash(StrongHash,1) in
    {2589}let backend_a: aead_alg = id_aead(StrongAE,1) in
    {2590}let backend_g: group = id_g(StrongDH,1) in
    {2591}let use_ech: bool = false in
    {2592}let use_psk_1: bool = false in
    {2593}let req_cert_3: bool = true in
    {2594}in(io, o_client_hello: msg);
    {2595}let CH(cr_16: bytes32,nego(=TLS13,c_h_alg: hash_alg,c_a_alg: aead_alg,kex_ext_5: keyShareExt,sni_ext_2: sniExt,ech_ext_6: echExt,extra_ext_3: extraExt,psk_ext_26: preSharedKeyExt)) = o_client_hello in
    (
        {2596}if (sni_ext_2 = SNI(s_dom_13)) then
        (
            {2787}get ech_configurations(ech_config(config_id: configId,ech_g_2: group,pkR_1: element,=s_dom_13,ech_h_2: hash_alg,ech_a_2: aead_alg),skR_1: bitstring) in
            {2597}let ech_conf: echConfig = ech_config(config_id,ech_g_2,pkR_1,s_dom_13,ech_h_2,ech_a_2) in
            {2598}let @4_x: bitstring = (ech_conf,skR_1) in
            {2599}new @4_st[]: stamp;
            {2600}event PreciseInput(@4_st,@4_x);
            {2601}let () = () in
            {2602}event ServerChoosesEchConfig(id_server_5,ech_conf,use_ech);
            {2603}let v_507: echConfig = ech_conf in
            {2604}let v_508: bool = success?(1-proj-ech_config(v_507)) in
            {2605}let a_alg_8: aead_alg = (if v_508 then 6-proj-ech_config(v_507) else caught-fail) in
            {2606}let h_alg_10: hash_alg = (if v_508 then 5-proj-ech_config(v_507) else caught-fail) in
            {2607}let s_dom_14: domain = (if v_508 then 4-proj-ech_config(v_507) else caught-fail) in
            {2608}let pkR_2: element = (if v_508 then 3-proj-ech_config(v_507) else caught-fail) in
            {2609}let g_12: group = (if v_508 then 2-proj-ech_config(v_507) else caught-fail) in
            {2610}let config_id_1: configId = (if v_508 then 1-proj-ech_config(v_507) else caught-fail) in
            {2611}new s_48[]: seed;
            {2612}let gx_10: element = (if v_508 then dh_pub(g_12,dh_k(s_48)) else caught-fail) in
            {2613}let v_509: bitstring = (if v_508 then catch-fail((dh_k(s_48),gx_10)) else caught-fail) in
            {2614}let v_510: bool = (not-caught-fail(v_509) && success?(1-proj-2-tuple(v_509))) in
            {2615}let pkR': element = (if v_510 then 2-proj-2-tuple(v_509) else caught-fail) in
            {2616}let skR': bitstring = (if v_510 then 1-proj-2-tuple(v_509) else caught-fail) in
            {2617}new config_id'[]: configId;
            {2618}let retry_ech_ext: echExt = (if v_508 then (if v_510 then ECHConfigList(ech_config(config_id',g_12,pkR',s_dom_14,h_alg_10,a_alg_8)) else fail-any) else fail-any) in
            {2619}if ((use_ech ≠ true) || (ech_ext_6 = empty_ech_ext)) then
            (
                {2620}event ServerEchAcceptance(id_server_5,false);
                {2621}let ee_msg_13: msg = EE(empty_ech_ext,extra_ext_2) in
                {2622}let CH(cr_17: bytes32,nego(=TLS13,=tls_h_1,=tls_a_1,kex_ext_6: keyShareExt,SNI(=s_dom_13),ech_ext_7: echExt,extra_ext_4: extraExt,psk_ext_27: preSharedKeyExt)) = o_client_hello in
                (
                    {2623}let (=true,client_kex_ext(DHE_group(=tls_g_1))) = (false,kex_ext_6) in
                    (
                        {2624}let hrr_mode: params = nego(TLS13,tls_h_1,tls_a_1,hrr_kex_ext(tls_g_1),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext) in
                        {2625}let hello_retry_request: msg = SH(B32(HRR24,HRR8),hrr_mode) in
                        {2626}out(io, hello_retry_request);
                        {2627}let cur_log_HRR: bitstring = ((zero,o_client_hello),hello_retry_request) in
                        {2628}in(io, client_hello'_9: msg);
                        {2629}let CH(cr'_9: bytes32,offer': params) = client_hello'_9 in
                            {2630}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_13,req_cert_3,false,use_psk_1,false,ee_msg_13,client_hello'_9,cur_log_HRR)))
                        else
                            {2631}out(io, unexpected_message)
                    )
                    else
                        {2632}let client_kex_ext(DHE_kex(=tls_g_1,gx_11: element)) = kex_ext_6 in
                            {2633}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_13,req_cert_3,false,use_psk_1,true,ee_msg_13,o_client_hello,zero)))
                        else
                            {2634}out(io, handshake_failure)
                )
                else
                    {2635}out(io, handshake_failure)
            )
            else
                {2636}let ECHClientHelloOuter(ech_h': hash_alg,ech_a': aead_alg,config_id'_1: configId,enc: element,payload: bitstring) = ech_ext_6 in
                (
                    {2637}if ((ech_h' = ech_h_2) && ((ech_a' = ech_a_2) && (config_id'_1 = config_id))) then
                    (
                        {2638}let info: bitstring = (tls_ech_str,ech_conf) in
                        {2639}let gxy_25: element = catch-fail(dh_decap_fun(ech_g_2,enc,skR_1)) in
                        {2640}let v_511: bool = not-caught-fail(gxy_25) in
                        {2641}new s_49[]: seed;
                        {2642}let shared_secret: element = (if v_511 then gxy_25 else dh_f(s_49)) in
                        {2643}let r: hpkeRole = R in
                        {2644}let salt: bitstring = zero in
                        {2645}let label_1: label = hpke_info_hash in
                        {2646}let k_42: bitstring = (label_1,info) in
                        {2647}let info_hash: bitstring = catch-fail(hmac(ech_h_2,salt,k_42)) in
                        {2648}let v_512: bool = not-caught-fail(info_hash) in
                        {2649}let label_2: label = (if v_512 then hpke_secret else caught-fail) in
                        {2650}let ikm: bitstring = (if v_512 then zero else caught-fail) in
                        {2651}let k_43: bitstring = (if v_512 then (label_2,ikm) else caught-fail) in
                        {2652}let xsecret: bitstring = (if v_512 then catch-fail(hmac(ech_h_2,shared_secret,k_43)) else caught-fail) in
                        {2653}let v_513: bool = not-caught-fail(xsecret) in
                        {2654}let label_3: label = (if v_513 then hpke_key else caught-fail) in
                        {2655}let x_174: bitstring = (if v_513 then (label_3,info_hash) else caught-fail) in
                        {2656}let key: aead_key = (if v_513 then catch-fail(hmac(ech_h_2,xsecret,x_174)) else caught-fail) in
                        {2657}let v_514: bool = not-caught-fail(key) in
                        {2658}let label_4: label = (if v_514 then hpke_base_nonce else caught-fail) in
                        {2659}let x_175: bitstring = (if v_514 then (label_4,info_hash) else caught-fail) in
                        {2660}let base_nonce: bitstring = (if v_514 then catch-fail(hmac(ech_h_2,xsecret,x_175)) else caught-fail) in
                        {2661}let v_515: bool = not-caught-fail(base_nonce) in
                        {2662}let context: hpkeContext = (if v_512 then (if v_513 then (if v_514 then (if v_515 then hpke_context(r,key,base_nonce) else fail-any) else fail-any) else fail-any) else fail-any) in
                        {2663}let v_516: msg = o_client_hello in
                        {2664}let v_517: bool = (success?(1-proj-nego(2-proj-CH(v_516))) && success?(1-proj-CH(v_516))) in
                        {2665}let psk_ext_28: preSharedKeyExt = (if v_517 then 8-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2666}let extra_ext_5: extraExt = (if v_517 then 7-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2667}let ech_ext_8: echExt = (if v_517 then 6-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2668}let sni_ext_3: sniExt = (if v_517 then 5-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2669}let kex_ext_7: keyShareExt = (if v_517 then 4-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2670}let a_alg_9: aead_alg = (if v_517 then 3-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2671}let h_alg_11: hash_alg = (if v_517 then 2-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2672}let v_518: TLS_version = (if v_517 then 1-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2673}let r_1: bytes32 = (if v_517 then 1-proj-CH(v_516) else caught-fail) in
                        {2674}let v_519: echExt = (if v_517 then catch-fail(ech_ext_8) else caught-fail) in
                        {2675}let v_520: bool = (not-caught-fail(v_519) && success?(1-proj-ECHClientHelloOuter(v_519))) in
                        {2676}let payload_1: bitstring = (if v_520 then 5-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2677}let enc_1: element = (if v_520 then 4-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2678}let config_id_2: configId = (if v_520 then 3-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2679}let a_alg_ech: aead_alg = (if v_520 then 2-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2680}let h_alg_ech: hash_alg = (if v_520 then 1-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2681}let ech_ext': echExt = (if v_520 then ECHClientHelloOuter(h_alg_ech,a_alg_ech,config_id_2,enc_1,zero) else caught-fail) in
                        {2682}let client_hello_AAD: msg = (if v_517 then (if v_520 then CH(r_1,nego(v_518,h_alg_11,a_alg_9,kex_ext_7,sni_ext_3,ech_ext',extra_ext_5,psk_ext_28)) else fail-any) else fail-any) in
                        {2683}let n: nat = 1 in
                        {2684}let v_521: hpkeContext = context in
                        {2685}let v_522: bool = ((R =nf 1-proj-hpke_context(v_521)) && success?(1-proj-hpke_context(v_521))) in
                        {2686}let base_nonce_1: bitstring = (if v_522 then 3-proj-hpke_context(v_521) else caught-fail) in
                        {2687}let key_1: aead_key = (if v_522 then 2-proj-hpke_context(v_521) else caught-fail) in
                        {2688}let i_client_hello: msg = (if v_522 then aead_dec(ech_a_2,key_1,(base_nonce_1,n),client_hello_AAD,payload) else fail-any) in
                        (
                            {2689}let CH(cr'_10: bytes32,nego(=TLS13,c_h_alg': hash_alg,c_a_alg': aead_alg,kex_ext': keyShareExt,SNI(i_dom: domain),=ECHClientHelloInner,extra_ext': extraExt,psk_ext': preSharedKeyExt)) = i_client_hello in
                            (
                                {2690}event ServerEchAcceptance(id_server_5,true);
                                {2691}let ee_msg_14: msg = EE(empty_ech_ext,extra_ext_2) in
                                {2692}let CH(cr_18: bytes32,nego(=TLS13,=backend_h,=backend_a,kex_ext_8: keyShareExt,SNI(i_dom_1: domain),=ECHClientHelloInner,extra_ext_6: extraExt,psk_ext_29: preSharedKeyExt)) = i_client_hello in
                                (
                                    {2693}let (=true,client_kex_ext(DHE_group(=backend_g))) = (false,kex_ext_8) in
                                    (
                                        {2694}let hrr_mode_1: params = nego(TLS13,backend_h,backend_a,hrr_kex_ext(backend_g),empty_sni_ext,ECHHelloRetryRequest(zero8),empty_extra_ext,empty_psk_ext) in
                                        {2695}let hrr: msg = SH(B32(HRR24,HRR8),hrr_mode_1) in
                                        {2696}let cur_log_9: bitstring = ((zero,i_client_hello),hrr) in
                                        {2697}let transcript_hrr_ech_conf: bitstring = catch-fail(hash(backend_h,cur_log_9)) in
                                        {2698}let v_523: bool = not-caught-fail(transcript_hrr_ech_conf) in
                                        {2699}let s_50: bitstring = (if v_523 then zero else caught-fail) in
                                        {2700}let k_44: bitstring = (if v_523 then catch-fail(b32_2_b(get_random(i_client_hello))) else caught-fail) in
                                        {2701}let v_524: bool = not-caught-fail(k_44) in
                                        {2702}let k_45: bitstring = (if v_523 then catch-fail((if v_524 then hmac(backend_h,s_50,k_44) else fail-any)) else caught-fail) in
                                        {2703}let v_525: bool = not-caught-fail(k_45) in
                                        {2704}let l_158: label = (if v_525 then hrr_ech_accept_confirmation else caught-fail) in
                                        {2705}let x_176: bitstring = (if v_525 then (l_158,cur_log_9) else caught-fail) in
                                        {2706}let hrr_accept_confirmation: bytes8 = catch-fail((if v_523 then crop_into_bytes8((if v_525 then hmac(backend_h,k_45,x_176) else fail-any)) else fail-any)) in
                                        {2707}let v_526: bool = not-caught-fail(hrr_accept_confirmation) in
                                        {2708}let hrr_mode_2: params = (if v_526 then nego(TLS13,backend_h,backend_a,hrr_kex_ext(backend_g),empty_sni_ext,ECHHelloRetryRequest(hrr_accept_confirmation),empty_extra_ext,empty_psk_ext) else caught-fail) in
                                        {2709}let hrr_msg: msg = (if v_526 then SH(B32(HRR24,HRR8),hrr_mode_2) else fail-any) in
                                        {2710}out(io, hrr_msg);
                                        {2711}let ech_config(id_conf: configId,ech_g_3: group,pkR_3: element,s_dom_15: domain,ech_h_3: hash_alg,ech_a_3: aead_alg) = ech_conf in
                                        {2712}in(io, o_client_hello_1: msg);
                                        {2713}let CH(cr'_11: bytes32,nego(=TLS13,h_alg': hash_alg,a_alg': aead_alg,kex_ext'_1: keyShareExt,SNI(=s_dom_15),ech_ext_9: echExt,extra_ext'_1: extraExt,psk_ext'_1: preSharedKeyExt)) = o_client_hello_1 in
                                        (
                                            {2714}if (ech_ext_9 = empty_ech_ext) then
                                                {2715}out(io, missing_extension)
                                            else
                                                {2716}let ECHClientHelloOuter(=ech_h_3,=ech_a_3,=id_conf,=zero,payload_2: bitstring) = ech_ext_9 in
                                                (
                                                    {2717}let v_527: msg = o_client_hello_1 in
                                                    {2718}let v_528: bool = (success?(1-proj-nego(2-proj-CH(v_527))) && success?(1-proj-CH(v_527))) in
                                                    {2719}let psk_ext_30: preSharedKeyExt = (if v_528 then 8-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2720}let extra_ext_7: extraExt = (if v_528 then 7-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2721}let ech_ext_10: echExt = (if v_528 then 6-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2722}let sni_ext_4: sniExt = (if v_528 then 5-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2723}let kex_ext_9: keyShareExt = (if v_528 then 4-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2724}let a_alg_10: aead_alg = (if v_528 then 3-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2725}let h_alg_12: hash_alg = (if v_528 then 2-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2726}let v_529: TLS_version = (if v_528 then 1-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2727}let r_2: bytes32 = (if v_528 then 1-proj-CH(v_527) else caught-fail) in
                                                    {2728}let v_530: echExt = (if v_528 then catch-fail(ech_ext_10) else caught-fail) in
                                                    {2729}let v_531: bool = (not-caught-fail(v_530) && success?(1-proj-ECHClientHelloOuter(v_530))) in
                                                    {2730}let payload_3: bitstring = (if v_531 then 5-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2731}let enc_2: element = (if v_531 then 4-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2732}let config_id_3: configId = (if v_531 then 3-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2733}let a_alg_ech_1: aead_alg = (if v_531 then 2-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2734}let h_alg_ech_1: hash_alg = (if v_531 then 1-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2735}let ech_ext'_1: echExt = (if v_531 then ECHClientHelloOuter(h_alg_ech_1,a_alg_ech_1,config_id_3,enc_2,zero) else caught-fail) in
                                                    {2736}let client_hello_AAD_1: msg = (if v_528 then (if v_531 then CH(r_2,nego(v_529,h_alg_12,a_alg_10,kex_ext_9,sni_ext_4,ech_ext'_1,extra_ext_7,psk_ext_30)) else fail-any) else fail-any) in
                                                    {2737}let n_1: nat = 2 in
                                                    {2738}let v_532: hpkeContext = context in
                                                    {2739}let v_533: bool = ((R =nf 1-proj-hpke_context(v_532)) && success?(1-proj-hpke_context(v_532))) in
                                                    {2740}let base_nonce_2: bitstring = (if v_533 then 3-proj-hpke_context(v_532) else caught-fail) in
                                                    {2741}let key_2: aead_key = (if v_533 then 2-proj-hpke_context(v_532) else caught-fail) in
                                                    {2742}let i_client_hello': msg = (if v_533 then aead_dec(ech_a_3,key_2,(base_nonce_2,n_1),client_hello_AAD_1,payload_2) else fail-any) in
                                                    (
                                                        {2743}let CH(i_cr: bytes32,nego(=TLS13,i_h_alg: hash_alg,i_a_alg: aead_alg,i_kex_ext: keyShareExt,SNI(=i_dom_1),=ECHClientHelloInner,i_extra_ext: extraExt,i_psk_ext: preSharedKeyExt)) = i_client_hello' in
                                                            {2744}out(ch_server_SH, (id_server_5,ArgsServerSH(backend_g,backend_h,backend_a,i_dom_1,req_cert_3,true,use_psk_1,false,ee_msg_14,i_client_hello',((zero,i_client_hello),hrr_msg))))
                                                        else
                                                            {2745}out(io, illegal_parameter)
                                                    )
                                                    else
                                                        {2746}out(io, decrypt_error)
                                                )
                                                else
                                                    {2747}out(io, illegal_parameter)
                                        )
                                        else
                                            {2748}out(io, unexpected_message)
                                    )
                                    else
                                        {2749}let client_kex_ext(DHE_kex(=backend_g,gx_12: element)) = kex_ext_8 in
                                            {2750}out(ch_server_SH, (id_server_5,ArgsServerSH(backend_g,backend_h,backend_a,i_dom_1,req_cert_3,true,use_psk_1,true,ee_msg_14,i_client_hello,zero)))
                                        else
                                            {2751}out(io, handshake_failure)
                                )
                                else
                                    {2752}out(io, handshake_failure)
                            )
                            else
                                {2753}out(io, illegal_parameter)
                        )
                        else
                            {2754}event ServerEchAcceptance(id_server_5,false);
                            {2755}let ee_msg_15: msg = EE(retry_ech_ext,extra_ext_2) in
                            {2756}let CH(cr_19: bytes32,nego(=TLS13,=tls_h_1,=tls_a_1,kex_ext_10: keyShareExt,SNI(=s_dom_13),ech_ext_11: echExt,extra_ext_8: extraExt,psk_ext_31: preSharedKeyExt)) = o_client_hello in
                            (
                                {2757}let (=true,client_kex_ext(DHE_group(=tls_g_1))) = (false,kex_ext_10) in
                                (
                                    {2758}let hrr_mode_3: params = nego(TLS13,tls_h_1,tls_a_1,hrr_kex_ext(tls_g_1),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext) in
                                    {2759}let hello_retry_request_1: msg = SH(B32(HRR24,HRR8),hrr_mode_3) in
                                    {2760}out(io, hello_retry_request_1);
                                    {2761}let cur_log_HRR_1: bitstring = ((zero,o_client_hello),hello_retry_request_1) in
                                    {2762}in(io, client_hello'_10: msg);
                                    {2763}let CH(cr'_12: bytes32,offer'_1: params) = client_hello'_10 in
                                        {2764}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_13,req_cert_3,false,use_psk_1,false,ee_msg_15,client_hello'_10,cur_log_HRR_1)))
                                    else
                                        {2765}out(io, unexpected_message)
                                )
                                else
                                    {2766}let client_kex_ext(DHE_kex(=tls_g_1,gx_13: element)) = kex_ext_10 in
                                        {2767}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_13,req_cert_3,false,use_psk_1,true,ee_msg_15,o_client_hello,zero)))
                                    else
                                        {2768}out(io, handshake_failure)
                            )
                            else
                                {2769}out(io, handshake_failure)
                    )
                    else
                        {2770}event ServerEchAcceptance(id_server_5,false);
                        {2771}let ee_msg_16: msg = EE(retry_ech_ext,extra_ext_2) in
                        {2772}let CH(cr_20: bytes32,nego(=TLS13,=tls_h_1,=tls_a_1,kex_ext_11: keyShareExt,SNI(=s_dom_13),ech_ext_12: echExt,extra_ext_9: extraExt,psk_ext_32: preSharedKeyExt)) = o_client_hello in
                        (
                            {2773}let (=true,client_kex_ext(DHE_group(=tls_g_1))) = (false,kex_ext_11) in
                            (
                                {2774}let hrr_mode_4: params = nego(TLS13,tls_h_1,tls_a_1,hrr_kex_ext(tls_g_1),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext) in
                                {2775}let hello_retry_request_2: msg = SH(B32(HRR24,HRR8),hrr_mode_4) in
                                {2776}out(io, hello_retry_request_2);
                                {2777}let cur_log_HRR_2: bitstring = ((zero,o_client_hello),hello_retry_request_2) in
                                {2778}in(io, client_hello'_11: msg);
                                {2779}let CH(cr'_13: bytes32,offer'_2: params) = client_hello'_11 in
                                    {2780}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_13,req_cert_3,false,use_psk_1,false,ee_msg_16,client_hello'_11,cur_log_HRR_2)))
                                else
                                    {2781}out(io, unexpected_message)
                            )
                            else
                                {2782}let client_kex_ext(DHE_kex(=tls_g_1,gx_14: element)) = kex_ext_11 in
                                    {2783}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_13,req_cert_3,false,use_psk_1,true,ee_msg_16,o_client_hello,zero)))
                                else
                                    {2784}out(io, handshake_failure)
                        )
                        else
                            {2785}out(io, handshake_failure)
                )
                else
                    {2786}out(io, illegal_parameter)
        )
        else
            {2788}out(io, handshake_failure)
    )
    else
        {2789}out(io, unexpected_message)
) | (
    {2790}!
    {2791}in(io, ClientA_1: domain);
    {2792}in(io, ClientB_1: domain);
    {2793}let c_dom_6: domain = choice[ClientA_1,ClientB_1] in
    {2794}in(io, s_dom_16: domain);
    {2795}event Same(s_dom_16);
    {2796}new s_51: seed;
    {2797}let id_client_4: idProc = idClientDiff(s_51) in
    {2798}let @8_tls_h: hash_alg = id_hash(StrongHash,1) in
    {2799}let @8_tls_a: aead_alg = id_aead(StrongAE,1) in
    {2800}let @8_tls_g: group = id_g(StrongDH,1) in
    {2801}let @8_use_psk: bool = false in
    {2802}in(io, @8_send_kex: bool);
    {2803}event Same(@8_send_kex);
    {2804}new @8_st[]: stamp;
    {2805}event PreciseInput(@8_st,@8_send_kex);
    {2806}let () = () in
    {2807}let @8_comp_psk: bool = false in
    {2808}let send_kex_4: bool = (not(false) || @8_send_kex) in
    {2809}let cur_log_10: bitstring = zero in
    {2810}let old_psk_data_1: bitstring = zero in
    {2811}new rand24_5[]: bytes24;
    {2812}new rand8_5[]: bytes8;
    {2813}let cr_21: bytes32 = B32(rand24_5,rand8_5) in
    {2814}new s_52[]: seed;
    {2815}let gx_15: element = dh_pub(@8_tls_g,dh_k(s_52)) in
    {2816}let v_534: bitstring = (dh_k(s_52),gx_15) in
    {2817}let v_535: bool = success?(1-proj-2-tuple(v_534)) in
    {2818}let gx_16: element = (if v_535 then 2-proj-2-tuple(v_534) else caught-fail) in
    {2819}let x_177: bitstring = (if v_535 then 1-proj-2-tuple(v_534) else caught-fail) in
    {2820}let kex_4: kex_alg = (if v_535 then (if send_kex_4 then DHE_kex(@8_tls_g,gx_16) else DHE_group(@8_tls_g)) else caught-fail) in
    {2821}let (kex_ext_12: keyShareExt,kex_data_7: bitstring) = (if v_535 then (client_kex_ext(kex_4),(x_177,@8_tls_g)) else fail-any) in
    {2822}let ech_ext_13: echExt = empty_ech_ext in
    {2823}let extra_30: extraExt = empty_extra_ext in
    {2824}if @8_use_psk then
    (
        {2825}let (psk_65: preSharedKey,id_31: identityPsk,old_es_4: bitstring,is_safe_24: bool) = old_psk_data_1 in
        (
            {2826}let offer_22: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_16),ech_ext_13,extra_30,trunc_client_psk_ext(id_31)) in
            {2827}let cur_log'_10: bitstring = (cur_log_10,CH(cr_21,offer_22)) in
            {2828}let s_53: bitstring = zero in
            {2829}let k_46: bitstring = catch-fail(psk2b(psk_65)) in
            {2830}let v_536: bool = not-caught-fail(k_46) in
            {2831}let early_secret_41: bitstring = catch-fail((if v_536 then hmac(@8_tls_h,s_53,k_46) else fail-any)) in
            {2832}let v_537: bool = not-caught-fail(early_secret_41) in
            {2833}let l_159: label = (if v_537 then tls13_ext_res_binder else caught-fail) in
            {2834}let m_53: bitstring = (if v_537 then zero else caught-fail) in
            {2835}let h_157: bitstring = (if v_537 then catch-fail(hash(@8_tls_h,m_53)) else caught-fail) in
            {2836}let v_538: bool = not-caught-fail(h_157) in
            {2837}let x_178: bitstring = (if v_538 then (l_159,h_157) else caught-fail) in
            {2838}let binder_key_27: bitstring = (if v_537 then catch-fail((if v_538 then hmac(@8_tls_h,early_secret_41,x_178) else fail-any)) else caught-fail) in
            {2839}let v_539: bool = not-caught-fail(binder_key_27) in
            {2840}let v_540: bitstring = catch-fail((if v_537 then (if v_539 then (early_secret_41,binder_key_27) else fail-any) else fail-any)) in
            {2841}let v_541: bool = (not-caught-fail(v_540) && success?(1-proj-2-tuple(v_540))) in
            {2842}let kb_27: mac_key = (if v_541 then 2-proj-2-tuple(v_540) else caught-fail) in
            {2843}let es_41: bitstring = (if v_541 then 1-proj-2-tuple(v_540) else caught-fail) in
            {2844}let binders_9: bitstring = (if v_541 then catch-fail(hmac(@8_tls_h,kb_27,cur_log'_10)) else caught-fail) in
            {2845}let v_542: bool = not-caught-fail(binders_9) in
            {2846}let v_543: bitstring = catch-fail((if v_541 then (if v_542 then (client_psk_ext(id_31,binders_9),(psk_65,id_31,es_41,is_safe_24)) else fail-any) else fail-any)) in
            {2847}let v_544: bool = (not-caught-fail(v_543) && success?(1-proj-2-tuple(v_543))) in
            {2848}let psk_data_15: bitstring = (if v_544 then 2-proj-2-tuple(v_543) else caught-fail) in
            {2849}let psk_ext_33: preSharedKeyExt = (if v_544 then 1-proj-2-tuple(v_543) else caught-fail) in
            {2850}let offer_23: params = (if v_544 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_33) else caught-fail) in
            {2851}let (client_hello_7: msg,cr_22: bytes32,kex_data_8: bitstring,psk_data_16: bitstring) = (if v_544 then (CH(cr_21,offer_23),cr_21,kex_data_7,psk_data_15) else fail-any) in
            {2852}event ClientOffersAead(cr_22,@8_tls_a);
            {2853}event ClientOffersHash(cr_22,@8_tls_h);
            {2854}event ClientOffersGroup(cr_22,@8_tls_g);
            {2855}out(io, client_hello_7);
            {2856}let cur_log2_31: bitstring = (cur_log_10,client_hello_7) in
            {2857}let (psk_66: preSharedKey,id_32: identityPsk,es_42: bitstring,safe_psk_18: bool) = psk_data_16 in
            (
                {2858}if (false && (psk_66 ≠ NoPsk)) then
                {2859}let client_hello_8: bitstring = (zero,client_hello_7) in
                {2860}let l_160: label = tls13_client_early_traffic_secret in
                {2861}let h_158: bitstring = catch-fail(hash(@8_tls_h,client_hello_8)) in
                {2862}let v_545: bool = not-caught-fail(h_158) in
                {2863}let x_179: bitstring = (if v_545 then (l_160,h_158) else caught-fail) in
                {2864}let atsc0_4: bitstring = catch-fail((if v_545 then hmac(@8_tls_h,es_42,x_179) else fail-any)) in
                {2865}let v_546: bool = not-caught-fail(atsc0_4) in
                {2866}let l_161: label = (if v_546 then tls13_key else caught-fail) in
                {2867}let h_159: bitstring = (if v_546 then zero else caught-fail) in
                {2868}let x_180: bitstring = (if v_546 then (l_161,h_159) else caught-fail) in
                {2869}let kc0_4: bitstring = (if v_546 then catch-fail(hmac(@8_tls_h,atsc0_4,x_180)) else caught-fail) in
                {2870}let v_547: bool = not-caught-fail(kc0_4) in
                {2871}let l_162: label = (if v_547 then tls13_early_exporter_master_secret else caught-fail) in
                {2872}let h_160: bitstring = (if v_547 then catch-fail(hash(@8_tls_h,client_hello_8)) else caught-fail) in
                {2873}let v_548: bool = not-caught-fail(h_160) in
                {2874}let x_181: bitstring = (if v_548 then (l_162,h_160) else caught-fail) in
                {2875}let ems0_8: bitstring = (if v_547 then catch-fail((if v_548 then hmac(@8_tls_h,es_42,x_181) else fail-any)) else caught-fail) in
                {2876}let v_549: bool = not-caught-fail(ems0_8) in
                {2877}let (wkc0_4: aead_key,ems0_9: bitstring) = (if v_546 then (if v_547 then (if v_549 then (kc0_4,ems0_8) else fail-any) else fail-any) else fail-any) in
                {2878}!
                {2879}in(io, (i_4: nat,ad_4: bitstring));
                {2880}if is_nat(i_4) then
                {2881}new msg_ed_3[]: bitstring;
                {2882}let enc_ed_3: bitstring = aead_enc(@8_tls_a,wkc0_4,i_4,ad_4,msg_ed_3) in
                {2883}new st_13: stamp;
                {2884}event ClientSequenceClient0RTTDataWriteKey(id_client_4,st_13,i_4);
                {2885}event ClientSends0(id_client_4,cr_22,psk_66,i_4,ad_4,msg_ed_3);
                {2886}out(io, enc_ed_3)
            ) | (
                {2887}in(io, server_hello_4: msg);
                {2888}let SH(sr_23: bytes32,mode_15: params) = server_hello_4 in
                (
                    {2889}event ClientEchAcceptance(id_client_4,false);
                    {2890}if (false && (sr_23 = B32(HRR24,HRR8))) then
                    (
                        {2891}if ((mode_15 = nego(TLS13,@8_tls_h,@8_tls_a,hrr_kex_ext(@8_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex_4 ≠ true)) then
                        (
                            {2892}let cur_log3_5: bitstring = (cur_log2_31,server_hello_4) in
                            {2893}let send_kex_5: bool = true in
                            {2894}new rand24_6[]: bytes24;
                            {2895}new rand8_6[]: bytes8;
                            {2896}let cr_23: bytes32 = B32(rand24_6,rand8_6) in
                            {2897}new s_54[]: seed;
                            {2898}let gx_17: element = dh_pub(@8_tls_g,dh_k(s_54)) in
                            {2899}let v_550: bitstring = (dh_k(s_54),gx_17) in
                            {2900}let v_551: bool = success?(1-proj-2-tuple(v_550)) in
                            {2901}let gx_18: element = (if v_551 then 2-proj-2-tuple(v_550) else caught-fail) in
                            {2902}let x_182: bitstring = (if v_551 then 1-proj-2-tuple(v_550) else caught-fail) in
                            {2903}let kex_5: kex_alg = (if v_551 then (if send_kex_5 then DHE_kex(@8_tls_g,gx_18) else DHE_group(@8_tls_g)) else caught-fail) in
                            {2904}let (kex_ext_13: keyShareExt,kex_data_9: bitstring) = (if v_551 then (client_kex_ext(kex_5),(x_182,@8_tls_g)) else fail-any) in
                            {2905}let ech_ext_14: echExt = empty_ech_ext in
                            {2906}let extra_31: extraExt = empty_extra_ext in
                            {2907}if @8_use_psk then
                            (
                                {2908}let (psk_67: preSharedKey,id_33: identityPsk,old_es_5: bitstring,is_safe_25: bool) = psk_data_16 in
                                (
                                    {2909}let offer_24: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_16),ech_ext_14,extra_31,trunc_client_psk_ext(id_33)) in
                                    {2910}let cur_log'_11: bitstring = (cur_log3_5,CH(cr_23,offer_24)) in
                                    {2911}let s_55: bitstring = zero in
                                    {2912}let k_47: bitstring = catch-fail(psk2b(psk_67)) in
                                    {2913}let v_552: bool = not-caught-fail(k_47) in
                                    {2914}let early_secret_42: bitstring = catch-fail((if v_552 then hmac(@8_tls_h,s_55,k_47) else fail-any)) in
                                    {2915}let v_553: bool = not-caught-fail(early_secret_42) in
                                    {2916}let l_163: label = (if v_553 then tls13_ext_res_binder else caught-fail) in
                                    {2917}let m_54: bitstring = (if v_553 then zero else caught-fail) in
                                    {2918}let h_161: bitstring = (if v_553 then catch-fail(hash(@8_tls_h,m_54)) else caught-fail) in
                                    {2919}let v_554: bool = not-caught-fail(h_161) in
                                    {2920}let x_183: bitstring = (if v_554 then (l_163,h_161) else caught-fail) in
                                    {2921}let binder_key_28: bitstring = (if v_553 then catch-fail((if v_554 then hmac(@8_tls_h,early_secret_42,x_183) else fail-any)) else caught-fail) in
                                    {2922}let v_555: bool = not-caught-fail(binder_key_28) in
                                    {2923}let v_556: bitstring = catch-fail((if v_553 then (if v_555 then (early_secret_42,binder_key_28) else fail-any) else fail-any)) in
                                    {2924}let v_557: bool = (not-caught-fail(v_556) && success?(1-proj-2-tuple(v_556))) in
                                    {2925}let kb_28: mac_key = (if v_557 then 2-proj-2-tuple(v_556) else caught-fail) in
                                    {2926}let es_43: bitstring = (if v_557 then 1-proj-2-tuple(v_556) else caught-fail) in
                                    {2927}let binders_10: bitstring = (if v_557 then catch-fail(hmac(@8_tls_h,kb_28,cur_log'_11)) else caught-fail) in
                                    {2928}let v_558: bool = not-caught-fail(binders_10) in
                                    {2929}let v_559: bitstring = catch-fail((if v_557 then (if v_558 then (client_psk_ext(id_33,binders_10),(psk_67,id_33,es_43,is_safe_25)) else fail-any) else fail-any)) in
                                    {2930}let v_560: bool = (not-caught-fail(v_559) && success?(1-proj-2-tuple(v_559))) in
                                    {2931}let psk_data_17: bitstring = (if v_560 then 2-proj-2-tuple(v_559) else caught-fail) in
                                    {2932}let psk_ext_34: preSharedKeyExt = (if v_560 then 1-proj-2-tuple(v_559) else caught-fail) in
                                    {2933}let offer_25: params = (if v_560 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_34) else caught-fail) in
                                    {2934}let (client_hello'_12: msg,cr'_14: bytes32,kex_data'_9: bitstring,psk_data'_9: bitstring) = (if v_560 then (CH(cr_23,offer_25),cr_23,kex_data_9,psk_data_17) else fail-any) in
                                    {2935}event ClientOffersAead(cr'_14,@8_tls_a);
                                    {2936}event ClientOffersHash(cr'_14,@8_tls_h);
                                    {2937}event ClientOffersGroup(cr'_14,@8_tls_g);
                                    {2938}out(io, client_hello'_12);
                                    {2939}let cur_log4_9: bitstring = (cur_log3_5,client_hello'_12) in
                                    {2940}in(io, server_hello'_9: msg);
                                    {2941}let SH(sr'_9: bytes32,mode'_9: params) = server_hello'_9 in
                                    (
                                        {2942}if (sr'_9 = B32(HRR24,HRR8)) then
                                            {2943}out(io, unexpected_message)
                                        else
                                            {2944}let (x_184: bitstring,g_13: group) = kex_data'_9 in
                                            {2945}let (psk_offer_12: preSharedKey,id_offer_12: identityPsk,es_offer_12: bitstring,is_safe_offer_12: bool) = psk_data'_9 in
                                            {2946}event Client_PSKOffer(id_client_4,psk_offer_12,id_offer_12,is_safe_offer_12);
                                            {2947}event Client_Rand_client(id_client_4,cr'_14);
                                            {2948}event Client_DH_client(id_client_4,dh_pub(g_13,x_184));
                                            {2949}event Client_server_domain(id_client_4,s_dom_16);
                                            {2950}let SH(sr_24: bytes32,mode_16: params) = server_hello'_9 in
                                            {2951}event Client_Rand_server(id_client_4,sr_24);
                                            {2952}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_13,gy_13: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_35: preSharedKeyExt) = mode_16 in
                                            (
                                                {2953}let cur_log2_32: bitstring = (cur_log4_9,server_hello'_9) in
                                                {2954}event Client_DH_server(id_client_4,gy_13);
                                                {2955}let v_561: bool = (psk_ext_35 = empty_psk_ext) in
                                                {2956}let psk_68: preSharedKey = (if v_561 then NoPsk else caught-fail) in
                                                {2957}let s_56: bitstring = (if v_561 then zero else caught-fail) in
                                                {2958}let k_48: bitstring = (if v_561 then catch-fail(psk2b(psk_68)) else caught-fail) in
                                                {2959}let v_562: bool = not-caught-fail(k_48) in
                                                {2960}let early_secret_43: bitstring = (if v_561 then catch-fail((if v_562 then hmac(@8_tls_h,s_56,k_48) else fail-any)) else caught-fail) in
                                                {2961}let v_563: bool = not-caught-fail(early_secret_43) in
                                                {2962}let l_164: label = (if v_563 then tls13_ext_res_binder else caught-fail) in
                                                {2963}let m_55: bitstring = (if v_563 then zero else caught-fail) in
                                                {2964}let h_162: bitstring = (if v_563 then catch-fail(hash(@8_tls_h,m_55)) else caught-fail) in
                                                {2965}let v_564: bool = not-caught-fail(h_162) in
                                                {2966}let x_185: bitstring = (if v_564 then (l_164,h_162) else caught-fail) in
                                                {2967}let binder_key_29: bitstring = (if v_563 then catch-fail((if v_564 then hmac(@8_tls_h,early_secret_43,x_185) else fail-any)) else caught-fail) in
                                                {2968}let v_565: bool = not-caught-fail(binder_key_29) in
                                                {2969}let v_566: bitstring = (if v_561 then catch-fail((if v_563 then (if v_565 then (early_secret_43,binder_key_29) else fail-any) else fail-any)) else caught-fail) in
                                                {2970}let v_567: bool = (not-caught-fail(v_566) && success?(1-proj-2-tuple(v_566))) in
                                                {2971}let kb_29: mac_key = (if v_567 then 2-proj-2-tuple(v_566) else caught-fail) in
                                                {2972}let es_44: bitstring = (if v_567 then 1-proj-2-tuple(v_566) else caught-fail) in
                                                {2973}let v_568: bitstring = (if not(v_561) then catch-fail(psk_data'_9) else caught-fail) in
                                                {2974}let v_569: bool = (not-caught-fail(v_568) && success?(1-proj-4-tuple(v_568))) in
                                                {2975}let is_safe_26: bool = (if v_569 then 4-proj-4-tuple(v_568) else caught-fail) in
                                                {2976}let es_45: bitstring = (if v_569 then 3-proj-4-tuple(v_568) else caught-fail) in
                                                {2977}let id_34: identityPsk = (if v_569 then 2-proj-4-tuple(v_568) else caught-fail) in
                                                {2978}let psk_69: preSharedKey = (if v_569 then 1-proj-4-tuple(v_568) else caught-fail) in
                                                {2979}let (psk_70: preSharedKey,early_secret_44: bitstring,valid_12: bool,safe_psk_19: bool) = (if v_561 then (if v_567 then (NoPsk,es_44,true,false) else fail-any) else (if v_569 then (psk_69,es_45,((psk_69 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_35)),is_safe_26) else fail-any)) in
                                                {2980}event Client_PSKChoosen(id_client_4,psk_70,safe_psk_19);
                                                {2981}if valid_12 then
                                                (
                                                    {2982}let gxy_26: element = catch-fail(dh_decap_fun(g_13,gy_13,x_184)) in
                                                    {2983}let v_570: bool = not-caught-fail(gxy_26) in
                                                    {2984}new s_57[]: seed;
                                                    {2985}let gxy_27: element = (if v_570 then gxy_26 else dh_f(s_57)) in
                                                    {2986}event Client_DH_gxy(id_client_4,gxy_27);
                                                    {2987}let l_165: label = tls13_derived in
                                                    {2988}let m_56: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {2989}let v_571: bool = not-caught-fail(m_56) in
                                                    {2990}let h_163: bitstring = (if v_571 then catch-fail(hash(@8_tls_h,m_56)) else caught-fail) in
                                                    {2991}let v_572: bool = not-caught-fail(h_163) in
                                                    {2992}let x_186: bitstring = (if v_572 then (l_165,h_163) else caught-fail) in
                                                    {2993}let extra_32: bitstring = catch-fail((if v_571 then (if v_572 then hmac(@8_tls_h,early_secret_44,x_186) else fail-any) else fail-any)) in
                                                    {2994}let v_573: bool = not-caught-fail(extra_32) in
                                                    {2995}let handshake_secret_13: bitstring = (if v_573 then hmac(@8_tls_h,extra_32,gxy_27) else fail-any) in
                                                    {2996}let l_166: label = tls13_derived in
                                                    {2997}let m_57: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {2998}let v_574: bool = not-caught-fail(m_57) in
                                                    {2999}let h_164: bitstring = (if v_574 then catch-fail(hash(@8_tls_h,m_57)) else caught-fail) in
                                                    {3000}let v_575: bool = not-caught-fail(h_164) in
                                                    {3001}let x_187: bitstring = (if v_575 then (l_166,h_164) else caught-fail) in
                                                    {3002}let extra_33: bitstring = catch-fail((if v_574 then (if v_575 then hmac(@8_tls_h,handshake_secret_13,x_187) else fail-any) else fail-any)) in
                                                    {3003}let v_576: bool = not-caught-fail(extra_33) in
                                                    {3004}let k_49: bitstring = (if v_576 then zero else caught-fail) in
                                                    {3005}let master_secret_33: bitstring = (if v_576 then catch-fail(hmac(@8_tls_h,handshake_secret_13,k_49)) else caught-fail) in
                                                    {3006}let v_577: bool = not-caught-fail(master_secret_33) in
                                                    {3007}let l_167: label = (if v_577 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3008}let h_165: bitstring = (if v_577 then catch-fail(hash(@8_tls_h,cur_log2_32)) else caught-fail) in
                                                    {3009}let v_578: bool = not-caught-fail(h_165) in
                                                    {3010}let x_188: bitstring = (if v_578 then (l_167,h_165) else caught-fail) in
                                                    {3011}let client_hts_13: bitstring = (if v_577 then catch-fail((if v_578 then hmac(@8_tls_h,handshake_secret_13,x_188) else fail-any)) else caught-fail) in
                                                    {3012}let v_579: bool = not-caught-fail(client_hts_13) in
                                                    {3013}let l_168: label = (if v_579 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3014}let h_166: bitstring = (if v_579 then catch-fail(hash(@8_tls_h,cur_log2_32)) else caught-fail) in
                                                    {3015}let v_580: bool = not-caught-fail(h_166) in
                                                    {3016}let x_189: bitstring = (if v_580 then (l_168,h_166) else caught-fail) in
                                                    {3017}let server_hts_13: bitstring = (if v_579 then catch-fail((if v_580 then hmac(@8_tls_h,handshake_secret_13,x_189) else fail-any)) else caught-fail) in
                                                    {3018}let v_581: bool = not-caught-fail(server_hts_13) in
                                                    {3019}let l_169: label = (if v_581 then tls13_key else caught-fail) in
                                                    {3020}let h_167: bitstring = (if v_581 then zero else caught-fail) in
                                                    {3021}let x_190: bitstring = (if v_581 then (l_169,h_167) else caught-fail) in
                                                    {3022}let client_wkh_13: bitstring = (if v_581 then catch-fail(hmac(@8_tls_h,client_hts_13,x_190)) else caught-fail) in
                                                    {3023}let v_582: bool = not-caught-fail(client_wkh_13) in
                                                    {3024}let l_170: label = (if v_582 then tls13_key else caught-fail) in
                                                    {3025}let h_168: bitstring = (if v_582 then zero else caught-fail) in
                                                    {3026}let x_191: bitstring = (if v_582 then (l_170,h_168) else caught-fail) in
                                                    {3027}let server_wkh_13: bitstring = (if v_582 then catch-fail(hmac(@8_tls_h,server_hts_13,x_191)) else caught-fail) in
                                                    {3028}let v_583: bool = not-caught-fail(server_wkh_13) in
                                                    {3029}let l_171: label = (if v_583 then tls13_finished else caught-fail) in
                                                    {3030}let h_169: bitstring = (if v_583 then zero else caught-fail) in
                                                    {3031}let x_192: bitstring = (if v_583 then (l_171,h_169) else caught-fail) in
                                                    {3032}let client_fk_13: bitstring = (if v_583 then catch-fail(hmac(@8_tls_h,client_hts_13,x_192)) else caught-fail) in
                                                    {3033}let v_584: bool = not-caught-fail(client_fk_13) in
                                                    {3034}let l_172: label = (if v_584 then tls13_finished else caught-fail) in
                                                    {3035}let h_170: bitstring = (if v_584 then zero else caught-fail) in
                                                    {3036}let x_193: bitstring = (if v_584 then (l_172,h_170) else caught-fail) in
                                                    {3037}let server_fk_13: bitstring = (if v_584 then catch-fail(hmac(@8_tls_h,server_hts_13,x_193)) else caught-fail) in
                                                    {3038}let v_585: bool = not-caught-fail(server_fk_13) in
                                                    {3039}let (master_secret_34: bitstring,chk_20: aead_key,shk_19: aead_key,cfin_20: mac_key,sfin_19: mac_key) = (if v_576 then (if v_577 then (if v_579 then (if v_581 then (if v_582 then (if v_583 then (if v_584 then (if v_585 then (master_secret_33,client_wkh_13,server_wkh_13,client_fk_13,server_fk_13) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3040}event Client_chk(id_client_4,chk_20);
                                                    {3041}event Client_shk(id_client_4,shk_19);
                                                    {3042}event Client_cfin(id_client_4,cfin_20);
                                                    {3043}event Client_sfin(id_client_4,sfin_19);
                                                    {3044}in(io, enc_ee_msg_12: bitstring);
                                                    {3045}let ee_msg_17: msg = aead_dec(@8_tls_a,shk_19,0,zero,enc_ee_msg_12) in
                                                    {3046}let EE(ech_ee_12: echExt,extra_ee_12: extraExt) = ee_msg_17 in
                                                    {3047}let cur_log2_33: bitstring = (cur_log2_32,ee_msg_17) in
                                                    {3048}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_14,sr_24,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_70,safe_psk_19,@8_comp_psk,master_secret_34,chk_20,0,shk_19,1,cfin_20,sfin_19,cur_log2_33)))
                                                )
                                                else
                                                    {3049}out(io, illegal_parameter)
                                            )
                                            else
                                                {3050}out(io, illegal_parameter)
                                    )
                                    else
                                        {3051}out(io, unexpected_message)
                                )
                                else
                                    {3204}get pre_shared_keys(c_dom'_6: domain,=s_dom_16,=@8_tls_h,id_35: identityPsk,psk_71: preSharedKey,idP_8: idProc,is_safe_27: bool) in
                                    {3052}event Selected_one_time_used_psk(id_client_4,psk_71,is_safe_27);
                                    {3053}event Selected_psk(c_dom_6,c_dom'_6,idP_8,is_safe_27);
                                    {3054}event Selected_psk_no_missmatch(id_client_4,s_dom_16,@8_tls_h,psk_71,id_35);
                                    {3055}event Selected_psk_with_ID(c_dom_6,c_dom'_6,id_35,idP_8,is_safe_27);
                                    {3056}let v_586: bitstring = (id_35,psk_71,is_safe_27) in
                                    {3057}let v_587: bool = success?(1-proj-3-tuple(v_586)) in
                                    {3058}let is_safe_28: bool = (if v_587 then 3-proj-3-tuple(v_586) else caught-fail) in
                                    {3059}let psk_72: preSharedKey = (if v_587 then 2-proj-3-tuple(v_586) else caught-fail) in
                                    {3060}let id_36: identityPsk = (if v_587 then 1-proj-3-tuple(v_586) else caught-fail) in
                                    {3061}let offer_26: params = (if v_587 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_16),ech_ext_14,extra_31,trunc_client_psk_ext(id_36)) else caught-fail) in
                                    {3062}let cur_log'_12: bitstring = (if v_587 then (cur_log3_5,CH(cr_23,offer_26)) else caught-fail) in
                                    {3063}let s_58: bitstring = (if v_587 then zero else caught-fail) in
                                    {3064}let k_50: bitstring = (if v_587 then catch-fail(psk2b(psk_72)) else caught-fail) in
                                    {3065}let v_588: bool = not-caught-fail(k_50) in
                                    {3066}let early_secret_45: bitstring = (if v_587 then catch-fail((if v_588 then hmac(@8_tls_h,s_58,k_50) else fail-any)) else caught-fail) in
                                    {3067}let v_589: bool = not-caught-fail(early_secret_45) in
                                    {3068}let l_173: label = (if v_589 then tls13_ext_res_binder else caught-fail) in
                                    {3069}let m_58: bitstring = (if v_589 then zero else caught-fail) in
                                    {3070}let h_171: bitstring = (if v_589 then catch-fail(hash(@8_tls_h,m_58)) else caught-fail) in
                                    {3071}let v_590: bool = not-caught-fail(h_171) in
                                    {3072}let x_194: bitstring = (if v_590 then (l_173,h_171) else caught-fail) in
                                    {3073}let binder_key_30: bitstring = (if v_589 then catch-fail((if v_590 then hmac(@8_tls_h,early_secret_45,x_194) else fail-any)) else caught-fail) in
                                    {3074}let v_591: bool = not-caught-fail(binder_key_30) in
                                    {3075}let v_592: bitstring = (if v_587 then catch-fail((if v_589 then (if v_591 then (early_secret_45,binder_key_30) else fail-any) else fail-any)) else caught-fail) in
                                    {3076}let v_593: bool = (not-caught-fail(v_592) && success?(1-proj-2-tuple(v_592))) in
                                    {3077}let kb_30: mac_key = (if v_593 then 2-proj-2-tuple(v_592) else caught-fail) in
                                    {3078}let es_46: bitstring = (if v_593 then 1-proj-2-tuple(v_592) else caught-fail) in
                                    {3079}let binders_11: bitstring = (if v_593 then catch-fail(hmac(@8_tls_h,kb_30,cur_log'_12)) else caught-fail) in
                                    {3080}let v_594: bool = not-caught-fail(binders_11) in
                                    {3081}let v_595: bitstring = catch-fail((if v_587 then (if v_593 then (if v_594 then (client_psk_ext(id_36,binders_11),(psk_72,id_36,es_46,is_safe_28)) else fail-any) else fail-any) else fail-any)) in
                                    {3082}let v_596: bool = (not-caught-fail(v_595) && success?(1-proj-2-tuple(v_595))) in
                                    {3083}let psk_data_18: bitstring = (if v_596 then 2-proj-2-tuple(v_595) else caught-fail) in
                                    {3084}let psk_ext_36: preSharedKeyExt = (if v_596 then 1-proj-2-tuple(v_595) else caught-fail) in
                                    {3085}let offer_27: params = (if v_596 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_36) else caught-fail) in
                                    {3086}let (client_hello'_13: msg,cr'_15: bytes32,kex_data'_10: bitstring,psk_data'_10: bitstring) = (if v_596 then (CH(cr_23,offer_27),cr_23,kex_data_9,psk_data_18) else fail-any) in
                                    {3087}event ClientOffersAead(cr'_15,@8_tls_a);
                                    {3088}event ClientOffersHash(cr'_15,@8_tls_h);
                                    {3089}event ClientOffersGroup(cr'_15,@8_tls_g);
                                    {3090}out(io, client_hello'_13);
                                    {3091}let cur_log4_10: bitstring = (cur_log3_5,client_hello'_13) in
                                    {3092}in(io, server_hello'_10: msg);
                                    {3093}let SH(sr'_10: bytes32,mode'_10: params) = server_hello'_10 in
                                    (
                                        {3094}if (sr'_10 = B32(HRR24,HRR8)) then
                                            {3095}out(io, unexpected_message)
                                        else
                                            {3096}let (x_195: bitstring,g_14: group) = kex_data'_10 in
                                            {3097}let (psk_offer_13: preSharedKey,id_offer_13: identityPsk,es_offer_13: bitstring,is_safe_offer_13: bool) = psk_data'_10 in
                                            {3098}event Client_PSKOffer(id_client_4,psk_offer_13,id_offer_13,is_safe_offer_13);
                                            {3099}event Client_Rand_client(id_client_4,cr'_15);
                                            {3100}event Client_DH_client(id_client_4,dh_pub(g_14,x_195));
                                            {3101}event Client_server_domain(id_client_4,s_dom_16);
                                            {3102}let SH(sr_25: bytes32,mode_17: params) = server_hello'_10 in
                                            {3103}event Client_Rand_server(id_client_4,sr_25);
                                            {3104}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_14,gy_14: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_37: preSharedKeyExt) = mode_17 in
                                            (
                                                {3105}let cur_log2_34: bitstring = (cur_log4_10,server_hello'_10) in
                                                {3106}event Client_DH_server(id_client_4,gy_14);
                                                {3107}let v_597: bool = (psk_ext_37 = empty_psk_ext) in
                                                {3108}let psk_73: preSharedKey = (if v_597 then NoPsk else caught-fail) in
                                                {3109}let s_59: bitstring = (if v_597 then zero else caught-fail) in
                                                {3110}let k_51: bitstring = (if v_597 then catch-fail(psk2b(psk_73)) else caught-fail) in
                                                {3111}let v_598: bool = not-caught-fail(k_51) in
                                                {3112}let early_secret_46: bitstring = (if v_597 then catch-fail((if v_598 then hmac(@8_tls_h,s_59,k_51) else fail-any)) else caught-fail) in
                                                {3113}let v_599: bool = not-caught-fail(early_secret_46) in
                                                {3114}let l_174: label = (if v_599 then tls13_ext_res_binder else caught-fail) in
                                                {3115}let m_59: bitstring = (if v_599 then zero else caught-fail) in
                                                {3116}let h_172: bitstring = (if v_599 then catch-fail(hash(@8_tls_h,m_59)) else caught-fail) in
                                                {3117}let v_600: bool = not-caught-fail(h_172) in
                                                {3118}let x_196: bitstring = (if v_600 then (l_174,h_172) else caught-fail) in
                                                {3119}let binder_key_31: bitstring = (if v_599 then catch-fail((if v_600 then hmac(@8_tls_h,early_secret_46,x_196) else fail-any)) else caught-fail) in
                                                {3120}let v_601: bool = not-caught-fail(binder_key_31) in
                                                {3121}let v_602: bitstring = (if v_597 then catch-fail((if v_599 then (if v_601 then (early_secret_46,binder_key_31) else fail-any) else fail-any)) else caught-fail) in
                                                {3122}let v_603: bool = (not-caught-fail(v_602) && success?(1-proj-2-tuple(v_602))) in
                                                {3123}let kb_31: mac_key = (if v_603 then 2-proj-2-tuple(v_602) else caught-fail) in
                                                {3124}let es_47: bitstring = (if v_603 then 1-proj-2-tuple(v_602) else caught-fail) in
                                                {3125}let v_604: bitstring = (if not(v_597) then catch-fail(psk_data'_10) else caught-fail) in
                                                {3126}let v_605: bool = (not-caught-fail(v_604) && success?(1-proj-4-tuple(v_604))) in
                                                {3127}let is_safe_29: bool = (if v_605 then 4-proj-4-tuple(v_604) else caught-fail) in
                                                {3128}let es_48: bitstring = (if v_605 then 3-proj-4-tuple(v_604) else caught-fail) in
                                                {3129}let id_37: identityPsk = (if v_605 then 2-proj-4-tuple(v_604) else caught-fail) in
                                                {3130}let psk_74: preSharedKey = (if v_605 then 1-proj-4-tuple(v_604) else caught-fail) in
                                                {3131}let (psk_75: preSharedKey,early_secret_47: bitstring,valid_13: bool,safe_psk_20: bool) = (if v_597 then (if v_603 then (NoPsk,es_47,true,false) else fail-any) else (if v_605 then (psk_74,es_48,((psk_74 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_37)),is_safe_29) else fail-any)) in
                                                {3132}event Client_PSKChoosen(id_client_4,psk_75,safe_psk_20);
                                                {3133}if valid_13 then
                                                (
                                                    {3134}let gxy_28: element = catch-fail(dh_decap_fun(g_14,gy_14,x_195)) in
                                                    {3135}let v_606: bool = not-caught-fail(gxy_28) in
                                                    {3136}new s_60[]: seed;
                                                    {3137}let gxy_29: element = (if v_606 then gxy_28 else dh_f(s_60)) in
                                                    {3138}event Client_DH_gxy(id_client_4,gxy_29);
                                                    {3139}let l_175: label = tls13_derived in
                                                    {3140}let m_60: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3141}let v_607: bool = not-caught-fail(m_60) in
                                                    {3142}let h_173: bitstring = (if v_607 then catch-fail(hash(@8_tls_h,m_60)) else caught-fail) in
                                                    {3143}let v_608: bool = not-caught-fail(h_173) in
                                                    {3144}let x_197: bitstring = (if v_608 then (l_175,h_173) else caught-fail) in
                                                    {3145}let extra_34: bitstring = catch-fail((if v_607 then (if v_608 then hmac(@8_tls_h,early_secret_47,x_197) else fail-any) else fail-any)) in
                                                    {3146}let v_609: bool = not-caught-fail(extra_34) in
                                                    {3147}let handshake_secret_14: bitstring = (if v_609 then hmac(@8_tls_h,extra_34,gxy_29) else fail-any) in
                                                    {3148}let l_176: label = tls13_derived in
                                                    {3149}let m_61: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3150}let v_610: bool = not-caught-fail(m_61) in
                                                    {3151}let h_174: bitstring = (if v_610 then catch-fail(hash(@8_tls_h,m_61)) else caught-fail) in
                                                    {3152}let v_611: bool = not-caught-fail(h_174) in
                                                    {3153}let x_198: bitstring = (if v_611 then (l_176,h_174) else caught-fail) in
                                                    {3154}let extra_35: bitstring = catch-fail((if v_610 then (if v_611 then hmac(@8_tls_h,handshake_secret_14,x_198) else fail-any) else fail-any)) in
                                                    {3155}let v_612: bool = not-caught-fail(extra_35) in
                                                    {3156}let k_52: bitstring = (if v_612 then zero else caught-fail) in
                                                    {3157}let master_secret_35: bitstring = (if v_612 then catch-fail(hmac(@8_tls_h,handshake_secret_14,k_52)) else caught-fail) in
                                                    {3158}let v_613: bool = not-caught-fail(master_secret_35) in
                                                    {3159}let l_177: label = (if v_613 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3160}let h_175: bitstring = (if v_613 then catch-fail(hash(@8_tls_h,cur_log2_34)) else caught-fail) in
                                                    {3161}let v_614: bool = not-caught-fail(h_175) in
                                                    {3162}let x_199: bitstring = (if v_614 then (l_177,h_175) else caught-fail) in
                                                    {3163}let client_hts_14: bitstring = (if v_613 then catch-fail((if v_614 then hmac(@8_tls_h,handshake_secret_14,x_199) else fail-any)) else caught-fail) in
                                                    {3164}let v_615: bool = not-caught-fail(client_hts_14) in
                                                    {3165}let l_178: label = (if v_615 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3166}let h_176: bitstring = (if v_615 then catch-fail(hash(@8_tls_h,cur_log2_34)) else caught-fail) in
                                                    {3167}let v_616: bool = not-caught-fail(h_176) in
                                                    {3168}let x_200: bitstring = (if v_616 then (l_178,h_176) else caught-fail) in
                                                    {3169}let server_hts_14: bitstring = (if v_615 then catch-fail((if v_616 then hmac(@8_tls_h,handshake_secret_14,x_200) else fail-any)) else caught-fail) in
                                                    {3170}let v_617: bool = not-caught-fail(server_hts_14) in
                                                    {3171}let l_179: label = (if v_617 then tls13_key else caught-fail) in
                                                    {3172}let h_177: bitstring = (if v_617 then zero else caught-fail) in
                                                    {3173}let x_201: bitstring = (if v_617 then (l_179,h_177) else caught-fail) in
                                                    {3174}let client_wkh_14: bitstring = (if v_617 then catch-fail(hmac(@8_tls_h,client_hts_14,x_201)) else caught-fail) in
                                                    {3175}let v_618: bool = not-caught-fail(client_wkh_14) in
                                                    {3176}let l_180: label = (if v_618 then tls13_key else caught-fail) in
                                                    {3177}let h_178: bitstring = (if v_618 then zero else caught-fail) in
                                                    {3178}let x_202: bitstring = (if v_618 then (l_180,h_178) else caught-fail) in
                                                    {3179}let server_wkh_14: bitstring = (if v_618 then catch-fail(hmac(@8_tls_h,server_hts_14,x_202)) else caught-fail) in
                                                    {3180}let v_619: bool = not-caught-fail(server_wkh_14) in
                                                    {3181}let l_181: label = (if v_619 then tls13_finished else caught-fail) in
                                                    {3182}let h_179: bitstring = (if v_619 then zero else caught-fail) in
                                                    {3183}let x_203: bitstring = (if v_619 then (l_181,h_179) else caught-fail) in
                                                    {3184}let client_fk_14: bitstring = (if v_619 then catch-fail(hmac(@8_tls_h,client_hts_14,x_203)) else caught-fail) in
                                                    {3185}let v_620: bool = not-caught-fail(client_fk_14) in
                                                    {3186}let l_182: label = (if v_620 then tls13_finished else caught-fail) in
                                                    {3187}let h_180: bitstring = (if v_620 then zero else caught-fail) in
                                                    {3188}let x_204: bitstring = (if v_620 then (l_182,h_180) else caught-fail) in
                                                    {3189}let server_fk_14: bitstring = (if v_620 then catch-fail(hmac(@8_tls_h,server_hts_14,x_204)) else caught-fail) in
                                                    {3190}let v_621: bool = not-caught-fail(server_fk_14) in
                                                    {3191}let (master_secret_36: bitstring,chk_21: aead_key,shk_20: aead_key,cfin_21: mac_key,sfin_20: mac_key) = (if v_612 then (if v_613 then (if v_615 then (if v_617 then (if v_618 then (if v_619 then (if v_620 then (if v_621 then (master_secret_35,client_wkh_14,server_wkh_14,client_fk_14,server_fk_14) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3192}event Client_chk(id_client_4,chk_21);
                                                    {3193}event Client_shk(id_client_4,shk_20);
                                                    {3194}event Client_cfin(id_client_4,cfin_21);
                                                    {3195}event Client_sfin(id_client_4,sfin_20);
                                                    {3196}in(io, enc_ee_msg_13: bitstring);
                                                    {3197}let ee_msg_18: msg = aead_dec(@8_tls_a,shk_20,0,zero,enc_ee_msg_13) in
                                                    {3198}let EE(ech_ee_13: echExt,extra_ee_13: extraExt) = ee_msg_18 in
                                                    {3199}let cur_log2_35: bitstring = (cur_log2_34,ee_msg_18) in
                                                    {3200}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_15,sr_25,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_75,safe_psk_20,@8_comp_psk,master_secret_36,chk_21,0,shk_20,1,cfin_21,sfin_20,cur_log2_35)))
                                                )
                                                else
                                                    {3201}out(io, illegal_parameter)
                                            )
                                            else
                                                {3202}out(io, illegal_parameter)
                                    )
                                    else
                                        {3203}out(io, unexpected_message)
                            )
                            else
                                {3205}let psk_76: preSharedKey = NoPsk in
                                {3206}let s_61: bitstring = zero in
                                {3207}let k_53: bitstring = catch-fail(psk2b(psk_76)) in
                                {3208}let v_622: bool = not-caught-fail(k_53) in
                                {3209}let early_secret_48: bitstring = catch-fail((if v_622 then hmac(@8_tls_h,s_61,k_53) else fail-any)) in
                                {3210}let v_623: bool = not-caught-fail(early_secret_48) in
                                {3211}let l_183: label = (if v_623 then tls13_ext_res_binder else caught-fail) in
                                {3212}let m_62: bitstring = (if v_623 then zero else caught-fail) in
                                {3213}let h_181: bitstring = (if v_623 then catch-fail(hash(@8_tls_h,m_62)) else caught-fail) in
                                {3214}let v_624: bool = not-caught-fail(h_181) in
                                {3215}let x_205: bitstring = (if v_624 then (l_183,h_181) else caught-fail) in
                                {3216}let binder_key_32: bitstring = (if v_623 then catch-fail((if v_624 then hmac(@8_tls_h,early_secret_48,x_205) else fail-any)) else caught-fail) in
                                {3217}let v_625: bool = not-caught-fail(binder_key_32) in
                                {3218}let v_626: bitstring = catch-fail((if v_623 then (if v_625 then (early_secret_48,binder_key_32) else fail-any) else fail-any)) in
                                {3219}let v_627: bool = (not-caught-fail(v_626) && success?(1-proj-2-tuple(v_626))) in
                                {3220}let kb_32: mac_key = (if v_627 then 2-proj-2-tuple(v_626) else caught-fail) in
                                {3221}let es_49: bitstring = (if v_627 then 1-proj-2-tuple(v_626) else caught-fail) in
                                {3222}let v_628: bitstring = catch-fail((if v_627 then (empty_psk_ext,(NoPsk,zero,es_49,false)) else fail-any)) in
                                {3223}let v_629: bool = (not-caught-fail(v_628) && success?(1-proj-2-tuple(v_628))) in
                                {3224}let psk_data_19: bitstring = (if v_629 then 2-proj-2-tuple(v_628) else caught-fail) in
                                {3225}let psk_ext_38: preSharedKeyExt = (if v_629 then 1-proj-2-tuple(v_628) else caught-fail) in
                                {3226}let offer_28: params = (if v_629 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_38) else caught-fail) in
                                {3227}let (client_hello'_14: msg,cr'_16: bytes32,kex_data'_11: bitstring,psk_data'_11: bitstring) = (if v_629 then (CH(cr_23,offer_28),cr_23,kex_data_9,psk_data_19) else fail-any) in
                                {3228}event ClientOffersAead(cr'_16,@8_tls_a);
                                {3229}event ClientOffersHash(cr'_16,@8_tls_h);
                                {3230}event ClientOffersGroup(cr'_16,@8_tls_g);
                                {3231}out(io, client_hello'_14);
                                {3232}let cur_log4_11: bitstring = (cur_log3_5,client_hello'_14) in
                                {3233}in(io, server_hello'_11: msg);
                                {3234}let SH(sr'_11: bytes32,mode'_11: params) = server_hello'_11 in
                                (
                                    {3235}if (sr'_11 = B32(HRR24,HRR8)) then
                                        {3236}out(io, unexpected_message)
                                    else
                                        {3237}let (x_206: bitstring,g_15: group) = kex_data'_11 in
                                        {3238}let (psk_offer_14: preSharedKey,id_offer_14: identityPsk,es_offer_14: bitstring,is_safe_offer_14: bool) = psk_data'_11 in
                                        {3239}event Client_PSKOffer(id_client_4,psk_offer_14,id_offer_14,is_safe_offer_14);
                                        {3240}event Client_Rand_client(id_client_4,cr'_16);
                                        {3241}event Client_DH_client(id_client_4,dh_pub(g_15,x_206));
                                        {3242}event Client_server_domain(id_client_4,s_dom_16);
                                        {3243}let SH(sr_26: bytes32,mode_18: params) = server_hello'_11 in
                                        {3244}event Client_Rand_server(id_client_4,sr_26);
                                        {3245}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_15,gy_15: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_39: preSharedKeyExt) = mode_18 in
                                        (
                                            {3246}let cur_log2_36: bitstring = (cur_log4_11,server_hello'_11) in
                                            {3247}event Client_DH_server(id_client_4,gy_15);
                                            {3248}let v_630: bool = (psk_ext_39 = empty_psk_ext) in
                                            {3249}let psk_77: preSharedKey = (if v_630 then NoPsk else caught-fail) in
                                            {3250}let s_62: bitstring = (if v_630 then zero else caught-fail) in
                                            {3251}let k_54: bitstring = (if v_630 then catch-fail(psk2b(psk_77)) else caught-fail) in
                                            {3252}let v_631: bool = not-caught-fail(k_54) in
                                            {3253}let early_secret_49: bitstring = (if v_630 then catch-fail((if v_631 then hmac(@8_tls_h,s_62,k_54) else fail-any)) else caught-fail) in
                                            {3254}let v_632: bool = not-caught-fail(early_secret_49) in
                                            {3255}let l_184: label = (if v_632 then tls13_ext_res_binder else caught-fail) in
                                            {3256}let m_63: bitstring = (if v_632 then zero else caught-fail) in
                                            {3257}let h_182: bitstring = (if v_632 then catch-fail(hash(@8_tls_h,m_63)) else caught-fail) in
                                            {3258}let v_633: bool = not-caught-fail(h_182) in
                                            {3259}let x_207: bitstring = (if v_633 then (l_184,h_182) else caught-fail) in
                                            {3260}let binder_key_33: bitstring = (if v_632 then catch-fail((if v_633 then hmac(@8_tls_h,early_secret_49,x_207) else fail-any)) else caught-fail) in
                                            {3261}let v_634: bool = not-caught-fail(binder_key_33) in
                                            {3262}let v_635: bitstring = (if v_630 then catch-fail((if v_632 then (if v_634 then (early_secret_49,binder_key_33) else fail-any) else fail-any)) else caught-fail) in
                                            {3263}let v_636: bool = (not-caught-fail(v_635) && success?(1-proj-2-tuple(v_635))) in
                                            {3264}let kb_33: mac_key = (if v_636 then 2-proj-2-tuple(v_635) else caught-fail) in
                                            {3265}let es_50: bitstring = (if v_636 then 1-proj-2-tuple(v_635) else caught-fail) in
                                            {3266}let v_637: bitstring = (if not(v_630) then catch-fail(psk_data'_11) else caught-fail) in
                                            {3267}let v_638: bool = (not-caught-fail(v_637) && success?(1-proj-4-tuple(v_637))) in
                                            {3268}let is_safe_30: bool = (if v_638 then 4-proj-4-tuple(v_637) else caught-fail) in
                                            {3269}let es_51: bitstring = (if v_638 then 3-proj-4-tuple(v_637) else caught-fail) in
                                            {3270}let id_38: identityPsk = (if v_638 then 2-proj-4-tuple(v_637) else caught-fail) in
                                            {3271}let psk_78: preSharedKey = (if v_638 then 1-proj-4-tuple(v_637) else caught-fail) in
                                            {3272}let (psk_79: preSharedKey,early_secret_50: bitstring,valid_14: bool,safe_psk_21: bool) = (if v_630 then (if v_636 then (NoPsk,es_50,true,false) else fail-any) else (if v_638 then (psk_78,es_51,((psk_78 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_39)),is_safe_30) else fail-any)) in
                                            {3273}event Client_PSKChoosen(id_client_4,psk_79,safe_psk_21);
                                            {3274}if valid_14 then
                                            (
                                                {3275}let gxy_30: element = catch-fail(dh_decap_fun(g_15,gy_15,x_206)) in
                                                {3276}let v_639: bool = not-caught-fail(gxy_30) in
                                                {3277}new s_63[]: seed;
                                                {3278}let gxy_31: element = (if v_639 then gxy_30 else dh_f(s_63)) in
                                                {3279}event Client_DH_gxy(id_client_4,gxy_31);
                                                {3280}let l_185: label = tls13_derived in
                                                {3281}let m_64: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3282}let v_640: bool = not-caught-fail(m_64) in
                                                {3283}let h_183: bitstring = (if v_640 then catch-fail(hash(@8_tls_h,m_64)) else caught-fail) in
                                                {3284}let v_641: bool = not-caught-fail(h_183) in
                                                {3285}let x_208: bitstring = (if v_641 then (l_185,h_183) else caught-fail) in
                                                {3286}let extra_36: bitstring = catch-fail((if v_640 then (if v_641 then hmac(@8_tls_h,early_secret_50,x_208) else fail-any) else fail-any)) in
                                                {3287}let v_642: bool = not-caught-fail(extra_36) in
                                                {3288}let handshake_secret_15: bitstring = (if v_642 then hmac(@8_tls_h,extra_36,gxy_31) else fail-any) in
                                                {3289}let l_186: label = tls13_derived in
                                                {3290}let m_65: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3291}let v_643: bool = not-caught-fail(m_65) in
                                                {3292}let h_184: bitstring = (if v_643 then catch-fail(hash(@8_tls_h,m_65)) else caught-fail) in
                                                {3293}let v_644: bool = not-caught-fail(h_184) in
                                                {3294}let x_209: bitstring = (if v_644 then (l_186,h_184) else caught-fail) in
                                                {3295}let extra_37: bitstring = catch-fail((if v_643 then (if v_644 then hmac(@8_tls_h,handshake_secret_15,x_209) else fail-any) else fail-any)) in
                                                {3296}let v_645: bool = not-caught-fail(extra_37) in
                                                {3297}let k_55: bitstring = (if v_645 then zero else caught-fail) in
                                                {3298}let master_secret_37: bitstring = (if v_645 then catch-fail(hmac(@8_tls_h,handshake_secret_15,k_55)) else caught-fail) in
                                                {3299}let v_646: bool = not-caught-fail(master_secret_37) in
                                                {3300}let l_187: label = (if v_646 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {3301}let h_185: bitstring = (if v_646 then catch-fail(hash(@8_tls_h,cur_log2_36)) else caught-fail) in
                                                {3302}let v_647: bool = not-caught-fail(h_185) in
                                                {3303}let x_210: bitstring = (if v_647 then (l_187,h_185) else caught-fail) in
                                                {3304}let client_hts_15: bitstring = (if v_646 then catch-fail((if v_647 then hmac(@8_tls_h,handshake_secret_15,x_210) else fail-any)) else caught-fail) in
                                                {3305}let v_648: bool = not-caught-fail(client_hts_15) in
                                                {3306}let l_188: label = (if v_648 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {3307}let h_186: bitstring = (if v_648 then catch-fail(hash(@8_tls_h,cur_log2_36)) else caught-fail) in
                                                {3308}let v_649: bool = not-caught-fail(h_186) in
                                                {3309}let x_211: bitstring = (if v_649 then (l_188,h_186) else caught-fail) in
                                                {3310}let server_hts_15: bitstring = (if v_648 then catch-fail((if v_649 then hmac(@8_tls_h,handshake_secret_15,x_211) else fail-any)) else caught-fail) in
                                                {3311}let v_650: bool = not-caught-fail(server_hts_15) in
                                                {3312}let l_189: label = (if v_650 then tls13_key else caught-fail) in
                                                {3313}let h_187: bitstring = (if v_650 then zero else caught-fail) in
                                                {3314}let x_212: bitstring = (if v_650 then (l_189,h_187) else caught-fail) in
                                                {3315}let client_wkh_15: bitstring = (if v_650 then catch-fail(hmac(@8_tls_h,client_hts_15,x_212)) else caught-fail) in
                                                {3316}let v_651: bool = not-caught-fail(client_wkh_15) in
                                                {3317}let l_190: label = (if v_651 then tls13_key else caught-fail) in
                                                {3318}let h_188: bitstring = (if v_651 then zero else caught-fail) in
                                                {3319}let x_213: bitstring = (if v_651 then (l_190,h_188) else caught-fail) in
                                                {3320}let server_wkh_15: bitstring = (if v_651 then catch-fail(hmac(@8_tls_h,server_hts_15,x_213)) else caught-fail) in
                                                {3321}let v_652: bool = not-caught-fail(server_wkh_15) in
                                                {3322}let l_191: label = (if v_652 then tls13_finished else caught-fail) in
                                                {3323}let h_189: bitstring = (if v_652 then zero else caught-fail) in
                                                {3324}let x_214: bitstring = (if v_652 then (l_191,h_189) else caught-fail) in
                                                {3325}let client_fk_15: bitstring = (if v_652 then catch-fail(hmac(@8_tls_h,client_hts_15,x_214)) else caught-fail) in
                                                {3326}let v_653: bool = not-caught-fail(client_fk_15) in
                                                {3327}let l_192: label = (if v_653 then tls13_finished else caught-fail) in
                                                {3328}let h_190: bitstring = (if v_653 then zero else caught-fail) in
                                                {3329}let x_215: bitstring = (if v_653 then (l_192,h_190) else caught-fail) in
                                                {3330}let server_fk_15: bitstring = (if v_653 then catch-fail(hmac(@8_tls_h,server_hts_15,x_215)) else caught-fail) in
                                                {3331}let v_654: bool = not-caught-fail(server_fk_15) in
                                                {3332}let (master_secret_38: bitstring,chk_22: aead_key,shk_21: aead_key,cfin_22: mac_key,sfin_21: mac_key) = (if v_645 then (if v_646 then (if v_648 then (if v_650 then (if v_651 then (if v_652 then (if v_653 then (if v_654 then (master_secret_37,client_wkh_15,server_wkh_15,client_fk_15,server_fk_15) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {3333}event Client_chk(id_client_4,chk_22);
                                                {3334}event Client_shk(id_client_4,shk_21);
                                                {3335}event Client_cfin(id_client_4,cfin_22);
                                                {3336}event Client_sfin(id_client_4,sfin_21);
                                                {3337}in(io, enc_ee_msg_14: bitstring);
                                                {3338}let ee_msg_19: msg = aead_dec(@8_tls_a,shk_21,0,zero,enc_ee_msg_14) in
                                                {3339}let EE(ech_ee_14: echExt,extra_ee_14: extraExt) = ee_msg_19 in
                                                {3340}let cur_log2_37: bitstring = (cur_log2_36,ee_msg_19) in
                                                {3341}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_16,sr_26,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_79,safe_psk_21,@8_comp_psk,master_secret_38,chk_22,0,shk_21,1,cfin_22,sfin_21,cur_log2_37)))
                                            )
                                            else
                                                {3342}out(io, illegal_parameter)
                                        )
                                        else
                                            {3343}out(io, illegal_parameter)
                                )
                                else
                                    {3344}out(io, unexpected_message)
                        )
                        else
                            {3345}out(io, illegal_parameter)
                    )
                    else
                        {3346}if send_kex_4 then
                        (
                            {3347}let (x_216: bitstring,g_16: group) = kex_data_8 in
                            {3348}let (psk_offer_15: preSharedKey,id_offer_15: identityPsk,es_offer_15: bitstring,is_safe_offer_15: bool) = psk_data_16 in
                            {3349}event Client_PSKOffer(id_client_4,psk_offer_15,id_offer_15,is_safe_offer_15);
                            {3350}event Client_Rand_client(id_client_4,cr_22);
                            {3351}event Client_DH_client(id_client_4,dh_pub(g_16,x_216));
                            {3352}event Client_server_domain(id_client_4,s_dom_16);
                            {3353}let SH(sr_27: bytes32,mode_19: params) = server_hello_4 in
                            {3354}event Client_Rand_server(id_client_4,sr_27);
                            {3355}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_16,gy_16: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_40: preSharedKeyExt) = mode_19 in
                            (
                                {3356}let cur_log2_38: bitstring = (cur_log2_31,server_hello_4) in
                                {3357}event Client_DH_server(id_client_4,gy_16);
                                {3358}let v_655: bool = (psk_ext_40 = empty_psk_ext) in
                                {3359}let psk_80: preSharedKey = (if v_655 then NoPsk else caught-fail) in
                                {3360}let s_64: bitstring = (if v_655 then zero else caught-fail) in
                                {3361}let k_56: bitstring = (if v_655 then catch-fail(psk2b(psk_80)) else caught-fail) in
                                {3362}let v_656: bool = not-caught-fail(k_56) in
                                {3363}let early_secret_51: bitstring = (if v_655 then catch-fail((if v_656 then hmac(@8_tls_h,s_64,k_56) else fail-any)) else caught-fail) in
                                {3364}let v_657: bool = not-caught-fail(early_secret_51) in
                                {3365}let l_193: label = (if v_657 then tls13_ext_res_binder else caught-fail) in
                                {3366}let m_66: bitstring = (if v_657 then zero else caught-fail) in
                                {3367}let h_191: bitstring = (if v_657 then catch-fail(hash(@8_tls_h,m_66)) else caught-fail) in
                                {3368}let v_658: bool = not-caught-fail(h_191) in
                                {3369}let x_217: bitstring = (if v_658 then (l_193,h_191) else caught-fail) in
                                {3370}let binder_key_34: bitstring = (if v_657 then catch-fail((if v_658 then hmac(@8_tls_h,early_secret_51,x_217) else fail-any)) else caught-fail) in
                                {3371}let v_659: bool = not-caught-fail(binder_key_34) in
                                {3372}let v_660: bitstring = (if v_655 then catch-fail((if v_657 then (if v_659 then (early_secret_51,binder_key_34) else fail-any) else fail-any)) else caught-fail) in
                                {3373}let v_661: bool = (not-caught-fail(v_660) && success?(1-proj-2-tuple(v_660))) in
                                {3374}let kb_34: mac_key = (if v_661 then 2-proj-2-tuple(v_660) else caught-fail) in
                                {3375}let es_52: bitstring = (if v_661 then 1-proj-2-tuple(v_660) else caught-fail) in
                                {3376}let v_662: bitstring = (if not(v_655) then catch-fail(psk_data_16) else caught-fail) in
                                {3377}let v_663: bool = (not-caught-fail(v_662) && success?(1-proj-4-tuple(v_662))) in
                                {3378}let is_safe_31: bool = (if v_663 then 4-proj-4-tuple(v_662) else caught-fail) in
                                {3379}let es_53: bitstring = (if v_663 then 3-proj-4-tuple(v_662) else caught-fail) in
                                {3380}let id_39: identityPsk = (if v_663 then 2-proj-4-tuple(v_662) else caught-fail) in
                                {3381}let psk_81: preSharedKey = (if v_663 then 1-proj-4-tuple(v_662) else caught-fail) in
                                {3382}let (psk_82: preSharedKey,early_secret_52: bitstring,valid_15: bool,safe_psk_22: bool) = (if v_655 then (if v_661 then (NoPsk,es_52,true,false) else fail-any) else (if v_663 then (psk_81,es_53,((psk_81 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_40)),is_safe_31) else fail-any)) in
                                {3383}event Client_PSKChoosen(id_client_4,psk_82,safe_psk_22);
                                {3384}if valid_15 then
                                (
                                    {3385}let gxy_32: element = catch-fail(dh_decap_fun(g_16,gy_16,x_216)) in
                                    {3386}let v_664: bool = not-caught-fail(gxy_32) in
                                    {3387}new s_65[]: seed;
                                    {3388}let gxy_33: element = (if v_664 then gxy_32 else dh_f(s_65)) in
                                    {3389}event Client_DH_gxy(id_client_4,gxy_33);
                                    {3390}let l_194: label = tls13_derived in
                                    {3391}let m_67: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {3392}let v_665: bool = not-caught-fail(m_67) in
                                    {3393}let h_192: bitstring = (if v_665 then catch-fail(hash(@8_tls_h,m_67)) else caught-fail) in
                                    {3394}let v_666: bool = not-caught-fail(h_192) in
                                    {3395}let x_218: bitstring = (if v_666 then (l_194,h_192) else caught-fail) in
                                    {3396}let extra_38: bitstring = catch-fail((if v_665 then (if v_666 then hmac(@8_tls_h,early_secret_52,x_218) else fail-any) else fail-any)) in
                                    {3397}let v_667: bool = not-caught-fail(extra_38) in
                                    {3398}let handshake_secret_16: bitstring = (if v_667 then hmac(@8_tls_h,extra_38,gxy_33) else fail-any) in
                                    {3399}let l_195: label = tls13_derived in
                                    {3400}let m_68: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {3401}let v_668: bool = not-caught-fail(m_68) in
                                    {3402}let h_193: bitstring = (if v_668 then catch-fail(hash(@8_tls_h,m_68)) else caught-fail) in
                                    {3403}let v_669: bool = not-caught-fail(h_193) in
                                    {3404}let x_219: bitstring = (if v_669 then (l_195,h_193) else caught-fail) in
                                    {3405}let extra_39: bitstring = catch-fail((if v_668 then (if v_669 then hmac(@8_tls_h,handshake_secret_16,x_219) else fail-any) else fail-any)) in
                                    {3406}let v_670: bool = not-caught-fail(extra_39) in
                                    {3407}let k_57: bitstring = (if v_670 then zero else caught-fail) in
                                    {3408}let master_secret_39: bitstring = (if v_670 then catch-fail(hmac(@8_tls_h,handshake_secret_16,k_57)) else caught-fail) in
                                    {3409}let v_671: bool = not-caught-fail(master_secret_39) in
                                    {3410}let l_196: label = (if v_671 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {3411}let h_194: bitstring = (if v_671 then catch-fail(hash(@8_tls_h,cur_log2_38)) else caught-fail) in
                                    {3412}let v_672: bool = not-caught-fail(h_194) in
                                    {3413}let x_220: bitstring = (if v_672 then (l_196,h_194) else caught-fail) in
                                    {3414}let client_hts_16: bitstring = (if v_671 then catch-fail((if v_672 then hmac(@8_tls_h,handshake_secret_16,x_220) else fail-any)) else caught-fail) in
                                    {3415}let v_673: bool = not-caught-fail(client_hts_16) in
                                    {3416}let l_197: label = (if v_673 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {3417}let h_195: bitstring = (if v_673 then catch-fail(hash(@8_tls_h,cur_log2_38)) else caught-fail) in
                                    {3418}let v_674: bool = not-caught-fail(h_195) in
                                    {3419}let x_221: bitstring = (if v_674 then (l_197,h_195) else caught-fail) in
                                    {3420}let server_hts_16: bitstring = (if v_673 then catch-fail((if v_674 then hmac(@8_tls_h,handshake_secret_16,x_221) else fail-any)) else caught-fail) in
                                    {3421}let v_675: bool = not-caught-fail(server_hts_16) in
                                    {3422}let l_198: label = (if v_675 then tls13_key else caught-fail) in
                                    {3423}let h_196: bitstring = (if v_675 then zero else caught-fail) in
                                    {3424}let x_222: bitstring = (if v_675 then (l_198,h_196) else caught-fail) in
                                    {3425}let client_wkh_16: bitstring = (if v_675 then catch-fail(hmac(@8_tls_h,client_hts_16,x_222)) else caught-fail) in
                                    {3426}let v_676: bool = not-caught-fail(client_wkh_16) in
                                    {3427}let l_199: label = (if v_676 then tls13_key else caught-fail) in
                                    {3428}let h_197: bitstring = (if v_676 then zero else caught-fail) in
                                    {3429}let x_223: bitstring = (if v_676 then (l_199,h_197) else caught-fail) in
                                    {3430}let server_wkh_16: bitstring = (if v_676 then catch-fail(hmac(@8_tls_h,server_hts_16,x_223)) else caught-fail) in
                                    {3431}let v_677: bool = not-caught-fail(server_wkh_16) in
                                    {3432}let l_200: label = (if v_677 then tls13_finished else caught-fail) in
                                    {3433}let h_198: bitstring = (if v_677 then zero else caught-fail) in
                                    {3434}let x_224: bitstring = (if v_677 then (l_200,h_198) else caught-fail) in
                                    {3435}let client_fk_16: bitstring = (if v_677 then catch-fail(hmac(@8_tls_h,client_hts_16,x_224)) else caught-fail) in
                                    {3436}let v_678: bool = not-caught-fail(client_fk_16) in
                                    {3437}let l_201: label = (if v_678 then tls13_finished else caught-fail) in
                                    {3438}let h_199: bitstring = (if v_678 then zero else caught-fail) in
                                    {3439}let x_225: bitstring = (if v_678 then (l_201,h_199) else caught-fail) in
                                    {3440}let server_fk_16: bitstring = (if v_678 then catch-fail(hmac(@8_tls_h,server_hts_16,x_225)) else caught-fail) in
                                    {3441}let v_679: bool = not-caught-fail(server_fk_16) in
                                    {3442}let (master_secret_40: bitstring,chk_23: aead_key,shk_22: aead_key,cfin_23: mac_key,sfin_22: mac_key) = (if v_670 then (if v_671 then (if v_673 then (if v_675 then (if v_676 then (if v_677 then (if v_678 then (if v_679 then (master_secret_39,client_wkh_16,server_wkh_16,client_fk_16,server_fk_16) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {3443}event Client_chk(id_client_4,chk_23);
                                    {3444}event Client_shk(id_client_4,shk_22);
                                    {3445}event Client_cfin(id_client_4,cfin_23);
                                    {3446}event Client_sfin(id_client_4,sfin_22);
                                    {3447}in(io, enc_ee_msg_15: bitstring);
                                    {3448}let ee_msg_20: msg = aead_dec(@8_tls_a,shk_22,0,zero,enc_ee_msg_15) in
                                    {3449}let EE(ech_ee_15: echExt,extra_ee_15: extraExt) = ee_msg_20 in
                                    {3450}let cur_log2_39: bitstring = (cur_log2_38,ee_msg_20) in
                                    {3451}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr_22,sr_27,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_82,safe_psk_22,@8_comp_psk,master_secret_40,chk_23,0,shk_22,1,cfin_23,sfin_22,cur_log2_39)))
                                )
                                else
                                    {3452}out(io, illegal_parameter)
                            )
                            else
                                {3453}out(io, illegal_parameter)
                        )
                        else
                            {3454}out(io, illegal_parameter)
                )
                else
                    {3455}out(io, unexpected_message)
            )
        )
        else
            {4095}get pre_shared_keys(c_dom'_7: domain,=s_dom_16,=@8_tls_h,id_40: identityPsk,psk_83: preSharedKey,idP_9: idProc,is_safe_32: bool) in
            {3456}event Selected_one_time_used_psk(id_client_4,psk_83,is_safe_32);
            {3457}event Selected_psk(c_dom_6,c_dom'_7,idP_9,is_safe_32);
            {3458}event Selected_psk_no_missmatch(id_client_4,s_dom_16,@8_tls_h,psk_83,id_40);
            {3459}event Selected_psk_with_ID(c_dom_6,c_dom'_7,id_40,idP_9,is_safe_32);
            {3460}let v_680: bitstring = (id_40,psk_83,is_safe_32) in
            {3461}let v_681: bool = success?(1-proj-3-tuple(v_680)) in
            {3462}let is_safe_33: bool = (if v_681 then 3-proj-3-tuple(v_680) else caught-fail) in
            {3463}let psk_84: preSharedKey = (if v_681 then 2-proj-3-tuple(v_680) else caught-fail) in
            {3464}let id_41: identityPsk = (if v_681 then 1-proj-3-tuple(v_680) else caught-fail) in
            {3465}let offer_29: params = (if v_681 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_16),ech_ext_13,extra_30,trunc_client_psk_ext(id_41)) else caught-fail) in
            {3466}let cur_log'_13: bitstring = (if v_681 then (cur_log_10,CH(cr_21,offer_29)) else caught-fail) in
            {3467}let s_66: bitstring = (if v_681 then zero else caught-fail) in
            {3468}let k_58: bitstring = (if v_681 then catch-fail(psk2b(psk_84)) else caught-fail) in
            {3469}let v_682: bool = not-caught-fail(k_58) in
            {3470}let early_secret_53: bitstring = (if v_681 then catch-fail((if v_682 then hmac(@8_tls_h,s_66,k_58) else fail-any)) else caught-fail) in
            {3471}let v_683: bool = not-caught-fail(early_secret_53) in
            {3472}let l_202: label = (if v_683 then tls13_ext_res_binder else caught-fail) in
            {3473}let m_69: bitstring = (if v_683 then zero else caught-fail) in
            {3474}let h_200: bitstring = (if v_683 then catch-fail(hash(@8_tls_h,m_69)) else caught-fail) in
            {3475}let v_684: bool = not-caught-fail(h_200) in
            {3476}let x_226: bitstring = (if v_684 then (l_202,h_200) else caught-fail) in
            {3477}let binder_key_35: bitstring = (if v_683 then catch-fail((if v_684 then hmac(@8_tls_h,early_secret_53,x_226) else fail-any)) else caught-fail) in
            {3478}let v_685: bool = not-caught-fail(binder_key_35) in
            {3479}let v_686: bitstring = (if v_681 then catch-fail((if v_683 then (if v_685 then (early_secret_53,binder_key_35) else fail-any) else fail-any)) else caught-fail) in
            {3480}let v_687: bool = (not-caught-fail(v_686) && success?(1-proj-2-tuple(v_686))) in
            {3481}let kb_35: mac_key = (if v_687 then 2-proj-2-tuple(v_686) else caught-fail) in
            {3482}let es_54: bitstring = (if v_687 then 1-proj-2-tuple(v_686) else caught-fail) in
            {3483}let binders_12: bitstring = (if v_687 then catch-fail(hmac(@8_tls_h,kb_35,cur_log'_13)) else caught-fail) in
            {3484}let v_688: bool = not-caught-fail(binders_12) in
            {3485}let v_689: bitstring = catch-fail((if v_681 then (if v_687 then (if v_688 then (client_psk_ext(id_41,binders_12),(psk_84,id_41,es_54,is_safe_33)) else fail-any) else fail-any) else fail-any)) in
            {3486}let v_690: bool = (not-caught-fail(v_689) && success?(1-proj-2-tuple(v_689))) in
            {3487}let psk_data_20: bitstring = (if v_690 then 2-proj-2-tuple(v_689) else caught-fail) in
            {3488}let psk_ext_41: preSharedKeyExt = (if v_690 then 1-proj-2-tuple(v_689) else caught-fail) in
            {3489}let offer_30: params = (if v_690 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_41) else caught-fail) in
            {3490}let (client_hello_9: msg,cr_24: bytes32,kex_data_10: bitstring,psk_data_21: bitstring) = (if v_690 then (CH(cr_21,offer_30),cr_21,kex_data_7,psk_data_20) else fail-any) in
            {3491}event ClientOffersAead(cr_24,@8_tls_a);
            {3492}event ClientOffersHash(cr_24,@8_tls_h);
            {3493}event ClientOffersGroup(cr_24,@8_tls_g);
            {3494}out(io, client_hello_9);
            {3495}let cur_log2_40: bitstring = (cur_log_10,client_hello_9) in
            {3496}let (psk_85: preSharedKey,id_42: identityPsk,es_55: bitstring,safe_psk_23: bool) = psk_data_21 in
            (
                {3497}if (false && (psk_85 ≠ NoPsk)) then
                {3498}let client_hello_10: bitstring = (zero,client_hello_9) in
                {3499}let l_203: label = tls13_client_early_traffic_secret in
                {3500}let h_201: bitstring = catch-fail(hash(@8_tls_h,client_hello_10)) in
                {3501}let v_691: bool = not-caught-fail(h_201) in
                {3502}let x_227: bitstring = (if v_691 then (l_203,h_201) else caught-fail) in
                {3503}let atsc0_5: bitstring = catch-fail((if v_691 then hmac(@8_tls_h,es_55,x_227) else fail-any)) in
                {3504}let v_692: bool = not-caught-fail(atsc0_5) in
                {3505}let l_204: label = (if v_692 then tls13_key else caught-fail) in
                {3506}let h_202: bitstring = (if v_692 then zero else caught-fail) in
                {3507}let x_228: bitstring = (if v_692 then (l_204,h_202) else caught-fail) in
                {3508}let kc0_5: bitstring = (if v_692 then catch-fail(hmac(@8_tls_h,atsc0_5,x_228)) else caught-fail) in
                {3509}let v_693: bool = not-caught-fail(kc0_5) in
                {3510}let l_205: label = (if v_693 then tls13_early_exporter_master_secret else caught-fail) in
                {3511}let h_203: bitstring = (if v_693 then catch-fail(hash(@8_tls_h,client_hello_10)) else caught-fail) in
                {3512}let v_694: bool = not-caught-fail(h_203) in
                {3513}let x_229: bitstring = (if v_694 then (l_205,h_203) else caught-fail) in
                {3514}let ems0_10: bitstring = (if v_693 then catch-fail((if v_694 then hmac(@8_tls_h,es_55,x_229) else fail-any)) else caught-fail) in
                {3515}let v_695: bool = not-caught-fail(ems0_10) in
                {3516}let (wkc0_5: aead_key,ems0_11: bitstring) = (if v_692 then (if v_693 then (if v_695 then (kc0_5,ems0_10) else fail-any) else fail-any) else fail-any) in
                {3517}!
                {3518}in(io, (i_5: nat,ad_5: bitstring));
                {3519}if is_nat(i_5) then
                {3520}new msg_ed_4[]: bitstring;
                {3521}let enc_ed_4: bitstring = aead_enc(@8_tls_a,wkc0_5,i_5,ad_5,msg_ed_4) in
                {3522}new st_14: stamp;
                {3523}event ClientSequenceClient0RTTDataWriteKey(id_client_4,st_14,i_5);
                {3524}event ClientSends0(id_client_4,cr_24,psk_85,i_5,ad_5,msg_ed_4);
                {3525}out(io, enc_ed_4)
            ) | (
                {3526}in(io, server_hello_5: msg);
                {3527}let SH(sr_28: bytes32,mode_20: params) = server_hello_5 in
                (
                    {3528}event ClientEchAcceptance(id_client_4,false);
                    {3529}if (false && (sr_28 = B32(HRR24,HRR8))) then
                    (
                        {3530}if ((mode_20 = nego(TLS13,@8_tls_h,@8_tls_a,hrr_kex_ext(@8_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex_4 ≠ true)) then
                        (
                            {3531}let cur_log3_6: bitstring = (cur_log2_40,server_hello_5) in
                            {3532}let send_kex_6: bool = true in
                            {3533}new rand24_7[]: bytes24;
                            {3534}new rand8_7[]: bytes8;
                            {3535}let cr_25: bytes32 = B32(rand24_7,rand8_7) in
                            {3536}new s_67[]: seed;
                            {3537}let gx_19: element = dh_pub(@8_tls_g,dh_k(s_67)) in
                            {3538}let v_696: bitstring = (dh_k(s_67),gx_19) in
                            {3539}let v_697: bool = success?(1-proj-2-tuple(v_696)) in
                            {3540}let gx_20: element = (if v_697 then 2-proj-2-tuple(v_696) else caught-fail) in
                            {3541}let x_230: bitstring = (if v_697 then 1-proj-2-tuple(v_696) else caught-fail) in
                            {3542}let kex_6: kex_alg = (if v_697 then (if send_kex_6 then DHE_kex(@8_tls_g,gx_20) else DHE_group(@8_tls_g)) else caught-fail) in
                            {3543}let (kex_ext_14: keyShareExt,kex_data_11: bitstring) = (if v_697 then (client_kex_ext(kex_6),(x_230,@8_tls_g)) else fail-any) in
                            {3544}let ech_ext_15: echExt = empty_ech_ext in
                            {3545}let extra_40: extraExt = empty_extra_ext in
                            {3546}if @8_use_psk then
                            (
                                {3547}let (psk_86: preSharedKey,id_43: identityPsk,old_es_6: bitstring,is_safe_34: bool) = psk_data_21 in
                                (
                                    {3548}let offer_31: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_16),ech_ext_15,extra_40,trunc_client_psk_ext(id_43)) in
                                    {3549}let cur_log'_14: bitstring = (cur_log3_6,CH(cr_25,offer_31)) in
                                    {3550}let s_68: bitstring = zero in
                                    {3551}let k_59: bitstring = catch-fail(psk2b(psk_86)) in
                                    {3552}let v_698: bool = not-caught-fail(k_59) in
                                    {3553}let early_secret_54: bitstring = catch-fail((if v_698 then hmac(@8_tls_h,s_68,k_59) else fail-any)) in
                                    {3554}let v_699: bool = not-caught-fail(early_secret_54) in
                                    {3555}let l_206: label = (if v_699 then tls13_ext_res_binder else caught-fail) in
                                    {3556}let m_70: bitstring = (if v_699 then zero else caught-fail) in
                                    {3557}let h_204: bitstring = (if v_699 then catch-fail(hash(@8_tls_h,m_70)) else caught-fail) in
                                    {3558}let v_700: bool = not-caught-fail(h_204) in
                                    {3559}let x_231: bitstring = (if v_700 then (l_206,h_204) else caught-fail) in
                                    {3560}let binder_key_36: bitstring = (if v_699 then catch-fail((if v_700 then hmac(@8_tls_h,early_secret_54,x_231) else fail-any)) else caught-fail) in
                                    {3561}let v_701: bool = not-caught-fail(binder_key_36) in
                                    {3562}let v_702: bitstring = catch-fail((if v_699 then (if v_701 then (early_secret_54,binder_key_36) else fail-any) else fail-any)) in
                                    {3563}let v_703: bool = (not-caught-fail(v_702) && success?(1-proj-2-tuple(v_702))) in
                                    {3564}let kb_36: mac_key = (if v_703 then 2-proj-2-tuple(v_702) else caught-fail) in
                                    {3565}let es_56: bitstring = (if v_703 then 1-proj-2-tuple(v_702) else caught-fail) in
                                    {3566}let binders_13: bitstring = (if v_703 then catch-fail(hmac(@8_tls_h,kb_36,cur_log'_14)) else caught-fail) in
                                    {3567}let v_704: bool = not-caught-fail(binders_13) in
                                    {3568}let v_705: bitstring = catch-fail((if v_703 then (if v_704 then (client_psk_ext(id_43,binders_13),(psk_86,id_43,es_56,is_safe_34)) else fail-any) else fail-any)) in
                                    {3569}let v_706: bool = (not-caught-fail(v_705) && success?(1-proj-2-tuple(v_705))) in
                                    {3570}let psk_data_22: bitstring = (if v_706 then 2-proj-2-tuple(v_705) else caught-fail) in
                                    {3571}let psk_ext_42: preSharedKeyExt = (if v_706 then 1-proj-2-tuple(v_705) else caught-fail) in
                                    {3572}let offer_32: params = (if v_706 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_42) else caught-fail) in
                                    {3573}let (client_hello'_15: msg,cr'_17: bytes32,kex_data'_12: bitstring,psk_data'_12: bitstring) = (if v_706 then (CH(cr_25,offer_32),cr_25,kex_data_11,psk_data_22) else fail-any) in
                                    {3574}event ClientOffersAead(cr'_17,@8_tls_a);
                                    {3575}event ClientOffersHash(cr'_17,@8_tls_h);
                                    {3576}event ClientOffersGroup(cr'_17,@8_tls_g);
                                    {3577}out(io, client_hello'_15);
                                    {3578}let cur_log4_12: bitstring = (cur_log3_6,client_hello'_15) in
                                    {3579}in(io, server_hello'_12: msg);
                                    {3580}let SH(sr'_12: bytes32,mode'_12: params) = server_hello'_12 in
                                    (
                                        {3581}if (sr'_12 = B32(HRR24,HRR8)) then
                                            {3582}out(io, unexpected_message)
                                        else
                                            {3583}let (x_232: bitstring,g_17: group) = kex_data'_12 in
                                            {3584}let (psk_offer_16: preSharedKey,id_offer_16: identityPsk,es_offer_16: bitstring,is_safe_offer_16: bool) = psk_data'_12 in
                                            {3585}event Client_PSKOffer(id_client_4,psk_offer_16,id_offer_16,is_safe_offer_16);
                                            {3586}event Client_Rand_client(id_client_4,cr'_17);
                                            {3587}event Client_DH_client(id_client_4,dh_pub(g_17,x_232));
                                            {3588}event Client_server_domain(id_client_4,s_dom_16);
                                            {3589}let SH(sr_29: bytes32,mode_21: params) = server_hello'_12 in
                                            {3590}event Client_Rand_server(id_client_4,sr_29);
                                            {3591}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_17,gy_17: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_43: preSharedKeyExt) = mode_21 in
                                            (
                                                {3592}let cur_log2_41: bitstring = (cur_log4_12,server_hello'_12) in
                                                {3593}event Client_DH_server(id_client_4,gy_17);
                                                {3594}let v_707: bool = (psk_ext_43 = empty_psk_ext) in
                                                {3595}let psk_87: preSharedKey = (if v_707 then NoPsk else caught-fail) in
                                                {3596}let s_69: bitstring = (if v_707 then zero else caught-fail) in
                                                {3597}let k_60: bitstring = (if v_707 then catch-fail(psk2b(psk_87)) else caught-fail) in
                                                {3598}let v_708: bool = not-caught-fail(k_60) in
                                                {3599}let early_secret_55: bitstring = (if v_707 then catch-fail((if v_708 then hmac(@8_tls_h,s_69,k_60) else fail-any)) else caught-fail) in
                                                {3600}let v_709: bool = not-caught-fail(early_secret_55) in
                                                {3601}let l_207: label = (if v_709 then tls13_ext_res_binder else caught-fail) in
                                                {3602}let m_71: bitstring = (if v_709 then zero else caught-fail) in
                                                {3603}let h_205: bitstring = (if v_709 then catch-fail(hash(@8_tls_h,m_71)) else caught-fail) in
                                                {3604}let v_710: bool = not-caught-fail(h_205) in
                                                {3605}let x_233: bitstring = (if v_710 then (l_207,h_205) else caught-fail) in
                                                {3606}let binder_key_37: bitstring = (if v_709 then catch-fail((if v_710 then hmac(@8_tls_h,early_secret_55,x_233) else fail-any)) else caught-fail) in
                                                {3607}let v_711: bool = not-caught-fail(binder_key_37) in
                                                {3608}let v_712: bitstring = (if v_707 then catch-fail((if v_709 then (if v_711 then (early_secret_55,binder_key_37) else fail-any) else fail-any)) else caught-fail) in
                                                {3609}let v_713: bool = (not-caught-fail(v_712) && success?(1-proj-2-tuple(v_712))) in
                                                {3610}let kb_37: mac_key = (if v_713 then 2-proj-2-tuple(v_712) else caught-fail) in
                                                {3611}let es_57: bitstring = (if v_713 then 1-proj-2-tuple(v_712) else caught-fail) in
                                                {3612}let v_714: bitstring = (if not(v_707) then catch-fail(psk_data'_12) else caught-fail) in
                                                {3613}let v_715: bool = (not-caught-fail(v_714) && success?(1-proj-4-tuple(v_714))) in
                                                {3614}let is_safe_35: bool = (if v_715 then 4-proj-4-tuple(v_714) else caught-fail) in
                                                {3615}let es_58: bitstring = (if v_715 then 3-proj-4-tuple(v_714) else caught-fail) in
                                                {3616}let id_44: identityPsk = (if v_715 then 2-proj-4-tuple(v_714) else caught-fail) in
                                                {3617}let psk_88: preSharedKey = (if v_715 then 1-proj-4-tuple(v_714) else caught-fail) in
                                                {3618}let (psk_89: preSharedKey,early_secret_56: bitstring,valid_16: bool,safe_psk_24: bool) = (if v_707 then (if v_713 then (NoPsk,es_57,true,false) else fail-any) else (if v_715 then (psk_88,es_58,((psk_88 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_43)),is_safe_35) else fail-any)) in
                                                {3619}event Client_PSKChoosen(id_client_4,psk_89,safe_psk_24);
                                                {3620}if valid_16 then
                                                (
                                                    {3621}let gxy_34: element = catch-fail(dh_decap_fun(g_17,gy_17,x_232)) in
                                                    {3622}let v_716: bool = not-caught-fail(gxy_34) in
                                                    {3623}new s_70[]: seed;
                                                    {3624}let gxy_35: element = (if v_716 then gxy_34 else dh_f(s_70)) in
                                                    {3625}event Client_DH_gxy(id_client_4,gxy_35);
                                                    {3626}let l_208: label = tls13_derived in
                                                    {3627}let m_72: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3628}let v_717: bool = not-caught-fail(m_72) in
                                                    {3629}let h_206: bitstring = (if v_717 then catch-fail(hash(@8_tls_h,m_72)) else caught-fail) in
                                                    {3630}let v_718: bool = not-caught-fail(h_206) in
                                                    {3631}let x_234: bitstring = (if v_718 then (l_208,h_206) else caught-fail) in
                                                    {3632}let extra_41: bitstring = catch-fail((if v_717 then (if v_718 then hmac(@8_tls_h,early_secret_56,x_234) else fail-any) else fail-any)) in
                                                    {3633}let v_719: bool = not-caught-fail(extra_41) in
                                                    {3634}let handshake_secret_17: bitstring = (if v_719 then hmac(@8_tls_h,extra_41,gxy_35) else fail-any) in
                                                    {3635}let l_209: label = tls13_derived in
                                                    {3636}let m_73: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3637}let v_720: bool = not-caught-fail(m_73) in
                                                    {3638}let h_207: bitstring = (if v_720 then catch-fail(hash(@8_tls_h,m_73)) else caught-fail) in
                                                    {3639}let v_721: bool = not-caught-fail(h_207) in
                                                    {3640}let x_235: bitstring = (if v_721 then (l_209,h_207) else caught-fail) in
                                                    {3641}let extra_42: bitstring = catch-fail((if v_720 then (if v_721 then hmac(@8_tls_h,handshake_secret_17,x_235) else fail-any) else fail-any)) in
                                                    {3642}let v_722: bool = not-caught-fail(extra_42) in
                                                    {3643}let k_61: bitstring = (if v_722 then zero else caught-fail) in
                                                    {3644}let master_secret_41: bitstring = (if v_722 then catch-fail(hmac(@8_tls_h,handshake_secret_17,k_61)) else caught-fail) in
                                                    {3645}let v_723: bool = not-caught-fail(master_secret_41) in
                                                    {3646}let l_210: label = (if v_723 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3647}let h_208: bitstring = (if v_723 then catch-fail(hash(@8_tls_h,cur_log2_41)) else caught-fail) in
                                                    {3648}let v_724: bool = not-caught-fail(h_208) in
                                                    {3649}let x_236: bitstring = (if v_724 then (l_210,h_208) else caught-fail) in
                                                    {3650}let client_hts_17: bitstring = (if v_723 then catch-fail((if v_724 then hmac(@8_tls_h,handshake_secret_17,x_236) else fail-any)) else caught-fail) in
                                                    {3651}let v_725: bool = not-caught-fail(client_hts_17) in
                                                    {3652}let l_211: label = (if v_725 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3653}let h_209: bitstring = (if v_725 then catch-fail(hash(@8_tls_h,cur_log2_41)) else caught-fail) in
                                                    {3654}let v_726: bool = not-caught-fail(h_209) in
                                                    {3655}let x_237: bitstring = (if v_726 then (l_211,h_209) else caught-fail) in
                                                    {3656}let server_hts_17: bitstring = (if v_725 then catch-fail((if v_726 then hmac(@8_tls_h,handshake_secret_17,x_237) else fail-any)) else caught-fail) in
                                                    {3657}let v_727: bool = not-caught-fail(server_hts_17) in
                                                    {3658}let l_212: label = (if v_727 then tls13_key else caught-fail) in
                                                    {3659}let h_210: bitstring = (if v_727 then zero else caught-fail) in
                                                    {3660}let x_238: bitstring = (if v_727 then (l_212,h_210) else caught-fail) in
                                                    {3661}let client_wkh_17: bitstring = (if v_727 then catch-fail(hmac(@8_tls_h,client_hts_17,x_238)) else caught-fail) in
                                                    {3662}let v_728: bool = not-caught-fail(client_wkh_17) in
                                                    {3663}let l_213: label = (if v_728 then tls13_key else caught-fail) in
                                                    {3664}let h_211: bitstring = (if v_728 then zero else caught-fail) in
                                                    {3665}let x_239: bitstring = (if v_728 then (l_213,h_211) else caught-fail) in
                                                    {3666}let server_wkh_17: bitstring = (if v_728 then catch-fail(hmac(@8_tls_h,server_hts_17,x_239)) else caught-fail) in
                                                    {3667}let v_729: bool = not-caught-fail(server_wkh_17) in
                                                    {3668}let l_214: label = (if v_729 then tls13_finished else caught-fail) in
                                                    {3669}let h_212: bitstring = (if v_729 then zero else caught-fail) in
                                                    {3670}let x_240: bitstring = (if v_729 then (l_214,h_212) else caught-fail) in
                                                    {3671}let client_fk_17: bitstring = (if v_729 then catch-fail(hmac(@8_tls_h,client_hts_17,x_240)) else caught-fail) in
                                                    {3672}let v_730: bool = not-caught-fail(client_fk_17) in
                                                    {3673}let l_215: label = (if v_730 then tls13_finished else caught-fail) in
                                                    {3674}let h_213: bitstring = (if v_730 then zero else caught-fail) in
                                                    {3675}let x_241: bitstring = (if v_730 then (l_215,h_213) else caught-fail) in
                                                    {3676}let server_fk_17: bitstring = (if v_730 then catch-fail(hmac(@8_tls_h,server_hts_17,x_241)) else caught-fail) in
                                                    {3677}let v_731: bool = not-caught-fail(server_fk_17) in
                                                    {3678}let (master_secret_42: bitstring,chk_24: aead_key,shk_23: aead_key,cfin_24: mac_key,sfin_23: mac_key) = (if v_722 then (if v_723 then (if v_725 then (if v_727 then (if v_728 then (if v_729 then (if v_730 then (if v_731 then (master_secret_41,client_wkh_17,server_wkh_17,client_fk_17,server_fk_17) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3679}event Client_chk(id_client_4,chk_24);
                                                    {3680}event Client_shk(id_client_4,shk_23);
                                                    {3681}event Client_cfin(id_client_4,cfin_24);
                                                    {3682}event Client_sfin(id_client_4,sfin_23);
                                                    {3683}in(io, enc_ee_msg_16: bitstring);
                                                    {3684}let ee_msg_21: msg = aead_dec(@8_tls_a,shk_23,0,zero,enc_ee_msg_16) in
                                                    {3685}let EE(ech_ee_16: echExt,extra_ee_16: extraExt) = ee_msg_21 in
                                                    {3686}let cur_log2_42: bitstring = (cur_log2_41,ee_msg_21) in
                                                    {3687}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_17,sr_29,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_89,safe_psk_24,@8_comp_psk,master_secret_42,chk_24,0,shk_23,1,cfin_24,sfin_23,cur_log2_42)))
                                                )
                                                else
                                                    {3688}out(io, illegal_parameter)
                                            )
                                            else
                                                {3689}out(io, illegal_parameter)
                                    )
                                    else
                                        {3690}out(io, unexpected_message)
                                )
                                else
                                    {3843}get pre_shared_keys(c_dom'_8: domain,=s_dom_16,=@8_tls_h,id_45: identityPsk,psk_90: preSharedKey,idP_10: idProc,is_safe_36: bool) in
                                    {3691}event Selected_one_time_used_psk(id_client_4,psk_90,is_safe_36);
                                    {3692}event Selected_psk(c_dom_6,c_dom'_8,idP_10,is_safe_36);
                                    {3693}event Selected_psk_no_missmatch(id_client_4,s_dom_16,@8_tls_h,psk_90,id_45);
                                    {3694}event Selected_psk_with_ID(c_dom_6,c_dom'_8,id_45,idP_10,is_safe_36);
                                    {3695}let v_732: bitstring = (id_45,psk_90,is_safe_36) in
                                    {3696}let v_733: bool = success?(1-proj-3-tuple(v_732)) in
                                    {3697}let is_safe_37: bool = (if v_733 then 3-proj-3-tuple(v_732) else caught-fail) in
                                    {3698}let psk_91: preSharedKey = (if v_733 then 2-proj-3-tuple(v_732) else caught-fail) in
                                    {3699}let id_46: identityPsk = (if v_733 then 1-proj-3-tuple(v_732) else caught-fail) in
                                    {3700}let offer_33: params = (if v_733 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_16),ech_ext_15,extra_40,trunc_client_psk_ext(id_46)) else caught-fail) in
                                    {3701}let cur_log'_15: bitstring = (if v_733 then (cur_log3_6,CH(cr_25,offer_33)) else caught-fail) in
                                    {3702}let s_71: bitstring = (if v_733 then zero else caught-fail) in
                                    {3703}let k_62: bitstring = (if v_733 then catch-fail(psk2b(psk_91)) else caught-fail) in
                                    {3704}let v_734: bool = not-caught-fail(k_62) in
                                    {3705}let early_secret_57: bitstring = (if v_733 then catch-fail((if v_734 then hmac(@8_tls_h,s_71,k_62) else fail-any)) else caught-fail) in
                                    {3706}let v_735: bool = not-caught-fail(early_secret_57) in
                                    {3707}let l_216: label = (if v_735 then tls13_ext_res_binder else caught-fail) in
                                    {3708}let m_74: bitstring = (if v_735 then zero else caught-fail) in
                                    {3709}let h_214: bitstring = (if v_735 then catch-fail(hash(@8_tls_h,m_74)) else caught-fail) in
                                    {3710}let v_736: bool = not-caught-fail(h_214) in
                                    {3711}let x_242: bitstring = (if v_736 then (l_216,h_214) else caught-fail) in
                                    {3712}let binder_key_38: bitstring = (if v_735 then catch-fail((if v_736 then hmac(@8_tls_h,early_secret_57,x_242) else fail-any)) else caught-fail) in
                                    {3713}let v_737: bool = not-caught-fail(binder_key_38) in
                                    {3714}let v_738: bitstring = (if v_733 then catch-fail((if v_735 then (if v_737 then (early_secret_57,binder_key_38) else fail-any) else fail-any)) else caught-fail) in
                                    {3715}let v_739: bool = (not-caught-fail(v_738) && success?(1-proj-2-tuple(v_738))) in
                                    {3716}let kb_38: mac_key = (if v_739 then 2-proj-2-tuple(v_738) else caught-fail) in
                                    {3717}let es_59: bitstring = (if v_739 then 1-proj-2-tuple(v_738) else caught-fail) in
                                    {3718}let binders_14: bitstring = (if v_739 then catch-fail(hmac(@8_tls_h,kb_38,cur_log'_15)) else caught-fail) in
                                    {3719}let v_740: bool = not-caught-fail(binders_14) in
                                    {3720}let v_741: bitstring = catch-fail((if v_733 then (if v_739 then (if v_740 then (client_psk_ext(id_46,binders_14),(psk_91,id_46,es_59,is_safe_37)) else fail-any) else fail-any) else fail-any)) in
                                    {3721}let v_742: bool = (not-caught-fail(v_741) && success?(1-proj-2-tuple(v_741))) in
                                    {3722}let psk_data_23: bitstring = (if v_742 then 2-proj-2-tuple(v_741) else caught-fail) in
                                    {3723}let psk_ext_44: preSharedKeyExt = (if v_742 then 1-proj-2-tuple(v_741) else caught-fail) in
                                    {3724}let offer_34: params = (if v_742 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_44) else caught-fail) in
                                    {3725}let (client_hello'_16: msg,cr'_18: bytes32,kex_data'_13: bitstring,psk_data'_13: bitstring) = (if v_742 then (CH(cr_25,offer_34),cr_25,kex_data_11,psk_data_23) else fail-any) in
                                    {3726}event ClientOffersAead(cr'_18,@8_tls_a);
                                    {3727}event ClientOffersHash(cr'_18,@8_tls_h);
                                    {3728}event ClientOffersGroup(cr'_18,@8_tls_g);
                                    {3729}out(io, client_hello'_16);
                                    {3730}let cur_log4_13: bitstring = (cur_log3_6,client_hello'_16) in
                                    {3731}in(io, server_hello'_13: msg);
                                    {3732}let SH(sr'_13: bytes32,mode'_13: params) = server_hello'_13 in
                                    (
                                        {3733}if (sr'_13 = B32(HRR24,HRR8)) then
                                            {3734}out(io, unexpected_message)
                                        else
                                            {3735}let (x_243: bitstring,g_18: group) = kex_data'_13 in
                                            {3736}let (psk_offer_17: preSharedKey,id_offer_17: identityPsk,es_offer_17: bitstring,is_safe_offer_17: bool) = psk_data'_13 in
                                            {3737}event Client_PSKOffer(id_client_4,psk_offer_17,id_offer_17,is_safe_offer_17);
                                            {3738}event Client_Rand_client(id_client_4,cr'_18);
                                            {3739}event Client_DH_client(id_client_4,dh_pub(g_18,x_243));
                                            {3740}event Client_server_domain(id_client_4,s_dom_16);
                                            {3741}let SH(sr_30: bytes32,mode_22: params) = server_hello'_13 in
                                            {3742}event Client_Rand_server(id_client_4,sr_30);
                                            {3743}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_18,gy_18: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_45: preSharedKeyExt) = mode_22 in
                                            (
                                                {3744}let cur_log2_43: bitstring = (cur_log4_13,server_hello'_13) in
                                                {3745}event Client_DH_server(id_client_4,gy_18);
                                                {3746}let v_743: bool = (psk_ext_45 = empty_psk_ext) in
                                                {3747}let psk_92: preSharedKey = (if v_743 then NoPsk else caught-fail) in
                                                {3748}let s_72: bitstring = (if v_743 then zero else caught-fail) in
                                                {3749}let k_63: bitstring = (if v_743 then catch-fail(psk2b(psk_92)) else caught-fail) in
                                                {3750}let v_744: bool = not-caught-fail(k_63) in
                                                {3751}let early_secret_58: bitstring = (if v_743 then catch-fail((if v_744 then hmac(@8_tls_h,s_72,k_63) else fail-any)) else caught-fail) in
                                                {3752}let v_745: bool = not-caught-fail(early_secret_58) in
                                                {3753}let l_217: label = (if v_745 then tls13_ext_res_binder else caught-fail) in
                                                {3754}let m_75: bitstring = (if v_745 then zero else caught-fail) in
                                                {3755}let h_215: bitstring = (if v_745 then catch-fail(hash(@8_tls_h,m_75)) else caught-fail) in
                                                {3756}let v_746: bool = not-caught-fail(h_215) in
                                                {3757}let x_244: bitstring = (if v_746 then (l_217,h_215) else caught-fail) in
                                                {3758}let binder_key_39: bitstring = (if v_745 then catch-fail((if v_746 then hmac(@8_tls_h,early_secret_58,x_244) else fail-any)) else caught-fail) in
                                                {3759}let v_747: bool = not-caught-fail(binder_key_39) in
                                                {3760}let v_748: bitstring = (if v_743 then catch-fail((if v_745 then (if v_747 then (early_secret_58,binder_key_39) else fail-any) else fail-any)) else caught-fail) in
                                                {3761}let v_749: bool = (not-caught-fail(v_748) && success?(1-proj-2-tuple(v_748))) in
                                                {3762}let kb_39: mac_key = (if v_749 then 2-proj-2-tuple(v_748) else caught-fail) in
                                                {3763}let es_60: bitstring = (if v_749 then 1-proj-2-tuple(v_748) else caught-fail) in
                                                {3764}let v_750: bitstring = (if not(v_743) then catch-fail(psk_data'_13) else caught-fail) in
                                                {3765}let v_751: bool = (not-caught-fail(v_750) && success?(1-proj-4-tuple(v_750))) in
                                                {3766}let is_safe_38: bool = (if v_751 then 4-proj-4-tuple(v_750) else caught-fail) in
                                                {3767}let es_61: bitstring = (if v_751 then 3-proj-4-tuple(v_750) else caught-fail) in
                                                {3768}let id_47: identityPsk = (if v_751 then 2-proj-4-tuple(v_750) else caught-fail) in
                                                {3769}let psk_93: preSharedKey = (if v_751 then 1-proj-4-tuple(v_750) else caught-fail) in
                                                {3770}let (psk_94: preSharedKey,early_secret_59: bitstring,valid_17: bool,safe_psk_25: bool) = (if v_743 then (if v_749 then (NoPsk,es_60,true,false) else fail-any) else (if v_751 then (psk_93,es_61,((psk_93 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_45)),is_safe_38) else fail-any)) in
                                                {3771}event Client_PSKChoosen(id_client_4,psk_94,safe_psk_25);
                                                {3772}if valid_17 then
                                                (
                                                    {3773}let gxy_36: element = catch-fail(dh_decap_fun(g_18,gy_18,x_243)) in
                                                    {3774}let v_752: bool = not-caught-fail(gxy_36) in
                                                    {3775}new s_73[]: seed;
                                                    {3776}let gxy_37: element = (if v_752 then gxy_36 else dh_f(s_73)) in
                                                    {3777}event Client_DH_gxy(id_client_4,gxy_37);
                                                    {3778}let l_218: label = tls13_derived in
                                                    {3779}let m_76: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3780}let v_753: bool = not-caught-fail(m_76) in
                                                    {3781}let h_216: bitstring = (if v_753 then catch-fail(hash(@8_tls_h,m_76)) else caught-fail) in
                                                    {3782}let v_754: bool = not-caught-fail(h_216) in
                                                    {3783}let x_245: bitstring = (if v_754 then (l_218,h_216) else caught-fail) in
                                                    {3784}let extra_43: bitstring = catch-fail((if v_753 then (if v_754 then hmac(@8_tls_h,early_secret_59,x_245) else fail-any) else fail-any)) in
                                                    {3785}let v_755: bool = not-caught-fail(extra_43) in
                                                    {3786}let handshake_secret_18: bitstring = (if v_755 then hmac(@8_tls_h,extra_43,gxy_37) else fail-any) in
                                                    {3787}let l_219: label = tls13_derived in
                                                    {3788}let m_77: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3789}let v_756: bool = not-caught-fail(m_77) in
                                                    {3790}let h_217: bitstring = (if v_756 then catch-fail(hash(@8_tls_h,m_77)) else caught-fail) in
                                                    {3791}let v_757: bool = not-caught-fail(h_217) in
                                                    {3792}let x_246: bitstring = (if v_757 then (l_219,h_217) else caught-fail) in
                                                    {3793}let extra_44: bitstring = catch-fail((if v_756 then (if v_757 then hmac(@8_tls_h,handshake_secret_18,x_246) else fail-any) else fail-any)) in
                                                    {3794}let v_758: bool = not-caught-fail(extra_44) in
                                                    {3795}let k_64: bitstring = (if v_758 then zero else caught-fail) in
                                                    {3796}let master_secret_43: bitstring = (if v_758 then catch-fail(hmac(@8_tls_h,handshake_secret_18,k_64)) else caught-fail) in
                                                    {3797}let v_759: bool = not-caught-fail(master_secret_43) in
                                                    {3798}let l_220: label = (if v_759 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3799}let h_218: bitstring = (if v_759 then catch-fail(hash(@8_tls_h,cur_log2_43)) else caught-fail) in
                                                    {3800}let v_760: bool = not-caught-fail(h_218) in
                                                    {3801}let x_247: bitstring = (if v_760 then (l_220,h_218) else caught-fail) in
                                                    {3802}let client_hts_18: bitstring = (if v_759 then catch-fail((if v_760 then hmac(@8_tls_h,handshake_secret_18,x_247) else fail-any)) else caught-fail) in
                                                    {3803}let v_761: bool = not-caught-fail(client_hts_18) in
                                                    {3804}let l_221: label = (if v_761 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3805}let h_219: bitstring = (if v_761 then catch-fail(hash(@8_tls_h,cur_log2_43)) else caught-fail) in
                                                    {3806}let v_762: bool = not-caught-fail(h_219) in
                                                    {3807}let x_248: bitstring = (if v_762 then (l_221,h_219) else caught-fail) in
                                                    {3808}let server_hts_18: bitstring = (if v_761 then catch-fail((if v_762 then hmac(@8_tls_h,handshake_secret_18,x_248) else fail-any)) else caught-fail) in
                                                    {3809}let v_763: bool = not-caught-fail(server_hts_18) in
                                                    {3810}let l_222: label = (if v_763 then tls13_key else caught-fail) in
                                                    {3811}let h_220: bitstring = (if v_763 then zero else caught-fail) in
                                                    {3812}let x_249: bitstring = (if v_763 then (l_222,h_220) else caught-fail) in
                                                    {3813}let client_wkh_18: bitstring = (if v_763 then catch-fail(hmac(@8_tls_h,client_hts_18,x_249)) else caught-fail) in
                                                    {3814}let v_764: bool = not-caught-fail(client_wkh_18) in
                                                    {3815}let l_223: label = (if v_764 then tls13_key else caught-fail) in
                                                    {3816}let h_221: bitstring = (if v_764 then zero else caught-fail) in
                                                    {3817}let x_250: bitstring = (if v_764 then (l_223,h_221) else caught-fail) in
                                                    {3818}let server_wkh_18: bitstring = (if v_764 then catch-fail(hmac(@8_tls_h,server_hts_18,x_250)) else caught-fail) in
                                                    {3819}let v_765: bool = not-caught-fail(server_wkh_18) in
                                                    {3820}let l_224: label = (if v_765 then tls13_finished else caught-fail) in
                                                    {3821}let h_222: bitstring = (if v_765 then zero else caught-fail) in
                                                    {3822}let x_251: bitstring = (if v_765 then (l_224,h_222) else caught-fail) in
                                                    {3823}let client_fk_18: bitstring = (if v_765 then catch-fail(hmac(@8_tls_h,client_hts_18,x_251)) else caught-fail) in
                                                    {3824}let v_766: bool = not-caught-fail(client_fk_18) in
                                                    {3825}let l_225: label = (if v_766 then tls13_finished else caught-fail) in
                                                    {3826}let h_223: bitstring = (if v_766 then zero else caught-fail) in
                                                    {3827}let x_252: bitstring = (if v_766 then (l_225,h_223) else caught-fail) in
                                                    {3828}let server_fk_18: bitstring = (if v_766 then catch-fail(hmac(@8_tls_h,server_hts_18,x_252)) else caught-fail) in
                                                    {3829}let v_767: bool = not-caught-fail(server_fk_18) in
                                                    {3830}let (master_secret_44: bitstring,chk_25: aead_key,shk_24: aead_key,cfin_25: mac_key,sfin_24: mac_key) = (if v_758 then (if v_759 then (if v_761 then (if v_763 then (if v_764 then (if v_765 then (if v_766 then (if v_767 then (master_secret_43,client_wkh_18,server_wkh_18,client_fk_18,server_fk_18) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3831}event Client_chk(id_client_4,chk_25);
                                                    {3832}event Client_shk(id_client_4,shk_24);
                                                    {3833}event Client_cfin(id_client_4,cfin_25);
                                                    {3834}event Client_sfin(id_client_4,sfin_24);
                                                    {3835}in(io, enc_ee_msg_17: bitstring);
                                                    {3836}let ee_msg_22: msg = aead_dec(@8_tls_a,shk_24,0,zero,enc_ee_msg_17) in
                                                    {3837}let EE(ech_ee_17: echExt,extra_ee_17: extraExt) = ee_msg_22 in
                                                    {3838}let cur_log2_44: bitstring = (cur_log2_43,ee_msg_22) in
                                                    {3839}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_18,sr_30,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_94,safe_psk_25,@8_comp_psk,master_secret_44,chk_25,0,shk_24,1,cfin_25,sfin_24,cur_log2_44)))
                                                )
                                                else
                                                    {3840}out(io, illegal_parameter)
                                            )
                                            else
                                                {3841}out(io, illegal_parameter)
                                    )
                                    else
                                        {3842}out(io, unexpected_message)
                            )
                            else
                                {3844}let psk_95: preSharedKey = NoPsk in
                                {3845}let s_74: bitstring = zero in
                                {3846}let k_65: bitstring = catch-fail(psk2b(psk_95)) in
                                {3847}let v_768: bool = not-caught-fail(k_65) in
                                {3848}let early_secret_60: bitstring = catch-fail((if v_768 then hmac(@8_tls_h,s_74,k_65) else fail-any)) in
                                {3849}let v_769: bool = not-caught-fail(early_secret_60) in
                                {3850}let l_226: label = (if v_769 then tls13_ext_res_binder else caught-fail) in
                                {3851}let m_78: bitstring = (if v_769 then zero else caught-fail) in
                                {3852}let h_224: bitstring = (if v_769 then catch-fail(hash(@8_tls_h,m_78)) else caught-fail) in
                                {3853}let v_770: bool = not-caught-fail(h_224) in
                                {3854}let x_253: bitstring = (if v_770 then (l_226,h_224) else caught-fail) in
                                {3855}let binder_key_40: bitstring = (if v_769 then catch-fail((if v_770 then hmac(@8_tls_h,early_secret_60,x_253) else fail-any)) else caught-fail) in
                                {3856}let v_771: bool = not-caught-fail(binder_key_40) in
                                {3857}let v_772: bitstring = catch-fail((if v_769 then (if v_771 then (early_secret_60,binder_key_40) else fail-any) else fail-any)) in
                                {3858}let v_773: bool = (not-caught-fail(v_772) && success?(1-proj-2-tuple(v_772))) in
                                {3859}let kb_40: mac_key = (if v_773 then 2-proj-2-tuple(v_772) else caught-fail) in
                                {3860}let es_62: bitstring = (if v_773 then 1-proj-2-tuple(v_772) else caught-fail) in
                                {3861}let v_774: bitstring = catch-fail((if v_773 then (empty_psk_ext,(NoPsk,zero,es_62,false)) else fail-any)) in
                                {3862}let v_775: bool = (not-caught-fail(v_774) && success?(1-proj-2-tuple(v_774))) in
                                {3863}let psk_data_24: bitstring = (if v_775 then 2-proj-2-tuple(v_774) else caught-fail) in
                                {3864}let psk_ext_46: preSharedKeyExt = (if v_775 then 1-proj-2-tuple(v_774) else caught-fail) in
                                {3865}let offer_35: params = (if v_775 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_46) else caught-fail) in
                                {3866}let (client_hello'_17: msg,cr'_19: bytes32,kex_data'_14: bitstring,psk_data'_14: bitstring) = (if v_775 then (CH(cr_25,offer_35),cr_25,kex_data_11,psk_data_24) else fail-any) in
                                {3867}event ClientOffersAead(cr'_19,@8_tls_a);
                                {3868}event ClientOffersHash(cr'_19,@8_tls_h);
                                {3869}event ClientOffersGroup(cr'_19,@8_tls_g);
                                {3870}out(io, client_hello'_17);
                                {3871}let cur_log4_14: bitstring = (cur_log3_6,client_hello'_17) in
                                {3872}in(io, server_hello'_14: msg);
                                {3873}let SH(sr'_14: bytes32,mode'_14: params) = server_hello'_14 in
                                (
                                    {3874}if (sr'_14 = B32(HRR24,HRR8)) then
                                        {3875}out(io, unexpected_message)
                                    else
                                        {3876}let (x_254: bitstring,g_19: group) = kex_data'_14 in
                                        {3877}let (psk_offer_18: preSharedKey,id_offer_18: identityPsk,es_offer_18: bitstring,is_safe_offer_18: bool) = psk_data'_14 in
                                        {3878}event Client_PSKOffer(id_client_4,psk_offer_18,id_offer_18,is_safe_offer_18);
                                        {3879}event Client_Rand_client(id_client_4,cr'_19);
                                        {3880}event Client_DH_client(id_client_4,dh_pub(g_19,x_254));
                                        {3881}event Client_server_domain(id_client_4,s_dom_16);
                                        {3882}let SH(sr_31: bytes32,mode_23: params) = server_hello'_14 in
                                        {3883}event Client_Rand_server(id_client_4,sr_31);
                                        {3884}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_19,gy_19: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_47: preSharedKeyExt) = mode_23 in
                                        (
                                            {3885}let cur_log2_45: bitstring = (cur_log4_14,server_hello'_14) in
                                            {3886}event Client_DH_server(id_client_4,gy_19);
                                            {3887}let v_776: bool = (psk_ext_47 = empty_psk_ext) in
                                            {3888}let psk_96: preSharedKey = (if v_776 then NoPsk else caught-fail) in
                                            {3889}let s_75: bitstring = (if v_776 then zero else caught-fail) in
                                            {3890}let k_66: bitstring = (if v_776 then catch-fail(psk2b(psk_96)) else caught-fail) in
                                            {3891}let v_777: bool = not-caught-fail(k_66) in
                                            {3892}let early_secret_61: bitstring = (if v_776 then catch-fail((if v_777 then hmac(@8_tls_h,s_75,k_66) else fail-any)) else caught-fail) in
                                            {3893}let v_778: bool = not-caught-fail(early_secret_61) in
                                            {3894}let l_227: label = (if v_778 then tls13_ext_res_binder else caught-fail) in
                                            {3895}let m_79: bitstring = (if v_778 then zero else caught-fail) in
                                            {3896}let h_225: bitstring = (if v_778 then catch-fail(hash(@8_tls_h,m_79)) else caught-fail) in
                                            {3897}let v_779: bool = not-caught-fail(h_225) in
                                            {3898}let x_255: bitstring = (if v_779 then (l_227,h_225) else caught-fail) in
                                            {3899}let binder_key_41: bitstring = (if v_778 then catch-fail((if v_779 then hmac(@8_tls_h,early_secret_61,x_255) else fail-any)) else caught-fail) in
                                            {3900}let v_780: bool = not-caught-fail(binder_key_41) in
                                            {3901}let v_781: bitstring = (if v_776 then catch-fail((if v_778 then (if v_780 then (early_secret_61,binder_key_41) else fail-any) else fail-any)) else caught-fail) in
                                            {3902}let v_782: bool = (not-caught-fail(v_781) && success?(1-proj-2-tuple(v_781))) in
                                            {3903}let kb_41: mac_key = (if v_782 then 2-proj-2-tuple(v_781) else caught-fail) in
                                            {3904}let es_63: bitstring = (if v_782 then 1-proj-2-tuple(v_781) else caught-fail) in
                                            {3905}let v_783: bitstring = (if not(v_776) then catch-fail(psk_data'_14) else caught-fail) in
                                            {3906}let v_784: bool = (not-caught-fail(v_783) && success?(1-proj-4-tuple(v_783))) in
                                            {3907}let is_safe_39: bool = (if v_784 then 4-proj-4-tuple(v_783) else caught-fail) in
                                            {3908}let es_64: bitstring = (if v_784 then 3-proj-4-tuple(v_783) else caught-fail) in
                                            {3909}let id_48: identityPsk = (if v_784 then 2-proj-4-tuple(v_783) else caught-fail) in
                                            {3910}let psk_97: preSharedKey = (if v_784 then 1-proj-4-tuple(v_783) else caught-fail) in
                                            {3911}let (psk_98: preSharedKey,early_secret_62: bitstring,valid_18: bool,safe_psk_26: bool) = (if v_776 then (if v_782 then (NoPsk,es_63,true,false) else fail-any) else (if v_784 then (psk_97,es_64,((psk_97 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_47)),is_safe_39) else fail-any)) in
                                            {3912}event Client_PSKChoosen(id_client_4,psk_98,safe_psk_26);
                                            {3913}if valid_18 then
                                            (
                                                {3914}let gxy_38: element = catch-fail(dh_decap_fun(g_19,gy_19,x_254)) in
                                                {3915}let v_785: bool = not-caught-fail(gxy_38) in
                                                {3916}new s_76[]: seed;
                                                {3917}let gxy_39: element = (if v_785 then gxy_38 else dh_f(s_76)) in
                                                {3918}event Client_DH_gxy(id_client_4,gxy_39);
                                                {3919}let l_228: label = tls13_derived in
                                                {3920}let m_80: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3921}let v_786: bool = not-caught-fail(m_80) in
                                                {3922}let h_226: bitstring = (if v_786 then catch-fail(hash(@8_tls_h,m_80)) else caught-fail) in
                                                {3923}let v_787: bool = not-caught-fail(h_226) in
                                                {3924}let x_256: bitstring = (if v_787 then (l_228,h_226) else caught-fail) in
                                                {3925}let extra_45: bitstring = catch-fail((if v_786 then (if v_787 then hmac(@8_tls_h,early_secret_62,x_256) else fail-any) else fail-any)) in
                                                {3926}let v_788: bool = not-caught-fail(extra_45) in
                                                {3927}let handshake_secret_19: bitstring = (if v_788 then hmac(@8_tls_h,extra_45,gxy_39) else fail-any) in
                                                {3928}let l_229: label = tls13_derived in
                                                {3929}let m_81: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3930}let v_789: bool = not-caught-fail(m_81) in
                                                {3931}let h_227: bitstring = (if v_789 then catch-fail(hash(@8_tls_h,m_81)) else caught-fail) in
                                                {3932}let v_790: bool = not-caught-fail(h_227) in
                                                {3933}let x_257: bitstring = (if v_790 then (l_229,h_227) else caught-fail) in
                                                {3934}let extra_46: bitstring = catch-fail((if v_789 then (if v_790 then hmac(@8_tls_h,handshake_secret_19,x_257) else fail-any) else fail-any)) in
                                                {3935}let v_791: bool = not-caught-fail(extra_46) in
                                                {3936}let k_67: bitstring = (if v_791 then zero else caught-fail) in
                                                {3937}let master_secret_45: bitstring = (if v_791 then catch-fail(hmac(@8_tls_h,handshake_secret_19,k_67)) else caught-fail) in
                                                {3938}let v_792: bool = not-caught-fail(master_secret_45) in
                                                {3939}let l_230: label = (if v_792 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {3940}let h_228: bitstring = (if v_792 then catch-fail(hash(@8_tls_h,cur_log2_45)) else caught-fail) in
                                                {3941}let v_793: bool = not-caught-fail(h_228) in
                                                {3942}let x_258: bitstring = (if v_793 then (l_230,h_228) else caught-fail) in
                                                {3943}let client_hts_19: bitstring = (if v_792 then catch-fail((if v_793 then hmac(@8_tls_h,handshake_secret_19,x_258) else fail-any)) else caught-fail) in
                                                {3944}let v_794: bool = not-caught-fail(client_hts_19) in
                                                {3945}let l_231: label = (if v_794 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {3946}let h_229: bitstring = (if v_794 then catch-fail(hash(@8_tls_h,cur_log2_45)) else caught-fail) in
                                                {3947}let v_795: bool = not-caught-fail(h_229) in
                                                {3948}let x_259: bitstring = (if v_795 then (l_231,h_229) else caught-fail) in
                                                {3949}let server_hts_19: bitstring = (if v_794 then catch-fail((if v_795 then hmac(@8_tls_h,handshake_secret_19,x_259) else fail-any)) else caught-fail) in
                                                {3950}let v_796: bool = not-caught-fail(server_hts_19) in
                                                {3951}let l_232: label = (if v_796 then tls13_key else caught-fail) in
                                                {3952}let h_230: bitstring = (if v_796 then zero else caught-fail) in
                                                {3953}let x_260: bitstring = (if v_796 then (l_232,h_230) else caught-fail) in
                                                {3954}let client_wkh_19: bitstring = (if v_796 then catch-fail(hmac(@8_tls_h,client_hts_19,x_260)) else caught-fail) in
                                                {3955}let v_797: bool = not-caught-fail(client_wkh_19) in
                                                {3956}let l_233: label = (if v_797 then tls13_key else caught-fail) in
                                                {3957}let h_231: bitstring = (if v_797 then zero else caught-fail) in
                                                {3958}let x_261: bitstring = (if v_797 then (l_233,h_231) else caught-fail) in
                                                {3959}let server_wkh_19: bitstring = (if v_797 then catch-fail(hmac(@8_tls_h,server_hts_19,x_261)) else caught-fail) in
                                                {3960}let v_798: bool = not-caught-fail(server_wkh_19) in
                                                {3961}let l_234: label = (if v_798 then tls13_finished else caught-fail) in
                                                {3962}let h_232: bitstring = (if v_798 then zero else caught-fail) in
                                                {3963}let x_262: bitstring = (if v_798 then (l_234,h_232) else caught-fail) in
                                                {3964}let client_fk_19: bitstring = (if v_798 then catch-fail(hmac(@8_tls_h,client_hts_19,x_262)) else caught-fail) in
                                                {3965}let v_799: bool = not-caught-fail(client_fk_19) in
                                                {3966}let l_235: label = (if v_799 then tls13_finished else caught-fail) in
                                                {3967}let h_233: bitstring = (if v_799 then zero else caught-fail) in
                                                {3968}let x_263: bitstring = (if v_799 then (l_235,h_233) else caught-fail) in
                                                {3969}let server_fk_19: bitstring = (if v_799 then catch-fail(hmac(@8_tls_h,server_hts_19,x_263)) else caught-fail) in
                                                {3970}let v_800: bool = not-caught-fail(server_fk_19) in
                                                {3971}let (master_secret_46: bitstring,chk_26: aead_key,shk_25: aead_key,cfin_26: mac_key,sfin_25: mac_key) = (if v_791 then (if v_792 then (if v_794 then (if v_796 then (if v_797 then (if v_798 then (if v_799 then (if v_800 then (master_secret_45,client_wkh_19,server_wkh_19,client_fk_19,server_fk_19) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {3972}event Client_chk(id_client_4,chk_26);
                                                {3973}event Client_shk(id_client_4,shk_25);
                                                {3974}event Client_cfin(id_client_4,cfin_26);
                                                {3975}event Client_sfin(id_client_4,sfin_25);
                                                {3976}in(io, enc_ee_msg_18: bitstring);
                                                {3977}let ee_msg_23: msg = aead_dec(@8_tls_a,shk_25,0,zero,enc_ee_msg_18) in
                                                {3978}let EE(ech_ee_18: echExt,extra_ee_18: extraExt) = ee_msg_23 in
                                                {3979}let cur_log2_46: bitstring = (cur_log2_45,ee_msg_23) in
                                                {3980}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_19,sr_31,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_98,safe_psk_26,@8_comp_psk,master_secret_46,chk_26,0,shk_25,1,cfin_26,sfin_25,cur_log2_46)))
                                            )
                                            else
                                                {3981}out(io, illegal_parameter)
                                        )
                                        else
                                            {3982}out(io, illegal_parameter)
                                )
                                else
                                    {3983}out(io, unexpected_message)
                        )
                        else
                            {3984}out(io, illegal_parameter)
                    )
                    else
                        {3985}if send_kex_4 then
                        (
                            {3986}let (x_264: bitstring,g_20: group) = kex_data_10 in
                            {3987}let (psk_offer_19: preSharedKey,id_offer_19: identityPsk,es_offer_19: bitstring,is_safe_offer_19: bool) = psk_data_21 in
                            {3988}event Client_PSKOffer(id_client_4,psk_offer_19,id_offer_19,is_safe_offer_19);
                            {3989}event Client_Rand_client(id_client_4,cr_24);
                            {3990}event Client_DH_client(id_client_4,dh_pub(g_20,x_264));
                            {3991}event Client_server_domain(id_client_4,s_dom_16);
                            {3992}let SH(sr_32: bytes32,mode_24: params) = server_hello_5 in
                            {3993}event Client_Rand_server(id_client_4,sr_32);
                            {3994}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_20,gy_20: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_48: preSharedKeyExt) = mode_24 in
                            (
                                {3995}let cur_log2_47: bitstring = (cur_log2_40,server_hello_5) in
                                {3996}event Client_DH_server(id_client_4,gy_20);
                                {3997}let v_801: bool = (psk_ext_48 = empty_psk_ext) in
                                {3998}let psk_99: preSharedKey = (if v_801 then NoPsk else caught-fail) in
                                {3999}let s_77: bitstring = (if v_801 then zero else caught-fail) in
                                {4000}let k_68: bitstring = (if v_801 then catch-fail(psk2b(psk_99)) else caught-fail) in
                                {4001}let v_802: bool = not-caught-fail(k_68) in
                                {4002}let early_secret_63: bitstring = (if v_801 then catch-fail((if v_802 then hmac(@8_tls_h,s_77,k_68) else fail-any)) else caught-fail) in
                                {4003}let v_803: bool = not-caught-fail(early_secret_63) in
                                {4004}let l_236: label = (if v_803 then tls13_ext_res_binder else caught-fail) in
                                {4005}let m_82: bitstring = (if v_803 then zero else caught-fail) in
                                {4006}let h_234: bitstring = (if v_803 then catch-fail(hash(@8_tls_h,m_82)) else caught-fail) in
                                {4007}let v_804: bool = not-caught-fail(h_234) in
                                {4008}let x_265: bitstring = (if v_804 then (l_236,h_234) else caught-fail) in
                                {4009}let binder_key_42: bitstring = (if v_803 then catch-fail((if v_804 then hmac(@8_tls_h,early_secret_63,x_265) else fail-any)) else caught-fail) in
                                {4010}let v_805: bool = not-caught-fail(binder_key_42) in
                                {4011}let v_806: bitstring = (if v_801 then catch-fail((if v_803 then (if v_805 then (early_secret_63,binder_key_42) else fail-any) else fail-any)) else caught-fail) in
                                {4012}let v_807: bool = (not-caught-fail(v_806) && success?(1-proj-2-tuple(v_806))) in
                                {4013}let kb_42: mac_key = (if v_807 then 2-proj-2-tuple(v_806) else caught-fail) in
                                {4014}let es_65: bitstring = (if v_807 then 1-proj-2-tuple(v_806) else caught-fail) in
                                {4015}let v_808: bitstring = (if not(v_801) then catch-fail(psk_data_21) else caught-fail) in
                                {4016}let v_809: bool = (not-caught-fail(v_808) && success?(1-proj-4-tuple(v_808))) in
                                {4017}let is_safe_40: bool = (if v_809 then 4-proj-4-tuple(v_808) else caught-fail) in
                                {4018}let es_66: bitstring = (if v_809 then 3-proj-4-tuple(v_808) else caught-fail) in
                                {4019}let id_49: identityPsk = (if v_809 then 2-proj-4-tuple(v_808) else caught-fail) in
                                {4020}let psk_100: preSharedKey = (if v_809 then 1-proj-4-tuple(v_808) else caught-fail) in
                                {4021}let (psk_101: preSharedKey,early_secret_64: bitstring,valid_19: bool,safe_psk_27: bool) = (if v_801 then (if v_807 then (NoPsk,es_65,true,false) else fail-any) else (if v_809 then (psk_100,es_66,((psk_100 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_48)),is_safe_40) else fail-any)) in
                                {4022}event Client_PSKChoosen(id_client_4,psk_101,safe_psk_27);
                                {4023}if valid_19 then
                                (
                                    {4024}let gxy_40: element = catch-fail(dh_decap_fun(g_20,gy_20,x_264)) in
                                    {4025}let v_810: bool = not-caught-fail(gxy_40) in
                                    {4026}new s_78[]: seed;
                                    {4027}let gxy_41: element = (if v_810 then gxy_40 else dh_f(s_78)) in
                                    {4028}event Client_DH_gxy(id_client_4,gxy_41);
                                    {4029}let l_237: label = tls13_derived in
                                    {4030}let m_83: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {4031}let v_811: bool = not-caught-fail(m_83) in
                                    {4032}let h_235: bitstring = (if v_811 then catch-fail(hash(@8_tls_h,m_83)) else caught-fail) in
                                    {4033}let v_812: bool = not-caught-fail(h_235) in
                                    {4034}let x_266: bitstring = (if v_812 then (l_237,h_235) else caught-fail) in
                                    {4035}let extra_47: bitstring = catch-fail((if v_811 then (if v_812 then hmac(@8_tls_h,early_secret_64,x_266) else fail-any) else fail-any)) in
                                    {4036}let v_813: bool = not-caught-fail(extra_47) in
                                    {4037}let handshake_secret_20: bitstring = (if v_813 then hmac(@8_tls_h,extra_47,gxy_41) else fail-any) in
                                    {4038}let l_238: label = tls13_derived in
                                    {4039}let m_84: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {4040}let v_814: bool = not-caught-fail(m_84) in
                                    {4041}let h_236: bitstring = (if v_814 then catch-fail(hash(@8_tls_h,m_84)) else caught-fail) in
                                    {4042}let v_815: bool = not-caught-fail(h_236) in
                                    {4043}let x_267: bitstring = (if v_815 then (l_238,h_236) else caught-fail) in
                                    {4044}let extra_48: bitstring = catch-fail((if v_814 then (if v_815 then hmac(@8_tls_h,handshake_secret_20,x_267) else fail-any) else fail-any)) in
                                    {4045}let v_816: bool = not-caught-fail(extra_48) in
                                    {4046}let k_69: bitstring = (if v_816 then zero else caught-fail) in
                                    {4047}let master_secret_47: bitstring = (if v_816 then catch-fail(hmac(@8_tls_h,handshake_secret_20,k_69)) else caught-fail) in
                                    {4048}let v_817: bool = not-caught-fail(master_secret_47) in
                                    {4049}let l_239: label = (if v_817 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {4050}let h_237: bitstring = (if v_817 then catch-fail(hash(@8_tls_h,cur_log2_47)) else caught-fail) in
                                    {4051}let v_818: bool = not-caught-fail(h_237) in
                                    {4052}let x_268: bitstring = (if v_818 then (l_239,h_237) else caught-fail) in
                                    {4053}let client_hts_20: bitstring = (if v_817 then catch-fail((if v_818 then hmac(@8_tls_h,handshake_secret_20,x_268) else fail-any)) else caught-fail) in
                                    {4054}let v_819: bool = not-caught-fail(client_hts_20) in
                                    {4055}let l_240: label = (if v_819 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {4056}let h_238: bitstring = (if v_819 then catch-fail(hash(@8_tls_h,cur_log2_47)) else caught-fail) in
                                    {4057}let v_820: bool = not-caught-fail(h_238) in
                                    {4058}let x_269: bitstring = (if v_820 then (l_240,h_238) else caught-fail) in
                                    {4059}let server_hts_20: bitstring = (if v_819 then catch-fail((if v_820 then hmac(@8_tls_h,handshake_secret_20,x_269) else fail-any)) else caught-fail) in
                                    {4060}let v_821: bool = not-caught-fail(server_hts_20) in
                                    {4061}let l_241: label = (if v_821 then tls13_key else caught-fail) in
                                    {4062}let h_239: bitstring = (if v_821 then zero else caught-fail) in
                                    {4063}let x_270: bitstring = (if v_821 then (l_241,h_239) else caught-fail) in
                                    {4064}let client_wkh_20: bitstring = (if v_821 then catch-fail(hmac(@8_tls_h,client_hts_20,x_270)) else caught-fail) in
                                    {4065}let v_822: bool = not-caught-fail(client_wkh_20) in
                                    {4066}let l_242: label = (if v_822 then tls13_key else caught-fail) in
                                    {4067}let h_240: bitstring = (if v_822 then zero else caught-fail) in
                                    {4068}let x_271: bitstring = (if v_822 then (l_242,h_240) else caught-fail) in
                                    {4069}let server_wkh_20: bitstring = (if v_822 then catch-fail(hmac(@8_tls_h,server_hts_20,x_271)) else caught-fail) in
                                    {4070}let v_823: bool = not-caught-fail(server_wkh_20) in
                                    {4071}let l_243: label = (if v_823 then tls13_finished else caught-fail) in
                                    {4072}let h_241: bitstring = (if v_823 then zero else caught-fail) in
                                    {4073}let x_272: bitstring = (if v_823 then (l_243,h_241) else caught-fail) in
                                    {4074}let client_fk_20: bitstring = (if v_823 then catch-fail(hmac(@8_tls_h,client_hts_20,x_272)) else caught-fail) in
                                    {4075}let v_824: bool = not-caught-fail(client_fk_20) in
                                    {4076}let l_244: label = (if v_824 then tls13_finished else caught-fail) in
                                    {4077}let h_242: bitstring = (if v_824 then zero else caught-fail) in
                                    {4078}let x_273: bitstring = (if v_824 then (l_244,h_242) else caught-fail) in
                                    {4079}let server_fk_20: bitstring = (if v_824 then catch-fail(hmac(@8_tls_h,server_hts_20,x_273)) else caught-fail) in
                                    {4080}let v_825: bool = not-caught-fail(server_fk_20) in
                                    {4081}let (master_secret_48: bitstring,chk_27: aead_key,shk_26: aead_key,cfin_27: mac_key,sfin_26: mac_key) = (if v_816 then (if v_817 then (if v_819 then (if v_821 then (if v_822 then (if v_823 then (if v_824 then (if v_825 then (master_secret_47,client_wkh_20,server_wkh_20,client_fk_20,server_fk_20) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {4082}event Client_chk(id_client_4,chk_27);
                                    {4083}event Client_shk(id_client_4,shk_26);
                                    {4084}event Client_cfin(id_client_4,cfin_27);
                                    {4085}event Client_sfin(id_client_4,sfin_26);
                                    {4086}in(io, enc_ee_msg_19: bitstring);
                                    {4087}let ee_msg_24: msg = aead_dec(@8_tls_a,shk_26,0,zero,enc_ee_msg_19) in
                                    {4088}let EE(ech_ee_19: echExt,extra_ee_19: extraExt) = ee_msg_24 in
                                    {4089}let cur_log2_48: bitstring = (cur_log2_47,ee_msg_24) in
                                    {4090}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr_24,sr_32,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_101,safe_psk_27,@8_comp_psk,master_secret_48,chk_27,0,shk_26,1,cfin_27,sfin_26,cur_log2_48)))
                                )
                                else
                                    {4091}out(io, illegal_parameter)
                            )
                            else
                                {4092}out(io, illegal_parameter)
                        )
                        else
                            {4093}out(io, illegal_parameter)
                )
                else
                    {4094}out(io, unexpected_message)
            )
    )
    else
        {4096}let psk_102: preSharedKey = NoPsk in
        {4097}let s_79: bitstring = zero in
        {4098}let k_70: bitstring = catch-fail(psk2b(psk_102)) in
        {4099}let v_826: bool = not-caught-fail(k_70) in
        {4100}let early_secret_65: bitstring = catch-fail((if v_826 then hmac(@8_tls_h,s_79,k_70) else fail-any)) in
        {4101}let v_827: bool = not-caught-fail(early_secret_65) in
        {4102}let l_245: label = (if v_827 then tls13_ext_res_binder else caught-fail) in
        {4103}let m_85: bitstring = (if v_827 then zero else caught-fail) in
        {4104}let h_243: bitstring = (if v_827 then catch-fail(hash(@8_tls_h,m_85)) else caught-fail) in
        {4105}let v_828: bool = not-caught-fail(h_243) in
        {4106}let x_274: bitstring = (if v_828 then (l_245,h_243) else caught-fail) in
        {4107}let binder_key_43: bitstring = (if v_827 then catch-fail((if v_828 then hmac(@8_tls_h,early_secret_65,x_274) else fail-any)) else caught-fail) in
        {4108}let v_829: bool = not-caught-fail(binder_key_43) in
        {4109}let v_830: bitstring = catch-fail((if v_827 then (if v_829 then (early_secret_65,binder_key_43) else fail-any) else fail-any)) in
        {4110}let v_831: bool = (not-caught-fail(v_830) && success?(1-proj-2-tuple(v_830))) in
        {4111}let kb_43: mac_key = (if v_831 then 2-proj-2-tuple(v_830) else caught-fail) in
        {4112}let es_67: bitstring = (if v_831 then 1-proj-2-tuple(v_830) else caught-fail) in
        {4113}let v_832: bitstring = catch-fail((if v_831 then (empty_psk_ext,(NoPsk,zero,es_67,false)) else fail-any)) in
        {4114}let v_833: bool = (not-caught-fail(v_832) && success?(1-proj-2-tuple(v_832))) in
        {4115}let psk_data_25: bitstring = (if v_833 then 2-proj-2-tuple(v_832) else caught-fail) in
        {4116}let psk_ext_49: preSharedKeyExt = (if v_833 then 1-proj-2-tuple(v_832) else caught-fail) in
        {4117}let offer_36: params = (if v_833 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_49) else caught-fail) in
        {4118}let (client_hello_11: msg,cr_26: bytes32,kex_data_12: bitstring,psk_data_26: bitstring) = (if v_833 then (CH(cr_21,offer_36),cr_21,kex_data_7,psk_data_25) else fail-any) in
        {4119}event ClientOffersAead(cr_26,@8_tls_a);
        {4120}event ClientOffersHash(cr_26,@8_tls_h);
        {4121}event ClientOffersGroup(cr_26,@8_tls_g);
        {4122}out(io, client_hello_11);
        {4123}let cur_log2_49: bitstring = (cur_log_10,client_hello_11) in
        {4124}let (psk_103: preSharedKey,id_50: identityPsk,es_68: bitstring,safe_psk_28: bool) = psk_data_26 in
        (
            {4125}if (false && (psk_103 ≠ NoPsk)) then
            {4126}let client_hello_12: bitstring = (zero,client_hello_11) in
            {4127}let l_246: label = tls13_client_early_traffic_secret in
            {4128}let h_244: bitstring = catch-fail(hash(@8_tls_h,client_hello_12)) in
            {4129}let v_834: bool = not-caught-fail(h_244) in
            {4130}let x_275: bitstring = (if v_834 then (l_246,h_244) else caught-fail) in
            {4131}let atsc0_6: bitstring = catch-fail((if v_834 then hmac(@8_tls_h,es_68,x_275) else fail-any)) in
            {4132}let v_835: bool = not-caught-fail(atsc0_6) in
            {4133}let l_247: label = (if v_835 then tls13_key else caught-fail) in
            {4134}let h_245: bitstring = (if v_835 then zero else caught-fail) in
            {4135}let x_276: bitstring = (if v_835 then (l_247,h_245) else caught-fail) in
            {4136}let kc0_6: bitstring = (if v_835 then catch-fail(hmac(@8_tls_h,atsc0_6,x_276)) else caught-fail) in
            {4137}let v_836: bool = not-caught-fail(kc0_6) in
            {4138}let l_248: label = (if v_836 then tls13_early_exporter_master_secret else caught-fail) in
            {4139}let h_246: bitstring = (if v_836 then catch-fail(hash(@8_tls_h,client_hello_12)) else caught-fail) in
            {4140}let v_837: bool = not-caught-fail(h_246) in
            {4141}let x_277: bitstring = (if v_837 then (l_248,h_246) else caught-fail) in
            {4142}let ems0_12: bitstring = (if v_836 then catch-fail((if v_837 then hmac(@8_tls_h,es_68,x_277) else fail-any)) else caught-fail) in
            {4143}let v_838: bool = not-caught-fail(ems0_12) in
            {4144}let (wkc0_6: aead_key,ems0_13: bitstring) = (if v_835 then (if v_836 then (if v_838 then (kc0_6,ems0_12) else fail-any) else fail-any) else fail-any) in
            {4145}!
            {4146}in(io, (i_6: nat,ad_6: bitstring));
            {4147}if is_nat(i_6) then
            {4148}new msg_ed_5[]: bitstring;
            {4149}let enc_ed_5: bitstring = aead_enc(@8_tls_a,wkc0_6,i_6,ad_6,msg_ed_5) in
            {4150}new st_15: stamp;
            {4151}event ClientSequenceClient0RTTDataWriteKey(id_client_4,st_15,i_6);
            {4152}event ClientSends0(id_client_4,cr_26,psk_103,i_6,ad_6,msg_ed_5);
            {4153}out(io, enc_ed_5)
        ) | (
            {4154}in(io, server_hello_6: msg);
            {4155}let SH(sr_33: bytes32,mode_25: params) = server_hello_6 in
            (
                {4156}event ClientEchAcceptance(id_client_4,false);
                {4157}if (false && (sr_33 = B32(HRR24,HRR8))) then
                (
                    {4158}if ((mode_25 = nego(TLS13,@8_tls_h,@8_tls_a,hrr_kex_ext(@8_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex_4 ≠ true)) then
                    (
                        {4159}let cur_log3_7: bitstring = (cur_log2_49,server_hello_6) in
                        {4160}let send_kex_7: bool = true in
                        {4161}new rand24_8[]: bytes24;
                        {4162}new rand8_8[]: bytes8;
                        {4163}let cr_27: bytes32 = B32(rand24_8,rand8_8) in
                        {4164}new s_80[]: seed;
                        {4165}let gx_21: element = dh_pub(@8_tls_g,dh_k(s_80)) in
                        {4166}let v_839: bitstring = (dh_k(s_80),gx_21) in
                        {4167}let v_840: bool = success?(1-proj-2-tuple(v_839)) in
                        {4168}let gx_22: element = (if v_840 then 2-proj-2-tuple(v_839) else caught-fail) in
                        {4169}let x_278: bitstring = (if v_840 then 1-proj-2-tuple(v_839) else caught-fail) in
                        {4170}let kex_7: kex_alg = (if v_840 then (if send_kex_7 then DHE_kex(@8_tls_g,gx_22) else DHE_group(@8_tls_g)) else caught-fail) in
                        {4171}let (kex_ext_15: keyShareExt,kex_data_13: bitstring) = (if v_840 then (client_kex_ext(kex_7),(x_278,@8_tls_g)) else fail-any) in
                        {4172}let ech_ext_16: echExt = empty_ech_ext in
                        {4173}let extra_49: extraExt = empty_extra_ext in
                        {4174}if @8_use_psk then
                        (
                            {4175}let (psk_104: preSharedKey,id_51: identityPsk,old_es_7: bitstring,is_safe_41: bool) = psk_data_26 in
                            (
                                {4176}let offer_37: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_16),ech_ext_16,extra_49,trunc_client_psk_ext(id_51)) in
                                {4177}let cur_log'_16: bitstring = (cur_log3_7,CH(cr_27,offer_37)) in
                                {4178}let s_81: bitstring = zero in
                                {4179}let k_71: bitstring = catch-fail(psk2b(psk_104)) in
                                {4180}let v_841: bool = not-caught-fail(k_71) in
                                {4181}let early_secret_66: bitstring = catch-fail((if v_841 then hmac(@8_tls_h,s_81,k_71) else fail-any)) in
                                {4182}let v_842: bool = not-caught-fail(early_secret_66) in
                                {4183}let l_249: label = (if v_842 then tls13_ext_res_binder else caught-fail) in
                                {4184}let m_86: bitstring = (if v_842 then zero else caught-fail) in
                                {4185}let h_247: bitstring = (if v_842 then catch-fail(hash(@8_tls_h,m_86)) else caught-fail) in
                                {4186}let v_843: bool = not-caught-fail(h_247) in
                                {4187}let x_279: bitstring = (if v_843 then (l_249,h_247) else caught-fail) in
                                {4188}let binder_key_44: bitstring = (if v_842 then catch-fail((if v_843 then hmac(@8_tls_h,early_secret_66,x_279) else fail-any)) else caught-fail) in
                                {4189}let v_844: bool = not-caught-fail(binder_key_44) in
                                {4190}let v_845: bitstring = catch-fail((if v_842 then (if v_844 then (early_secret_66,binder_key_44) else fail-any) else fail-any)) in
                                {4191}let v_846: bool = (not-caught-fail(v_845) && success?(1-proj-2-tuple(v_845))) in
                                {4192}let kb_44: mac_key = (if v_846 then 2-proj-2-tuple(v_845) else caught-fail) in
                                {4193}let es_69: bitstring = (if v_846 then 1-proj-2-tuple(v_845) else caught-fail) in
                                {4194}let binders_15: bitstring = (if v_846 then catch-fail(hmac(@8_tls_h,kb_44,cur_log'_16)) else caught-fail) in
                                {4195}let v_847: bool = not-caught-fail(binders_15) in
                                {4196}let v_848: bitstring = catch-fail((if v_846 then (if v_847 then (client_psk_ext(id_51,binders_15),(psk_104,id_51,es_69,is_safe_41)) else fail-any) else fail-any)) in
                                {4197}let v_849: bool = (not-caught-fail(v_848) && success?(1-proj-2-tuple(v_848))) in
                                {4198}let psk_data_27: bitstring = (if v_849 then 2-proj-2-tuple(v_848) else caught-fail) in
                                {4199}let psk_ext_50: preSharedKeyExt = (if v_849 then 1-proj-2-tuple(v_848) else caught-fail) in
                                {4200}let offer_38: params = (if v_849 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_50) else caught-fail) in
                                {4201}let (client_hello'_18: msg,cr'_20: bytes32,kex_data'_15: bitstring,psk_data'_15: bitstring) = (if v_849 then (CH(cr_27,offer_38),cr_27,kex_data_13,psk_data_27) else fail-any) in
                                {4202}event ClientOffersAead(cr'_20,@8_tls_a);
                                {4203}event ClientOffersHash(cr'_20,@8_tls_h);
                                {4204}event ClientOffersGroup(cr'_20,@8_tls_g);
                                {4205}out(io, client_hello'_18);
                                {4206}let cur_log4_15: bitstring = (cur_log3_7,client_hello'_18) in
                                {4207}in(io, server_hello'_15: msg);
                                {4208}let SH(sr'_15: bytes32,mode'_15: params) = server_hello'_15 in
                                (
                                    {4209}if (sr'_15 = B32(HRR24,HRR8)) then
                                        {4210}out(io, unexpected_message)
                                    else
                                        {4211}let (x_280: bitstring,g_21: group) = kex_data'_15 in
                                        {4212}let (psk_offer_20: preSharedKey,id_offer_20: identityPsk,es_offer_20: bitstring,is_safe_offer_20: bool) = psk_data'_15 in
                                        {4213}event Client_PSKOffer(id_client_4,psk_offer_20,id_offer_20,is_safe_offer_20);
                                        {4214}event Client_Rand_client(id_client_4,cr'_20);
                                        {4215}event Client_DH_client(id_client_4,dh_pub(g_21,x_280));
                                        {4216}event Client_server_domain(id_client_4,s_dom_16);
                                        {4217}let SH(sr_34: bytes32,mode_26: params) = server_hello'_15 in
                                        {4218}event Client_Rand_server(id_client_4,sr_34);
                                        {4219}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_21,gy_21: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_51: preSharedKeyExt) = mode_26 in
                                        (
                                            {4220}let cur_log2_50: bitstring = (cur_log4_15,server_hello'_15) in
                                            {4221}event Client_DH_server(id_client_4,gy_21);
                                            {4222}let v_850: bool = (psk_ext_51 = empty_psk_ext) in
                                            {4223}let psk_105: preSharedKey = (if v_850 then NoPsk else caught-fail) in
                                            {4224}let s_82: bitstring = (if v_850 then zero else caught-fail) in
                                            {4225}let k_72: bitstring = (if v_850 then catch-fail(psk2b(psk_105)) else caught-fail) in
                                            {4226}let v_851: bool = not-caught-fail(k_72) in
                                            {4227}let early_secret_67: bitstring = (if v_850 then catch-fail((if v_851 then hmac(@8_tls_h,s_82,k_72) else fail-any)) else caught-fail) in
                                            {4228}let v_852: bool = not-caught-fail(early_secret_67) in
                                            {4229}let l_250: label = (if v_852 then tls13_ext_res_binder else caught-fail) in
                                            {4230}let m_87: bitstring = (if v_852 then zero else caught-fail) in
                                            {4231}let h_248: bitstring = (if v_852 then catch-fail(hash(@8_tls_h,m_87)) else caught-fail) in
                                            {4232}let v_853: bool = not-caught-fail(h_248) in
                                            {4233}let x_281: bitstring = (if v_853 then (l_250,h_248) else caught-fail) in
                                            {4234}let binder_key_45: bitstring = (if v_852 then catch-fail((if v_853 then hmac(@8_tls_h,early_secret_67,x_281) else fail-any)) else caught-fail) in
                                            {4235}let v_854: bool = not-caught-fail(binder_key_45) in
                                            {4236}let v_855: bitstring = (if v_850 then catch-fail((if v_852 then (if v_854 then (early_secret_67,binder_key_45) else fail-any) else fail-any)) else caught-fail) in
                                            {4237}let v_856: bool = (not-caught-fail(v_855) && success?(1-proj-2-tuple(v_855))) in
                                            {4238}let kb_45: mac_key = (if v_856 then 2-proj-2-tuple(v_855) else caught-fail) in
                                            {4239}let es_70: bitstring = (if v_856 then 1-proj-2-tuple(v_855) else caught-fail) in
                                            {4240}let v_857: bitstring = (if not(v_850) then catch-fail(psk_data'_15) else caught-fail) in
                                            {4241}let v_858: bool = (not-caught-fail(v_857) && success?(1-proj-4-tuple(v_857))) in
                                            {4242}let is_safe_42: bool = (if v_858 then 4-proj-4-tuple(v_857) else caught-fail) in
                                            {4243}let es_71: bitstring = (if v_858 then 3-proj-4-tuple(v_857) else caught-fail) in
                                            {4244}let id_52: identityPsk = (if v_858 then 2-proj-4-tuple(v_857) else caught-fail) in
                                            {4245}let psk_106: preSharedKey = (if v_858 then 1-proj-4-tuple(v_857) else caught-fail) in
                                            {4246}let (psk_107: preSharedKey,early_secret_68: bitstring,valid_20: bool,safe_psk_29: bool) = (if v_850 then (if v_856 then (NoPsk,es_70,true,false) else fail-any) else (if v_858 then (psk_106,es_71,((psk_106 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_51)),is_safe_42) else fail-any)) in
                                            {4247}event Client_PSKChoosen(id_client_4,psk_107,safe_psk_29);
                                            {4248}if valid_20 then
                                            (
                                                {4249}let gxy_42: element = catch-fail(dh_decap_fun(g_21,gy_21,x_280)) in
                                                {4250}let v_859: bool = not-caught-fail(gxy_42) in
                                                {4251}new s_83[]: seed;
                                                {4252}let gxy_43: element = (if v_859 then gxy_42 else dh_f(s_83)) in
                                                {4253}event Client_DH_gxy(id_client_4,gxy_43);
                                                {4254}let l_251: label = tls13_derived in
                                                {4255}let m_88: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4256}let v_860: bool = not-caught-fail(m_88) in
                                                {4257}let h_249: bitstring = (if v_860 then catch-fail(hash(@8_tls_h,m_88)) else caught-fail) in
                                                {4258}let v_861: bool = not-caught-fail(h_249) in
                                                {4259}let x_282: bitstring = (if v_861 then (l_251,h_249) else caught-fail) in
                                                {4260}let extra_50: bitstring = catch-fail((if v_860 then (if v_861 then hmac(@8_tls_h,early_secret_68,x_282) else fail-any) else fail-any)) in
                                                {4261}let v_862: bool = not-caught-fail(extra_50) in
                                                {4262}let handshake_secret_21: bitstring = (if v_862 then hmac(@8_tls_h,extra_50,gxy_43) else fail-any) in
                                                {4263}let l_252: label = tls13_derived in
                                                {4264}let m_89: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4265}let v_863: bool = not-caught-fail(m_89) in
                                                {4266}let h_250: bitstring = (if v_863 then catch-fail(hash(@8_tls_h,m_89)) else caught-fail) in
                                                {4267}let v_864: bool = not-caught-fail(h_250) in
                                                {4268}let x_283: bitstring = (if v_864 then (l_252,h_250) else caught-fail) in
                                                {4269}let extra_51: bitstring = catch-fail((if v_863 then (if v_864 then hmac(@8_tls_h,handshake_secret_21,x_283) else fail-any) else fail-any)) in
                                                {4270}let v_865: bool = not-caught-fail(extra_51) in
                                                {4271}let k_73: bitstring = (if v_865 then zero else caught-fail) in
                                                {4272}let master_secret_49: bitstring = (if v_865 then catch-fail(hmac(@8_tls_h,handshake_secret_21,k_73)) else caught-fail) in
                                                {4273}let v_866: bool = not-caught-fail(master_secret_49) in
                                                {4274}let l_253: label = (if v_866 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {4275}let h_251: bitstring = (if v_866 then catch-fail(hash(@8_tls_h,cur_log2_50)) else caught-fail) in
                                                {4276}let v_867: bool = not-caught-fail(h_251) in
                                                {4277}let x_284: bitstring = (if v_867 then (l_253,h_251) else caught-fail) in
                                                {4278}let client_hts_21: bitstring = (if v_866 then catch-fail((if v_867 then hmac(@8_tls_h,handshake_secret_21,x_284) else fail-any)) else caught-fail) in
                                                {4279}let v_868: bool = not-caught-fail(client_hts_21) in
                                                {4280}let l_254: label = (if v_868 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {4281}let h_252: bitstring = (if v_868 then catch-fail(hash(@8_tls_h,cur_log2_50)) else caught-fail) in
                                                {4282}let v_869: bool = not-caught-fail(h_252) in
                                                {4283}let x_285: bitstring = (if v_869 then (l_254,h_252) else caught-fail) in
                                                {4284}let server_hts_21: bitstring = (if v_868 then catch-fail((if v_869 then hmac(@8_tls_h,handshake_secret_21,x_285) else fail-any)) else caught-fail) in
                                                {4285}let v_870: bool = not-caught-fail(server_hts_21) in
                                                {4286}let l_255: label = (if v_870 then tls13_key else caught-fail) in
                                                {4287}let h_253: bitstring = (if v_870 then zero else caught-fail) in
                                                {4288}let x_286: bitstring = (if v_870 then (l_255,h_253) else caught-fail) in
                                                {4289}let client_wkh_21: bitstring = (if v_870 then catch-fail(hmac(@8_tls_h,client_hts_21,x_286)) else caught-fail) in
                                                {4290}let v_871: bool = not-caught-fail(client_wkh_21) in
                                                {4291}let l_256: label = (if v_871 then tls13_key else caught-fail) in
                                                {4292}let h_254: bitstring = (if v_871 then zero else caught-fail) in
                                                {4293}let x_287: bitstring = (if v_871 then (l_256,h_254) else caught-fail) in
                                                {4294}let server_wkh_21: bitstring = (if v_871 then catch-fail(hmac(@8_tls_h,server_hts_21,x_287)) else caught-fail) in
                                                {4295}let v_872: bool = not-caught-fail(server_wkh_21) in
                                                {4296}let l_257: label = (if v_872 then tls13_finished else caught-fail) in
                                                {4297}let h_255: bitstring = (if v_872 then zero else caught-fail) in
                                                {4298}let x_288: bitstring = (if v_872 then (l_257,h_255) else caught-fail) in
                                                {4299}let client_fk_21: bitstring = (if v_872 then catch-fail(hmac(@8_tls_h,client_hts_21,x_288)) else caught-fail) in
                                                {4300}let v_873: bool = not-caught-fail(client_fk_21) in
                                                {4301}let l_258: label = (if v_873 then tls13_finished else caught-fail) in
                                                {4302}let h_256: bitstring = (if v_873 then zero else caught-fail) in
                                                {4303}let x_289: bitstring = (if v_873 then (l_258,h_256) else caught-fail) in
                                                {4304}let server_fk_21: bitstring = (if v_873 then catch-fail(hmac(@8_tls_h,server_hts_21,x_289)) else caught-fail) in
                                                {4305}let v_874: bool = not-caught-fail(server_fk_21) in
                                                {4306}let (master_secret_50: bitstring,chk_28: aead_key,shk_27: aead_key,cfin_28: mac_key,sfin_27: mac_key) = (if v_865 then (if v_866 then (if v_868 then (if v_870 then (if v_871 then (if v_872 then (if v_873 then (if v_874 then (master_secret_49,client_wkh_21,server_wkh_21,client_fk_21,server_fk_21) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {4307}event Client_chk(id_client_4,chk_28);
                                                {4308}event Client_shk(id_client_4,shk_27);
                                                {4309}event Client_cfin(id_client_4,cfin_28);
                                                {4310}event Client_sfin(id_client_4,sfin_27);
                                                {4311}in(io, enc_ee_msg_20: bitstring);
                                                {4312}let ee_msg_25: msg = aead_dec(@8_tls_a,shk_27,0,zero,enc_ee_msg_20) in
                                                {4313}let EE(ech_ee_20: echExt,extra_ee_20: extraExt) = ee_msg_25 in
                                                {4314}let cur_log2_51: bitstring = (cur_log2_50,ee_msg_25) in
                                                {4315}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_20,sr_34,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_107,safe_psk_29,@8_comp_psk,master_secret_50,chk_28,0,shk_27,1,cfin_28,sfin_27,cur_log2_51)))
                                            )
                                            else
                                                {4316}out(io, illegal_parameter)
                                        )
                                        else
                                            {4317}out(io, illegal_parameter)
                                )
                                else
                                    {4318}out(io, unexpected_message)
                            )
                            else
                                {4471}get pre_shared_keys(c_dom'_9: domain,=s_dom_16,=@8_tls_h,id_53: identityPsk,psk_108: preSharedKey,idP_11: idProc,is_safe_43: bool) in
                                {4319}event Selected_one_time_used_psk(id_client_4,psk_108,is_safe_43);
                                {4320}event Selected_psk(c_dom_6,c_dom'_9,idP_11,is_safe_43);
                                {4321}event Selected_psk_no_missmatch(id_client_4,s_dom_16,@8_tls_h,psk_108,id_53);
                                {4322}event Selected_psk_with_ID(c_dom_6,c_dom'_9,id_53,idP_11,is_safe_43);
                                {4323}let v_875: bitstring = (id_53,psk_108,is_safe_43) in
                                {4324}let v_876: bool = success?(1-proj-3-tuple(v_875)) in
                                {4325}let is_safe_44: bool = (if v_876 then 3-proj-3-tuple(v_875) else caught-fail) in
                                {4326}let psk_109: preSharedKey = (if v_876 then 2-proj-3-tuple(v_875) else caught-fail) in
                                {4327}let id_54: identityPsk = (if v_876 then 1-proj-3-tuple(v_875) else caught-fail) in
                                {4328}let offer_39: params = (if v_876 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_16),ech_ext_16,extra_49,trunc_client_psk_ext(id_54)) else caught-fail) in
                                {4329}let cur_log'_17: bitstring = (if v_876 then (cur_log3_7,CH(cr_27,offer_39)) else caught-fail) in
                                {4330}let s_84: bitstring = (if v_876 then zero else caught-fail) in
                                {4331}let k_74: bitstring = (if v_876 then catch-fail(psk2b(psk_109)) else caught-fail) in
                                {4332}let v_877: bool = not-caught-fail(k_74) in
                                {4333}let early_secret_69: bitstring = (if v_876 then catch-fail((if v_877 then hmac(@8_tls_h,s_84,k_74) else fail-any)) else caught-fail) in
                                {4334}let v_878: bool = not-caught-fail(early_secret_69) in
                                {4335}let l_259: label = (if v_878 then tls13_ext_res_binder else caught-fail) in
                                {4336}let m_90: bitstring = (if v_878 then zero else caught-fail) in
                                {4337}let h_257: bitstring = (if v_878 then catch-fail(hash(@8_tls_h,m_90)) else caught-fail) in
                                {4338}let v_879: bool = not-caught-fail(h_257) in
                                {4339}let x_290: bitstring = (if v_879 then (l_259,h_257) else caught-fail) in
                                {4340}let binder_key_46: bitstring = (if v_878 then catch-fail((if v_879 then hmac(@8_tls_h,early_secret_69,x_290) else fail-any)) else caught-fail) in
                                {4341}let v_880: bool = not-caught-fail(binder_key_46) in
                                {4342}let v_881: bitstring = (if v_876 then catch-fail((if v_878 then (if v_880 then (early_secret_69,binder_key_46) else fail-any) else fail-any)) else caught-fail) in
                                {4343}let v_882: bool = (not-caught-fail(v_881) && success?(1-proj-2-tuple(v_881))) in
                                {4344}let kb_46: mac_key = (if v_882 then 2-proj-2-tuple(v_881) else caught-fail) in
                                {4345}let es_72: bitstring = (if v_882 then 1-proj-2-tuple(v_881) else caught-fail) in
                                {4346}let binders_16: bitstring = (if v_882 then catch-fail(hmac(@8_tls_h,kb_46,cur_log'_17)) else caught-fail) in
                                {4347}let v_883: bool = not-caught-fail(binders_16) in
                                {4348}let v_884: bitstring = catch-fail((if v_876 then (if v_882 then (if v_883 then (client_psk_ext(id_54,binders_16),(psk_109,id_54,es_72,is_safe_44)) else fail-any) else fail-any) else fail-any)) in
                                {4349}let v_885: bool = (not-caught-fail(v_884) && success?(1-proj-2-tuple(v_884))) in
                                {4350}let psk_data_28: bitstring = (if v_885 then 2-proj-2-tuple(v_884) else caught-fail) in
                                {4351}let psk_ext_52: preSharedKeyExt = (if v_885 then 1-proj-2-tuple(v_884) else caught-fail) in
                                {4352}let offer_40: params = (if v_885 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_52) else caught-fail) in
                                {4353}let (client_hello'_19: msg,cr'_21: bytes32,kex_data'_16: bitstring,psk_data'_16: bitstring) = (if v_885 then (CH(cr_27,offer_40),cr_27,kex_data_13,psk_data_28) else fail-any) in
                                {4354}event ClientOffersAead(cr'_21,@8_tls_a);
                                {4355}event ClientOffersHash(cr'_21,@8_tls_h);
                                {4356}event ClientOffersGroup(cr'_21,@8_tls_g);
                                {4357}out(io, client_hello'_19);
                                {4358}let cur_log4_16: bitstring = (cur_log3_7,client_hello'_19) in
                                {4359}in(io, server_hello'_16: msg);
                                {4360}let SH(sr'_16: bytes32,mode'_16: params) = server_hello'_16 in
                                (
                                    {4361}if (sr'_16 = B32(HRR24,HRR8)) then
                                        {4362}out(io, unexpected_message)
                                    else
                                        {4363}let (x_291: bitstring,g_22: group) = kex_data'_16 in
                                        {4364}let (psk_offer_21: preSharedKey,id_offer_21: identityPsk,es_offer_21: bitstring,is_safe_offer_21: bool) = psk_data'_16 in
                                        {4365}event Client_PSKOffer(id_client_4,psk_offer_21,id_offer_21,is_safe_offer_21);
                                        {4366}event Client_Rand_client(id_client_4,cr'_21);
                                        {4367}event Client_DH_client(id_client_4,dh_pub(g_22,x_291));
                                        {4368}event Client_server_domain(id_client_4,s_dom_16);
                                        {4369}let SH(sr_35: bytes32,mode_27: params) = server_hello'_16 in
                                        {4370}event Client_Rand_server(id_client_4,sr_35);
                                        {4371}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_22,gy_22: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_53: preSharedKeyExt) = mode_27 in
                                        (
                                            {4372}let cur_log2_52: bitstring = (cur_log4_16,server_hello'_16) in
                                            {4373}event Client_DH_server(id_client_4,gy_22);
                                            {4374}let v_886: bool = (psk_ext_53 = empty_psk_ext) in
                                            {4375}let psk_110: preSharedKey = (if v_886 then NoPsk else caught-fail) in
                                            {4376}let s_85: bitstring = (if v_886 then zero else caught-fail) in
                                            {4377}let k_75: bitstring = (if v_886 then catch-fail(psk2b(psk_110)) else caught-fail) in
                                            {4378}let v_887: bool = not-caught-fail(k_75) in
                                            {4379}let early_secret_70: bitstring = (if v_886 then catch-fail((if v_887 then hmac(@8_tls_h,s_85,k_75) else fail-any)) else caught-fail) in
                                            {4380}let v_888: bool = not-caught-fail(early_secret_70) in
                                            {4381}let l_260: label = (if v_888 then tls13_ext_res_binder else caught-fail) in
                                            {4382}let m_91: bitstring = (if v_888 then zero else caught-fail) in
                                            {4383}let h_258: bitstring = (if v_888 then catch-fail(hash(@8_tls_h,m_91)) else caught-fail) in
                                            {4384}let v_889: bool = not-caught-fail(h_258) in
                                            {4385}let x_292: bitstring = (if v_889 then (l_260,h_258) else caught-fail) in
                                            {4386}let binder_key_47: bitstring = (if v_888 then catch-fail((if v_889 then hmac(@8_tls_h,early_secret_70,x_292) else fail-any)) else caught-fail) in
                                            {4387}let v_890: bool = not-caught-fail(binder_key_47) in
                                            {4388}let v_891: bitstring = (if v_886 then catch-fail((if v_888 then (if v_890 then (early_secret_70,binder_key_47) else fail-any) else fail-any)) else caught-fail) in
                                            {4389}let v_892: bool = (not-caught-fail(v_891) && success?(1-proj-2-tuple(v_891))) in
                                            {4390}let kb_47: mac_key = (if v_892 then 2-proj-2-tuple(v_891) else caught-fail) in
                                            {4391}let es_73: bitstring = (if v_892 then 1-proj-2-tuple(v_891) else caught-fail) in
                                            {4392}let v_893: bitstring = (if not(v_886) then catch-fail(psk_data'_16) else caught-fail) in
                                            {4393}let v_894: bool = (not-caught-fail(v_893) && success?(1-proj-4-tuple(v_893))) in
                                            {4394}let is_safe_45: bool = (if v_894 then 4-proj-4-tuple(v_893) else caught-fail) in
                                            {4395}let es_74: bitstring = (if v_894 then 3-proj-4-tuple(v_893) else caught-fail) in
                                            {4396}let id_55: identityPsk = (if v_894 then 2-proj-4-tuple(v_893) else caught-fail) in
                                            {4397}let psk_111: preSharedKey = (if v_894 then 1-proj-4-tuple(v_893) else caught-fail) in
                                            {4398}let (psk_112: preSharedKey,early_secret_71: bitstring,valid_21: bool,safe_psk_30: bool) = (if v_886 then (if v_892 then (NoPsk,es_73,true,false) else fail-any) else (if v_894 then (psk_111,es_74,((psk_111 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_53)),is_safe_45) else fail-any)) in
                                            {4399}event Client_PSKChoosen(id_client_4,psk_112,safe_psk_30);
                                            {4400}if valid_21 then
                                            (
                                                {4401}let gxy_44: element = catch-fail(dh_decap_fun(g_22,gy_22,x_291)) in
                                                {4402}let v_895: bool = not-caught-fail(gxy_44) in
                                                {4403}new s_86[]: seed;
                                                {4404}let gxy_45: element = (if v_895 then gxy_44 else dh_f(s_86)) in
                                                {4405}event Client_DH_gxy(id_client_4,gxy_45);
                                                {4406}let l_261: label = tls13_derived in
                                                {4407}let m_92: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4408}let v_896: bool = not-caught-fail(m_92) in
                                                {4409}let h_259: bitstring = (if v_896 then catch-fail(hash(@8_tls_h,m_92)) else caught-fail) in
                                                {4410}let v_897: bool = not-caught-fail(h_259) in
                                                {4411}let x_293: bitstring = (if v_897 then (l_261,h_259) else caught-fail) in
                                                {4412}let extra_52: bitstring = catch-fail((if v_896 then (if v_897 then hmac(@8_tls_h,early_secret_71,x_293) else fail-any) else fail-any)) in
                                                {4413}let v_898: bool = not-caught-fail(extra_52) in
                                                {4414}let handshake_secret_22: bitstring = (if v_898 then hmac(@8_tls_h,extra_52,gxy_45) else fail-any) in
                                                {4415}let l_262: label = tls13_derived in
                                                {4416}let m_93: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4417}let v_899: bool = not-caught-fail(m_93) in
                                                {4418}let h_260: bitstring = (if v_899 then catch-fail(hash(@8_tls_h,m_93)) else caught-fail) in
                                                {4419}let v_900: bool = not-caught-fail(h_260) in
                                                {4420}let x_294: bitstring = (if v_900 then (l_262,h_260) else caught-fail) in
                                                {4421}let extra_53: bitstring = catch-fail((if v_899 then (if v_900 then hmac(@8_tls_h,handshake_secret_22,x_294) else fail-any) else fail-any)) in
                                                {4422}let v_901: bool = not-caught-fail(extra_53) in
                                                {4423}let k_76: bitstring = (if v_901 then zero else caught-fail) in
                                                {4424}let master_secret_51: bitstring = (if v_901 then catch-fail(hmac(@8_tls_h,handshake_secret_22,k_76)) else caught-fail) in
                                                {4425}let v_902: bool = not-caught-fail(master_secret_51) in
                                                {4426}let l_263: label = (if v_902 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {4427}let h_261: bitstring = (if v_902 then catch-fail(hash(@8_tls_h,cur_log2_52)) else caught-fail) in
                                                {4428}let v_903: bool = not-caught-fail(h_261) in
                                                {4429}let x_295: bitstring = (if v_903 then (l_263,h_261) else caught-fail) in
                                                {4430}let client_hts_22: bitstring = (if v_902 then catch-fail((if v_903 then hmac(@8_tls_h,handshake_secret_22,x_295) else fail-any)) else caught-fail) in
                                                {4431}let v_904: bool = not-caught-fail(client_hts_22) in
                                                {4432}let l_264: label = (if v_904 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {4433}let h_262: bitstring = (if v_904 then catch-fail(hash(@8_tls_h,cur_log2_52)) else caught-fail) in
                                                {4434}let v_905: bool = not-caught-fail(h_262) in
                                                {4435}let x_296: bitstring = (if v_905 then (l_264,h_262) else caught-fail) in
                                                {4436}let server_hts_22: bitstring = (if v_904 then catch-fail((if v_905 then hmac(@8_tls_h,handshake_secret_22,x_296) else fail-any)) else caught-fail) in
                                                {4437}let v_906: bool = not-caught-fail(server_hts_22) in
                                                {4438}let l_265: label = (if v_906 then tls13_key else caught-fail) in
                                                {4439}let h_263: bitstring = (if v_906 then zero else caught-fail) in
                                                {4440}let x_297: bitstring = (if v_906 then (l_265,h_263) else caught-fail) in
                                                {4441}let client_wkh_22: bitstring = (if v_906 then catch-fail(hmac(@8_tls_h,client_hts_22,x_297)) else caught-fail) in
                                                {4442}let v_907: bool = not-caught-fail(client_wkh_22) in
                                                {4443}let l_266: label = (if v_907 then tls13_key else caught-fail) in
                                                {4444}let h_264: bitstring = (if v_907 then zero else caught-fail) in
                                                {4445}let x_298: bitstring = (if v_907 then (l_266,h_264) else caught-fail) in
                                                {4446}let server_wkh_22: bitstring = (if v_907 then catch-fail(hmac(@8_tls_h,server_hts_22,x_298)) else caught-fail) in
                                                {4447}let v_908: bool = not-caught-fail(server_wkh_22) in
                                                {4448}let l_267: label = (if v_908 then tls13_finished else caught-fail) in
                                                {4449}let h_265: bitstring = (if v_908 then zero else caught-fail) in
                                                {4450}let x_299: bitstring = (if v_908 then (l_267,h_265) else caught-fail) in
                                                {4451}let client_fk_22: bitstring = (if v_908 then catch-fail(hmac(@8_tls_h,client_hts_22,x_299)) else caught-fail) in
                                                {4452}let v_909: bool = not-caught-fail(client_fk_22) in
                                                {4453}let l_268: label = (if v_909 then tls13_finished else caught-fail) in
                                                {4454}let h_266: bitstring = (if v_909 then zero else caught-fail) in
                                                {4455}let x_300: bitstring = (if v_909 then (l_268,h_266) else caught-fail) in
                                                {4456}let server_fk_22: bitstring = (if v_909 then catch-fail(hmac(@8_tls_h,server_hts_22,x_300)) else caught-fail) in
                                                {4457}let v_910: bool = not-caught-fail(server_fk_22) in
                                                {4458}let (master_secret_52: bitstring,chk_29: aead_key,shk_28: aead_key,cfin_29: mac_key,sfin_28: mac_key) = (if v_901 then (if v_902 then (if v_904 then (if v_906 then (if v_907 then (if v_908 then (if v_909 then (if v_910 then (master_secret_51,client_wkh_22,server_wkh_22,client_fk_22,server_fk_22) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {4459}event Client_chk(id_client_4,chk_29);
                                                {4460}event Client_shk(id_client_4,shk_28);
                                                {4461}event Client_cfin(id_client_4,cfin_29);
                                                {4462}event Client_sfin(id_client_4,sfin_28);
                                                {4463}in(io, enc_ee_msg_21: bitstring);
                                                {4464}let ee_msg_26: msg = aead_dec(@8_tls_a,shk_28,0,zero,enc_ee_msg_21) in
                                                {4465}let EE(ech_ee_21: echExt,extra_ee_21: extraExt) = ee_msg_26 in
                                                {4466}let cur_log2_53: bitstring = (cur_log2_52,ee_msg_26) in
                                                {4467}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_21,sr_35,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_112,safe_psk_30,@8_comp_psk,master_secret_52,chk_29,0,shk_28,1,cfin_29,sfin_28,cur_log2_53)))
                                            )
                                            else
                                                {4468}out(io, illegal_parameter)
                                        )
                                        else
                                            {4469}out(io, illegal_parameter)
                                )
                                else
                                    {4470}out(io, unexpected_message)
                        )
                        else
                            {4472}let psk_113: preSharedKey = NoPsk in
                            {4473}let s_87: bitstring = zero in
                            {4474}let k_77: bitstring = catch-fail(psk2b(psk_113)) in
                            {4475}let v_911: bool = not-caught-fail(k_77) in
                            {4476}let early_secret_72: bitstring = catch-fail((if v_911 then hmac(@8_tls_h,s_87,k_77) else fail-any)) in
                            {4477}let v_912: bool = not-caught-fail(early_secret_72) in
                            {4478}let l_269: label = (if v_912 then tls13_ext_res_binder else caught-fail) in
                            {4479}let m_94: bitstring = (if v_912 then zero else caught-fail) in
                            {4480}let h_267: bitstring = (if v_912 then catch-fail(hash(@8_tls_h,m_94)) else caught-fail) in
                            {4481}let v_913: bool = not-caught-fail(h_267) in
                            {4482}let x_301: bitstring = (if v_913 then (l_269,h_267) else caught-fail) in
                            {4483}let binder_key_48: bitstring = (if v_912 then catch-fail((if v_913 then hmac(@8_tls_h,early_secret_72,x_301) else fail-any)) else caught-fail) in
                            {4484}let v_914: bool = not-caught-fail(binder_key_48) in
                            {4485}let v_915: bitstring = catch-fail((if v_912 then (if v_914 then (early_secret_72,binder_key_48) else fail-any) else fail-any)) in
                            {4486}let v_916: bool = (not-caught-fail(v_915) && success?(1-proj-2-tuple(v_915))) in
                            {4487}let kb_48: mac_key = (if v_916 then 2-proj-2-tuple(v_915) else caught-fail) in
                            {4488}let es_75: bitstring = (if v_916 then 1-proj-2-tuple(v_915) else caught-fail) in
                            {4489}let v_917: bitstring = catch-fail((if v_916 then (empty_psk_ext,(NoPsk,zero,es_75,false)) else fail-any)) in
                            {4490}let v_918: bool = (not-caught-fail(v_917) && success?(1-proj-2-tuple(v_917))) in
                            {4491}let psk_data_29: bitstring = (if v_918 then 2-proj-2-tuple(v_917) else caught-fail) in
                            {4492}let psk_ext_54: preSharedKeyExt = (if v_918 then 1-proj-2-tuple(v_917) else caught-fail) in
                            {4493}let offer_41: params = (if v_918 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_54) else caught-fail) in
                            {4494}let (client_hello'_20: msg,cr'_22: bytes32,kex_data'_17: bitstring,psk_data'_17: bitstring) = (if v_918 then (CH(cr_27,offer_41),cr_27,kex_data_13,psk_data_29) else fail-any) in
                            {4495}event ClientOffersAead(cr'_22,@8_tls_a);
                            {4496}event ClientOffersHash(cr'_22,@8_tls_h);
                            {4497}event ClientOffersGroup(cr'_22,@8_tls_g);
                            {4498}out(io, client_hello'_20);
                            {4499}let cur_log4_17: bitstring = (cur_log3_7,client_hello'_20) in
                            {4500}in(io, server_hello'_17: msg);
                            {4501}let SH(sr'_17: bytes32,mode'_17: params) = server_hello'_17 in
                            (
                                {4502}if (sr'_17 = B32(HRR24,HRR8)) then
                                    {4503}out(io, unexpected_message)
                                else
                                    {4504}let (x_302: bitstring,g_23: group) = kex_data'_17 in
                                    {4505}let (psk_offer_22: preSharedKey,id_offer_22: identityPsk,es_offer_22: bitstring,is_safe_offer_22: bool) = psk_data'_17 in
                                    {4506}event Client_PSKOffer(id_client_4,psk_offer_22,id_offer_22,is_safe_offer_22);
                                    {4507}event Client_Rand_client(id_client_4,cr'_22);
                                    {4508}event Client_DH_client(id_client_4,dh_pub(g_23,x_302));
                                    {4509}event Client_server_domain(id_client_4,s_dom_16);
                                    {4510}let SH(sr_36: bytes32,mode_28: params) = server_hello'_17 in
                                    {4511}event Client_Rand_server(id_client_4,sr_36);
                                    {4512}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_23,gy_23: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_55: preSharedKeyExt) = mode_28 in
                                    (
                                        {4513}let cur_log2_54: bitstring = (cur_log4_17,server_hello'_17) in
                                        {4514}event Client_DH_server(id_client_4,gy_23);
                                        {4515}let v_919: bool = (psk_ext_55 = empty_psk_ext) in
                                        {4516}let psk_114: preSharedKey = (if v_919 then NoPsk else caught-fail) in
                                        {4517}let s_88: bitstring = (if v_919 then zero else caught-fail) in
                                        {4518}let k_78: bitstring = (if v_919 then catch-fail(psk2b(psk_114)) else caught-fail) in
                                        {4519}let v_920: bool = not-caught-fail(k_78) in
                                        {4520}let early_secret_73: bitstring = (if v_919 then catch-fail((if v_920 then hmac(@8_tls_h,s_88,k_78) else fail-any)) else caught-fail) in
                                        {4521}let v_921: bool = not-caught-fail(early_secret_73) in
                                        {4522}let l_270: label = (if v_921 then tls13_ext_res_binder else caught-fail) in
                                        {4523}let m_95: bitstring = (if v_921 then zero else caught-fail) in
                                        {4524}let h_268: bitstring = (if v_921 then catch-fail(hash(@8_tls_h,m_95)) else caught-fail) in
                                        {4525}let v_922: bool = not-caught-fail(h_268) in
                                        {4526}let x_303: bitstring = (if v_922 then (l_270,h_268) else caught-fail) in
                                        {4527}let binder_key_49: bitstring = (if v_921 then catch-fail((if v_922 then hmac(@8_tls_h,early_secret_73,x_303) else fail-any)) else caught-fail) in
                                        {4528}let v_923: bool = not-caught-fail(binder_key_49) in
                                        {4529}let v_924: bitstring = (if v_919 then catch-fail((if v_921 then (if v_923 then (early_secret_73,binder_key_49) else fail-any) else fail-any)) else caught-fail) in
                                        {4530}let v_925: bool = (not-caught-fail(v_924) && success?(1-proj-2-tuple(v_924))) in
                                        {4531}let kb_49: mac_key = (if v_925 then 2-proj-2-tuple(v_924) else caught-fail) in
                                        {4532}let es_76: bitstring = (if v_925 then 1-proj-2-tuple(v_924) else caught-fail) in
                                        {4533}let v_926: bitstring = (if not(v_919) then catch-fail(psk_data'_17) else caught-fail) in
                                        {4534}let v_927: bool = (not-caught-fail(v_926) && success?(1-proj-4-tuple(v_926))) in
                                        {4535}let is_safe_46: bool = (if v_927 then 4-proj-4-tuple(v_926) else caught-fail) in
                                        {4536}let es_77: bitstring = (if v_927 then 3-proj-4-tuple(v_926) else caught-fail) in
                                        {4537}let id_56: identityPsk = (if v_927 then 2-proj-4-tuple(v_926) else caught-fail) in
                                        {4538}let psk_115: preSharedKey = (if v_927 then 1-proj-4-tuple(v_926) else caught-fail) in
                                        {4539}let (psk_116: preSharedKey,early_secret_74: bitstring,valid_22: bool,safe_psk_31: bool) = (if v_919 then (if v_925 then (NoPsk,es_76,true,false) else fail-any) else (if v_927 then (psk_115,es_77,((psk_115 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_55)),is_safe_46) else fail-any)) in
                                        {4540}event Client_PSKChoosen(id_client_4,psk_116,safe_psk_31);
                                        {4541}if valid_22 then
                                        (
                                            {4542}let gxy_46: element = catch-fail(dh_decap_fun(g_23,gy_23,x_302)) in
                                            {4543}let v_928: bool = not-caught-fail(gxy_46) in
                                            {4544}new s_89[]: seed;
                                            {4545}let gxy_47: element = (if v_928 then gxy_46 else dh_f(s_89)) in
                                            {4546}event Client_DH_gxy(id_client_4,gxy_47);
                                            {4547}let l_271: label = tls13_derived in
                                            {4548}let m_96: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                            {4549}let v_929: bool = not-caught-fail(m_96) in
                                            {4550}let h_269: bitstring = (if v_929 then catch-fail(hash(@8_tls_h,m_96)) else caught-fail) in
                                            {4551}let v_930: bool = not-caught-fail(h_269) in
                                            {4552}let x_304: bitstring = (if v_930 then (l_271,h_269) else caught-fail) in
                                            {4553}let extra_54: bitstring = catch-fail((if v_929 then (if v_930 then hmac(@8_tls_h,early_secret_74,x_304) else fail-any) else fail-any)) in
                                            {4554}let v_931: bool = not-caught-fail(extra_54) in
                                            {4555}let handshake_secret_23: bitstring = (if v_931 then hmac(@8_tls_h,extra_54,gxy_47) else fail-any) in
                                            {4556}let l_272: label = tls13_derived in
                                            {4557}let m_97: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                            {4558}let v_932: bool = not-caught-fail(m_97) in
                                            {4559}let h_270: bitstring = (if v_932 then catch-fail(hash(@8_tls_h,m_97)) else caught-fail) in
                                            {4560}let v_933: bool = not-caught-fail(h_270) in
                                            {4561}let x_305: bitstring = (if v_933 then (l_272,h_270) else caught-fail) in
                                            {4562}let extra_55: bitstring = catch-fail((if v_932 then (if v_933 then hmac(@8_tls_h,handshake_secret_23,x_305) else fail-any) else fail-any)) in
                                            {4563}let v_934: bool = not-caught-fail(extra_55) in
                                            {4564}let k_79: bitstring = (if v_934 then zero else caught-fail) in
                                            {4565}let master_secret_53: bitstring = (if v_934 then catch-fail(hmac(@8_tls_h,handshake_secret_23,k_79)) else caught-fail) in
                                            {4566}let v_935: bool = not-caught-fail(master_secret_53) in
                                            {4567}let l_273: label = (if v_935 then tls13_client_handshake_traffic_secret else caught-fail) in
                                            {4568}let h_271: bitstring = (if v_935 then catch-fail(hash(@8_tls_h,cur_log2_54)) else caught-fail) in
                                            {4569}let v_936: bool = not-caught-fail(h_271) in
                                            {4570}let x_306: bitstring = (if v_936 then (l_273,h_271) else caught-fail) in
                                            {4571}let client_hts_23: bitstring = (if v_935 then catch-fail((if v_936 then hmac(@8_tls_h,handshake_secret_23,x_306) else fail-any)) else caught-fail) in
                                            {4572}let v_937: bool = not-caught-fail(client_hts_23) in
                                            {4573}let l_274: label = (if v_937 then tls13_server_handshake_traffic_secret else caught-fail) in
                                            {4574}let h_272: bitstring = (if v_937 then catch-fail(hash(@8_tls_h,cur_log2_54)) else caught-fail) in
                                            {4575}let v_938: bool = not-caught-fail(h_272) in
                                            {4576}let x_307: bitstring = (if v_938 then (l_274,h_272) else caught-fail) in
                                            {4577}let server_hts_23: bitstring = (if v_937 then catch-fail((if v_938 then hmac(@8_tls_h,handshake_secret_23,x_307) else fail-any)) else caught-fail) in
                                            {4578}let v_939: bool = not-caught-fail(server_hts_23) in
                                            {4579}let l_275: label = (if v_939 then tls13_key else caught-fail) in
                                            {4580}let h_273: bitstring = (if v_939 then zero else caught-fail) in
                                            {4581}let x_308: bitstring = (if v_939 then (l_275,h_273) else caught-fail) in
                                            {4582}let client_wkh_23: bitstring = (if v_939 then catch-fail(hmac(@8_tls_h,client_hts_23,x_308)) else caught-fail) in
                                            {4583}let v_940: bool = not-caught-fail(client_wkh_23) in
                                            {4584}let l_276: label = (if v_940 then tls13_key else caught-fail) in
                                            {4585}let h_274: bitstring = (if v_940 then zero else caught-fail) in
                                            {4586}let x_309: bitstring = (if v_940 then (l_276,h_274) else caught-fail) in
                                            {4587}let server_wkh_23: bitstring = (if v_940 then catch-fail(hmac(@8_tls_h,server_hts_23,x_309)) else caught-fail) in
                                            {4588}let v_941: bool = not-caught-fail(server_wkh_23) in
                                            {4589}let l_277: label = (if v_941 then tls13_finished else caught-fail) in
                                            {4590}let h_275: bitstring = (if v_941 then zero else caught-fail) in
                                            {4591}let x_310: bitstring = (if v_941 then (l_277,h_275) else caught-fail) in
                                            {4592}let client_fk_23: bitstring = (if v_941 then catch-fail(hmac(@8_tls_h,client_hts_23,x_310)) else caught-fail) in
                                            {4593}let v_942: bool = not-caught-fail(client_fk_23) in
                                            {4594}let l_278: label = (if v_942 then tls13_finished else caught-fail) in
                                            {4595}let h_276: bitstring = (if v_942 then zero else caught-fail) in
                                            {4596}let x_311: bitstring = (if v_942 then (l_278,h_276) else caught-fail) in
                                            {4597}let server_fk_23: bitstring = (if v_942 then catch-fail(hmac(@8_tls_h,server_hts_23,x_311)) else caught-fail) in
                                            {4598}let v_943: bool = not-caught-fail(server_fk_23) in
                                            {4599}let (master_secret_54: bitstring,chk_30: aead_key,shk_29: aead_key,cfin_30: mac_key,sfin_29: mac_key) = (if v_934 then (if v_935 then (if v_937 then (if v_939 then (if v_940 then (if v_941 then (if v_942 then (if v_943 then (master_secret_53,client_wkh_23,server_wkh_23,client_fk_23,server_fk_23) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                            {4600}event Client_chk(id_client_4,chk_30);
                                            {4601}event Client_shk(id_client_4,shk_29);
                                            {4602}event Client_cfin(id_client_4,cfin_30);
                                            {4603}event Client_sfin(id_client_4,sfin_29);
                                            {4604}in(io, enc_ee_msg_22: bitstring);
                                            {4605}let ee_msg_27: msg = aead_dec(@8_tls_a,shk_29,0,zero,enc_ee_msg_22) in
                                            {4606}let EE(ech_ee_22: echExt,extra_ee_22: extraExt) = ee_msg_27 in
                                            {4607}let cur_log2_55: bitstring = (cur_log2_54,ee_msg_27) in
                                            {4608}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_22,sr_36,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_116,safe_psk_31,@8_comp_psk,master_secret_54,chk_30,0,shk_29,1,cfin_30,sfin_29,cur_log2_55)))
                                        )
                                        else
                                            {4609}out(io, illegal_parameter)
                                    )
                                    else
                                        {4610}out(io, illegal_parameter)
                            )
                            else
                                {4611}out(io, unexpected_message)
                    )
                    else
                        {4612}out(io, illegal_parameter)
                )
                else
                    {4613}if send_kex_4 then
                    (
                        {4614}let (x_312: bitstring,g_24: group) = kex_data_12 in
                        {4615}let (psk_offer_23: preSharedKey,id_offer_23: identityPsk,es_offer_23: bitstring,is_safe_offer_23: bool) = psk_data_26 in
                        {4616}event Client_PSKOffer(id_client_4,psk_offer_23,id_offer_23,is_safe_offer_23);
                        {4617}event Client_Rand_client(id_client_4,cr_26);
                        {4618}event Client_DH_client(id_client_4,dh_pub(g_24,x_312));
                        {4619}event Client_server_domain(id_client_4,s_dom_16);
                        {4620}let SH(sr_37: bytes32,mode_29: params) = server_hello_6 in
                        {4621}event Client_Rand_server(id_client_4,sr_37);
                        {4622}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_24,gy_24: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_56: preSharedKeyExt) = mode_29 in
                        (
                            {4623}let cur_log2_56: bitstring = (cur_log2_49,server_hello_6) in
                            {4624}event Client_DH_server(id_client_4,gy_24);
                            {4625}let v_944: bool = (psk_ext_56 = empty_psk_ext) in
                            {4626}let psk_117: preSharedKey = (if v_944 then NoPsk else caught-fail) in
                            {4627}let s_90: bitstring = (if v_944 then zero else caught-fail) in
                            {4628}let k_80: bitstring = (if v_944 then catch-fail(psk2b(psk_117)) else caught-fail) in
                            {4629}let v_945: bool = not-caught-fail(k_80) in
                            {4630}let early_secret_75: bitstring = (if v_944 then catch-fail((if v_945 then hmac(@8_tls_h,s_90,k_80) else fail-any)) else caught-fail) in
                            {4631}let v_946: bool = not-caught-fail(early_secret_75) in
                            {4632}let l_279: label = (if v_946 then tls13_ext_res_binder else caught-fail) in
                            {4633}let m_98: bitstring = (if v_946 then zero else caught-fail) in
                            {4634}let h_277: bitstring = (if v_946 then catch-fail(hash(@8_tls_h,m_98)) else caught-fail) in
                            {4635}let v_947: bool = not-caught-fail(h_277) in
                            {4636}let x_313: bitstring = (if v_947 then (l_279,h_277) else caught-fail) in
                            {4637}let binder_key_50: bitstring = (if v_946 then catch-fail((if v_947 then hmac(@8_tls_h,early_secret_75,x_313) else fail-any)) else caught-fail) in
                            {4638}let v_948: bool = not-caught-fail(binder_key_50) in
                            {4639}let v_949: bitstring = (if v_944 then catch-fail((if v_946 then (if v_948 then (early_secret_75,binder_key_50) else fail-any) else fail-any)) else caught-fail) in
                            {4640}let v_950: bool = (not-caught-fail(v_949) && success?(1-proj-2-tuple(v_949))) in
                            {4641}let kb_50: mac_key = (if v_950 then 2-proj-2-tuple(v_949) else caught-fail) in
                            {4642}let es_78: bitstring = (if v_950 then 1-proj-2-tuple(v_949) else caught-fail) in
                            {4643}let v_951: bitstring = (if not(v_944) then catch-fail(psk_data_26) else caught-fail) in
                            {4644}let v_952: bool = (not-caught-fail(v_951) && success?(1-proj-4-tuple(v_951))) in
                            {4645}let is_safe_47: bool = (if v_952 then 4-proj-4-tuple(v_951) else caught-fail) in
                            {4646}let es_79: bitstring = (if v_952 then 3-proj-4-tuple(v_951) else caught-fail) in
                            {4647}let id_57: identityPsk = (if v_952 then 2-proj-4-tuple(v_951) else caught-fail) in
                            {4648}let psk_118: preSharedKey = (if v_952 then 1-proj-4-tuple(v_951) else caught-fail) in
                            {4649}let (psk_119: preSharedKey,early_secret_76: bitstring,valid_23: bool,safe_psk_32: bool) = (if v_944 then (if v_950 then (NoPsk,es_78,true,false) else fail-any) else (if v_952 then (psk_118,es_79,((psk_118 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_56)),is_safe_47) else fail-any)) in
                            {4650}event Client_PSKChoosen(id_client_4,psk_119,safe_psk_32);
                            {4651}if valid_23 then
                            (
                                {4652}let gxy_48: element = catch-fail(dh_decap_fun(g_24,gy_24,x_312)) in
                                {4653}let v_953: bool = not-caught-fail(gxy_48) in
                                {4654}new s_91[]: seed;
                                {4655}let gxy_49: element = (if v_953 then gxy_48 else dh_f(s_91)) in
                                {4656}event Client_DH_gxy(id_client_4,gxy_49);
                                {4657}let l_280: label = tls13_derived in
                                {4658}let m_99: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                {4659}let v_954: bool = not-caught-fail(m_99) in
                                {4660}let h_278: bitstring = (if v_954 then catch-fail(hash(@8_tls_h,m_99)) else caught-fail) in
                                {4661}let v_955: bool = not-caught-fail(h_278) in
                                {4662}let x_314: bitstring = (if v_955 then (l_280,h_278) else caught-fail) in
                                {4663}let extra_56: bitstring = catch-fail((if v_954 then (if v_955 then hmac(@8_tls_h,early_secret_76,x_314) else fail-any) else fail-any)) in
                                {4664}let v_956: bool = not-caught-fail(extra_56) in
                                {4665}let handshake_secret_24: bitstring = (if v_956 then hmac(@8_tls_h,extra_56,gxy_49) else fail-any) in
                                {4666}let l_281: label = tls13_derived in
                                {4667}let m_100: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                {4668}let v_957: bool = not-caught-fail(m_100) in
                                {4669}let h_279: bitstring = (if v_957 then catch-fail(hash(@8_tls_h,m_100)) else caught-fail) in
                                {4670}let v_958: bool = not-caught-fail(h_279) in
                                {4671}let x_315: bitstring = (if v_958 then (l_281,h_279) else caught-fail) in
                                {4672}let extra_57: bitstring = catch-fail((if v_957 then (if v_958 then hmac(@8_tls_h,handshake_secret_24,x_315) else fail-any) else fail-any)) in
                                {4673}let v_959: bool = not-caught-fail(extra_57) in
                                {4674}let k_81: bitstring = (if v_959 then zero else caught-fail) in
                                {4675}let master_secret_55: bitstring = (if v_959 then catch-fail(hmac(@8_tls_h,handshake_secret_24,k_81)) else caught-fail) in
                                {4676}let v_960: bool = not-caught-fail(master_secret_55) in
                                {4677}let l_282: label = (if v_960 then tls13_client_handshake_traffic_secret else caught-fail) in
                                {4678}let h_280: bitstring = (if v_960 then catch-fail(hash(@8_tls_h,cur_log2_56)) else caught-fail) in
                                {4679}let v_961: bool = not-caught-fail(h_280) in
                                {4680}let x_316: bitstring = (if v_961 then (l_282,h_280) else caught-fail) in
                                {4681}let client_hts_24: bitstring = (if v_960 then catch-fail((if v_961 then hmac(@8_tls_h,handshake_secret_24,x_316) else fail-any)) else caught-fail) in
                                {4682}let v_962: bool = not-caught-fail(client_hts_24) in
                                {4683}let l_283: label = (if v_962 then tls13_server_handshake_traffic_secret else caught-fail) in
                                {4684}let h_281: bitstring = (if v_962 then catch-fail(hash(@8_tls_h,cur_log2_56)) else caught-fail) in
                                {4685}let v_963: bool = not-caught-fail(h_281) in
                                {4686}let x_317: bitstring = (if v_963 then (l_283,h_281) else caught-fail) in
                                {4687}let server_hts_24: bitstring = (if v_962 then catch-fail((if v_963 then hmac(@8_tls_h,handshake_secret_24,x_317) else fail-any)) else caught-fail) in
                                {4688}let v_964: bool = not-caught-fail(server_hts_24) in
                                {4689}let l_284: label = (if v_964 then tls13_key else caught-fail) in
                                {4690}let h_282: bitstring = (if v_964 then zero else caught-fail) in
                                {4691}let x_318: bitstring = (if v_964 then (l_284,h_282) else caught-fail) in
                                {4692}let client_wkh_24: bitstring = (if v_964 then catch-fail(hmac(@8_tls_h,client_hts_24,x_318)) else caught-fail) in
                                {4693}let v_965: bool = not-caught-fail(client_wkh_24) in
                                {4694}let l_285: label = (if v_965 then tls13_key else caught-fail) in
                                {4695}let h_283: bitstring = (if v_965 then zero else caught-fail) in
                                {4696}let x_319: bitstring = (if v_965 then (l_285,h_283) else caught-fail) in
                                {4697}let server_wkh_24: bitstring = (if v_965 then catch-fail(hmac(@8_tls_h,server_hts_24,x_319)) else caught-fail) in
                                {4698}let v_966: bool = not-caught-fail(server_wkh_24) in
                                {4699}let l_286: label = (if v_966 then tls13_finished else caught-fail) in
                                {4700}let h_284: bitstring = (if v_966 then zero else caught-fail) in
                                {4701}let x_320: bitstring = (if v_966 then (l_286,h_284) else caught-fail) in
                                {4702}let client_fk_24: bitstring = (if v_966 then catch-fail(hmac(@8_tls_h,client_hts_24,x_320)) else caught-fail) in
                                {4703}let v_967: bool = not-caught-fail(client_fk_24) in
                                {4704}let l_287: label = (if v_967 then tls13_finished else caught-fail) in
                                {4705}let h_285: bitstring = (if v_967 then zero else caught-fail) in
                                {4706}let x_321: bitstring = (if v_967 then (l_287,h_285) else caught-fail) in
                                {4707}let server_fk_24: bitstring = (if v_967 then catch-fail(hmac(@8_tls_h,server_hts_24,x_321)) else caught-fail) in
                                {4708}let v_968: bool = not-caught-fail(server_fk_24) in
                                {4709}let (master_secret_56: bitstring,chk_31: aead_key,shk_30: aead_key,cfin_31: mac_key,sfin_30: mac_key) = (if v_959 then (if v_960 then (if v_962 then (if v_964 then (if v_965 then (if v_966 then (if v_967 then (if v_968 then (master_secret_55,client_wkh_24,server_wkh_24,client_fk_24,server_fk_24) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                {4710}event Client_chk(id_client_4,chk_31);
                                {4711}event Client_shk(id_client_4,shk_30);
                                {4712}event Client_cfin(id_client_4,cfin_31);
                                {4713}event Client_sfin(id_client_4,sfin_30);
                                {4714}in(io, enc_ee_msg_23: bitstring);
                                {4715}let ee_msg_28: msg = aead_dec(@8_tls_a,shk_30,0,zero,enc_ee_msg_23) in
                                {4716}let EE(ech_ee_23: echExt,extra_ee_23: extraExt) = ee_msg_28 in
                                {4717}let cur_log2_57: bitstring = (cur_log2_56,ee_msg_28) in
                                {4718}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr_26,sr_37,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_119,safe_psk_32,@8_comp_psk,master_secret_56,chk_31,0,shk_30,1,cfin_31,sfin_30,cur_log2_57)))
                            )
                            else
                                {4719}out(io, illegal_parameter)
                        )
                        else
                            {4720}out(io, illegal_parameter)
                    )
                    else
                        {4721}out(io, illegal_parameter)
            )
            else
                {4722}out(io, unexpected_message)
        )
)

--  Biprocess 1 (that is, biprocess 0, with let moved downwards):
(
    {1}!
    {2}in(io, a: domain);
    {3}new lgt_id: idProc;
    {4}event Same(a);
    {5}new s: seed;
    {6}let sk_h: privkey = uc_privkey(s) in
    {7}let crt: certificate = valid_cert(a,pk(sk_h)) in
    {8}insert long_term_keys(a,sk_h,pk(sk_h),crt,lgt_id);
    {9}out(io, crt)
) | (
    {10}!
    {11}in(io, (c_dom: domain,s_dom: domain));
    {13}new psk_id: idProc;
    {14}event Same(c_dom);
    {15}event Same(s_dom);
    {16}new s_1: seed;
    {17}let psk: preSharedKey = uc_psk(s_1) in
    {12}let h_alg: hash_alg = id_hash(StrongHash,1) in
    {18}let id: identityPsk = mk_idpsk(s_dom,h_alg,psk) in
    {19}insert pre_shared_keys(c_dom,s_dom,h_alg,id,psk,psk_id,true)
) | (
    {20}!
    {21}in(io, s_dom_1: domain);
    {25}event Same(s_dom_1);
    {26}new id_1: configId;
    {27}new s_2[]: seed;
    {24}let ech_g: group = id_g(StrongDH,2) in
    {28}let gx: element = dh_pub(ech_g,dh_k(s_2)) in
    {29}let (skR: bitstring,pkR: element) = (dh_k(s_2),gx) in
    {23}let ech_a: aead_alg = id_aead(StrongAE,2) in
    {22}let ech_h: hash_alg = id_hash(StrongHash,2) in
    {30}let config: echConfig = ech_config(id_1,ech_g,pkR,s_dom_1,ech_h,ech_a) in
    {31}insert ech_configurations(config,skR);
    {32}out(io, config)
) | (
    {33}!
    {34}in(io, a_1: domain);
    {35}new idP: idProc;
    {36}new sk_d: privkey;
    {37}event CompromisedLtkForEquiv(pk(sk_d));
    {38}event Same(a_1);
    {39}let crt_1: certificate = valid_cert(a_1,pk(sk_d)) in
    {40}insert long_term_keys(a_1,sk_d,pk(sk_d),crt_1,idP);
    {41}event CompromisedLtk(pk(sk_d));
    {42}out(io, (sk_d,crt_1))
) | (
    0
) | (
    {43}!
    {44}in(io, s_dom_2: domain);
    {48}event Same(s_dom_2);
    {49}new id_2: configId;
    {50}new skR_d: bitstring;
    {47}let ech_g_1: group = id_g(StrongDH,2) in
    {51}let pkR_d: element = dh_pub(ech_g_1,skR_d) in
    {46}let ech_a_1: aead_alg = id_aead(StrongAE,2) in
    {45}let ech_h_1: hash_alg = id_hash(StrongHash,2) in
    {52}let config_1: echConfig = ech_config(id_2,ech_g_1,pkR_d,s_dom_2,ech_h_1,ech_a_1) in
    {53}event CompromisedEchKeyForEquiv(config_1);
    {54}insert ech_configurations(config_1,skR_d);
    {55}out(io, config_1);
    {56}event CompromisedEchKey(config_1);
    {57}out(io, skR_d)
) | (
    {58}!
    {59}in(ch_server_CFIN, (id_server: idProc,ArgsServerCFIN(cr: bytes32,sr: bytes32,h_alg_1: hash_alg,a_alg: aead_alg,s_dom_3: domain,s_pkey: pubkey,c_pkey: pubkey,psk_1: preSharedKey,master_secret: bitstring,chk: aead_key,c_seq: nat,cfin: mac_key,cur_log: bitstring)));
    {60}new st[]: stamp;
    {61}event PreciseIdProcess(ch_server_CFIN,id_server,st);
    {62}event Server_Rand_client(id_server,cr);
    {63}event Server_Rand_server(id_server,sr);
    {64}event Server_PSKChoosen(id_server,psk_1);
    {65}event Server_chk(id_server,chk);
    {66}event Server_cfin(id_server,cfin);
    {67}event Server_Cert_server(id_server,s_pkey);
    {68}event Server_Cert_client(id_server,c_pkey);
    {69}new st1[]: stamp;
    {70}event PreciseMess(ch_server_CFIN,id_server,st1,(chk,cfin,master_secret));
    {71}in(io, enc_fin: bitstring);
    {72}let fin_msg: msg = aead_dec(a_alg,chk,c_seq,zero,enc_fin) in
    {73}let FIN(hash_msg: bitstring) = fin_msg in
    {74}if (hash_msg = hmac(h_alg_1,cfin,cur_log)) then
    {76}let h: bitstring = catch-fail(hash(h_alg_1,cur_log)) in
    {77}let v: bool = not-caught-fail(h) in
    {75}let l: label = tls13_client_application_traffic_secret in
    {78}let x: bitstring = (if v then (l,h) else caught-fail) in
    {79}let client_ats: bitstring = catch-fail((if v then hmac(h_alg_1,master_secret,x) else fail-any)) in
    {80}let v_1: bool = not-caught-fail(client_ats) in
    {82}let h_1: bitstring = (if v_1 then catch-fail(hash(h_alg_1,cur_log)) else caught-fail) in
    {83}let v_2: bool = not-caught-fail(h_1) in
    {81}let l_1: label = (if v_1 then tls13_server_application_traffic_secret else caught-fail) in
    {84}let x_1: bitstring = (if v_2 then (l_1,h_1) else caught-fail) in
    {85}let server_ats: bitstring = (if v_1 then catch-fail((if v_2 then hmac(h_alg_1,master_secret,x_1) else fail-any)) else caught-fail) in
    {86}let v_3: bool = not-caught-fail(server_ats) in
    {88}let h_2: bitstring = (if v_3 then catch-fail(hash(h_alg_1,cur_log)) else caught-fail) in
    {89}let v_4: bool = not-caught-fail(h_2) in
    {87}let l_2: label = (if v_3 then tls13_exporter_master_secret else caught-fail) in
    {90}let x_2: bitstring = (if v_4 then (l_2,h_2) else caught-fail) in
    {91}let ems: bitstring = (if v_3 then catch-fail((if v_4 then hmac(h_alg_1,master_secret,x_2) else fail-any)) else caught-fail) in
    {92}let v_5: bool = not-caught-fail(ems) in
    {94}let h_3: bitstring = (if v_5 then zero else caught-fail) in
    {93}let l_3: label = (if v_5 then tls13_key else caught-fail) in
    {95}let x_3: bitstring = (if v_5 then (l_3,h_3) else caught-fail) in
    {96}let client_wkad: bitstring = (if v_5 then catch-fail(hmac(h_alg_1,client_ats,x_3)) else caught-fail) in
    {97}let v_6: bool = not-caught-fail(client_wkad) in
    {99}let h_4: bitstring = (if v_6 then zero else caught-fail) in
    {98}let l_4: label = (if v_6 then tls13_key else caught-fail) in
    {100}let x_4: bitstring = (if v_6 then (l_4,h_4) else caught-fail) in
    {101}let server_wkad: bitstring = (if v_6 then catch-fail(hmac(h_alg_1,server_ats,x_4)) else caught-fail) in
    {102}let v_7: bool = not-caught-fail(server_wkad) in
    {104}let h_5: bitstring = (if v_7 then zero else caught-fail) in
    {103}let l_5: label = (if v_7 then tls13_finished else caught-fail) in
    {105}let x_5: bitstring = (if v_7 then (l_5,h_5) else caught-fail) in
    {106}let client_fkad: bitstring = (if v_7 then catch-fail(hmac(h_alg_1,client_ats,x_5)) else caught-fail) in
    {107}let v_8: bool = not-caught-fail(client_fkad) in
    {108}let (cak: aead_key,sak: aead_key,cfkad: mac_key,ems_1: bitstring) = (if v_1 then (if v_3 then (if v_5 then (if v_6 then (if v_7 then (if v_8 then (client_wkad,server_wkad,client_fkad,ems) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {109}let cur_log_CFIN: bitstring = (cur_log,fin_msg) in
    {111}let h_6: bitstring = catch-fail(hash(h_alg_1,cur_log_CFIN)) in
    {112}let v_9: bool = not-caught-fail(h_6) in
    {110}let l_6: label = tls13_resumption_master_secret in
    {113}let x_6: bitstring = (if v_9 then (l_6,h_6) else caught-fail) in
    {114}let rms: bitstring = (if v_9 then hmac(h_alg_1,master_secret,x_6) else fail-any) in
    {115}event Server_cak(id_server,cak);
    {116}event Server_sak(id_server,sak);
    {117}event Server_cfkad(id_server,cfkad);
    {118}event Server_rms(id_server,rms);
    {119}event ServerFinished(id_server,cr,sr,psk_1,s_pkey,c_pkey,cak,sak,ems_1,rms);
    (
        0
    ) | (
        0
    ) | (
        {120}!
        {121}in(io, (seq_srv: nat,seq_client: nat));
        {122}if (is_nat(seq_srv) && is_nat(seq_client)) then
        {123}new req_rand: bitstring;
        {124}event ServerRequestPH(id_server,cr,sr,psk_1,s_pkey,c_pkey,req_rand);
        {127}new st_1[]: stamp;
        {128}event ServerSequenceServerDataWriteKey(id_server,st_1,seq_srv);
        {125}let crtr_msg: msg = CRTR(req_rand) in
        {129}event ServerSends(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_srv,zero,crtr_msg);
        {126}let enc_crt: bitstring = aead_enc(a_alg,sak,seq_srv,zero,crtr_msg) in
        {130}out(io, enc_crt);
        {132}in(io, enc_cert_msg: bitstring);
        {133}let cert_msg: msg = aead_dec(a_alg,cak,seq_client,zero,enc_cert_msg) in
        {134}new st1_1[]: stamp;
        {135}event ServerSequenceClientDataWriteKey(id_server,st1_1,seq_client);
        {136}event ServerReceives(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_client,zero,cert_msg);
        {137}let CRT(=req_rand,crt_2: certificate) = cert_msg in
        {139}in(io, enc_cert_verif_msg: bitstring);
        {140}let cert_verify_msg: msg = aead_dec(a_alg,cak,seq_client + 1,zero,enc_cert_verif_msg) in
        {141}new st2[]: stamp;
        {142}event ServerSequenceClientDataWriteKey(id_server,st2,seq_client + 1);
        {143}event ServerReceives(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_client + 1,zero,cert_verify_msg);
        {144}let CV(signed_log: bitstring) = cert_verify_msg in
        {131}let cur_log_CRTR: bitstring = (cur_log_CFIN,crtr_msg) in
        {138}let cur_log_CRT: bitstring = (cur_log_CRTR,cert_msg) in
        {145}if (verify(get_pkey(crt_2),hash(h_alg_1,cur_log_CRT),signed_log) && verify_cert(crt_2)) then
        {146}let c_pkey': pubkey = get_pkey(crt_2) in
        {148}in(io, enc_fin_1: bitstring);
        {149}let fin_msg_1: msg = aead_dec(a_alg,cak,seq_client + 2,zero,enc_fin_1) in
        {150}new st3[]: stamp;
        {151}event ServerSequenceClientDataWriteKey(id_server,st3,seq_client + 2);
        {152}event ServerReceives(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_client + 2,zero,fin_msg_1);
        {153}let FIN(hash_msg_1: bitstring) = fin_msg_1 in
        {147}let cur_log_CV: bitstring = (cur_log_CRT,cert_verify_msg) in
        {154}if (hash_msg_1 = hmac(h_alg_1,cfkad,cur_log_CV)) then
            {155}event ServerFinishedPH(id_server,cr,sr,psk_1,s_pkey,c_pkey,req_rand,c_pkey')
        else
            {156}out(io, handshake_failure)
    )
) | (
    {157}!
    {158}in(ch_server_FIN, (id_server_1: idProc,ArgsServerFIN(cr_1: bytes32,sr_1: bytes32,h_alg_2: hash_alg,a_alg_1: aead_alg,s_dom_4: domain,s_pkey_1: pubkey,req_cert: bool,psk_2: preSharedKey,master_secret_1: bitstring,chk_1: aead_key,c_seq_1: nat,shk: aead_key,s_seq: nat,cfin_1: mac_key,sfin: mac_key,cur_log_1: bitstring)));
    {159}new st_2[]: stamp;
    {160}event PreciseIdProcess(ch_server_FIN,id_server_1,st_2);
    {161}event Server_Rand_client(id_server_1,cr_1);
    {162}event Server_Rand_server(id_server_1,sr_1);
    {163}event Server_PSKChoosen(id_server_1,psk_2);
    {164}event Server_chk(id_server_1,chk_1);
    {165}event Server_shk(id_server_1,shk);
    {166}event Server_cfin(id_server_1,cfin_1);
    {167}event Server_sfin(id_server_1,sfin);
    {168}event Server_Cert_server(id_server_1,s_pkey_1);
    {169}new st1_2[]: stamp;
    {170}event PreciseMess(ch_server_FIN,id_server_1,st1_2,(chk_1,shk,master_secret_1));
    {171}let hash_msg_2: bitstring = hmac(h_alg_2,sfin,cur_log_1) in
    {174}event PreServerFinished(id_server_1,cr_1,sr_1,psk_2,s_pkey_1);
    {172}let finished_msg: msg = FIN(hash_msg_2) in
    {173}let enc_finished: bitstring = aead_enc(a_alg_1,shk,s_seq,zero,finished_msg) in
    {175}out(io, enc_finished);
    {176}let cur_log_FIN: bitstring = (cur_log_1,finished_msg) in
    {177}if (req_cert && (psk_2 = NoPsk)) then
    (
        {178}in(io, enc_cert_msg_1: bitstring);
        {179}let cert_msg_1: msg = aead_dec(a_alg_1,chk_1,c_seq_1,zero,enc_cert_msg_1) in
        {180}let CRT(=zero,crt_3: certificate) = cert_msg_1 in
        {182}in(io, enc_cert_verif_msg_1: bitstring);
        {183}let cert_verify_msg_1: msg = aead_dec(a_alg_1,chk_1,c_seq_1 + 1,zero,enc_cert_verif_msg_1) in
        {184}let CV(signed_log_1: bitstring) = cert_verify_msg_1 in
        {181}let cur_log_CRT_1: bitstring = (cur_log_FIN,cert_msg_1) in
        {185}if (verify(get_pkey(crt_3),hash(h_alg_2,cur_log_CRT_1),signed_log_1) && verify_cert(crt_3)) then
        {186}let c_pkey_1: pubkey = get_pkey(crt_3) in
        {188}event Server_Cert_client(id_server_1,c_pkey_1);
        {187}let cur_log_CV_1: bitstring = (cur_log_CRT_1,cert_verify_msg_1) in
        {189}out(ch_server_CFIN, (id_server_1,ArgsServerCFIN(cr_1,sr_1,h_alg_2,a_alg_1,s_dom_4,s_pkey_1,c_pkey_1,psk_2,master_secret_1,chk_1,c_seq_1 + 2,cfin_1,cur_log_CV_1)))
    )
    else
        {190}event Server_Cert_client(id_server_1,NoPubKey);
        {191}out(ch_server_CFIN, (id_server_1,ArgsServerCFIN(cr_1,sr_1,h_alg_2,a_alg_1,s_dom_4,s_pkey_1,NoPubKey,psk_2,master_secret_1,chk_1,c_seq_1,cfin_1,cur_log_FIN)))
) | (
    {192}!
    {193}in(ch_server_CRT, (id_server_2: idProc,ArgsServerCRT(cr_2: bytes32,sr_2: bytes32,h_alg_3: hash_alg,a_alg_2: aead_alg,s_dom_5: domain,req_cert_1: bool,master_secret_2: bitstring,chk_2: aead_key,c_seq_2: nat,shk_1: aead_key,s_seq_1: nat,cfin_2: mac_key,sfin_1: mac_key,cur_log_2: bitstring)));
    {194}new st_3[]: stamp;
    {195}event PreciseIdProcess(ch_server_CRT,id_server_2,st_3);
    {196}event Server_Rand_client(id_server_2,cr_2);
    {197}event Server_Rand_server(id_server_2,sr_2);
    {198}event Server_PSKChoosen(id_server_2,NoPsk);
    {199}event Server_chk(id_server_2,chk_2);
    {200}event Server_shk(id_server_2,shk_1);
    {201}event Server_cfin(id_server_2,cfin_2);
    {202}event Server_sfin(id_server_2,sfin_1);
    {203}new st1_3[]: stamp;
    {204}event PreciseMess(ch_server_CRT,id_server_2,st1_3,(master_secret_2,chk_2,shk_1));
    {222}get long_term_keys(s_dom': domain,sk: privkey,s_pkey_2: pubkey,crt_4: certificate,idP_1: idProc) in
    {206}new @3_st[]: stamp;
    {205}let @3_x: bitstring = (s_dom',sk,s_pkey_2,crt_4,idP_1) in
    {207}event PreciseInput(@3_st,@3_x);
    {208}let () = () in
    {209}event Selected_ltk(s_dom_5,s_dom',idP_1);
    {210}let (sk_1: privkey,s_pkey_3: pubkey,crt_5: certificate) = (sk,s_pkey_2,crt_4) in
    {211}event Server_Cert_server(id_server_2,s_pkey_3);
    {212}let certificate_msg: msg = CRT(zero,crt_5) in
    {213}let encrypted_certificate_msg: bitstring = aead_enc(a_alg_2,shk_1,s_seq_1,zero,certificate_msg) in
    {214}out(io, encrypted_certificate_msg);
    {215}let cur_log_CRT_2: bitstring = (cur_log_2,certificate_msg) in
    {216}let signed_log_2: bitstring = sign(sk_1,hash(h_alg_3,cur_log_CRT_2)) in
    {217}let certificate_verify_msg: msg = CV(signed_log_2) in
    {218}let encrypted_certificate_verify_msg: bitstring = aead_enc(a_alg_2,shk_1,s_seq_1 + 1,zero,certificate_verify_msg) in
    {219}out(io, encrypted_certificate_verify_msg);
    {220}let cur_log_CV_2: bitstring = (cur_log_CRT_2,certificate_verify_msg) in
    {221}out(ch_server_FIN, (id_server_2,ArgsServerFIN(cr_2,sr_2,h_alg_3,a_alg_2,s_dom_5,s_pkey_3,req_cert_1,NoPsk,master_secret_2,chk_2,c_seq_2,shk_1,s_seq_1 + 2,cfin_2,sfin_1,cur_log_CV_2)))
) | (
    {223}!
    {224}in(ch_server_SH, (id_server_3: idProc,ArgsServerSH(tls_g: group,tls_h: hash_alg,tls_a: aead_alg,s_dom_6: domain,req_cert_2: bool,is_backend: bool,use_psk: bool,no_HRR: bool,ee_msg: msg,client_hello: msg,cur_log_3: bitstring)));
    {225}new st_4[]: stamp;
    {226}event PreciseMess(ch_server_SH,id_server_3,st_4,(use_psk,client_hello));
    {227}let CH(cr_3: bytes32,offer: params) = client_hello in
    {228}event Server_Rand_client(id_server_3,cr_3);
    {229}let nego(=TLS13,=tls_h,=tls_a,client_kex_ext(DHE_kex(=tls_g,gx_1: element)),sni_ext: sniExt,ech_ext: echExt,extra_ext: extraExt,psk_ext: preSharedKeyExt) = offer in
    (
        {230}if (sni_ext = SNI(s_dom_6)) then
        (
            {231}event Server_DH_client(id_server_3,gx_1);
            {232}let v_10: msg = client_hello in
            {233}let v_11: bool = (((TLS13 =nf 1-proj-nego(2-proj-CH(v_10))) && success?(1-proj-nego(2-proj-CH(v_10)))) && success?(1-proj-CH(v_10))) in
            {234}let psk_ext_1: preSharedKeyExt = (if v_11 then 8-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {235}let extra_ext_1: extraExt = (if v_11 then 7-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {236}let ech_ext_1: echExt = (if v_11 then 6-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {237}let sni_ext_1: sniExt = (if v_11 then 5-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {238}let kex_ext: keyShareExt = (if v_11 then 4-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {239}let a_alg_3: aead_alg = (if v_11 then 3-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {240}let h_alg_4: hash_alg = (if v_11 then 2-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {241}let cr_4: bytes32 = (if v_11 then 1-proj-CH(v_10) else caught-fail) in
            {242}let v_12: bitstring = (if v_11 then catch-fail((use_psk,psk_ext_1)) else caught-fail) in
            {243}let v_13: bool = (not-caught-fail(v_12) && (((true =nf 1-proj-2-tuple(v_12)) && success?(1-proj-client_psk_ext(2-proj-2-tuple(v_12)))) && success?(1-proj-2-tuple(v_12)))) in
            {244}let binders: bitstring = (if v_13 then 2-proj-client_psk_ext(2-proj-2-tuple(v_12)) else caught-fail) in
            {245}let id_3: identityPsk = (if v_13 then 1-proj-client_psk_ext(2-proj-2-tuple(v_12)) else caught-fail) in
            {246}let v_14: bitstring = (if v_13 then catch-fail((get_server_psk(id_3),get_hash_psk(id_3))) else caught-fail) in
            {247}let v_15: bool = (not-caught-fail(v_14) && (((s_dom_6 =nf 1-proj-2-tuple(v_14)) && (h_alg_4 =nf 2-proj-2-tuple(v_14))) && success?(1-proj-2-tuple(v_14)))) in
            {248}let psk_3: preSharedKey = (if v_15 then catch-fail(get_psk(id_3)) else caught-fail) in
            {249}let v_16: bool = not-caught-fail(psk_3) in
            {251}let k: bitstring = (if v_16 then catch-fail(psk2b(psk_3)) else caught-fail) in
            {252}let v_17: bool = not-caught-fail(k) in
            {250}let s_3: bitstring = (if v_16 then zero else caught-fail) in
            {253}let early_secret: bitstring = (if v_16 then catch-fail((if v_17 then hmac(h_alg_4,s_3,k) else fail-any)) else caught-fail) in
            {254}let v_18: bool = not-caught-fail(early_secret) in
            {256}let m: bitstring = (if v_18 then zero else caught-fail) in
            {257}let h_7: bitstring = (if v_18 then catch-fail(hash(h_alg_4,m)) else caught-fail) in
            {258}let v_19: bool = not-caught-fail(h_7) in
            {255}let l_7: label = (if v_18 then tls13_ext_res_binder else caught-fail) in
            {259}let x_7: bitstring = (if v_19 then (l_7,h_7) else caught-fail) in
            {260}let binder_key: bitstring = (if v_18 then catch-fail((if v_19 then hmac(h_alg_4,early_secret,x_7) else fail-any)) else caught-fail) in
            {261}let v_20: bool = not-caught-fail(binder_key) in
            {262}let v_21: bitstring = (if v_16 then catch-fail((if v_18 then (if v_20 then (early_secret,binder_key) else fail-any) else fail-any)) else caught-fail) in
            {263}let v_22: bool = (not-caught-fail(v_21) && success?(1-proj-2-tuple(v_21))) in
            {264}let kb: mac_key = (if v_22 then 2-proj-2-tuple(v_21) else caught-fail) in
            {265}let early_secret_1: bitstring = (if v_22 then 1-proj-2-tuple(v_21) else caught-fail) in
            {268}let v_23: bool = (v_13 && not(v_15)) in
            {269}let psk_4: preSharedKey = (if v_23 then NoPsk else caught-fail) in
            {271}let k_1: bitstring = (if v_23 then catch-fail(psk2b(psk_4)) else caught-fail) in
            {272}let v_24: bool = not-caught-fail(k_1) in
            {270}let s_4: bitstring = (if v_23 then zero else caught-fail) in
            {273}let early_secret_2: bitstring = (if v_23 then catch-fail((if v_24 then hmac(h_alg_4,s_4,k_1) else fail-any)) else caught-fail) in
            {274}let v_25: bool = not-caught-fail(early_secret_2) in
            {276}let m_1: bitstring = (if v_25 then zero else caught-fail) in
            {277}let h_8: bitstring = (if v_25 then catch-fail(hash(h_alg_4,m_1)) else caught-fail) in
            {278}let v_26: bool = not-caught-fail(h_8) in
            {275}let l_8: label = (if v_25 then tls13_ext_res_binder else caught-fail) in
            {279}let x_8: bitstring = (if v_26 then (l_8,h_8) else caught-fail) in
            {280}let binder_key_1: bitstring = (if v_25 then catch-fail((if v_26 then hmac(h_alg_4,early_secret_2,x_8) else fail-any)) else caught-fail) in
            {281}let v_27: bool = not-caught-fail(binder_key_1) in
            {282}let v_28: bitstring = (if v_23 then catch-fail((if v_25 then (if v_27 then (early_secret_2,binder_key_1) else fail-any) else fail-any)) else caught-fail) in
            {283}let v_29: bool = (not-caught-fail(v_28) && success?(1-proj-2-tuple(v_28))) in
            {284}let kb_1: mac_key = (if v_29 then 2-proj-2-tuple(v_28) else caught-fail) in
            {285}let es: bitstring = (if v_29 then 1-proj-2-tuple(v_28) else caught-fail) in
            {286}let v_30: bool = (v_11 && not(v_13)) in
            {287}let psk_5: preSharedKey = (if v_30 then NoPsk else caught-fail) in
            {289}let k_2: bitstring = (if v_30 then catch-fail(psk2b(psk_5)) else caught-fail) in
            {290}let v_31: bool = not-caught-fail(k_2) in
            {288}let s_5: bitstring = (if v_30 then zero else caught-fail) in
            {291}let early_secret_3: bitstring = (if v_30 then catch-fail((if v_31 then hmac(h_alg_4,s_5,k_2) else fail-any)) else caught-fail) in
            {292}let v_32: bool = not-caught-fail(early_secret_3) in
            {294}let m_2: bitstring = (if v_32 then zero else caught-fail) in
            {295}let h_9: bitstring = (if v_32 then catch-fail(hash(h_alg_4,m_2)) else caught-fail) in
            {296}let v_33: bool = not-caught-fail(h_9) in
            {293}let l_9: label = (if v_32 then tls13_ext_res_binder else caught-fail) in
            {297}let x_9: bitstring = (if v_33 then (l_9,h_9) else caught-fail) in
            {298}let binder_key_2: bitstring = (if v_32 then catch-fail((if v_33 then hmac(h_alg_4,early_secret_3,x_9) else fail-any)) else caught-fail) in
            {299}let v_34: bool = not-caught-fail(binder_key_2) in
            {300}let v_35: bitstring = (if v_30 then catch-fail((if v_32 then (if v_34 then (early_secret_3,binder_key_2) else fail-any) else fail-any)) else caught-fail) in
            {301}let v_36: bool = (not-caught-fail(v_35) && success?(1-proj-2-tuple(v_35))) in
            {302}let kb_2: mac_key = (if v_36 then 2-proj-2-tuple(v_35) else caught-fail) in
            {303}let es_1: bitstring = (if v_36 then 1-proj-2-tuple(v_35) else caught-fail) in
            {266}let offer_1: params = (if v_22 then nego(TLS13,h_alg_4,a_alg_3,kex_ext,sni_ext_1,ech_ext_1,extra_ext_1,trunc_client_psk_ext(id_3)) else caught-fail) in
            {267}let cur_log': bitstring = (if v_22 then (cur_log_3,CH(cr_4,offer_1)) else caught-fail) in
            {304}let (early_secret_4: bitstring,s_psk_ext: preSharedKeyExt,psk_6: preSharedKey) = (if v_11 then (if v_13 then (if v_15 then (if v_16 then (if v_22 then (if (binders = hmac(h_alg_4,kb,cur_log')) then (early_secret_1,server_psk_ext(1),psk_3) else fail-any) else fail-any) else fail-any) else (if v_29 then (es,empty_psk_ext,NoPsk) else fail-any)) else (if v_36 then (es_1,empty_psk_ext,NoPsk) else fail-any)) else fail-any) in
            {305}event Server_PSKChoosen(id_server_3,psk_6);
            {306}let cur_log_CH: bitstring = (cur_log_3,client_hello) in
            (
                {307}if (false && (no_HRR && (psk_6 ≠ NoPsk))) then
                {308}!
                {309}in(io, (i: nat,ad: bitstring,enc_early_data: bitstring));
                {311}let h_10: bitstring = catch-fail(hash(tls_h,cur_log_CH)) in
                {312}let v_37: bool = not-caught-fail(h_10) in
                {310}let l_10: label = tls13_client_early_traffic_secret in
                {313}let x_10: bitstring = (if v_37 then (l_10,h_10) else caught-fail) in
                {314}let atsc0: bitstring = catch-fail((if v_37 then hmac(tls_h,early_secret_4,x_10) else fail-any)) in
                {315}let v_38: bool = not-caught-fail(atsc0) in
                {317}let h_11: bitstring = (if v_38 then zero else caught-fail) in
                {316}let l_11: label = (if v_38 then tls13_key else caught-fail) in
                {318}let x_11: bitstring = (if v_38 then (l_11,h_11) else caught-fail) in
                {319}let kc0: bitstring = (if v_38 then catch-fail(hmac(tls_h,atsc0,x_11)) else caught-fail) in
                {320}let v_39: bool = not-caught-fail(kc0) in
                {322}let h_12: bitstring = (if v_39 then catch-fail(hash(tls_h,cur_log_CH)) else caught-fail) in
                {323}let v_40: bool = not-caught-fail(h_12) in
                {321}let l_12: label = (if v_39 then tls13_early_exporter_master_secret else caught-fail) in
                {324}let x_12: bitstring = (if v_40 then (l_12,h_12) else caught-fail) in
                {325}let ems0: bitstring = (if v_39 then catch-fail((if v_40 then hmac(tls_h,early_secret_4,x_12) else fail-any)) else caught-fail) in
                {326}let v_41: bool = not-caught-fail(ems0) in
                {327}let (wkc0: aead_key,ems0_1: bitstring) = (if v_38 then (if v_39 then (if v_41 then (kc0,ems0) else fail-any) else fail-any) else fail-any) in
                {328}let early_data: bitstring = aead_dec(tls_a,wkc0,i,ad,enc_early_data) in
                    {329}new st1_4[]: stamp;
                    {330}event ServerSequenceClient0RTTDataWriteKey(id_server_3,st1_4,i);
                    {331}event ServerReceives0(id_server_3,s_dom_6,cr_3,psk_6,i,ad,early_data)
                else
                    {332}out(io, bad_record_mac)
            ) | (
                {333}new s_6[]: seed;
                {334}let (gxy: element,gy: element) = (dh_xy(s_6,client_hello),dh_encap_fun(tls_g,gx_1,dh_xy(s_6,client_hello))) in
                {335}event Server_DH_server(id_server_3,gy);
                {336}event Server_DH_gxy(id_server_3,gxy);
                {338}let m_3: bitstring = catch-fail(hash(tls_h,zero)) in
                {339}let v_42: bool = not-caught-fail(m_3) in
                {340}let h_13: bitstring = (if v_42 then catch-fail(hash(tls_h,m_3)) else caught-fail) in
                {341}let v_43: bool = not-caught-fail(h_13) in
                {337}let l_13: label = tls13_derived in
                {342}let x_13: bitstring = (if v_43 then (l_13,h_13) else caught-fail) in
                {343}let extra: bitstring = catch-fail((if v_42 then (if v_43 then hmac(tls_h,early_secret_4,x_13) else fail-any) else fail-any)) in
                {344}let v_44: bool = not-caught-fail(extra) in
                {345}let handshake_secret: bitstring = (if v_44 then hmac(tls_h,extra,gxy) else fail-any) in
                {348}new sr24[]: bytes24;
                {363}new rand24[]: bytes24;
                {364}new rand8[]: bytes8;
                {347}let v_45: bool = is_backend in
                {349}let sr24_1: bytes24 = (if v_45 then sr24 else caught-fail) in
                {346}let s_offer: params = nego(TLS13,tls_h,tls_a,server_kex_ext(DHE_kex(tls_g,gy)),empty_sni_ext,empty_ech_ext,empty_extra_ext,s_psk_ext) in
                {350}let sh_modified: msg = (if v_45 then SH(B32(sr24_1,zero8),s_offer) else caught-fail) in
                {351}let cur_log_sh: bitstring = (if v_45 then (cur_log_CH,sh_modified) else caught-fail) in
                {352}let transcript_ech_conf: bitstring = (if v_45 then catch-fail(hash(tls_h,cur_log_sh)) else caught-fail) in
                {353}let v_46: bool = not-caught-fail(transcript_ech_conf) in
                {355}let k_3: bitstring = (if v_46 then catch-fail(b32_2_b(get_random(client_hello))) else caught-fail) in
                {356}let v_47: bool = not-caught-fail(k_3) in
                {354}let s_7: bitstring = (if v_46 then zero else caught-fail) in
                {357}let k_4: bitstring = (if v_46 then catch-fail((if v_47 then hmac(tls_h,s_7,k_3) else fail-any)) else caught-fail) in
                {358}let v_48: bool = not-caught-fail(k_4) in
                {359}let l_14: label = (if v_48 then ech_accept_confirmation else caught-fail) in
                {360}let x_14: bitstring = (if v_48 then (l_14,cur_log_sh) else caught-fail) in
                {361}let sr8: bytes8 = (if v_46 then catch-fail(crop_into_bytes8((if v_48 then hmac(tls_h,k_4,x_14) else fail-any))) else caught-fail) in
                {362}let v_49: bool = not-caught-fail(sr8) in
                {365}let sr_3: bytes32 = (if v_45 then (if v_46 then (if v_49 then B32(sr24_1,sr8) else fail-any) else fail-any) else B32(rand24,rand8)) in
                {367}event Server_Rand_server(id_server_3,sr_3);
                {368}event ServerChoosesGroup(id_server_3,tls_g);
                {369}event ServerChoosesHash(cr_3,sr_3,tls_h);
                {370}event ServerChoosesAead(cr_3,sr_3,tls_a);
                {366}let server_hello: msg = SH(sr_3,s_offer) in
                {371}out(io, server_hello);
                {374}let m_4: bitstring = catch-fail(hash(tls_h,zero)) in
                {375}let v_50: bool = not-caught-fail(m_4) in
                {376}let h_14: bitstring = (if v_50 then catch-fail(hash(tls_h,m_4)) else caught-fail) in
                {377}let v_51: bool = not-caught-fail(h_14) in
                {373}let l_15: label = tls13_derived in
                {378}let x_15: bitstring = (if v_51 then (l_15,h_14) else caught-fail) in
                {379}let extra_1: bitstring = catch-fail((if v_50 then (if v_51 then hmac(tls_h,handshake_secret,x_15) else fail-any) else fail-any)) in
                {380}let v_52: bool = not-caught-fail(extra_1) in
                {381}let k_5: bitstring = (if v_52 then zero else caught-fail) in
                {382}let master_secret_3: bitstring = (if v_52 then catch-fail(hmac(tls_h,handshake_secret,k_5)) else caught-fail) in
                {383}let v_53: bool = not-caught-fail(master_secret_3) in
                {372}let cur_log_SH: bitstring = (cur_log_CH,server_hello) in
                {385}let h_15: bitstring = (if v_53 then catch-fail(hash(tls_h,cur_log_SH)) else caught-fail) in
                {386}let v_54: bool = not-caught-fail(h_15) in
                {384}let l_16: label = (if v_53 then tls13_client_handshake_traffic_secret else caught-fail) in
                {387}let x_16: bitstring = (if v_54 then (l_16,h_15) else caught-fail) in
                {388}let client_hts: bitstring = (if v_53 then catch-fail((if v_54 then hmac(tls_h,handshake_secret,x_16) else fail-any)) else caught-fail) in
                {389}let v_55: bool = not-caught-fail(client_hts) in
                {391}let h_16: bitstring = (if v_55 then catch-fail(hash(tls_h,cur_log_SH)) else caught-fail) in
                {392}let v_56: bool = not-caught-fail(h_16) in
                {390}let l_17: label = (if v_55 then tls13_server_handshake_traffic_secret else caught-fail) in
                {393}let x_17: bitstring = (if v_56 then (l_17,h_16) else caught-fail) in
                {394}let server_hts: bitstring = (if v_55 then catch-fail((if v_56 then hmac(tls_h,handshake_secret,x_17) else fail-any)) else caught-fail) in
                {395}let v_57: bool = not-caught-fail(server_hts) in
                {397}let h_17: bitstring = (if v_57 then zero else caught-fail) in
                {396}let l_18: label = (if v_57 then tls13_key else caught-fail) in
                {398}let x_18: bitstring = (if v_57 then (l_18,h_17) else caught-fail) in
                {399}let client_wkh: bitstring = (if v_57 then catch-fail(hmac(tls_h,client_hts,x_18)) else caught-fail) in
                {400}let v_58: bool = not-caught-fail(client_wkh) in
                {402}let h_18: bitstring = (if v_58 then zero else caught-fail) in
                {401}let l_19: label = (if v_58 then tls13_key else caught-fail) in
                {403}let x_19: bitstring = (if v_58 then (l_19,h_18) else caught-fail) in
                {404}let server_wkh: bitstring = (if v_58 then catch-fail(hmac(tls_h,server_hts,x_19)) else caught-fail) in
                {405}let v_59: bool = not-caught-fail(server_wkh) in
                {407}let h_19: bitstring = (if v_59 then zero else caught-fail) in
                {406}let l_20: label = (if v_59 then tls13_finished else caught-fail) in
                {408}let x_20: bitstring = (if v_59 then (l_20,h_19) else caught-fail) in
                {409}let client_fk: bitstring = (if v_59 then catch-fail(hmac(tls_h,client_hts,x_20)) else caught-fail) in
                {410}let v_60: bool = not-caught-fail(client_fk) in
                {412}let h_20: bitstring = (if v_60 then zero else caught-fail) in
                {411}let l_21: label = (if v_60 then tls13_finished else caught-fail) in
                {413}let x_21: bitstring = (if v_60 then (l_21,h_20) else caught-fail) in
                {414}let server_fk: bitstring = (if v_60 then catch-fail(hmac(tls_h,server_hts,x_21)) else caught-fail) in
                {415}let v_61: bool = not-caught-fail(server_fk) in
                {416}let (master_secret_4: bitstring,chk_3: aead_key,shk_2: aead_key,cfin_3: mac_key,sfin_2: mac_key) = (if v_52 then (if v_53 then (if v_55 then (if v_57 then (if v_58 then (if v_59 then (if v_60 then (if v_61 then (master_secret_3,client_wkh,server_wkh,client_fk,server_fk) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                {417}event Server_chk(id_server_3,chk_3);
                {418}event Server_shk(id_server_3,shk_2);
                {419}event Server_cfin(id_server_3,cfin_3);
                {420}event Server_sfin(id_server_3,sfin_2);
                {421}let enc_ee: bitstring = aead_enc(tls_a,shk_2,0,zero,ee_msg) in
                {422}out(io, enc_ee);
                {423}let cur_log_EE: bitstring = (cur_log_SH,ee_msg) in
                {424}if (psk_6 = NoPsk) then
                (
                    {425}if req_cert_2 then
                    (
                        {426}let crtr_msg_1: msg = CRTR(zero) in
                        {427}let enc_crt_1: bitstring = aead_enc(tls_a,shk_2,1,zero,crtr_msg_1) in
                        {428}out(io, enc_crt_1);
                        {429}let cur_log_CRTR_1: bitstring = (cur_log_EE,crtr_msg_1) in
                        {430}out(ch_server_CRT, (id_server_3,ArgsServerCRT(cr_3,sr_3,tls_h,tls_a,s_dom_6,req_cert_2,master_secret_4,chk_3,0,shk_2,2,cfin_3,sfin_2,cur_log_CRTR_1)))
                    )
                    else
                        {431}out(ch_server_CRT, (id_server_3,ArgsServerCRT(cr_3,sr_3,tls_h,tls_a,s_dom_6,req_cert_2,master_secret_4,chk_3,0,shk_2,1,cfin_3,sfin_2,cur_log_EE)))
                )
                else
                    {432}out(ch_server_FIN, (id_server_3,ArgsServerFIN(cr_3,sr_3,tls_h,tls_a,s_dom_6,NoPubKey,false,psk_6,master_secret_4,chk_3,0,shk_2,1,cfin_3,sfin_2,cur_log_EE)))
            )
        )
        else
            {433}out(io, illegal_parameter)
    )
    else
        {434}out(io, handshake_failure)
) | (
    {435}!
    {436}in(ch_client_CFIN, (id_client: idProc,ArgsClientCFIN(cr_5: bytes32,sr_4: bytes32,h_alg_5: hash_alg,a_alg_4: aead_alg,c_dom_1: domain,s_dom_7: domain,s_pkey_4: pubkey,c_pkey_2: pubkey,psk_7: preSharedKey,safe_psk: bool,comp_psk: bool,master_secret_5: bitstring,chk_4: aead_key,seq_client_1: nat,shk_3: aead_key,seq_srv_1: nat,cfin_4: mac_key,sfin_3: mac_key,cur_log_4: bitstring)));
    {437}new st_5[]: stamp;
    {438}event PreciseIdProcess(ch_client_CFIN,id_client,st_5);
    {439}event Client_server_domain(id_client,s_dom_7);
    {440}event Client_Rand_client(id_client,cr_5);
    {441}event Client_Rand_server(id_client,sr_4);
    {442}event Client_PSKChoosen(id_client,psk_7,safe_psk);
    {443}event Client_comp_psk(id_client,comp_psk);
    {444}event Client_chk(id_client,chk_4);
    {445}event Client_shk(id_client,shk_3);
    {446}event Client_cfin(id_client,cfin_4);
    {447}event Client_sfin(id_client,sfin_3);
    {448}event Client_Cert_server(id_client,s_pkey_4);
    {449}event Client_Cert_client(id_client,c_pkey_2);
    {450}new st1_5[]: stamp;
    {451}let args: bitstring = (c_dom_1,s_dom_7,psk_7,s_pkey_4,master_secret_5,safe_psk,comp_psk,cur_log_4) in
    {452}event PreciseMess(ch_client_CFIN,id_client,st1_5,args);
    {454}let h_21: bitstring = catch-fail(hash(h_alg_5,cur_log_4)) in
    {455}let v_62: bool = not-caught-fail(h_21) in
    {453}let l_22: label = tls13_client_application_traffic_secret in
    {456}let x_22: bitstring = (if v_62 then (l_22,h_21) else caught-fail) in
    {457}let client_ats_1: bitstring = catch-fail((if v_62 then hmac(h_alg_5,master_secret_5,x_22) else fail-any)) in
    {458}let v_63: bool = not-caught-fail(client_ats_1) in
    {460}let h_22: bitstring = (if v_63 then catch-fail(hash(h_alg_5,cur_log_4)) else caught-fail) in
    {461}let v_64: bool = not-caught-fail(h_22) in
    {459}let l_23: label = (if v_63 then tls13_server_application_traffic_secret else caught-fail) in
    {462}let x_23: bitstring = (if v_64 then (l_23,h_22) else caught-fail) in
    {463}let server_ats_1: bitstring = (if v_63 then catch-fail((if v_64 then hmac(h_alg_5,master_secret_5,x_23) else fail-any)) else caught-fail) in
    {464}let v_65: bool = not-caught-fail(server_ats_1) in
    {466}let h_23: bitstring = (if v_65 then catch-fail(hash(h_alg_5,cur_log_4)) else caught-fail) in
    {467}let v_66: bool = not-caught-fail(h_23) in
    {465}let l_24: label = (if v_65 then tls13_exporter_master_secret else caught-fail) in
    {468}let x_24: bitstring = (if v_66 then (l_24,h_23) else caught-fail) in
    {469}let ems_2: bitstring = (if v_65 then catch-fail((if v_66 then hmac(h_alg_5,master_secret_5,x_24) else fail-any)) else caught-fail) in
    {470}let v_67: bool = not-caught-fail(ems_2) in
    {472}let h_24: bitstring = (if v_67 then zero else caught-fail) in
    {471}let l_25: label = (if v_67 then tls13_key else caught-fail) in
    {473}let x_25: bitstring = (if v_67 then (l_25,h_24) else caught-fail) in
    {474}let client_wkad_1: bitstring = (if v_67 then catch-fail(hmac(h_alg_5,client_ats_1,x_25)) else caught-fail) in
    {475}let v_68: bool = not-caught-fail(client_wkad_1) in
    {477}let h_25: bitstring = (if v_68 then zero else caught-fail) in
    {476}let l_26: label = (if v_68 then tls13_key else caught-fail) in
    {478}let x_26: bitstring = (if v_68 then (l_26,h_25) else caught-fail) in
    {479}let server_wkad_1: bitstring = (if v_68 then catch-fail(hmac(h_alg_5,server_ats_1,x_26)) else caught-fail) in
    {480}let v_69: bool = not-caught-fail(server_wkad_1) in
    {482}let h_26: bitstring = (if v_69 then zero else caught-fail) in
    {481}let l_27: label = (if v_69 then tls13_finished else caught-fail) in
    {483}let x_27: bitstring = (if v_69 then (l_27,h_26) else caught-fail) in
    {484}let client_fkad_1: bitstring = (if v_69 then catch-fail(hmac(h_alg_5,client_ats_1,x_27)) else caught-fail) in
    {485}let v_70: bool = not-caught-fail(client_fkad_1) in
    {486}let (cak_1: aead_key,sak_1: aead_key,cfkad_1: mac_key,ems_3: bitstring) = (if v_63 then (if v_65 then (if v_67 then (if v_68 then (if v_69 then (if v_70 then (client_wkad_1,server_wkad_1,client_fkad_1,ems_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {487}event Client_cak(id_client,cak_1);
    {488}event Client_sak(id_client,sak_1);
    {489}event Client_cfkad(id_client,cfkad_1);
    {490}let client_hash_msg: bitstring = hmac(h_alg_5,cfin_4,cur_log_4) in
    {491}let client_finished_msg: msg = FIN(client_hash_msg) in
    {492}let cur_log'_1: bitstring = (cur_log_4,client_finished_msg) in
    {494}let h_27: bitstring = catch-fail(hash(h_alg_5,cur_log'_1)) in
    {495}let v_71: bool = not-caught-fail(h_27) in
    {493}let l_28: label = tls13_resumption_master_secret in
    {496}let x_28: bitstring = (if v_71 then (l_28,h_27) else caught-fail) in
    {497}let rms_1: bitstring = (if v_71 then hmac(h_alg_5,master_secret_5,x_28) else fail-any) in
    {498}event Client_rms(id_client,rms_1);
    {500}event ClientFinished(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,cak_1,sak_1,ems_3,rms_1);
    {499}let enc_client_finished_msg: bitstring = aead_enc(a_alg_4,chk_4,seq_client_1,zero,client_finished_msg) in
    {501}out(io, enc_client_finished_msg);
    (
        0
    ) | (
        0
    ) | (
        {502}!
        {503}in(io, (seq_srv_2: nat,seq_client_2: nat));
        {504}if (is_nat(seq_srv_2) && is_nat(seq_client_2)) then
        {505}in(io, enc_msg: bitstring);
        {506}let CRTR(rand_crt: bitstring) = aead_dec(a_alg_4,sak_1,seq_srv_2,zero,enc_msg) in
        {507}new st_6[]: stamp;
        {508}event ClientSequenceServerDataWriteKey(id_client,st_6,seq_srv_2);
        {509}event ClientReceives(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_srv_2,zero,CRTR(rand_crt));
        {539}get long_term_keys(c_dom': domain,sk_2: privkey,c_pkey'_1: pubkey,crt_6: certificate,idP_2: idProc) in
        {512}new @1_st[]: stamp;
        {511}let @1_x: bitstring = (c_dom',sk_2,c_pkey'_1,crt_6,idP_2) in
        {513}event PreciseInput(@1_st,@1_x);
        {514}let () = () in
        {515}event Selected_ltk(c_dom_1,c_dom',idP_2);
        {516}let (sk_3: privkey,c_pkey'_2: pubkey,crt_7: certificate) = (sk_2,c_pkey'_1,crt_6) in
        {519}new st1_6[]: stamp;
        {520}event ClientSequenceClientDataWriteKey(id_client,st1_6,seq_client_2);
        {517}let certificate_msg_1: msg = CRT(rand_crt,crt_7) in
        {521}event ClientSends(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_client_2,zero,certificate_msg_1);
        {518}let encrypted_certificate_msg_1: bitstring = aead_enc(a_alg_4,cak_1,seq_client_2,zero,certificate_msg_1) in
        {522}out(io, encrypted_certificate_msg_1);
        {510}let cur_log_CRTR_2: bitstring = (cur_log'_1,CRTR(rand_crt)) in
        {523}let cur_log_CRT_3: bitstring = (cur_log_CRTR_2,certificate_msg_1) in
        {524}let signed_log_3: bitstring = sign(sk_3,hash(h_alg_5,cur_log_CRT_3)) in
        {527}new st2_1[]: stamp;
        {528}event ClientSequenceClientDataWriteKey(id_client,st2_1,seq_client_2 + 1);
        {525}let certificate_verify_msg_1: msg = CV(signed_log_3) in
        {529}event ClientSends(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_client_2 + 1,zero,certificate_verify_msg_1);
        {526}let enc_verify_msg: bitstring = aead_enc(a_alg_4,cak_1,seq_client_2 + 1,zero,certificate_verify_msg_1) in
        {530}out(io, enc_verify_msg);
        {531}let cur_log_CV_3: bitstring = (cur_log_CRT_3,certificate_verify_msg_1) in
        {532}let hash_msg_3: bitstring = hmac(h_alg_5,cfkad_1,cur_log_CV_3) in
        {534}new st3_1[]: stamp;
        {535}event ClientSequenceClientDataWriteKey(id_client,st3_1,seq_client_2 + 2);
        {536}event ClientSends(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_client_2 + 2,zero,FIN(hash_msg_3));
        {537}event ClientFinishedPH(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,rand_crt,c_pkey'_2);
        {533}let enc_fin_2: bitstring = aead_enc(a_alg_4,cak_1,seq_client_2 + 2,zero,FIN(hash_msg_3)) in
        {538}out(io, enc_fin_2)
    )
) | (
    {540}!
    {541}in(ch_client_FIN, (id_client_1: idProc,ArgsClientFIN(cr_6: bytes32,sr_5: bytes32,h_alg_6: hash_alg,a_alg_5: aead_alg,c_dom_2: domain,s_dom_8: domain,s_pkey_5: pubkey,cert_req: bool,psk_8: preSharedKey,safe_psk_1: bool,comp_psk_1: bool,master_secret_6: bitstring,chk_5: aead_key,seq_client_3: nat,shk_4: aead_key,seq_srv_3: nat,cfin_5: mac_key,sfin_4: mac_key,cur_log_5: bitstring)));
    {542}new st_7[]: stamp;
    {543}event PreciseIdProcess(ch_client_FIN,id_client_1,st_7);
    {544}event Client_server_domain(id_client_1,s_dom_8);
    {545}event Client_Rand_client(id_client_1,cr_6);
    {546}event Client_Rand_server(id_client_1,sr_5);
    {547}event Client_PSKChoosen(id_client_1,psk_8,safe_psk_1);
    {548}event Client_comp_psk(id_client_1,comp_psk_1);
    {549}event Client_chk(id_client_1,chk_5);
    {550}event Client_shk(id_client_1,shk_4);
    {551}event Client_cfin(id_client_1,cfin_5);
    {552}event Client_sfin(id_client_1,sfin_4);
    {553}event Client_Cert_server(id_client_1,s_pkey_5);
    {554}new st1_7[]: stamp;
    {555}event PreciseMess(ch_client_FIN,id_client_1,st1_7,(master_secret_6,s_pkey_5,psk_8,safe_psk_1,comp_psk_1));
    {556}in(io, enc_finished_msg: bitstring);
    {557}let finished_msg_1: msg = aead_dec(a_alg_5,shk_4,seq_srv_3,zero,enc_finished_msg) in
    (
        {558}let FIN(hash_msg_4: bitstring) = finished_msg_1 in
        (
            {559}if (hash_msg_4 = hmac(h_alg_6,sfin_4,cur_log_5)) then
            {560}let cur_log2: bitstring = (cur_log_5,finished_msg_1) in
            {561}if cert_req then
            (
                {580}get long_term_keys(c_dom'_1: domain,sk_4: privkey,c_pkey_3: pubkey,crt_8: certificate,idP_3: idProc) in
                {564}new @2_st[]: stamp;
                {563}let @2_x: bitstring = (c_dom'_1,sk_4,c_pkey_3,crt_8,idP_3) in
                {565}event PreciseInput(@2_st,@2_x);
                {566}let () = () in
                {567}event Selected_ltk(c_dom_2,c_dom'_1,idP_3);
                {568}let (sk_5: privkey,c_pkey_4: pubkey,crt_9: certificate) = (sk_4,c_pkey_3,crt_8) in
                {569}event Client_Cert_client(id_client_1,c_pkey_4);
                {570}let certificate_msg_2: msg = CRT(zero,crt_9) in
                {571}let encrypted_certificate_msg_2: bitstring = aead_enc(a_alg_5,chk_5,seq_client_3,zero,certificate_msg_2) in
                {572}out(io, encrypted_certificate_msg_2);
                {573}let cur_log2_1: bitstring = (cur_log2,certificate_msg_2) in
                {574}let signed_log_4: bitstring = sign(sk_5,hash(h_alg_6,cur_log2_1)) in
                {575}let certificate_verify_msg_2: msg = CV(signed_log_4) in
                {576}let encrypted_certificate_verify_msg_1: bitstring = aead_enc(a_alg_5,chk_5,seq_client_3 + 1,zero,certificate_verify_msg_2) in
                {577}out(io, encrypted_certificate_verify_msg_1);
                {578}let cur_log3: bitstring = (cur_log2_1,certificate_verify_msg_2) in
                {562}let seq_srv_4: nat = seq_srv_3 + 1 in
                {579}out(ch_client_CFIN, (id_client_1,ArgsClientCFIN(cr_6,sr_5,h_alg_6,a_alg_5,c_dom_2,s_dom_8,s_pkey_5,c_pkey_4,NoPsk,false,comp_psk_1,master_secret_6,chk_5,seq_client_3 + 2,shk_4,seq_srv_4,cfin_5,sfin_4,cur_log3)))
            )
            else
                {581}event Client_Cert_client(id_client_1,NoPubKey);
                {582}out(ch_client_CFIN, (id_client_1,ArgsClientCFIN(cr_6,sr_5,h_alg_6,a_alg_5,c_dom_2,s_dom_8,s_pkey_5,NoPubKey,psk_8,safe_psk_1,comp_psk_1,master_secret_6,chk_5,seq_client_3,shk_4,seq_srv_3 + 1,cfin_5,sfin_4,cur_log2)))
        )
        else
            {583}out(io, unexpected_message)
    )
    else
        {584}out(io, bad_record_mac)
) | (
    {585}!
    {586}in(ch_client_CRT, (id_client_2: idProc,ArgsClientCRT(cr_7: bytes32,sr_6: bytes32,h_alg_7: hash_alg,a_alg_6: aead_alg,c_dom_3: domain,s_dom_9: domain,cert_req_1: bool,certificate_msg_3: msg,comp_psk_2: bool,master_secret_7: bitstring,chk_6: aead_key,seq_client_4: nat,shk_5: aead_key,seq_srv_5: nat,cfin_6: mac_key,sfin_5: mac_key,cur_log_6: bitstring)));
    {587}new st_8[]: stamp;
    {588}event PreciseIdProcess(ch_client_CRT,id_client_2,st_8);
    {589}event Client_server_domain(id_client_2,s_dom_9);
    {590}event Client_Rand_client(id_client_2,cr_7);
    {591}event Client_Rand_server(id_client_2,sr_6);
    {592}event Client_comp_psk(id_client_2,comp_psk_2);
    {593}event Client_chk(id_client_2,chk_6);
    {594}event Client_shk(id_client_2,shk_5);
    {595}event Client_cfin(id_client_2,cfin_6);
    {596}event Client_sfin(id_client_2,sfin_5);
    {597}let CRT(=zero,crt_10: certificate) = certificate_msg_3 in
    {599}in(io, enc_crt_verif_msg: bitstring);
    {600}let certificate_verify_msg_3: msg = aead_dec(a_alg_6,shk_5,seq_srv_5,zero,enc_crt_verif_msg) in
    {601}let CV(signed_log_5: bitstring) = certificate_verify_msg_3 in
    {598}let cur_log2_2: bitstring = (cur_log_6,certificate_msg_3) in
    {602}if (verify(get_pkey(crt_10),hash(h_alg_7,cur_log2_2),signed_log_5) && ((get_domain(crt_10) = s_dom_9) && verify_cert(crt_10))) then
    {603}let s_pkey_6: pubkey = get_pkey(crt_10) in
    {605}event Client_Cert_server(id_client_2,s_pkey_6);
    {604}let cur_log3_1: bitstring = (cur_log2_2,certificate_verify_msg_3) in
    {606}out(ch_client_FIN, (id_client_2,ArgsClientFIN(cr_7,sr_6,h_alg_7,a_alg_6,c_dom_3,s_dom_9,s_pkey_6,cert_req_1,NoPsk,false,comp_psk_2,master_secret_7,chk_6,seq_client_4,shk_5,seq_srv_5 + 1,cfin_6,sfin_5,cur_log3_1)))
) | (
    {607}!
    {608}in(ch_client_after_EE, (id_client_3: idProc,ArgsClientAfterEE(cr_8: bytes32,sr_7: bytes32,h_alg_8: hash_alg,a_alg_7: aead_alg,c_dom_4: domain,s_dom_10: domain,psk_9: preSharedKey,safe_psk_2: bool,comp_psk_3: bool,master_secret_8: bitstring,chk_7: aead_key,seq_client_5: nat,shk_6: aead_key,seq_srv_6: nat,cfin_7: mac_key,sfin_6: mac_key,cur_log_7: bitstring)));
    {609}new st_9[]: stamp;
    {610}event PreciseIdProcess(ch_client_after_EE,id_client_3,st_9);
    {611}event Client_server_domain(id_client_3,s_dom_10);
    {612}event Client_Rand_client(id_client_3,cr_8);
    {613}event Client_Rand_server(id_client_3,sr_7);
    {614}event Client_PSKChoosen(id_client_3,psk_9,safe_psk_2);
    {615}event Client_comp_psk(id_client_3,comp_psk_3);
    {616}event Client_chk(id_client_3,chk_7);
    {617}event Client_shk(id_client_3,shk_6);
    {618}event Client_cfin(id_client_3,cfin_7);
    {619}event Client_sfin(id_client_3,sfin_6);
    {620}new st1_8[]: stamp;
    {621}event PreciseMess(ch_client_after_EE,id_client_3,st1_8,master_secret_8);
    {622}if (psk_9 = NoPsk) then
    (
        {623}in(io, enc_msg_1: bitstring);
        {624}let msg': msg = aead_dec(a_alg_7,shk_6,seq_srv_6,zero,enc_msg_1) in
        {625}let CRTR(=zero) = msg' in
        (
            {627}in(io, enc_crt_msg: bitstring);
            {628}let certificate_msg_4: msg = aead_dec(a_alg_7,shk_6,seq_srv_6 + 1,zero,enc_crt_msg) in
            {626}let cur_log2_3: bitstring = (cur_log_7,msg') in
            {629}out(ch_client_CRT, (id_client_3,ArgsClientCRT(cr_8,sr_7,h_alg_8,a_alg_7,c_dom_4,s_dom_10,true,certificate_msg_4,comp_psk_3,master_secret_8,chk_7,seq_client_5,shk_6,seq_srv_6 + 2,cfin_7,sfin_6,cur_log2_3)))
        )
        else
            {630}let CRT(=zero,crt_11: certificate) = msg' in
                {631}out(ch_client_CRT, (id_client_3,ArgsClientCRT(cr_8,sr_7,h_alg_8,a_alg_7,c_dom_4,s_dom_10,false,msg',comp_psk_3,master_secret_8,chk_7,seq_client_5,shk_6,seq_srv_6 + 1,cfin_7,sfin_6,cur_log_7)))
            else
                {632}out(io, unexpected_message)
    )
    else
        {633}event Client_Cert_server(id_client_3,NoPubKey);
        {634}out(ch_client_FIN, (id_client_3,ArgsClientFIN(cr_8,sr_7,h_alg_8,a_alg_7,c_dom_4,s_dom_10,NoPubKey,false,psk_9,safe_psk_2,comp_psk_3,master_secret_8,chk_7,seq_client_5,shk_6,seq_srv_6,cfin_7,sfin_6,cur_log_7)))
) | (
    {635}!
    {641}get long_term_keys(dom1: domain,sk1: privkey,pk1: pubkey,cert1: certificate,idP1: idProc) in
    {636}event Same(idP1);
    {640}get long_term_keys(dom2: domain,sk2: privkey,pk2: pubkey,cert2: certificate,idP2: idProc) in
    {637}event Same(idP2);
    {638}insert long_term_keys(choice[dom1,dom2],choice[sk1,sk2],choice[pk1,pk2],choice[cert1,cert2],choice[idP1,idP2]);
    {639}insert long_term_keys(choice[dom2,dom1],choice[sk2,sk1],choice[pk2,pk1],choice[cert2,cert1],choice[idP2,idP1])
) | (
    {642}!
    {648}get pre_shared_keys(c_dom1: domain,s_dom_11: domain,h_alg_9: hash_alg,id1: identityPsk,psk1: preSharedKey,idP1_1: idProc,safe1: bool) in
    {643}event Same(idP1_1);
    {647}get pre_shared_keys(c_dom2: domain,=s_dom_11,=h_alg_9,id2: identityPsk,psk2: preSharedKey,idP2_1: idProc,safe2: bool) in
    {644}event Same(idP2_1);
    {645}insert pre_shared_keys(choice[c_dom1,c_dom2],s_dom_11,h_alg_9,choice[id1,id2],choice[psk1,psk2],choice[idP1_1,idP2_1],choice[safe1,safe2]);
    {646}insert pre_shared_keys(choice[c_dom2,c_dom1],s_dom_11,h_alg_9,choice[id2,id1],choice[psk2,psk1],choice[idP2_1,idP1_1],choice[safe2,safe1])
) | (
    {649}!
    {650}new id_tls_client: idProc;
    {651}in(io, s_dom_12: domain);
    {652}event Same(s_dom_12);
    {653}in(io, c_dom_5: domain);
    {654}event Same(c_dom_5);
    {660}in(io, @7_send_kex: bool);
    {661}event Same(@7_send_kex);
    {662}let () = () in
    {667}new rand24_1[]: bytes24;
    {668}new rand8_1[]: bytes8;
    {670}new s_8[]: seed;
    {658}let @7_tls_g: group = id_g(StrongDH,1) in
    {671}let gx_2: element = dh_pub(@7_tls_g,dh_k(s_8)) in
    {672}let v_72: bitstring = (dh_k(s_8),gx_2) in
    {673}let v_73: bool = success?(1-proj-2-tuple(v_72)) in
    {674}let gx_3: element = (if v_73 then 2-proj-2-tuple(v_72) else caught-fail) in
    {675}let x_29: bitstring = (if v_73 then 1-proj-2-tuple(v_72) else caught-fail) in
    {664}let send_kex: bool = (not(false) || @7_send_kex) in
    {676}let kex: kex_alg = (if v_73 then (if send_kex then DHE_kex(@7_tls_g,gx_3) else DHE_group(@7_tls_g)) else caught-fail) in
    {677}let (kex_ext_1: keyShareExt,kex_data: bitstring) = (if v_73 then (client_kex_ext(kex),(x_29,@7_tls_g)) else fail-any) in
    {669}let cr_9: bytes32 = B32(rand24_1,rand8_1) in
    {665}let cur_log_8: bitstring = zero in
    {663}let @7_comp_psk: bool = false in
    {659}let @7_use_psk: bool = false in
    {657}let @7_tls_a: aead_alg = id_aead(StrongAE,1) in
    {656}let @7_tls_h: hash_alg = id_hash(StrongHash,1) in
    {655}let @7_id_client: idProc = id_tls_client in
    {680}if @7_use_psk then
    (
        {679}let extra_2: extraExt = empty_extra_ext in
        {678}let ech_ext_2: echExt = empty_ech_ext in
        {666}let old_psk_data: bitstring = zero in
        {681}let (psk_10: preSharedKey,id_4: identityPsk,old_es: bitstring,is_safe: bool) = old_psk_data in
        (
            {685}let k_6: bitstring = catch-fail(psk2b(psk_10)) in
            {686}let v_74: bool = not-caught-fail(k_6) in
            {684}let s_9: bitstring = zero in
            {687}let early_secret_5: bitstring = catch-fail((if v_74 then hmac(@7_tls_h,s_9,k_6) else fail-any)) in
            {688}let v_75: bool = not-caught-fail(early_secret_5) in
            {690}let m_5: bitstring = (if v_75 then zero else caught-fail) in
            {691}let h_28: bitstring = (if v_75 then catch-fail(hash(@7_tls_h,m_5)) else caught-fail) in
            {692}let v_76: bool = not-caught-fail(h_28) in
            {689}let l_29: label = (if v_75 then tls13_ext_res_binder else caught-fail) in
            {693}let x_30: bitstring = (if v_76 then (l_29,h_28) else caught-fail) in
            {694}let binder_key_3: bitstring = (if v_75 then catch-fail((if v_76 then hmac(@7_tls_h,early_secret_5,x_30) else fail-any)) else caught-fail) in
            {695}let v_77: bool = not-caught-fail(binder_key_3) in
            {696}let v_78: bitstring = catch-fail((if v_75 then (if v_77 then (early_secret_5,binder_key_3) else fail-any) else fail-any)) in
            {697}let v_79: bool = (not-caught-fail(v_78) && success?(1-proj-2-tuple(v_78))) in
            {698}let kb_3: mac_key = (if v_79 then 2-proj-2-tuple(v_78) else caught-fail) in
            {699}let es_2: bitstring = (if v_79 then 1-proj-2-tuple(v_78) else caught-fail) in
            {682}let offer_2: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_12),ech_ext_2,extra_2,trunc_client_psk_ext(id_4)) in
            {683}let cur_log'_2: bitstring = (cur_log_8,CH(cr_9,offer_2)) in
            {700}let binders_1: bitstring = (if v_79 then catch-fail(hmac(@7_tls_h,kb_3,cur_log'_2)) else caught-fail) in
            {701}let v_80: bool = not-caught-fail(binders_1) in
            {702}let v_81: bitstring = catch-fail((if v_79 then (if v_80 then (client_psk_ext(id_4,binders_1),(psk_10,id_4,es_2,is_safe)) else fail-any) else fail-any)) in
            {703}let v_82: bool = (not-caught-fail(v_81) && success?(1-proj-2-tuple(v_81))) in
            {704}let psk_data: bitstring = (if v_82 then 2-proj-2-tuple(v_81) else caught-fail) in
            {705}let psk_ext_2: preSharedKeyExt = (if v_82 then 1-proj-2-tuple(v_81) else caught-fail) in
            {706}let offer_3: params = (if v_82 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_2) else caught-fail) in
            {707}let (client_hello_1: msg,cr_10: bytes32,kex_data_1: bitstring,psk_data_1: bitstring) = (if v_82 then (CH(cr_9,offer_3),cr_9,kex_data,psk_data) else fail-any) in
            {708}event ClientOffersAead(cr_10,@7_tls_a);
            {709}event ClientOffersHash(cr_10,@7_tls_h);
            {710}event ClientOffersGroup(cr_10,@7_tls_g);
            {711}out(io, client_hello_1);
            {713}let (psk_11: preSharedKey,id_5: identityPsk,es_3: bitstring,safe_psk_3: bool) = psk_data_1 in
            (
                {714}if (false && (psk_11 ≠ NoPsk)) then
                {715}let client_hello_2: bitstring = (zero,client_hello_1) in
                {717}let h_29: bitstring = catch-fail(hash(@7_tls_h,client_hello_2)) in
                {718}let v_83: bool = not-caught-fail(h_29) in
                {716}let l_30: label = tls13_client_early_traffic_secret in
                {719}let x_31: bitstring = (if v_83 then (l_30,h_29) else caught-fail) in
                {720}let atsc0_1: bitstring = catch-fail((if v_83 then hmac(@7_tls_h,es_3,x_31) else fail-any)) in
                {721}let v_84: bool = not-caught-fail(atsc0_1) in
                {723}let h_30: bitstring = (if v_84 then zero else caught-fail) in
                {722}let l_31: label = (if v_84 then tls13_key else caught-fail) in
                {724}let x_32: bitstring = (if v_84 then (l_31,h_30) else caught-fail) in
                {725}let kc0_1: bitstring = (if v_84 then catch-fail(hmac(@7_tls_h,atsc0_1,x_32)) else caught-fail) in
                {726}let v_85: bool = not-caught-fail(kc0_1) in
                {728}let h_31: bitstring = (if v_85 then catch-fail(hash(@7_tls_h,client_hello_2)) else caught-fail) in
                {729}let v_86: bool = not-caught-fail(h_31) in
                {727}let l_32: label = (if v_85 then tls13_early_exporter_master_secret else caught-fail) in
                {730}let x_33: bitstring = (if v_86 then (l_32,h_31) else caught-fail) in
                {731}let ems0_2: bitstring = (if v_85 then catch-fail((if v_86 then hmac(@7_tls_h,es_3,x_33) else fail-any)) else caught-fail) in
                {732}let v_87: bool = not-caught-fail(ems0_2) in
                {733}let (wkc0_1: aead_key,ems0_3: bitstring) = (if v_84 then (if v_85 then (if v_87 then (kc0_1,ems0_2) else fail-any) else fail-any) else fail-any) in
                {734}!
                {735}in(io, (i_1: nat,ad_1: bitstring));
                {736}if is_nat(i_1) then
                {737}new msg_ed[]: bitstring;
                {739}new st_10: stamp;
                {740}event ClientSequenceClient0RTTDataWriteKey(@7_id_client,st_10,i_1);
                {741}event ClientSends0(@7_id_client,cr_10,psk_11,i_1,ad_1,msg_ed);
                {738}let enc_ed: bitstring = aead_enc(@7_tls_a,wkc0_1,i_1,ad_1,msg_ed) in
                {742}out(io, enc_ed)
            ) | (
                {743}in(io, server_hello_1: msg);
                {744}let SH(sr_8: bytes32,mode: params) = server_hello_1 in
                (
                    {745}event ClientEchAcceptance(@7_id_client,false);
                    {712}let cur_log2_4: bitstring = (cur_log_8,client_hello_1) in
                    {746}if (false && (sr_8 = B32(HRR24,HRR8))) then
                    (
                        {747}if ((mode = nego(TLS13,@7_tls_h,@7_tls_a,hrr_kex_ext(@7_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex ≠ true)) then
                        (
                            {750}new rand24_2[]: bytes24;
                            {751}new rand8_2[]: bytes8;
                            {753}new s_10[]: seed;
                            {754}let gx_4: element = dh_pub(@7_tls_g,dh_k(s_10)) in
                            {755}let v_88: bitstring = (dh_k(s_10),gx_4) in
                            {756}let v_89: bool = success?(1-proj-2-tuple(v_88)) in
                            {757}let gx_5: element = (if v_89 then 2-proj-2-tuple(v_88) else caught-fail) in
                            {758}let x_34: bitstring = (if v_89 then 1-proj-2-tuple(v_88) else caught-fail) in
                            {749}let send_kex_1: bool = true in
                            {759}let kex_1: kex_alg = (if v_89 then (if send_kex_1 then DHE_kex(@7_tls_g,gx_5) else DHE_group(@7_tls_g)) else caught-fail) in
                            {760}let (kex_ext_2: keyShareExt,kex_data_2: bitstring) = (if v_89 then (client_kex_ext(kex_1),(x_34,@7_tls_g)) else fail-any) in
                            {752}let cr_11: bytes32 = B32(rand24_2,rand8_2) in
                            {748}let cur_log3_2: bitstring = (cur_log2_4,server_hello_1) in
                            {763}if @7_use_psk then
                            (
                                {762}let extra_3: extraExt = empty_extra_ext in
                                {761}let ech_ext_3: echExt = empty_ech_ext in
                                {764}let (psk_12: preSharedKey,id_6: identityPsk,old_es_1: bitstring,is_safe_1: bool) = psk_data_1 in
                                (
                                    {768}let k_7: bitstring = catch-fail(psk2b(psk_12)) in
                                    {769}let v_90: bool = not-caught-fail(k_7) in
                                    {767}let s_11: bitstring = zero in
                                    {770}let early_secret_6: bitstring = catch-fail((if v_90 then hmac(@7_tls_h,s_11,k_7) else fail-any)) in
                                    {771}let v_91: bool = not-caught-fail(early_secret_6) in
                                    {773}let m_6: bitstring = (if v_91 then zero else caught-fail) in
                                    {774}let h_32: bitstring = (if v_91 then catch-fail(hash(@7_tls_h,m_6)) else caught-fail) in
                                    {775}let v_92: bool = not-caught-fail(h_32) in
                                    {772}let l_33: label = (if v_91 then tls13_ext_res_binder else caught-fail) in
                                    {776}let x_35: bitstring = (if v_92 then (l_33,h_32) else caught-fail) in
                                    {777}let binder_key_4: bitstring = (if v_91 then catch-fail((if v_92 then hmac(@7_tls_h,early_secret_6,x_35) else fail-any)) else caught-fail) in
                                    {778}let v_93: bool = not-caught-fail(binder_key_4) in
                                    {779}let v_94: bitstring = catch-fail((if v_91 then (if v_93 then (early_secret_6,binder_key_4) else fail-any) else fail-any)) in
                                    {780}let v_95: bool = (not-caught-fail(v_94) && success?(1-proj-2-tuple(v_94))) in
                                    {781}let kb_4: mac_key = (if v_95 then 2-proj-2-tuple(v_94) else caught-fail) in
                                    {782}let es_4: bitstring = (if v_95 then 1-proj-2-tuple(v_94) else caught-fail) in
                                    {765}let offer_4: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_12),ech_ext_3,extra_3,trunc_client_psk_ext(id_6)) in
                                    {766}let cur_log'_3: bitstring = (cur_log3_2,CH(cr_11,offer_4)) in
                                    {783}let binders_2: bitstring = (if v_95 then catch-fail(hmac(@7_tls_h,kb_4,cur_log'_3)) else caught-fail) in
                                    {784}let v_96: bool = not-caught-fail(binders_2) in
                                    {785}let v_97: bitstring = catch-fail((if v_95 then (if v_96 then (client_psk_ext(id_6,binders_2),(psk_12,id_6,es_4,is_safe_1)) else fail-any) else fail-any)) in
                                    {786}let v_98: bool = (not-caught-fail(v_97) && success?(1-proj-2-tuple(v_97))) in
                                    {787}let psk_data_2: bitstring = (if v_98 then 2-proj-2-tuple(v_97) else caught-fail) in
                                    {788}let psk_ext_3: preSharedKeyExt = (if v_98 then 1-proj-2-tuple(v_97) else caught-fail) in
                                    {789}let offer_5: params = (if v_98 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_3) else caught-fail) in
                                    {790}let (client_hello': msg,cr': bytes32,kex_data': bitstring,psk_data': bitstring) = (if v_98 then (CH(cr_11,offer_5),cr_11,kex_data_2,psk_data_2) else fail-any) in
                                    {791}event ClientOffersAead(cr',@7_tls_a);
                                    {792}event ClientOffersHash(cr',@7_tls_h);
                                    {793}event ClientOffersGroup(cr',@7_tls_g);
                                    {794}out(io, client_hello');
                                    {796}in(io, server_hello': msg);
                                    {797}let SH(sr': bytes32,mode': params) = server_hello' in
                                    (
                                        {798}if (sr' = B32(HRR24,HRR8)) then
                                            {799}out(io, unexpected_message)
                                        else
                                            {800}let (x_36: bitstring,g: group) = kex_data' in
                                            {801}let (psk_offer: preSharedKey,id_offer: identityPsk,es_offer: bitstring,is_safe_offer: bool) = psk_data' in
                                            {802}event Client_PSKOffer(@7_id_client,psk_offer,id_offer,is_safe_offer);
                                            {803}event Client_Rand_client(@7_id_client,cr');
                                            {804}event Client_DH_client(@7_id_client,dh_pub(g,x_36));
                                            {805}event Client_server_domain(@7_id_client,s_dom_12);
                                            {806}let SH(sr_9: bytes32,mode_1: params) = server_hello' in
                                            {807}event Client_Rand_server(@7_id_client,sr_9);
                                            {808}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g,gy_1: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_4: preSharedKeyExt) = mode_1 in
                                            (
                                                {810}event Client_DH_server(@7_id_client,gy_1);
                                                {811}let v_99: bool = (psk_ext_4 = empty_psk_ext) in
                                                {812}let psk_13: preSharedKey = (if v_99 then NoPsk else caught-fail) in
                                                {814}let k_8: bitstring = (if v_99 then catch-fail(psk2b(psk_13)) else caught-fail) in
                                                {815}let v_100: bool = not-caught-fail(k_8) in
                                                {813}let s_12: bitstring = (if v_99 then zero else caught-fail) in
                                                {816}let early_secret_7: bitstring = (if v_99 then catch-fail((if v_100 then hmac(@7_tls_h,s_12,k_8) else fail-any)) else caught-fail) in
                                                {817}let v_101: bool = not-caught-fail(early_secret_7) in
                                                {819}let m_7: bitstring = (if v_101 then zero else caught-fail) in
                                                {820}let h_33: bitstring = (if v_101 then catch-fail(hash(@7_tls_h,m_7)) else caught-fail) in
                                                {821}let v_102: bool = not-caught-fail(h_33) in
                                                {818}let l_34: label = (if v_101 then tls13_ext_res_binder else caught-fail) in
                                                {822}let x_37: bitstring = (if v_102 then (l_34,h_33) else caught-fail) in
                                                {823}let binder_key_5: bitstring = (if v_101 then catch-fail((if v_102 then hmac(@7_tls_h,early_secret_7,x_37) else fail-any)) else caught-fail) in
                                                {824}let v_103: bool = not-caught-fail(binder_key_5) in
                                                {825}let v_104: bitstring = (if v_99 then catch-fail((if v_101 then (if v_103 then (early_secret_7,binder_key_5) else fail-any) else fail-any)) else caught-fail) in
                                                {826}let v_105: bool = (not-caught-fail(v_104) && success?(1-proj-2-tuple(v_104))) in
                                                {827}let kb_5: mac_key = (if v_105 then 2-proj-2-tuple(v_104) else caught-fail) in
                                                {828}let es_5: bitstring = (if v_105 then 1-proj-2-tuple(v_104) else caught-fail) in
                                                {829}let v_106: bitstring = (if not(v_99) then catch-fail(psk_data') else caught-fail) in
                                                {830}let v_107: bool = (not-caught-fail(v_106) && success?(1-proj-4-tuple(v_106))) in
                                                {831}let is_safe_2: bool = (if v_107 then 4-proj-4-tuple(v_106) else caught-fail) in
                                                {832}let es_6: bitstring = (if v_107 then 3-proj-4-tuple(v_106) else caught-fail) in
                                                {833}let id_7: identityPsk = (if v_107 then 2-proj-4-tuple(v_106) else caught-fail) in
                                                {834}let psk_14: preSharedKey = (if v_107 then 1-proj-4-tuple(v_106) else caught-fail) in
                                                {835}let (psk_15: preSharedKey,early_secret_8: bitstring,valid: bool,safe_psk_4: bool) = (if v_99 then (if v_105 then (NoPsk,es_5,true,false) else fail-any) else (if v_107 then (psk_14,es_6,((psk_14 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_4)),is_safe_2) else fail-any)) in
                                                {836}event Client_PSKChoosen(@7_id_client,psk_15,safe_psk_4);
                                                {837}if valid then
                                                (
                                                    {840}new s_13[]: seed;
                                                    {838}let gxy_1: element = catch-fail(dh_decap_fun(g,gy_1,x_36)) in
                                                    {839}let v_108: bool = not-caught-fail(gxy_1) in
                                                    {841}let gxy_2: element = (if v_108 then gxy_1 else dh_f(s_13)) in
                                                    {842}event Client_DH_gxy(@7_id_client,gxy_2);
                                                    {844}let m_8: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {845}let v_109: bool = not-caught-fail(m_8) in
                                                    {846}let h_34: bitstring = (if v_109 then catch-fail(hash(@7_tls_h,m_8)) else caught-fail) in
                                                    {847}let v_110: bool = not-caught-fail(h_34) in
                                                    {843}let l_35: label = tls13_derived in
                                                    {848}let x_38: bitstring = (if v_110 then (l_35,h_34) else caught-fail) in
                                                    {849}let extra_4: bitstring = catch-fail((if v_109 then (if v_110 then hmac(@7_tls_h,early_secret_8,x_38) else fail-any) else fail-any)) in
                                                    {850}let v_111: bool = not-caught-fail(extra_4) in
                                                    {851}let handshake_secret_1: bitstring = (if v_111 then hmac(@7_tls_h,extra_4,gxy_2) else fail-any) in
                                                    {853}let m_9: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {854}let v_112: bool = not-caught-fail(m_9) in
                                                    {855}let h_35: bitstring = (if v_112 then catch-fail(hash(@7_tls_h,m_9)) else caught-fail) in
                                                    {856}let v_113: bool = not-caught-fail(h_35) in
                                                    {852}let l_36: label = tls13_derived in
                                                    {857}let x_39: bitstring = (if v_113 then (l_36,h_35) else caught-fail) in
                                                    {858}let extra_5: bitstring = catch-fail((if v_112 then (if v_113 then hmac(@7_tls_h,handshake_secret_1,x_39) else fail-any) else fail-any)) in
                                                    {859}let v_114: bool = not-caught-fail(extra_5) in
                                                    {860}let k_9: bitstring = (if v_114 then zero else caught-fail) in
                                                    {861}let master_secret_9: bitstring = (if v_114 then catch-fail(hmac(@7_tls_h,handshake_secret_1,k_9)) else caught-fail) in
                                                    {862}let v_115: bool = not-caught-fail(master_secret_9) in
                                                    {795}let cur_log4: bitstring = (cur_log3_2,client_hello') in
                                                    {809}let cur_log2_5: bitstring = (cur_log4,server_hello') in
                                                    {864}let h_36: bitstring = (if v_115 then catch-fail(hash(@7_tls_h,cur_log2_5)) else caught-fail) in
                                                    {865}let v_116: bool = not-caught-fail(h_36) in
                                                    {863}let l_37: label = (if v_115 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {866}let x_40: bitstring = (if v_116 then (l_37,h_36) else caught-fail) in
                                                    {867}let client_hts_1: bitstring = (if v_115 then catch-fail((if v_116 then hmac(@7_tls_h,handshake_secret_1,x_40) else fail-any)) else caught-fail) in
                                                    {868}let v_117: bool = not-caught-fail(client_hts_1) in
                                                    {870}let h_37: bitstring = (if v_117 then catch-fail(hash(@7_tls_h,cur_log2_5)) else caught-fail) in
                                                    {871}let v_118: bool = not-caught-fail(h_37) in
                                                    {869}let l_38: label = (if v_117 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {872}let x_41: bitstring = (if v_118 then (l_38,h_37) else caught-fail) in
                                                    {873}let server_hts_1: bitstring = (if v_117 then catch-fail((if v_118 then hmac(@7_tls_h,handshake_secret_1,x_41) else fail-any)) else caught-fail) in
                                                    {874}let v_119: bool = not-caught-fail(server_hts_1) in
                                                    {876}let h_38: bitstring = (if v_119 then zero else caught-fail) in
                                                    {875}let l_39: label = (if v_119 then tls13_key else caught-fail) in
                                                    {877}let x_42: bitstring = (if v_119 then (l_39,h_38) else caught-fail) in
                                                    {878}let client_wkh_1: bitstring = (if v_119 then catch-fail(hmac(@7_tls_h,client_hts_1,x_42)) else caught-fail) in
                                                    {879}let v_120: bool = not-caught-fail(client_wkh_1) in
                                                    {881}let h_39: bitstring = (if v_120 then zero else caught-fail) in
                                                    {880}let l_40: label = (if v_120 then tls13_key else caught-fail) in
                                                    {882}let x_43: bitstring = (if v_120 then (l_40,h_39) else caught-fail) in
                                                    {883}let server_wkh_1: bitstring = (if v_120 then catch-fail(hmac(@7_tls_h,server_hts_1,x_43)) else caught-fail) in
                                                    {884}let v_121: bool = not-caught-fail(server_wkh_1) in
                                                    {886}let h_40: bitstring = (if v_121 then zero else caught-fail) in
                                                    {885}let l_41: label = (if v_121 then tls13_finished else caught-fail) in
                                                    {887}let x_44: bitstring = (if v_121 then (l_41,h_40) else caught-fail) in
                                                    {888}let client_fk_1: bitstring = (if v_121 then catch-fail(hmac(@7_tls_h,client_hts_1,x_44)) else caught-fail) in
                                                    {889}let v_122: bool = not-caught-fail(client_fk_1) in
                                                    {891}let h_41: bitstring = (if v_122 then zero else caught-fail) in
                                                    {890}let l_42: label = (if v_122 then tls13_finished else caught-fail) in
                                                    {892}let x_45: bitstring = (if v_122 then (l_42,h_41) else caught-fail) in
                                                    {893}let server_fk_1: bitstring = (if v_122 then catch-fail(hmac(@7_tls_h,server_hts_1,x_45)) else caught-fail) in
                                                    {894}let v_123: bool = not-caught-fail(server_fk_1) in
                                                    {895}let (master_secret_10: bitstring,chk_8: aead_key,shk_7: aead_key,cfin_8: mac_key,sfin_7: mac_key) = (if v_114 then (if v_115 then (if v_117 then (if v_119 then (if v_120 then (if v_121 then (if v_122 then (if v_123 then (master_secret_9,client_wkh_1,server_wkh_1,client_fk_1,server_fk_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {896}event Client_chk(@7_id_client,chk_8);
                                                    {897}event Client_shk(@7_id_client,shk_7);
                                                    {898}event Client_cfin(@7_id_client,cfin_8);
                                                    {899}event Client_sfin(@7_id_client,sfin_7);
                                                    {900}in(io, enc_ee_msg: bitstring);
                                                    {901}let ee_msg_1: msg = aead_dec(@7_tls_a,shk_7,0,zero,enc_ee_msg) in
                                                    {902}let EE(ech_ee: echExt,extra_ee: extraExt) = ee_msg_1 in
                                                    {903}let cur_log2_6: bitstring = (cur_log2_5,ee_msg_1) in
                                                    {904}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr',sr_9,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_15,safe_psk_4,@7_comp_psk,master_secret_10,chk_8,0,shk_7,1,cfin_8,sfin_7,cur_log2_6)))
                                                )
                                                else
                                                    {905}out(io, illegal_parameter)
                                            )
                                            else
                                                {906}out(io, illegal_parameter)
                                    )
                                    else
                                        {907}out(io, unexpected_message)
                                )
                                else
                                    {1060}get pre_shared_keys(c_dom'_2: domain,=s_dom_12,=@7_tls_h,id_8: identityPsk,psk_16: preSharedKey,idP_4: idProc,is_safe_3: bool) in
                                    {908}event Selected_one_time_used_psk(@7_id_client,psk_16,is_safe_3);
                                    {909}event Selected_psk(c_dom_5,c_dom'_2,idP_4,is_safe_3);
                                    {910}event Selected_psk_no_missmatch(@7_id_client,s_dom_12,@7_tls_h,psk_16,id_8);
                                    {911}event Selected_psk_with_ID(c_dom_5,c_dom'_2,id_8,idP_4,is_safe_3);
                                    {912}let v_124: bitstring = (id_8,psk_16,is_safe_3) in
                                    {913}let v_125: bool = success?(1-proj-3-tuple(v_124)) in
                                    {914}let is_safe_4: bool = (if v_125 then 3-proj-3-tuple(v_124) else caught-fail) in
                                    {915}let psk_17: preSharedKey = (if v_125 then 2-proj-3-tuple(v_124) else caught-fail) in
                                    {916}let id_9: identityPsk = (if v_125 then 1-proj-3-tuple(v_124) else caught-fail) in
                                    {920}let k_10: bitstring = (if v_125 then catch-fail(psk2b(psk_17)) else caught-fail) in
                                    {921}let v_126: bool = not-caught-fail(k_10) in
                                    {919}let s_14: bitstring = (if v_125 then zero else caught-fail) in
                                    {922}let early_secret_9: bitstring = (if v_125 then catch-fail((if v_126 then hmac(@7_tls_h,s_14,k_10) else fail-any)) else caught-fail) in
                                    {923}let v_127: bool = not-caught-fail(early_secret_9) in
                                    {925}let m_10: bitstring = (if v_127 then zero else caught-fail) in
                                    {926}let h_42: bitstring = (if v_127 then catch-fail(hash(@7_tls_h,m_10)) else caught-fail) in
                                    {927}let v_128: bool = not-caught-fail(h_42) in
                                    {924}let l_43: label = (if v_127 then tls13_ext_res_binder else caught-fail) in
                                    {928}let x_46: bitstring = (if v_128 then (l_43,h_42) else caught-fail) in
                                    {929}let binder_key_6: bitstring = (if v_127 then catch-fail((if v_128 then hmac(@7_tls_h,early_secret_9,x_46) else fail-any)) else caught-fail) in
                                    {930}let v_129: bool = not-caught-fail(binder_key_6) in
                                    {931}let v_130: bitstring = (if v_125 then catch-fail((if v_127 then (if v_129 then (early_secret_9,binder_key_6) else fail-any) else fail-any)) else caught-fail) in
                                    {932}let v_131: bool = (not-caught-fail(v_130) && success?(1-proj-2-tuple(v_130))) in
                                    {933}let kb_6: mac_key = (if v_131 then 2-proj-2-tuple(v_130) else caught-fail) in
                                    {934}let es_7: bitstring = (if v_131 then 1-proj-2-tuple(v_130) else caught-fail) in
                                    {917}let offer_6: params = (if v_125 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_12),ech_ext_3,extra_3,trunc_client_psk_ext(id_9)) else caught-fail) in
                                    {918}let cur_log'_4: bitstring = (if v_125 then (cur_log3_2,CH(cr_11,offer_6)) else caught-fail) in
                                    {935}let binders_3: bitstring = (if v_131 then catch-fail(hmac(@7_tls_h,kb_6,cur_log'_4)) else caught-fail) in
                                    {936}let v_132: bool = not-caught-fail(binders_3) in
                                    {937}let v_133: bitstring = catch-fail((if v_125 then (if v_131 then (if v_132 then (client_psk_ext(id_9,binders_3),(psk_17,id_9,es_7,is_safe_4)) else fail-any) else fail-any) else fail-any)) in
                                    {938}let v_134: bool = (not-caught-fail(v_133) && success?(1-proj-2-tuple(v_133))) in
                                    {939}let psk_data_3: bitstring = (if v_134 then 2-proj-2-tuple(v_133) else caught-fail) in
                                    {940}let psk_ext_5: preSharedKeyExt = (if v_134 then 1-proj-2-tuple(v_133) else caught-fail) in
                                    {941}let offer_7: params = (if v_134 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_5) else caught-fail) in
                                    {942}let (client_hello'_1: msg,cr'_1: bytes32,kex_data'_1: bitstring,psk_data'_1: bitstring) = (if v_134 then (CH(cr_11,offer_7),cr_11,kex_data_2,psk_data_3) else fail-any) in
                                    {943}event ClientOffersAead(cr'_1,@7_tls_a);
                                    {944}event ClientOffersHash(cr'_1,@7_tls_h);
                                    {945}event ClientOffersGroup(cr'_1,@7_tls_g);
                                    {946}out(io, client_hello'_1);
                                    {948}in(io, server_hello'_1: msg);
                                    {949}let SH(sr'_1: bytes32,mode'_1: params) = server_hello'_1 in
                                    (
                                        {950}if (sr'_1 = B32(HRR24,HRR8)) then
                                            {951}out(io, unexpected_message)
                                        else
                                            {952}let (x_47: bitstring,g_1: group) = kex_data'_1 in
                                            {953}let (psk_offer_1: preSharedKey,id_offer_1: identityPsk,es_offer_1: bitstring,is_safe_offer_1: bool) = psk_data'_1 in
                                            {954}event Client_PSKOffer(@7_id_client,psk_offer_1,id_offer_1,is_safe_offer_1);
                                            {955}event Client_Rand_client(@7_id_client,cr'_1);
                                            {956}event Client_DH_client(@7_id_client,dh_pub(g_1,x_47));
                                            {957}event Client_server_domain(@7_id_client,s_dom_12);
                                            {958}let SH(sr_10: bytes32,mode_2: params) = server_hello'_1 in
                                            {959}event Client_Rand_server(@7_id_client,sr_10);
                                            {960}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_1,gy_2: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_6: preSharedKeyExt) = mode_2 in
                                            (
                                                {962}event Client_DH_server(@7_id_client,gy_2);
                                                {963}let v_135: bool = (psk_ext_6 = empty_psk_ext) in
                                                {964}let psk_18: preSharedKey = (if v_135 then NoPsk else caught-fail) in
                                                {966}let k_11: bitstring = (if v_135 then catch-fail(psk2b(psk_18)) else caught-fail) in
                                                {967}let v_136: bool = not-caught-fail(k_11) in
                                                {965}let s_15: bitstring = (if v_135 then zero else caught-fail) in
                                                {968}let early_secret_10: bitstring = (if v_135 then catch-fail((if v_136 then hmac(@7_tls_h,s_15,k_11) else fail-any)) else caught-fail) in
                                                {969}let v_137: bool = not-caught-fail(early_secret_10) in
                                                {971}let m_11: bitstring = (if v_137 then zero else caught-fail) in
                                                {972}let h_43: bitstring = (if v_137 then catch-fail(hash(@7_tls_h,m_11)) else caught-fail) in
                                                {973}let v_138: bool = not-caught-fail(h_43) in
                                                {970}let l_44: label = (if v_137 then tls13_ext_res_binder else caught-fail) in
                                                {974}let x_48: bitstring = (if v_138 then (l_44,h_43) else caught-fail) in
                                                {975}let binder_key_7: bitstring = (if v_137 then catch-fail((if v_138 then hmac(@7_tls_h,early_secret_10,x_48) else fail-any)) else caught-fail) in
                                                {976}let v_139: bool = not-caught-fail(binder_key_7) in
                                                {977}let v_140: bitstring = (if v_135 then catch-fail((if v_137 then (if v_139 then (early_secret_10,binder_key_7) else fail-any) else fail-any)) else caught-fail) in
                                                {978}let v_141: bool = (not-caught-fail(v_140) && success?(1-proj-2-tuple(v_140))) in
                                                {979}let kb_7: mac_key = (if v_141 then 2-proj-2-tuple(v_140) else caught-fail) in
                                                {980}let es_8: bitstring = (if v_141 then 1-proj-2-tuple(v_140) else caught-fail) in
                                                {981}let v_142: bitstring = (if not(v_135) then catch-fail(psk_data'_1) else caught-fail) in
                                                {982}let v_143: bool = (not-caught-fail(v_142) && success?(1-proj-4-tuple(v_142))) in
                                                {983}let is_safe_5: bool = (if v_143 then 4-proj-4-tuple(v_142) else caught-fail) in
                                                {984}let es_9: bitstring = (if v_143 then 3-proj-4-tuple(v_142) else caught-fail) in
                                                {985}let id_10: identityPsk = (if v_143 then 2-proj-4-tuple(v_142) else caught-fail) in
                                                {986}let psk_19: preSharedKey = (if v_143 then 1-proj-4-tuple(v_142) else caught-fail) in
                                                {987}let (psk_20: preSharedKey,early_secret_11: bitstring,valid_1: bool,safe_psk_5: bool) = (if v_135 then (if v_141 then (NoPsk,es_8,true,false) else fail-any) else (if v_143 then (psk_19,es_9,((psk_19 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_6)),is_safe_5) else fail-any)) in
                                                {988}event Client_PSKChoosen(@7_id_client,psk_20,safe_psk_5);
                                                {989}if valid_1 then
                                                (
                                                    {992}new s_16[]: seed;
                                                    {990}let gxy_3: element = catch-fail(dh_decap_fun(g_1,gy_2,x_47)) in
                                                    {991}let v_144: bool = not-caught-fail(gxy_3) in
                                                    {993}let gxy_4: element = (if v_144 then gxy_3 else dh_f(s_16)) in
                                                    {994}event Client_DH_gxy(@7_id_client,gxy_4);
                                                    {996}let m_12: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {997}let v_145: bool = not-caught-fail(m_12) in
                                                    {998}let h_44: bitstring = (if v_145 then catch-fail(hash(@7_tls_h,m_12)) else caught-fail) in
                                                    {999}let v_146: bool = not-caught-fail(h_44) in
                                                    {995}let l_45: label = tls13_derived in
                                                    {1000}let x_49: bitstring = (if v_146 then (l_45,h_44) else caught-fail) in
                                                    {1001}let extra_6: bitstring = catch-fail((if v_145 then (if v_146 then hmac(@7_tls_h,early_secret_11,x_49) else fail-any) else fail-any)) in
                                                    {1002}let v_147: bool = not-caught-fail(extra_6) in
                                                    {1003}let handshake_secret_2: bitstring = (if v_147 then hmac(@7_tls_h,extra_6,gxy_4) else fail-any) in
                                                    {1005}let m_13: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1006}let v_148: bool = not-caught-fail(m_13) in
                                                    {1007}let h_45: bitstring = (if v_148 then catch-fail(hash(@7_tls_h,m_13)) else caught-fail) in
                                                    {1008}let v_149: bool = not-caught-fail(h_45) in
                                                    {1004}let l_46: label = tls13_derived in
                                                    {1009}let x_50: bitstring = (if v_149 then (l_46,h_45) else caught-fail) in
                                                    {1010}let extra_7: bitstring = catch-fail((if v_148 then (if v_149 then hmac(@7_tls_h,handshake_secret_2,x_50) else fail-any) else fail-any)) in
                                                    {1011}let v_150: bool = not-caught-fail(extra_7) in
                                                    {1012}let k_12: bitstring = (if v_150 then zero else caught-fail) in
                                                    {1013}let master_secret_11: bitstring = (if v_150 then catch-fail(hmac(@7_tls_h,handshake_secret_2,k_12)) else caught-fail) in
                                                    {1014}let v_151: bool = not-caught-fail(master_secret_11) in
                                                    {947}let cur_log4_1: bitstring = (cur_log3_2,client_hello'_1) in
                                                    {961}let cur_log2_7: bitstring = (cur_log4_1,server_hello'_1) in
                                                    {1016}let h_46: bitstring = (if v_151 then catch-fail(hash(@7_tls_h,cur_log2_7)) else caught-fail) in
                                                    {1017}let v_152: bool = not-caught-fail(h_46) in
                                                    {1015}let l_47: label = (if v_151 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {1018}let x_51: bitstring = (if v_152 then (l_47,h_46) else caught-fail) in
                                                    {1019}let client_hts_2: bitstring = (if v_151 then catch-fail((if v_152 then hmac(@7_tls_h,handshake_secret_2,x_51) else fail-any)) else caught-fail) in
                                                    {1020}let v_153: bool = not-caught-fail(client_hts_2) in
                                                    {1022}let h_47: bitstring = (if v_153 then catch-fail(hash(@7_tls_h,cur_log2_7)) else caught-fail) in
                                                    {1023}let v_154: bool = not-caught-fail(h_47) in
                                                    {1021}let l_48: label = (if v_153 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {1024}let x_52: bitstring = (if v_154 then (l_48,h_47) else caught-fail) in
                                                    {1025}let server_hts_2: bitstring = (if v_153 then catch-fail((if v_154 then hmac(@7_tls_h,handshake_secret_2,x_52) else fail-any)) else caught-fail) in
                                                    {1026}let v_155: bool = not-caught-fail(server_hts_2) in
                                                    {1028}let h_48: bitstring = (if v_155 then zero else caught-fail) in
                                                    {1027}let l_49: label = (if v_155 then tls13_key else caught-fail) in
                                                    {1029}let x_53: bitstring = (if v_155 then (l_49,h_48) else caught-fail) in
                                                    {1030}let client_wkh_2: bitstring = (if v_155 then catch-fail(hmac(@7_tls_h,client_hts_2,x_53)) else caught-fail) in
                                                    {1031}let v_156: bool = not-caught-fail(client_wkh_2) in
                                                    {1033}let h_49: bitstring = (if v_156 then zero else caught-fail) in
                                                    {1032}let l_50: label = (if v_156 then tls13_key else caught-fail) in
                                                    {1034}let x_54: bitstring = (if v_156 then (l_50,h_49) else caught-fail) in
                                                    {1035}let server_wkh_2: bitstring = (if v_156 then catch-fail(hmac(@7_tls_h,server_hts_2,x_54)) else caught-fail) in
                                                    {1036}let v_157: bool = not-caught-fail(server_wkh_2) in
                                                    {1038}let h_50: bitstring = (if v_157 then zero else caught-fail) in
                                                    {1037}let l_51: label = (if v_157 then tls13_finished else caught-fail) in
                                                    {1039}let x_55: bitstring = (if v_157 then (l_51,h_50) else caught-fail) in
                                                    {1040}let client_fk_2: bitstring = (if v_157 then catch-fail(hmac(@7_tls_h,client_hts_2,x_55)) else caught-fail) in
                                                    {1041}let v_158: bool = not-caught-fail(client_fk_2) in
                                                    {1043}let h_51: bitstring = (if v_158 then zero else caught-fail) in
                                                    {1042}let l_52: label = (if v_158 then tls13_finished else caught-fail) in
                                                    {1044}let x_56: bitstring = (if v_158 then (l_52,h_51) else caught-fail) in
                                                    {1045}let server_fk_2: bitstring = (if v_158 then catch-fail(hmac(@7_tls_h,server_hts_2,x_56)) else caught-fail) in
                                                    {1046}let v_159: bool = not-caught-fail(server_fk_2) in
                                                    {1047}let (master_secret_12: bitstring,chk_9: aead_key,shk_8: aead_key,cfin_9: mac_key,sfin_8: mac_key) = (if v_150 then (if v_151 then (if v_153 then (if v_155 then (if v_156 then (if v_157 then (if v_158 then (if v_159 then (master_secret_11,client_wkh_2,server_wkh_2,client_fk_2,server_fk_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {1048}event Client_chk(@7_id_client,chk_9);
                                                    {1049}event Client_shk(@7_id_client,shk_8);
                                                    {1050}event Client_cfin(@7_id_client,cfin_9);
                                                    {1051}event Client_sfin(@7_id_client,sfin_8);
                                                    {1052}in(io, enc_ee_msg_1: bitstring);
                                                    {1053}let ee_msg_2: msg = aead_dec(@7_tls_a,shk_8,0,zero,enc_ee_msg_1) in
                                                    {1054}let EE(ech_ee_1: echExt,extra_ee_1: extraExt) = ee_msg_2 in
                                                    {1055}let cur_log2_8: bitstring = (cur_log2_7,ee_msg_2) in
                                                    {1056}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_1,sr_10,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_20,safe_psk_5,@7_comp_psk,master_secret_12,chk_9,0,shk_8,1,cfin_9,sfin_8,cur_log2_8)))
                                                )
                                                else
                                                    {1057}out(io, illegal_parameter)
                                            )
                                            else
                                                {1058}out(io, illegal_parameter)
                                    )
                                    else
                                        {1059}out(io, unexpected_message)
                            )
                            else
                                {1061}let psk_21: preSharedKey = NoPsk in
                                {1063}let k_13: bitstring = catch-fail(psk2b(psk_21)) in
                                {1064}let v_160: bool = not-caught-fail(k_13) in
                                {1062}let s_17: bitstring = zero in
                                {1065}let early_secret_12: bitstring = catch-fail((if v_160 then hmac(@7_tls_h,s_17,k_13) else fail-any)) in
                                {1066}let v_161: bool = not-caught-fail(early_secret_12) in
                                {1068}let m_14: bitstring = (if v_161 then zero else caught-fail) in
                                {1069}let h_52: bitstring = (if v_161 then catch-fail(hash(@7_tls_h,m_14)) else caught-fail) in
                                {1070}let v_162: bool = not-caught-fail(h_52) in
                                {1067}let l_53: label = (if v_161 then tls13_ext_res_binder else caught-fail) in
                                {1071}let x_57: bitstring = (if v_162 then (l_53,h_52) else caught-fail) in
                                {1072}let binder_key_8: bitstring = (if v_161 then catch-fail((if v_162 then hmac(@7_tls_h,early_secret_12,x_57) else fail-any)) else caught-fail) in
                                {1073}let v_163: bool = not-caught-fail(binder_key_8) in
                                {1074}let v_164: bitstring = catch-fail((if v_161 then (if v_163 then (early_secret_12,binder_key_8) else fail-any) else fail-any)) in
                                {1075}let v_165: bool = (not-caught-fail(v_164) && success?(1-proj-2-tuple(v_164))) in
                                {1076}let kb_8: mac_key = (if v_165 then 2-proj-2-tuple(v_164) else caught-fail) in
                                {1077}let es_10: bitstring = (if v_165 then 1-proj-2-tuple(v_164) else caught-fail) in
                                {1078}let v_166: bitstring = catch-fail((if v_165 then (empty_psk_ext,(NoPsk,zero,es_10,false)) else fail-any)) in
                                {1079}let v_167: bool = (not-caught-fail(v_166) && success?(1-proj-2-tuple(v_166))) in
                                {1080}let psk_data_4: bitstring = (if v_167 then 2-proj-2-tuple(v_166) else caught-fail) in
                                {1081}let psk_ext_7: preSharedKeyExt = (if v_167 then 1-proj-2-tuple(v_166) else caught-fail) in
                                {1082}let offer_8: params = (if v_167 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_7) else caught-fail) in
                                {1083}let (client_hello'_2: msg,cr'_2: bytes32,kex_data'_2: bitstring,psk_data'_2: bitstring) = (if v_167 then (CH(cr_11,offer_8),cr_11,kex_data_2,psk_data_4) else fail-any) in
                                {1084}event ClientOffersAead(cr'_2,@7_tls_a);
                                {1085}event ClientOffersHash(cr'_2,@7_tls_h);
                                {1086}event ClientOffersGroup(cr'_2,@7_tls_g);
                                {1087}out(io, client_hello'_2);
                                {1089}in(io, server_hello'_2: msg);
                                {1090}let SH(sr'_2: bytes32,mode'_2: params) = server_hello'_2 in
                                (
                                    {1091}if (sr'_2 = B32(HRR24,HRR8)) then
                                        {1092}out(io, unexpected_message)
                                    else
                                        {1093}let (x_58: bitstring,g_2: group) = kex_data'_2 in
                                        {1094}let (psk_offer_2: preSharedKey,id_offer_2: identityPsk,es_offer_2: bitstring,is_safe_offer_2: bool) = psk_data'_2 in
                                        {1095}event Client_PSKOffer(@7_id_client,psk_offer_2,id_offer_2,is_safe_offer_2);
                                        {1096}event Client_Rand_client(@7_id_client,cr'_2);
                                        {1097}event Client_DH_client(@7_id_client,dh_pub(g_2,x_58));
                                        {1098}event Client_server_domain(@7_id_client,s_dom_12);
                                        {1099}let SH(sr_11: bytes32,mode_3: params) = server_hello'_2 in
                                        {1100}event Client_Rand_server(@7_id_client,sr_11);
                                        {1101}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_2,gy_3: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_8: preSharedKeyExt) = mode_3 in
                                        (
                                            {1103}event Client_DH_server(@7_id_client,gy_3);
                                            {1104}let v_168: bool = (psk_ext_8 = empty_psk_ext) in
                                            {1105}let psk_22: preSharedKey = (if v_168 then NoPsk else caught-fail) in
                                            {1107}let k_14: bitstring = (if v_168 then catch-fail(psk2b(psk_22)) else caught-fail) in
                                            {1108}let v_169: bool = not-caught-fail(k_14) in
                                            {1106}let s_18: bitstring = (if v_168 then zero else caught-fail) in
                                            {1109}let early_secret_13: bitstring = (if v_168 then catch-fail((if v_169 then hmac(@7_tls_h,s_18,k_14) else fail-any)) else caught-fail) in
                                            {1110}let v_170: bool = not-caught-fail(early_secret_13) in
                                            {1112}let m_15: bitstring = (if v_170 then zero else caught-fail) in
                                            {1113}let h_53: bitstring = (if v_170 then catch-fail(hash(@7_tls_h,m_15)) else caught-fail) in
                                            {1114}let v_171: bool = not-caught-fail(h_53) in
                                            {1111}let l_54: label = (if v_170 then tls13_ext_res_binder else caught-fail) in
                                            {1115}let x_59: bitstring = (if v_171 then (l_54,h_53) else caught-fail) in
                                            {1116}let binder_key_9: bitstring = (if v_170 then catch-fail((if v_171 then hmac(@7_tls_h,early_secret_13,x_59) else fail-any)) else caught-fail) in
                                            {1117}let v_172: bool = not-caught-fail(binder_key_9) in
                                            {1118}let v_173: bitstring = (if v_168 then catch-fail((if v_170 then (if v_172 then (early_secret_13,binder_key_9) else fail-any) else fail-any)) else caught-fail) in
                                            {1119}let v_174: bool = (not-caught-fail(v_173) && success?(1-proj-2-tuple(v_173))) in
                                            {1120}let kb_9: mac_key = (if v_174 then 2-proj-2-tuple(v_173) else caught-fail) in
                                            {1121}let es_11: bitstring = (if v_174 then 1-proj-2-tuple(v_173) else caught-fail) in
                                            {1122}let v_175: bitstring = (if not(v_168) then catch-fail(psk_data'_2) else caught-fail) in
                                            {1123}let v_176: bool = (not-caught-fail(v_175) && success?(1-proj-4-tuple(v_175))) in
                                            {1124}let is_safe_6: bool = (if v_176 then 4-proj-4-tuple(v_175) else caught-fail) in
                                            {1125}let es_12: bitstring = (if v_176 then 3-proj-4-tuple(v_175) else caught-fail) in
                                            {1126}let id_11: identityPsk = (if v_176 then 2-proj-4-tuple(v_175) else caught-fail) in
                                            {1127}let psk_23: preSharedKey = (if v_176 then 1-proj-4-tuple(v_175) else caught-fail) in
                                            {1128}let (psk_24: preSharedKey,early_secret_14: bitstring,valid_2: bool,safe_psk_6: bool) = (if v_168 then (if v_174 then (NoPsk,es_11,true,false) else fail-any) else (if v_176 then (psk_23,es_12,((psk_23 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_8)),is_safe_6) else fail-any)) in
                                            {1129}event Client_PSKChoosen(@7_id_client,psk_24,safe_psk_6);
                                            {1130}if valid_2 then
                                            (
                                                {1133}new s_19[]: seed;
                                                {1131}let gxy_5: element = catch-fail(dh_decap_fun(g_2,gy_3,x_58)) in
                                                {1132}let v_177: bool = not-caught-fail(gxy_5) in
                                                {1134}let gxy_6: element = (if v_177 then gxy_5 else dh_f(s_19)) in
                                                {1135}event Client_DH_gxy(@7_id_client,gxy_6);
                                                {1137}let m_16: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1138}let v_178: bool = not-caught-fail(m_16) in
                                                {1139}let h_54: bitstring = (if v_178 then catch-fail(hash(@7_tls_h,m_16)) else caught-fail) in
                                                {1140}let v_179: bool = not-caught-fail(h_54) in
                                                {1136}let l_55: label = tls13_derived in
                                                {1141}let x_60: bitstring = (if v_179 then (l_55,h_54) else caught-fail) in
                                                {1142}let extra_8: bitstring = catch-fail((if v_178 then (if v_179 then hmac(@7_tls_h,early_secret_14,x_60) else fail-any) else fail-any)) in
                                                {1143}let v_180: bool = not-caught-fail(extra_8) in
                                                {1144}let handshake_secret_3: bitstring = (if v_180 then hmac(@7_tls_h,extra_8,gxy_6) else fail-any) in
                                                {1146}let m_17: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1147}let v_181: bool = not-caught-fail(m_17) in
                                                {1148}let h_55: bitstring = (if v_181 then catch-fail(hash(@7_tls_h,m_17)) else caught-fail) in
                                                {1149}let v_182: bool = not-caught-fail(h_55) in
                                                {1145}let l_56: label = tls13_derived in
                                                {1150}let x_61: bitstring = (if v_182 then (l_56,h_55) else caught-fail) in
                                                {1151}let extra_9: bitstring = catch-fail((if v_181 then (if v_182 then hmac(@7_tls_h,handshake_secret_3,x_61) else fail-any) else fail-any)) in
                                                {1152}let v_183: bool = not-caught-fail(extra_9) in
                                                {1153}let k_15: bitstring = (if v_183 then zero else caught-fail) in
                                                {1154}let master_secret_13: bitstring = (if v_183 then catch-fail(hmac(@7_tls_h,handshake_secret_3,k_15)) else caught-fail) in
                                                {1155}let v_184: bool = not-caught-fail(master_secret_13) in
                                                {1088}let cur_log4_2: bitstring = (cur_log3_2,client_hello'_2) in
                                                {1102}let cur_log2_9: bitstring = (cur_log4_2,server_hello'_2) in
                                                {1157}let h_56: bitstring = (if v_184 then catch-fail(hash(@7_tls_h,cur_log2_9)) else caught-fail) in
                                                {1158}let v_185: bool = not-caught-fail(h_56) in
                                                {1156}let l_57: label = (if v_184 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {1159}let x_62: bitstring = (if v_185 then (l_57,h_56) else caught-fail) in
                                                {1160}let client_hts_3: bitstring = (if v_184 then catch-fail((if v_185 then hmac(@7_tls_h,handshake_secret_3,x_62) else fail-any)) else caught-fail) in
                                                {1161}let v_186: bool = not-caught-fail(client_hts_3) in
                                                {1163}let h_57: bitstring = (if v_186 then catch-fail(hash(@7_tls_h,cur_log2_9)) else caught-fail) in
                                                {1164}let v_187: bool = not-caught-fail(h_57) in
                                                {1162}let l_58: label = (if v_186 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {1165}let x_63: bitstring = (if v_187 then (l_58,h_57) else caught-fail) in
                                                {1166}let server_hts_3: bitstring = (if v_186 then catch-fail((if v_187 then hmac(@7_tls_h,handshake_secret_3,x_63) else fail-any)) else caught-fail) in
                                                {1167}let v_188: bool = not-caught-fail(server_hts_3) in
                                                {1169}let h_58: bitstring = (if v_188 then zero else caught-fail) in
                                                {1168}let l_59: label = (if v_188 then tls13_key else caught-fail) in
                                                {1170}let x_64: bitstring = (if v_188 then (l_59,h_58) else caught-fail) in
                                                {1171}let client_wkh_3: bitstring = (if v_188 then catch-fail(hmac(@7_tls_h,client_hts_3,x_64)) else caught-fail) in
                                                {1172}let v_189: bool = not-caught-fail(client_wkh_3) in
                                                {1174}let h_59: bitstring = (if v_189 then zero else caught-fail) in
                                                {1173}let l_60: label = (if v_189 then tls13_key else caught-fail) in
                                                {1175}let x_65: bitstring = (if v_189 then (l_60,h_59) else caught-fail) in
                                                {1176}let server_wkh_3: bitstring = (if v_189 then catch-fail(hmac(@7_tls_h,server_hts_3,x_65)) else caught-fail) in
                                                {1177}let v_190: bool = not-caught-fail(server_wkh_3) in
                                                {1179}let h_60: bitstring = (if v_190 then zero else caught-fail) in
                                                {1178}let l_61: label = (if v_190 then tls13_finished else caught-fail) in
                                                {1180}let x_66: bitstring = (if v_190 then (l_61,h_60) else caught-fail) in
                                                {1181}let client_fk_3: bitstring = (if v_190 then catch-fail(hmac(@7_tls_h,client_hts_3,x_66)) else caught-fail) in
                                                {1182}let v_191: bool = not-caught-fail(client_fk_3) in
                                                {1184}let h_61: bitstring = (if v_191 then zero else caught-fail) in
                                                {1183}let l_62: label = (if v_191 then tls13_finished else caught-fail) in
                                                {1185}let x_67: bitstring = (if v_191 then (l_62,h_61) else caught-fail) in
                                                {1186}let server_fk_3: bitstring = (if v_191 then catch-fail(hmac(@7_tls_h,server_hts_3,x_67)) else caught-fail) in
                                                {1187}let v_192: bool = not-caught-fail(server_fk_3) in
                                                {1188}let (master_secret_14: bitstring,chk_10: aead_key,shk_9: aead_key,cfin_10: mac_key,sfin_9: mac_key) = (if v_183 then (if v_184 then (if v_186 then (if v_188 then (if v_189 then (if v_190 then (if v_191 then (if v_192 then (master_secret_13,client_wkh_3,server_wkh_3,client_fk_3,server_fk_3) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {1189}event Client_chk(@7_id_client,chk_10);
                                                {1190}event Client_shk(@7_id_client,shk_9);
                                                {1191}event Client_cfin(@7_id_client,cfin_10);
                                                {1192}event Client_sfin(@7_id_client,sfin_9);
                                                {1193}in(io, enc_ee_msg_2: bitstring);
                                                {1194}let ee_msg_3: msg = aead_dec(@7_tls_a,shk_9,0,zero,enc_ee_msg_2) in
                                                {1195}let EE(ech_ee_2: echExt,extra_ee_2: extraExt) = ee_msg_3 in
                                                {1196}let cur_log2_10: bitstring = (cur_log2_9,ee_msg_3) in
                                                {1197}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_2,sr_11,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_24,safe_psk_6,@7_comp_psk,master_secret_14,chk_10,0,shk_9,1,cfin_10,sfin_9,cur_log2_10)))
                                            )
                                            else
                                                {1198}out(io, illegal_parameter)
                                        )
                                        else
                                            {1199}out(io, illegal_parameter)
                                )
                                else
                                    {1200}out(io, unexpected_message)
                        )
                        else
                            {1201}out(io, illegal_parameter)
                    )
                    else
                        {1202}if send_kex then
                        (
                            {1203}let (x_68: bitstring,g_3: group) = kex_data_1 in
                            {1204}let (psk_offer_3: preSharedKey,id_offer_3: identityPsk,es_offer_3: bitstring,is_safe_offer_3: bool) = psk_data_1 in
                            {1205}event Client_PSKOffer(@7_id_client,psk_offer_3,id_offer_3,is_safe_offer_3);
                            {1206}event Client_Rand_client(@7_id_client,cr_10);
                            {1207}event Client_DH_client(@7_id_client,dh_pub(g_3,x_68));
                            {1208}event Client_server_domain(@7_id_client,s_dom_12);
                            {1209}let SH(sr_12: bytes32,mode_4: params) = server_hello_1 in
                            {1210}event Client_Rand_server(@7_id_client,sr_12);
                            {1211}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_3,gy_4: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_9: preSharedKeyExt) = mode_4 in
                            (
                                {1213}event Client_DH_server(@7_id_client,gy_4);
                                {1214}let v_193: bool = (psk_ext_9 = empty_psk_ext) in
                                {1215}let psk_25: preSharedKey = (if v_193 then NoPsk else caught-fail) in
                                {1217}let k_16: bitstring = (if v_193 then catch-fail(psk2b(psk_25)) else caught-fail) in
                                {1218}let v_194: bool = not-caught-fail(k_16) in
                                {1216}let s_20: bitstring = (if v_193 then zero else caught-fail) in
                                {1219}let early_secret_15: bitstring = (if v_193 then catch-fail((if v_194 then hmac(@7_tls_h,s_20,k_16) else fail-any)) else caught-fail) in
                                {1220}let v_195: bool = not-caught-fail(early_secret_15) in
                                {1222}let m_18: bitstring = (if v_195 then zero else caught-fail) in
                                {1223}let h_62: bitstring = (if v_195 then catch-fail(hash(@7_tls_h,m_18)) else caught-fail) in
                                {1224}let v_196: bool = not-caught-fail(h_62) in
                                {1221}let l_63: label = (if v_195 then tls13_ext_res_binder else caught-fail) in
                                {1225}let x_69: bitstring = (if v_196 then (l_63,h_62) else caught-fail) in
                                {1226}let binder_key_10: bitstring = (if v_195 then catch-fail((if v_196 then hmac(@7_tls_h,early_secret_15,x_69) else fail-any)) else caught-fail) in
                                {1227}let v_197: bool = not-caught-fail(binder_key_10) in
                                {1228}let v_198: bitstring = (if v_193 then catch-fail((if v_195 then (if v_197 then (early_secret_15,binder_key_10) else fail-any) else fail-any)) else caught-fail) in
                                {1229}let v_199: bool = (not-caught-fail(v_198) && success?(1-proj-2-tuple(v_198))) in
                                {1230}let kb_10: mac_key = (if v_199 then 2-proj-2-tuple(v_198) else caught-fail) in
                                {1231}let es_13: bitstring = (if v_199 then 1-proj-2-tuple(v_198) else caught-fail) in
                                {1232}let v_200: bitstring = (if not(v_193) then catch-fail(psk_data_1) else caught-fail) in
                                {1233}let v_201: bool = (not-caught-fail(v_200) && success?(1-proj-4-tuple(v_200))) in
                                {1234}let is_safe_7: bool = (if v_201 then 4-proj-4-tuple(v_200) else caught-fail) in
                                {1235}let es_14: bitstring = (if v_201 then 3-proj-4-tuple(v_200) else caught-fail) in
                                {1236}let id_12: identityPsk = (if v_201 then 2-proj-4-tuple(v_200) else caught-fail) in
                                {1237}let psk_26: preSharedKey = (if v_201 then 1-proj-4-tuple(v_200) else caught-fail) in
                                {1238}let (psk_27: preSharedKey,early_secret_16: bitstring,valid_3: bool,safe_psk_7: bool) = (if v_193 then (if v_199 then (NoPsk,es_13,true,false) else fail-any) else (if v_201 then (psk_26,es_14,((psk_26 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_9)),is_safe_7) else fail-any)) in
                                {1239}event Client_PSKChoosen(@7_id_client,psk_27,safe_psk_7);
                                {1240}if valid_3 then
                                (
                                    {1243}new s_21[]: seed;
                                    {1241}let gxy_7: element = catch-fail(dh_decap_fun(g_3,gy_4,x_68)) in
                                    {1242}let v_202: bool = not-caught-fail(gxy_7) in
                                    {1244}let gxy_8: element = (if v_202 then gxy_7 else dh_f(s_21)) in
                                    {1245}event Client_DH_gxy(@7_id_client,gxy_8);
                                    {1247}let m_19: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1248}let v_203: bool = not-caught-fail(m_19) in
                                    {1249}let h_63: bitstring = (if v_203 then catch-fail(hash(@7_tls_h,m_19)) else caught-fail) in
                                    {1250}let v_204: bool = not-caught-fail(h_63) in
                                    {1246}let l_64: label = tls13_derived in
                                    {1251}let x_70: bitstring = (if v_204 then (l_64,h_63) else caught-fail) in
                                    {1252}let extra_10: bitstring = catch-fail((if v_203 then (if v_204 then hmac(@7_tls_h,early_secret_16,x_70) else fail-any) else fail-any)) in
                                    {1253}let v_205: bool = not-caught-fail(extra_10) in
                                    {1254}let handshake_secret_4: bitstring = (if v_205 then hmac(@7_tls_h,extra_10,gxy_8) else fail-any) in
                                    {1256}let m_20: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1257}let v_206: bool = not-caught-fail(m_20) in
                                    {1258}let h_64: bitstring = (if v_206 then catch-fail(hash(@7_tls_h,m_20)) else caught-fail) in
                                    {1259}let v_207: bool = not-caught-fail(h_64) in
                                    {1255}let l_65: label = tls13_derived in
                                    {1260}let x_71: bitstring = (if v_207 then (l_65,h_64) else caught-fail) in
                                    {1261}let extra_11: bitstring = catch-fail((if v_206 then (if v_207 then hmac(@7_tls_h,handshake_secret_4,x_71) else fail-any) else fail-any)) in
                                    {1262}let v_208: bool = not-caught-fail(extra_11) in
                                    {1263}let k_17: bitstring = (if v_208 then zero else caught-fail) in
                                    {1264}let master_secret_15: bitstring = (if v_208 then catch-fail(hmac(@7_tls_h,handshake_secret_4,k_17)) else caught-fail) in
                                    {1265}let v_209: bool = not-caught-fail(master_secret_15) in
                                    {1212}let cur_log2_11: bitstring = (cur_log2_4,server_hello_1) in
                                    {1267}let h_65: bitstring = (if v_209 then catch-fail(hash(@7_tls_h,cur_log2_11)) else caught-fail) in
                                    {1268}let v_210: bool = not-caught-fail(h_65) in
                                    {1266}let l_66: label = (if v_209 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {1269}let x_72: bitstring = (if v_210 then (l_66,h_65) else caught-fail) in
                                    {1270}let client_hts_4: bitstring = (if v_209 then catch-fail((if v_210 then hmac(@7_tls_h,handshake_secret_4,x_72) else fail-any)) else caught-fail) in
                                    {1271}let v_211: bool = not-caught-fail(client_hts_4) in
                                    {1273}let h_66: bitstring = (if v_211 then catch-fail(hash(@7_tls_h,cur_log2_11)) else caught-fail) in
                                    {1274}let v_212: bool = not-caught-fail(h_66) in
                                    {1272}let l_67: label = (if v_211 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {1275}let x_73: bitstring = (if v_212 then (l_67,h_66) else caught-fail) in
                                    {1276}let server_hts_4: bitstring = (if v_211 then catch-fail((if v_212 then hmac(@7_tls_h,handshake_secret_4,x_73) else fail-any)) else caught-fail) in
                                    {1277}let v_213: bool = not-caught-fail(server_hts_4) in
                                    {1279}let h_67: bitstring = (if v_213 then zero else caught-fail) in
                                    {1278}let l_68: label = (if v_213 then tls13_key else caught-fail) in
                                    {1280}let x_74: bitstring = (if v_213 then (l_68,h_67) else caught-fail) in
                                    {1281}let client_wkh_4: bitstring = (if v_213 then catch-fail(hmac(@7_tls_h,client_hts_4,x_74)) else caught-fail) in
                                    {1282}let v_214: bool = not-caught-fail(client_wkh_4) in
                                    {1284}let h_68: bitstring = (if v_214 then zero else caught-fail) in
                                    {1283}let l_69: label = (if v_214 then tls13_key else caught-fail) in
                                    {1285}let x_75: bitstring = (if v_214 then (l_69,h_68) else caught-fail) in
                                    {1286}let server_wkh_4: bitstring = (if v_214 then catch-fail(hmac(@7_tls_h,server_hts_4,x_75)) else caught-fail) in
                                    {1287}let v_215: bool = not-caught-fail(server_wkh_4) in
                                    {1289}let h_69: bitstring = (if v_215 then zero else caught-fail) in
                                    {1288}let l_70: label = (if v_215 then tls13_finished else caught-fail) in
                                    {1290}let x_76: bitstring = (if v_215 then (l_70,h_69) else caught-fail) in
                                    {1291}let client_fk_4: bitstring = (if v_215 then catch-fail(hmac(@7_tls_h,client_hts_4,x_76)) else caught-fail) in
                                    {1292}let v_216: bool = not-caught-fail(client_fk_4) in
                                    {1294}let h_70: bitstring = (if v_216 then zero else caught-fail) in
                                    {1293}let l_71: label = (if v_216 then tls13_finished else caught-fail) in
                                    {1295}let x_77: bitstring = (if v_216 then (l_71,h_70) else caught-fail) in
                                    {1296}let server_fk_4: bitstring = (if v_216 then catch-fail(hmac(@7_tls_h,server_hts_4,x_77)) else caught-fail) in
                                    {1297}let v_217: bool = not-caught-fail(server_fk_4) in
                                    {1298}let (master_secret_16: bitstring,chk_11: aead_key,shk_10: aead_key,cfin_11: mac_key,sfin_10: mac_key) = (if v_208 then (if v_209 then (if v_211 then (if v_213 then (if v_214 then (if v_215 then (if v_216 then (if v_217 then (master_secret_15,client_wkh_4,server_wkh_4,client_fk_4,server_fk_4) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {1299}event Client_chk(@7_id_client,chk_11);
                                    {1300}event Client_shk(@7_id_client,shk_10);
                                    {1301}event Client_cfin(@7_id_client,cfin_11);
                                    {1302}event Client_sfin(@7_id_client,sfin_10);
                                    {1303}in(io, enc_ee_msg_3: bitstring);
                                    {1304}let ee_msg_4: msg = aead_dec(@7_tls_a,shk_10,0,zero,enc_ee_msg_3) in
                                    {1305}let EE(ech_ee_3: echExt,extra_ee_3: extraExt) = ee_msg_4 in
                                    {1306}let cur_log2_12: bitstring = (cur_log2_11,ee_msg_4) in
                                    {1307}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr_10,sr_12,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_27,safe_psk_7,@7_comp_psk,master_secret_16,chk_11,0,shk_10,1,cfin_11,sfin_10,cur_log2_12)))
                                )
                                else
                                    {1308}out(io, illegal_parameter)
                            )
                            else
                                {1309}out(io, illegal_parameter)
                        )
                        else
                            {1310}out(io, illegal_parameter)
                )
                else
                    {1311}out(io, unexpected_message)
            )
        )
        else
            {1951}get pre_shared_keys(c_dom'_3: domain,=s_dom_12,=@7_tls_h,id_13: identityPsk,psk_28: preSharedKey,idP_5: idProc,is_safe_8: bool) in
            {1312}event Selected_one_time_used_psk(@7_id_client,psk_28,is_safe_8);
            {1313}event Selected_psk(c_dom_5,c_dom'_3,idP_5,is_safe_8);
            {1314}event Selected_psk_no_missmatch(@7_id_client,s_dom_12,@7_tls_h,psk_28,id_13);
            {1315}event Selected_psk_with_ID(c_dom_5,c_dom'_3,id_13,idP_5,is_safe_8);
            {1316}let v_218: bitstring = (id_13,psk_28,is_safe_8) in
            {1317}let v_219: bool = success?(1-proj-3-tuple(v_218)) in
            {1318}let is_safe_9: bool = (if v_219 then 3-proj-3-tuple(v_218) else caught-fail) in
            {1319}let psk_29: preSharedKey = (if v_219 then 2-proj-3-tuple(v_218) else caught-fail) in
            {1320}let id_14: identityPsk = (if v_219 then 1-proj-3-tuple(v_218) else caught-fail) in
            {1324}let k_18: bitstring = (if v_219 then catch-fail(psk2b(psk_29)) else caught-fail) in
            {1325}let v_220: bool = not-caught-fail(k_18) in
            {1323}let s_22: bitstring = (if v_219 then zero else caught-fail) in
            {1326}let early_secret_17: bitstring = (if v_219 then catch-fail((if v_220 then hmac(@7_tls_h,s_22,k_18) else fail-any)) else caught-fail) in
            {1327}let v_221: bool = not-caught-fail(early_secret_17) in
            {1329}let m_21: bitstring = (if v_221 then zero else caught-fail) in
            {1330}let h_71: bitstring = (if v_221 then catch-fail(hash(@7_tls_h,m_21)) else caught-fail) in
            {1331}let v_222: bool = not-caught-fail(h_71) in
            {1328}let l_72: label = (if v_221 then tls13_ext_res_binder else caught-fail) in
            {1332}let x_78: bitstring = (if v_222 then (l_72,h_71) else caught-fail) in
            {1333}let binder_key_11: bitstring = (if v_221 then catch-fail((if v_222 then hmac(@7_tls_h,early_secret_17,x_78) else fail-any)) else caught-fail) in
            {1334}let v_223: bool = not-caught-fail(binder_key_11) in
            {1335}let v_224: bitstring = (if v_219 then catch-fail((if v_221 then (if v_223 then (early_secret_17,binder_key_11) else fail-any) else fail-any)) else caught-fail) in
            {1336}let v_225: bool = (not-caught-fail(v_224) && success?(1-proj-2-tuple(v_224))) in
            {1337}let kb_11: mac_key = (if v_225 then 2-proj-2-tuple(v_224) else caught-fail) in
            {1338}let es_15: bitstring = (if v_225 then 1-proj-2-tuple(v_224) else caught-fail) in
            {1321}let offer_9: params = (if v_219 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_12),ech_ext_2,extra_2,trunc_client_psk_ext(id_14)) else caught-fail) in
            {1322}let cur_log'_5: bitstring = (if v_219 then (cur_log_8,CH(cr_9,offer_9)) else caught-fail) in
            {1339}let binders_4: bitstring = (if v_225 then catch-fail(hmac(@7_tls_h,kb_11,cur_log'_5)) else caught-fail) in
            {1340}let v_226: bool = not-caught-fail(binders_4) in
            {1341}let v_227: bitstring = catch-fail((if v_219 then (if v_225 then (if v_226 then (client_psk_ext(id_14,binders_4),(psk_29,id_14,es_15,is_safe_9)) else fail-any) else fail-any) else fail-any)) in
            {1342}let v_228: bool = (not-caught-fail(v_227) && success?(1-proj-2-tuple(v_227))) in
            {1343}let psk_data_5: bitstring = (if v_228 then 2-proj-2-tuple(v_227) else caught-fail) in
            {1344}let psk_ext_10: preSharedKeyExt = (if v_228 then 1-proj-2-tuple(v_227) else caught-fail) in
            {1345}let offer_10: params = (if v_228 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_10) else caught-fail) in
            {1346}let (client_hello_3: msg,cr_12: bytes32,kex_data_3: bitstring,psk_data_6: bitstring) = (if v_228 then (CH(cr_9,offer_10),cr_9,kex_data,psk_data_5) else fail-any) in
            {1347}event ClientOffersAead(cr_12,@7_tls_a);
            {1348}event ClientOffersHash(cr_12,@7_tls_h);
            {1349}event ClientOffersGroup(cr_12,@7_tls_g);
            {1350}out(io, client_hello_3);
            {1352}let (psk_30: preSharedKey,id_15: identityPsk,es_16: bitstring,safe_psk_8: bool) = psk_data_6 in
            (
                {1353}if (false && (psk_30 ≠ NoPsk)) then
                {1354}let client_hello_4: bitstring = (zero,client_hello_3) in
                {1356}let h_72: bitstring = catch-fail(hash(@7_tls_h,client_hello_4)) in
                {1357}let v_229: bool = not-caught-fail(h_72) in
                {1355}let l_73: label = tls13_client_early_traffic_secret in
                {1358}let x_79: bitstring = (if v_229 then (l_73,h_72) else caught-fail) in
                {1359}let atsc0_2: bitstring = catch-fail((if v_229 then hmac(@7_tls_h,es_16,x_79) else fail-any)) in
                {1360}let v_230: bool = not-caught-fail(atsc0_2) in
                {1362}let h_73: bitstring = (if v_230 then zero else caught-fail) in
                {1361}let l_74: label = (if v_230 then tls13_key else caught-fail) in
                {1363}let x_80: bitstring = (if v_230 then (l_74,h_73) else caught-fail) in
                {1364}let kc0_2: bitstring = (if v_230 then catch-fail(hmac(@7_tls_h,atsc0_2,x_80)) else caught-fail) in
                {1365}let v_231: bool = not-caught-fail(kc0_2) in
                {1367}let h_74: bitstring = (if v_231 then catch-fail(hash(@7_tls_h,client_hello_4)) else caught-fail) in
                {1368}let v_232: bool = not-caught-fail(h_74) in
                {1366}let l_75: label = (if v_231 then tls13_early_exporter_master_secret else caught-fail) in
                {1369}let x_81: bitstring = (if v_232 then (l_75,h_74) else caught-fail) in
                {1370}let ems0_4: bitstring = (if v_231 then catch-fail((if v_232 then hmac(@7_tls_h,es_16,x_81) else fail-any)) else caught-fail) in
                {1371}let v_233: bool = not-caught-fail(ems0_4) in
                {1372}let (wkc0_2: aead_key,ems0_5: bitstring) = (if v_230 then (if v_231 then (if v_233 then (kc0_2,ems0_4) else fail-any) else fail-any) else fail-any) in
                {1373}!
                {1374}in(io, (i_2: nat,ad_2: bitstring));
                {1375}if is_nat(i_2) then
                {1376}new msg_ed_1[]: bitstring;
                {1378}new st_11: stamp;
                {1379}event ClientSequenceClient0RTTDataWriteKey(@7_id_client,st_11,i_2);
                {1380}event ClientSends0(@7_id_client,cr_12,psk_30,i_2,ad_2,msg_ed_1);
                {1377}let enc_ed_1: bitstring = aead_enc(@7_tls_a,wkc0_2,i_2,ad_2,msg_ed_1) in
                {1381}out(io, enc_ed_1)
            ) | (
                {1382}in(io, server_hello_2: msg);
                {1383}let SH(sr_13: bytes32,mode_5: params) = server_hello_2 in
                (
                    {1384}event ClientEchAcceptance(@7_id_client,false);
                    {1351}let cur_log2_13: bitstring = (cur_log_8,client_hello_3) in
                    {1385}if (false && (sr_13 = B32(HRR24,HRR8))) then
                    (
                        {1386}if ((mode_5 = nego(TLS13,@7_tls_h,@7_tls_a,hrr_kex_ext(@7_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex ≠ true)) then
                        (
                            {1389}new rand24_3[]: bytes24;
                            {1390}new rand8_3[]: bytes8;
                            {1392}new s_23[]: seed;
                            {1393}let gx_6: element = dh_pub(@7_tls_g,dh_k(s_23)) in
                            {1394}let v_234: bitstring = (dh_k(s_23),gx_6) in
                            {1395}let v_235: bool = success?(1-proj-2-tuple(v_234)) in
                            {1396}let gx_7: element = (if v_235 then 2-proj-2-tuple(v_234) else caught-fail) in
                            {1397}let x_82: bitstring = (if v_235 then 1-proj-2-tuple(v_234) else caught-fail) in
                            {1388}let send_kex_2: bool = true in
                            {1398}let kex_2: kex_alg = (if v_235 then (if send_kex_2 then DHE_kex(@7_tls_g,gx_7) else DHE_group(@7_tls_g)) else caught-fail) in
                            {1399}let (kex_ext_3: keyShareExt,kex_data_4: bitstring) = (if v_235 then (client_kex_ext(kex_2),(x_82,@7_tls_g)) else fail-any) in
                            {1391}let cr_13: bytes32 = B32(rand24_3,rand8_3) in
                            {1387}let cur_log3_3: bitstring = (cur_log2_13,server_hello_2) in
                            {1402}if @7_use_psk then
                            (
                                {1401}let extra_12: extraExt = empty_extra_ext in
                                {1400}let ech_ext_4: echExt = empty_ech_ext in
                                {1403}let (psk_31: preSharedKey,id_16: identityPsk,old_es_2: bitstring,is_safe_10: bool) = psk_data_6 in
                                (
                                    {1407}let k_19: bitstring = catch-fail(psk2b(psk_31)) in
                                    {1408}let v_236: bool = not-caught-fail(k_19) in
                                    {1406}let s_24: bitstring = zero in
                                    {1409}let early_secret_18: bitstring = catch-fail((if v_236 then hmac(@7_tls_h,s_24,k_19) else fail-any)) in
                                    {1410}let v_237: bool = not-caught-fail(early_secret_18) in
                                    {1412}let m_22: bitstring = (if v_237 then zero else caught-fail) in
                                    {1413}let h_75: bitstring = (if v_237 then catch-fail(hash(@7_tls_h,m_22)) else caught-fail) in
                                    {1414}let v_238: bool = not-caught-fail(h_75) in
                                    {1411}let l_76: label = (if v_237 then tls13_ext_res_binder else caught-fail) in
                                    {1415}let x_83: bitstring = (if v_238 then (l_76,h_75) else caught-fail) in
                                    {1416}let binder_key_12: bitstring = (if v_237 then catch-fail((if v_238 then hmac(@7_tls_h,early_secret_18,x_83) else fail-any)) else caught-fail) in
                                    {1417}let v_239: bool = not-caught-fail(binder_key_12) in
                                    {1418}let v_240: bitstring = catch-fail((if v_237 then (if v_239 then (early_secret_18,binder_key_12) else fail-any) else fail-any)) in
                                    {1419}let v_241: bool = (not-caught-fail(v_240) && success?(1-proj-2-tuple(v_240))) in
                                    {1420}let kb_12: mac_key = (if v_241 then 2-proj-2-tuple(v_240) else caught-fail) in
                                    {1421}let es_17: bitstring = (if v_241 then 1-proj-2-tuple(v_240) else caught-fail) in
                                    {1404}let offer_11: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_12),ech_ext_4,extra_12,trunc_client_psk_ext(id_16)) in
                                    {1405}let cur_log'_6: bitstring = (cur_log3_3,CH(cr_13,offer_11)) in
                                    {1422}let binders_5: bitstring = (if v_241 then catch-fail(hmac(@7_tls_h,kb_12,cur_log'_6)) else caught-fail) in
                                    {1423}let v_242: bool = not-caught-fail(binders_5) in
                                    {1424}let v_243: bitstring = catch-fail((if v_241 then (if v_242 then (client_psk_ext(id_16,binders_5),(psk_31,id_16,es_17,is_safe_10)) else fail-any) else fail-any)) in
                                    {1425}let v_244: bool = (not-caught-fail(v_243) && success?(1-proj-2-tuple(v_243))) in
                                    {1426}let psk_data_7: bitstring = (if v_244 then 2-proj-2-tuple(v_243) else caught-fail) in
                                    {1427}let psk_ext_11: preSharedKeyExt = (if v_244 then 1-proj-2-tuple(v_243) else caught-fail) in
                                    {1428}let offer_12: params = (if v_244 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_11) else caught-fail) in
                                    {1429}let (client_hello'_3: msg,cr'_3: bytes32,kex_data'_3: bitstring,psk_data'_3: bitstring) = (if v_244 then (CH(cr_13,offer_12),cr_13,kex_data_4,psk_data_7) else fail-any) in
                                    {1430}event ClientOffersAead(cr'_3,@7_tls_a);
                                    {1431}event ClientOffersHash(cr'_3,@7_tls_h);
                                    {1432}event ClientOffersGroup(cr'_3,@7_tls_g);
                                    {1433}out(io, client_hello'_3);
                                    {1435}in(io, server_hello'_3: msg);
                                    {1436}let SH(sr'_3: bytes32,mode'_3: params) = server_hello'_3 in
                                    (
                                        {1437}if (sr'_3 = B32(HRR24,HRR8)) then
                                            {1438}out(io, unexpected_message)
                                        else
                                            {1439}let (x_84: bitstring,g_4: group) = kex_data'_3 in
                                            {1440}let (psk_offer_4: preSharedKey,id_offer_4: identityPsk,es_offer_4: bitstring,is_safe_offer_4: bool) = psk_data'_3 in
                                            {1441}event Client_PSKOffer(@7_id_client,psk_offer_4,id_offer_4,is_safe_offer_4);
                                            {1442}event Client_Rand_client(@7_id_client,cr'_3);
                                            {1443}event Client_DH_client(@7_id_client,dh_pub(g_4,x_84));
                                            {1444}event Client_server_domain(@7_id_client,s_dom_12);
                                            {1445}let SH(sr_14: bytes32,mode_6: params) = server_hello'_3 in
                                            {1446}event Client_Rand_server(@7_id_client,sr_14);
                                            {1447}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_4,gy_5: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_12: preSharedKeyExt) = mode_6 in
                                            (
                                                {1449}event Client_DH_server(@7_id_client,gy_5);
                                                {1450}let v_245: bool = (psk_ext_12 = empty_psk_ext) in
                                                {1451}let psk_32: preSharedKey = (if v_245 then NoPsk else caught-fail) in
                                                {1453}let k_20: bitstring = (if v_245 then catch-fail(psk2b(psk_32)) else caught-fail) in
                                                {1454}let v_246: bool = not-caught-fail(k_20) in
                                                {1452}let s_25: bitstring = (if v_245 then zero else caught-fail) in
                                                {1455}let early_secret_19: bitstring = (if v_245 then catch-fail((if v_246 then hmac(@7_tls_h,s_25,k_20) else fail-any)) else caught-fail) in
                                                {1456}let v_247: bool = not-caught-fail(early_secret_19) in
                                                {1458}let m_23: bitstring = (if v_247 then zero else caught-fail) in
                                                {1459}let h_76: bitstring = (if v_247 then catch-fail(hash(@7_tls_h,m_23)) else caught-fail) in
                                                {1460}let v_248: bool = not-caught-fail(h_76) in
                                                {1457}let l_77: label = (if v_247 then tls13_ext_res_binder else caught-fail) in
                                                {1461}let x_85: bitstring = (if v_248 then (l_77,h_76) else caught-fail) in
                                                {1462}let binder_key_13: bitstring = (if v_247 then catch-fail((if v_248 then hmac(@7_tls_h,early_secret_19,x_85) else fail-any)) else caught-fail) in
                                                {1463}let v_249: bool = not-caught-fail(binder_key_13) in
                                                {1464}let v_250: bitstring = (if v_245 then catch-fail((if v_247 then (if v_249 then (early_secret_19,binder_key_13) else fail-any) else fail-any)) else caught-fail) in
                                                {1465}let v_251: bool = (not-caught-fail(v_250) && success?(1-proj-2-tuple(v_250))) in
                                                {1466}let kb_13: mac_key = (if v_251 then 2-proj-2-tuple(v_250) else caught-fail) in
                                                {1467}let es_18: bitstring = (if v_251 then 1-proj-2-tuple(v_250) else caught-fail) in
                                                {1468}let v_252: bitstring = (if not(v_245) then catch-fail(psk_data'_3) else caught-fail) in
                                                {1469}let v_253: bool = (not-caught-fail(v_252) && success?(1-proj-4-tuple(v_252))) in
                                                {1470}let is_safe_11: bool = (if v_253 then 4-proj-4-tuple(v_252) else caught-fail) in
                                                {1471}let es_19: bitstring = (if v_253 then 3-proj-4-tuple(v_252) else caught-fail) in
                                                {1472}let id_17: identityPsk = (if v_253 then 2-proj-4-tuple(v_252) else caught-fail) in
                                                {1473}let psk_33: preSharedKey = (if v_253 then 1-proj-4-tuple(v_252) else caught-fail) in
                                                {1474}let (psk_34: preSharedKey,early_secret_20: bitstring,valid_4: bool,safe_psk_9: bool) = (if v_245 then (if v_251 then (NoPsk,es_18,true,false) else fail-any) else (if v_253 then (psk_33,es_19,((psk_33 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_12)),is_safe_11) else fail-any)) in
                                                {1475}event Client_PSKChoosen(@7_id_client,psk_34,safe_psk_9);
                                                {1476}if valid_4 then
                                                (
                                                    {1479}new s_26[]: seed;
                                                    {1477}let gxy_9: element = catch-fail(dh_decap_fun(g_4,gy_5,x_84)) in
                                                    {1478}let v_254: bool = not-caught-fail(gxy_9) in
                                                    {1480}let gxy_10: element = (if v_254 then gxy_9 else dh_f(s_26)) in
                                                    {1481}event Client_DH_gxy(@7_id_client,gxy_10);
                                                    {1483}let m_24: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1484}let v_255: bool = not-caught-fail(m_24) in
                                                    {1485}let h_77: bitstring = (if v_255 then catch-fail(hash(@7_tls_h,m_24)) else caught-fail) in
                                                    {1486}let v_256: bool = not-caught-fail(h_77) in
                                                    {1482}let l_78: label = tls13_derived in
                                                    {1487}let x_86: bitstring = (if v_256 then (l_78,h_77) else caught-fail) in
                                                    {1488}let extra_13: bitstring = catch-fail((if v_255 then (if v_256 then hmac(@7_tls_h,early_secret_20,x_86) else fail-any) else fail-any)) in
                                                    {1489}let v_257: bool = not-caught-fail(extra_13) in
                                                    {1490}let handshake_secret_5: bitstring = (if v_257 then hmac(@7_tls_h,extra_13,gxy_10) else fail-any) in
                                                    {1492}let m_25: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1493}let v_258: bool = not-caught-fail(m_25) in
                                                    {1494}let h_78: bitstring = (if v_258 then catch-fail(hash(@7_tls_h,m_25)) else caught-fail) in
                                                    {1495}let v_259: bool = not-caught-fail(h_78) in
                                                    {1491}let l_79: label = tls13_derived in
                                                    {1496}let x_87: bitstring = (if v_259 then (l_79,h_78) else caught-fail) in
                                                    {1497}let extra_14: bitstring = catch-fail((if v_258 then (if v_259 then hmac(@7_tls_h,handshake_secret_5,x_87) else fail-any) else fail-any)) in
                                                    {1498}let v_260: bool = not-caught-fail(extra_14) in
                                                    {1499}let k_21: bitstring = (if v_260 then zero else caught-fail) in
                                                    {1500}let master_secret_17: bitstring = (if v_260 then catch-fail(hmac(@7_tls_h,handshake_secret_5,k_21)) else caught-fail) in
                                                    {1501}let v_261: bool = not-caught-fail(master_secret_17) in
                                                    {1434}let cur_log4_3: bitstring = (cur_log3_3,client_hello'_3) in
                                                    {1448}let cur_log2_14: bitstring = (cur_log4_3,server_hello'_3) in
                                                    {1503}let h_79: bitstring = (if v_261 then catch-fail(hash(@7_tls_h,cur_log2_14)) else caught-fail) in
                                                    {1504}let v_262: bool = not-caught-fail(h_79) in
                                                    {1502}let l_80: label = (if v_261 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {1505}let x_88: bitstring = (if v_262 then (l_80,h_79) else caught-fail) in
                                                    {1506}let client_hts_5: bitstring = (if v_261 then catch-fail((if v_262 then hmac(@7_tls_h,handshake_secret_5,x_88) else fail-any)) else caught-fail) in
                                                    {1507}let v_263: bool = not-caught-fail(client_hts_5) in
                                                    {1509}let h_80: bitstring = (if v_263 then catch-fail(hash(@7_tls_h,cur_log2_14)) else caught-fail) in
                                                    {1510}let v_264: bool = not-caught-fail(h_80) in
                                                    {1508}let l_81: label = (if v_263 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {1511}let x_89: bitstring = (if v_264 then (l_81,h_80) else caught-fail) in
                                                    {1512}let server_hts_5: bitstring = (if v_263 then catch-fail((if v_264 then hmac(@7_tls_h,handshake_secret_5,x_89) else fail-any)) else caught-fail) in
                                                    {1513}let v_265: bool = not-caught-fail(server_hts_5) in
                                                    {1515}let h_81: bitstring = (if v_265 then zero else caught-fail) in
                                                    {1514}let l_82: label = (if v_265 then tls13_key else caught-fail) in
                                                    {1516}let x_90: bitstring = (if v_265 then (l_82,h_81) else caught-fail) in
                                                    {1517}let client_wkh_5: bitstring = (if v_265 then catch-fail(hmac(@7_tls_h,client_hts_5,x_90)) else caught-fail) in
                                                    {1518}let v_266: bool = not-caught-fail(client_wkh_5) in
                                                    {1520}let h_82: bitstring = (if v_266 then zero else caught-fail) in
                                                    {1519}let l_83: label = (if v_266 then tls13_key else caught-fail) in
                                                    {1521}let x_91: bitstring = (if v_266 then (l_83,h_82) else caught-fail) in
                                                    {1522}let server_wkh_5: bitstring = (if v_266 then catch-fail(hmac(@7_tls_h,server_hts_5,x_91)) else caught-fail) in
                                                    {1523}let v_267: bool = not-caught-fail(server_wkh_5) in
                                                    {1525}let h_83: bitstring = (if v_267 then zero else caught-fail) in
                                                    {1524}let l_84: label = (if v_267 then tls13_finished else caught-fail) in
                                                    {1526}let x_92: bitstring = (if v_267 then (l_84,h_83) else caught-fail) in
                                                    {1527}let client_fk_5: bitstring = (if v_267 then catch-fail(hmac(@7_tls_h,client_hts_5,x_92)) else caught-fail) in
                                                    {1528}let v_268: bool = not-caught-fail(client_fk_5) in
                                                    {1530}let h_84: bitstring = (if v_268 then zero else caught-fail) in
                                                    {1529}let l_85: label = (if v_268 then tls13_finished else caught-fail) in
                                                    {1531}let x_93: bitstring = (if v_268 then (l_85,h_84) else caught-fail) in
                                                    {1532}let server_fk_5: bitstring = (if v_268 then catch-fail(hmac(@7_tls_h,server_hts_5,x_93)) else caught-fail) in
                                                    {1533}let v_269: bool = not-caught-fail(server_fk_5) in
                                                    {1534}let (master_secret_18: bitstring,chk_12: aead_key,shk_11: aead_key,cfin_12: mac_key,sfin_11: mac_key) = (if v_260 then (if v_261 then (if v_263 then (if v_265 then (if v_266 then (if v_267 then (if v_268 then (if v_269 then (master_secret_17,client_wkh_5,server_wkh_5,client_fk_5,server_fk_5) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {1535}event Client_chk(@7_id_client,chk_12);
                                                    {1536}event Client_shk(@7_id_client,shk_11);
                                                    {1537}event Client_cfin(@7_id_client,cfin_12);
                                                    {1538}event Client_sfin(@7_id_client,sfin_11);
                                                    {1539}in(io, enc_ee_msg_4: bitstring);
                                                    {1540}let ee_msg_5: msg = aead_dec(@7_tls_a,shk_11,0,zero,enc_ee_msg_4) in
                                                    {1541}let EE(ech_ee_4: echExt,extra_ee_4: extraExt) = ee_msg_5 in
                                                    {1542}let cur_log2_15: bitstring = (cur_log2_14,ee_msg_5) in
                                                    {1543}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_3,sr_14,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_34,safe_psk_9,@7_comp_psk,master_secret_18,chk_12,0,shk_11,1,cfin_12,sfin_11,cur_log2_15)))
                                                )
                                                else
                                                    {1544}out(io, illegal_parameter)
                                            )
                                            else
                                                {1545}out(io, illegal_parameter)
                                    )
                                    else
                                        {1546}out(io, unexpected_message)
                                )
                                else
                                    {1699}get pre_shared_keys(c_dom'_4: domain,=s_dom_12,=@7_tls_h,id_18: identityPsk,psk_35: preSharedKey,idP_6: idProc,is_safe_12: bool) in
                                    {1547}event Selected_one_time_used_psk(@7_id_client,psk_35,is_safe_12);
                                    {1548}event Selected_psk(c_dom_5,c_dom'_4,idP_6,is_safe_12);
                                    {1549}event Selected_psk_no_missmatch(@7_id_client,s_dom_12,@7_tls_h,psk_35,id_18);
                                    {1550}event Selected_psk_with_ID(c_dom_5,c_dom'_4,id_18,idP_6,is_safe_12);
                                    {1551}let v_270: bitstring = (id_18,psk_35,is_safe_12) in
                                    {1552}let v_271: bool = success?(1-proj-3-tuple(v_270)) in
                                    {1553}let is_safe_13: bool = (if v_271 then 3-proj-3-tuple(v_270) else caught-fail) in
                                    {1554}let psk_36: preSharedKey = (if v_271 then 2-proj-3-tuple(v_270) else caught-fail) in
                                    {1555}let id_19: identityPsk = (if v_271 then 1-proj-3-tuple(v_270) else caught-fail) in
                                    {1559}let k_22: bitstring = (if v_271 then catch-fail(psk2b(psk_36)) else caught-fail) in
                                    {1560}let v_272: bool = not-caught-fail(k_22) in
                                    {1558}let s_27: bitstring = (if v_271 then zero else caught-fail) in
                                    {1561}let early_secret_21: bitstring = (if v_271 then catch-fail((if v_272 then hmac(@7_tls_h,s_27,k_22) else fail-any)) else caught-fail) in
                                    {1562}let v_273: bool = not-caught-fail(early_secret_21) in
                                    {1564}let m_26: bitstring = (if v_273 then zero else caught-fail) in
                                    {1565}let h_85: bitstring = (if v_273 then catch-fail(hash(@7_tls_h,m_26)) else caught-fail) in
                                    {1566}let v_274: bool = not-caught-fail(h_85) in
                                    {1563}let l_86: label = (if v_273 then tls13_ext_res_binder else caught-fail) in
                                    {1567}let x_94: bitstring = (if v_274 then (l_86,h_85) else caught-fail) in
                                    {1568}let binder_key_14: bitstring = (if v_273 then catch-fail((if v_274 then hmac(@7_tls_h,early_secret_21,x_94) else fail-any)) else caught-fail) in
                                    {1569}let v_275: bool = not-caught-fail(binder_key_14) in
                                    {1570}let v_276: bitstring = (if v_271 then catch-fail((if v_273 then (if v_275 then (early_secret_21,binder_key_14) else fail-any) else fail-any)) else caught-fail) in
                                    {1571}let v_277: bool = (not-caught-fail(v_276) && success?(1-proj-2-tuple(v_276))) in
                                    {1572}let kb_14: mac_key = (if v_277 then 2-proj-2-tuple(v_276) else caught-fail) in
                                    {1573}let es_20: bitstring = (if v_277 then 1-proj-2-tuple(v_276) else caught-fail) in
                                    {1556}let offer_13: params = (if v_271 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_12),ech_ext_4,extra_12,trunc_client_psk_ext(id_19)) else caught-fail) in
                                    {1557}let cur_log'_7: bitstring = (if v_271 then (cur_log3_3,CH(cr_13,offer_13)) else caught-fail) in
                                    {1574}let binders_6: bitstring = (if v_277 then catch-fail(hmac(@7_tls_h,kb_14,cur_log'_7)) else caught-fail) in
                                    {1575}let v_278: bool = not-caught-fail(binders_6) in
                                    {1576}let v_279: bitstring = catch-fail((if v_271 then (if v_277 then (if v_278 then (client_psk_ext(id_19,binders_6),(psk_36,id_19,es_20,is_safe_13)) else fail-any) else fail-any) else fail-any)) in
                                    {1577}let v_280: bool = (not-caught-fail(v_279) && success?(1-proj-2-tuple(v_279))) in
                                    {1578}let psk_data_8: bitstring = (if v_280 then 2-proj-2-tuple(v_279) else caught-fail) in
                                    {1579}let psk_ext_13: preSharedKeyExt = (if v_280 then 1-proj-2-tuple(v_279) else caught-fail) in
                                    {1580}let offer_14: params = (if v_280 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_13) else caught-fail) in
                                    {1581}let (client_hello'_4: msg,cr'_4: bytes32,kex_data'_4: bitstring,psk_data'_4: bitstring) = (if v_280 then (CH(cr_13,offer_14),cr_13,kex_data_4,psk_data_8) else fail-any) in
                                    {1582}event ClientOffersAead(cr'_4,@7_tls_a);
                                    {1583}event ClientOffersHash(cr'_4,@7_tls_h);
                                    {1584}event ClientOffersGroup(cr'_4,@7_tls_g);
                                    {1585}out(io, client_hello'_4);
                                    {1587}in(io, server_hello'_4: msg);
                                    {1588}let SH(sr'_4: bytes32,mode'_4: params) = server_hello'_4 in
                                    (
                                        {1589}if (sr'_4 = B32(HRR24,HRR8)) then
                                            {1590}out(io, unexpected_message)
                                        else
                                            {1591}let (x_95: bitstring,g_5: group) = kex_data'_4 in
                                            {1592}let (psk_offer_5: preSharedKey,id_offer_5: identityPsk,es_offer_5: bitstring,is_safe_offer_5: bool) = psk_data'_4 in
                                            {1593}event Client_PSKOffer(@7_id_client,psk_offer_5,id_offer_5,is_safe_offer_5);
                                            {1594}event Client_Rand_client(@7_id_client,cr'_4);
                                            {1595}event Client_DH_client(@7_id_client,dh_pub(g_5,x_95));
                                            {1596}event Client_server_domain(@7_id_client,s_dom_12);
                                            {1597}let SH(sr_15: bytes32,mode_7: params) = server_hello'_4 in
                                            {1598}event Client_Rand_server(@7_id_client,sr_15);
                                            {1599}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_5,gy_6: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_14: preSharedKeyExt) = mode_7 in
                                            (
                                                {1601}event Client_DH_server(@7_id_client,gy_6);
                                                {1602}let v_281: bool = (psk_ext_14 = empty_psk_ext) in
                                                {1603}let psk_37: preSharedKey = (if v_281 then NoPsk else caught-fail) in
                                                {1605}let k_23: bitstring = (if v_281 then catch-fail(psk2b(psk_37)) else caught-fail) in
                                                {1606}let v_282: bool = not-caught-fail(k_23) in
                                                {1604}let s_28: bitstring = (if v_281 then zero else caught-fail) in
                                                {1607}let early_secret_22: bitstring = (if v_281 then catch-fail((if v_282 then hmac(@7_tls_h,s_28,k_23) else fail-any)) else caught-fail) in
                                                {1608}let v_283: bool = not-caught-fail(early_secret_22) in
                                                {1610}let m_27: bitstring = (if v_283 then zero else caught-fail) in
                                                {1611}let h_86: bitstring = (if v_283 then catch-fail(hash(@7_tls_h,m_27)) else caught-fail) in
                                                {1612}let v_284: bool = not-caught-fail(h_86) in
                                                {1609}let l_87: label = (if v_283 then tls13_ext_res_binder else caught-fail) in
                                                {1613}let x_96: bitstring = (if v_284 then (l_87,h_86) else caught-fail) in
                                                {1614}let binder_key_15: bitstring = (if v_283 then catch-fail((if v_284 then hmac(@7_tls_h,early_secret_22,x_96) else fail-any)) else caught-fail) in
                                                {1615}let v_285: bool = not-caught-fail(binder_key_15) in
                                                {1616}let v_286: bitstring = (if v_281 then catch-fail((if v_283 then (if v_285 then (early_secret_22,binder_key_15) else fail-any) else fail-any)) else caught-fail) in
                                                {1617}let v_287: bool = (not-caught-fail(v_286) && success?(1-proj-2-tuple(v_286))) in
                                                {1618}let kb_15: mac_key = (if v_287 then 2-proj-2-tuple(v_286) else caught-fail) in
                                                {1619}let es_21: bitstring = (if v_287 then 1-proj-2-tuple(v_286) else caught-fail) in
                                                {1620}let v_288: bitstring = (if not(v_281) then catch-fail(psk_data'_4) else caught-fail) in
                                                {1621}let v_289: bool = (not-caught-fail(v_288) && success?(1-proj-4-tuple(v_288))) in
                                                {1622}let is_safe_14: bool = (if v_289 then 4-proj-4-tuple(v_288) else caught-fail) in
                                                {1623}let es_22: bitstring = (if v_289 then 3-proj-4-tuple(v_288) else caught-fail) in
                                                {1624}let id_20: identityPsk = (if v_289 then 2-proj-4-tuple(v_288) else caught-fail) in
                                                {1625}let psk_38: preSharedKey = (if v_289 then 1-proj-4-tuple(v_288) else caught-fail) in
                                                {1626}let (psk_39: preSharedKey,early_secret_23: bitstring,valid_5: bool,safe_psk_10: bool) = (if v_281 then (if v_287 then (NoPsk,es_21,true,false) else fail-any) else (if v_289 then (psk_38,es_22,((psk_38 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_14)),is_safe_14) else fail-any)) in
                                                {1627}event Client_PSKChoosen(@7_id_client,psk_39,safe_psk_10);
                                                {1628}if valid_5 then
                                                (
                                                    {1631}new s_29[]: seed;
                                                    {1629}let gxy_11: element = catch-fail(dh_decap_fun(g_5,gy_6,x_95)) in
                                                    {1630}let v_290: bool = not-caught-fail(gxy_11) in
                                                    {1632}let gxy_12: element = (if v_290 then gxy_11 else dh_f(s_29)) in
                                                    {1633}event Client_DH_gxy(@7_id_client,gxy_12);
                                                    {1635}let m_28: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1636}let v_291: bool = not-caught-fail(m_28) in
                                                    {1637}let h_87: bitstring = (if v_291 then catch-fail(hash(@7_tls_h,m_28)) else caught-fail) in
                                                    {1638}let v_292: bool = not-caught-fail(h_87) in
                                                    {1634}let l_88: label = tls13_derived in
                                                    {1639}let x_97: bitstring = (if v_292 then (l_88,h_87) else caught-fail) in
                                                    {1640}let extra_15: bitstring = catch-fail((if v_291 then (if v_292 then hmac(@7_tls_h,early_secret_23,x_97) else fail-any) else fail-any)) in
                                                    {1641}let v_293: bool = not-caught-fail(extra_15) in
                                                    {1642}let handshake_secret_6: bitstring = (if v_293 then hmac(@7_tls_h,extra_15,gxy_12) else fail-any) in
                                                    {1644}let m_29: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1645}let v_294: bool = not-caught-fail(m_29) in
                                                    {1646}let h_88: bitstring = (if v_294 then catch-fail(hash(@7_tls_h,m_29)) else caught-fail) in
                                                    {1647}let v_295: bool = not-caught-fail(h_88) in
                                                    {1643}let l_89: label = tls13_derived in
                                                    {1648}let x_98: bitstring = (if v_295 then (l_89,h_88) else caught-fail) in
                                                    {1649}let extra_16: bitstring = catch-fail((if v_294 then (if v_295 then hmac(@7_tls_h,handshake_secret_6,x_98) else fail-any) else fail-any)) in
                                                    {1650}let v_296: bool = not-caught-fail(extra_16) in
                                                    {1651}let k_24: bitstring = (if v_296 then zero else caught-fail) in
                                                    {1652}let master_secret_19: bitstring = (if v_296 then catch-fail(hmac(@7_tls_h,handshake_secret_6,k_24)) else caught-fail) in
                                                    {1653}let v_297: bool = not-caught-fail(master_secret_19) in
                                                    {1586}let cur_log4_4: bitstring = (cur_log3_3,client_hello'_4) in
                                                    {1600}let cur_log2_16: bitstring = (cur_log4_4,server_hello'_4) in
                                                    {1655}let h_89: bitstring = (if v_297 then catch-fail(hash(@7_tls_h,cur_log2_16)) else caught-fail) in
                                                    {1656}let v_298: bool = not-caught-fail(h_89) in
                                                    {1654}let l_90: label = (if v_297 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {1657}let x_99: bitstring = (if v_298 then (l_90,h_89) else caught-fail) in
                                                    {1658}let client_hts_6: bitstring = (if v_297 then catch-fail((if v_298 then hmac(@7_tls_h,handshake_secret_6,x_99) else fail-any)) else caught-fail) in
                                                    {1659}let v_299: bool = not-caught-fail(client_hts_6) in
                                                    {1661}let h_90: bitstring = (if v_299 then catch-fail(hash(@7_tls_h,cur_log2_16)) else caught-fail) in
                                                    {1662}let v_300: bool = not-caught-fail(h_90) in
                                                    {1660}let l_91: label = (if v_299 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {1663}let x_100: bitstring = (if v_300 then (l_91,h_90) else caught-fail) in
                                                    {1664}let server_hts_6: bitstring = (if v_299 then catch-fail((if v_300 then hmac(@7_tls_h,handshake_secret_6,x_100) else fail-any)) else caught-fail) in
                                                    {1665}let v_301: bool = not-caught-fail(server_hts_6) in
                                                    {1667}let h_91: bitstring = (if v_301 then zero else caught-fail) in
                                                    {1666}let l_92: label = (if v_301 then tls13_key else caught-fail) in
                                                    {1668}let x_101: bitstring = (if v_301 then (l_92,h_91) else caught-fail) in
                                                    {1669}let client_wkh_6: bitstring = (if v_301 then catch-fail(hmac(@7_tls_h,client_hts_6,x_101)) else caught-fail) in
                                                    {1670}let v_302: bool = not-caught-fail(client_wkh_6) in
                                                    {1672}let h_92: bitstring = (if v_302 then zero else caught-fail) in
                                                    {1671}let l_93: label = (if v_302 then tls13_key else caught-fail) in
                                                    {1673}let x_102: bitstring = (if v_302 then (l_93,h_92) else caught-fail) in
                                                    {1674}let server_wkh_6: bitstring = (if v_302 then catch-fail(hmac(@7_tls_h,server_hts_6,x_102)) else caught-fail) in
                                                    {1675}let v_303: bool = not-caught-fail(server_wkh_6) in
                                                    {1677}let h_93: bitstring = (if v_303 then zero else caught-fail) in
                                                    {1676}let l_94: label = (if v_303 then tls13_finished else caught-fail) in
                                                    {1678}let x_103: bitstring = (if v_303 then (l_94,h_93) else caught-fail) in
                                                    {1679}let client_fk_6: bitstring = (if v_303 then catch-fail(hmac(@7_tls_h,client_hts_6,x_103)) else caught-fail) in
                                                    {1680}let v_304: bool = not-caught-fail(client_fk_6) in
                                                    {1682}let h_94: bitstring = (if v_304 then zero else caught-fail) in
                                                    {1681}let l_95: label = (if v_304 then tls13_finished else caught-fail) in
                                                    {1683}let x_104: bitstring = (if v_304 then (l_95,h_94) else caught-fail) in
                                                    {1684}let server_fk_6: bitstring = (if v_304 then catch-fail(hmac(@7_tls_h,server_hts_6,x_104)) else caught-fail) in
                                                    {1685}let v_305: bool = not-caught-fail(server_fk_6) in
                                                    {1686}let (master_secret_20: bitstring,chk_13: aead_key,shk_12: aead_key,cfin_13: mac_key,sfin_12: mac_key) = (if v_296 then (if v_297 then (if v_299 then (if v_301 then (if v_302 then (if v_303 then (if v_304 then (if v_305 then (master_secret_19,client_wkh_6,server_wkh_6,client_fk_6,server_fk_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {1687}event Client_chk(@7_id_client,chk_13);
                                                    {1688}event Client_shk(@7_id_client,shk_12);
                                                    {1689}event Client_cfin(@7_id_client,cfin_13);
                                                    {1690}event Client_sfin(@7_id_client,sfin_12);
                                                    {1691}in(io, enc_ee_msg_5: bitstring);
                                                    {1692}let ee_msg_6: msg = aead_dec(@7_tls_a,shk_12,0,zero,enc_ee_msg_5) in
                                                    {1693}let EE(ech_ee_5: echExt,extra_ee_5: extraExt) = ee_msg_6 in
                                                    {1694}let cur_log2_17: bitstring = (cur_log2_16,ee_msg_6) in
                                                    {1695}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_4,sr_15,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_39,safe_psk_10,@7_comp_psk,master_secret_20,chk_13,0,shk_12,1,cfin_13,sfin_12,cur_log2_17)))
                                                )
                                                else
                                                    {1696}out(io, illegal_parameter)
                                            )
                                            else
                                                {1697}out(io, illegal_parameter)
                                    )
                                    else
                                        {1698}out(io, unexpected_message)
                            )
                            else
                                {1700}let psk_40: preSharedKey = NoPsk in
                                {1702}let k_25: bitstring = catch-fail(psk2b(psk_40)) in
                                {1703}let v_306: bool = not-caught-fail(k_25) in
                                {1701}let s_30: bitstring = zero in
                                {1704}let early_secret_24: bitstring = catch-fail((if v_306 then hmac(@7_tls_h,s_30,k_25) else fail-any)) in
                                {1705}let v_307: bool = not-caught-fail(early_secret_24) in
                                {1707}let m_30: bitstring = (if v_307 then zero else caught-fail) in
                                {1708}let h_95: bitstring = (if v_307 then catch-fail(hash(@7_tls_h,m_30)) else caught-fail) in
                                {1709}let v_308: bool = not-caught-fail(h_95) in
                                {1706}let l_96: label = (if v_307 then tls13_ext_res_binder else caught-fail) in
                                {1710}let x_105: bitstring = (if v_308 then (l_96,h_95) else caught-fail) in
                                {1711}let binder_key_16: bitstring = (if v_307 then catch-fail((if v_308 then hmac(@7_tls_h,early_secret_24,x_105) else fail-any)) else caught-fail) in
                                {1712}let v_309: bool = not-caught-fail(binder_key_16) in
                                {1713}let v_310: bitstring = catch-fail((if v_307 then (if v_309 then (early_secret_24,binder_key_16) else fail-any) else fail-any)) in
                                {1714}let v_311: bool = (not-caught-fail(v_310) && success?(1-proj-2-tuple(v_310))) in
                                {1715}let kb_16: mac_key = (if v_311 then 2-proj-2-tuple(v_310) else caught-fail) in
                                {1716}let es_23: bitstring = (if v_311 then 1-proj-2-tuple(v_310) else caught-fail) in
                                {1717}let v_312: bitstring = catch-fail((if v_311 then (empty_psk_ext,(NoPsk,zero,es_23,false)) else fail-any)) in
                                {1718}let v_313: bool = (not-caught-fail(v_312) && success?(1-proj-2-tuple(v_312))) in
                                {1719}let psk_data_9: bitstring = (if v_313 then 2-proj-2-tuple(v_312) else caught-fail) in
                                {1720}let psk_ext_15: preSharedKeyExt = (if v_313 then 1-proj-2-tuple(v_312) else caught-fail) in
                                {1721}let offer_15: params = (if v_313 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_15) else caught-fail) in
                                {1722}let (client_hello'_5: msg,cr'_5: bytes32,kex_data'_5: bitstring,psk_data'_5: bitstring) = (if v_313 then (CH(cr_13,offer_15),cr_13,kex_data_4,psk_data_9) else fail-any) in
                                {1723}event ClientOffersAead(cr'_5,@7_tls_a);
                                {1724}event ClientOffersHash(cr'_5,@7_tls_h);
                                {1725}event ClientOffersGroup(cr'_5,@7_tls_g);
                                {1726}out(io, client_hello'_5);
                                {1728}in(io, server_hello'_5: msg);
                                {1729}let SH(sr'_5: bytes32,mode'_5: params) = server_hello'_5 in
                                (
                                    {1730}if (sr'_5 = B32(HRR24,HRR8)) then
                                        {1731}out(io, unexpected_message)
                                    else
                                        {1732}let (x_106: bitstring,g_6: group) = kex_data'_5 in
                                        {1733}let (psk_offer_6: preSharedKey,id_offer_6: identityPsk,es_offer_6: bitstring,is_safe_offer_6: bool) = psk_data'_5 in
                                        {1734}event Client_PSKOffer(@7_id_client,psk_offer_6,id_offer_6,is_safe_offer_6);
                                        {1735}event Client_Rand_client(@7_id_client,cr'_5);
                                        {1736}event Client_DH_client(@7_id_client,dh_pub(g_6,x_106));
                                        {1737}event Client_server_domain(@7_id_client,s_dom_12);
                                        {1738}let SH(sr_16: bytes32,mode_8: params) = server_hello'_5 in
                                        {1739}event Client_Rand_server(@7_id_client,sr_16);
                                        {1740}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_6,gy_7: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_16: preSharedKeyExt) = mode_8 in
                                        (
                                            {1742}event Client_DH_server(@7_id_client,gy_7);
                                            {1743}let v_314: bool = (psk_ext_16 = empty_psk_ext) in
                                            {1744}let psk_41: preSharedKey = (if v_314 then NoPsk else caught-fail) in
                                            {1746}let k_26: bitstring = (if v_314 then catch-fail(psk2b(psk_41)) else caught-fail) in
                                            {1747}let v_315: bool = not-caught-fail(k_26) in
                                            {1745}let s_31: bitstring = (if v_314 then zero else caught-fail) in
                                            {1748}let early_secret_25: bitstring = (if v_314 then catch-fail((if v_315 then hmac(@7_tls_h,s_31,k_26) else fail-any)) else caught-fail) in
                                            {1749}let v_316: bool = not-caught-fail(early_secret_25) in
                                            {1751}let m_31: bitstring = (if v_316 then zero else caught-fail) in
                                            {1752}let h_96: bitstring = (if v_316 then catch-fail(hash(@7_tls_h,m_31)) else caught-fail) in
                                            {1753}let v_317: bool = not-caught-fail(h_96) in
                                            {1750}let l_97: label = (if v_316 then tls13_ext_res_binder else caught-fail) in
                                            {1754}let x_107: bitstring = (if v_317 then (l_97,h_96) else caught-fail) in
                                            {1755}let binder_key_17: bitstring = (if v_316 then catch-fail((if v_317 then hmac(@7_tls_h,early_secret_25,x_107) else fail-any)) else caught-fail) in
                                            {1756}let v_318: bool = not-caught-fail(binder_key_17) in
                                            {1757}let v_319: bitstring = (if v_314 then catch-fail((if v_316 then (if v_318 then (early_secret_25,binder_key_17) else fail-any) else fail-any)) else caught-fail) in
                                            {1758}let v_320: bool = (not-caught-fail(v_319) && success?(1-proj-2-tuple(v_319))) in
                                            {1759}let kb_17: mac_key = (if v_320 then 2-proj-2-tuple(v_319) else caught-fail) in
                                            {1760}let es_24: bitstring = (if v_320 then 1-proj-2-tuple(v_319) else caught-fail) in
                                            {1761}let v_321: bitstring = (if not(v_314) then catch-fail(psk_data'_5) else caught-fail) in
                                            {1762}let v_322: bool = (not-caught-fail(v_321) && success?(1-proj-4-tuple(v_321))) in
                                            {1763}let is_safe_15: bool = (if v_322 then 4-proj-4-tuple(v_321) else caught-fail) in
                                            {1764}let es_25: bitstring = (if v_322 then 3-proj-4-tuple(v_321) else caught-fail) in
                                            {1765}let id_21: identityPsk = (if v_322 then 2-proj-4-tuple(v_321) else caught-fail) in
                                            {1766}let psk_42: preSharedKey = (if v_322 then 1-proj-4-tuple(v_321) else caught-fail) in
                                            {1767}let (psk_43: preSharedKey,early_secret_26: bitstring,valid_6: bool,safe_psk_11: bool) = (if v_314 then (if v_320 then (NoPsk,es_24,true,false) else fail-any) else (if v_322 then (psk_42,es_25,((psk_42 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_16)),is_safe_15) else fail-any)) in
                                            {1768}event Client_PSKChoosen(@7_id_client,psk_43,safe_psk_11);
                                            {1769}if valid_6 then
                                            (
                                                {1772}new s_32[]: seed;
                                                {1770}let gxy_13: element = catch-fail(dh_decap_fun(g_6,gy_7,x_106)) in
                                                {1771}let v_323: bool = not-caught-fail(gxy_13) in
                                                {1773}let gxy_14: element = (if v_323 then gxy_13 else dh_f(s_32)) in
                                                {1774}event Client_DH_gxy(@7_id_client,gxy_14);
                                                {1776}let m_32: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1777}let v_324: bool = not-caught-fail(m_32) in
                                                {1778}let h_97: bitstring = (if v_324 then catch-fail(hash(@7_tls_h,m_32)) else caught-fail) in
                                                {1779}let v_325: bool = not-caught-fail(h_97) in
                                                {1775}let l_98: label = tls13_derived in
                                                {1780}let x_108: bitstring = (if v_325 then (l_98,h_97) else caught-fail) in
                                                {1781}let extra_17: bitstring = catch-fail((if v_324 then (if v_325 then hmac(@7_tls_h,early_secret_26,x_108) else fail-any) else fail-any)) in
                                                {1782}let v_326: bool = not-caught-fail(extra_17) in
                                                {1783}let handshake_secret_7: bitstring = (if v_326 then hmac(@7_tls_h,extra_17,gxy_14) else fail-any) in
                                                {1785}let m_33: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1786}let v_327: bool = not-caught-fail(m_33) in
                                                {1787}let h_98: bitstring = (if v_327 then catch-fail(hash(@7_tls_h,m_33)) else caught-fail) in
                                                {1788}let v_328: bool = not-caught-fail(h_98) in
                                                {1784}let l_99: label = tls13_derived in
                                                {1789}let x_109: bitstring = (if v_328 then (l_99,h_98) else caught-fail) in
                                                {1790}let extra_18: bitstring = catch-fail((if v_327 then (if v_328 then hmac(@7_tls_h,handshake_secret_7,x_109) else fail-any) else fail-any)) in
                                                {1791}let v_329: bool = not-caught-fail(extra_18) in
                                                {1792}let k_27: bitstring = (if v_329 then zero else caught-fail) in
                                                {1793}let master_secret_21: bitstring = (if v_329 then catch-fail(hmac(@7_tls_h,handshake_secret_7,k_27)) else caught-fail) in
                                                {1794}let v_330: bool = not-caught-fail(master_secret_21) in
                                                {1727}let cur_log4_5: bitstring = (cur_log3_3,client_hello'_5) in
                                                {1741}let cur_log2_18: bitstring = (cur_log4_5,server_hello'_5) in
                                                {1796}let h_99: bitstring = (if v_330 then catch-fail(hash(@7_tls_h,cur_log2_18)) else caught-fail) in
                                                {1797}let v_331: bool = not-caught-fail(h_99) in
                                                {1795}let l_100: label = (if v_330 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {1798}let x_110: bitstring = (if v_331 then (l_100,h_99) else caught-fail) in
                                                {1799}let client_hts_7: bitstring = (if v_330 then catch-fail((if v_331 then hmac(@7_tls_h,handshake_secret_7,x_110) else fail-any)) else caught-fail) in
                                                {1800}let v_332: bool = not-caught-fail(client_hts_7) in
                                                {1802}let h_100: bitstring = (if v_332 then catch-fail(hash(@7_tls_h,cur_log2_18)) else caught-fail) in
                                                {1803}let v_333: bool = not-caught-fail(h_100) in
                                                {1801}let l_101: label = (if v_332 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {1804}let x_111: bitstring = (if v_333 then (l_101,h_100) else caught-fail) in
                                                {1805}let server_hts_7: bitstring = (if v_332 then catch-fail((if v_333 then hmac(@7_tls_h,handshake_secret_7,x_111) else fail-any)) else caught-fail) in
                                                {1806}let v_334: bool = not-caught-fail(server_hts_7) in
                                                {1808}let h_101: bitstring = (if v_334 then zero else caught-fail) in
                                                {1807}let l_102: label = (if v_334 then tls13_key else caught-fail) in
                                                {1809}let x_112: bitstring = (if v_334 then (l_102,h_101) else caught-fail) in
                                                {1810}let client_wkh_7: bitstring = (if v_334 then catch-fail(hmac(@7_tls_h,client_hts_7,x_112)) else caught-fail) in
                                                {1811}let v_335: bool = not-caught-fail(client_wkh_7) in
                                                {1813}let h_102: bitstring = (if v_335 then zero else caught-fail) in
                                                {1812}let l_103: label = (if v_335 then tls13_key else caught-fail) in
                                                {1814}let x_113: bitstring = (if v_335 then (l_103,h_102) else caught-fail) in
                                                {1815}let server_wkh_7: bitstring = (if v_335 then catch-fail(hmac(@7_tls_h,server_hts_7,x_113)) else caught-fail) in
                                                {1816}let v_336: bool = not-caught-fail(server_wkh_7) in
                                                {1818}let h_103: bitstring = (if v_336 then zero else caught-fail) in
                                                {1817}let l_104: label = (if v_336 then tls13_finished else caught-fail) in
                                                {1819}let x_114: bitstring = (if v_336 then (l_104,h_103) else caught-fail) in
                                                {1820}let client_fk_7: bitstring = (if v_336 then catch-fail(hmac(@7_tls_h,client_hts_7,x_114)) else caught-fail) in
                                                {1821}let v_337: bool = not-caught-fail(client_fk_7) in
                                                {1823}let h_104: bitstring = (if v_337 then zero else caught-fail) in
                                                {1822}let l_105: label = (if v_337 then tls13_finished else caught-fail) in
                                                {1824}let x_115: bitstring = (if v_337 then (l_105,h_104) else caught-fail) in
                                                {1825}let server_fk_7: bitstring = (if v_337 then catch-fail(hmac(@7_tls_h,server_hts_7,x_115)) else caught-fail) in
                                                {1826}let v_338: bool = not-caught-fail(server_fk_7) in
                                                {1827}let (master_secret_22: bitstring,chk_14: aead_key,shk_13: aead_key,cfin_14: mac_key,sfin_13: mac_key) = (if v_329 then (if v_330 then (if v_332 then (if v_334 then (if v_335 then (if v_336 then (if v_337 then (if v_338 then (master_secret_21,client_wkh_7,server_wkh_7,client_fk_7,server_fk_7) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {1828}event Client_chk(@7_id_client,chk_14);
                                                {1829}event Client_shk(@7_id_client,shk_13);
                                                {1830}event Client_cfin(@7_id_client,cfin_14);
                                                {1831}event Client_sfin(@7_id_client,sfin_13);
                                                {1832}in(io, enc_ee_msg_6: bitstring);
                                                {1833}let ee_msg_7: msg = aead_dec(@7_tls_a,shk_13,0,zero,enc_ee_msg_6) in
                                                {1834}let EE(ech_ee_6: echExt,extra_ee_6: extraExt) = ee_msg_7 in
                                                {1835}let cur_log2_19: bitstring = (cur_log2_18,ee_msg_7) in
                                                {1836}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_5,sr_16,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_43,safe_psk_11,@7_comp_psk,master_secret_22,chk_14,0,shk_13,1,cfin_14,sfin_13,cur_log2_19)))
                                            )
                                            else
                                                {1837}out(io, illegal_parameter)
                                        )
                                        else
                                            {1838}out(io, illegal_parameter)
                                )
                                else
                                    {1839}out(io, unexpected_message)
                        )
                        else
                            {1840}out(io, illegal_parameter)
                    )
                    else
                        {1841}if send_kex then
                        (
                            {1842}let (x_116: bitstring,g_7: group) = kex_data_3 in
                            {1843}let (psk_offer_7: preSharedKey,id_offer_7: identityPsk,es_offer_7: bitstring,is_safe_offer_7: bool) = psk_data_6 in
                            {1844}event Client_PSKOffer(@7_id_client,psk_offer_7,id_offer_7,is_safe_offer_7);
                            {1845}event Client_Rand_client(@7_id_client,cr_12);
                            {1846}event Client_DH_client(@7_id_client,dh_pub(g_7,x_116));
                            {1847}event Client_server_domain(@7_id_client,s_dom_12);
                            {1848}let SH(sr_17: bytes32,mode_9: params) = server_hello_2 in
                            {1849}event Client_Rand_server(@7_id_client,sr_17);
                            {1850}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_7,gy_8: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_17: preSharedKeyExt) = mode_9 in
                            (
                                {1852}event Client_DH_server(@7_id_client,gy_8);
                                {1853}let v_339: bool = (psk_ext_17 = empty_psk_ext) in
                                {1854}let psk_44: preSharedKey = (if v_339 then NoPsk else caught-fail) in
                                {1856}let k_28: bitstring = (if v_339 then catch-fail(psk2b(psk_44)) else caught-fail) in
                                {1857}let v_340: bool = not-caught-fail(k_28) in
                                {1855}let s_33: bitstring = (if v_339 then zero else caught-fail) in
                                {1858}let early_secret_27: bitstring = (if v_339 then catch-fail((if v_340 then hmac(@7_tls_h,s_33,k_28) else fail-any)) else caught-fail) in
                                {1859}let v_341: bool = not-caught-fail(early_secret_27) in
                                {1861}let m_34: bitstring = (if v_341 then zero else caught-fail) in
                                {1862}let h_105: bitstring = (if v_341 then catch-fail(hash(@7_tls_h,m_34)) else caught-fail) in
                                {1863}let v_342: bool = not-caught-fail(h_105) in
                                {1860}let l_106: label = (if v_341 then tls13_ext_res_binder else caught-fail) in
                                {1864}let x_117: bitstring = (if v_342 then (l_106,h_105) else caught-fail) in
                                {1865}let binder_key_18: bitstring = (if v_341 then catch-fail((if v_342 then hmac(@7_tls_h,early_secret_27,x_117) else fail-any)) else caught-fail) in
                                {1866}let v_343: bool = not-caught-fail(binder_key_18) in
                                {1867}let v_344: bitstring = (if v_339 then catch-fail((if v_341 then (if v_343 then (early_secret_27,binder_key_18) else fail-any) else fail-any)) else caught-fail) in
                                {1868}let v_345: bool = (not-caught-fail(v_344) && success?(1-proj-2-tuple(v_344))) in
                                {1869}let kb_18: mac_key = (if v_345 then 2-proj-2-tuple(v_344) else caught-fail) in
                                {1870}let es_26: bitstring = (if v_345 then 1-proj-2-tuple(v_344) else caught-fail) in
                                {1871}let v_346: bitstring = (if not(v_339) then catch-fail(psk_data_6) else caught-fail) in
                                {1872}let v_347: bool = (not-caught-fail(v_346) && success?(1-proj-4-tuple(v_346))) in
                                {1873}let is_safe_16: bool = (if v_347 then 4-proj-4-tuple(v_346) else caught-fail) in
                                {1874}let es_27: bitstring = (if v_347 then 3-proj-4-tuple(v_346) else caught-fail) in
                                {1875}let id_22: identityPsk = (if v_347 then 2-proj-4-tuple(v_346) else caught-fail) in
                                {1876}let psk_45: preSharedKey = (if v_347 then 1-proj-4-tuple(v_346) else caught-fail) in
                                {1877}let (psk_46: preSharedKey,early_secret_28: bitstring,valid_7: bool,safe_psk_12: bool) = (if v_339 then (if v_345 then (NoPsk,es_26,true,false) else fail-any) else (if v_347 then (psk_45,es_27,((psk_45 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_17)),is_safe_16) else fail-any)) in
                                {1878}event Client_PSKChoosen(@7_id_client,psk_46,safe_psk_12);
                                {1879}if valid_7 then
                                (
                                    {1882}new s_34[]: seed;
                                    {1880}let gxy_15: element = catch-fail(dh_decap_fun(g_7,gy_8,x_116)) in
                                    {1881}let v_348: bool = not-caught-fail(gxy_15) in
                                    {1883}let gxy_16: element = (if v_348 then gxy_15 else dh_f(s_34)) in
                                    {1884}event Client_DH_gxy(@7_id_client,gxy_16);
                                    {1886}let m_35: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1887}let v_349: bool = not-caught-fail(m_35) in
                                    {1888}let h_106: bitstring = (if v_349 then catch-fail(hash(@7_tls_h,m_35)) else caught-fail) in
                                    {1889}let v_350: bool = not-caught-fail(h_106) in
                                    {1885}let l_107: label = tls13_derived in
                                    {1890}let x_118: bitstring = (if v_350 then (l_107,h_106) else caught-fail) in
                                    {1891}let extra_19: bitstring = catch-fail((if v_349 then (if v_350 then hmac(@7_tls_h,early_secret_28,x_118) else fail-any) else fail-any)) in
                                    {1892}let v_351: bool = not-caught-fail(extra_19) in
                                    {1893}let handshake_secret_8: bitstring = (if v_351 then hmac(@7_tls_h,extra_19,gxy_16) else fail-any) in
                                    {1895}let m_36: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1896}let v_352: bool = not-caught-fail(m_36) in
                                    {1897}let h_107: bitstring = (if v_352 then catch-fail(hash(@7_tls_h,m_36)) else caught-fail) in
                                    {1898}let v_353: bool = not-caught-fail(h_107) in
                                    {1894}let l_108: label = tls13_derived in
                                    {1899}let x_119: bitstring = (if v_353 then (l_108,h_107) else caught-fail) in
                                    {1900}let extra_20: bitstring = catch-fail((if v_352 then (if v_353 then hmac(@7_tls_h,handshake_secret_8,x_119) else fail-any) else fail-any)) in
                                    {1901}let v_354: bool = not-caught-fail(extra_20) in
                                    {1902}let k_29: bitstring = (if v_354 then zero else caught-fail) in
                                    {1903}let master_secret_23: bitstring = (if v_354 then catch-fail(hmac(@7_tls_h,handshake_secret_8,k_29)) else caught-fail) in
                                    {1904}let v_355: bool = not-caught-fail(master_secret_23) in
                                    {1851}let cur_log2_20: bitstring = (cur_log2_13,server_hello_2) in
                                    {1906}let h_108: bitstring = (if v_355 then catch-fail(hash(@7_tls_h,cur_log2_20)) else caught-fail) in
                                    {1907}let v_356: bool = not-caught-fail(h_108) in
                                    {1905}let l_109: label = (if v_355 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {1908}let x_120: bitstring = (if v_356 then (l_109,h_108) else caught-fail) in
                                    {1909}let client_hts_8: bitstring = (if v_355 then catch-fail((if v_356 then hmac(@7_tls_h,handshake_secret_8,x_120) else fail-any)) else caught-fail) in
                                    {1910}let v_357: bool = not-caught-fail(client_hts_8) in
                                    {1912}let h_109: bitstring = (if v_357 then catch-fail(hash(@7_tls_h,cur_log2_20)) else caught-fail) in
                                    {1913}let v_358: bool = not-caught-fail(h_109) in
                                    {1911}let l_110: label = (if v_357 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {1914}let x_121: bitstring = (if v_358 then (l_110,h_109) else caught-fail) in
                                    {1915}let server_hts_8: bitstring = (if v_357 then catch-fail((if v_358 then hmac(@7_tls_h,handshake_secret_8,x_121) else fail-any)) else caught-fail) in
                                    {1916}let v_359: bool = not-caught-fail(server_hts_8) in
                                    {1918}let h_110: bitstring = (if v_359 then zero else caught-fail) in
                                    {1917}let l_111: label = (if v_359 then tls13_key else caught-fail) in
                                    {1919}let x_122: bitstring = (if v_359 then (l_111,h_110) else caught-fail) in
                                    {1920}let client_wkh_8: bitstring = (if v_359 then catch-fail(hmac(@7_tls_h,client_hts_8,x_122)) else caught-fail) in
                                    {1921}let v_360: bool = not-caught-fail(client_wkh_8) in
                                    {1923}let h_111: bitstring = (if v_360 then zero else caught-fail) in
                                    {1922}let l_112: label = (if v_360 then tls13_key else caught-fail) in
                                    {1924}let x_123: bitstring = (if v_360 then (l_112,h_111) else caught-fail) in
                                    {1925}let server_wkh_8: bitstring = (if v_360 then catch-fail(hmac(@7_tls_h,server_hts_8,x_123)) else caught-fail) in
                                    {1926}let v_361: bool = not-caught-fail(server_wkh_8) in
                                    {1928}let h_112: bitstring = (if v_361 then zero else caught-fail) in
                                    {1927}let l_113: label = (if v_361 then tls13_finished else caught-fail) in
                                    {1929}let x_124: bitstring = (if v_361 then (l_113,h_112) else caught-fail) in
                                    {1930}let client_fk_8: bitstring = (if v_361 then catch-fail(hmac(@7_tls_h,client_hts_8,x_124)) else caught-fail) in
                                    {1931}let v_362: bool = not-caught-fail(client_fk_8) in
                                    {1933}let h_113: bitstring = (if v_362 then zero else caught-fail) in
                                    {1932}let l_114: label = (if v_362 then tls13_finished else caught-fail) in
                                    {1934}let x_125: bitstring = (if v_362 then (l_114,h_113) else caught-fail) in
                                    {1935}let server_fk_8: bitstring = (if v_362 then catch-fail(hmac(@7_tls_h,server_hts_8,x_125)) else caught-fail) in
                                    {1936}let v_363: bool = not-caught-fail(server_fk_8) in
                                    {1937}let (master_secret_24: bitstring,chk_15: aead_key,shk_14: aead_key,cfin_15: mac_key,sfin_14: mac_key) = (if v_354 then (if v_355 then (if v_357 then (if v_359 then (if v_360 then (if v_361 then (if v_362 then (if v_363 then (master_secret_23,client_wkh_8,server_wkh_8,client_fk_8,server_fk_8) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {1938}event Client_chk(@7_id_client,chk_15);
                                    {1939}event Client_shk(@7_id_client,shk_14);
                                    {1940}event Client_cfin(@7_id_client,cfin_15);
                                    {1941}event Client_sfin(@7_id_client,sfin_14);
                                    {1942}in(io, enc_ee_msg_7: bitstring);
                                    {1943}let ee_msg_8: msg = aead_dec(@7_tls_a,shk_14,0,zero,enc_ee_msg_7) in
                                    {1944}let EE(ech_ee_7: echExt,extra_ee_7: extraExt) = ee_msg_8 in
                                    {1945}let cur_log2_21: bitstring = (cur_log2_20,ee_msg_8) in
                                    {1946}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr_12,sr_17,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_46,safe_psk_12,@7_comp_psk,master_secret_24,chk_15,0,shk_14,1,cfin_15,sfin_14,cur_log2_21)))
                                )
                                else
                                    {1947}out(io, illegal_parameter)
                            )
                            else
                                {1948}out(io, illegal_parameter)
                        )
                        else
                            {1949}out(io, illegal_parameter)
                )
                else
                    {1950}out(io, unexpected_message)
            )
    )
    else
        {1952}let psk_47: preSharedKey = NoPsk in
        {1954}let k_30: bitstring = catch-fail(psk2b(psk_47)) in
        {1955}let v_364: bool = not-caught-fail(k_30) in
        {1953}let s_35: bitstring = zero in
        {1956}let early_secret_29: bitstring = catch-fail((if v_364 then hmac(@7_tls_h,s_35,k_30) else fail-any)) in
        {1957}let v_365: bool = not-caught-fail(early_secret_29) in
        {1959}let m_37: bitstring = (if v_365 then zero else caught-fail) in
        {1960}let h_114: bitstring = (if v_365 then catch-fail(hash(@7_tls_h,m_37)) else caught-fail) in
        {1961}let v_366: bool = not-caught-fail(h_114) in
        {1958}let l_115: label = (if v_365 then tls13_ext_res_binder else caught-fail) in
        {1962}let x_126: bitstring = (if v_366 then (l_115,h_114) else caught-fail) in
        {1963}let binder_key_19: bitstring = (if v_365 then catch-fail((if v_366 then hmac(@7_tls_h,early_secret_29,x_126) else fail-any)) else caught-fail) in
        {1964}let v_367: bool = not-caught-fail(binder_key_19) in
        {1965}let v_368: bitstring = catch-fail((if v_365 then (if v_367 then (early_secret_29,binder_key_19) else fail-any) else fail-any)) in
        {1966}let v_369: bool = (not-caught-fail(v_368) && success?(1-proj-2-tuple(v_368))) in
        {1967}let kb_19: mac_key = (if v_369 then 2-proj-2-tuple(v_368) else caught-fail) in
        {1968}let es_28: bitstring = (if v_369 then 1-proj-2-tuple(v_368) else caught-fail) in
        {1969}let v_370: bitstring = catch-fail((if v_369 then (empty_psk_ext,(NoPsk,zero,es_28,false)) else fail-any)) in
        {1970}let v_371: bool = (not-caught-fail(v_370) && success?(1-proj-2-tuple(v_370))) in
        {1971}let psk_data_10: bitstring = (if v_371 then 2-proj-2-tuple(v_370) else caught-fail) in
        {1972}let psk_ext_18: preSharedKeyExt = (if v_371 then 1-proj-2-tuple(v_370) else caught-fail) in
        {1973}let offer_16: params = (if v_371 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_18) else caught-fail) in
        {1974}let (client_hello_5: msg,cr_14: bytes32,kex_data_5: bitstring,psk_data_11: bitstring) = (if v_371 then (CH(cr_9,offer_16),cr_9,kex_data,psk_data_10) else fail-any) in
        {1975}event ClientOffersAead(cr_14,@7_tls_a);
        {1976}event ClientOffersHash(cr_14,@7_tls_h);
        {1977}event ClientOffersGroup(cr_14,@7_tls_g);
        {1978}out(io, client_hello_5);
        {1980}let (psk_48: preSharedKey,id_23: identityPsk,es_29: bitstring,safe_psk_13: bool) = psk_data_11 in
        (
            {1981}if (false && (psk_48 ≠ NoPsk)) then
            {1982}let client_hello_6: bitstring = (zero,client_hello_5) in
            {1984}let h_115: bitstring = catch-fail(hash(@7_tls_h,client_hello_6)) in
            {1985}let v_372: bool = not-caught-fail(h_115) in
            {1983}let l_116: label = tls13_client_early_traffic_secret in
            {1986}let x_127: bitstring = (if v_372 then (l_116,h_115) else caught-fail) in
            {1987}let atsc0_3: bitstring = catch-fail((if v_372 then hmac(@7_tls_h,es_29,x_127) else fail-any)) in
            {1988}let v_373: bool = not-caught-fail(atsc0_3) in
            {1990}let h_116: bitstring = (if v_373 then zero else caught-fail) in
            {1989}let l_117: label = (if v_373 then tls13_key else caught-fail) in
            {1991}let x_128: bitstring = (if v_373 then (l_117,h_116) else caught-fail) in
            {1992}let kc0_3: bitstring = (if v_373 then catch-fail(hmac(@7_tls_h,atsc0_3,x_128)) else caught-fail) in
            {1993}let v_374: bool = not-caught-fail(kc0_3) in
            {1995}let h_117: bitstring = (if v_374 then catch-fail(hash(@7_tls_h,client_hello_6)) else caught-fail) in
            {1996}let v_375: bool = not-caught-fail(h_117) in
            {1994}let l_118: label = (if v_374 then tls13_early_exporter_master_secret else caught-fail) in
            {1997}let x_129: bitstring = (if v_375 then (l_118,h_117) else caught-fail) in
            {1998}let ems0_6: bitstring = (if v_374 then catch-fail((if v_375 then hmac(@7_tls_h,es_29,x_129) else fail-any)) else caught-fail) in
            {1999}let v_376: bool = not-caught-fail(ems0_6) in
            {2000}let (wkc0_3: aead_key,ems0_7: bitstring) = (if v_373 then (if v_374 then (if v_376 then (kc0_3,ems0_6) else fail-any) else fail-any) else fail-any) in
            {2001}!
            {2002}in(io, (i_3: nat,ad_3: bitstring));
            {2003}if is_nat(i_3) then
            {2004}new msg_ed_2[]: bitstring;
            {2006}new st_12: stamp;
            {2007}event ClientSequenceClient0RTTDataWriteKey(@7_id_client,st_12,i_3);
            {2008}event ClientSends0(@7_id_client,cr_14,psk_48,i_3,ad_3,msg_ed_2);
            {2005}let enc_ed_2: bitstring = aead_enc(@7_tls_a,wkc0_3,i_3,ad_3,msg_ed_2) in
            {2009}out(io, enc_ed_2)
        ) | (
            {2010}in(io, server_hello_3: msg);
            {2011}let SH(sr_18: bytes32,mode_10: params) = server_hello_3 in
            (
                {2012}event ClientEchAcceptance(@7_id_client,false);
                {1979}let cur_log2_22: bitstring = (cur_log_8,client_hello_5) in
                {2013}if (false && (sr_18 = B32(HRR24,HRR8))) then
                (
                    {2014}if ((mode_10 = nego(TLS13,@7_tls_h,@7_tls_a,hrr_kex_ext(@7_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex ≠ true)) then
                    (
                        {2017}new rand24_4[]: bytes24;
                        {2018}new rand8_4[]: bytes8;
                        {2020}new s_36[]: seed;
                        {2021}let gx_8: element = dh_pub(@7_tls_g,dh_k(s_36)) in
                        {2022}let v_377: bitstring = (dh_k(s_36),gx_8) in
                        {2023}let v_378: bool = success?(1-proj-2-tuple(v_377)) in
                        {2024}let gx_9: element = (if v_378 then 2-proj-2-tuple(v_377) else caught-fail) in
                        {2025}let x_130: bitstring = (if v_378 then 1-proj-2-tuple(v_377) else caught-fail) in
                        {2016}let send_kex_3: bool = true in
                        {2026}let kex_3: kex_alg = (if v_378 then (if send_kex_3 then DHE_kex(@7_tls_g,gx_9) else DHE_group(@7_tls_g)) else caught-fail) in
                        {2027}let (kex_ext_4: keyShareExt,kex_data_6: bitstring) = (if v_378 then (client_kex_ext(kex_3),(x_130,@7_tls_g)) else fail-any) in
                        {2019}let cr_15: bytes32 = B32(rand24_4,rand8_4) in
                        {2015}let cur_log3_4: bitstring = (cur_log2_22,server_hello_3) in
                        {2030}if @7_use_psk then
                        (
                            {2029}let extra_21: extraExt = empty_extra_ext in
                            {2028}let ech_ext_5: echExt = empty_ech_ext in
                            {2031}let (psk_49: preSharedKey,id_24: identityPsk,old_es_3: bitstring,is_safe_17: bool) = psk_data_11 in
                            (
                                {2035}let k_31: bitstring = catch-fail(psk2b(psk_49)) in
                                {2036}let v_379: bool = not-caught-fail(k_31) in
                                {2034}let s_37: bitstring = zero in
                                {2037}let early_secret_30: bitstring = catch-fail((if v_379 then hmac(@7_tls_h,s_37,k_31) else fail-any)) in
                                {2038}let v_380: bool = not-caught-fail(early_secret_30) in
                                {2040}let m_38: bitstring = (if v_380 then zero else caught-fail) in
                                {2041}let h_118: bitstring = (if v_380 then catch-fail(hash(@7_tls_h,m_38)) else caught-fail) in
                                {2042}let v_381: bool = not-caught-fail(h_118) in
                                {2039}let l_119: label = (if v_380 then tls13_ext_res_binder else caught-fail) in
                                {2043}let x_131: bitstring = (if v_381 then (l_119,h_118) else caught-fail) in
                                {2044}let binder_key_20: bitstring = (if v_380 then catch-fail((if v_381 then hmac(@7_tls_h,early_secret_30,x_131) else fail-any)) else caught-fail) in
                                {2045}let v_382: bool = not-caught-fail(binder_key_20) in
                                {2046}let v_383: bitstring = catch-fail((if v_380 then (if v_382 then (early_secret_30,binder_key_20) else fail-any) else fail-any)) in
                                {2047}let v_384: bool = (not-caught-fail(v_383) && success?(1-proj-2-tuple(v_383))) in
                                {2048}let kb_20: mac_key = (if v_384 then 2-proj-2-tuple(v_383) else caught-fail) in
                                {2049}let es_30: bitstring = (if v_384 then 1-proj-2-tuple(v_383) else caught-fail) in
                                {2032}let offer_17: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_12),ech_ext_5,extra_21,trunc_client_psk_ext(id_24)) in
                                {2033}let cur_log'_8: bitstring = (cur_log3_4,CH(cr_15,offer_17)) in
                                {2050}let binders_7: bitstring = (if v_384 then catch-fail(hmac(@7_tls_h,kb_20,cur_log'_8)) else caught-fail) in
                                {2051}let v_385: bool = not-caught-fail(binders_7) in
                                {2052}let v_386: bitstring = catch-fail((if v_384 then (if v_385 then (client_psk_ext(id_24,binders_7),(psk_49,id_24,es_30,is_safe_17)) else fail-any) else fail-any)) in
                                {2053}let v_387: bool = (not-caught-fail(v_386) && success?(1-proj-2-tuple(v_386))) in
                                {2054}let psk_data_12: bitstring = (if v_387 then 2-proj-2-tuple(v_386) else caught-fail) in
                                {2055}let psk_ext_19: preSharedKeyExt = (if v_387 then 1-proj-2-tuple(v_386) else caught-fail) in
                                {2056}let offer_18: params = (if v_387 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_19) else caught-fail) in
                                {2057}let (client_hello'_6: msg,cr'_6: bytes32,kex_data'_6: bitstring,psk_data'_6: bitstring) = (if v_387 then (CH(cr_15,offer_18),cr_15,kex_data_6,psk_data_12) else fail-any) in
                                {2058}event ClientOffersAead(cr'_6,@7_tls_a);
                                {2059}event ClientOffersHash(cr'_6,@7_tls_h);
                                {2060}event ClientOffersGroup(cr'_6,@7_tls_g);
                                {2061}out(io, client_hello'_6);
                                {2063}in(io, server_hello'_6: msg);
                                {2064}let SH(sr'_6: bytes32,mode'_6: params) = server_hello'_6 in
                                (
                                    {2065}if (sr'_6 = B32(HRR24,HRR8)) then
                                        {2066}out(io, unexpected_message)
                                    else
                                        {2067}let (x_132: bitstring,g_8: group) = kex_data'_6 in
                                        {2068}let (psk_offer_8: preSharedKey,id_offer_8: identityPsk,es_offer_8: bitstring,is_safe_offer_8: bool) = psk_data'_6 in
                                        {2069}event Client_PSKOffer(@7_id_client,psk_offer_8,id_offer_8,is_safe_offer_8);
                                        {2070}event Client_Rand_client(@7_id_client,cr'_6);
                                        {2071}event Client_DH_client(@7_id_client,dh_pub(g_8,x_132));
                                        {2072}event Client_server_domain(@7_id_client,s_dom_12);
                                        {2073}let SH(sr_19: bytes32,mode_11: params) = server_hello'_6 in
                                        {2074}event Client_Rand_server(@7_id_client,sr_19);
                                        {2075}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_8,gy_9: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_20: preSharedKeyExt) = mode_11 in
                                        (
                                            {2077}event Client_DH_server(@7_id_client,gy_9);
                                            {2078}let v_388: bool = (psk_ext_20 = empty_psk_ext) in
                                            {2079}let psk_50: preSharedKey = (if v_388 then NoPsk else caught-fail) in
                                            {2081}let k_32: bitstring = (if v_388 then catch-fail(psk2b(psk_50)) else caught-fail) in
                                            {2082}let v_389: bool = not-caught-fail(k_32) in
                                            {2080}let s_38: bitstring = (if v_388 then zero else caught-fail) in
                                            {2083}let early_secret_31: bitstring = (if v_388 then catch-fail((if v_389 then hmac(@7_tls_h,s_38,k_32) else fail-any)) else caught-fail) in
                                            {2084}let v_390: bool = not-caught-fail(early_secret_31) in
                                            {2086}let m_39: bitstring = (if v_390 then zero else caught-fail) in
                                            {2087}let h_119: bitstring = (if v_390 then catch-fail(hash(@7_tls_h,m_39)) else caught-fail) in
                                            {2088}let v_391: bool = not-caught-fail(h_119) in
                                            {2085}let l_120: label = (if v_390 then tls13_ext_res_binder else caught-fail) in
                                            {2089}let x_133: bitstring = (if v_391 then (l_120,h_119) else caught-fail) in
                                            {2090}let binder_key_21: bitstring = (if v_390 then catch-fail((if v_391 then hmac(@7_tls_h,early_secret_31,x_133) else fail-any)) else caught-fail) in
                                            {2091}let v_392: bool = not-caught-fail(binder_key_21) in
                                            {2092}let v_393: bitstring = (if v_388 then catch-fail((if v_390 then (if v_392 then (early_secret_31,binder_key_21) else fail-any) else fail-any)) else caught-fail) in
                                            {2093}let v_394: bool = (not-caught-fail(v_393) && success?(1-proj-2-tuple(v_393))) in
                                            {2094}let kb_21: mac_key = (if v_394 then 2-proj-2-tuple(v_393) else caught-fail) in
                                            {2095}let es_31: bitstring = (if v_394 then 1-proj-2-tuple(v_393) else caught-fail) in
                                            {2096}let v_395: bitstring = (if not(v_388) then catch-fail(psk_data'_6) else caught-fail) in
                                            {2097}let v_396: bool = (not-caught-fail(v_395) && success?(1-proj-4-tuple(v_395))) in
                                            {2098}let is_safe_18: bool = (if v_396 then 4-proj-4-tuple(v_395) else caught-fail) in
                                            {2099}let es_32: bitstring = (if v_396 then 3-proj-4-tuple(v_395) else caught-fail) in
                                            {2100}let id_25: identityPsk = (if v_396 then 2-proj-4-tuple(v_395) else caught-fail) in
                                            {2101}let psk_51: preSharedKey = (if v_396 then 1-proj-4-tuple(v_395) else caught-fail) in
                                            {2102}let (psk_52: preSharedKey,early_secret_32: bitstring,valid_8: bool,safe_psk_14: bool) = (if v_388 then (if v_394 then (NoPsk,es_31,true,false) else fail-any) else (if v_396 then (psk_51,es_32,((psk_51 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_20)),is_safe_18) else fail-any)) in
                                            {2103}event Client_PSKChoosen(@7_id_client,psk_52,safe_psk_14);
                                            {2104}if valid_8 then
                                            (
                                                {2107}new s_39[]: seed;
                                                {2105}let gxy_17: element = catch-fail(dh_decap_fun(g_8,gy_9,x_132)) in
                                                {2106}let v_397: bool = not-caught-fail(gxy_17) in
                                                {2108}let gxy_18: element = (if v_397 then gxy_17 else dh_f(s_39)) in
                                                {2109}event Client_DH_gxy(@7_id_client,gxy_18);
                                                {2111}let m_40: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2112}let v_398: bool = not-caught-fail(m_40) in
                                                {2113}let h_120: bitstring = (if v_398 then catch-fail(hash(@7_tls_h,m_40)) else caught-fail) in
                                                {2114}let v_399: bool = not-caught-fail(h_120) in
                                                {2110}let l_121: label = tls13_derived in
                                                {2115}let x_134: bitstring = (if v_399 then (l_121,h_120) else caught-fail) in
                                                {2116}let extra_22: bitstring = catch-fail((if v_398 then (if v_399 then hmac(@7_tls_h,early_secret_32,x_134) else fail-any) else fail-any)) in
                                                {2117}let v_400: bool = not-caught-fail(extra_22) in
                                                {2118}let handshake_secret_9: bitstring = (if v_400 then hmac(@7_tls_h,extra_22,gxy_18) else fail-any) in
                                                {2120}let m_41: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2121}let v_401: bool = not-caught-fail(m_41) in
                                                {2122}let h_121: bitstring = (if v_401 then catch-fail(hash(@7_tls_h,m_41)) else caught-fail) in
                                                {2123}let v_402: bool = not-caught-fail(h_121) in
                                                {2119}let l_122: label = tls13_derived in
                                                {2124}let x_135: bitstring = (if v_402 then (l_122,h_121) else caught-fail) in
                                                {2125}let extra_23: bitstring = catch-fail((if v_401 then (if v_402 then hmac(@7_tls_h,handshake_secret_9,x_135) else fail-any) else fail-any)) in
                                                {2126}let v_403: bool = not-caught-fail(extra_23) in
                                                {2127}let k_33: bitstring = (if v_403 then zero else caught-fail) in
                                                {2128}let master_secret_25: bitstring = (if v_403 then catch-fail(hmac(@7_tls_h,handshake_secret_9,k_33)) else caught-fail) in
                                                {2129}let v_404: bool = not-caught-fail(master_secret_25) in
                                                {2062}let cur_log4_6: bitstring = (cur_log3_4,client_hello'_6) in
                                                {2076}let cur_log2_23: bitstring = (cur_log4_6,server_hello'_6) in
                                                {2131}let h_122: bitstring = (if v_404 then catch-fail(hash(@7_tls_h,cur_log2_23)) else caught-fail) in
                                                {2132}let v_405: bool = not-caught-fail(h_122) in
                                                {2130}let l_123: label = (if v_404 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {2133}let x_136: bitstring = (if v_405 then (l_123,h_122) else caught-fail) in
                                                {2134}let client_hts_9: bitstring = (if v_404 then catch-fail((if v_405 then hmac(@7_tls_h,handshake_secret_9,x_136) else fail-any)) else caught-fail) in
                                                {2135}let v_406: bool = not-caught-fail(client_hts_9) in
                                                {2137}let h_123: bitstring = (if v_406 then catch-fail(hash(@7_tls_h,cur_log2_23)) else caught-fail) in
                                                {2138}let v_407: bool = not-caught-fail(h_123) in
                                                {2136}let l_124: label = (if v_406 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {2139}let x_137: bitstring = (if v_407 then (l_124,h_123) else caught-fail) in
                                                {2140}let server_hts_9: bitstring = (if v_406 then catch-fail((if v_407 then hmac(@7_tls_h,handshake_secret_9,x_137) else fail-any)) else caught-fail) in
                                                {2141}let v_408: bool = not-caught-fail(server_hts_9) in
                                                {2143}let h_124: bitstring = (if v_408 then zero else caught-fail) in
                                                {2142}let l_125: label = (if v_408 then tls13_key else caught-fail) in
                                                {2144}let x_138: bitstring = (if v_408 then (l_125,h_124) else caught-fail) in
                                                {2145}let client_wkh_9: bitstring = (if v_408 then catch-fail(hmac(@7_tls_h,client_hts_9,x_138)) else caught-fail) in
                                                {2146}let v_409: bool = not-caught-fail(client_wkh_9) in
                                                {2148}let h_125: bitstring = (if v_409 then zero else caught-fail) in
                                                {2147}let l_126: label = (if v_409 then tls13_key else caught-fail) in
                                                {2149}let x_139: bitstring = (if v_409 then (l_126,h_125) else caught-fail) in
                                                {2150}let server_wkh_9: bitstring = (if v_409 then catch-fail(hmac(@7_tls_h,server_hts_9,x_139)) else caught-fail) in
                                                {2151}let v_410: bool = not-caught-fail(server_wkh_9) in
                                                {2153}let h_126: bitstring = (if v_410 then zero else caught-fail) in
                                                {2152}let l_127: label = (if v_410 then tls13_finished else caught-fail) in
                                                {2154}let x_140: bitstring = (if v_410 then (l_127,h_126) else caught-fail) in
                                                {2155}let client_fk_9: bitstring = (if v_410 then catch-fail(hmac(@7_tls_h,client_hts_9,x_140)) else caught-fail) in
                                                {2156}let v_411: bool = not-caught-fail(client_fk_9) in
                                                {2158}let h_127: bitstring = (if v_411 then zero else caught-fail) in
                                                {2157}let l_128: label = (if v_411 then tls13_finished else caught-fail) in
                                                {2159}let x_141: bitstring = (if v_411 then (l_128,h_127) else caught-fail) in
                                                {2160}let server_fk_9: bitstring = (if v_411 then catch-fail(hmac(@7_tls_h,server_hts_9,x_141)) else caught-fail) in
                                                {2161}let v_412: bool = not-caught-fail(server_fk_9) in
                                                {2162}let (master_secret_26: bitstring,chk_16: aead_key,shk_15: aead_key,cfin_16: mac_key,sfin_15: mac_key) = (if v_403 then (if v_404 then (if v_406 then (if v_408 then (if v_409 then (if v_410 then (if v_411 then (if v_412 then (master_secret_25,client_wkh_9,server_wkh_9,client_fk_9,server_fk_9) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {2163}event Client_chk(@7_id_client,chk_16);
                                                {2164}event Client_shk(@7_id_client,shk_15);
                                                {2165}event Client_cfin(@7_id_client,cfin_16);
                                                {2166}event Client_sfin(@7_id_client,sfin_15);
                                                {2167}in(io, enc_ee_msg_8: bitstring);
                                                {2168}let ee_msg_9: msg = aead_dec(@7_tls_a,shk_15,0,zero,enc_ee_msg_8) in
                                                {2169}let EE(ech_ee_8: echExt,extra_ee_8: extraExt) = ee_msg_9 in
                                                {2170}let cur_log2_24: bitstring = (cur_log2_23,ee_msg_9) in
                                                {2171}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_6,sr_19,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_52,safe_psk_14,@7_comp_psk,master_secret_26,chk_16,0,shk_15,1,cfin_16,sfin_15,cur_log2_24)))
                                            )
                                            else
                                                {2172}out(io, illegal_parameter)
                                        )
                                        else
                                            {2173}out(io, illegal_parameter)
                                )
                                else
                                    {2174}out(io, unexpected_message)
                            )
                            else
                                {2327}get pre_shared_keys(c_dom'_5: domain,=s_dom_12,=@7_tls_h,id_26: identityPsk,psk_53: preSharedKey,idP_7: idProc,is_safe_19: bool) in
                                {2175}event Selected_one_time_used_psk(@7_id_client,psk_53,is_safe_19);
                                {2176}event Selected_psk(c_dom_5,c_dom'_5,idP_7,is_safe_19);
                                {2177}event Selected_psk_no_missmatch(@7_id_client,s_dom_12,@7_tls_h,psk_53,id_26);
                                {2178}event Selected_psk_with_ID(c_dom_5,c_dom'_5,id_26,idP_7,is_safe_19);
                                {2179}let v_413: bitstring = (id_26,psk_53,is_safe_19) in
                                {2180}let v_414: bool = success?(1-proj-3-tuple(v_413)) in
                                {2181}let is_safe_20: bool = (if v_414 then 3-proj-3-tuple(v_413) else caught-fail) in
                                {2182}let psk_54: preSharedKey = (if v_414 then 2-proj-3-tuple(v_413) else caught-fail) in
                                {2183}let id_27: identityPsk = (if v_414 then 1-proj-3-tuple(v_413) else caught-fail) in
                                {2187}let k_34: bitstring = (if v_414 then catch-fail(psk2b(psk_54)) else caught-fail) in
                                {2188}let v_415: bool = not-caught-fail(k_34) in
                                {2186}let s_40: bitstring = (if v_414 then zero else caught-fail) in
                                {2189}let early_secret_33: bitstring = (if v_414 then catch-fail((if v_415 then hmac(@7_tls_h,s_40,k_34) else fail-any)) else caught-fail) in
                                {2190}let v_416: bool = not-caught-fail(early_secret_33) in
                                {2192}let m_42: bitstring = (if v_416 then zero else caught-fail) in
                                {2193}let h_128: bitstring = (if v_416 then catch-fail(hash(@7_tls_h,m_42)) else caught-fail) in
                                {2194}let v_417: bool = not-caught-fail(h_128) in
                                {2191}let l_129: label = (if v_416 then tls13_ext_res_binder else caught-fail) in
                                {2195}let x_142: bitstring = (if v_417 then (l_129,h_128) else caught-fail) in
                                {2196}let binder_key_22: bitstring = (if v_416 then catch-fail((if v_417 then hmac(@7_tls_h,early_secret_33,x_142) else fail-any)) else caught-fail) in
                                {2197}let v_418: bool = not-caught-fail(binder_key_22) in
                                {2198}let v_419: bitstring = (if v_414 then catch-fail((if v_416 then (if v_418 then (early_secret_33,binder_key_22) else fail-any) else fail-any)) else caught-fail) in
                                {2199}let v_420: bool = (not-caught-fail(v_419) && success?(1-proj-2-tuple(v_419))) in
                                {2200}let kb_22: mac_key = (if v_420 then 2-proj-2-tuple(v_419) else caught-fail) in
                                {2201}let es_33: bitstring = (if v_420 then 1-proj-2-tuple(v_419) else caught-fail) in
                                {2184}let offer_19: params = (if v_414 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_12),ech_ext_5,extra_21,trunc_client_psk_ext(id_27)) else caught-fail) in
                                {2185}let cur_log'_9: bitstring = (if v_414 then (cur_log3_4,CH(cr_15,offer_19)) else caught-fail) in
                                {2202}let binders_8: bitstring = (if v_420 then catch-fail(hmac(@7_tls_h,kb_22,cur_log'_9)) else caught-fail) in
                                {2203}let v_421: bool = not-caught-fail(binders_8) in
                                {2204}let v_422: bitstring = catch-fail((if v_414 then (if v_420 then (if v_421 then (client_psk_ext(id_27,binders_8),(psk_54,id_27,es_33,is_safe_20)) else fail-any) else fail-any) else fail-any)) in
                                {2205}let v_423: bool = (not-caught-fail(v_422) && success?(1-proj-2-tuple(v_422))) in
                                {2206}let psk_data_13: bitstring = (if v_423 then 2-proj-2-tuple(v_422) else caught-fail) in
                                {2207}let psk_ext_21: preSharedKeyExt = (if v_423 then 1-proj-2-tuple(v_422) else caught-fail) in
                                {2208}let offer_20: params = (if v_423 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_21) else caught-fail) in
                                {2209}let (client_hello'_7: msg,cr'_7: bytes32,kex_data'_7: bitstring,psk_data'_7: bitstring) = (if v_423 then (CH(cr_15,offer_20),cr_15,kex_data_6,psk_data_13) else fail-any) in
                                {2210}event ClientOffersAead(cr'_7,@7_tls_a);
                                {2211}event ClientOffersHash(cr'_7,@7_tls_h);
                                {2212}event ClientOffersGroup(cr'_7,@7_tls_g);
                                {2213}out(io, client_hello'_7);
                                {2215}in(io, server_hello'_7: msg);
                                {2216}let SH(sr'_7: bytes32,mode'_7: params) = server_hello'_7 in
                                (
                                    {2217}if (sr'_7 = B32(HRR24,HRR8)) then
                                        {2218}out(io, unexpected_message)
                                    else
                                        {2219}let (x_143: bitstring,g_9: group) = kex_data'_7 in
                                        {2220}let (psk_offer_9: preSharedKey,id_offer_9: identityPsk,es_offer_9: bitstring,is_safe_offer_9: bool) = psk_data'_7 in
                                        {2221}event Client_PSKOffer(@7_id_client,psk_offer_9,id_offer_9,is_safe_offer_9);
                                        {2222}event Client_Rand_client(@7_id_client,cr'_7);
                                        {2223}event Client_DH_client(@7_id_client,dh_pub(g_9,x_143));
                                        {2224}event Client_server_domain(@7_id_client,s_dom_12);
                                        {2225}let SH(sr_20: bytes32,mode_12: params) = server_hello'_7 in
                                        {2226}event Client_Rand_server(@7_id_client,sr_20);
                                        {2227}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_9,gy_10: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_22: preSharedKeyExt) = mode_12 in
                                        (
                                            {2229}event Client_DH_server(@7_id_client,gy_10);
                                            {2230}let v_424: bool = (psk_ext_22 = empty_psk_ext) in
                                            {2231}let psk_55: preSharedKey = (if v_424 then NoPsk else caught-fail) in
                                            {2233}let k_35: bitstring = (if v_424 then catch-fail(psk2b(psk_55)) else caught-fail) in
                                            {2234}let v_425: bool = not-caught-fail(k_35) in
                                            {2232}let s_41: bitstring = (if v_424 then zero else caught-fail) in
                                            {2235}let early_secret_34: bitstring = (if v_424 then catch-fail((if v_425 then hmac(@7_tls_h,s_41,k_35) else fail-any)) else caught-fail) in
                                            {2236}let v_426: bool = not-caught-fail(early_secret_34) in
                                            {2238}let m_43: bitstring = (if v_426 then zero else caught-fail) in
                                            {2239}let h_129: bitstring = (if v_426 then catch-fail(hash(@7_tls_h,m_43)) else caught-fail) in
                                            {2240}let v_427: bool = not-caught-fail(h_129) in
                                            {2237}let l_130: label = (if v_426 then tls13_ext_res_binder else caught-fail) in
                                            {2241}let x_144: bitstring = (if v_427 then (l_130,h_129) else caught-fail) in
                                            {2242}let binder_key_23: bitstring = (if v_426 then catch-fail((if v_427 then hmac(@7_tls_h,early_secret_34,x_144) else fail-any)) else caught-fail) in
                                            {2243}let v_428: bool = not-caught-fail(binder_key_23) in
                                            {2244}let v_429: bitstring = (if v_424 then catch-fail((if v_426 then (if v_428 then (early_secret_34,binder_key_23) else fail-any) else fail-any)) else caught-fail) in
                                            {2245}let v_430: bool = (not-caught-fail(v_429) && success?(1-proj-2-tuple(v_429))) in
                                            {2246}let kb_23: mac_key = (if v_430 then 2-proj-2-tuple(v_429) else caught-fail) in
                                            {2247}let es_34: bitstring = (if v_430 then 1-proj-2-tuple(v_429) else caught-fail) in
                                            {2248}let v_431: bitstring = (if not(v_424) then catch-fail(psk_data'_7) else caught-fail) in
                                            {2249}let v_432: bool = (not-caught-fail(v_431) && success?(1-proj-4-tuple(v_431))) in
                                            {2250}let is_safe_21: bool = (if v_432 then 4-proj-4-tuple(v_431) else caught-fail) in
                                            {2251}let es_35: bitstring = (if v_432 then 3-proj-4-tuple(v_431) else caught-fail) in
                                            {2252}let id_28: identityPsk = (if v_432 then 2-proj-4-tuple(v_431) else caught-fail) in
                                            {2253}let psk_56: preSharedKey = (if v_432 then 1-proj-4-tuple(v_431) else caught-fail) in
                                            {2254}let (psk_57: preSharedKey,early_secret_35: bitstring,valid_9: bool,safe_psk_15: bool) = (if v_424 then (if v_430 then (NoPsk,es_34,true,false) else fail-any) else (if v_432 then (psk_56,es_35,((psk_56 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_22)),is_safe_21) else fail-any)) in
                                            {2255}event Client_PSKChoosen(@7_id_client,psk_57,safe_psk_15);
                                            {2256}if valid_9 then
                                            (
                                                {2259}new s_42[]: seed;
                                                {2257}let gxy_19: element = catch-fail(dh_decap_fun(g_9,gy_10,x_143)) in
                                                {2258}let v_433: bool = not-caught-fail(gxy_19) in
                                                {2260}let gxy_20: element = (if v_433 then gxy_19 else dh_f(s_42)) in
                                                {2261}event Client_DH_gxy(@7_id_client,gxy_20);
                                                {2263}let m_44: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2264}let v_434: bool = not-caught-fail(m_44) in
                                                {2265}let h_130: bitstring = (if v_434 then catch-fail(hash(@7_tls_h,m_44)) else caught-fail) in
                                                {2266}let v_435: bool = not-caught-fail(h_130) in
                                                {2262}let l_131: label = tls13_derived in
                                                {2267}let x_145: bitstring = (if v_435 then (l_131,h_130) else caught-fail) in
                                                {2268}let extra_24: bitstring = catch-fail((if v_434 then (if v_435 then hmac(@7_tls_h,early_secret_35,x_145) else fail-any) else fail-any)) in
                                                {2269}let v_436: bool = not-caught-fail(extra_24) in
                                                {2270}let handshake_secret_10: bitstring = (if v_436 then hmac(@7_tls_h,extra_24,gxy_20) else fail-any) in
                                                {2272}let m_45: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2273}let v_437: bool = not-caught-fail(m_45) in
                                                {2274}let h_131: bitstring = (if v_437 then catch-fail(hash(@7_tls_h,m_45)) else caught-fail) in
                                                {2275}let v_438: bool = not-caught-fail(h_131) in
                                                {2271}let l_132: label = tls13_derived in
                                                {2276}let x_146: bitstring = (if v_438 then (l_132,h_131) else caught-fail) in
                                                {2277}let extra_25: bitstring = catch-fail((if v_437 then (if v_438 then hmac(@7_tls_h,handshake_secret_10,x_146) else fail-any) else fail-any)) in
                                                {2278}let v_439: bool = not-caught-fail(extra_25) in
                                                {2279}let k_36: bitstring = (if v_439 then zero else caught-fail) in
                                                {2280}let master_secret_27: bitstring = (if v_439 then catch-fail(hmac(@7_tls_h,handshake_secret_10,k_36)) else caught-fail) in
                                                {2281}let v_440: bool = not-caught-fail(master_secret_27) in
                                                {2214}let cur_log4_7: bitstring = (cur_log3_4,client_hello'_7) in
                                                {2228}let cur_log2_25: bitstring = (cur_log4_7,server_hello'_7) in
                                                {2283}let h_132: bitstring = (if v_440 then catch-fail(hash(@7_tls_h,cur_log2_25)) else caught-fail) in
                                                {2284}let v_441: bool = not-caught-fail(h_132) in
                                                {2282}let l_133: label = (if v_440 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {2285}let x_147: bitstring = (if v_441 then (l_133,h_132) else caught-fail) in
                                                {2286}let client_hts_10: bitstring = (if v_440 then catch-fail((if v_441 then hmac(@7_tls_h,handshake_secret_10,x_147) else fail-any)) else caught-fail) in
                                                {2287}let v_442: bool = not-caught-fail(client_hts_10) in
                                                {2289}let h_133: bitstring = (if v_442 then catch-fail(hash(@7_tls_h,cur_log2_25)) else caught-fail) in
                                                {2290}let v_443: bool = not-caught-fail(h_133) in
                                                {2288}let l_134: label = (if v_442 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {2291}let x_148: bitstring = (if v_443 then (l_134,h_133) else caught-fail) in
                                                {2292}let server_hts_10: bitstring = (if v_442 then catch-fail((if v_443 then hmac(@7_tls_h,handshake_secret_10,x_148) else fail-any)) else caught-fail) in
                                                {2293}let v_444: bool = not-caught-fail(server_hts_10) in
                                                {2295}let h_134: bitstring = (if v_444 then zero else caught-fail) in
                                                {2294}let l_135: label = (if v_444 then tls13_key else caught-fail) in
                                                {2296}let x_149: bitstring = (if v_444 then (l_135,h_134) else caught-fail) in
                                                {2297}let client_wkh_10: bitstring = (if v_444 then catch-fail(hmac(@7_tls_h,client_hts_10,x_149)) else caught-fail) in
                                                {2298}let v_445: bool = not-caught-fail(client_wkh_10) in
                                                {2300}let h_135: bitstring = (if v_445 then zero else caught-fail) in
                                                {2299}let l_136: label = (if v_445 then tls13_key else caught-fail) in
                                                {2301}let x_150: bitstring = (if v_445 then (l_136,h_135) else caught-fail) in
                                                {2302}let server_wkh_10: bitstring = (if v_445 then catch-fail(hmac(@7_tls_h,server_hts_10,x_150)) else caught-fail) in
                                                {2303}let v_446: bool = not-caught-fail(server_wkh_10) in
                                                {2305}let h_136: bitstring = (if v_446 then zero else caught-fail) in
                                                {2304}let l_137: label = (if v_446 then tls13_finished else caught-fail) in
                                                {2306}let x_151: bitstring = (if v_446 then (l_137,h_136) else caught-fail) in
                                                {2307}let client_fk_10: bitstring = (if v_446 then catch-fail(hmac(@7_tls_h,client_hts_10,x_151)) else caught-fail) in
                                                {2308}let v_447: bool = not-caught-fail(client_fk_10) in
                                                {2310}let h_137: bitstring = (if v_447 then zero else caught-fail) in
                                                {2309}let l_138: label = (if v_447 then tls13_finished else caught-fail) in
                                                {2311}let x_152: bitstring = (if v_447 then (l_138,h_137) else caught-fail) in
                                                {2312}let server_fk_10: bitstring = (if v_447 then catch-fail(hmac(@7_tls_h,server_hts_10,x_152)) else caught-fail) in
                                                {2313}let v_448: bool = not-caught-fail(server_fk_10) in
                                                {2314}let (master_secret_28: bitstring,chk_17: aead_key,shk_16: aead_key,cfin_17: mac_key,sfin_16: mac_key) = (if v_439 then (if v_440 then (if v_442 then (if v_444 then (if v_445 then (if v_446 then (if v_447 then (if v_448 then (master_secret_27,client_wkh_10,server_wkh_10,client_fk_10,server_fk_10) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {2315}event Client_chk(@7_id_client,chk_17);
                                                {2316}event Client_shk(@7_id_client,shk_16);
                                                {2317}event Client_cfin(@7_id_client,cfin_17);
                                                {2318}event Client_sfin(@7_id_client,sfin_16);
                                                {2319}in(io, enc_ee_msg_9: bitstring);
                                                {2320}let ee_msg_10: msg = aead_dec(@7_tls_a,shk_16,0,zero,enc_ee_msg_9) in
                                                {2321}let EE(ech_ee_9: echExt,extra_ee_9: extraExt) = ee_msg_10 in
                                                {2322}let cur_log2_26: bitstring = (cur_log2_25,ee_msg_10) in
                                                {2323}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_7,sr_20,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_57,safe_psk_15,@7_comp_psk,master_secret_28,chk_17,0,shk_16,1,cfin_17,sfin_16,cur_log2_26)))
                                            )
                                            else
                                                {2324}out(io, illegal_parameter)
                                        )
                                        else
                                            {2325}out(io, illegal_parameter)
                                )
                                else
                                    {2326}out(io, unexpected_message)
                        )
                        else
                            {2328}let psk_58: preSharedKey = NoPsk in
                            {2330}let k_37: bitstring = catch-fail(psk2b(psk_58)) in
                            {2331}let v_449: bool = not-caught-fail(k_37) in
                            {2329}let s_43: bitstring = zero in
                            {2332}let early_secret_36: bitstring = catch-fail((if v_449 then hmac(@7_tls_h,s_43,k_37) else fail-any)) in
                            {2333}let v_450: bool = not-caught-fail(early_secret_36) in
                            {2335}let m_46: bitstring = (if v_450 then zero else caught-fail) in
                            {2336}let h_138: bitstring = (if v_450 then catch-fail(hash(@7_tls_h,m_46)) else caught-fail) in
                            {2337}let v_451: bool = not-caught-fail(h_138) in
                            {2334}let l_139: label = (if v_450 then tls13_ext_res_binder else caught-fail) in
                            {2338}let x_153: bitstring = (if v_451 then (l_139,h_138) else caught-fail) in
                            {2339}let binder_key_24: bitstring = (if v_450 then catch-fail((if v_451 then hmac(@7_tls_h,early_secret_36,x_153) else fail-any)) else caught-fail) in
                            {2340}let v_452: bool = not-caught-fail(binder_key_24) in
                            {2341}let v_453: bitstring = catch-fail((if v_450 then (if v_452 then (early_secret_36,binder_key_24) else fail-any) else fail-any)) in
                            {2342}let v_454: bool = (not-caught-fail(v_453) && success?(1-proj-2-tuple(v_453))) in
                            {2343}let kb_24: mac_key = (if v_454 then 2-proj-2-tuple(v_453) else caught-fail) in
                            {2344}let es_36: bitstring = (if v_454 then 1-proj-2-tuple(v_453) else caught-fail) in
                            {2345}let v_455: bitstring = catch-fail((if v_454 then (empty_psk_ext,(NoPsk,zero,es_36,false)) else fail-any)) in
                            {2346}let v_456: bool = (not-caught-fail(v_455) && success?(1-proj-2-tuple(v_455))) in
                            {2347}let psk_data_14: bitstring = (if v_456 then 2-proj-2-tuple(v_455) else caught-fail) in
                            {2348}let psk_ext_23: preSharedKeyExt = (if v_456 then 1-proj-2-tuple(v_455) else caught-fail) in
                            {2349}let offer_21: params = (if v_456 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_12),empty_ech_ext,empty_extra_ext,psk_ext_23) else caught-fail) in
                            {2350}let (client_hello'_8: msg,cr'_8: bytes32,kex_data'_8: bitstring,psk_data'_8: bitstring) = (if v_456 then (CH(cr_15,offer_21),cr_15,kex_data_6,psk_data_14) else fail-any) in
                            {2351}event ClientOffersAead(cr'_8,@7_tls_a);
                            {2352}event ClientOffersHash(cr'_8,@7_tls_h);
                            {2353}event ClientOffersGroup(cr'_8,@7_tls_g);
                            {2354}out(io, client_hello'_8);
                            {2356}in(io, server_hello'_8: msg);
                            {2357}let SH(sr'_8: bytes32,mode'_8: params) = server_hello'_8 in
                            (
                                {2358}if (sr'_8 = B32(HRR24,HRR8)) then
                                    {2359}out(io, unexpected_message)
                                else
                                    {2360}let (x_154: bitstring,g_10: group) = kex_data'_8 in
                                    {2361}let (psk_offer_10: preSharedKey,id_offer_10: identityPsk,es_offer_10: bitstring,is_safe_offer_10: bool) = psk_data'_8 in
                                    {2362}event Client_PSKOffer(@7_id_client,psk_offer_10,id_offer_10,is_safe_offer_10);
                                    {2363}event Client_Rand_client(@7_id_client,cr'_8);
                                    {2364}event Client_DH_client(@7_id_client,dh_pub(g_10,x_154));
                                    {2365}event Client_server_domain(@7_id_client,s_dom_12);
                                    {2366}let SH(sr_21: bytes32,mode_13: params) = server_hello'_8 in
                                    {2367}event Client_Rand_server(@7_id_client,sr_21);
                                    {2368}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_10,gy_11: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_24: preSharedKeyExt) = mode_13 in
                                    (
                                        {2370}event Client_DH_server(@7_id_client,gy_11);
                                        {2371}let v_457: bool = (psk_ext_24 = empty_psk_ext) in
                                        {2372}let psk_59: preSharedKey = (if v_457 then NoPsk else caught-fail) in
                                        {2374}let k_38: bitstring = (if v_457 then catch-fail(psk2b(psk_59)) else caught-fail) in
                                        {2375}let v_458: bool = not-caught-fail(k_38) in
                                        {2373}let s_44: bitstring = (if v_457 then zero else caught-fail) in
                                        {2376}let early_secret_37: bitstring = (if v_457 then catch-fail((if v_458 then hmac(@7_tls_h,s_44,k_38) else fail-any)) else caught-fail) in
                                        {2377}let v_459: bool = not-caught-fail(early_secret_37) in
                                        {2379}let m_47: bitstring = (if v_459 then zero else caught-fail) in
                                        {2380}let h_139: bitstring = (if v_459 then catch-fail(hash(@7_tls_h,m_47)) else caught-fail) in
                                        {2381}let v_460: bool = not-caught-fail(h_139) in
                                        {2378}let l_140: label = (if v_459 then tls13_ext_res_binder else caught-fail) in
                                        {2382}let x_155: bitstring = (if v_460 then (l_140,h_139) else caught-fail) in
                                        {2383}let binder_key_25: bitstring = (if v_459 then catch-fail((if v_460 then hmac(@7_tls_h,early_secret_37,x_155) else fail-any)) else caught-fail) in
                                        {2384}let v_461: bool = not-caught-fail(binder_key_25) in
                                        {2385}let v_462: bitstring = (if v_457 then catch-fail((if v_459 then (if v_461 then (early_secret_37,binder_key_25) else fail-any) else fail-any)) else caught-fail) in
                                        {2386}let v_463: bool = (not-caught-fail(v_462) && success?(1-proj-2-tuple(v_462))) in
                                        {2387}let kb_25: mac_key = (if v_463 then 2-proj-2-tuple(v_462) else caught-fail) in
                                        {2388}let es_37: bitstring = (if v_463 then 1-proj-2-tuple(v_462) else caught-fail) in
                                        {2389}let v_464: bitstring = (if not(v_457) then catch-fail(psk_data'_8) else caught-fail) in
                                        {2390}let v_465: bool = (not-caught-fail(v_464) && success?(1-proj-4-tuple(v_464))) in
                                        {2391}let is_safe_22: bool = (if v_465 then 4-proj-4-tuple(v_464) else caught-fail) in
                                        {2392}let es_38: bitstring = (if v_465 then 3-proj-4-tuple(v_464) else caught-fail) in
                                        {2393}let id_29: identityPsk = (if v_465 then 2-proj-4-tuple(v_464) else caught-fail) in
                                        {2394}let psk_60: preSharedKey = (if v_465 then 1-proj-4-tuple(v_464) else caught-fail) in
                                        {2395}let (psk_61: preSharedKey,early_secret_38: bitstring,valid_10: bool,safe_psk_16: bool) = (if v_457 then (if v_463 then (NoPsk,es_37,true,false) else fail-any) else (if v_465 then (psk_60,es_38,((psk_60 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_24)),is_safe_22) else fail-any)) in
                                        {2396}event Client_PSKChoosen(@7_id_client,psk_61,safe_psk_16);
                                        {2397}if valid_10 then
                                        (
                                            {2400}new s_45[]: seed;
                                            {2398}let gxy_21: element = catch-fail(dh_decap_fun(g_10,gy_11,x_154)) in
                                            {2399}let v_466: bool = not-caught-fail(gxy_21) in
                                            {2401}let gxy_22: element = (if v_466 then gxy_21 else dh_f(s_45)) in
                                            {2402}event Client_DH_gxy(@7_id_client,gxy_22);
                                            {2404}let m_48: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                            {2405}let v_467: bool = not-caught-fail(m_48) in
                                            {2406}let h_140: bitstring = (if v_467 then catch-fail(hash(@7_tls_h,m_48)) else caught-fail) in
                                            {2407}let v_468: bool = not-caught-fail(h_140) in
                                            {2403}let l_141: label = tls13_derived in
                                            {2408}let x_156: bitstring = (if v_468 then (l_141,h_140) else caught-fail) in
                                            {2409}let extra_26: bitstring = catch-fail((if v_467 then (if v_468 then hmac(@7_tls_h,early_secret_38,x_156) else fail-any) else fail-any)) in
                                            {2410}let v_469: bool = not-caught-fail(extra_26) in
                                            {2411}let handshake_secret_11: bitstring = (if v_469 then hmac(@7_tls_h,extra_26,gxy_22) else fail-any) in
                                            {2413}let m_49: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                            {2414}let v_470: bool = not-caught-fail(m_49) in
                                            {2415}let h_141: bitstring = (if v_470 then catch-fail(hash(@7_tls_h,m_49)) else caught-fail) in
                                            {2416}let v_471: bool = not-caught-fail(h_141) in
                                            {2412}let l_142: label = tls13_derived in
                                            {2417}let x_157: bitstring = (if v_471 then (l_142,h_141) else caught-fail) in
                                            {2418}let extra_27: bitstring = catch-fail((if v_470 then (if v_471 then hmac(@7_tls_h,handshake_secret_11,x_157) else fail-any) else fail-any)) in
                                            {2419}let v_472: bool = not-caught-fail(extra_27) in
                                            {2420}let k_39: bitstring = (if v_472 then zero else caught-fail) in
                                            {2421}let master_secret_29: bitstring = (if v_472 then catch-fail(hmac(@7_tls_h,handshake_secret_11,k_39)) else caught-fail) in
                                            {2422}let v_473: bool = not-caught-fail(master_secret_29) in
                                            {2355}let cur_log4_8: bitstring = (cur_log3_4,client_hello'_8) in
                                            {2369}let cur_log2_27: bitstring = (cur_log4_8,server_hello'_8) in
                                            {2424}let h_142: bitstring = (if v_473 then catch-fail(hash(@7_tls_h,cur_log2_27)) else caught-fail) in
                                            {2425}let v_474: bool = not-caught-fail(h_142) in
                                            {2423}let l_143: label = (if v_473 then tls13_client_handshake_traffic_secret else caught-fail) in
                                            {2426}let x_158: bitstring = (if v_474 then (l_143,h_142) else caught-fail) in
                                            {2427}let client_hts_11: bitstring = (if v_473 then catch-fail((if v_474 then hmac(@7_tls_h,handshake_secret_11,x_158) else fail-any)) else caught-fail) in
                                            {2428}let v_475: bool = not-caught-fail(client_hts_11) in
                                            {2430}let h_143: bitstring = (if v_475 then catch-fail(hash(@7_tls_h,cur_log2_27)) else caught-fail) in
                                            {2431}let v_476: bool = not-caught-fail(h_143) in
                                            {2429}let l_144: label = (if v_475 then tls13_server_handshake_traffic_secret else caught-fail) in
                                            {2432}let x_159: bitstring = (if v_476 then (l_144,h_143) else caught-fail) in
                                            {2433}let server_hts_11: bitstring = (if v_475 then catch-fail((if v_476 then hmac(@7_tls_h,handshake_secret_11,x_159) else fail-any)) else caught-fail) in
                                            {2434}let v_477: bool = not-caught-fail(server_hts_11) in
                                            {2436}let h_144: bitstring = (if v_477 then zero else caught-fail) in
                                            {2435}let l_145: label = (if v_477 then tls13_key else caught-fail) in
                                            {2437}let x_160: bitstring = (if v_477 then (l_145,h_144) else caught-fail) in
                                            {2438}let client_wkh_11: bitstring = (if v_477 then catch-fail(hmac(@7_tls_h,client_hts_11,x_160)) else caught-fail) in
                                            {2439}let v_478: bool = not-caught-fail(client_wkh_11) in
                                            {2441}let h_145: bitstring = (if v_478 then zero else caught-fail) in
                                            {2440}let l_146: label = (if v_478 then tls13_key else caught-fail) in
                                            {2442}let x_161: bitstring = (if v_478 then (l_146,h_145) else caught-fail) in
                                            {2443}let server_wkh_11: bitstring = (if v_478 then catch-fail(hmac(@7_tls_h,server_hts_11,x_161)) else caught-fail) in
                                            {2444}let v_479: bool = not-caught-fail(server_wkh_11) in
                                            {2446}let h_146: bitstring = (if v_479 then zero else caught-fail) in
                                            {2445}let l_147: label = (if v_479 then tls13_finished else caught-fail) in
                                            {2447}let x_162: bitstring = (if v_479 then (l_147,h_146) else caught-fail) in
                                            {2448}let client_fk_11: bitstring = (if v_479 then catch-fail(hmac(@7_tls_h,client_hts_11,x_162)) else caught-fail) in
                                            {2449}let v_480: bool = not-caught-fail(client_fk_11) in
                                            {2451}let h_147: bitstring = (if v_480 then zero else caught-fail) in
                                            {2450}let l_148: label = (if v_480 then tls13_finished else caught-fail) in
                                            {2452}let x_163: bitstring = (if v_480 then (l_148,h_147) else caught-fail) in
                                            {2453}let server_fk_11: bitstring = (if v_480 then catch-fail(hmac(@7_tls_h,server_hts_11,x_163)) else caught-fail) in
                                            {2454}let v_481: bool = not-caught-fail(server_fk_11) in
                                            {2455}let (master_secret_30: bitstring,chk_18: aead_key,shk_17: aead_key,cfin_18: mac_key,sfin_17: mac_key) = (if v_472 then (if v_473 then (if v_475 then (if v_477 then (if v_478 then (if v_479 then (if v_480 then (if v_481 then (master_secret_29,client_wkh_11,server_wkh_11,client_fk_11,server_fk_11) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                            {2456}event Client_chk(@7_id_client,chk_18);
                                            {2457}event Client_shk(@7_id_client,shk_17);
                                            {2458}event Client_cfin(@7_id_client,cfin_18);
                                            {2459}event Client_sfin(@7_id_client,sfin_17);
                                            {2460}in(io, enc_ee_msg_10: bitstring);
                                            {2461}let ee_msg_11: msg = aead_dec(@7_tls_a,shk_17,0,zero,enc_ee_msg_10) in
                                            {2462}let EE(ech_ee_10: echExt,extra_ee_10: extraExt) = ee_msg_11 in
                                            {2463}let cur_log2_28: bitstring = (cur_log2_27,ee_msg_11) in
                                            {2464}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_8,sr_21,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_61,safe_psk_16,@7_comp_psk,master_secret_30,chk_18,0,shk_17,1,cfin_18,sfin_17,cur_log2_28)))
                                        )
                                        else
                                            {2465}out(io, illegal_parameter)
                                    )
                                    else
                                        {2466}out(io, illegal_parameter)
                            )
                            else
                                {2467}out(io, unexpected_message)
                    )
                    else
                        {2468}out(io, illegal_parameter)
                )
                else
                    {2469}if send_kex then
                    (
                        {2470}let (x_164: bitstring,g_11: group) = kex_data_5 in
                        {2471}let (psk_offer_11: preSharedKey,id_offer_11: identityPsk,es_offer_11: bitstring,is_safe_offer_11: bool) = psk_data_11 in
                        {2472}event Client_PSKOffer(@7_id_client,psk_offer_11,id_offer_11,is_safe_offer_11);
                        {2473}event Client_Rand_client(@7_id_client,cr_14);
                        {2474}event Client_DH_client(@7_id_client,dh_pub(g_11,x_164));
                        {2475}event Client_server_domain(@7_id_client,s_dom_12);
                        {2476}let SH(sr_22: bytes32,mode_14: params) = server_hello_3 in
                        {2477}event Client_Rand_server(@7_id_client,sr_22);
                        {2478}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_11,gy_12: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_25: preSharedKeyExt) = mode_14 in
                        (
                            {2480}event Client_DH_server(@7_id_client,gy_12);
                            {2481}let v_482: bool = (psk_ext_25 = empty_psk_ext) in
                            {2482}let psk_62: preSharedKey = (if v_482 then NoPsk else caught-fail) in
                            {2484}let k_40: bitstring = (if v_482 then catch-fail(psk2b(psk_62)) else caught-fail) in
                            {2485}let v_483: bool = not-caught-fail(k_40) in
                            {2483}let s_46: bitstring = (if v_482 then zero else caught-fail) in
                            {2486}let early_secret_39: bitstring = (if v_482 then catch-fail((if v_483 then hmac(@7_tls_h,s_46,k_40) else fail-any)) else caught-fail) in
                            {2487}let v_484: bool = not-caught-fail(early_secret_39) in
                            {2489}let m_50: bitstring = (if v_484 then zero else caught-fail) in
                            {2490}let h_148: bitstring = (if v_484 then catch-fail(hash(@7_tls_h,m_50)) else caught-fail) in
                            {2491}let v_485: bool = not-caught-fail(h_148) in
                            {2488}let l_149: label = (if v_484 then tls13_ext_res_binder else caught-fail) in
                            {2492}let x_165: bitstring = (if v_485 then (l_149,h_148) else caught-fail) in
                            {2493}let binder_key_26: bitstring = (if v_484 then catch-fail((if v_485 then hmac(@7_tls_h,early_secret_39,x_165) else fail-any)) else caught-fail) in
                            {2494}let v_486: bool = not-caught-fail(binder_key_26) in
                            {2495}let v_487: bitstring = (if v_482 then catch-fail((if v_484 then (if v_486 then (early_secret_39,binder_key_26) else fail-any) else fail-any)) else caught-fail) in
                            {2496}let v_488: bool = (not-caught-fail(v_487) && success?(1-proj-2-tuple(v_487))) in
                            {2497}let kb_26: mac_key = (if v_488 then 2-proj-2-tuple(v_487) else caught-fail) in
                            {2498}let es_39: bitstring = (if v_488 then 1-proj-2-tuple(v_487) else caught-fail) in
                            {2499}let v_489: bitstring = (if not(v_482) then catch-fail(psk_data_11) else caught-fail) in
                            {2500}let v_490: bool = (not-caught-fail(v_489) && success?(1-proj-4-tuple(v_489))) in
                            {2501}let is_safe_23: bool = (if v_490 then 4-proj-4-tuple(v_489) else caught-fail) in
                            {2502}let es_40: bitstring = (if v_490 then 3-proj-4-tuple(v_489) else caught-fail) in
                            {2503}let id_30: identityPsk = (if v_490 then 2-proj-4-tuple(v_489) else caught-fail) in
                            {2504}let psk_63: preSharedKey = (if v_490 then 1-proj-4-tuple(v_489) else caught-fail) in
                            {2505}let (psk_64: preSharedKey,early_secret_40: bitstring,valid_11: bool,safe_psk_17: bool) = (if v_482 then (if v_488 then (NoPsk,es_39,true,false) else fail-any) else (if v_490 then (psk_63,es_40,((psk_63 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_25)),is_safe_23) else fail-any)) in
                            {2506}event Client_PSKChoosen(@7_id_client,psk_64,safe_psk_17);
                            {2507}if valid_11 then
                            (
                                {2510}new s_47[]: seed;
                                {2508}let gxy_23: element = catch-fail(dh_decap_fun(g_11,gy_12,x_164)) in
                                {2509}let v_491: bool = not-caught-fail(gxy_23) in
                                {2511}let gxy_24: element = (if v_491 then gxy_23 else dh_f(s_47)) in
                                {2512}event Client_DH_gxy(@7_id_client,gxy_24);
                                {2514}let m_51: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                {2515}let v_492: bool = not-caught-fail(m_51) in
                                {2516}let h_149: bitstring = (if v_492 then catch-fail(hash(@7_tls_h,m_51)) else caught-fail) in
                                {2517}let v_493: bool = not-caught-fail(h_149) in
                                {2513}let l_150: label = tls13_derived in
                                {2518}let x_166: bitstring = (if v_493 then (l_150,h_149) else caught-fail) in
                                {2519}let extra_28: bitstring = catch-fail((if v_492 then (if v_493 then hmac(@7_tls_h,early_secret_40,x_166) else fail-any) else fail-any)) in
                                {2520}let v_494: bool = not-caught-fail(extra_28) in
                                {2521}let handshake_secret_12: bitstring = (if v_494 then hmac(@7_tls_h,extra_28,gxy_24) else fail-any) in
                                {2523}let m_52: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                {2524}let v_495: bool = not-caught-fail(m_52) in
                                {2525}let h_150: bitstring = (if v_495 then catch-fail(hash(@7_tls_h,m_52)) else caught-fail) in
                                {2526}let v_496: bool = not-caught-fail(h_150) in
                                {2522}let l_151: label = tls13_derived in
                                {2527}let x_167: bitstring = (if v_496 then (l_151,h_150) else caught-fail) in
                                {2528}let extra_29: bitstring = catch-fail((if v_495 then (if v_496 then hmac(@7_tls_h,handshake_secret_12,x_167) else fail-any) else fail-any)) in
                                {2529}let v_497: bool = not-caught-fail(extra_29) in
                                {2530}let k_41: bitstring = (if v_497 then zero else caught-fail) in
                                {2531}let master_secret_31: bitstring = (if v_497 then catch-fail(hmac(@7_tls_h,handshake_secret_12,k_41)) else caught-fail) in
                                {2532}let v_498: bool = not-caught-fail(master_secret_31) in
                                {2479}let cur_log2_29: bitstring = (cur_log2_22,server_hello_3) in
                                {2534}let h_151: bitstring = (if v_498 then catch-fail(hash(@7_tls_h,cur_log2_29)) else caught-fail) in
                                {2535}let v_499: bool = not-caught-fail(h_151) in
                                {2533}let l_152: label = (if v_498 then tls13_client_handshake_traffic_secret else caught-fail) in
                                {2536}let x_168: bitstring = (if v_499 then (l_152,h_151) else caught-fail) in
                                {2537}let client_hts_12: bitstring = (if v_498 then catch-fail((if v_499 then hmac(@7_tls_h,handshake_secret_12,x_168) else fail-any)) else caught-fail) in
                                {2538}let v_500: bool = not-caught-fail(client_hts_12) in
                                {2540}let h_152: bitstring = (if v_500 then catch-fail(hash(@7_tls_h,cur_log2_29)) else caught-fail) in
                                {2541}let v_501: bool = not-caught-fail(h_152) in
                                {2539}let l_153: label = (if v_500 then tls13_server_handshake_traffic_secret else caught-fail) in
                                {2542}let x_169: bitstring = (if v_501 then (l_153,h_152) else caught-fail) in
                                {2543}let server_hts_12: bitstring = (if v_500 then catch-fail((if v_501 then hmac(@7_tls_h,handshake_secret_12,x_169) else fail-any)) else caught-fail) in
                                {2544}let v_502: bool = not-caught-fail(server_hts_12) in
                                {2546}let h_153: bitstring = (if v_502 then zero else caught-fail) in
                                {2545}let l_154: label = (if v_502 then tls13_key else caught-fail) in
                                {2547}let x_170: bitstring = (if v_502 then (l_154,h_153) else caught-fail) in
                                {2548}let client_wkh_12: bitstring = (if v_502 then catch-fail(hmac(@7_tls_h,client_hts_12,x_170)) else caught-fail) in
                                {2549}let v_503: bool = not-caught-fail(client_wkh_12) in
                                {2551}let h_154: bitstring = (if v_503 then zero else caught-fail) in
                                {2550}let l_155: label = (if v_503 then tls13_key else caught-fail) in
                                {2552}let x_171: bitstring = (if v_503 then (l_155,h_154) else caught-fail) in
                                {2553}let server_wkh_12: bitstring = (if v_503 then catch-fail(hmac(@7_tls_h,server_hts_12,x_171)) else caught-fail) in
                                {2554}let v_504: bool = not-caught-fail(server_wkh_12) in
                                {2556}let h_155: bitstring = (if v_504 then zero else caught-fail) in
                                {2555}let l_156: label = (if v_504 then tls13_finished else caught-fail) in
                                {2557}let x_172: bitstring = (if v_504 then (l_156,h_155) else caught-fail) in
                                {2558}let client_fk_12: bitstring = (if v_504 then catch-fail(hmac(@7_tls_h,client_hts_12,x_172)) else caught-fail) in
                                {2559}let v_505: bool = not-caught-fail(client_fk_12) in
                                {2561}let h_156: bitstring = (if v_505 then zero else caught-fail) in
                                {2560}let l_157: label = (if v_505 then tls13_finished else caught-fail) in
                                {2562}let x_173: bitstring = (if v_505 then (l_157,h_156) else caught-fail) in
                                {2563}let server_fk_12: bitstring = (if v_505 then catch-fail(hmac(@7_tls_h,server_hts_12,x_173)) else caught-fail) in
                                {2564}let v_506: bool = not-caught-fail(server_fk_12) in
                                {2565}let (master_secret_32: bitstring,chk_19: aead_key,shk_18: aead_key,cfin_19: mac_key,sfin_18: mac_key) = (if v_497 then (if v_498 then (if v_500 then (if v_502 then (if v_503 then (if v_504 then (if v_505 then (if v_506 then (master_secret_31,client_wkh_12,server_wkh_12,client_fk_12,server_fk_12) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                {2566}event Client_chk(@7_id_client,chk_19);
                                {2567}event Client_shk(@7_id_client,shk_18);
                                {2568}event Client_cfin(@7_id_client,cfin_19);
                                {2569}event Client_sfin(@7_id_client,sfin_18);
                                {2570}in(io, enc_ee_msg_11: bitstring);
                                {2571}let ee_msg_12: msg = aead_dec(@7_tls_a,shk_18,0,zero,enc_ee_msg_11) in
                                {2572}let EE(ech_ee_11: echExt,extra_ee_11: extraExt) = ee_msg_12 in
                                {2573}let cur_log2_30: bitstring = (cur_log2_29,ee_msg_12) in
                                {2574}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr_14,sr_22,@7_tls_h,@7_tls_a,c_dom_5,s_dom_12,psk_64,safe_psk_17,@7_comp_psk,master_secret_32,chk_19,0,shk_18,1,cfin_19,sfin_18,cur_log2_30)))
                            )
                            else
                                {2575}out(io, illegal_parameter)
                        )
                        else
                            {2576}out(io, illegal_parameter)
                    )
                    else
                        {2577}out(io, illegal_parameter)
            )
            else
                {2578}out(io, unexpected_message)
        )
) | (
    0
) | (
    {2579}!
    {2580}new id_server_4: idProc;
    {2581}in(io, s_dom_13: domain);
    {2582}event Same(s_dom_13);
    {2594}in(io, o_client_hello: msg);
    {2595}let CH(cr_16: bytes32,nego(=TLS13,c_h_alg: hash_alg,c_a_alg: aead_alg,kex_ext_5: keyShareExt,sni_ext_2: sniExt,ech_ext_6: echExt,extra_ext_3: extraExt,psk_ext_26: preSharedKeyExt)) = o_client_hello in
    (
        {2596}if (sni_ext_2 = SNI(s_dom_13)) then
        (
            {2787}get ech_configurations(ech_config(config_id: configId,ech_g_2: group,pkR_1: element,=s_dom_13,ech_h_2: hash_alg,ech_a_2: aead_alg),skR_1: bitstring) in
            {2599}new @4_st[]: stamp;
            {2597}let ech_conf: echConfig = ech_config(config_id,ech_g_2,pkR_1,s_dom_13,ech_h_2,ech_a_2) in
            {2598}let @4_x: bitstring = (ech_conf,skR_1) in
            {2600}event PreciseInput(@4_st,@4_x);
            {2601}let () = () in
            {2591}let use_ech: bool = false in
            {2583}let id_server_5: idProc = id_server_4 in
            {2602}event ServerChoosesEchConfig(id_server_5,ech_conf,use_ech);
            {2603}let v_507: echConfig = ech_conf in
            {2604}let v_508: bool = success?(1-proj-ech_config(v_507)) in
            {2605}let a_alg_8: aead_alg = (if v_508 then 6-proj-ech_config(v_507) else caught-fail) in
            {2606}let h_alg_10: hash_alg = (if v_508 then 5-proj-ech_config(v_507) else caught-fail) in
            {2607}let s_dom_14: domain = (if v_508 then 4-proj-ech_config(v_507) else caught-fail) in
            {2608}let pkR_2: element = (if v_508 then 3-proj-ech_config(v_507) else caught-fail) in
            {2609}let g_12: group = (if v_508 then 2-proj-ech_config(v_507) else caught-fail) in
            {2610}let config_id_1: configId = (if v_508 then 1-proj-ech_config(v_507) else caught-fail) in
            {2611}new s_48[]: seed;
            {2612}let gx_10: element = (if v_508 then dh_pub(g_12,dh_k(s_48)) else caught-fail) in
            {2613}let v_509: bitstring = (if v_508 then catch-fail((dh_k(s_48),gx_10)) else caught-fail) in
            {2614}let v_510: bool = (not-caught-fail(v_509) && success?(1-proj-2-tuple(v_509))) in
            {2615}let pkR': element = (if v_510 then 2-proj-2-tuple(v_509) else caught-fail) in
            {2616}let skR': bitstring = (if v_510 then 1-proj-2-tuple(v_509) else caught-fail) in
            {2617}new config_id'[]: configId;
            {2618}let retry_ech_ext: echExt = (if v_508 then (if v_510 then ECHConfigList(ech_config(config_id',g_12,pkR',s_dom_14,h_alg_10,a_alg_8)) else fail-any) else fail-any) in
            {2593}let req_cert_3: bool = true in
            {2592}let use_psk_1: bool = false in
            {2587}let tls_g_1: group = id_g(StrongDH,1) in
            {2586}let tls_a_1: aead_alg = id_aead(StrongAE,1) in
            {2585}let tls_h_1: hash_alg = id_hash(StrongHash,1) in
            {2584}let extra_ext_2: extraExt = empty_extra_ext in
            {2619}if ((use_ech ≠ true) || (ech_ext_6 = empty_ech_ext)) then
            (
                {2620}event ServerEchAcceptance(id_server_5,false);
                {2622}let CH(cr_17: bytes32,nego(=TLS13,=tls_h_1,=tls_a_1,kex_ext_6: keyShareExt,SNI(=s_dom_13),ech_ext_7: echExt,extra_ext_4: extraExt,psk_ext_27: preSharedKeyExt)) = o_client_hello in
                (
                    {2621}let ee_msg_13: msg = EE(empty_ech_ext,extra_ext_2) in
                    {2623}let (=true,client_kex_ext(DHE_group(=tls_g_1))) = (false,kex_ext_6) in
                    (
                        {2624}let hrr_mode: params = nego(TLS13,tls_h_1,tls_a_1,hrr_kex_ext(tls_g_1),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext) in
                        {2625}let hello_retry_request: msg = SH(B32(HRR24,HRR8),hrr_mode) in
                        {2626}out(io, hello_retry_request);
                        {2628}in(io, client_hello'_9: msg);
                        {2629}let CH(cr'_9: bytes32,offer': params) = client_hello'_9 in
                        (
                            {2627}let cur_log_HRR: bitstring = ((zero,o_client_hello),hello_retry_request) in
                            {2630}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_13,req_cert_3,false,use_psk_1,false,ee_msg_13,client_hello'_9,cur_log_HRR)))
                        )
                        else
                            {2631}out(io, unexpected_message)
                    )
                    else
                        {2632}let client_kex_ext(DHE_kex(=tls_g_1,gx_11: element)) = kex_ext_6 in
                            {2633}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_13,req_cert_3,false,use_psk_1,true,ee_msg_13,o_client_hello,zero)))
                        else
                            {2634}out(io, handshake_failure)
                )
                else
                    {2635}out(io, handshake_failure)
            )
            else
                {2636}let ECHClientHelloOuter(ech_h': hash_alg,ech_a': aead_alg,config_id'_1: configId,enc: element,payload: bitstring) = ech_ext_6 in
                (
                    {2637}if ((ech_h' = ech_h_2) && ((ech_a' = ech_a_2) && (config_id'_1 = config_id))) then
                    (
                        {2641}new s_49[]: seed;
                        {2645}let label_1: label = hpke_info_hash in
                        {2638}let info: bitstring = (tls_ech_str,ech_conf) in
                        {2646}let k_42: bitstring = (label_1,info) in
                        {2644}let salt: bitstring = zero in
                        {2647}let info_hash: bitstring = catch-fail(hmac(ech_h_2,salt,k_42)) in
                        {2648}let v_512: bool = not-caught-fail(info_hash) in
                        {2650}let ikm: bitstring = (if v_512 then zero else caught-fail) in
                        {2649}let label_2: label = (if v_512 then hpke_secret else caught-fail) in
                        {2651}let k_43: bitstring = (if v_512 then (label_2,ikm) else caught-fail) in
                        {2639}let gxy_25: element = catch-fail(dh_decap_fun(ech_g_2,enc,skR_1)) in
                        {2640}let v_511: bool = not-caught-fail(gxy_25) in
                        {2642}let shared_secret: element = (if v_511 then gxy_25 else dh_f(s_49)) in
                        {2652}let xsecret: bitstring = (if v_512 then catch-fail(hmac(ech_h_2,shared_secret,k_43)) else caught-fail) in
                        {2653}let v_513: bool = not-caught-fail(xsecret) in
                        {2654}let label_3: label = (if v_513 then hpke_key else caught-fail) in
                        {2655}let x_174: bitstring = (if v_513 then (label_3,info_hash) else caught-fail) in
                        {2656}let key: aead_key = (if v_513 then catch-fail(hmac(ech_h_2,xsecret,x_174)) else caught-fail) in
                        {2657}let v_514: bool = not-caught-fail(key) in
                        {2658}let label_4: label = (if v_514 then hpke_base_nonce else caught-fail) in
                        {2659}let x_175: bitstring = (if v_514 then (label_4,info_hash) else caught-fail) in
                        {2660}let base_nonce: bitstring = (if v_514 then catch-fail(hmac(ech_h_2,xsecret,x_175)) else caught-fail) in
                        {2661}let v_515: bool = not-caught-fail(base_nonce) in
                        {2643}let r: hpkeRole = R in
                        {2662}let context: hpkeContext = (if v_512 then (if v_513 then (if v_514 then (if v_515 then hpke_context(r,key,base_nonce) else fail-any) else fail-any) else fail-any) else fail-any) in
                        {2663}let v_516: msg = o_client_hello in
                        {2664}let v_517: bool = (success?(1-proj-nego(2-proj-CH(v_516))) && success?(1-proj-CH(v_516))) in
                        {2665}let psk_ext_28: preSharedKeyExt = (if v_517 then 8-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2666}let extra_ext_5: extraExt = (if v_517 then 7-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2667}let ech_ext_8: echExt = (if v_517 then 6-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2668}let sni_ext_3: sniExt = (if v_517 then 5-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2669}let kex_ext_7: keyShareExt = (if v_517 then 4-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2670}let a_alg_9: aead_alg = (if v_517 then 3-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2671}let h_alg_11: hash_alg = (if v_517 then 2-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2672}let v_518: TLS_version = (if v_517 then 1-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2673}let r_1: bytes32 = (if v_517 then 1-proj-CH(v_516) else caught-fail) in
                        {2674}let v_519: echExt = (if v_517 then catch-fail(ech_ext_8) else caught-fail) in
                        {2675}let v_520: bool = (not-caught-fail(v_519) && success?(1-proj-ECHClientHelloOuter(v_519))) in
                        {2676}let payload_1: bitstring = (if v_520 then 5-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2677}let enc_1: element = (if v_520 then 4-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2678}let config_id_2: configId = (if v_520 then 3-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2679}let a_alg_ech: aead_alg = (if v_520 then 2-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2680}let h_alg_ech: hash_alg = (if v_520 then 1-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2681}let ech_ext': echExt = (if v_520 then ECHClientHelloOuter(h_alg_ech,a_alg_ech,config_id_2,enc_1,zero) else caught-fail) in
                        {2682}let client_hello_AAD: msg = (if v_517 then (if v_520 then CH(r_1,nego(v_518,h_alg_11,a_alg_9,kex_ext_7,sni_ext_3,ech_ext',extra_ext_5,psk_ext_28)) else fail-any) else fail-any) in
                        {2684}let v_521: hpkeContext = context in
                        {2685}let v_522: bool = ((R =nf 1-proj-hpke_context(v_521)) && success?(1-proj-hpke_context(v_521))) in
                        {2686}let base_nonce_1: bitstring = (if v_522 then 3-proj-hpke_context(v_521) else caught-fail) in
                        {2687}let key_1: aead_key = (if v_522 then 2-proj-hpke_context(v_521) else caught-fail) in
                        {2683}let n: nat = 1 in
                        {2688}let i_client_hello: msg = (if v_522 then aead_dec(ech_a_2,key_1,(base_nonce_1,n),client_hello_AAD,payload) else fail-any) in
                        (
                            {2689}let CH(cr'_10: bytes32,nego(=TLS13,c_h_alg': hash_alg,c_a_alg': aead_alg,kex_ext': keyShareExt,SNI(i_dom: domain),=ECHClientHelloInner,extra_ext': extraExt,psk_ext': preSharedKeyExt)) = i_client_hello in
                            (
                                {2690}event ServerEchAcceptance(id_server_5,true);
                                {2589}let backend_a: aead_alg = id_aead(StrongAE,1) in
                                {2588}let backend_h: hash_alg = id_hash(StrongHash,1) in
                                {2692}let CH(cr_18: bytes32,nego(=TLS13,=backend_h,=backend_a,kex_ext_8: keyShareExt,SNI(i_dom_1: domain),=ECHClientHelloInner,extra_ext_6: extraExt,psk_ext_29: preSharedKeyExt)) = i_client_hello in
                                (
                                    {2691}let ee_msg_14: msg = EE(empty_ech_ext,extra_ext_2) in
                                    {2590}let backend_g: group = id_g(StrongDH,1) in
                                    {2693}let (=true,client_kex_ext(DHE_group(=backend_g))) = (false,kex_ext_8) in
                                    (
                                        {2694}let hrr_mode_1: params = nego(TLS13,backend_h,backend_a,hrr_kex_ext(backend_g),empty_sni_ext,ECHHelloRetryRequest(zero8),empty_extra_ext,empty_psk_ext) in
                                        {2695}let hrr: msg = SH(B32(HRR24,HRR8),hrr_mode_1) in
                                        {2696}let cur_log_9: bitstring = ((zero,i_client_hello),hrr) in
                                        {2697}let transcript_hrr_ech_conf: bitstring = catch-fail(hash(backend_h,cur_log_9)) in
                                        {2698}let v_523: bool = not-caught-fail(transcript_hrr_ech_conf) in
                                        {2700}let k_44: bitstring = (if v_523 then catch-fail(b32_2_b(get_random(i_client_hello))) else caught-fail) in
                                        {2701}let v_524: bool = not-caught-fail(k_44) in
                                        {2699}let s_50: bitstring = (if v_523 then zero else caught-fail) in
                                        {2702}let k_45: bitstring = (if v_523 then catch-fail((if v_524 then hmac(backend_h,s_50,k_44) else fail-any)) else caught-fail) in
                                        {2703}let v_525: bool = not-caught-fail(k_45) in
                                        {2704}let l_158: label = (if v_525 then hrr_ech_accept_confirmation else caught-fail) in
                                        {2705}let x_176: bitstring = (if v_525 then (l_158,cur_log_9) else caught-fail) in
                                        {2706}let hrr_accept_confirmation: bytes8 = catch-fail((if v_523 then crop_into_bytes8((if v_525 then hmac(backend_h,k_45,x_176) else fail-any)) else fail-any)) in
                                        {2707}let v_526: bool = not-caught-fail(hrr_accept_confirmation) in
                                        {2708}let hrr_mode_2: params = (if v_526 then nego(TLS13,backend_h,backend_a,hrr_kex_ext(backend_g),empty_sni_ext,ECHHelloRetryRequest(hrr_accept_confirmation),empty_extra_ext,empty_psk_ext) else caught-fail) in
                                        {2709}let hrr_msg: msg = (if v_526 then SH(B32(HRR24,HRR8),hrr_mode_2) else fail-any) in
                                        {2710}out(io, hrr_msg);
                                        {2711}let ech_config(id_conf: configId,ech_g_3: group,pkR_3: element,s_dom_15: domain,ech_h_3: hash_alg,ech_a_3: aead_alg) = ech_conf in
                                        {2712}in(io, o_client_hello_1: msg);
                                        {2713}let CH(cr'_11: bytes32,nego(=TLS13,h_alg': hash_alg,a_alg': aead_alg,kex_ext'_1: keyShareExt,SNI(=s_dom_15),ech_ext_9: echExt,extra_ext'_1: extraExt,psk_ext'_1: preSharedKeyExt)) = o_client_hello_1 in
                                        (
                                            {2714}if (ech_ext_9 = empty_ech_ext) then
                                                {2715}out(io, missing_extension)
                                            else
                                                {2716}let ECHClientHelloOuter(=ech_h_3,=ech_a_3,=id_conf,=zero,payload_2: bitstring) = ech_ext_9 in
                                                (
                                                    {2717}let v_527: msg = o_client_hello_1 in
                                                    {2718}let v_528: bool = (success?(1-proj-nego(2-proj-CH(v_527))) && success?(1-proj-CH(v_527))) in
                                                    {2719}let psk_ext_30: preSharedKeyExt = (if v_528 then 8-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2720}let extra_ext_7: extraExt = (if v_528 then 7-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2721}let ech_ext_10: echExt = (if v_528 then 6-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2722}let sni_ext_4: sniExt = (if v_528 then 5-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2723}let kex_ext_9: keyShareExt = (if v_528 then 4-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2724}let a_alg_10: aead_alg = (if v_528 then 3-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2725}let h_alg_12: hash_alg = (if v_528 then 2-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2726}let v_529: TLS_version = (if v_528 then 1-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2727}let r_2: bytes32 = (if v_528 then 1-proj-CH(v_527) else caught-fail) in
                                                    {2728}let v_530: echExt = (if v_528 then catch-fail(ech_ext_10) else caught-fail) in
                                                    {2729}let v_531: bool = (not-caught-fail(v_530) && success?(1-proj-ECHClientHelloOuter(v_530))) in
                                                    {2730}let payload_3: bitstring = (if v_531 then 5-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2731}let enc_2: element = (if v_531 then 4-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2732}let config_id_3: configId = (if v_531 then 3-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2733}let a_alg_ech_1: aead_alg = (if v_531 then 2-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2734}let h_alg_ech_1: hash_alg = (if v_531 then 1-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2735}let ech_ext'_1: echExt = (if v_531 then ECHClientHelloOuter(h_alg_ech_1,a_alg_ech_1,config_id_3,enc_2,zero) else caught-fail) in
                                                    {2736}let client_hello_AAD_1: msg = (if v_528 then (if v_531 then CH(r_2,nego(v_529,h_alg_12,a_alg_10,kex_ext_9,sni_ext_4,ech_ext'_1,extra_ext_7,psk_ext_30)) else fail-any) else fail-any) in
                                                    {2738}let v_532: hpkeContext = context in
                                                    {2739}let v_533: bool = ((R =nf 1-proj-hpke_context(v_532)) && success?(1-proj-hpke_context(v_532))) in
                                                    {2740}let base_nonce_2: bitstring = (if v_533 then 3-proj-hpke_context(v_532) else caught-fail) in
                                                    {2741}let key_2: aead_key = (if v_533 then 2-proj-hpke_context(v_532) else caught-fail) in
                                                    {2737}let n_1: nat = 2 in
                                                    {2742}let i_client_hello': msg = (if v_533 then aead_dec(ech_a_3,key_2,(base_nonce_2,n_1),client_hello_AAD_1,payload_2) else fail-any) in
                                                    (
                                                        {2743}let CH(i_cr: bytes32,nego(=TLS13,i_h_alg: hash_alg,i_a_alg: aead_alg,i_kex_ext: keyShareExt,SNI(=i_dom_1),=ECHClientHelloInner,i_extra_ext: extraExt,i_psk_ext: preSharedKeyExt)) = i_client_hello' in
                                                            {2744}out(ch_server_SH, (id_server_5,ArgsServerSH(backend_g,backend_h,backend_a,i_dom_1,req_cert_3,true,use_psk_1,false,ee_msg_14,i_client_hello',((zero,i_client_hello),hrr_msg))))
                                                        else
                                                            {2745}out(io, illegal_parameter)
                                                    )
                                                    else
                                                        {2746}out(io, decrypt_error)
                                                )
                                                else
                                                    {2747}out(io, illegal_parameter)
                                        )
                                        else
                                            {2748}out(io, unexpected_message)
                                    )
                                    else
                                        {2749}let client_kex_ext(DHE_kex(=backend_g,gx_12: element)) = kex_ext_8 in
                                            {2750}out(ch_server_SH, (id_server_5,ArgsServerSH(backend_g,backend_h,backend_a,i_dom_1,req_cert_3,true,use_psk_1,true,ee_msg_14,i_client_hello,zero)))
                                        else
                                            {2751}out(io, handshake_failure)
                                )
                                else
                                    {2752}out(io, handshake_failure)
                            )
                            else
                                {2753}out(io, illegal_parameter)
                        )
                        else
                            {2754}event ServerEchAcceptance(id_server_5,false);
                            {2756}let CH(cr_19: bytes32,nego(=TLS13,=tls_h_1,=tls_a_1,kex_ext_10: keyShareExt,SNI(=s_dom_13),ech_ext_11: echExt,extra_ext_8: extraExt,psk_ext_31: preSharedKeyExt)) = o_client_hello in
                            (
                                {2755}let ee_msg_15: msg = EE(retry_ech_ext,extra_ext_2) in
                                {2757}let (=true,client_kex_ext(DHE_group(=tls_g_1))) = (false,kex_ext_10) in
                                (
                                    {2758}let hrr_mode_3: params = nego(TLS13,tls_h_1,tls_a_1,hrr_kex_ext(tls_g_1),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext) in
                                    {2759}let hello_retry_request_1: msg = SH(B32(HRR24,HRR8),hrr_mode_3) in
                                    {2760}out(io, hello_retry_request_1);
                                    {2762}in(io, client_hello'_10: msg);
                                    {2763}let CH(cr'_12: bytes32,offer'_1: params) = client_hello'_10 in
                                    (
                                        {2761}let cur_log_HRR_1: bitstring = ((zero,o_client_hello),hello_retry_request_1) in
                                        {2764}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_13,req_cert_3,false,use_psk_1,false,ee_msg_15,client_hello'_10,cur_log_HRR_1)))
                                    )
                                    else
                                        {2765}out(io, unexpected_message)
                                )
                                else
                                    {2766}let client_kex_ext(DHE_kex(=tls_g_1,gx_13: element)) = kex_ext_10 in
                                        {2767}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_13,req_cert_3,false,use_psk_1,true,ee_msg_15,o_client_hello,zero)))
                                    else
                                        {2768}out(io, handshake_failure)
                            )
                            else
                                {2769}out(io, handshake_failure)
                    )
                    else
                        {2770}event ServerEchAcceptance(id_server_5,false);
                        {2772}let CH(cr_20: bytes32,nego(=TLS13,=tls_h_1,=tls_a_1,kex_ext_11: keyShareExt,SNI(=s_dom_13),ech_ext_12: echExt,extra_ext_9: extraExt,psk_ext_32: preSharedKeyExt)) = o_client_hello in
                        (
                            {2771}let ee_msg_16: msg = EE(retry_ech_ext,extra_ext_2) in
                            {2773}let (=true,client_kex_ext(DHE_group(=tls_g_1))) = (false,kex_ext_11) in
                            (
                                {2774}let hrr_mode_4: params = nego(TLS13,tls_h_1,tls_a_1,hrr_kex_ext(tls_g_1),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext) in
                                {2775}let hello_retry_request_2: msg = SH(B32(HRR24,HRR8),hrr_mode_4) in
                                {2776}out(io, hello_retry_request_2);
                                {2778}in(io, client_hello'_11: msg);
                                {2779}let CH(cr'_13: bytes32,offer'_2: params) = client_hello'_11 in
                                (
                                    {2777}let cur_log_HRR_2: bitstring = ((zero,o_client_hello),hello_retry_request_2) in
                                    {2780}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_13,req_cert_3,false,use_psk_1,false,ee_msg_16,client_hello'_11,cur_log_HRR_2)))
                                )
                                else
                                    {2781}out(io, unexpected_message)
                            )
                            else
                                {2782}let client_kex_ext(DHE_kex(=tls_g_1,gx_14: element)) = kex_ext_11 in
                                    {2783}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_13,req_cert_3,false,use_psk_1,true,ee_msg_16,o_client_hello,zero)))
                                else
                                    {2784}out(io, handshake_failure)
                        )
                        else
                            {2785}out(io, handshake_failure)
                )
                else
                    {2786}out(io, illegal_parameter)
        )
        else
            {2788}out(io, handshake_failure)
    )
    else
        {2789}out(io, unexpected_message)
) | (
    {2790}!
    {2791}in(io, ClientA_1: domain);
    {2792}in(io, ClientB_1: domain);
    {2794}in(io, s_dom_16: domain);
    {2795}event Same(s_dom_16);
    {2796}new s_51: seed;
    {2802}in(io, @8_send_kex: bool);
    {2803}event Same(@8_send_kex);
    {2804}new @8_st[]: stamp;
    {2805}event PreciseInput(@8_st,@8_send_kex);
    {2806}let () = () in
    {2811}new rand24_5[]: bytes24;
    {2812}new rand8_5[]: bytes8;
    {2814}new s_52[]: seed;
    {2800}let @8_tls_g: group = id_g(StrongDH,1) in
    {2815}let gx_15: element = dh_pub(@8_tls_g,dh_k(s_52)) in
    {2816}let v_534: bitstring = (dh_k(s_52),gx_15) in
    {2817}let v_535: bool = success?(1-proj-2-tuple(v_534)) in
    {2818}let gx_16: element = (if v_535 then 2-proj-2-tuple(v_534) else caught-fail) in
    {2819}let x_177: bitstring = (if v_535 then 1-proj-2-tuple(v_534) else caught-fail) in
    {2808}let send_kex_4: bool = (not(false) || @8_send_kex) in
    {2820}let kex_4: kex_alg = (if v_535 then (if send_kex_4 then DHE_kex(@8_tls_g,gx_16) else DHE_group(@8_tls_g)) else caught-fail) in
    {2821}let (kex_ext_12: keyShareExt,kex_data_7: bitstring) = (if v_535 then (client_kex_ext(kex_4),(x_177,@8_tls_g)) else fail-any) in
    {2813}let cr_21: bytes32 = B32(rand24_5,rand8_5) in
    {2809}let cur_log_10: bitstring = zero in
    {2807}let @8_comp_psk: bool = false in
    {2801}let @8_use_psk: bool = false in
    {2799}let @8_tls_a: aead_alg = id_aead(StrongAE,1) in
    {2798}let @8_tls_h: hash_alg = id_hash(StrongHash,1) in
    {2797}let id_client_4: idProc = idClientDiff(s_51) in
    {2793}let c_dom_6: domain = choice[ClientA_1,ClientB_1] in
    {2824}if @8_use_psk then
    (
        {2823}let extra_30: extraExt = empty_extra_ext in
        {2822}let ech_ext_13: echExt = empty_ech_ext in
        {2810}let old_psk_data_1: bitstring = zero in
        {2825}let (psk_65: preSharedKey,id_31: identityPsk,old_es_4: bitstring,is_safe_24: bool) = old_psk_data_1 in
        (
            {2829}let k_46: bitstring = catch-fail(psk2b(psk_65)) in
            {2830}let v_536: bool = not-caught-fail(k_46) in
            {2828}let s_53: bitstring = zero in
            {2831}let early_secret_41: bitstring = catch-fail((if v_536 then hmac(@8_tls_h,s_53,k_46) else fail-any)) in
            {2832}let v_537: bool = not-caught-fail(early_secret_41) in
            {2834}let m_53: bitstring = (if v_537 then zero else caught-fail) in
            {2835}let h_157: bitstring = (if v_537 then catch-fail(hash(@8_tls_h,m_53)) else caught-fail) in
            {2836}let v_538: bool = not-caught-fail(h_157) in
            {2833}let l_159: label = (if v_537 then tls13_ext_res_binder else caught-fail) in
            {2837}let x_178: bitstring = (if v_538 then (l_159,h_157) else caught-fail) in
            {2838}let binder_key_27: bitstring = (if v_537 then catch-fail((if v_538 then hmac(@8_tls_h,early_secret_41,x_178) else fail-any)) else caught-fail) in
            {2839}let v_539: bool = not-caught-fail(binder_key_27) in
            {2840}let v_540: bitstring = catch-fail((if v_537 then (if v_539 then (early_secret_41,binder_key_27) else fail-any) else fail-any)) in
            {2841}let v_541: bool = (not-caught-fail(v_540) && success?(1-proj-2-tuple(v_540))) in
            {2842}let kb_27: mac_key = (if v_541 then 2-proj-2-tuple(v_540) else caught-fail) in
            {2843}let es_41: bitstring = (if v_541 then 1-proj-2-tuple(v_540) else caught-fail) in
            {2826}let offer_22: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_16),ech_ext_13,extra_30,trunc_client_psk_ext(id_31)) in
            {2827}let cur_log'_10: bitstring = (cur_log_10,CH(cr_21,offer_22)) in
            {2844}let binders_9: bitstring = (if v_541 then catch-fail(hmac(@8_tls_h,kb_27,cur_log'_10)) else caught-fail) in
            {2845}let v_542: bool = not-caught-fail(binders_9) in
            {2846}let v_543: bitstring = catch-fail((if v_541 then (if v_542 then (client_psk_ext(id_31,binders_9),(psk_65,id_31,es_41,is_safe_24)) else fail-any) else fail-any)) in
            {2847}let v_544: bool = (not-caught-fail(v_543) && success?(1-proj-2-tuple(v_543))) in
            {2848}let psk_data_15: bitstring = (if v_544 then 2-proj-2-tuple(v_543) else caught-fail) in
            {2849}let psk_ext_33: preSharedKeyExt = (if v_544 then 1-proj-2-tuple(v_543) else caught-fail) in
            {2850}let offer_23: params = (if v_544 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_33) else caught-fail) in
            {2851}let (client_hello_7: msg,cr_22: bytes32,kex_data_8: bitstring,psk_data_16: bitstring) = (if v_544 then (CH(cr_21,offer_23),cr_21,kex_data_7,psk_data_15) else fail-any) in
            {2852}event ClientOffersAead(cr_22,@8_tls_a);
            {2853}event ClientOffersHash(cr_22,@8_tls_h);
            {2854}event ClientOffersGroup(cr_22,@8_tls_g);
            {2855}out(io, client_hello_7);
            {2857}let (psk_66: preSharedKey,id_32: identityPsk,es_42: bitstring,safe_psk_18: bool) = psk_data_16 in
            (
                {2858}if (false && (psk_66 ≠ NoPsk)) then
                {2859}let client_hello_8: bitstring = (zero,client_hello_7) in
                {2861}let h_158: bitstring = catch-fail(hash(@8_tls_h,client_hello_8)) in
                {2862}let v_545: bool = not-caught-fail(h_158) in
                {2860}let l_160: label = tls13_client_early_traffic_secret in
                {2863}let x_179: bitstring = (if v_545 then (l_160,h_158) else caught-fail) in
                {2864}let atsc0_4: bitstring = catch-fail((if v_545 then hmac(@8_tls_h,es_42,x_179) else fail-any)) in
                {2865}let v_546: bool = not-caught-fail(atsc0_4) in
                {2867}let h_159: bitstring = (if v_546 then zero else caught-fail) in
                {2866}let l_161: label = (if v_546 then tls13_key else caught-fail) in
                {2868}let x_180: bitstring = (if v_546 then (l_161,h_159) else caught-fail) in
                {2869}let kc0_4: bitstring = (if v_546 then catch-fail(hmac(@8_tls_h,atsc0_4,x_180)) else caught-fail) in
                {2870}let v_547: bool = not-caught-fail(kc0_4) in
                {2872}let h_160: bitstring = (if v_547 then catch-fail(hash(@8_tls_h,client_hello_8)) else caught-fail) in
                {2873}let v_548: bool = not-caught-fail(h_160) in
                {2871}let l_162: label = (if v_547 then tls13_early_exporter_master_secret else caught-fail) in
                {2874}let x_181: bitstring = (if v_548 then (l_162,h_160) else caught-fail) in
                {2875}let ems0_8: bitstring = (if v_547 then catch-fail((if v_548 then hmac(@8_tls_h,es_42,x_181) else fail-any)) else caught-fail) in
                {2876}let v_549: bool = not-caught-fail(ems0_8) in
                {2877}let (wkc0_4: aead_key,ems0_9: bitstring) = (if v_546 then (if v_547 then (if v_549 then (kc0_4,ems0_8) else fail-any) else fail-any) else fail-any) in
                {2878}!
                {2879}in(io, (i_4: nat,ad_4: bitstring));
                {2880}if is_nat(i_4) then
                {2881}new msg_ed_3[]: bitstring;
                {2883}new st_13: stamp;
                {2884}event ClientSequenceClient0RTTDataWriteKey(id_client_4,st_13,i_4);
                {2885}event ClientSends0(id_client_4,cr_22,psk_66,i_4,ad_4,msg_ed_3);
                {2882}let enc_ed_3: bitstring = aead_enc(@8_tls_a,wkc0_4,i_4,ad_4,msg_ed_3) in
                {2886}out(io, enc_ed_3)
            ) | (
                {2887}in(io, server_hello_4: msg);
                {2888}let SH(sr_23: bytes32,mode_15: params) = server_hello_4 in
                (
                    {2889}event ClientEchAcceptance(id_client_4,false);
                    {2856}let cur_log2_31: bitstring = (cur_log_10,client_hello_7) in
                    {2890}if (false && (sr_23 = B32(HRR24,HRR8))) then
                    (
                        {2891}if ((mode_15 = nego(TLS13,@8_tls_h,@8_tls_a,hrr_kex_ext(@8_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex_4 ≠ true)) then
                        (
                            {2894}new rand24_6[]: bytes24;
                            {2895}new rand8_6[]: bytes8;
                            {2897}new s_54[]: seed;
                            {2898}let gx_17: element = dh_pub(@8_tls_g,dh_k(s_54)) in
                            {2899}let v_550: bitstring = (dh_k(s_54),gx_17) in
                            {2900}let v_551: bool = success?(1-proj-2-tuple(v_550)) in
                            {2901}let gx_18: element = (if v_551 then 2-proj-2-tuple(v_550) else caught-fail) in
                            {2902}let x_182: bitstring = (if v_551 then 1-proj-2-tuple(v_550) else caught-fail) in
                            {2893}let send_kex_5: bool = true in
                            {2903}let kex_5: kex_alg = (if v_551 then (if send_kex_5 then DHE_kex(@8_tls_g,gx_18) else DHE_group(@8_tls_g)) else caught-fail) in
                            {2904}let (kex_ext_13: keyShareExt,kex_data_9: bitstring) = (if v_551 then (client_kex_ext(kex_5),(x_182,@8_tls_g)) else fail-any) in
                            {2896}let cr_23: bytes32 = B32(rand24_6,rand8_6) in
                            {2892}let cur_log3_5: bitstring = (cur_log2_31,server_hello_4) in
                            {2907}if @8_use_psk then
                            (
                                {2906}let extra_31: extraExt = empty_extra_ext in
                                {2905}let ech_ext_14: echExt = empty_ech_ext in
                                {2908}let (psk_67: preSharedKey,id_33: identityPsk,old_es_5: bitstring,is_safe_25: bool) = psk_data_16 in
                                (
                                    {2912}let k_47: bitstring = catch-fail(psk2b(psk_67)) in
                                    {2913}let v_552: bool = not-caught-fail(k_47) in
                                    {2911}let s_55: bitstring = zero in
                                    {2914}let early_secret_42: bitstring = catch-fail((if v_552 then hmac(@8_tls_h,s_55,k_47) else fail-any)) in
                                    {2915}let v_553: bool = not-caught-fail(early_secret_42) in
                                    {2917}let m_54: bitstring = (if v_553 then zero else caught-fail) in
                                    {2918}let h_161: bitstring = (if v_553 then catch-fail(hash(@8_tls_h,m_54)) else caught-fail) in
                                    {2919}let v_554: bool = not-caught-fail(h_161) in
                                    {2916}let l_163: label = (if v_553 then tls13_ext_res_binder else caught-fail) in
                                    {2920}let x_183: bitstring = (if v_554 then (l_163,h_161) else caught-fail) in
                                    {2921}let binder_key_28: bitstring = (if v_553 then catch-fail((if v_554 then hmac(@8_tls_h,early_secret_42,x_183) else fail-any)) else caught-fail) in
                                    {2922}let v_555: bool = not-caught-fail(binder_key_28) in
                                    {2923}let v_556: bitstring = catch-fail((if v_553 then (if v_555 then (early_secret_42,binder_key_28) else fail-any) else fail-any)) in
                                    {2924}let v_557: bool = (not-caught-fail(v_556) && success?(1-proj-2-tuple(v_556))) in
                                    {2925}let kb_28: mac_key = (if v_557 then 2-proj-2-tuple(v_556) else caught-fail) in
                                    {2926}let es_43: bitstring = (if v_557 then 1-proj-2-tuple(v_556) else caught-fail) in
                                    {2909}let offer_24: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_16),ech_ext_14,extra_31,trunc_client_psk_ext(id_33)) in
                                    {2910}let cur_log'_11: bitstring = (cur_log3_5,CH(cr_23,offer_24)) in
                                    {2927}let binders_10: bitstring = (if v_557 then catch-fail(hmac(@8_tls_h,kb_28,cur_log'_11)) else caught-fail) in
                                    {2928}let v_558: bool = not-caught-fail(binders_10) in
                                    {2929}let v_559: bitstring = catch-fail((if v_557 then (if v_558 then (client_psk_ext(id_33,binders_10),(psk_67,id_33,es_43,is_safe_25)) else fail-any) else fail-any)) in
                                    {2930}let v_560: bool = (not-caught-fail(v_559) && success?(1-proj-2-tuple(v_559))) in
                                    {2931}let psk_data_17: bitstring = (if v_560 then 2-proj-2-tuple(v_559) else caught-fail) in
                                    {2932}let psk_ext_34: preSharedKeyExt = (if v_560 then 1-proj-2-tuple(v_559) else caught-fail) in
                                    {2933}let offer_25: params = (if v_560 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_34) else caught-fail) in
                                    {2934}let (client_hello'_12: msg,cr'_14: bytes32,kex_data'_9: bitstring,psk_data'_9: bitstring) = (if v_560 then (CH(cr_23,offer_25),cr_23,kex_data_9,psk_data_17) else fail-any) in
                                    {2935}event ClientOffersAead(cr'_14,@8_tls_a);
                                    {2936}event ClientOffersHash(cr'_14,@8_tls_h);
                                    {2937}event ClientOffersGroup(cr'_14,@8_tls_g);
                                    {2938}out(io, client_hello'_12);
                                    {2940}in(io, server_hello'_9: msg);
                                    {2941}let SH(sr'_9: bytes32,mode'_9: params) = server_hello'_9 in
                                    (
                                        {2942}if (sr'_9 = B32(HRR24,HRR8)) then
                                            {2943}out(io, unexpected_message)
                                        else
                                            {2944}let (x_184: bitstring,g_13: group) = kex_data'_9 in
                                            {2945}let (psk_offer_12: preSharedKey,id_offer_12: identityPsk,es_offer_12: bitstring,is_safe_offer_12: bool) = psk_data'_9 in
                                            {2946}event Client_PSKOffer(id_client_4,psk_offer_12,id_offer_12,is_safe_offer_12);
                                            {2947}event Client_Rand_client(id_client_4,cr'_14);
                                            {2948}event Client_DH_client(id_client_4,dh_pub(g_13,x_184));
                                            {2949}event Client_server_domain(id_client_4,s_dom_16);
                                            {2950}let SH(sr_24: bytes32,mode_16: params) = server_hello'_9 in
                                            {2951}event Client_Rand_server(id_client_4,sr_24);
                                            {2952}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_13,gy_13: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_35: preSharedKeyExt) = mode_16 in
                                            (
                                                {2954}event Client_DH_server(id_client_4,gy_13);
                                                {2955}let v_561: bool = (psk_ext_35 = empty_psk_ext) in
                                                {2956}let psk_68: preSharedKey = (if v_561 then NoPsk else caught-fail) in
                                                {2958}let k_48: bitstring = (if v_561 then catch-fail(psk2b(psk_68)) else caught-fail) in
                                                {2959}let v_562: bool = not-caught-fail(k_48) in
                                                {2957}let s_56: bitstring = (if v_561 then zero else caught-fail) in
                                                {2960}let early_secret_43: bitstring = (if v_561 then catch-fail((if v_562 then hmac(@8_tls_h,s_56,k_48) else fail-any)) else caught-fail) in
                                                {2961}let v_563: bool = not-caught-fail(early_secret_43) in
                                                {2963}let m_55: bitstring = (if v_563 then zero else caught-fail) in
                                                {2964}let h_162: bitstring = (if v_563 then catch-fail(hash(@8_tls_h,m_55)) else caught-fail) in
                                                {2965}let v_564: bool = not-caught-fail(h_162) in
                                                {2962}let l_164: label = (if v_563 then tls13_ext_res_binder else caught-fail) in
                                                {2966}let x_185: bitstring = (if v_564 then (l_164,h_162) else caught-fail) in
                                                {2967}let binder_key_29: bitstring = (if v_563 then catch-fail((if v_564 then hmac(@8_tls_h,early_secret_43,x_185) else fail-any)) else caught-fail) in
                                                {2968}let v_565: bool = not-caught-fail(binder_key_29) in
                                                {2969}let v_566: bitstring = (if v_561 then catch-fail((if v_563 then (if v_565 then (early_secret_43,binder_key_29) else fail-any) else fail-any)) else caught-fail) in
                                                {2970}let v_567: bool = (not-caught-fail(v_566) && success?(1-proj-2-tuple(v_566))) in
                                                {2971}let kb_29: mac_key = (if v_567 then 2-proj-2-tuple(v_566) else caught-fail) in
                                                {2972}let es_44: bitstring = (if v_567 then 1-proj-2-tuple(v_566) else caught-fail) in
                                                {2973}let v_568: bitstring = (if not(v_561) then catch-fail(psk_data'_9) else caught-fail) in
                                                {2974}let v_569: bool = (not-caught-fail(v_568) && success?(1-proj-4-tuple(v_568))) in
                                                {2975}let is_safe_26: bool = (if v_569 then 4-proj-4-tuple(v_568) else caught-fail) in
                                                {2976}let es_45: bitstring = (if v_569 then 3-proj-4-tuple(v_568) else caught-fail) in
                                                {2977}let id_34: identityPsk = (if v_569 then 2-proj-4-tuple(v_568) else caught-fail) in
                                                {2978}let psk_69: preSharedKey = (if v_569 then 1-proj-4-tuple(v_568) else caught-fail) in
                                                {2979}let (psk_70: preSharedKey,early_secret_44: bitstring,valid_12: bool,safe_psk_19: bool) = (if v_561 then (if v_567 then (NoPsk,es_44,true,false) else fail-any) else (if v_569 then (psk_69,es_45,((psk_69 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_35)),is_safe_26) else fail-any)) in
                                                {2980}event Client_PSKChoosen(id_client_4,psk_70,safe_psk_19);
                                                {2981}if valid_12 then
                                                (
                                                    {2984}new s_57[]: seed;
                                                    {2982}let gxy_26: element = catch-fail(dh_decap_fun(g_13,gy_13,x_184)) in
                                                    {2983}let v_570: bool = not-caught-fail(gxy_26) in
                                                    {2985}let gxy_27: element = (if v_570 then gxy_26 else dh_f(s_57)) in
                                                    {2986}event Client_DH_gxy(id_client_4,gxy_27);
                                                    {2988}let m_56: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {2989}let v_571: bool = not-caught-fail(m_56) in
                                                    {2990}let h_163: bitstring = (if v_571 then catch-fail(hash(@8_tls_h,m_56)) else caught-fail) in
                                                    {2991}let v_572: bool = not-caught-fail(h_163) in
                                                    {2987}let l_165: label = tls13_derived in
                                                    {2992}let x_186: bitstring = (if v_572 then (l_165,h_163) else caught-fail) in
                                                    {2993}let extra_32: bitstring = catch-fail((if v_571 then (if v_572 then hmac(@8_tls_h,early_secret_44,x_186) else fail-any) else fail-any)) in
                                                    {2994}let v_573: bool = not-caught-fail(extra_32) in
                                                    {2995}let handshake_secret_13: bitstring = (if v_573 then hmac(@8_tls_h,extra_32,gxy_27) else fail-any) in
                                                    {2997}let m_57: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {2998}let v_574: bool = not-caught-fail(m_57) in
                                                    {2999}let h_164: bitstring = (if v_574 then catch-fail(hash(@8_tls_h,m_57)) else caught-fail) in
                                                    {3000}let v_575: bool = not-caught-fail(h_164) in
                                                    {2996}let l_166: label = tls13_derived in
                                                    {3001}let x_187: bitstring = (if v_575 then (l_166,h_164) else caught-fail) in
                                                    {3002}let extra_33: bitstring = catch-fail((if v_574 then (if v_575 then hmac(@8_tls_h,handshake_secret_13,x_187) else fail-any) else fail-any)) in
                                                    {3003}let v_576: bool = not-caught-fail(extra_33) in
                                                    {3004}let k_49: bitstring = (if v_576 then zero else caught-fail) in
                                                    {3005}let master_secret_33: bitstring = (if v_576 then catch-fail(hmac(@8_tls_h,handshake_secret_13,k_49)) else caught-fail) in
                                                    {3006}let v_577: bool = not-caught-fail(master_secret_33) in
                                                    {2939}let cur_log4_9: bitstring = (cur_log3_5,client_hello'_12) in
                                                    {2953}let cur_log2_32: bitstring = (cur_log4_9,server_hello'_9) in
                                                    {3008}let h_165: bitstring = (if v_577 then catch-fail(hash(@8_tls_h,cur_log2_32)) else caught-fail) in
                                                    {3009}let v_578: bool = not-caught-fail(h_165) in
                                                    {3007}let l_167: label = (if v_577 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3010}let x_188: bitstring = (if v_578 then (l_167,h_165) else caught-fail) in
                                                    {3011}let client_hts_13: bitstring = (if v_577 then catch-fail((if v_578 then hmac(@8_tls_h,handshake_secret_13,x_188) else fail-any)) else caught-fail) in
                                                    {3012}let v_579: bool = not-caught-fail(client_hts_13) in
                                                    {3014}let h_166: bitstring = (if v_579 then catch-fail(hash(@8_tls_h,cur_log2_32)) else caught-fail) in
                                                    {3015}let v_580: bool = not-caught-fail(h_166) in
                                                    {3013}let l_168: label = (if v_579 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3016}let x_189: bitstring = (if v_580 then (l_168,h_166) else caught-fail) in
                                                    {3017}let server_hts_13: bitstring = (if v_579 then catch-fail((if v_580 then hmac(@8_tls_h,handshake_secret_13,x_189) else fail-any)) else caught-fail) in
                                                    {3018}let v_581: bool = not-caught-fail(server_hts_13) in
                                                    {3020}let h_167: bitstring = (if v_581 then zero else caught-fail) in
                                                    {3019}let l_169: label = (if v_581 then tls13_key else caught-fail) in
                                                    {3021}let x_190: bitstring = (if v_581 then (l_169,h_167) else caught-fail) in
                                                    {3022}let client_wkh_13: bitstring = (if v_581 then catch-fail(hmac(@8_tls_h,client_hts_13,x_190)) else caught-fail) in
                                                    {3023}let v_582: bool = not-caught-fail(client_wkh_13) in
                                                    {3025}let h_168: bitstring = (if v_582 then zero else caught-fail) in
                                                    {3024}let l_170: label = (if v_582 then tls13_key else caught-fail) in
                                                    {3026}let x_191: bitstring = (if v_582 then (l_170,h_168) else caught-fail) in
                                                    {3027}let server_wkh_13: bitstring = (if v_582 then catch-fail(hmac(@8_tls_h,server_hts_13,x_191)) else caught-fail) in
                                                    {3028}let v_583: bool = not-caught-fail(server_wkh_13) in
                                                    {3030}let h_169: bitstring = (if v_583 then zero else caught-fail) in
                                                    {3029}let l_171: label = (if v_583 then tls13_finished else caught-fail) in
                                                    {3031}let x_192: bitstring = (if v_583 then (l_171,h_169) else caught-fail) in
                                                    {3032}let client_fk_13: bitstring = (if v_583 then catch-fail(hmac(@8_tls_h,client_hts_13,x_192)) else caught-fail) in
                                                    {3033}let v_584: bool = not-caught-fail(client_fk_13) in
                                                    {3035}let h_170: bitstring = (if v_584 then zero else caught-fail) in
                                                    {3034}let l_172: label = (if v_584 then tls13_finished else caught-fail) in
                                                    {3036}let x_193: bitstring = (if v_584 then (l_172,h_170) else caught-fail) in
                                                    {3037}let server_fk_13: bitstring = (if v_584 then catch-fail(hmac(@8_tls_h,server_hts_13,x_193)) else caught-fail) in
                                                    {3038}let v_585: bool = not-caught-fail(server_fk_13) in
                                                    {3039}let (master_secret_34: bitstring,chk_20: aead_key,shk_19: aead_key,cfin_20: mac_key,sfin_19: mac_key) = (if v_576 then (if v_577 then (if v_579 then (if v_581 then (if v_582 then (if v_583 then (if v_584 then (if v_585 then (master_secret_33,client_wkh_13,server_wkh_13,client_fk_13,server_fk_13) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3040}event Client_chk(id_client_4,chk_20);
                                                    {3041}event Client_shk(id_client_4,shk_19);
                                                    {3042}event Client_cfin(id_client_4,cfin_20);
                                                    {3043}event Client_sfin(id_client_4,sfin_19);
                                                    {3044}in(io, enc_ee_msg_12: bitstring);
                                                    {3045}let ee_msg_17: msg = aead_dec(@8_tls_a,shk_19,0,zero,enc_ee_msg_12) in
                                                    {3046}let EE(ech_ee_12: echExt,extra_ee_12: extraExt) = ee_msg_17 in
                                                    {3047}let cur_log2_33: bitstring = (cur_log2_32,ee_msg_17) in
                                                    {3048}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_14,sr_24,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_70,safe_psk_19,@8_comp_psk,master_secret_34,chk_20,0,shk_19,1,cfin_20,sfin_19,cur_log2_33)))
                                                )
                                                else
                                                    {3049}out(io, illegal_parameter)
                                            )
                                            else
                                                {3050}out(io, illegal_parameter)
                                    )
                                    else
                                        {3051}out(io, unexpected_message)
                                )
                                else
                                    {3204}get pre_shared_keys(c_dom'_6: domain,=s_dom_16,=@8_tls_h,id_35: identityPsk,psk_71: preSharedKey,idP_8: idProc,is_safe_27: bool) in
                                    {3052}event Selected_one_time_used_psk(id_client_4,psk_71,is_safe_27);
                                    {3053}event Selected_psk(c_dom_6,c_dom'_6,idP_8,is_safe_27);
                                    {3054}event Selected_psk_no_missmatch(id_client_4,s_dom_16,@8_tls_h,psk_71,id_35);
                                    {3055}event Selected_psk_with_ID(c_dom_6,c_dom'_6,id_35,idP_8,is_safe_27);
                                    {3056}let v_586: bitstring = (id_35,psk_71,is_safe_27) in
                                    {3057}let v_587: bool = success?(1-proj-3-tuple(v_586)) in
                                    {3058}let is_safe_28: bool = (if v_587 then 3-proj-3-tuple(v_586) else caught-fail) in
                                    {3059}let psk_72: preSharedKey = (if v_587 then 2-proj-3-tuple(v_586) else caught-fail) in
                                    {3060}let id_36: identityPsk = (if v_587 then 1-proj-3-tuple(v_586) else caught-fail) in
                                    {3064}let k_50: bitstring = (if v_587 then catch-fail(psk2b(psk_72)) else caught-fail) in
                                    {3065}let v_588: bool = not-caught-fail(k_50) in
                                    {3063}let s_58: bitstring = (if v_587 then zero else caught-fail) in
                                    {3066}let early_secret_45: bitstring = (if v_587 then catch-fail((if v_588 then hmac(@8_tls_h,s_58,k_50) else fail-any)) else caught-fail) in
                                    {3067}let v_589: bool = not-caught-fail(early_secret_45) in
                                    {3069}let m_58: bitstring = (if v_589 then zero else caught-fail) in
                                    {3070}let h_171: bitstring = (if v_589 then catch-fail(hash(@8_tls_h,m_58)) else caught-fail) in
                                    {3071}let v_590: bool = not-caught-fail(h_171) in
                                    {3068}let l_173: label = (if v_589 then tls13_ext_res_binder else caught-fail) in
                                    {3072}let x_194: bitstring = (if v_590 then (l_173,h_171) else caught-fail) in
                                    {3073}let binder_key_30: bitstring = (if v_589 then catch-fail((if v_590 then hmac(@8_tls_h,early_secret_45,x_194) else fail-any)) else caught-fail) in
                                    {3074}let v_591: bool = not-caught-fail(binder_key_30) in
                                    {3075}let v_592: bitstring = (if v_587 then catch-fail((if v_589 then (if v_591 then (early_secret_45,binder_key_30) else fail-any) else fail-any)) else caught-fail) in
                                    {3076}let v_593: bool = (not-caught-fail(v_592) && success?(1-proj-2-tuple(v_592))) in
                                    {3077}let kb_30: mac_key = (if v_593 then 2-proj-2-tuple(v_592) else caught-fail) in
                                    {3078}let es_46: bitstring = (if v_593 then 1-proj-2-tuple(v_592) else caught-fail) in
                                    {3061}let offer_26: params = (if v_587 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_16),ech_ext_14,extra_31,trunc_client_psk_ext(id_36)) else caught-fail) in
                                    {3062}let cur_log'_12: bitstring = (if v_587 then (cur_log3_5,CH(cr_23,offer_26)) else caught-fail) in
                                    {3079}let binders_11: bitstring = (if v_593 then catch-fail(hmac(@8_tls_h,kb_30,cur_log'_12)) else caught-fail) in
                                    {3080}let v_594: bool = not-caught-fail(binders_11) in
                                    {3081}let v_595: bitstring = catch-fail((if v_587 then (if v_593 then (if v_594 then (client_psk_ext(id_36,binders_11),(psk_72,id_36,es_46,is_safe_28)) else fail-any) else fail-any) else fail-any)) in
                                    {3082}let v_596: bool = (not-caught-fail(v_595) && success?(1-proj-2-tuple(v_595))) in
                                    {3083}let psk_data_18: bitstring = (if v_596 then 2-proj-2-tuple(v_595) else caught-fail) in
                                    {3084}let psk_ext_36: preSharedKeyExt = (if v_596 then 1-proj-2-tuple(v_595) else caught-fail) in
                                    {3085}let offer_27: params = (if v_596 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_36) else caught-fail) in
                                    {3086}let (client_hello'_13: msg,cr'_15: bytes32,kex_data'_10: bitstring,psk_data'_10: bitstring) = (if v_596 then (CH(cr_23,offer_27),cr_23,kex_data_9,psk_data_18) else fail-any) in
                                    {3087}event ClientOffersAead(cr'_15,@8_tls_a);
                                    {3088}event ClientOffersHash(cr'_15,@8_tls_h);
                                    {3089}event ClientOffersGroup(cr'_15,@8_tls_g);
                                    {3090}out(io, client_hello'_13);
                                    {3092}in(io, server_hello'_10: msg);
                                    {3093}let SH(sr'_10: bytes32,mode'_10: params) = server_hello'_10 in
                                    (
                                        {3094}if (sr'_10 = B32(HRR24,HRR8)) then
                                            {3095}out(io, unexpected_message)
                                        else
                                            {3096}let (x_195: bitstring,g_14: group) = kex_data'_10 in
                                            {3097}let (psk_offer_13: preSharedKey,id_offer_13: identityPsk,es_offer_13: bitstring,is_safe_offer_13: bool) = psk_data'_10 in
                                            {3098}event Client_PSKOffer(id_client_4,psk_offer_13,id_offer_13,is_safe_offer_13);
                                            {3099}event Client_Rand_client(id_client_4,cr'_15);
                                            {3100}event Client_DH_client(id_client_4,dh_pub(g_14,x_195));
                                            {3101}event Client_server_domain(id_client_4,s_dom_16);
                                            {3102}let SH(sr_25: bytes32,mode_17: params) = server_hello'_10 in
                                            {3103}event Client_Rand_server(id_client_4,sr_25);
                                            {3104}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_14,gy_14: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_37: preSharedKeyExt) = mode_17 in
                                            (
                                                {3106}event Client_DH_server(id_client_4,gy_14);
                                                {3107}let v_597: bool = (psk_ext_37 = empty_psk_ext) in
                                                {3108}let psk_73: preSharedKey = (if v_597 then NoPsk else caught-fail) in
                                                {3110}let k_51: bitstring = (if v_597 then catch-fail(psk2b(psk_73)) else caught-fail) in
                                                {3111}let v_598: bool = not-caught-fail(k_51) in
                                                {3109}let s_59: bitstring = (if v_597 then zero else caught-fail) in
                                                {3112}let early_secret_46: bitstring = (if v_597 then catch-fail((if v_598 then hmac(@8_tls_h,s_59,k_51) else fail-any)) else caught-fail) in
                                                {3113}let v_599: bool = not-caught-fail(early_secret_46) in
                                                {3115}let m_59: bitstring = (if v_599 then zero else caught-fail) in
                                                {3116}let h_172: bitstring = (if v_599 then catch-fail(hash(@8_tls_h,m_59)) else caught-fail) in
                                                {3117}let v_600: bool = not-caught-fail(h_172) in
                                                {3114}let l_174: label = (if v_599 then tls13_ext_res_binder else caught-fail) in
                                                {3118}let x_196: bitstring = (if v_600 then (l_174,h_172) else caught-fail) in
                                                {3119}let binder_key_31: bitstring = (if v_599 then catch-fail((if v_600 then hmac(@8_tls_h,early_secret_46,x_196) else fail-any)) else caught-fail) in
                                                {3120}let v_601: bool = not-caught-fail(binder_key_31) in
                                                {3121}let v_602: bitstring = (if v_597 then catch-fail((if v_599 then (if v_601 then (early_secret_46,binder_key_31) else fail-any) else fail-any)) else caught-fail) in
                                                {3122}let v_603: bool = (not-caught-fail(v_602) && success?(1-proj-2-tuple(v_602))) in
                                                {3123}let kb_31: mac_key = (if v_603 then 2-proj-2-tuple(v_602) else caught-fail) in
                                                {3124}let es_47: bitstring = (if v_603 then 1-proj-2-tuple(v_602) else caught-fail) in
                                                {3125}let v_604: bitstring = (if not(v_597) then catch-fail(psk_data'_10) else caught-fail) in
                                                {3126}let v_605: bool = (not-caught-fail(v_604) && success?(1-proj-4-tuple(v_604))) in
                                                {3127}let is_safe_29: bool = (if v_605 then 4-proj-4-tuple(v_604) else caught-fail) in
                                                {3128}let es_48: bitstring = (if v_605 then 3-proj-4-tuple(v_604) else caught-fail) in
                                                {3129}let id_37: identityPsk = (if v_605 then 2-proj-4-tuple(v_604) else caught-fail) in
                                                {3130}let psk_74: preSharedKey = (if v_605 then 1-proj-4-tuple(v_604) else caught-fail) in
                                                {3131}let (psk_75: preSharedKey,early_secret_47: bitstring,valid_13: bool,safe_psk_20: bool) = (if v_597 then (if v_603 then (NoPsk,es_47,true,false) else fail-any) else (if v_605 then (psk_74,es_48,((psk_74 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_37)),is_safe_29) else fail-any)) in
                                                {3132}event Client_PSKChoosen(id_client_4,psk_75,safe_psk_20);
                                                {3133}if valid_13 then
                                                (
                                                    {3136}new s_60[]: seed;
                                                    {3134}let gxy_28: element = catch-fail(dh_decap_fun(g_14,gy_14,x_195)) in
                                                    {3135}let v_606: bool = not-caught-fail(gxy_28) in
                                                    {3137}let gxy_29: element = (if v_606 then gxy_28 else dh_f(s_60)) in
                                                    {3138}event Client_DH_gxy(id_client_4,gxy_29);
                                                    {3140}let m_60: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3141}let v_607: bool = not-caught-fail(m_60) in
                                                    {3142}let h_173: bitstring = (if v_607 then catch-fail(hash(@8_tls_h,m_60)) else caught-fail) in
                                                    {3143}let v_608: bool = not-caught-fail(h_173) in
                                                    {3139}let l_175: label = tls13_derived in
                                                    {3144}let x_197: bitstring = (if v_608 then (l_175,h_173) else caught-fail) in
                                                    {3145}let extra_34: bitstring = catch-fail((if v_607 then (if v_608 then hmac(@8_tls_h,early_secret_47,x_197) else fail-any) else fail-any)) in
                                                    {3146}let v_609: bool = not-caught-fail(extra_34) in
                                                    {3147}let handshake_secret_14: bitstring = (if v_609 then hmac(@8_tls_h,extra_34,gxy_29) else fail-any) in
                                                    {3149}let m_61: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3150}let v_610: bool = not-caught-fail(m_61) in
                                                    {3151}let h_174: bitstring = (if v_610 then catch-fail(hash(@8_tls_h,m_61)) else caught-fail) in
                                                    {3152}let v_611: bool = not-caught-fail(h_174) in
                                                    {3148}let l_176: label = tls13_derived in
                                                    {3153}let x_198: bitstring = (if v_611 then (l_176,h_174) else caught-fail) in
                                                    {3154}let extra_35: bitstring = catch-fail((if v_610 then (if v_611 then hmac(@8_tls_h,handshake_secret_14,x_198) else fail-any) else fail-any)) in
                                                    {3155}let v_612: bool = not-caught-fail(extra_35) in
                                                    {3156}let k_52: bitstring = (if v_612 then zero else caught-fail) in
                                                    {3157}let master_secret_35: bitstring = (if v_612 then catch-fail(hmac(@8_tls_h,handshake_secret_14,k_52)) else caught-fail) in
                                                    {3158}let v_613: bool = not-caught-fail(master_secret_35) in
                                                    {3091}let cur_log4_10: bitstring = (cur_log3_5,client_hello'_13) in
                                                    {3105}let cur_log2_34: bitstring = (cur_log4_10,server_hello'_10) in
                                                    {3160}let h_175: bitstring = (if v_613 then catch-fail(hash(@8_tls_h,cur_log2_34)) else caught-fail) in
                                                    {3161}let v_614: bool = not-caught-fail(h_175) in
                                                    {3159}let l_177: label = (if v_613 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3162}let x_199: bitstring = (if v_614 then (l_177,h_175) else caught-fail) in
                                                    {3163}let client_hts_14: bitstring = (if v_613 then catch-fail((if v_614 then hmac(@8_tls_h,handshake_secret_14,x_199) else fail-any)) else caught-fail) in
                                                    {3164}let v_615: bool = not-caught-fail(client_hts_14) in
                                                    {3166}let h_176: bitstring = (if v_615 then catch-fail(hash(@8_tls_h,cur_log2_34)) else caught-fail) in
                                                    {3167}let v_616: bool = not-caught-fail(h_176) in
                                                    {3165}let l_178: label = (if v_615 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3168}let x_200: bitstring = (if v_616 then (l_178,h_176) else caught-fail) in
                                                    {3169}let server_hts_14: bitstring = (if v_615 then catch-fail((if v_616 then hmac(@8_tls_h,handshake_secret_14,x_200) else fail-any)) else caught-fail) in
                                                    {3170}let v_617: bool = not-caught-fail(server_hts_14) in
                                                    {3172}let h_177: bitstring = (if v_617 then zero else caught-fail) in
                                                    {3171}let l_179: label = (if v_617 then tls13_key else caught-fail) in
                                                    {3173}let x_201: bitstring = (if v_617 then (l_179,h_177) else caught-fail) in
                                                    {3174}let client_wkh_14: bitstring = (if v_617 then catch-fail(hmac(@8_tls_h,client_hts_14,x_201)) else caught-fail) in
                                                    {3175}let v_618: bool = not-caught-fail(client_wkh_14) in
                                                    {3177}let h_178: bitstring = (if v_618 then zero else caught-fail) in
                                                    {3176}let l_180: label = (if v_618 then tls13_key else caught-fail) in
                                                    {3178}let x_202: bitstring = (if v_618 then (l_180,h_178) else caught-fail) in
                                                    {3179}let server_wkh_14: bitstring = (if v_618 then catch-fail(hmac(@8_tls_h,server_hts_14,x_202)) else caught-fail) in
                                                    {3180}let v_619: bool = not-caught-fail(server_wkh_14) in
                                                    {3182}let h_179: bitstring = (if v_619 then zero else caught-fail) in
                                                    {3181}let l_181: label = (if v_619 then tls13_finished else caught-fail) in
                                                    {3183}let x_203: bitstring = (if v_619 then (l_181,h_179) else caught-fail) in
                                                    {3184}let client_fk_14: bitstring = (if v_619 then catch-fail(hmac(@8_tls_h,client_hts_14,x_203)) else caught-fail) in
                                                    {3185}let v_620: bool = not-caught-fail(client_fk_14) in
                                                    {3187}let h_180: bitstring = (if v_620 then zero else caught-fail) in
                                                    {3186}let l_182: label = (if v_620 then tls13_finished else caught-fail) in
                                                    {3188}let x_204: bitstring = (if v_620 then (l_182,h_180) else caught-fail) in
                                                    {3189}let server_fk_14: bitstring = (if v_620 then catch-fail(hmac(@8_tls_h,server_hts_14,x_204)) else caught-fail) in
                                                    {3190}let v_621: bool = not-caught-fail(server_fk_14) in
                                                    {3191}let (master_secret_36: bitstring,chk_21: aead_key,shk_20: aead_key,cfin_21: mac_key,sfin_20: mac_key) = (if v_612 then (if v_613 then (if v_615 then (if v_617 then (if v_618 then (if v_619 then (if v_620 then (if v_621 then (master_secret_35,client_wkh_14,server_wkh_14,client_fk_14,server_fk_14) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3192}event Client_chk(id_client_4,chk_21);
                                                    {3193}event Client_shk(id_client_4,shk_20);
                                                    {3194}event Client_cfin(id_client_4,cfin_21);
                                                    {3195}event Client_sfin(id_client_4,sfin_20);
                                                    {3196}in(io, enc_ee_msg_13: bitstring);
                                                    {3197}let ee_msg_18: msg = aead_dec(@8_tls_a,shk_20,0,zero,enc_ee_msg_13) in
                                                    {3198}let EE(ech_ee_13: echExt,extra_ee_13: extraExt) = ee_msg_18 in
                                                    {3199}let cur_log2_35: bitstring = (cur_log2_34,ee_msg_18) in
                                                    {3200}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_15,sr_25,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_75,safe_psk_20,@8_comp_psk,master_secret_36,chk_21,0,shk_20,1,cfin_21,sfin_20,cur_log2_35)))
                                                )
                                                else
                                                    {3201}out(io, illegal_parameter)
                                            )
                                            else
                                                {3202}out(io, illegal_parameter)
                                    )
                                    else
                                        {3203}out(io, unexpected_message)
                            )
                            else
                                {3205}let psk_76: preSharedKey = NoPsk in
                                {3207}let k_53: bitstring = catch-fail(psk2b(psk_76)) in
                                {3208}let v_622: bool = not-caught-fail(k_53) in
                                {3206}let s_61: bitstring = zero in
                                {3209}let early_secret_48: bitstring = catch-fail((if v_622 then hmac(@8_tls_h,s_61,k_53) else fail-any)) in
                                {3210}let v_623: bool = not-caught-fail(early_secret_48) in
                                {3212}let m_62: bitstring = (if v_623 then zero else caught-fail) in
                                {3213}let h_181: bitstring = (if v_623 then catch-fail(hash(@8_tls_h,m_62)) else caught-fail) in
                                {3214}let v_624: bool = not-caught-fail(h_181) in
                                {3211}let l_183: label = (if v_623 then tls13_ext_res_binder else caught-fail) in
                                {3215}let x_205: bitstring = (if v_624 then (l_183,h_181) else caught-fail) in
                                {3216}let binder_key_32: bitstring = (if v_623 then catch-fail((if v_624 then hmac(@8_tls_h,early_secret_48,x_205) else fail-any)) else caught-fail) in
                                {3217}let v_625: bool = not-caught-fail(binder_key_32) in
                                {3218}let v_626: bitstring = catch-fail((if v_623 then (if v_625 then (early_secret_48,binder_key_32) else fail-any) else fail-any)) in
                                {3219}let v_627: bool = (not-caught-fail(v_626) && success?(1-proj-2-tuple(v_626))) in
                                {3220}let kb_32: mac_key = (if v_627 then 2-proj-2-tuple(v_626) else caught-fail) in
                                {3221}let es_49: bitstring = (if v_627 then 1-proj-2-tuple(v_626) else caught-fail) in
                                {3222}let v_628: bitstring = catch-fail((if v_627 then (empty_psk_ext,(NoPsk,zero,es_49,false)) else fail-any)) in
                                {3223}let v_629: bool = (not-caught-fail(v_628) && success?(1-proj-2-tuple(v_628))) in
                                {3224}let psk_data_19: bitstring = (if v_629 then 2-proj-2-tuple(v_628) else caught-fail) in
                                {3225}let psk_ext_38: preSharedKeyExt = (if v_629 then 1-proj-2-tuple(v_628) else caught-fail) in
                                {3226}let offer_28: params = (if v_629 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_38) else caught-fail) in
                                {3227}let (client_hello'_14: msg,cr'_16: bytes32,kex_data'_11: bitstring,psk_data'_11: bitstring) = (if v_629 then (CH(cr_23,offer_28),cr_23,kex_data_9,psk_data_19) else fail-any) in
                                {3228}event ClientOffersAead(cr'_16,@8_tls_a);
                                {3229}event ClientOffersHash(cr'_16,@8_tls_h);
                                {3230}event ClientOffersGroup(cr'_16,@8_tls_g);
                                {3231}out(io, client_hello'_14);
                                {3233}in(io, server_hello'_11: msg);
                                {3234}let SH(sr'_11: bytes32,mode'_11: params) = server_hello'_11 in
                                (
                                    {3235}if (sr'_11 = B32(HRR24,HRR8)) then
                                        {3236}out(io, unexpected_message)
                                    else
                                        {3237}let (x_206: bitstring,g_15: group) = kex_data'_11 in
                                        {3238}let (psk_offer_14: preSharedKey,id_offer_14: identityPsk,es_offer_14: bitstring,is_safe_offer_14: bool) = psk_data'_11 in
                                        {3239}event Client_PSKOffer(id_client_4,psk_offer_14,id_offer_14,is_safe_offer_14);
                                        {3240}event Client_Rand_client(id_client_4,cr'_16);
                                        {3241}event Client_DH_client(id_client_4,dh_pub(g_15,x_206));
                                        {3242}event Client_server_domain(id_client_4,s_dom_16);
                                        {3243}let SH(sr_26: bytes32,mode_18: params) = server_hello'_11 in
                                        {3244}event Client_Rand_server(id_client_4,sr_26);
                                        {3245}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_15,gy_15: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_39: preSharedKeyExt) = mode_18 in
                                        (
                                            {3247}event Client_DH_server(id_client_4,gy_15);
                                            {3248}let v_630: bool = (psk_ext_39 = empty_psk_ext) in
                                            {3249}let psk_77: preSharedKey = (if v_630 then NoPsk else caught-fail) in
                                            {3251}let k_54: bitstring = (if v_630 then catch-fail(psk2b(psk_77)) else caught-fail) in
                                            {3252}let v_631: bool = not-caught-fail(k_54) in
                                            {3250}let s_62: bitstring = (if v_630 then zero else caught-fail) in
                                            {3253}let early_secret_49: bitstring = (if v_630 then catch-fail((if v_631 then hmac(@8_tls_h,s_62,k_54) else fail-any)) else caught-fail) in
                                            {3254}let v_632: bool = not-caught-fail(early_secret_49) in
                                            {3256}let m_63: bitstring = (if v_632 then zero else caught-fail) in
                                            {3257}let h_182: bitstring = (if v_632 then catch-fail(hash(@8_tls_h,m_63)) else caught-fail) in
                                            {3258}let v_633: bool = not-caught-fail(h_182) in
                                            {3255}let l_184: label = (if v_632 then tls13_ext_res_binder else caught-fail) in
                                            {3259}let x_207: bitstring = (if v_633 then (l_184,h_182) else caught-fail) in
                                            {3260}let binder_key_33: bitstring = (if v_632 then catch-fail((if v_633 then hmac(@8_tls_h,early_secret_49,x_207) else fail-any)) else caught-fail) in
                                            {3261}let v_634: bool = not-caught-fail(binder_key_33) in
                                            {3262}let v_635: bitstring = (if v_630 then catch-fail((if v_632 then (if v_634 then (early_secret_49,binder_key_33) else fail-any) else fail-any)) else caught-fail) in
                                            {3263}let v_636: bool = (not-caught-fail(v_635) && success?(1-proj-2-tuple(v_635))) in
                                            {3264}let kb_33: mac_key = (if v_636 then 2-proj-2-tuple(v_635) else caught-fail) in
                                            {3265}let es_50: bitstring = (if v_636 then 1-proj-2-tuple(v_635) else caught-fail) in
                                            {3266}let v_637: bitstring = (if not(v_630) then catch-fail(psk_data'_11) else caught-fail) in
                                            {3267}let v_638: bool = (not-caught-fail(v_637) && success?(1-proj-4-tuple(v_637))) in
                                            {3268}let is_safe_30: bool = (if v_638 then 4-proj-4-tuple(v_637) else caught-fail) in
                                            {3269}let es_51: bitstring = (if v_638 then 3-proj-4-tuple(v_637) else caught-fail) in
                                            {3270}let id_38: identityPsk = (if v_638 then 2-proj-4-tuple(v_637) else caught-fail) in
                                            {3271}let psk_78: preSharedKey = (if v_638 then 1-proj-4-tuple(v_637) else caught-fail) in
                                            {3272}let (psk_79: preSharedKey,early_secret_50: bitstring,valid_14: bool,safe_psk_21: bool) = (if v_630 then (if v_636 then (NoPsk,es_50,true,false) else fail-any) else (if v_638 then (psk_78,es_51,((psk_78 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_39)),is_safe_30) else fail-any)) in
                                            {3273}event Client_PSKChoosen(id_client_4,psk_79,safe_psk_21);
                                            {3274}if valid_14 then
                                            (
                                                {3277}new s_63[]: seed;
                                                {3275}let gxy_30: element = catch-fail(dh_decap_fun(g_15,gy_15,x_206)) in
                                                {3276}let v_639: bool = not-caught-fail(gxy_30) in
                                                {3278}let gxy_31: element = (if v_639 then gxy_30 else dh_f(s_63)) in
                                                {3279}event Client_DH_gxy(id_client_4,gxy_31);
                                                {3281}let m_64: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3282}let v_640: bool = not-caught-fail(m_64) in
                                                {3283}let h_183: bitstring = (if v_640 then catch-fail(hash(@8_tls_h,m_64)) else caught-fail) in
                                                {3284}let v_641: bool = not-caught-fail(h_183) in
                                                {3280}let l_185: label = tls13_derived in
                                                {3285}let x_208: bitstring = (if v_641 then (l_185,h_183) else caught-fail) in
                                                {3286}let extra_36: bitstring = catch-fail((if v_640 then (if v_641 then hmac(@8_tls_h,early_secret_50,x_208) else fail-any) else fail-any)) in
                                                {3287}let v_642: bool = not-caught-fail(extra_36) in
                                                {3288}let handshake_secret_15: bitstring = (if v_642 then hmac(@8_tls_h,extra_36,gxy_31) else fail-any) in
                                                {3290}let m_65: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3291}let v_643: bool = not-caught-fail(m_65) in
                                                {3292}let h_184: bitstring = (if v_643 then catch-fail(hash(@8_tls_h,m_65)) else caught-fail) in
                                                {3293}let v_644: bool = not-caught-fail(h_184) in
                                                {3289}let l_186: label = tls13_derived in
                                                {3294}let x_209: bitstring = (if v_644 then (l_186,h_184) else caught-fail) in
                                                {3295}let extra_37: bitstring = catch-fail((if v_643 then (if v_644 then hmac(@8_tls_h,handshake_secret_15,x_209) else fail-any) else fail-any)) in
                                                {3296}let v_645: bool = not-caught-fail(extra_37) in
                                                {3297}let k_55: bitstring = (if v_645 then zero else caught-fail) in
                                                {3298}let master_secret_37: bitstring = (if v_645 then catch-fail(hmac(@8_tls_h,handshake_secret_15,k_55)) else caught-fail) in
                                                {3299}let v_646: bool = not-caught-fail(master_secret_37) in
                                                {3232}let cur_log4_11: bitstring = (cur_log3_5,client_hello'_14) in
                                                {3246}let cur_log2_36: bitstring = (cur_log4_11,server_hello'_11) in
                                                {3301}let h_185: bitstring = (if v_646 then catch-fail(hash(@8_tls_h,cur_log2_36)) else caught-fail) in
                                                {3302}let v_647: bool = not-caught-fail(h_185) in
                                                {3300}let l_187: label = (if v_646 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {3303}let x_210: bitstring = (if v_647 then (l_187,h_185) else caught-fail) in
                                                {3304}let client_hts_15: bitstring = (if v_646 then catch-fail((if v_647 then hmac(@8_tls_h,handshake_secret_15,x_210) else fail-any)) else caught-fail) in
                                                {3305}let v_648: bool = not-caught-fail(client_hts_15) in
                                                {3307}let h_186: bitstring = (if v_648 then catch-fail(hash(@8_tls_h,cur_log2_36)) else caught-fail) in
                                                {3308}let v_649: bool = not-caught-fail(h_186) in
                                                {3306}let l_188: label = (if v_648 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {3309}let x_211: bitstring = (if v_649 then (l_188,h_186) else caught-fail) in
                                                {3310}let server_hts_15: bitstring = (if v_648 then catch-fail((if v_649 then hmac(@8_tls_h,handshake_secret_15,x_211) else fail-any)) else caught-fail) in
                                                {3311}let v_650: bool = not-caught-fail(server_hts_15) in
                                                {3313}let h_187: bitstring = (if v_650 then zero else caught-fail) in
                                                {3312}let l_189: label = (if v_650 then tls13_key else caught-fail) in
                                                {3314}let x_212: bitstring = (if v_650 then (l_189,h_187) else caught-fail) in
                                                {3315}let client_wkh_15: bitstring = (if v_650 then catch-fail(hmac(@8_tls_h,client_hts_15,x_212)) else caught-fail) in
                                                {3316}let v_651: bool = not-caught-fail(client_wkh_15) in
                                                {3318}let h_188: bitstring = (if v_651 then zero else caught-fail) in
                                                {3317}let l_190: label = (if v_651 then tls13_key else caught-fail) in
                                                {3319}let x_213: bitstring = (if v_651 then (l_190,h_188) else caught-fail) in
                                                {3320}let server_wkh_15: bitstring = (if v_651 then catch-fail(hmac(@8_tls_h,server_hts_15,x_213)) else caught-fail) in
                                                {3321}let v_652: bool = not-caught-fail(server_wkh_15) in
                                                {3323}let h_189: bitstring = (if v_652 then zero else caught-fail) in
                                                {3322}let l_191: label = (if v_652 then tls13_finished else caught-fail) in
                                                {3324}let x_214: bitstring = (if v_652 then (l_191,h_189) else caught-fail) in
                                                {3325}let client_fk_15: bitstring = (if v_652 then catch-fail(hmac(@8_tls_h,client_hts_15,x_214)) else caught-fail) in
                                                {3326}let v_653: bool = not-caught-fail(client_fk_15) in
                                                {3328}let h_190: bitstring = (if v_653 then zero else caught-fail) in
                                                {3327}let l_192: label = (if v_653 then tls13_finished else caught-fail) in
                                                {3329}let x_215: bitstring = (if v_653 then (l_192,h_190) else caught-fail) in
                                                {3330}let server_fk_15: bitstring = (if v_653 then catch-fail(hmac(@8_tls_h,server_hts_15,x_215)) else caught-fail) in
                                                {3331}let v_654: bool = not-caught-fail(server_fk_15) in
                                                {3332}let (master_secret_38: bitstring,chk_22: aead_key,shk_21: aead_key,cfin_22: mac_key,sfin_21: mac_key) = (if v_645 then (if v_646 then (if v_648 then (if v_650 then (if v_651 then (if v_652 then (if v_653 then (if v_654 then (master_secret_37,client_wkh_15,server_wkh_15,client_fk_15,server_fk_15) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {3333}event Client_chk(id_client_4,chk_22);
                                                {3334}event Client_shk(id_client_4,shk_21);
                                                {3335}event Client_cfin(id_client_4,cfin_22);
                                                {3336}event Client_sfin(id_client_4,sfin_21);
                                                {3337}in(io, enc_ee_msg_14: bitstring);
                                                {3338}let ee_msg_19: msg = aead_dec(@8_tls_a,shk_21,0,zero,enc_ee_msg_14) in
                                                {3339}let EE(ech_ee_14: echExt,extra_ee_14: extraExt) = ee_msg_19 in
                                                {3340}let cur_log2_37: bitstring = (cur_log2_36,ee_msg_19) in
                                                {3341}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_16,sr_26,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_79,safe_psk_21,@8_comp_psk,master_secret_38,chk_22,0,shk_21,1,cfin_22,sfin_21,cur_log2_37)))
                                            )
                                            else
                                                {3342}out(io, illegal_parameter)
                                        )
                                        else
                                            {3343}out(io, illegal_parameter)
                                )
                                else
                                    {3344}out(io, unexpected_message)
                        )
                        else
                            {3345}out(io, illegal_parameter)
                    )
                    else
                        {3346}if send_kex_4 then
                        (
                            {3347}let (x_216: bitstring,g_16: group) = kex_data_8 in
                            {3348}let (psk_offer_15: preSharedKey,id_offer_15: identityPsk,es_offer_15: bitstring,is_safe_offer_15: bool) = psk_data_16 in
                            {3349}event Client_PSKOffer(id_client_4,psk_offer_15,id_offer_15,is_safe_offer_15);
                            {3350}event Client_Rand_client(id_client_4,cr_22);
                            {3351}event Client_DH_client(id_client_4,dh_pub(g_16,x_216));
                            {3352}event Client_server_domain(id_client_4,s_dom_16);
                            {3353}let SH(sr_27: bytes32,mode_19: params) = server_hello_4 in
                            {3354}event Client_Rand_server(id_client_4,sr_27);
                            {3355}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_16,gy_16: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_40: preSharedKeyExt) = mode_19 in
                            (
                                {3357}event Client_DH_server(id_client_4,gy_16);
                                {3358}let v_655: bool = (psk_ext_40 = empty_psk_ext) in
                                {3359}let psk_80: preSharedKey = (if v_655 then NoPsk else caught-fail) in
                                {3361}let k_56: bitstring = (if v_655 then catch-fail(psk2b(psk_80)) else caught-fail) in
                                {3362}let v_656: bool = not-caught-fail(k_56) in
                                {3360}let s_64: bitstring = (if v_655 then zero else caught-fail) in
                                {3363}let early_secret_51: bitstring = (if v_655 then catch-fail((if v_656 then hmac(@8_tls_h,s_64,k_56) else fail-any)) else caught-fail) in
                                {3364}let v_657: bool = not-caught-fail(early_secret_51) in
                                {3366}let m_66: bitstring = (if v_657 then zero else caught-fail) in
                                {3367}let h_191: bitstring = (if v_657 then catch-fail(hash(@8_tls_h,m_66)) else caught-fail) in
                                {3368}let v_658: bool = not-caught-fail(h_191) in
                                {3365}let l_193: label = (if v_657 then tls13_ext_res_binder else caught-fail) in
                                {3369}let x_217: bitstring = (if v_658 then (l_193,h_191) else caught-fail) in
                                {3370}let binder_key_34: bitstring = (if v_657 then catch-fail((if v_658 then hmac(@8_tls_h,early_secret_51,x_217) else fail-any)) else caught-fail) in
                                {3371}let v_659: bool = not-caught-fail(binder_key_34) in
                                {3372}let v_660: bitstring = (if v_655 then catch-fail((if v_657 then (if v_659 then (early_secret_51,binder_key_34) else fail-any) else fail-any)) else caught-fail) in
                                {3373}let v_661: bool = (not-caught-fail(v_660) && success?(1-proj-2-tuple(v_660))) in
                                {3374}let kb_34: mac_key = (if v_661 then 2-proj-2-tuple(v_660) else caught-fail) in
                                {3375}let es_52: bitstring = (if v_661 then 1-proj-2-tuple(v_660) else caught-fail) in
                                {3376}let v_662: bitstring = (if not(v_655) then catch-fail(psk_data_16) else caught-fail) in
                                {3377}let v_663: bool = (not-caught-fail(v_662) && success?(1-proj-4-tuple(v_662))) in
                                {3378}let is_safe_31: bool = (if v_663 then 4-proj-4-tuple(v_662) else caught-fail) in
                                {3379}let es_53: bitstring = (if v_663 then 3-proj-4-tuple(v_662) else caught-fail) in
                                {3380}let id_39: identityPsk = (if v_663 then 2-proj-4-tuple(v_662) else caught-fail) in
                                {3381}let psk_81: preSharedKey = (if v_663 then 1-proj-4-tuple(v_662) else caught-fail) in
                                {3382}let (psk_82: preSharedKey,early_secret_52: bitstring,valid_15: bool,safe_psk_22: bool) = (if v_655 then (if v_661 then (NoPsk,es_52,true,false) else fail-any) else (if v_663 then (psk_81,es_53,((psk_81 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_40)),is_safe_31) else fail-any)) in
                                {3383}event Client_PSKChoosen(id_client_4,psk_82,safe_psk_22);
                                {3384}if valid_15 then
                                (
                                    {3387}new s_65[]: seed;
                                    {3385}let gxy_32: element = catch-fail(dh_decap_fun(g_16,gy_16,x_216)) in
                                    {3386}let v_664: bool = not-caught-fail(gxy_32) in
                                    {3388}let gxy_33: element = (if v_664 then gxy_32 else dh_f(s_65)) in
                                    {3389}event Client_DH_gxy(id_client_4,gxy_33);
                                    {3391}let m_67: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {3392}let v_665: bool = not-caught-fail(m_67) in
                                    {3393}let h_192: bitstring = (if v_665 then catch-fail(hash(@8_tls_h,m_67)) else caught-fail) in
                                    {3394}let v_666: bool = not-caught-fail(h_192) in
                                    {3390}let l_194: label = tls13_derived in
                                    {3395}let x_218: bitstring = (if v_666 then (l_194,h_192) else caught-fail) in
                                    {3396}let extra_38: bitstring = catch-fail((if v_665 then (if v_666 then hmac(@8_tls_h,early_secret_52,x_218) else fail-any) else fail-any)) in
                                    {3397}let v_667: bool = not-caught-fail(extra_38) in
                                    {3398}let handshake_secret_16: bitstring = (if v_667 then hmac(@8_tls_h,extra_38,gxy_33) else fail-any) in
                                    {3400}let m_68: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {3401}let v_668: bool = not-caught-fail(m_68) in
                                    {3402}let h_193: bitstring = (if v_668 then catch-fail(hash(@8_tls_h,m_68)) else caught-fail) in
                                    {3403}let v_669: bool = not-caught-fail(h_193) in
                                    {3399}let l_195: label = tls13_derived in
                                    {3404}let x_219: bitstring = (if v_669 then (l_195,h_193) else caught-fail) in
                                    {3405}let extra_39: bitstring = catch-fail((if v_668 then (if v_669 then hmac(@8_tls_h,handshake_secret_16,x_219) else fail-any) else fail-any)) in
                                    {3406}let v_670: bool = not-caught-fail(extra_39) in
                                    {3407}let k_57: bitstring = (if v_670 then zero else caught-fail) in
                                    {3408}let master_secret_39: bitstring = (if v_670 then catch-fail(hmac(@8_tls_h,handshake_secret_16,k_57)) else caught-fail) in
                                    {3409}let v_671: bool = not-caught-fail(master_secret_39) in
                                    {3356}let cur_log2_38: bitstring = (cur_log2_31,server_hello_4) in
                                    {3411}let h_194: bitstring = (if v_671 then catch-fail(hash(@8_tls_h,cur_log2_38)) else caught-fail) in
                                    {3412}let v_672: bool = not-caught-fail(h_194) in
                                    {3410}let l_196: label = (if v_671 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {3413}let x_220: bitstring = (if v_672 then (l_196,h_194) else caught-fail) in
                                    {3414}let client_hts_16: bitstring = (if v_671 then catch-fail((if v_672 then hmac(@8_tls_h,handshake_secret_16,x_220) else fail-any)) else caught-fail) in
                                    {3415}let v_673: bool = not-caught-fail(client_hts_16) in
                                    {3417}let h_195: bitstring = (if v_673 then catch-fail(hash(@8_tls_h,cur_log2_38)) else caught-fail) in
                                    {3418}let v_674: bool = not-caught-fail(h_195) in
                                    {3416}let l_197: label = (if v_673 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {3419}let x_221: bitstring = (if v_674 then (l_197,h_195) else caught-fail) in
                                    {3420}let server_hts_16: bitstring = (if v_673 then catch-fail((if v_674 then hmac(@8_tls_h,handshake_secret_16,x_221) else fail-any)) else caught-fail) in
                                    {3421}let v_675: bool = not-caught-fail(server_hts_16) in
                                    {3423}let h_196: bitstring = (if v_675 then zero else caught-fail) in
                                    {3422}let l_198: label = (if v_675 then tls13_key else caught-fail) in
                                    {3424}let x_222: bitstring = (if v_675 then (l_198,h_196) else caught-fail) in
                                    {3425}let client_wkh_16: bitstring = (if v_675 then catch-fail(hmac(@8_tls_h,client_hts_16,x_222)) else caught-fail) in
                                    {3426}let v_676: bool = not-caught-fail(client_wkh_16) in
                                    {3428}let h_197: bitstring = (if v_676 then zero else caught-fail) in
                                    {3427}let l_199: label = (if v_676 then tls13_key else caught-fail) in
                                    {3429}let x_223: bitstring = (if v_676 then (l_199,h_197) else caught-fail) in
                                    {3430}let server_wkh_16: bitstring = (if v_676 then catch-fail(hmac(@8_tls_h,server_hts_16,x_223)) else caught-fail) in
                                    {3431}let v_677: bool = not-caught-fail(server_wkh_16) in
                                    {3433}let h_198: bitstring = (if v_677 then zero else caught-fail) in
                                    {3432}let l_200: label = (if v_677 then tls13_finished else caught-fail) in
                                    {3434}let x_224: bitstring = (if v_677 then (l_200,h_198) else caught-fail) in
                                    {3435}let client_fk_16: bitstring = (if v_677 then catch-fail(hmac(@8_tls_h,client_hts_16,x_224)) else caught-fail) in
                                    {3436}let v_678: bool = not-caught-fail(client_fk_16) in
                                    {3438}let h_199: bitstring = (if v_678 then zero else caught-fail) in
                                    {3437}let l_201: label = (if v_678 then tls13_finished else caught-fail) in
                                    {3439}let x_225: bitstring = (if v_678 then (l_201,h_199) else caught-fail) in
                                    {3440}let server_fk_16: bitstring = (if v_678 then catch-fail(hmac(@8_tls_h,server_hts_16,x_225)) else caught-fail) in
                                    {3441}let v_679: bool = not-caught-fail(server_fk_16) in
                                    {3442}let (master_secret_40: bitstring,chk_23: aead_key,shk_22: aead_key,cfin_23: mac_key,sfin_22: mac_key) = (if v_670 then (if v_671 then (if v_673 then (if v_675 then (if v_676 then (if v_677 then (if v_678 then (if v_679 then (master_secret_39,client_wkh_16,server_wkh_16,client_fk_16,server_fk_16) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {3443}event Client_chk(id_client_4,chk_23);
                                    {3444}event Client_shk(id_client_4,shk_22);
                                    {3445}event Client_cfin(id_client_4,cfin_23);
                                    {3446}event Client_sfin(id_client_4,sfin_22);
                                    {3447}in(io, enc_ee_msg_15: bitstring);
                                    {3448}let ee_msg_20: msg = aead_dec(@8_tls_a,shk_22,0,zero,enc_ee_msg_15) in
                                    {3449}let EE(ech_ee_15: echExt,extra_ee_15: extraExt) = ee_msg_20 in
                                    {3450}let cur_log2_39: bitstring = (cur_log2_38,ee_msg_20) in
                                    {3451}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr_22,sr_27,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_82,safe_psk_22,@8_comp_psk,master_secret_40,chk_23,0,shk_22,1,cfin_23,sfin_22,cur_log2_39)))
                                )
                                else
                                    {3452}out(io, illegal_parameter)
                            )
                            else
                                {3453}out(io, illegal_parameter)
                        )
                        else
                            {3454}out(io, illegal_parameter)
                )
                else
                    {3455}out(io, unexpected_message)
            )
        )
        else
            {4095}get pre_shared_keys(c_dom'_7: domain,=s_dom_16,=@8_tls_h,id_40: identityPsk,psk_83: preSharedKey,idP_9: idProc,is_safe_32: bool) in
            {3456}event Selected_one_time_used_psk(id_client_4,psk_83,is_safe_32);
            {3457}event Selected_psk(c_dom_6,c_dom'_7,idP_9,is_safe_32);
            {3458}event Selected_psk_no_missmatch(id_client_4,s_dom_16,@8_tls_h,psk_83,id_40);
            {3459}event Selected_psk_with_ID(c_dom_6,c_dom'_7,id_40,idP_9,is_safe_32);
            {3460}let v_680: bitstring = (id_40,psk_83,is_safe_32) in
            {3461}let v_681: bool = success?(1-proj-3-tuple(v_680)) in
            {3462}let is_safe_33: bool = (if v_681 then 3-proj-3-tuple(v_680) else caught-fail) in
            {3463}let psk_84: preSharedKey = (if v_681 then 2-proj-3-tuple(v_680) else caught-fail) in
            {3464}let id_41: identityPsk = (if v_681 then 1-proj-3-tuple(v_680) else caught-fail) in
            {3468}let k_58: bitstring = (if v_681 then catch-fail(psk2b(psk_84)) else caught-fail) in
            {3469}let v_682: bool = not-caught-fail(k_58) in
            {3467}let s_66: bitstring = (if v_681 then zero else caught-fail) in
            {3470}let early_secret_53: bitstring = (if v_681 then catch-fail((if v_682 then hmac(@8_tls_h,s_66,k_58) else fail-any)) else caught-fail) in
            {3471}let v_683: bool = not-caught-fail(early_secret_53) in
            {3473}let m_69: bitstring = (if v_683 then zero else caught-fail) in
            {3474}let h_200: bitstring = (if v_683 then catch-fail(hash(@8_tls_h,m_69)) else caught-fail) in
            {3475}let v_684: bool = not-caught-fail(h_200) in
            {3472}let l_202: label = (if v_683 then tls13_ext_res_binder else caught-fail) in
            {3476}let x_226: bitstring = (if v_684 then (l_202,h_200) else caught-fail) in
            {3477}let binder_key_35: bitstring = (if v_683 then catch-fail((if v_684 then hmac(@8_tls_h,early_secret_53,x_226) else fail-any)) else caught-fail) in
            {3478}let v_685: bool = not-caught-fail(binder_key_35) in
            {3479}let v_686: bitstring = (if v_681 then catch-fail((if v_683 then (if v_685 then (early_secret_53,binder_key_35) else fail-any) else fail-any)) else caught-fail) in
            {3480}let v_687: bool = (not-caught-fail(v_686) && success?(1-proj-2-tuple(v_686))) in
            {3481}let kb_35: mac_key = (if v_687 then 2-proj-2-tuple(v_686) else caught-fail) in
            {3482}let es_54: bitstring = (if v_687 then 1-proj-2-tuple(v_686) else caught-fail) in
            {3465}let offer_29: params = (if v_681 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_16),ech_ext_13,extra_30,trunc_client_psk_ext(id_41)) else caught-fail) in
            {3466}let cur_log'_13: bitstring = (if v_681 then (cur_log_10,CH(cr_21,offer_29)) else caught-fail) in
            {3483}let binders_12: bitstring = (if v_687 then catch-fail(hmac(@8_tls_h,kb_35,cur_log'_13)) else caught-fail) in
            {3484}let v_688: bool = not-caught-fail(binders_12) in
            {3485}let v_689: bitstring = catch-fail((if v_681 then (if v_687 then (if v_688 then (client_psk_ext(id_41,binders_12),(psk_84,id_41,es_54,is_safe_33)) else fail-any) else fail-any) else fail-any)) in
            {3486}let v_690: bool = (not-caught-fail(v_689) && success?(1-proj-2-tuple(v_689))) in
            {3487}let psk_data_20: bitstring = (if v_690 then 2-proj-2-tuple(v_689) else caught-fail) in
            {3488}let psk_ext_41: preSharedKeyExt = (if v_690 then 1-proj-2-tuple(v_689) else caught-fail) in
            {3489}let offer_30: params = (if v_690 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_41) else caught-fail) in
            {3490}let (client_hello_9: msg,cr_24: bytes32,kex_data_10: bitstring,psk_data_21: bitstring) = (if v_690 then (CH(cr_21,offer_30),cr_21,kex_data_7,psk_data_20) else fail-any) in
            {3491}event ClientOffersAead(cr_24,@8_tls_a);
            {3492}event ClientOffersHash(cr_24,@8_tls_h);
            {3493}event ClientOffersGroup(cr_24,@8_tls_g);
            {3494}out(io, client_hello_9);
            {3496}let (psk_85: preSharedKey,id_42: identityPsk,es_55: bitstring,safe_psk_23: bool) = psk_data_21 in
            (
                {3497}if (false && (psk_85 ≠ NoPsk)) then
                {3498}let client_hello_10: bitstring = (zero,client_hello_9) in
                {3500}let h_201: bitstring = catch-fail(hash(@8_tls_h,client_hello_10)) in
                {3501}let v_691: bool = not-caught-fail(h_201) in
                {3499}let l_203: label = tls13_client_early_traffic_secret in
                {3502}let x_227: bitstring = (if v_691 then (l_203,h_201) else caught-fail) in
                {3503}let atsc0_5: bitstring = catch-fail((if v_691 then hmac(@8_tls_h,es_55,x_227) else fail-any)) in
                {3504}let v_692: bool = not-caught-fail(atsc0_5) in
                {3506}let h_202: bitstring = (if v_692 then zero else caught-fail) in
                {3505}let l_204: label = (if v_692 then tls13_key else caught-fail) in
                {3507}let x_228: bitstring = (if v_692 then (l_204,h_202) else caught-fail) in
                {3508}let kc0_5: bitstring = (if v_692 then catch-fail(hmac(@8_tls_h,atsc0_5,x_228)) else caught-fail) in
                {3509}let v_693: bool = not-caught-fail(kc0_5) in
                {3511}let h_203: bitstring = (if v_693 then catch-fail(hash(@8_tls_h,client_hello_10)) else caught-fail) in
                {3512}let v_694: bool = not-caught-fail(h_203) in
                {3510}let l_205: label = (if v_693 then tls13_early_exporter_master_secret else caught-fail) in
                {3513}let x_229: bitstring = (if v_694 then (l_205,h_203) else caught-fail) in
                {3514}let ems0_10: bitstring = (if v_693 then catch-fail((if v_694 then hmac(@8_tls_h,es_55,x_229) else fail-any)) else caught-fail) in
                {3515}let v_695: bool = not-caught-fail(ems0_10) in
                {3516}let (wkc0_5: aead_key,ems0_11: bitstring) = (if v_692 then (if v_693 then (if v_695 then (kc0_5,ems0_10) else fail-any) else fail-any) else fail-any) in
                {3517}!
                {3518}in(io, (i_5: nat,ad_5: bitstring));
                {3519}if is_nat(i_5) then
                {3520}new msg_ed_4[]: bitstring;
                {3522}new st_14: stamp;
                {3523}event ClientSequenceClient0RTTDataWriteKey(id_client_4,st_14,i_5);
                {3524}event ClientSends0(id_client_4,cr_24,psk_85,i_5,ad_5,msg_ed_4);
                {3521}let enc_ed_4: bitstring = aead_enc(@8_tls_a,wkc0_5,i_5,ad_5,msg_ed_4) in
                {3525}out(io, enc_ed_4)
            ) | (
                {3526}in(io, server_hello_5: msg);
                {3527}let SH(sr_28: bytes32,mode_20: params) = server_hello_5 in
                (
                    {3528}event ClientEchAcceptance(id_client_4,false);
                    {3495}let cur_log2_40: bitstring = (cur_log_10,client_hello_9) in
                    {3529}if (false && (sr_28 = B32(HRR24,HRR8))) then
                    (
                        {3530}if ((mode_20 = nego(TLS13,@8_tls_h,@8_tls_a,hrr_kex_ext(@8_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex_4 ≠ true)) then
                        (
                            {3533}new rand24_7[]: bytes24;
                            {3534}new rand8_7[]: bytes8;
                            {3536}new s_67[]: seed;
                            {3537}let gx_19: element = dh_pub(@8_tls_g,dh_k(s_67)) in
                            {3538}let v_696: bitstring = (dh_k(s_67),gx_19) in
                            {3539}let v_697: bool = success?(1-proj-2-tuple(v_696)) in
                            {3540}let gx_20: element = (if v_697 then 2-proj-2-tuple(v_696) else caught-fail) in
                            {3541}let x_230: bitstring = (if v_697 then 1-proj-2-tuple(v_696) else caught-fail) in
                            {3532}let send_kex_6: bool = true in
                            {3542}let kex_6: kex_alg = (if v_697 then (if send_kex_6 then DHE_kex(@8_tls_g,gx_20) else DHE_group(@8_tls_g)) else caught-fail) in
                            {3543}let (kex_ext_14: keyShareExt,kex_data_11: bitstring) = (if v_697 then (client_kex_ext(kex_6),(x_230,@8_tls_g)) else fail-any) in
                            {3535}let cr_25: bytes32 = B32(rand24_7,rand8_7) in
                            {3531}let cur_log3_6: bitstring = (cur_log2_40,server_hello_5) in
                            {3546}if @8_use_psk then
                            (
                                {3545}let extra_40: extraExt = empty_extra_ext in
                                {3544}let ech_ext_15: echExt = empty_ech_ext in
                                {3547}let (psk_86: preSharedKey,id_43: identityPsk,old_es_6: bitstring,is_safe_34: bool) = psk_data_21 in
                                (
                                    {3551}let k_59: bitstring = catch-fail(psk2b(psk_86)) in
                                    {3552}let v_698: bool = not-caught-fail(k_59) in
                                    {3550}let s_68: bitstring = zero in
                                    {3553}let early_secret_54: bitstring = catch-fail((if v_698 then hmac(@8_tls_h,s_68,k_59) else fail-any)) in
                                    {3554}let v_699: bool = not-caught-fail(early_secret_54) in
                                    {3556}let m_70: bitstring = (if v_699 then zero else caught-fail) in
                                    {3557}let h_204: bitstring = (if v_699 then catch-fail(hash(@8_tls_h,m_70)) else caught-fail) in
                                    {3558}let v_700: bool = not-caught-fail(h_204) in
                                    {3555}let l_206: label = (if v_699 then tls13_ext_res_binder else caught-fail) in
                                    {3559}let x_231: bitstring = (if v_700 then (l_206,h_204) else caught-fail) in
                                    {3560}let binder_key_36: bitstring = (if v_699 then catch-fail((if v_700 then hmac(@8_tls_h,early_secret_54,x_231) else fail-any)) else caught-fail) in
                                    {3561}let v_701: bool = not-caught-fail(binder_key_36) in
                                    {3562}let v_702: bitstring = catch-fail((if v_699 then (if v_701 then (early_secret_54,binder_key_36) else fail-any) else fail-any)) in
                                    {3563}let v_703: bool = (not-caught-fail(v_702) && success?(1-proj-2-tuple(v_702))) in
                                    {3564}let kb_36: mac_key = (if v_703 then 2-proj-2-tuple(v_702) else caught-fail) in
                                    {3565}let es_56: bitstring = (if v_703 then 1-proj-2-tuple(v_702) else caught-fail) in
                                    {3548}let offer_31: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_16),ech_ext_15,extra_40,trunc_client_psk_ext(id_43)) in
                                    {3549}let cur_log'_14: bitstring = (cur_log3_6,CH(cr_25,offer_31)) in
                                    {3566}let binders_13: bitstring = (if v_703 then catch-fail(hmac(@8_tls_h,kb_36,cur_log'_14)) else caught-fail) in
                                    {3567}let v_704: bool = not-caught-fail(binders_13) in
                                    {3568}let v_705: bitstring = catch-fail((if v_703 then (if v_704 then (client_psk_ext(id_43,binders_13),(psk_86,id_43,es_56,is_safe_34)) else fail-any) else fail-any)) in
                                    {3569}let v_706: bool = (not-caught-fail(v_705) && success?(1-proj-2-tuple(v_705))) in
                                    {3570}let psk_data_22: bitstring = (if v_706 then 2-proj-2-tuple(v_705) else caught-fail) in
                                    {3571}let psk_ext_42: preSharedKeyExt = (if v_706 then 1-proj-2-tuple(v_705) else caught-fail) in
                                    {3572}let offer_32: params = (if v_706 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_42) else caught-fail) in
                                    {3573}let (client_hello'_15: msg,cr'_17: bytes32,kex_data'_12: bitstring,psk_data'_12: bitstring) = (if v_706 then (CH(cr_25,offer_32),cr_25,kex_data_11,psk_data_22) else fail-any) in
                                    {3574}event ClientOffersAead(cr'_17,@8_tls_a);
                                    {3575}event ClientOffersHash(cr'_17,@8_tls_h);
                                    {3576}event ClientOffersGroup(cr'_17,@8_tls_g);
                                    {3577}out(io, client_hello'_15);
                                    {3579}in(io, server_hello'_12: msg);
                                    {3580}let SH(sr'_12: bytes32,mode'_12: params) = server_hello'_12 in
                                    (
                                        {3581}if (sr'_12 = B32(HRR24,HRR8)) then
                                            {3582}out(io, unexpected_message)
                                        else
                                            {3583}let (x_232: bitstring,g_17: group) = kex_data'_12 in
                                            {3584}let (psk_offer_16: preSharedKey,id_offer_16: identityPsk,es_offer_16: bitstring,is_safe_offer_16: bool) = psk_data'_12 in
                                            {3585}event Client_PSKOffer(id_client_4,psk_offer_16,id_offer_16,is_safe_offer_16);
                                            {3586}event Client_Rand_client(id_client_4,cr'_17);
                                            {3587}event Client_DH_client(id_client_4,dh_pub(g_17,x_232));
                                            {3588}event Client_server_domain(id_client_4,s_dom_16);
                                            {3589}let SH(sr_29: bytes32,mode_21: params) = server_hello'_12 in
                                            {3590}event Client_Rand_server(id_client_4,sr_29);
                                            {3591}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_17,gy_17: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_43: preSharedKeyExt) = mode_21 in
                                            (
                                                {3593}event Client_DH_server(id_client_4,gy_17);
                                                {3594}let v_707: bool = (psk_ext_43 = empty_psk_ext) in
                                                {3595}let psk_87: preSharedKey = (if v_707 then NoPsk else caught-fail) in
                                                {3597}let k_60: bitstring = (if v_707 then catch-fail(psk2b(psk_87)) else caught-fail) in
                                                {3598}let v_708: bool = not-caught-fail(k_60) in
                                                {3596}let s_69: bitstring = (if v_707 then zero else caught-fail) in
                                                {3599}let early_secret_55: bitstring = (if v_707 then catch-fail((if v_708 then hmac(@8_tls_h,s_69,k_60) else fail-any)) else caught-fail) in
                                                {3600}let v_709: bool = not-caught-fail(early_secret_55) in
                                                {3602}let m_71: bitstring = (if v_709 then zero else caught-fail) in
                                                {3603}let h_205: bitstring = (if v_709 then catch-fail(hash(@8_tls_h,m_71)) else caught-fail) in
                                                {3604}let v_710: bool = not-caught-fail(h_205) in
                                                {3601}let l_207: label = (if v_709 then tls13_ext_res_binder else caught-fail) in
                                                {3605}let x_233: bitstring = (if v_710 then (l_207,h_205) else caught-fail) in
                                                {3606}let binder_key_37: bitstring = (if v_709 then catch-fail((if v_710 then hmac(@8_tls_h,early_secret_55,x_233) else fail-any)) else caught-fail) in
                                                {3607}let v_711: bool = not-caught-fail(binder_key_37) in
                                                {3608}let v_712: bitstring = (if v_707 then catch-fail((if v_709 then (if v_711 then (early_secret_55,binder_key_37) else fail-any) else fail-any)) else caught-fail) in
                                                {3609}let v_713: bool = (not-caught-fail(v_712) && success?(1-proj-2-tuple(v_712))) in
                                                {3610}let kb_37: mac_key = (if v_713 then 2-proj-2-tuple(v_712) else caught-fail) in
                                                {3611}let es_57: bitstring = (if v_713 then 1-proj-2-tuple(v_712) else caught-fail) in
                                                {3612}let v_714: bitstring = (if not(v_707) then catch-fail(psk_data'_12) else caught-fail) in
                                                {3613}let v_715: bool = (not-caught-fail(v_714) && success?(1-proj-4-tuple(v_714))) in
                                                {3614}let is_safe_35: bool = (if v_715 then 4-proj-4-tuple(v_714) else caught-fail) in
                                                {3615}let es_58: bitstring = (if v_715 then 3-proj-4-tuple(v_714) else caught-fail) in
                                                {3616}let id_44: identityPsk = (if v_715 then 2-proj-4-tuple(v_714) else caught-fail) in
                                                {3617}let psk_88: preSharedKey = (if v_715 then 1-proj-4-tuple(v_714) else caught-fail) in
                                                {3618}let (psk_89: preSharedKey,early_secret_56: bitstring,valid_16: bool,safe_psk_24: bool) = (if v_707 then (if v_713 then (NoPsk,es_57,true,false) else fail-any) else (if v_715 then (psk_88,es_58,((psk_88 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_43)),is_safe_35) else fail-any)) in
                                                {3619}event Client_PSKChoosen(id_client_4,psk_89,safe_psk_24);
                                                {3620}if valid_16 then
                                                (
                                                    {3623}new s_70[]: seed;
                                                    {3621}let gxy_34: element = catch-fail(dh_decap_fun(g_17,gy_17,x_232)) in
                                                    {3622}let v_716: bool = not-caught-fail(gxy_34) in
                                                    {3624}let gxy_35: element = (if v_716 then gxy_34 else dh_f(s_70)) in
                                                    {3625}event Client_DH_gxy(id_client_4,gxy_35);
                                                    {3627}let m_72: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3628}let v_717: bool = not-caught-fail(m_72) in
                                                    {3629}let h_206: bitstring = (if v_717 then catch-fail(hash(@8_tls_h,m_72)) else caught-fail) in
                                                    {3630}let v_718: bool = not-caught-fail(h_206) in
                                                    {3626}let l_208: label = tls13_derived in
                                                    {3631}let x_234: bitstring = (if v_718 then (l_208,h_206) else caught-fail) in
                                                    {3632}let extra_41: bitstring = catch-fail((if v_717 then (if v_718 then hmac(@8_tls_h,early_secret_56,x_234) else fail-any) else fail-any)) in
                                                    {3633}let v_719: bool = not-caught-fail(extra_41) in
                                                    {3634}let handshake_secret_17: bitstring = (if v_719 then hmac(@8_tls_h,extra_41,gxy_35) else fail-any) in
                                                    {3636}let m_73: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3637}let v_720: bool = not-caught-fail(m_73) in
                                                    {3638}let h_207: bitstring = (if v_720 then catch-fail(hash(@8_tls_h,m_73)) else caught-fail) in
                                                    {3639}let v_721: bool = not-caught-fail(h_207) in
                                                    {3635}let l_209: label = tls13_derived in
                                                    {3640}let x_235: bitstring = (if v_721 then (l_209,h_207) else caught-fail) in
                                                    {3641}let extra_42: bitstring = catch-fail((if v_720 then (if v_721 then hmac(@8_tls_h,handshake_secret_17,x_235) else fail-any) else fail-any)) in
                                                    {3642}let v_722: bool = not-caught-fail(extra_42) in
                                                    {3643}let k_61: bitstring = (if v_722 then zero else caught-fail) in
                                                    {3644}let master_secret_41: bitstring = (if v_722 then catch-fail(hmac(@8_tls_h,handshake_secret_17,k_61)) else caught-fail) in
                                                    {3645}let v_723: bool = not-caught-fail(master_secret_41) in
                                                    {3578}let cur_log4_12: bitstring = (cur_log3_6,client_hello'_15) in
                                                    {3592}let cur_log2_41: bitstring = (cur_log4_12,server_hello'_12) in
                                                    {3647}let h_208: bitstring = (if v_723 then catch-fail(hash(@8_tls_h,cur_log2_41)) else caught-fail) in
                                                    {3648}let v_724: bool = not-caught-fail(h_208) in
                                                    {3646}let l_210: label = (if v_723 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3649}let x_236: bitstring = (if v_724 then (l_210,h_208) else caught-fail) in
                                                    {3650}let client_hts_17: bitstring = (if v_723 then catch-fail((if v_724 then hmac(@8_tls_h,handshake_secret_17,x_236) else fail-any)) else caught-fail) in
                                                    {3651}let v_725: bool = not-caught-fail(client_hts_17) in
                                                    {3653}let h_209: bitstring = (if v_725 then catch-fail(hash(@8_tls_h,cur_log2_41)) else caught-fail) in
                                                    {3654}let v_726: bool = not-caught-fail(h_209) in
                                                    {3652}let l_211: label = (if v_725 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3655}let x_237: bitstring = (if v_726 then (l_211,h_209) else caught-fail) in
                                                    {3656}let server_hts_17: bitstring = (if v_725 then catch-fail((if v_726 then hmac(@8_tls_h,handshake_secret_17,x_237) else fail-any)) else caught-fail) in
                                                    {3657}let v_727: bool = not-caught-fail(server_hts_17) in
                                                    {3659}let h_210: bitstring = (if v_727 then zero else caught-fail) in
                                                    {3658}let l_212: label = (if v_727 then tls13_key else caught-fail) in
                                                    {3660}let x_238: bitstring = (if v_727 then (l_212,h_210) else caught-fail) in
                                                    {3661}let client_wkh_17: bitstring = (if v_727 then catch-fail(hmac(@8_tls_h,client_hts_17,x_238)) else caught-fail) in
                                                    {3662}let v_728: bool = not-caught-fail(client_wkh_17) in
                                                    {3664}let h_211: bitstring = (if v_728 then zero else caught-fail) in
                                                    {3663}let l_213: label = (if v_728 then tls13_key else caught-fail) in
                                                    {3665}let x_239: bitstring = (if v_728 then (l_213,h_211) else caught-fail) in
                                                    {3666}let server_wkh_17: bitstring = (if v_728 then catch-fail(hmac(@8_tls_h,server_hts_17,x_239)) else caught-fail) in
                                                    {3667}let v_729: bool = not-caught-fail(server_wkh_17) in
                                                    {3669}let h_212: bitstring = (if v_729 then zero else caught-fail) in
                                                    {3668}let l_214: label = (if v_729 then tls13_finished else caught-fail) in
                                                    {3670}let x_240: bitstring = (if v_729 then (l_214,h_212) else caught-fail) in
                                                    {3671}let client_fk_17: bitstring = (if v_729 then catch-fail(hmac(@8_tls_h,client_hts_17,x_240)) else caught-fail) in
                                                    {3672}let v_730: bool = not-caught-fail(client_fk_17) in
                                                    {3674}let h_213: bitstring = (if v_730 then zero else caught-fail) in
                                                    {3673}let l_215: label = (if v_730 then tls13_finished else caught-fail) in
                                                    {3675}let x_241: bitstring = (if v_730 then (l_215,h_213) else caught-fail) in
                                                    {3676}let server_fk_17: bitstring = (if v_730 then catch-fail(hmac(@8_tls_h,server_hts_17,x_241)) else caught-fail) in
                                                    {3677}let v_731: bool = not-caught-fail(server_fk_17) in
                                                    {3678}let (master_secret_42: bitstring,chk_24: aead_key,shk_23: aead_key,cfin_24: mac_key,sfin_23: mac_key) = (if v_722 then (if v_723 then (if v_725 then (if v_727 then (if v_728 then (if v_729 then (if v_730 then (if v_731 then (master_secret_41,client_wkh_17,server_wkh_17,client_fk_17,server_fk_17) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3679}event Client_chk(id_client_4,chk_24);
                                                    {3680}event Client_shk(id_client_4,shk_23);
                                                    {3681}event Client_cfin(id_client_4,cfin_24);
                                                    {3682}event Client_sfin(id_client_4,sfin_23);
                                                    {3683}in(io, enc_ee_msg_16: bitstring);
                                                    {3684}let ee_msg_21: msg = aead_dec(@8_tls_a,shk_23,0,zero,enc_ee_msg_16) in
                                                    {3685}let EE(ech_ee_16: echExt,extra_ee_16: extraExt) = ee_msg_21 in
                                                    {3686}let cur_log2_42: bitstring = (cur_log2_41,ee_msg_21) in
                                                    {3687}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_17,sr_29,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_89,safe_psk_24,@8_comp_psk,master_secret_42,chk_24,0,shk_23,1,cfin_24,sfin_23,cur_log2_42)))
                                                )
                                                else
                                                    {3688}out(io, illegal_parameter)
                                            )
                                            else
                                                {3689}out(io, illegal_parameter)
                                    )
                                    else
                                        {3690}out(io, unexpected_message)
                                )
                                else
                                    {3843}get pre_shared_keys(c_dom'_8: domain,=s_dom_16,=@8_tls_h,id_45: identityPsk,psk_90: preSharedKey,idP_10: idProc,is_safe_36: bool) in
                                    {3691}event Selected_one_time_used_psk(id_client_4,psk_90,is_safe_36);
                                    {3692}event Selected_psk(c_dom_6,c_dom'_8,idP_10,is_safe_36);
                                    {3693}event Selected_psk_no_missmatch(id_client_4,s_dom_16,@8_tls_h,psk_90,id_45);
                                    {3694}event Selected_psk_with_ID(c_dom_6,c_dom'_8,id_45,idP_10,is_safe_36);
                                    {3695}let v_732: bitstring = (id_45,psk_90,is_safe_36) in
                                    {3696}let v_733: bool = success?(1-proj-3-tuple(v_732)) in
                                    {3697}let is_safe_37: bool = (if v_733 then 3-proj-3-tuple(v_732) else caught-fail) in
                                    {3698}let psk_91: preSharedKey = (if v_733 then 2-proj-3-tuple(v_732) else caught-fail) in
                                    {3699}let id_46: identityPsk = (if v_733 then 1-proj-3-tuple(v_732) else caught-fail) in
                                    {3703}let k_62: bitstring = (if v_733 then catch-fail(psk2b(psk_91)) else caught-fail) in
                                    {3704}let v_734: bool = not-caught-fail(k_62) in
                                    {3702}let s_71: bitstring = (if v_733 then zero else caught-fail) in
                                    {3705}let early_secret_57: bitstring = (if v_733 then catch-fail((if v_734 then hmac(@8_tls_h,s_71,k_62) else fail-any)) else caught-fail) in
                                    {3706}let v_735: bool = not-caught-fail(early_secret_57) in
                                    {3708}let m_74: bitstring = (if v_735 then zero else caught-fail) in
                                    {3709}let h_214: bitstring = (if v_735 then catch-fail(hash(@8_tls_h,m_74)) else caught-fail) in
                                    {3710}let v_736: bool = not-caught-fail(h_214) in
                                    {3707}let l_216: label = (if v_735 then tls13_ext_res_binder else caught-fail) in
                                    {3711}let x_242: bitstring = (if v_736 then (l_216,h_214) else caught-fail) in
                                    {3712}let binder_key_38: bitstring = (if v_735 then catch-fail((if v_736 then hmac(@8_tls_h,early_secret_57,x_242) else fail-any)) else caught-fail) in
                                    {3713}let v_737: bool = not-caught-fail(binder_key_38) in
                                    {3714}let v_738: bitstring = (if v_733 then catch-fail((if v_735 then (if v_737 then (early_secret_57,binder_key_38) else fail-any) else fail-any)) else caught-fail) in
                                    {3715}let v_739: bool = (not-caught-fail(v_738) && success?(1-proj-2-tuple(v_738))) in
                                    {3716}let kb_38: mac_key = (if v_739 then 2-proj-2-tuple(v_738) else caught-fail) in
                                    {3717}let es_59: bitstring = (if v_739 then 1-proj-2-tuple(v_738) else caught-fail) in
                                    {3700}let offer_33: params = (if v_733 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_16),ech_ext_15,extra_40,trunc_client_psk_ext(id_46)) else caught-fail) in
                                    {3701}let cur_log'_15: bitstring = (if v_733 then (cur_log3_6,CH(cr_25,offer_33)) else caught-fail) in
                                    {3718}let binders_14: bitstring = (if v_739 then catch-fail(hmac(@8_tls_h,kb_38,cur_log'_15)) else caught-fail) in
                                    {3719}let v_740: bool = not-caught-fail(binders_14) in
                                    {3720}let v_741: bitstring = catch-fail((if v_733 then (if v_739 then (if v_740 then (client_psk_ext(id_46,binders_14),(psk_91,id_46,es_59,is_safe_37)) else fail-any) else fail-any) else fail-any)) in
                                    {3721}let v_742: bool = (not-caught-fail(v_741) && success?(1-proj-2-tuple(v_741))) in
                                    {3722}let psk_data_23: bitstring = (if v_742 then 2-proj-2-tuple(v_741) else caught-fail) in
                                    {3723}let psk_ext_44: preSharedKeyExt = (if v_742 then 1-proj-2-tuple(v_741) else caught-fail) in
                                    {3724}let offer_34: params = (if v_742 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_44) else caught-fail) in
                                    {3725}let (client_hello'_16: msg,cr'_18: bytes32,kex_data'_13: bitstring,psk_data'_13: bitstring) = (if v_742 then (CH(cr_25,offer_34),cr_25,kex_data_11,psk_data_23) else fail-any) in
                                    {3726}event ClientOffersAead(cr'_18,@8_tls_a);
                                    {3727}event ClientOffersHash(cr'_18,@8_tls_h);
                                    {3728}event ClientOffersGroup(cr'_18,@8_tls_g);
                                    {3729}out(io, client_hello'_16);
                                    {3731}in(io, server_hello'_13: msg);
                                    {3732}let SH(sr'_13: bytes32,mode'_13: params) = server_hello'_13 in
                                    (
                                        {3733}if (sr'_13 = B32(HRR24,HRR8)) then
                                            {3734}out(io, unexpected_message)
                                        else
                                            {3735}let (x_243: bitstring,g_18: group) = kex_data'_13 in
                                            {3736}let (psk_offer_17: preSharedKey,id_offer_17: identityPsk,es_offer_17: bitstring,is_safe_offer_17: bool) = psk_data'_13 in
                                            {3737}event Client_PSKOffer(id_client_4,psk_offer_17,id_offer_17,is_safe_offer_17);
                                            {3738}event Client_Rand_client(id_client_4,cr'_18);
                                            {3739}event Client_DH_client(id_client_4,dh_pub(g_18,x_243));
                                            {3740}event Client_server_domain(id_client_4,s_dom_16);
                                            {3741}let SH(sr_30: bytes32,mode_22: params) = server_hello'_13 in
                                            {3742}event Client_Rand_server(id_client_4,sr_30);
                                            {3743}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_18,gy_18: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_45: preSharedKeyExt) = mode_22 in
                                            (
                                                {3745}event Client_DH_server(id_client_4,gy_18);
                                                {3746}let v_743: bool = (psk_ext_45 = empty_psk_ext) in
                                                {3747}let psk_92: preSharedKey = (if v_743 then NoPsk else caught-fail) in
                                                {3749}let k_63: bitstring = (if v_743 then catch-fail(psk2b(psk_92)) else caught-fail) in
                                                {3750}let v_744: bool = not-caught-fail(k_63) in
                                                {3748}let s_72: bitstring = (if v_743 then zero else caught-fail) in
                                                {3751}let early_secret_58: bitstring = (if v_743 then catch-fail((if v_744 then hmac(@8_tls_h,s_72,k_63) else fail-any)) else caught-fail) in
                                                {3752}let v_745: bool = not-caught-fail(early_secret_58) in
                                                {3754}let m_75: bitstring = (if v_745 then zero else caught-fail) in
                                                {3755}let h_215: bitstring = (if v_745 then catch-fail(hash(@8_tls_h,m_75)) else caught-fail) in
                                                {3756}let v_746: bool = not-caught-fail(h_215) in
                                                {3753}let l_217: label = (if v_745 then tls13_ext_res_binder else caught-fail) in
                                                {3757}let x_244: bitstring = (if v_746 then (l_217,h_215) else caught-fail) in
                                                {3758}let binder_key_39: bitstring = (if v_745 then catch-fail((if v_746 then hmac(@8_tls_h,early_secret_58,x_244) else fail-any)) else caught-fail) in
                                                {3759}let v_747: bool = not-caught-fail(binder_key_39) in
                                                {3760}let v_748: bitstring = (if v_743 then catch-fail((if v_745 then (if v_747 then (early_secret_58,binder_key_39) else fail-any) else fail-any)) else caught-fail) in
                                                {3761}let v_749: bool = (not-caught-fail(v_748) && success?(1-proj-2-tuple(v_748))) in
                                                {3762}let kb_39: mac_key = (if v_749 then 2-proj-2-tuple(v_748) else caught-fail) in
                                                {3763}let es_60: bitstring = (if v_749 then 1-proj-2-tuple(v_748) else caught-fail) in
                                                {3764}let v_750: bitstring = (if not(v_743) then catch-fail(psk_data'_13) else caught-fail) in
                                                {3765}let v_751: bool = (not-caught-fail(v_750) && success?(1-proj-4-tuple(v_750))) in
                                                {3766}let is_safe_38: bool = (if v_751 then 4-proj-4-tuple(v_750) else caught-fail) in
                                                {3767}let es_61: bitstring = (if v_751 then 3-proj-4-tuple(v_750) else caught-fail) in
                                                {3768}let id_47: identityPsk = (if v_751 then 2-proj-4-tuple(v_750) else caught-fail) in
                                                {3769}let psk_93: preSharedKey = (if v_751 then 1-proj-4-tuple(v_750) else caught-fail) in
                                                {3770}let (psk_94: preSharedKey,early_secret_59: bitstring,valid_17: bool,safe_psk_25: bool) = (if v_743 then (if v_749 then (NoPsk,es_60,true,false) else fail-any) else (if v_751 then (psk_93,es_61,((psk_93 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_45)),is_safe_38) else fail-any)) in
                                                {3771}event Client_PSKChoosen(id_client_4,psk_94,safe_psk_25);
                                                {3772}if valid_17 then
                                                (
                                                    {3775}new s_73[]: seed;
                                                    {3773}let gxy_36: element = catch-fail(dh_decap_fun(g_18,gy_18,x_243)) in
                                                    {3774}let v_752: bool = not-caught-fail(gxy_36) in
                                                    {3776}let gxy_37: element = (if v_752 then gxy_36 else dh_f(s_73)) in
                                                    {3777}event Client_DH_gxy(id_client_4,gxy_37);
                                                    {3779}let m_76: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3780}let v_753: bool = not-caught-fail(m_76) in
                                                    {3781}let h_216: bitstring = (if v_753 then catch-fail(hash(@8_tls_h,m_76)) else caught-fail) in
                                                    {3782}let v_754: bool = not-caught-fail(h_216) in
                                                    {3778}let l_218: label = tls13_derived in
                                                    {3783}let x_245: bitstring = (if v_754 then (l_218,h_216) else caught-fail) in
                                                    {3784}let extra_43: bitstring = catch-fail((if v_753 then (if v_754 then hmac(@8_tls_h,early_secret_59,x_245) else fail-any) else fail-any)) in
                                                    {3785}let v_755: bool = not-caught-fail(extra_43) in
                                                    {3786}let handshake_secret_18: bitstring = (if v_755 then hmac(@8_tls_h,extra_43,gxy_37) else fail-any) in
                                                    {3788}let m_77: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3789}let v_756: bool = not-caught-fail(m_77) in
                                                    {3790}let h_217: bitstring = (if v_756 then catch-fail(hash(@8_tls_h,m_77)) else caught-fail) in
                                                    {3791}let v_757: bool = not-caught-fail(h_217) in
                                                    {3787}let l_219: label = tls13_derived in
                                                    {3792}let x_246: bitstring = (if v_757 then (l_219,h_217) else caught-fail) in
                                                    {3793}let extra_44: bitstring = catch-fail((if v_756 then (if v_757 then hmac(@8_tls_h,handshake_secret_18,x_246) else fail-any) else fail-any)) in
                                                    {3794}let v_758: bool = not-caught-fail(extra_44) in
                                                    {3795}let k_64: bitstring = (if v_758 then zero else caught-fail) in
                                                    {3796}let master_secret_43: bitstring = (if v_758 then catch-fail(hmac(@8_tls_h,handshake_secret_18,k_64)) else caught-fail) in
                                                    {3797}let v_759: bool = not-caught-fail(master_secret_43) in
                                                    {3730}let cur_log4_13: bitstring = (cur_log3_6,client_hello'_16) in
                                                    {3744}let cur_log2_43: bitstring = (cur_log4_13,server_hello'_13) in
                                                    {3799}let h_218: bitstring = (if v_759 then catch-fail(hash(@8_tls_h,cur_log2_43)) else caught-fail) in
                                                    {3800}let v_760: bool = not-caught-fail(h_218) in
                                                    {3798}let l_220: label = (if v_759 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3801}let x_247: bitstring = (if v_760 then (l_220,h_218) else caught-fail) in
                                                    {3802}let client_hts_18: bitstring = (if v_759 then catch-fail((if v_760 then hmac(@8_tls_h,handshake_secret_18,x_247) else fail-any)) else caught-fail) in
                                                    {3803}let v_761: bool = not-caught-fail(client_hts_18) in
                                                    {3805}let h_219: bitstring = (if v_761 then catch-fail(hash(@8_tls_h,cur_log2_43)) else caught-fail) in
                                                    {3806}let v_762: bool = not-caught-fail(h_219) in
                                                    {3804}let l_221: label = (if v_761 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3807}let x_248: bitstring = (if v_762 then (l_221,h_219) else caught-fail) in
                                                    {3808}let server_hts_18: bitstring = (if v_761 then catch-fail((if v_762 then hmac(@8_tls_h,handshake_secret_18,x_248) else fail-any)) else caught-fail) in
                                                    {3809}let v_763: bool = not-caught-fail(server_hts_18) in
                                                    {3811}let h_220: bitstring = (if v_763 then zero else caught-fail) in
                                                    {3810}let l_222: label = (if v_763 then tls13_key else caught-fail) in
                                                    {3812}let x_249: bitstring = (if v_763 then (l_222,h_220) else caught-fail) in
                                                    {3813}let client_wkh_18: bitstring = (if v_763 then catch-fail(hmac(@8_tls_h,client_hts_18,x_249)) else caught-fail) in
                                                    {3814}let v_764: bool = not-caught-fail(client_wkh_18) in
                                                    {3816}let h_221: bitstring = (if v_764 then zero else caught-fail) in
                                                    {3815}let l_223: label = (if v_764 then tls13_key else caught-fail) in
                                                    {3817}let x_250: bitstring = (if v_764 then (l_223,h_221) else caught-fail) in
                                                    {3818}let server_wkh_18: bitstring = (if v_764 then catch-fail(hmac(@8_tls_h,server_hts_18,x_250)) else caught-fail) in
                                                    {3819}let v_765: bool = not-caught-fail(server_wkh_18) in
                                                    {3821}let h_222: bitstring = (if v_765 then zero else caught-fail) in
                                                    {3820}let l_224: label = (if v_765 then tls13_finished else caught-fail) in
                                                    {3822}let x_251: bitstring = (if v_765 then (l_224,h_222) else caught-fail) in
                                                    {3823}let client_fk_18: bitstring = (if v_765 then catch-fail(hmac(@8_tls_h,client_hts_18,x_251)) else caught-fail) in
                                                    {3824}let v_766: bool = not-caught-fail(client_fk_18) in
                                                    {3826}let h_223: bitstring = (if v_766 then zero else caught-fail) in
                                                    {3825}let l_225: label = (if v_766 then tls13_finished else caught-fail) in
                                                    {3827}let x_252: bitstring = (if v_766 then (l_225,h_223) else caught-fail) in
                                                    {3828}let server_fk_18: bitstring = (if v_766 then catch-fail(hmac(@8_tls_h,server_hts_18,x_252)) else caught-fail) in
                                                    {3829}let v_767: bool = not-caught-fail(server_fk_18) in
                                                    {3830}let (master_secret_44: bitstring,chk_25: aead_key,shk_24: aead_key,cfin_25: mac_key,sfin_24: mac_key) = (if v_758 then (if v_759 then (if v_761 then (if v_763 then (if v_764 then (if v_765 then (if v_766 then (if v_767 then (master_secret_43,client_wkh_18,server_wkh_18,client_fk_18,server_fk_18) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3831}event Client_chk(id_client_4,chk_25);
                                                    {3832}event Client_shk(id_client_4,shk_24);
                                                    {3833}event Client_cfin(id_client_4,cfin_25);
                                                    {3834}event Client_sfin(id_client_4,sfin_24);
                                                    {3835}in(io, enc_ee_msg_17: bitstring);
                                                    {3836}let ee_msg_22: msg = aead_dec(@8_tls_a,shk_24,0,zero,enc_ee_msg_17) in
                                                    {3837}let EE(ech_ee_17: echExt,extra_ee_17: extraExt) = ee_msg_22 in
                                                    {3838}let cur_log2_44: bitstring = (cur_log2_43,ee_msg_22) in
                                                    {3839}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_18,sr_30,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_94,safe_psk_25,@8_comp_psk,master_secret_44,chk_25,0,shk_24,1,cfin_25,sfin_24,cur_log2_44)))
                                                )
                                                else
                                                    {3840}out(io, illegal_parameter)
                                            )
                                            else
                                                {3841}out(io, illegal_parameter)
                                    )
                                    else
                                        {3842}out(io, unexpected_message)
                            )
                            else
                                {3844}let psk_95: preSharedKey = NoPsk in
                                {3846}let k_65: bitstring = catch-fail(psk2b(psk_95)) in
                                {3847}let v_768: bool = not-caught-fail(k_65) in
                                {3845}let s_74: bitstring = zero in
                                {3848}let early_secret_60: bitstring = catch-fail((if v_768 then hmac(@8_tls_h,s_74,k_65) else fail-any)) in
                                {3849}let v_769: bool = not-caught-fail(early_secret_60) in
                                {3851}let m_78: bitstring = (if v_769 then zero else caught-fail) in
                                {3852}let h_224: bitstring = (if v_769 then catch-fail(hash(@8_tls_h,m_78)) else caught-fail) in
                                {3853}let v_770: bool = not-caught-fail(h_224) in
                                {3850}let l_226: label = (if v_769 then tls13_ext_res_binder else caught-fail) in
                                {3854}let x_253: bitstring = (if v_770 then (l_226,h_224) else caught-fail) in
                                {3855}let binder_key_40: bitstring = (if v_769 then catch-fail((if v_770 then hmac(@8_tls_h,early_secret_60,x_253) else fail-any)) else caught-fail) in
                                {3856}let v_771: bool = not-caught-fail(binder_key_40) in
                                {3857}let v_772: bitstring = catch-fail((if v_769 then (if v_771 then (early_secret_60,binder_key_40) else fail-any) else fail-any)) in
                                {3858}let v_773: bool = (not-caught-fail(v_772) && success?(1-proj-2-tuple(v_772))) in
                                {3859}let kb_40: mac_key = (if v_773 then 2-proj-2-tuple(v_772) else caught-fail) in
                                {3860}let es_62: bitstring = (if v_773 then 1-proj-2-tuple(v_772) else caught-fail) in
                                {3861}let v_774: bitstring = catch-fail((if v_773 then (empty_psk_ext,(NoPsk,zero,es_62,false)) else fail-any)) in
                                {3862}let v_775: bool = (not-caught-fail(v_774) && success?(1-proj-2-tuple(v_774))) in
                                {3863}let psk_data_24: bitstring = (if v_775 then 2-proj-2-tuple(v_774) else caught-fail) in
                                {3864}let psk_ext_46: preSharedKeyExt = (if v_775 then 1-proj-2-tuple(v_774) else caught-fail) in
                                {3865}let offer_35: params = (if v_775 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_46) else caught-fail) in
                                {3866}let (client_hello'_17: msg,cr'_19: bytes32,kex_data'_14: bitstring,psk_data'_14: bitstring) = (if v_775 then (CH(cr_25,offer_35),cr_25,kex_data_11,psk_data_24) else fail-any) in
                                {3867}event ClientOffersAead(cr'_19,@8_tls_a);
                                {3868}event ClientOffersHash(cr'_19,@8_tls_h);
                                {3869}event ClientOffersGroup(cr'_19,@8_tls_g);
                                {3870}out(io, client_hello'_17);
                                {3872}in(io, server_hello'_14: msg);
                                {3873}let SH(sr'_14: bytes32,mode'_14: params) = server_hello'_14 in
                                (
                                    {3874}if (sr'_14 = B32(HRR24,HRR8)) then
                                        {3875}out(io, unexpected_message)
                                    else
                                        {3876}let (x_254: bitstring,g_19: group) = kex_data'_14 in
                                        {3877}let (psk_offer_18: preSharedKey,id_offer_18: identityPsk,es_offer_18: bitstring,is_safe_offer_18: bool) = psk_data'_14 in
                                        {3878}event Client_PSKOffer(id_client_4,psk_offer_18,id_offer_18,is_safe_offer_18);
                                        {3879}event Client_Rand_client(id_client_4,cr'_19);
                                        {3880}event Client_DH_client(id_client_4,dh_pub(g_19,x_254));
                                        {3881}event Client_server_domain(id_client_4,s_dom_16);
                                        {3882}let SH(sr_31: bytes32,mode_23: params) = server_hello'_14 in
                                        {3883}event Client_Rand_server(id_client_4,sr_31);
                                        {3884}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_19,gy_19: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_47: preSharedKeyExt) = mode_23 in
                                        (
                                            {3886}event Client_DH_server(id_client_4,gy_19);
                                            {3887}let v_776: bool = (psk_ext_47 = empty_psk_ext) in
                                            {3888}let psk_96: preSharedKey = (if v_776 then NoPsk else caught-fail) in
                                            {3890}let k_66: bitstring = (if v_776 then catch-fail(psk2b(psk_96)) else caught-fail) in
                                            {3891}let v_777: bool = not-caught-fail(k_66) in
                                            {3889}let s_75: bitstring = (if v_776 then zero else caught-fail) in
                                            {3892}let early_secret_61: bitstring = (if v_776 then catch-fail((if v_777 then hmac(@8_tls_h,s_75,k_66) else fail-any)) else caught-fail) in
                                            {3893}let v_778: bool = not-caught-fail(early_secret_61) in
                                            {3895}let m_79: bitstring = (if v_778 then zero else caught-fail) in
                                            {3896}let h_225: bitstring = (if v_778 then catch-fail(hash(@8_tls_h,m_79)) else caught-fail) in
                                            {3897}let v_779: bool = not-caught-fail(h_225) in
                                            {3894}let l_227: label = (if v_778 then tls13_ext_res_binder else caught-fail) in
                                            {3898}let x_255: bitstring = (if v_779 then (l_227,h_225) else caught-fail) in
                                            {3899}let binder_key_41: bitstring = (if v_778 then catch-fail((if v_779 then hmac(@8_tls_h,early_secret_61,x_255) else fail-any)) else caught-fail) in
                                            {3900}let v_780: bool = not-caught-fail(binder_key_41) in
                                            {3901}let v_781: bitstring = (if v_776 then catch-fail((if v_778 then (if v_780 then (early_secret_61,binder_key_41) else fail-any) else fail-any)) else caught-fail) in
                                            {3902}let v_782: bool = (not-caught-fail(v_781) && success?(1-proj-2-tuple(v_781))) in
                                            {3903}let kb_41: mac_key = (if v_782 then 2-proj-2-tuple(v_781) else caught-fail) in
                                            {3904}let es_63: bitstring = (if v_782 then 1-proj-2-tuple(v_781) else caught-fail) in
                                            {3905}let v_783: bitstring = (if not(v_776) then catch-fail(psk_data'_14) else caught-fail) in
                                            {3906}let v_784: bool = (not-caught-fail(v_783) && success?(1-proj-4-tuple(v_783))) in
                                            {3907}let is_safe_39: bool = (if v_784 then 4-proj-4-tuple(v_783) else caught-fail) in
                                            {3908}let es_64: bitstring = (if v_784 then 3-proj-4-tuple(v_783) else caught-fail) in
                                            {3909}let id_48: identityPsk = (if v_784 then 2-proj-4-tuple(v_783) else caught-fail) in
                                            {3910}let psk_97: preSharedKey = (if v_784 then 1-proj-4-tuple(v_783) else caught-fail) in
                                            {3911}let (psk_98: preSharedKey,early_secret_62: bitstring,valid_18: bool,safe_psk_26: bool) = (if v_776 then (if v_782 then (NoPsk,es_63,true,false) else fail-any) else (if v_784 then (psk_97,es_64,((psk_97 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_47)),is_safe_39) else fail-any)) in
                                            {3912}event Client_PSKChoosen(id_client_4,psk_98,safe_psk_26);
                                            {3913}if valid_18 then
                                            (
                                                {3916}new s_76[]: seed;
                                                {3914}let gxy_38: element = catch-fail(dh_decap_fun(g_19,gy_19,x_254)) in
                                                {3915}let v_785: bool = not-caught-fail(gxy_38) in
                                                {3917}let gxy_39: element = (if v_785 then gxy_38 else dh_f(s_76)) in
                                                {3918}event Client_DH_gxy(id_client_4,gxy_39);
                                                {3920}let m_80: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3921}let v_786: bool = not-caught-fail(m_80) in
                                                {3922}let h_226: bitstring = (if v_786 then catch-fail(hash(@8_tls_h,m_80)) else caught-fail) in
                                                {3923}let v_787: bool = not-caught-fail(h_226) in
                                                {3919}let l_228: label = tls13_derived in
                                                {3924}let x_256: bitstring = (if v_787 then (l_228,h_226) else caught-fail) in
                                                {3925}let extra_45: bitstring = catch-fail((if v_786 then (if v_787 then hmac(@8_tls_h,early_secret_62,x_256) else fail-any) else fail-any)) in
                                                {3926}let v_788: bool = not-caught-fail(extra_45) in
                                                {3927}let handshake_secret_19: bitstring = (if v_788 then hmac(@8_tls_h,extra_45,gxy_39) else fail-any) in
                                                {3929}let m_81: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3930}let v_789: bool = not-caught-fail(m_81) in
                                                {3931}let h_227: bitstring = (if v_789 then catch-fail(hash(@8_tls_h,m_81)) else caught-fail) in
                                                {3932}let v_790: bool = not-caught-fail(h_227) in
                                                {3928}let l_229: label = tls13_derived in
                                                {3933}let x_257: bitstring = (if v_790 then (l_229,h_227) else caught-fail) in
                                                {3934}let extra_46: bitstring = catch-fail((if v_789 then (if v_790 then hmac(@8_tls_h,handshake_secret_19,x_257) else fail-any) else fail-any)) in
                                                {3935}let v_791: bool = not-caught-fail(extra_46) in
                                                {3936}let k_67: bitstring = (if v_791 then zero else caught-fail) in
                                                {3937}let master_secret_45: bitstring = (if v_791 then catch-fail(hmac(@8_tls_h,handshake_secret_19,k_67)) else caught-fail) in
                                                {3938}let v_792: bool = not-caught-fail(master_secret_45) in
                                                {3871}let cur_log4_14: bitstring = (cur_log3_6,client_hello'_17) in
                                                {3885}let cur_log2_45: bitstring = (cur_log4_14,server_hello'_14) in
                                                {3940}let h_228: bitstring = (if v_792 then catch-fail(hash(@8_tls_h,cur_log2_45)) else caught-fail) in
                                                {3941}let v_793: bool = not-caught-fail(h_228) in
                                                {3939}let l_230: label = (if v_792 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {3942}let x_258: bitstring = (if v_793 then (l_230,h_228) else caught-fail) in
                                                {3943}let client_hts_19: bitstring = (if v_792 then catch-fail((if v_793 then hmac(@8_tls_h,handshake_secret_19,x_258) else fail-any)) else caught-fail) in
                                                {3944}let v_794: bool = not-caught-fail(client_hts_19) in
                                                {3946}let h_229: bitstring = (if v_794 then catch-fail(hash(@8_tls_h,cur_log2_45)) else caught-fail) in
                                                {3947}let v_795: bool = not-caught-fail(h_229) in
                                                {3945}let l_231: label = (if v_794 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {3948}let x_259: bitstring = (if v_795 then (l_231,h_229) else caught-fail) in
                                                {3949}let server_hts_19: bitstring = (if v_794 then catch-fail((if v_795 then hmac(@8_tls_h,handshake_secret_19,x_259) else fail-any)) else caught-fail) in
                                                {3950}let v_796: bool = not-caught-fail(server_hts_19) in
                                                {3952}let h_230: bitstring = (if v_796 then zero else caught-fail) in
                                                {3951}let l_232: label = (if v_796 then tls13_key else caught-fail) in
                                                {3953}let x_260: bitstring = (if v_796 then (l_232,h_230) else caught-fail) in
                                                {3954}let client_wkh_19: bitstring = (if v_796 then catch-fail(hmac(@8_tls_h,client_hts_19,x_260)) else caught-fail) in
                                                {3955}let v_797: bool = not-caught-fail(client_wkh_19) in
                                                {3957}let h_231: bitstring = (if v_797 then zero else caught-fail) in
                                                {3956}let l_233: label = (if v_797 then tls13_key else caught-fail) in
                                                {3958}let x_261: bitstring = (if v_797 then (l_233,h_231) else caught-fail) in
                                                {3959}let server_wkh_19: bitstring = (if v_797 then catch-fail(hmac(@8_tls_h,server_hts_19,x_261)) else caught-fail) in
                                                {3960}let v_798: bool = not-caught-fail(server_wkh_19) in
                                                {3962}let h_232: bitstring = (if v_798 then zero else caught-fail) in
                                                {3961}let l_234: label = (if v_798 then tls13_finished else caught-fail) in
                                                {3963}let x_262: bitstring = (if v_798 then (l_234,h_232) else caught-fail) in
                                                {3964}let client_fk_19: bitstring = (if v_798 then catch-fail(hmac(@8_tls_h,client_hts_19,x_262)) else caught-fail) in
                                                {3965}let v_799: bool = not-caught-fail(client_fk_19) in
                                                {3967}let h_233: bitstring = (if v_799 then zero else caught-fail) in
                                                {3966}let l_235: label = (if v_799 then tls13_finished else caught-fail) in
                                                {3968}let x_263: bitstring = (if v_799 then (l_235,h_233) else caught-fail) in
                                                {3969}let server_fk_19: bitstring = (if v_799 then catch-fail(hmac(@8_tls_h,server_hts_19,x_263)) else caught-fail) in
                                                {3970}let v_800: bool = not-caught-fail(server_fk_19) in
                                                {3971}let (master_secret_46: bitstring,chk_26: aead_key,shk_25: aead_key,cfin_26: mac_key,sfin_25: mac_key) = (if v_791 then (if v_792 then (if v_794 then (if v_796 then (if v_797 then (if v_798 then (if v_799 then (if v_800 then (master_secret_45,client_wkh_19,server_wkh_19,client_fk_19,server_fk_19) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {3972}event Client_chk(id_client_4,chk_26);
                                                {3973}event Client_shk(id_client_4,shk_25);
                                                {3974}event Client_cfin(id_client_4,cfin_26);
                                                {3975}event Client_sfin(id_client_4,sfin_25);
                                                {3976}in(io, enc_ee_msg_18: bitstring);
                                                {3977}let ee_msg_23: msg = aead_dec(@8_tls_a,shk_25,0,zero,enc_ee_msg_18) in
                                                {3978}let EE(ech_ee_18: echExt,extra_ee_18: extraExt) = ee_msg_23 in
                                                {3979}let cur_log2_46: bitstring = (cur_log2_45,ee_msg_23) in
                                                {3980}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_19,sr_31,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_98,safe_psk_26,@8_comp_psk,master_secret_46,chk_26,0,shk_25,1,cfin_26,sfin_25,cur_log2_46)))
                                            )
                                            else
                                                {3981}out(io, illegal_parameter)
                                        )
                                        else
                                            {3982}out(io, illegal_parameter)
                                )
                                else
                                    {3983}out(io, unexpected_message)
                        )
                        else
                            {3984}out(io, illegal_parameter)
                    )
                    else
                        {3985}if send_kex_4 then
                        (
                            {3986}let (x_264: bitstring,g_20: group) = kex_data_10 in
                            {3987}let (psk_offer_19: preSharedKey,id_offer_19: identityPsk,es_offer_19: bitstring,is_safe_offer_19: bool) = psk_data_21 in
                            {3988}event Client_PSKOffer(id_client_4,psk_offer_19,id_offer_19,is_safe_offer_19);
                            {3989}event Client_Rand_client(id_client_4,cr_24);
                            {3990}event Client_DH_client(id_client_4,dh_pub(g_20,x_264));
                            {3991}event Client_server_domain(id_client_4,s_dom_16);
                            {3992}let SH(sr_32: bytes32,mode_24: params) = server_hello_5 in
                            {3993}event Client_Rand_server(id_client_4,sr_32);
                            {3994}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_20,gy_20: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_48: preSharedKeyExt) = mode_24 in
                            (
                                {3996}event Client_DH_server(id_client_4,gy_20);
                                {3997}let v_801: bool = (psk_ext_48 = empty_psk_ext) in
                                {3998}let psk_99: preSharedKey = (if v_801 then NoPsk else caught-fail) in
                                {4000}let k_68: bitstring = (if v_801 then catch-fail(psk2b(psk_99)) else caught-fail) in
                                {4001}let v_802: bool = not-caught-fail(k_68) in
                                {3999}let s_77: bitstring = (if v_801 then zero else caught-fail) in
                                {4002}let early_secret_63: bitstring = (if v_801 then catch-fail((if v_802 then hmac(@8_tls_h,s_77,k_68) else fail-any)) else caught-fail) in
                                {4003}let v_803: bool = not-caught-fail(early_secret_63) in
                                {4005}let m_82: bitstring = (if v_803 then zero else caught-fail) in
                                {4006}let h_234: bitstring = (if v_803 then catch-fail(hash(@8_tls_h,m_82)) else caught-fail) in
                                {4007}let v_804: bool = not-caught-fail(h_234) in
                                {4004}let l_236: label = (if v_803 then tls13_ext_res_binder else caught-fail) in
                                {4008}let x_265: bitstring = (if v_804 then (l_236,h_234) else caught-fail) in
                                {4009}let binder_key_42: bitstring = (if v_803 then catch-fail((if v_804 then hmac(@8_tls_h,early_secret_63,x_265) else fail-any)) else caught-fail) in
                                {4010}let v_805: bool = not-caught-fail(binder_key_42) in
                                {4011}let v_806: bitstring = (if v_801 then catch-fail((if v_803 then (if v_805 then (early_secret_63,binder_key_42) else fail-any) else fail-any)) else caught-fail) in
                                {4012}let v_807: bool = (not-caught-fail(v_806) && success?(1-proj-2-tuple(v_806))) in
                                {4013}let kb_42: mac_key = (if v_807 then 2-proj-2-tuple(v_806) else caught-fail) in
                                {4014}let es_65: bitstring = (if v_807 then 1-proj-2-tuple(v_806) else caught-fail) in
                                {4015}let v_808: bitstring = (if not(v_801) then catch-fail(psk_data_21) else caught-fail) in
                                {4016}let v_809: bool = (not-caught-fail(v_808) && success?(1-proj-4-tuple(v_808))) in
                                {4017}let is_safe_40: bool = (if v_809 then 4-proj-4-tuple(v_808) else caught-fail) in
                                {4018}let es_66: bitstring = (if v_809 then 3-proj-4-tuple(v_808) else caught-fail) in
                                {4019}let id_49: identityPsk = (if v_809 then 2-proj-4-tuple(v_808) else caught-fail) in
                                {4020}let psk_100: preSharedKey = (if v_809 then 1-proj-4-tuple(v_808) else caught-fail) in
                                {4021}let (psk_101: preSharedKey,early_secret_64: bitstring,valid_19: bool,safe_psk_27: bool) = (if v_801 then (if v_807 then (NoPsk,es_65,true,false) else fail-any) else (if v_809 then (psk_100,es_66,((psk_100 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_48)),is_safe_40) else fail-any)) in
                                {4022}event Client_PSKChoosen(id_client_4,psk_101,safe_psk_27);
                                {4023}if valid_19 then
                                (
                                    {4026}new s_78[]: seed;
                                    {4024}let gxy_40: element = catch-fail(dh_decap_fun(g_20,gy_20,x_264)) in
                                    {4025}let v_810: bool = not-caught-fail(gxy_40) in
                                    {4027}let gxy_41: element = (if v_810 then gxy_40 else dh_f(s_78)) in
                                    {4028}event Client_DH_gxy(id_client_4,gxy_41);
                                    {4030}let m_83: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {4031}let v_811: bool = not-caught-fail(m_83) in
                                    {4032}let h_235: bitstring = (if v_811 then catch-fail(hash(@8_tls_h,m_83)) else caught-fail) in
                                    {4033}let v_812: bool = not-caught-fail(h_235) in
                                    {4029}let l_237: label = tls13_derived in
                                    {4034}let x_266: bitstring = (if v_812 then (l_237,h_235) else caught-fail) in
                                    {4035}let extra_47: bitstring = catch-fail((if v_811 then (if v_812 then hmac(@8_tls_h,early_secret_64,x_266) else fail-any) else fail-any)) in
                                    {4036}let v_813: bool = not-caught-fail(extra_47) in
                                    {4037}let handshake_secret_20: bitstring = (if v_813 then hmac(@8_tls_h,extra_47,gxy_41) else fail-any) in
                                    {4039}let m_84: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {4040}let v_814: bool = not-caught-fail(m_84) in
                                    {4041}let h_236: bitstring = (if v_814 then catch-fail(hash(@8_tls_h,m_84)) else caught-fail) in
                                    {4042}let v_815: bool = not-caught-fail(h_236) in
                                    {4038}let l_238: label = tls13_derived in
                                    {4043}let x_267: bitstring = (if v_815 then (l_238,h_236) else caught-fail) in
                                    {4044}let extra_48: bitstring = catch-fail((if v_814 then (if v_815 then hmac(@8_tls_h,handshake_secret_20,x_267) else fail-any) else fail-any)) in
                                    {4045}let v_816: bool = not-caught-fail(extra_48) in
                                    {4046}let k_69: bitstring = (if v_816 then zero else caught-fail) in
                                    {4047}let master_secret_47: bitstring = (if v_816 then catch-fail(hmac(@8_tls_h,handshake_secret_20,k_69)) else caught-fail) in
                                    {4048}let v_817: bool = not-caught-fail(master_secret_47) in
                                    {3995}let cur_log2_47: bitstring = (cur_log2_40,server_hello_5) in
                                    {4050}let h_237: bitstring = (if v_817 then catch-fail(hash(@8_tls_h,cur_log2_47)) else caught-fail) in
                                    {4051}let v_818: bool = not-caught-fail(h_237) in
                                    {4049}let l_239: label = (if v_817 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {4052}let x_268: bitstring = (if v_818 then (l_239,h_237) else caught-fail) in
                                    {4053}let client_hts_20: bitstring = (if v_817 then catch-fail((if v_818 then hmac(@8_tls_h,handshake_secret_20,x_268) else fail-any)) else caught-fail) in
                                    {4054}let v_819: bool = not-caught-fail(client_hts_20) in
                                    {4056}let h_238: bitstring = (if v_819 then catch-fail(hash(@8_tls_h,cur_log2_47)) else caught-fail) in
                                    {4057}let v_820: bool = not-caught-fail(h_238) in
                                    {4055}let l_240: label = (if v_819 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {4058}let x_269: bitstring = (if v_820 then (l_240,h_238) else caught-fail) in
                                    {4059}let server_hts_20: bitstring = (if v_819 then catch-fail((if v_820 then hmac(@8_tls_h,handshake_secret_20,x_269) else fail-any)) else caught-fail) in
                                    {4060}let v_821: bool = not-caught-fail(server_hts_20) in
                                    {4062}let h_239: bitstring = (if v_821 then zero else caught-fail) in
                                    {4061}let l_241: label = (if v_821 then tls13_key else caught-fail) in
                                    {4063}let x_270: bitstring = (if v_821 then (l_241,h_239) else caught-fail) in
                                    {4064}let client_wkh_20: bitstring = (if v_821 then catch-fail(hmac(@8_tls_h,client_hts_20,x_270)) else caught-fail) in
                                    {4065}let v_822: bool = not-caught-fail(client_wkh_20) in
                                    {4067}let h_240: bitstring = (if v_822 then zero else caught-fail) in
                                    {4066}let l_242: label = (if v_822 then tls13_key else caught-fail) in
                                    {4068}let x_271: bitstring = (if v_822 then (l_242,h_240) else caught-fail) in
                                    {4069}let server_wkh_20: bitstring = (if v_822 then catch-fail(hmac(@8_tls_h,server_hts_20,x_271)) else caught-fail) in
                                    {4070}let v_823: bool = not-caught-fail(server_wkh_20) in
                                    {4072}let h_241: bitstring = (if v_823 then zero else caught-fail) in
                                    {4071}let l_243: label = (if v_823 then tls13_finished else caught-fail) in
                                    {4073}let x_272: bitstring = (if v_823 then (l_243,h_241) else caught-fail) in
                                    {4074}let client_fk_20: bitstring = (if v_823 then catch-fail(hmac(@8_tls_h,client_hts_20,x_272)) else caught-fail) in
                                    {4075}let v_824: bool = not-caught-fail(client_fk_20) in
                                    {4077}let h_242: bitstring = (if v_824 then zero else caught-fail) in
                                    {4076}let l_244: label = (if v_824 then tls13_finished else caught-fail) in
                                    {4078}let x_273: bitstring = (if v_824 then (l_244,h_242) else caught-fail) in
                                    {4079}let server_fk_20: bitstring = (if v_824 then catch-fail(hmac(@8_tls_h,server_hts_20,x_273)) else caught-fail) in
                                    {4080}let v_825: bool = not-caught-fail(server_fk_20) in
                                    {4081}let (master_secret_48: bitstring,chk_27: aead_key,shk_26: aead_key,cfin_27: mac_key,sfin_26: mac_key) = (if v_816 then (if v_817 then (if v_819 then (if v_821 then (if v_822 then (if v_823 then (if v_824 then (if v_825 then (master_secret_47,client_wkh_20,server_wkh_20,client_fk_20,server_fk_20) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {4082}event Client_chk(id_client_4,chk_27);
                                    {4083}event Client_shk(id_client_4,shk_26);
                                    {4084}event Client_cfin(id_client_4,cfin_27);
                                    {4085}event Client_sfin(id_client_4,sfin_26);
                                    {4086}in(io, enc_ee_msg_19: bitstring);
                                    {4087}let ee_msg_24: msg = aead_dec(@8_tls_a,shk_26,0,zero,enc_ee_msg_19) in
                                    {4088}let EE(ech_ee_19: echExt,extra_ee_19: extraExt) = ee_msg_24 in
                                    {4089}let cur_log2_48: bitstring = (cur_log2_47,ee_msg_24) in
                                    {4090}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr_24,sr_32,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_101,safe_psk_27,@8_comp_psk,master_secret_48,chk_27,0,shk_26,1,cfin_27,sfin_26,cur_log2_48)))
                                )
                                else
                                    {4091}out(io, illegal_parameter)
                            )
                            else
                                {4092}out(io, illegal_parameter)
                        )
                        else
                            {4093}out(io, illegal_parameter)
                )
                else
                    {4094}out(io, unexpected_message)
            )
    )
    else
        {4096}let psk_102: preSharedKey = NoPsk in
        {4098}let k_70: bitstring = catch-fail(psk2b(psk_102)) in
        {4099}let v_826: bool = not-caught-fail(k_70) in
        {4097}let s_79: bitstring = zero in
        {4100}let early_secret_65: bitstring = catch-fail((if v_826 then hmac(@8_tls_h,s_79,k_70) else fail-any)) in
        {4101}let v_827: bool = not-caught-fail(early_secret_65) in
        {4103}let m_85: bitstring = (if v_827 then zero else caught-fail) in
        {4104}let h_243: bitstring = (if v_827 then catch-fail(hash(@8_tls_h,m_85)) else caught-fail) in
        {4105}let v_828: bool = not-caught-fail(h_243) in
        {4102}let l_245: label = (if v_827 then tls13_ext_res_binder else caught-fail) in
        {4106}let x_274: bitstring = (if v_828 then (l_245,h_243) else caught-fail) in
        {4107}let binder_key_43: bitstring = (if v_827 then catch-fail((if v_828 then hmac(@8_tls_h,early_secret_65,x_274) else fail-any)) else caught-fail) in
        {4108}let v_829: bool = not-caught-fail(binder_key_43) in
        {4109}let v_830: bitstring = catch-fail((if v_827 then (if v_829 then (early_secret_65,binder_key_43) else fail-any) else fail-any)) in
        {4110}let v_831: bool = (not-caught-fail(v_830) && success?(1-proj-2-tuple(v_830))) in
        {4111}let kb_43: mac_key = (if v_831 then 2-proj-2-tuple(v_830) else caught-fail) in
        {4112}let es_67: bitstring = (if v_831 then 1-proj-2-tuple(v_830) else caught-fail) in
        {4113}let v_832: bitstring = catch-fail((if v_831 then (empty_psk_ext,(NoPsk,zero,es_67,false)) else fail-any)) in
        {4114}let v_833: bool = (not-caught-fail(v_832) && success?(1-proj-2-tuple(v_832))) in
        {4115}let psk_data_25: bitstring = (if v_833 then 2-proj-2-tuple(v_832) else caught-fail) in
        {4116}let psk_ext_49: preSharedKeyExt = (if v_833 then 1-proj-2-tuple(v_832) else caught-fail) in
        {4117}let offer_36: params = (if v_833 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_49) else caught-fail) in
        {4118}let (client_hello_11: msg,cr_26: bytes32,kex_data_12: bitstring,psk_data_26: bitstring) = (if v_833 then (CH(cr_21,offer_36),cr_21,kex_data_7,psk_data_25) else fail-any) in
        {4119}event ClientOffersAead(cr_26,@8_tls_a);
        {4120}event ClientOffersHash(cr_26,@8_tls_h);
        {4121}event ClientOffersGroup(cr_26,@8_tls_g);
        {4122}out(io, client_hello_11);
        {4124}let (psk_103: preSharedKey,id_50: identityPsk,es_68: bitstring,safe_psk_28: bool) = psk_data_26 in
        (
            {4125}if (false && (psk_103 ≠ NoPsk)) then
            {4126}let client_hello_12: bitstring = (zero,client_hello_11) in
            {4128}let h_244: bitstring = catch-fail(hash(@8_tls_h,client_hello_12)) in
            {4129}let v_834: bool = not-caught-fail(h_244) in
            {4127}let l_246: label = tls13_client_early_traffic_secret in
            {4130}let x_275: bitstring = (if v_834 then (l_246,h_244) else caught-fail) in
            {4131}let atsc0_6: bitstring = catch-fail((if v_834 then hmac(@8_tls_h,es_68,x_275) else fail-any)) in
            {4132}let v_835: bool = not-caught-fail(atsc0_6) in
            {4134}let h_245: bitstring = (if v_835 then zero else caught-fail) in
            {4133}let l_247: label = (if v_835 then tls13_key else caught-fail) in
            {4135}let x_276: bitstring = (if v_835 then (l_247,h_245) else caught-fail) in
            {4136}let kc0_6: bitstring = (if v_835 then catch-fail(hmac(@8_tls_h,atsc0_6,x_276)) else caught-fail) in
            {4137}let v_836: bool = not-caught-fail(kc0_6) in
            {4139}let h_246: bitstring = (if v_836 then catch-fail(hash(@8_tls_h,client_hello_12)) else caught-fail) in
            {4140}let v_837: bool = not-caught-fail(h_246) in
            {4138}let l_248: label = (if v_836 then tls13_early_exporter_master_secret else caught-fail) in
            {4141}let x_277: bitstring = (if v_837 then (l_248,h_246) else caught-fail) in
            {4142}let ems0_12: bitstring = (if v_836 then catch-fail((if v_837 then hmac(@8_tls_h,es_68,x_277) else fail-any)) else caught-fail) in
            {4143}let v_838: bool = not-caught-fail(ems0_12) in
            {4144}let (wkc0_6: aead_key,ems0_13: bitstring) = (if v_835 then (if v_836 then (if v_838 then (kc0_6,ems0_12) else fail-any) else fail-any) else fail-any) in
            {4145}!
            {4146}in(io, (i_6: nat,ad_6: bitstring));
            {4147}if is_nat(i_6) then
            {4148}new msg_ed_5[]: bitstring;
            {4150}new st_15: stamp;
            {4151}event ClientSequenceClient0RTTDataWriteKey(id_client_4,st_15,i_6);
            {4152}event ClientSends0(id_client_4,cr_26,psk_103,i_6,ad_6,msg_ed_5);
            {4149}let enc_ed_5: bitstring = aead_enc(@8_tls_a,wkc0_6,i_6,ad_6,msg_ed_5) in
            {4153}out(io, enc_ed_5)
        ) | (
            {4154}in(io, server_hello_6: msg);
            {4155}let SH(sr_33: bytes32,mode_25: params) = server_hello_6 in
            (
                {4156}event ClientEchAcceptance(id_client_4,false);
                {4123}let cur_log2_49: bitstring = (cur_log_10,client_hello_11) in
                {4157}if (false && (sr_33 = B32(HRR24,HRR8))) then
                (
                    {4158}if ((mode_25 = nego(TLS13,@8_tls_h,@8_tls_a,hrr_kex_ext(@8_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex_4 ≠ true)) then
                    (
                        {4161}new rand24_8[]: bytes24;
                        {4162}new rand8_8[]: bytes8;
                        {4164}new s_80[]: seed;
                        {4165}let gx_21: element = dh_pub(@8_tls_g,dh_k(s_80)) in
                        {4166}let v_839: bitstring = (dh_k(s_80),gx_21) in
                        {4167}let v_840: bool = success?(1-proj-2-tuple(v_839)) in
                        {4168}let gx_22: element = (if v_840 then 2-proj-2-tuple(v_839) else caught-fail) in
                        {4169}let x_278: bitstring = (if v_840 then 1-proj-2-tuple(v_839) else caught-fail) in
                        {4160}let send_kex_7: bool = true in
                        {4170}let kex_7: kex_alg = (if v_840 then (if send_kex_7 then DHE_kex(@8_tls_g,gx_22) else DHE_group(@8_tls_g)) else caught-fail) in
                        {4171}let (kex_ext_15: keyShareExt,kex_data_13: bitstring) = (if v_840 then (client_kex_ext(kex_7),(x_278,@8_tls_g)) else fail-any) in
                        {4163}let cr_27: bytes32 = B32(rand24_8,rand8_8) in
                        {4159}let cur_log3_7: bitstring = (cur_log2_49,server_hello_6) in
                        {4174}if @8_use_psk then
                        (
                            {4173}let extra_49: extraExt = empty_extra_ext in
                            {4172}let ech_ext_16: echExt = empty_ech_ext in
                            {4175}let (psk_104: preSharedKey,id_51: identityPsk,old_es_7: bitstring,is_safe_41: bool) = psk_data_26 in
                            (
                                {4179}let k_71: bitstring = catch-fail(psk2b(psk_104)) in
                                {4180}let v_841: bool = not-caught-fail(k_71) in
                                {4178}let s_81: bitstring = zero in
                                {4181}let early_secret_66: bitstring = catch-fail((if v_841 then hmac(@8_tls_h,s_81,k_71) else fail-any)) in
                                {4182}let v_842: bool = not-caught-fail(early_secret_66) in
                                {4184}let m_86: bitstring = (if v_842 then zero else caught-fail) in
                                {4185}let h_247: bitstring = (if v_842 then catch-fail(hash(@8_tls_h,m_86)) else caught-fail) in
                                {4186}let v_843: bool = not-caught-fail(h_247) in
                                {4183}let l_249: label = (if v_842 then tls13_ext_res_binder else caught-fail) in
                                {4187}let x_279: bitstring = (if v_843 then (l_249,h_247) else caught-fail) in
                                {4188}let binder_key_44: bitstring = (if v_842 then catch-fail((if v_843 then hmac(@8_tls_h,early_secret_66,x_279) else fail-any)) else caught-fail) in
                                {4189}let v_844: bool = not-caught-fail(binder_key_44) in
                                {4190}let v_845: bitstring = catch-fail((if v_842 then (if v_844 then (early_secret_66,binder_key_44) else fail-any) else fail-any)) in
                                {4191}let v_846: bool = (not-caught-fail(v_845) && success?(1-proj-2-tuple(v_845))) in
                                {4192}let kb_44: mac_key = (if v_846 then 2-proj-2-tuple(v_845) else caught-fail) in
                                {4193}let es_69: bitstring = (if v_846 then 1-proj-2-tuple(v_845) else caught-fail) in
                                {4176}let offer_37: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_16),ech_ext_16,extra_49,trunc_client_psk_ext(id_51)) in
                                {4177}let cur_log'_16: bitstring = (cur_log3_7,CH(cr_27,offer_37)) in
                                {4194}let binders_15: bitstring = (if v_846 then catch-fail(hmac(@8_tls_h,kb_44,cur_log'_16)) else caught-fail) in
                                {4195}let v_847: bool = not-caught-fail(binders_15) in
                                {4196}let v_848: bitstring = catch-fail((if v_846 then (if v_847 then (client_psk_ext(id_51,binders_15),(psk_104,id_51,es_69,is_safe_41)) else fail-any) else fail-any)) in
                                {4197}let v_849: bool = (not-caught-fail(v_848) && success?(1-proj-2-tuple(v_848))) in
                                {4198}let psk_data_27: bitstring = (if v_849 then 2-proj-2-tuple(v_848) else caught-fail) in
                                {4199}let psk_ext_50: preSharedKeyExt = (if v_849 then 1-proj-2-tuple(v_848) else caught-fail) in
                                {4200}let offer_38: params = (if v_849 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_50) else caught-fail) in
                                {4201}let (client_hello'_18: msg,cr'_20: bytes32,kex_data'_15: bitstring,psk_data'_15: bitstring) = (if v_849 then (CH(cr_27,offer_38),cr_27,kex_data_13,psk_data_27) else fail-any) in
                                {4202}event ClientOffersAead(cr'_20,@8_tls_a);
                                {4203}event ClientOffersHash(cr'_20,@8_tls_h);
                                {4204}event ClientOffersGroup(cr'_20,@8_tls_g);
                                {4205}out(io, client_hello'_18);
                                {4207}in(io, server_hello'_15: msg);
                                {4208}let SH(sr'_15: bytes32,mode'_15: params) = server_hello'_15 in
                                (
                                    {4209}if (sr'_15 = B32(HRR24,HRR8)) then
                                        {4210}out(io, unexpected_message)
                                    else
                                        {4211}let (x_280: bitstring,g_21: group) = kex_data'_15 in
                                        {4212}let (psk_offer_20: preSharedKey,id_offer_20: identityPsk,es_offer_20: bitstring,is_safe_offer_20: bool) = psk_data'_15 in
                                        {4213}event Client_PSKOffer(id_client_4,psk_offer_20,id_offer_20,is_safe_offer_20);
                                        {4214}event Client_Rand_client(id_client_4,cr'_20);
                                        {4215}event Client_DH_client(id_client_4,dh_pub(g_21,x_280));
                                        {4216}event Client_server_domain(id_client_4,s_dom_16);
                                        {4217}let SH(sr_34: bytes32,mode_26: params) = server_hello'_15 in
                                        {4218}event Client_Rand_server(id_client_4,sr_34);
                                        {4219}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_21,gy_21: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_51: preSharedKeyExt) = mode_26 in
                                        (
                                            {4221}event Client_DH_server(id_client_4,gy_21);
                                            {4222}let v_850: bool = (psk_ext_51 = empty_psk_ext) in
                                            {4223}let psk_105: preSharedKey = (if v_850 then NoPsk else caught-fail) in
                                            {4225}let k_72: bitstring = (if v_850 then catch-fail(psk2b(psk_105)) else caught-fail) in
                                            {4226}let v_851: bool = not-caught-fail(k_72) in
                                            {4224}let s_82: bitstring = (if v_850 then zero else caught-fail) in
                                            {4227}let early_secret_67: bitstring = (if v_850 then catch-fail((if v_851 then hmac(@8_tls_h,s_82,k_72) else fail-any)) else caught-fail) in
                                            {4228}let v_852: bool = not-caught-fail(early_secret_67) in
                                            {4230}let m_87: bitstring = (if v_852 then zero else caught-fail) in
                                            {4231}let h_248: bitstring = (if v_852 then catch-fail(hash(@8_tls_h,m_87)) else caught-fail) in
                                            {4232}let v_853: bool = not-caught-fail(h_248) in
                                            {4229}let l_250: label = (if v_852 then tls13_ext_res_binder else caught-fail) in
                                            {4233}let x_281: bitstring = (if v_853 then (l_250,h_248) else caught-fail) in
                                            {4234}let binder_key_45: bitstring = (if v_852 then catch-fail((if v_853 then hmac(@8_tls_h,early_secret_67,x_281) else fail-any)) else caught-fail) in
                                            {4235}let v_854: bool = not-caught-fail(binder_key_45) in
                                            {4236}let v_855: bitstring = (if v_850 then catch-fail((if v_852 then (if v_854 then (early_secret_67,binder_key_45) else fail-any) else fail-any)) else caught-fail) in
                                            {4237}let v_856: bool = (not-caught-fail(v_855) && success?(1-proj-2-tuple(v_855))) in
                                            {4238}let kb_45: mac_key = (if v_856 then 2-proj-2-tuple(v_855) else caught-fail) in
                                            {4239}let es_70: bitstring = (if v_856 then 1-proj-2-tuple(v_855) else caught-fail) in
                                            {4240}let v_857: bitstring = (if not(v_850) then catch-fail(psk_data'_15) else caught-fail) in
                                            {4241}let v_858: bool = (not-caught-fail(v_857) && success?(1-proj-4-tuple(v_857))) in
                                            {4242}let is_safe_42: bool = (if v_858 then 4-proj-4-tuple(v_857) else caught-fail) in
                                            {4243}let es_71: bitstring = (if v_858 then 3-proj-4-tuple(v_857) else caught-fail) in
                                            {4244}let id_52: identityPsk = (if v_858 then 2-proj-4-tuple(v_857) else caught-fail) in
                                            {4245}let psk_106: preSharedKey = (if v_858 then 1-proj-4-tuple(v_857) else caught-fail) in
                                            {4246}let (psk_107: preSharedKey,early_secret_68: bitstring,valid_20: bool,safe_psk_29: bool) = (if v_850 then (if v_856 then (NoPsk,es_70,true,false) else fail-any) else (if v_858 then (psk_106,es_71,((psk_106 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_51)),is_safe_42) else fail-any)) in
                                            {4247}event Client_PSKChoosen(id_client_4,psk_107,safe_psk_29);
                                            {4248}if valid_20 then
                                            (
                                                {4251}new s_83[]: seed;
                                                {4249}let gxy_42: element = catch-fail(dh_decap_fun(g_21,gy_21,x_280)) in
                                                {4250}let v_859: bool = not-caught-fail(gxy_42) in
                                                {4252}let gxy_43: element = (if v_859 then gxy_42 else dh_f(s_83)) in
                                                {4253}event Client_DH_gxy(id_client_4,gxy_43);
                                                {4255}let m_88: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4256}let v_860: bool = not-caught-fail(m_88) in
                                                {4257}let h_249: bitstring = (if v_860 then catch-fail(hash(@8_tls_h,m_88)) else caught-fail) in
                                                {4258}let v_861: bool = not-caught-fail(h_249) in
                                                {4254}let l_251: label = tls13_derived in
                                                {4259}let x_282: bitstring = (if v_861 then (l_251,h_249) else caught-fail) in
                                                {4260}let extra_50: bitstring = catch-fail((if v_860 then (if v_861 then hmac(@8_tls_h,early_secret_68,x_282) else fail-any) else fail-any)) in
                                                {4261}let v_862: bool = not-caught-fail(extra_50) in
                                                {4262}let handshake_secret_21: bitstring = (if v_862 then hmac(@8_tls_h,extra_50,gxy_43) else fail-any) in
                                                {4264}let m_89: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4265}let v_863: bool = not-caught-fail(m_89) in
                                                {4266}let h_250: bitstring = (if v_863 then catch-fail(hash(@8_tls_h,m_89)) else caught-fail) in
                                                {4267}let v_864: bool = not-caught-fail(h_250) in
                                                {4263}let l_252: label = tls13_derived in
                                                {4268}let x_283: bitstring = (if v_864 then (l_252,h_250) else caught-fail) in
                                                {4269}let extra_51: bitstring = catch-fail((if v_863 then (if v_864 then hmac(@8_tls_h,handshake_secret_21,x_283) else fail-any) else fail-any)) in
                                                {4270}let v_865: bool = not-caught-fail(extra_51) in
                                                {4271}let k_73: bitstring = (if v_865 then zero else caught-fail) in
                                                {4272}let master_secret_49: bitstring = (if v_865 then catch-fail(hmac(@8_tls_h,handshake_secret_21,k_73)) else caught-fail) in
                                                {4273}let v_866: bool = not-caught-fail(master_secret_49) in
                                                {4206}let cur_log4_15: bitstring = (cur_log3_7,client_hello'_18) in
                                                {4220}let cur_log2_50: bitstring = (cur_log4_15,server_hello'_15) in
                                                {4275}let h_251: bitstring = (if v_866 then catch-fail(hash(@8_tls_h,cur_log2_50)) else caught-fail) in
                                                {4276}let v_867: bool = not-caught-fail(h_251) in
                                                {4274}let l_253: label = (if v_866 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {4277}let x_284: bitstring = (if v_867 then (l_253,h_251) else caught-fail) in
                                                {4278}let client_hts_21: bitstring = (if v_866 then catch-fail((if v_867 then hmac(@8_tls_h,handshake_secret_21,x_284) else fail-any)) else caught-fail) in
                                                {4279}let v_868: bool = not-caught-fail(client_hts_21) in
                                                {4281}let h_252: bitstring = (if v_868 then catch-fail(hash(@8_tls_h,cur_log2_50)) else caught-fail) in
                                                {4282}let v_869: bool = not-caught-fail(h_252) in
                                                {4280}let l_254: label = (if v_868 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {4283}let x_285: bitstring = (if v_869 then (l_254,h_252) else caught-fail) in
                                                {4284}let server_hts_21: bitstring = (if v_868 then catch-fail((if v_869 then hmac(@8_tls_h,handshake_secret_21,x_285) else fail-any)) else caught-fail) in
                                                {4285}let v_870: bool = not-caught-fail(server_hts_21) in
                                                {4287}let h_253: bitstring = (if v_870 then zero else caught-fail) in
                                                {4286}let l_255: label = (if v_870 then tls13_key else caught-fail) in
                                                {4288}let x_286: bitstring = (if v_870 then (l_255,h_253) else caught-fail) in
                                                {4289}let client_wkh_21: bitstring = (if v_870 then catch-fail(hmac(@8_tls_h,client_hts_21,x_286)) else caught-fail) in
                                                {4290}let v_871: bool = not-caught-fail(client_wkh_21) in
                                                {4292}let h_254: bitstring = (if v_871 then zero else caught-fail) in
                                                {4291}let l_256: label = (if v_871 then tls13_key else caught-fail) in
                                                {4293}let x_287: bitstring = (if v_871 then (l_256,h_254) else caught-fail) in
                                                {4294}let server_wkh_21: bitstring = (if v_871 then catch-fail(hmac(@8_tls_h,server_hts_21,x_287)) else caught-fail) in
                                                {4295}let v_872: bool = not-caught-fail(server_wkh_21) in
                                                {4297}let h_255: bitstring = (if v_872 then zero else caught-fail) in
                                                {4296}let l_257: label = (if v_872 then tls13_finished else caught-fail) in
                                                {4298}let x_288: bitstring = (if v_872 then (l_257,h_255) else caught-fail) in
                                                {4299}let client_fk_21: bitstring = (if v_872 then catch-fail(hmac(@8_tls_h,client_hts_21,x_288)) else caught-fail) in
                                                {4300}let v_873: bool = not-caught-fail(client_fk_21) in
                                                {4302}let h_256: bitstring = (if v_873 then zero else caught-fail) in
                                                {4301}let l_258: label = (if v_873 then tls13_finished else caught-fail) in
                                                {4303}let x_289: bitstring = (if v_873 then (l_258,h_256) else caught-fail) in
                                                {4304}let server_fk_21: bitstring = (if v_873 then catch-fail(hmac(@8_tls_h,server_hts_21,x_289)) else caught-fail) in
                                                {4305}let v_874: bool = not-caught-fail(server_fk_21) in
                                                {4306}let (master_secret_50: bitstring,chk_28: aead_key,shk_27: aead_key,cfin_28: mac_key,sfin_27: mac_key) = (if v_865 then (if v_866 then (if v_868 then (if v_870 then (if v_871 then (if v_872 then (if v_873 then (if v_874 then (master_secret_49,client_wkh_21,server_wkh_21,client_fk_21,server_fk_21) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {4307}event Client_chk(id_client_4,chk_28);
                                                {4308}event Client_shk(id_client_4,shk_27);
                                                {4309}event Client_cfin(id_client_4,cfin_28);
                                                {4310}event Client_sfin(id_client_4,sfin_27);
                                                {4311}in(io, enc_ee_msg_20: bitstring);
                                                {4312}let ee_msg_25: msg = aead_dec(@8_tls_a,shk_27,0,zero,enc_ee_msg_20) in
                                                {4313}let EE(ech_ee_20: echExt,extra_ee_20: extraExt) = ee_msg_25 in
                                                {4314}let cur_log2_51: bitstring = (cur_log2_50,ee_msg_25) in
                                                {4315}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_20,sr_34,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_107,safe_psk_29,@8_comp_psk,master_secret_50,chk_28,0,shk_27,1,cfin_28,sfin_27,cur_log2_51)))
                                            )
                                            else
                                                {4316}out(io, illegal_parameter)
                                        )
                                        else
                                            {4317}out(io, illegal_parameter)
                                )
                                else
                                    {4318}out(io, unexpected_message)
                            )
                            else
                                {4471}get pre_shared_keys(c_dom'_9: domain,=s_dom_16,=@8_tls_h,id_53: identityPsk,psk_108: preSharedKey,idP_11: idProc,is_safe_43: bool) in
                                {4319}event Selected_one_time_used_psk(id_client_4,psk_108,is_safe_43);
                                {4320}event Selected_psk(c_dom_6,c_dom'_9,idP_11,is_safe_43);
                                {4321}event Selected_psk_no_missmatch(id_client_4,s_dom_16,@8_tls_h,psk_108,id_53);
                                {4322}event Selected_psk_with_ID(c_dom_6,c_dom'_9,id_53,idP_11,is_safe_43);
                                {4323}let v_875: bitstring = (id_53,psk_108,is_safe_43) in
                                {4324}let v_876: bool = success?(1-proj-3-tuple(v_875)) in
                                {4325}let is_safe_44: bool = (if v_876 then 3-proj-3-tuple(v_875) else caught-fail) in
                                {4326}let psk_109: preSharedKey = (if v_876 then 2-proj-3-tuple(v_875) else caught-fail) in
                                {4327}let id_54: identityPsk = (if v_876 then 1-proj-3-tuple(v_875) else caught-fail) in
                                {4331}let k_74: bitstring = (if v_876 then catch-fail(psk2b(psk_109)) else caught-fail) in
                                {4332}let v_877: bool = not-caught-fail(k_74) in
                                {4330}let s_84: bitstring = (if v_876 then zero else caught-fail) in
                                {4333}let early_secret_69: bitstring = (if v_876 then catch-fail((if v_877 then hmac(@8_tls_h,s_84,k_74) else fail-any)) else caught-fail) in
                                {4334}let v_878: bool = not-caught-fail(early_secret_69) in
                                {4336}let m_90: bitstring = (if v_878 then zero else caught-fail) in
                                {4337}let h_257: bitstring = (if v_878 then catch-fail(hash(@8_tls_h,m_90)) else caught-fail) in
                                {4338}let v_879: bool = not-caught-fail(h_257) in
                                {4335}let l_259: label = (if v_878 then tls13_ext_res_binder else caught-fail) in
                                {4339}let x_290: bitstring = (if v_879 then (l_259,h_257) else caught-fail) in
                                {4340}let binder_key_46: bitstring = (if v_878 then catch-fail((if v_879 then hmac(@8_tls_h,early_secret_69,x_290) else fail-any)) else caught-fail) in
                                {4341}let v_880: bool = not-caught-fail(binder_key_46) in
                                {4342}let v_881: bitstring = (if v_876 then catch-fail((if v_878 then (if v_880 then (early_secret_69,binder_key_46) else fail-any) else fail-any)) else caught-fail) in
                                {4343}let v_882: bool = (not-caught-fail(v_881) && success?(1-proj-2-tuple(v_881))) in
                                {4344}let kb_46: mac_key = (if v_882 then 2-proj-2-tuple(v_881) else caught-fail) in
                                {4345}let es_72: bitstring = (if v_882 then 1-proj-2-tuple(v_881) else caught-fail) in
                                {4328}let offer_39: params = (if v_876 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_16),ech_ext_16,extra_49,trunc_client_psk_ext(id_54)) else caught-fail) in
                                {4329}let cur_log'_17: bitstring = (if v_876 then (cur_log3_7,CH(cr_27,offer_39)) else caught-fail) in
                                {4346}let binders_16: bitstring = (if v_882 then catch-fail(hmac(@8_tls_h,kb_46,cur_log'_17)) else caught-fail) in
                                {4347}let v_883: bool = not-caught-fail(binders_16) in
                                {4348}let v_884: bitstring = catch-fail((if v_876 then (if v_882 then (if v_883 then (client_psk_ext(id_54,binders_16),(psk_109,id_54,es_72,is_safe_44)) else fail-any) else fail-any) else fail-any)) in
                                {4349}let v_885: bool = (not-caught-fail(v_884) && success?(1-proj-2-tuple(v_884))) in
                                {4350}let psk_data_28: bitstring = (if v_885 then 2-proj-2-tuple(v_884) else caught-fail) in
                                {4351}let psk_ext_52: preSharedKeyExt = (if v_885 then 1-proj-2-tuple(v_884) else caught-fail) in
                                {4352}let offer_40: params = (if v_885 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_52) else caught-fail) in
                                {4353}let (client_hello'_19: msg,cr'_21: bytes32,kex_data'_16: bitstring,psk_data'_16: bitstring) = (if v_885 then (CH(cr_27,offer_40),cr_27,kex_data_13,psk_data_28) else fail-any) in
                                {4354}event ClientOffersAead(cr'_21,@8_tls_a);
                                {4355}event ClientOffersHash(cr'_21,@8_tls_h);
                                {4356}event ClientOffersGroup(cr'_21,@8_tls_g);
                                {4357}out(io, client_hello'_19);
                                {4359}in(io, server_hello'_16: msg);
                                {4360}let SH(sr'_16: bytes32,mode'_16: params) = server_hello'_16 in
                                (
                                    {4361}if (sr'_16 = B32(HRR24,HRR8)) then
                                        {4362}out(io, unexpected_message)
                                    else
                                        {4363}let (x_291: bitstring,g_22: group) = kex_data'_16 in
                                        {4364}let (psk_offer_21: preSharedKey,id_offer_21: identityPsk,es_offer_21: bitstring,is_safe_offer_21: bool) = psk_data'_16 in
                                        {4365}event Client_PSKOffer(id_client_4,psk_offer_21,id_offer_21,is_safe_offer_21);
                                        {4366}event Client_Rand_client(id_client_4,cr'_21);
                                        {4367}event Client_DH_client(id_client_4,dh_pub(g_22,x_291));
                                        {4368}event Client_server_domain(id_client_4,s_dom_16);
                                        {4369}let SH(sr_35: bytes32,mode_27: params) = server_hello'_16 in
                                        {4370}event Client_Rand_server(id_client_4,sr_35);
                                        {4371}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_22,gy_22: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_53: preSharedKeyExt) = mode_27 in
                                        (
                                            {4373}event Client_DH_server(id_client_4,gy_22);
                                            {4374}let v_886: bool = (psk_ext_53 = empty_psk_ext) in
                                            {4375}let psk_110: preSharedKey = (if v_886 then NoPsk else caught-fail) in
                                            {4377}let k_75: bitstring = (if v_886 then catch-fail(psk2b(psk_110)) else caught-fail) in
                                            {4378}let v_887: bool = not-caught-fail(k_75) in
                                            {4376}let s_85: bitstring = (if v_886 then zero else caught-fail) in
                                            {4379}let early_secret_70: bitstring = (if v_886 then catch-fail((if v_887 then hmac(@8_tls_h,s_85,k_75) else fail-any)) else caught-fail) in
                                            {4380}let v_888: bool = not-caught-fail(early_secret_70) in
                                            {4382}let m_91: bitstring = (if v_888 then zero else caught-fail) in
                                            {4383}let h_258: bitstring = (if v_888 then catch-fail(hash(@8_tls_h,m_91)) else caught-fail) in
                                            {4384}let v_889: bool = not-caught-fail(h_258) in
                                            {4381}let l_260: label = (if v_888 then tls13_ext_res_binder else caught-fail) in
                                            {4385}let x_292: bitstring = (if v_889 then (l_260,h_258) else caught-fail) in
                                            {4386}let binder_key_47: bitstring = (if v_888 then catch-fail((if v_889 then hmac(@8_tls_h,early_secret_70,x_292) else fail-any)) else caught-fail) in
                                            {4387}let v_890: bool = not-caught-fail(binder_key_47) in
                                            {4388}let v_891: bitstring = (if v_886 then catch-fail((if v_888 then (if v_890 then (early_secret_70,binder_key_47) else fail-any) else fail-any)) else caught-fail) in
                                            {4389}let v_892: bool = (not-caught-fail(v_891) && success?(1-proj-2-tuple(v_891))) in
                                            {4390}let kb_47: mac_key = (if v_892 then 2-proj-2-tuple(v_891) else caught-fail) in
                                            {4391}let es_73: bitstring = (if v_892 then 1-proj-2-tuple(v_891) else caught-fail) in
                                            {4392}let v_893: bitstring = (if not(v_886) then catch-fail(psk_data'_16) else caught-fail) in
                                            {4393}let v_894: bool = (not-caught-fail(v_893) && success?(1-proj-4-tuple(v_893))) in
                                            {4394}let is_safe_45: bool = (if v_894 then 4-proj-4-tuple(v_893) else caught-fail) in
                                            {4395}let es_74: bitstring = (if v_894 then 3-proj-4-tuple(v_893) else caught-fail) in
                                            {4396}let id_55: identityPsk = (if v_894 then 2-proj-4-tuple(v_893) else caught-fail) in
                                            {4397}let psk_111: preSharedKey = (if v_894 then 1-proj-4-tuple(v_893) else caught-fail) in
                                            {4398}let (psk_112: preSharedKey,early_secret_71: bitstring,valid_21: bool,safe_psk_30: bool) = (if v_886 then (if v_892 then (NoPsk,es_73,true,false) else fail-any) else (if v_894 then (psk_111,es_74,((psk_111 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_53)),is_safe_45) else fail-any)) in
                                            {4399}event Client_PSKChoosen(id_client_4,psk_112,safe_psk_30);
                                            {4400}if valid_21 then
                                            (
                                                {4403}new s_86[]: seed;
                                                {4401}let gxy_44: element = catch-fail(dh_decap_fun(g_22,gy_22,x_291)) in
                                                {4402}let v_895: bool = not-caught-fail(gxy_44) in
                                                {4404}let gxy_45: element = (if v_895 then gxy_44 else dh_f(s_86)) in
                                                {4405}event Client_DH_gxy(id_client_4,gxy_45);
                                                {4407}let m_92: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4408}let v_896: bool = not-caught-fail(m_92) in
                                                {4409}let h_259: bitstring = (if v_896 then catch-fail(hash(@8_tls_h,m_92)) else caught-fail) in
                                                {4410}let v_897: bool = not-caught-fail(h_259) in
                                                {4406}let l_261: label = tls13_derived in
                                                {4411}let x_293: bitstring = (if v_897 then (l_261,h_259) else caught-fail) in
                                                {4412}let extra_52: bitstring = catch-fail((if v_896 then (if v_897 then hmac(@8_tls_h,early_secret_71,x_293) else fail-any) else fail-any)) in
                                                {4413}let v_898: bool = not-caught-fail(extra_52) in
                                                {4414}let handshake_secret_22: bitstring = (if v_898 then hmac(@8_tls_h,extra_52,gxy_45) else fail-any) in
                                                {4416}let m_93: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4417}let v_899: bool = not-caught-fail(m_93) in
                                                {4418}let h_260: bitstring = (if v_899 then catch-fail(hash(@8_tls_h,m_93)) else caught-fail) in
                                                {4419}let v_900: bool = not-caught-fail(h_260) in
                                                {4415}let l_262: label = tls13_derived in
                                                {4420}let x_294: bitstring = (if v_900 then (l_262,h_260) else caught-fail) in
                                                {4421}let extra_53: bitstring = catch-fail((if v_899 then (if v_900 then hmac(@8_tls_h,handshake_secret_22,x_294) else fail-any) else fail-any)) in
                                                {4422}let v_901: bool = not-caught-fail(extra_53) in
                                                {4423}let k_76: bitstring = (if v_901 then zero else caught-fail) in
                                                {4424}let master_secret_51: bitstring = (if v_901 then catch-fail(hmac(@8_tls_h,handshake_secret_22,k_76)) else caught-fail) in
                                                {4425}let v_902: bool = not-caught-fail(master_secret_51) in
                                                {4358}let cur_log4_16: bitstring = (cur_log3_7,client_hello'_19) in
                                                {4372}let cur_log2_52: bitstring = (cur_log4_16,server_hello'_16) in
                                                {4427}let h_261: bitstring = (if v_902 then catch-fail(hash(@8_tls_h,cur_log2_52)) else caught-fail) in
                                                {4428}let v_903: bool = not-caught-fail(h_261) in
                                                {4426}let l_263: label = (if v_902 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {4429}let x_295: bitstring = (if v_903 then (l_263,h_261) else caught-fail) in
                                                {4430}let client_hts_22: bitstring = (if v_902 then catch-fail((if v_903 then hmac(@8_tls_h,handshake_secret_22,x_295) else fail-any)) else caught-fail) in
                                                {4431}let v_904: bool = not-caught-fail(client_hts_22) in
                                                {4433}let h_262: bitstring = (if v_904 then catch-fail(hash(@8_tls_h,cur_log2_52)) else caught-fail) in
                                                {4434}let v_905: bool = not-caught-fail(h_262) in
                                                {4432}let l_264: label = (if v_904 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {4435}let x_296: bitstring = (if v_905 then (l_264,h_262) else caught-fail) in
                                                {4436}let server_hts_22: bitstring = (if v_904 then catch-fail((if v_905 then hmac(@8_tls_h,handshake_secret_22,x_296) else fail-any)) else caught-fail) in
                                                {4437}let v_906: bool = not-caught-fail(server_hts_22) in
                                                {4439}let h_263: bitstring = (if v_906 then zero else caught-fail) in
                                                {4438}let l_265: label = (if v_906 then tls13_key else caught-fail) in
                                                {4440}let x_297: bitstring = (if v_906 then (l_265,h_263) else caught-fail) in
                                                {4441}let client_wkh_22: bitstring = (if v_906 then catch-fail(hmac(@8_tls_h,client_hts_22,x_297)) else caught-fail) in
                                                {4442}let v_907: bool = not-caught-fail(client_wkh_22) in
                                                {4444}let h_264: bitstring = (if v_907 then zero else caught-fail) in
                                                {4443}let l_266: label = (if v_907 then tls13_key else caught-fail) in
                                                {4445}let x_298: bitstring = (if v_907 then (l_266,h_264) else caught-fail) in
                                                {4446}let server_wkh_22: bitstring = (if v_907 then catch-fail(hmac(@8_tls_h,server_hts_22,x_298)) else caught-fail) in
                                                {4447}let v_908: bool = not-caught-fail(server_wkh_22) in
                                                {4449}let h_265: bitstring = (if v_908 then zero else caught-fail) in
                                                {4448}let l_267: label = (if v_908 then tls13_finished else caught-fail) in
                                                {4450}let x_299: bitstring = (if v_908 then (l_267,h_265) else caught-fail) in
                                                {4451}let client_fk_22: bitstring = (if v_908 then catch-fail(hmac(@8_tls_h,client_hts_22,x_299)) else caught-fail) in
                                                {4452}let v_909: bool = not-caught-fail(client_fk_22) in
                                                {4454}let h_266: bitstring = (if v_909 then zero else caught-fail) in
                                                {4453}let l_268: label = (if v_909 then tls13_finished else caught-fail) in
                                                {4455}let x_300: bitstring = (if v_909 then (l_268,h_266) else caught-fail) in
                                                {4456}let server_fk_22: bitstring = (if v_909 then catch-fail(hmac(@8_tls_h,server_hts_22,x_300)) else caught-fail) in
                                                {4457}let v_910: bool = not-caught-fail(server_fk_22) in
                                                {4458}let (master_secret_52: bitstring,chk_29: aead_key,shk_28: aead_key,cfin_29: mac_key,sfin_28: mac_key) = (if v_901 then (if v_902 then (if v_904 then (if v_906 then (if v_907 then (if v_908 then (if v_909 then (if v_910 then (master_secret_51,client_wkh_22,server_wkh_22,client_fk_22,server_fk_22) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {4459}event Client_chk(id_client_4,chk_29);
                                                {4460}event Client_shk(id_client_4,shk_28);
                                                {4461}event Client_cfin(id_client_4,cfin_29);
                                                {4462}event Client_sfin(id_client_4,sfin_28);
                                                {4463}in(io, enc_ee_msg_21: bitstring);
                                                {4464}let ee_msg_26: msg = aead_dec(@8_tls_a,shk_28,0,zero,enc_ee_msg_21) in
                                                {4465}let EE(ech_ee_21: echExt,extra_ee_21: extraExt) = ee_msg_26 in
                                                {4466}let cur_log2_53: bitstring = (cur_log2_52,ee_msg_26) in
                                                {4467}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_21,sr_35,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_112,safe_psk_30,@8_comp_psk,master_secret_52,chk_29,0,shk_28,1,cfin_29,sfin_28,cur_log2_53)))
                                            )
                                            else
                                                {4468}out(io, illegal_parameter)
                                        )
                                        else
                                            {4469}out(io, illegal_parameter)
                                )
                                else
                                    {4470}out(io, unexpected_message)
                        )
                        else
                            {4472}let psk_113: preSharedKey = NoPsk in
                            {4474}let k_77: bitstring = catch-fail(psk2b(psk_113)) in
                            {4475}let v_911: bool = not-caught-fail(k_77) in
                            {4473}let s_87: bitstring = zero in
                            {4476}let early_secret_72: bitstring = catch-fail((if v_911 then hmac(@8_tls_h,s_87,k_77) else fail-any)) in
                            {4477}let v_912: bool = not-caught-fail(early_secret_72) in
                            {4479}let m_94: bitstring = (if v_912 then zero else caught-fail) in
                            {4480}let h_267: bitstring = (if v_912 then catch-fail(hash(@8_tls_h,m_94)) else caught-fail) in
                            {4481}let v_913: bool = not-caught-fail(h_267) in
                            {4478}let l_269: label = (if v_912 then tls13_ext_res_binder else caught-fail) in
                            {4482}let x_301: bitstring = (if v_913 then (l_269,h_267) else caught-fail) in
                            {4483}let binder_key_48: bitstring = (if v_912 then catch-fail((if v_913 then hmac(@8_tls_h,early_secret_72,x_301) else fail-any)) else caught-fail) in
                            {4484}let v_914: bool = not-caught-fail(binder_key_48) in
                            {4485}let v_915: bitstring = catch-fail((if v_912 then (if v_914 then (early_secret_72,binder_key_48) else fail-any) else fail-any)) in
                            {4486}let v_916: bool = (not-caught-fail(v_915) && success?(1-proj-2-tuple(v_915))) in
                            {4487}let kb_48: mac_key = (if v_916 then 2-proj-2-tuple(v_915) else caught-fail) in
                            {4488}let es_75: bitstring = (if v_916 then 1-proj-2-tuple(v_915) else caught-fail) in
                            {4489}let v_917: bitstring = catch-fail((if v_916 then (empty_psk_ext,(NoPsk,zero,es_75,false)) else fail-any)) in
                            {4490}let v_918: bool = (not-caught-fail(v_917) && success?(1-proj-2-tuple(v_917))) in
                            {4491}let psk_data_29: bitstring = (if v_918 then 2-proj-2-tuple(v_917) else caught-fail) in
                            {4492}let psk_ext_54: preSharedKeyExt = (if v_918 then 1-proj-2-tuple(v_917) else caught-fail) in
                            {4493}let offer_41: params = (if v_918 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_16),empty_ech_ext,empty_extra_ext,psk_ext_54) else caught-fail) in
                            {4494}let (client_hello'_20: msg,cr'_22: bytes32,kex_data'_17: bitstring,psk_data'_17: bitstring) = (if v_918 then (CH(cr_27,offer_41),cr_27,kex_data_13,psk_data_29) else fail-any) in
                            {4495}event ClientOffersAead(cr'_22,@8_tls_a);
                            {4496}event ClientOffersHash(cr'_22,@8_tls_h);
                            {4497}event ClientOffersGroup(cr'_22,@8_tls_g);
                            {4498}out(io, client_hello'_20);
                            {4500}in(io, server_hello'_17: msg);
                            {4501}let SH(sr'_17: bytes32,mode'_17: params) = server_hello'_17 in
                            (
                                {4502}if (sr'_17 = B32(HRR24,HRR8)) then
                                    {4503}out(io, unexpected_message)
                                else
                                    {4504}let (x_302: bitstring,g_23: group) = kex_data'_17 in
                                    {4505}let (psk_offer_22: preSharedKey,id_offer_22: identityPsk,es_offer_22: bitstring,is_safe_offer_22: bool) = psk_data'_17 in
                                    {4506}event Client_PSKOffer(id_client_4,psk_offer_22,id_offer_22,is_safe_offer_22);
                                    {4507}event Client_Rand_client(id_client_4,cr'_22);
                                    {4508}event Client_DH_client(id_client_4,dh_pub(g_23,x_302));
                                    {4509}event Client_server_domain(id_client_4,s_dom_16);
                                    {4510}let SH(sr_36: bytes32,mode_28: params) = server_hello'_17 in
                                    {4511}event Client_Rand_server(id_client_4,sr_36);
                                    {4512}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_23,gy_23: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_55: preSharedKeyExt) = mode_28 in
                                    (
                                        {4514}event Client_DH_server(id_client_4,gy_23);
                                        {4515}let v_919: bool = (psk_ext_55 = empty_psk_ext) in
                                        {4516}let psk_114: preSharedKey = (if v_919 then NoPsk else caught-fail) in
                                        {4518}let k_78: bitstring = (if v_919 then catch-fail(psk2b(psk_114)) else caught-fail) in
                                        {4519}let v_920: bool = not-caught-fail(k_78) in
                                        {4517}let s_88: bitstring = (if v_919 then zero else caught-fail) in
                                        {4520}let early_secret_73: bitstring = (if v_919 then catch-fail((if v_920 then hmac(@8_tls_h,s_88,k_78) else fail-any)) else caught-fail) in
                                        {4521}let v_921: bool = not-caught-fail(early_secret_73) in
                                        {4523}let m_95: bitstring = (if v_921 then zero else caught-fail) in
                                        {4524}let h_268: bitstring = (if v_921 then catch-fail(hash(@8_tls_h,m_95)) else caught-fail) in
                                        {4525}let v_922: bool = not-caught-fail(h_268) in
                                        {4522}let l_270: label = (if v_921 then tls13_ext_res_binder else caught-fail) in
                                        {4526}let x_303: bitstring = (if v_922 then (l_270,h_268) else caught-fail) in
                                        {4527}let binder_key_49: bitstring = (if v_921 then catch-fail((if v_922 then hmac(@8_tls_h,early_secret_73,x_303) else fail-any)) else caught-fail) in
                                        {4528}let v_923: bool = not-caught-fail(binder_key_49) in
                                        {4529}let v_924: bitstring = (if v_919 then catch-fail((if v_921 then (if v_923 then (early_secret_73,binder_key_49) else fail-any) else fail-any)) else caught-fail) in
                                        {4530}let v_925: bool = (not-caught-fail(v_924) && success?(1-proj-2-tuple(v_924))) in
                                        {4531}let kb_49: mac_key = (if v_925 then 2-proj-2-tuple(v_924) else caught-fail) in
                                        {4532}let es_76: bitstring = (if v_925 then 1-proj-2-tuple(v_924) else caught-fail) in
                                        {4533}let v_926: bitstring = (if not(v_919) then catch-fail(psk_data'_17) else caught-fail) in
                                        {4534}let v_927: bool = (not-caught-fail(v_926) && success?(1-proj-4-tuple(v_926))) in
                                        {4535}let is_safe_46: bool = (if v_927 then 4-proj-4-tuple(v_926) else caught-fail) in
                                        {4536}let es_77: bitstring = (if v_927 then 3-proj-4-tuple(v_926) else caught-fail) in
                                        {4537}let id_56: identityPsk = (if v_927 then 2-proj-4-tuple(v_926) else caught-fail) in
                                        {4538}let psk_115: preSharedKey = (if v_927 then 1-proj-4-tuple(v_926) else caught-fail) in
                                        {4539}let (psk_116: preSharedKey,early_secret_74: bitstring,valid_22: bool,safe_psk_31: bool) = (if v_919 then (if v_925 then (NoPsk,es_76,true,false) else fail-any) else (if v_927 then (psk_115,es_77,((psk_115 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_55)),is_safe_46) else fail-any)) in
                                        {4540}event Client_PSKChoosen(id_client_4,psk_116,safe_psk_31);
                                        {4541}if valid_22 then
                                        (
                                            {4544}new s_89[]: seed;
                                            {4542}let gxy_46: element = catch-fail(dh_decap_fun(g_23,gy_23,x_302)) in
                                            {4543}let v_928: bool = not-caught-fail(gxy_46) in
                                            {4545}let gxy_47: element = (if v_928 then gxy_46 else dh_f(s_89)) in
                                            {4546}event Client_DH_gxy(id_client_4,gxy_47);
                                            {4548}let m_96: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                            {4549}let v_929: bool = not-caught-fail(m_96) in
                                            {4550}let h_269: bitstring = (if v_929 then catch-fail(hash(@8_tls_h,m_96)) else caught-fail) in
                                            {4551}let v_930: bool = not-caught-fail(h_269) in
                                            {4547}let l_271: label = tls13_derived in
                                            {4552}let x_304: bitstring = (if v_930 then (l_271,h_269) else caught-fail) in
                                            {4553}let extra_54: bitstring = catch-fail((if v_929 then (if v_930 then hmac(@8_tls_h,early_secret_74,x_304) else fail-any) else fail-any)) in
                                            {4554}let v_931: bool = not-caught-fail(extra_54) in
                                            {4555}let handshake_secret_23: bitstring = (if v_931 then hmac(@8_tls_h,extra_54,gxy_47) else fail-any) in
                                            {4557}let m_97: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                            {4558}let v_932: bool = not-caught-fail(m_97) in
                                            {4559}let h_270: bitstring = (if v_932 then catch-fail(hash(@8_tls_h,m_97)) else caught-fail) in
                                            {4560}let v_933: bool = not-caught-fail(h_270) in
                                            {4556}let l_272: label = tls13_derived in
                                            {4561}let x_305: bitstring = (if v_933 then (l_272,h_270) else caught-fail) in
                                            {4562}let extra_55: bitstring = catch-fail((if v_932 then (if v_933 then hmac(@8_tls_h,handshake_secret_23,x_305) else fail-any) else fail-any)) in
                                            {4563}let v_934: bool = not-caught-fail(extra_55) in
                                            {4564}let k_79: bitstring = (if v_934 then zero else caught-fail) in
                                            {4565}let master_secret_53: bitstring = (if v_934 then catch-fail(hmac(@8_tls_h,handshake_secret_23,k_79)) else caught-fail) in
                                            {4566}let v_935: bool = not-caught-fail(master_secret_53) in
                                            {4499}let cur_log4_17: bitstring = (cur_log3_7,client_hello'_20) in
                                            {4513}let cur_log2_54: bitstring = (cur_log4_17,server_hello'_17) in
                                            {4568}let h_271: bitstring = (if v_935 then catch-fail(hash(@8_tls_h,cur_log2_54)) else caught-fail) in
                                            {4569}let v_936: bool = not-caught-fail(h_271) in
                                            {4567}let l_273: label = (if v_935 then tls13_client_handshake_traffic_secret else caught-fail) in
                                            {4570}let x_306: bitstring = (if v_936 then (l_273,h_271) else caught-fail) in
                                            {4571}let client_hts_23: bitstring = (if v_935 then catch-fail((if v_936 then hmac(@8_tls_h,handshake_secret_23,x_306) else fail-any)) else caught-fail) in
                                            {4572}let v_937: bool = not-caught-fail(client_hts_23) in
                                            {4574}let h_272: bitstring = (if v_937 then catch-fail(hash(@8_tls_h,cur_log2_54)) else caught-fail) in
                                            {4575}let v_938: bool = not-caught-fail(h_272) in
                                            {4573}let l_274: label = (if v_937 then tls13_server_handshake_traffic_secret else caught-fail) in
                                            {4576}let x_307: bitstring = (if v_938 then (l_274,h_272) else caught-fail) in
                                            {4577}let server_hts_23: bitstring = (if v_937 then catch-fail((if v_938 then hmac(@8_tls_h,handshake_secret_23,x_307) else fail-any)) else caught-fail) in
                                            {4578}let v_939: bool = not-caught-fail(server_hts_23) in
                                            {4580}let h_273: bitstring = (if v_939 then zero else caught-fail) in
                                            {4579}let l_275: label = (if v_939 then tls13_key else caught-fail) in
                                            {4581}let x_308: bitstring = (if v_939 then (l_275,h_273) else caught-fail) in
                                            {4582}let client_wkh_23: bitstring = (if v_939 then catch-fail(hmac(@8_tls_h,client_hts_23,x_308)) else caught-fail) in
                                            {4583}let v_940: bool = not-caught-fail(client_wkh_23) in
                                            {4585}let h_274: bitstring = (if v_940 then zero else caught-fail) in
                                            {4584}let l_276: label = (if v_940 then tls13_key else caught-fail) in
                                            {4586}let x_309: bitstring = (if v_940 then (l_276,h_274) else caught-fail) in
                                            {4587}let server_wkh_23: bitstring = (if v_940 then catch-fail(hmac(@8_tls_h,server_hts_23,x_309)) else caught-fail) in
                                            {4588}let v_941: bool = not-caught-fail(server_wkh_23) in
                                            {4590}let h_275: bitstring = (if v_941 then zero else caught-fail) in
                                            {4589}let l_277: label = (if v_941 then tls13_finished else caught-fail) in
                                            {4591}let x_310: bitstring = (if v_941 then (l_277,h_275) else caught-fail) in
                                            {4592}let client_fk_23: bitstring = (if v_941 then catch-fail(hmac(@8_tls_h,client_hts_23,x_310)) else caught-fail) in
                                            {4593}let v_942: bool = not-caught-fail(client_fk_23) in
                                            {4595}let h_276: bitstring = (if v_942 then zero else caught-fail) in
                                            {4594}let l_278: label = (if v_942 then tls13_finished else caught-fail) in
                                            {4596}let x_311: bitstring = (if v_942 then (l_278,h_276) else caught-fail) in
                                            {4597}let server_fk_23: bitstring = (if v_942 then catch-fail(hmac(@8_tls_h,server_hts_23,x_311)) else caught-fail) in
                                            {4598}let v_943: bool = not-caught-fail(server_fk_23) in
                                            {4599}let (master_secret_54: bitstring,chk_30: aead_key,shk_29: aead_key,cfin_30: mac_key,sfin_29: mac_key) = (if v_934 then (if v_935 then (if v_937 then (if v_939 then (if v_940 then (if v_941 then (if v_942 then (if v_943 then (master_secret_53,client_wkh_23,server_wkh_23,client_fk_23,server_fk_23) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                            {4600}event Client_chk(id_client_4,chk_30);
                                            {4601}event Client_shk(id_client_4,shk_29);
                                            {4602}event Client_cfin(id_client_4,cfin_30);
                                            {4603}event Client_sfin(id_client_4,sfin_29);
                                            {4604}in(io, enc_ee_msg_22: bitstring);
                                            {4605}let ee_msg_27: msg = aead_dec(@8_tls_a,shk_29,0,zero,enc_ee_msg_22) in
                                            {4606}let EE(ech_ee_22: echExt,extra_ee_22: extraExt) = ee_msg_27 in
                                            {4607}let cur_log2_55: bitstring = (cur_log2_54,ee_msg_27) in
                                            {4608}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_22,sr_36,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_116,safe_psk_31,@8_comp_psk,master_secret_54,chk_30,0,shk_29,1,cfin_30,sfin_29,cur_log2_55)))
                                        )
                                        else
                                            {4609}out(io, illegal_parameter)
                                    )
                                    else
                                        {4610}out(io, illegal_parameter)
                            )
                            else
                                {4611}out(io, unexpected_message)
                    )
                    else
                        {4612}out(io, illegal_parameter)
                )
                else
                    {4613}if send_kex_4 then
                    (
                        {4614}let (x_312: bitstring,g_24: group) = kex_data_12 in
                        {4615}let (psk_offer_23: preSharedKey,id_offer_23: identityPsk,es_offer_23: bitstring,is_safe_offer_23: bool) = psk_data_26 in
                        {4616}event Client_PSKOffer(id_client_4,psk_offer_23,id_offer_23,is_safe_offer_23);
                        {4617}event Client_Rand_client(id_client_4,cr_26);
                        {4618}event Client_DH_client(id_client_4,dh_pub(g_24,x_312));
                        {4619}event Client_server_domain(id_client_4,s_dom_16);
                        {4620}let SH(sr_37: bytes32,mode_29: params) = server_hello_6 in
                        {4621}event Client_Rand_server(id_client_4,sr_37);
                        {4622}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_24,gy_24: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_56: preSharedKeyExt) = mode_29 in
                        (
                            {4624}event Client_DH_server(id_client_4,gy_24);
                            {4625}let v_944: bool = (psk_ext_56 = empty_psk_ext) in
                            {4626}let psk_117: preSharedKey = (if v_944 then NoPsk else caught-fail) in
                            {4628}let k_80: bitstring = (if v_944 then catch-fail(psk2b(psk_117)) else caught-fail) in
                            {4629}let v_945: bool = not-caught-fail(k_80) in
                            {4627}let s_90: bitstring = (if v_944 then zero else caught-fail) in
                            {4630}let early_secret_75: bitstring = (if v_944 then catch-fail((if v_945 then hmac(@8_tls_h,s_90,k_80) else fail-any)) else caught-fail) in
                            {4631}let v_946: bool = not-caught-fail(early_secret_75) in
                            {4633}let m_98: bitstring = (if v_946 then zero else caught-fail) in
                            {4634}let h_277: bitstring = (if v_946 then catch-fail(hash(@8_tls_h,m_98)) else caught-fail) in
                            {4635}let v_947: bool = not-caught-fail(h_277) in
                            {4632}let l_279: label = (if v_946 then tls13_ext_res_binder else caught-fail) in
                            {4636}let x_313: bitstring = (if v_947 then (l_279,h_277) else caught-fail) in
                            {4637}let binder_key_50: bitstring = (if v_946 then catch-fail((if v_947 then hmac(@8_tls_h,early_secret_75,x_313) else fail-any)) else caught-fail) in
                            {4638}let v_948: bool = not-caught-fail(binder_key_50) in
                            {4639}let v_949: bitstring = (if v_944 then catch-fail((if v_946 then (if v_948 then (early_secret_75,binder_key_50) else fail-any) else fail-any)) else caught-fail) in
                            {4640}let v_950: bool = (not-caught-fail(v_949) && success?(1-proj-2-tuple(v_949))) in
                            {4641}let kb_50: mac_key = (if v_950 then 2-proj-2-tuple(v_949) else caught-fail) in
                            {4642}let es_78: bitstring = (if v_950 then 1-proj-2-tuple(v_949) else caught-fail) in
                            {4643}let v_951: bitstring = (if not(v_944) then catch-fail(psk_data_26) else caught-fail) in
                            {4644}let v_952: bool = (not-caught-fail(v_951) && success?(1-proj-4-tuple(v_951))) in
                            {4645}let is_safe_47: bool = (if v_952 then 4-proj-4-tuple(v_951) else caught-fail) in
                            {4646}let es_79: bitstring = (if v_952 then 3-proj-4-tuple(v_951) else caught-fail) in
                            {4647}let id_57: identityPsk = (if v_952 then 2-proj-4-tuple(v_951) else caught-fail) in
                            {4648}let psk_118: preSharedKey = (if v_952 then 1-proj-4-tuple(v_951) else caught-fail) in
                            {4649}let (psk_119: preSharedKey,early_secret_76: bitstring,valid_23: bool,safe_psk_32: bool) = (if v_944 then (if v_950 then (NoPsk,es_78,true,false) else fail-any) else (if v_952 then (psk_118,es_79,((psk_118 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_56)),is_safe_47) else fail-any)) in
                            {4650}event Client_PSKChoosen(id_client_4,psk_119,safe_psk_32);
                            {4651}if valid_23 then
                            (
                                {4654}new s_91[]: seed;
                                {4652}let gxy_48: element = catch-fail(dh_decap_fun(g_24,gy_24,x_312)) in
                                {4653}let v_953: bool = not-caught-fail(gxy_48) in
                                {4655}let gxy_49: element = (if v_953 then gxy_48 else dh_f(s_91)) in
                                {4656}event Client_DH_gxy(id_client_4,gxy_49);
                                {4658}let m_99: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                {4659}let v_954: bool = not-caught-fail(m_99) in
                                {4660}let h_278: bitstring = (if v_954 then catch-fail(hash(@8_tls_h,m_99)) else caught-fail) in
                                {4661}let v_955: bool = not-caught-fail(h_278) in
                                {4657}let l_280: label = tls13_derived in
                                {4662}let x_314: bitstring = (if v_955 then (l_280,h_278) else caught-fail) in
                                {4663}let extra_56: bitstring = catch-fail((if v_954 then (if v_955 then hmac(@8_tls_h,early_secret_76,x_314) else fail-any) else fail-any)) in
                                {4664}let v_956: bool = not-caught-fail(extra_56) in
                                {4665}let handshake_secret_24: bitstring = (if v_956 then hmac(@8_tls_h,extra_56,gxy_49) else fail-any) in
                                {4667}let m_100: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                {4668}let v_957: bool = not-caught-fail(m_100) in
                                {4669}let h_279: bitstring = (if v_957 then catch-fail(hash(@8_tls_h,m_100)) else caught-fail) in
                                {4670}let v_958: bool = not-caught-fail(h_279) in
                                {4666}let l_281: label = tls13_derived in
                                {4671}let x_315: bitstring = (if v_958 then (l_281,h_279) else caught-fail) in
                                {4672}let extra_57: bitstring = catch-fail((if v_957 then (if v_958 then hmac(@8_tls_h,handshake_secret_24,x_315) else fail-any) else fail-any)) in
                                {4673}let v_959: bool = not-caught-fail(extra_57) in
                                {4674}let k_81: bitstring = (if v_959 then zero else caught-fail) in
                                {4675}let master_secret_55: bitstring = (if v_959 then catch-fail(hmac(@8_tls_h,handshake_secret_24,k_81)) else caught-fail) in
                                {4676}let v_960: bool = not-caught-fail(master_secret_55) in
                                {4623}let cur_log2_56: bitstring = (cur_log2_49,server_hello_6) in
                                {4678}let h_280: bitstring = (if v_960 then catch-fail(hash(@8_tls_h,cur_log2_56)) else caught-fail) in
                                {4679}let v_961: bool = not-caught-fail(h_280) in
                                {4677}let l_282: label = (if v_960 then tls13_client_handshake_traffic_secret else caught-fail) in
                                {4680}let x_316: bitstring = (if v_961 then (l_282,h_280) else caught-fail) in
                                {4681}let client_hts_24: bitstring = (if v_960 then catch-fail((if v_961 then hmac(@8_tls_h,handshake_secret_24,x_316) else fail-any)) else caught-fail) in
                                {4682}let v_962: bool = not-caught-fail(client_hts_24) in
                                {4684}let h_281: bitstring = (if v_962 then catch-fail(hash(@8_tls_h,cur_log2_56)) else caught-fail) in
                                {4685}let v_963: bool = not-caught-fail(h_281) in
                                {4683}let l_283: label = (if v_962 then tls13_server_handshake_traffic_secret else caught-fail) in
                                {4686}let x_317: bitstring = (if v_963 then (l_283,h_281) else caught-fail) in
                                {4687}let server_hts_24: bitstring = (if v_962 then catch-fail((if v_963 then hmac(@8_tls_h,handshake_secret_24,x_317) else fail-any)) else caught-fail) in
                                {4688}let v_964: bool = not-caught-fail(server_hts_24) in
                                {4690}let h_282: bitstring = (if v_964 then zero else caught-fail) in
                                {4689}let l_284: label = (if v_964 then tls13_key else caught-fail) in
                                {4691}let x_318: bitstring = (if v_964 then (l_284,h_282) else caught-fail) in
                                {4692}let client_wkh_24: bitstring = (if v_964 then catch-fail(hmac(@8_tls_h,client_hts_24,x_318)) else caught-fail) in
                                {4693}let v_965: bool = not-caught-fail(client_wkh_24) in
                                {4695}let h_283: bitstring = (if v_965 then zero else caught-fail) in
                                {4694}let l_285: label = (if v_965 then tls13_key else caught-fail) in
                                {4696}let x_319: bitstring = (if v_965 then (l_285,h_283) else caught-fail) in
                                {4697}let server_wkh_24: bitstring = (if v_965 then catch-fail(hmac(@8_tls_h,server_hts_24,x_319)) else caught-fail) in
                                {4698}let v_966: bool = not-caught-fail(server_wkh_24) in
                                {4700}let h_284: bitstring = (if v_966 then zero else caught-fail) in
                                {4699}let l_286: label = (if v_966 then tls13_finished else caught-fail) in
                                {4701}let x_320: bitstring = (if v_966 then (l_286,h_284) else caught-fail) in
                                {4702}let client_fk_24: bitstring = (if v_966 then catch-fail(hmac(@8_tls_h,client_hts_24,x_320)) else caught-fail) in
                                {4703}let v_967: bool = not-caught-fail(client_fk_24) in
                                {4705}let h_285: bitstring = (if v_967 then zero else caught-fail) in
                                {4704}let l_287: label = (if v_967 then tls13_finished else caught-fail) in
                                {4706}let x_321: bitstring = (if v_967 then (l_287,h_285) else caught-fail) in
                                {4707}let server_fk_24: bitstring = (if v_967 then catch-fail(hmac(@8_tls_h,server_hts_24,x_321)) else caught-fail) in
                                {4708}let v_968: bool = not-caught-fail(server_fk_24) in
                                {4709}let (master_secret_56: bitstring,chk_31: aead_key,shk_30: aead_key,cfin_31: mac_key,sfin_30: mac_key) = (if v_959 then (if v_960 then (if v_962 then (if v_964 then (if v_965 then (if v_966 then (if v_967 then (if v_968 then (master_secret_55,client_wkh_24,server_wkh_24,client_fk_24,server_fk_24) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                {4710}event Client_chk(id_client_4,chk_31);
                                {4711}event Client_shk(id_client_4,shk_30);
                                {4712}event Client_cfin(id_client_4,cfin_31);
                                {4713}event Client_sfin(id_client_4,sfin_30);
                                {4714}in(io, enc_ee_msg_23: bitstring);
                                {4715}let ee_msg_28: msg = aead_dec(@8_tls_a,shk_30,0,zero,enc_ee_msg_23) in
                                {4716}let EE(ech_ee_23: echExt,extra_ee_23: extraExt) = ee_msg_28 in
                                {4717}let cur_log2_57: bitstring = (cur_log2_56,ee_msg_28) in
                                {4718}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr_26,sr_37,@8_tls_h,@8_tls_a,c_dom_6,s_dom_16,psk_119,safe_psk_32,@8_comp_psk,master_secret_56,chk_31,0,shk_30,1,cfin_31,sfin_30,cur_log2_57)))
                            )
                            else
                                {4719}out(io, illegal_parameter)
                        )
                        else
                            {4720}out(io, illegal_parameter)
                    )
                    else
                        {4721}out(io, illegal_parameter)
            )
            else
                {4722}out(io, unexpected_message)
        )
)

Declared: select table2(pre_shared_keys(*c_dom_7,*s_dom_17,*h_286,*id_58,*x_322,*idP_12,*safe),pre_shared_keys(*c_dom'_10,*s_dom'_1,*h',*id',*x',*idP',*safe'))/400000
Declared: select table2(ech_configurations(*config_2,*skR_2),ech_configurations(*config',*skR'_1))/400000
Declared: select table2(long_term_keys(*c_dom_7,*sk_d_1,*pkr,*crt_12,*idP_12),long_term_keys(*c_dom'_10,*sk_d',*pkr',*crt',*idP'))/400000
Declared: select mess2(ch_server_SH[],*x_322,ch_server_SH[],*x')/300000
Declared: select mess2(ch_server_CRT[],*x_322,ch_server_CRT[],*x')/300000
Declared: select mess2(ch_server_FIN[],*x_322,ch_server_FIN[],*x')/300000
Declared: select mess2(ch_server_CFIN[],*x_322,ch_server_CFIN[],*x')/300000
Declared: select mess2(ch_client_after_EE[],*x_322,ch_client_after_EE[],*x')/300000
Declared: select mess2(ch_client_CRT[],*x_322,ch_client_CRT[],*x')/300000
Declared: select mess2(ch_client_FIN[],*x_322,ch_client_FIN[],*x')/300000
Declared: select mess2(ch_client_CFIN[],*x_322,ch_client_CFIN[],*x')/300000
-- Axiom event(PreciseMess(ch,choice[id_58,id2_1],choice[st1_9,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id_58,id2'],choice[st1',st2'],choice[x1',x2'])) ==> st1_9 = st1' && x1 = x1'; event(PreciseMess(ch,choice[id1_1,id_58],choice[st1_9,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id_58],choice[st1',st2'],choice[x1',x2'])) ==> st2_2 = st2' && x2 = x2'; event(PreciseMess(ch,choice[id1_1,id2_1],choice[st_16,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st_16,st2'],choice[x1',x2'])) ==> id1_1 = id1' && x1 = x1'; event(PreciseMess(ch,choice[id1_1,id2_1],choice[st1_9,st_16],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st1',st_16],choice[x1',x2'])) ==> id2_1 = id2' && x2 = x2'
Encoding: 
axiom event(PreciseMess(ch,choice[id_58,id2_1],choice[st1_9,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id_58,id2'],choice[st1',st2'],choice[x1',x2'])) ==> st1_9 = st1' && x1 = x1' encoded as event2(PreciseMess(ch,id_58,st1_9,x1),PreciseMess(ch,id2_1,st2_2,x2)) && event2(PreciseMess(ch,id_58,st1',x1'),PreciseMess(ch,id2',st2',x2')) ==> st1_9 = st1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id_58],choice[st1_9,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id_58],choice[st1',st2'],choice[x1',x2'])) ==> st2_2 = st2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1_9,x1),PreciseMess(ch,id_58,st2_2,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id_58,st2',x2')) ==> st2_2 = st2' && x2 = x2'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st_16,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st_16,st2'],choice[x1',x2'])) ==> id1_1 = id1' && x1 = x1' encoded as event2(PreciseMess(ch,id1_1,st_16,x1),PreciseMess(ch,id2_1,st2_2,x2)) && event2(PreciseMess(ch,id1',st_16,x1'),PreciseMess(ch,id2',st2',x2')) ==> id1_1 = id1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st1_9,st_16],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st1',st_16],choice[x1',x2'])) ==> id2_1 = id2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1_9,x1),PreciseMess(ch,id2_1,st_16,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id2',st_16,x2')) ==> id2_1 = id2' && x2 = x2'
in biprocess 1.
-- Axiom event(PreciseInput(st_16,choice[x_322,x1])) && event(PreciseInput(st_16,choice[x',x2])) ==> x_322 = x' && x1 = x2 encoded as event2(PreciseInput(st_16,x_322),PreciseInput(st_16,x1)) && event2(PreciseInput(st_16,x'),PreciseInput(st_16,x2)) ==> x_322 = x' && x1 = x2 in biprocess 1.
-- Axiom event(Server_DH_client(choice[id_58,id1_1],choice[e,e1])) && event(Server_DH_client(choice[id_58,id2_1],choice[e',e2])) ==> e = e'; event(Server_DH_client(choice[id1_1,id_58],choice[e1,e])) && event(Server_DH_client(choice[id2_1,id_58],choice[e2,e'])) ==> e = e'
Encoding: 
axiom event(Server_DH_client(choice[id_58,id1_1],choice[e,e1])) && event(Server_DH_client(choice[id_58,id2_1],choice[e',e2])) ==> e = e' encoded as event2(Server_DH_client(id_58,e),Server_DH_client(id1_1,e1)) && event2(Server_DH_client(id_58,e'),Server_DH_client(id2_1,e2)) ==> e = e'
axiom event(Server_DH_client(choice[id1_1,id_58],choice[e1,e])) && event(Server_DH_client(choice[id2_1,id_58],choice[e2,e'])) ==> e = e' encoded as event2(Server_DH_client(id1_1,e1),Server_DH_client(id_58,e)) && event2(Server_DH_client(id2_1,e2),Server_DH_client(id_58,e')) ==> e = e'
in biprocess 1.
-- Axiom event(Server_new_PSK(choice[id_58,id1_1],choice[k_82,k1])) && event(Server_new_PSK(choice[id_58,id2_1],choice[k',k2])) ==> k_82 = k'; event(Server_new_PSK(choice[id1_1,id_58],choice[k1,k_82])) && event(Server_new_PSK(choice[id2_1,id_58],choice[k2,k'])) ==> k_82 = k'
Encoding: 
axiom event(Server_new_PSK(choice[id_58,id1_1],choice[k_82,k1])) && event(Server_new_PSK(choice[id_58,id2_1],choice[k',k2])) ==> k_82 = k' encoded as event2(Server_new_PSK(id_58,k_82),Server_new_PSK(id1_1,k1)) && event2(Server_new_PSK(id_58,k'),Server_new_PSK(id2_1,k2)) ==> k_82 = k'
axiom event(Server_new_PSK(choice[id1_1,id_58],choice[k1,k_82])) && event(Server_new_PSK(choice[id2_1,id_58],choice[k2,k'])) ==> k_82 = k' encoded as event2(Server_new_PSK(id1_1,k1),Server_new_PSK(id_58,k_82)) && event2(Server_new_PSK(id2_1,k2),Server_new_PSK(id_58,k')) ==> k_82 = k'
in biprocess 1.
-- Axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[psk_120,psk''])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[psk'',psk_120])); table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[is_safe_48,is_safe'])) && attacker(choice[psk_120,psk'']) ==> is_safe_48 ≠ true; table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',is_safe_48])) && attacker(choice[psk'',psk_120]) ==> is_safe_48 ≠ true; table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[is_safe_48,is_safe'])) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero; table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',is_safe_48])) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero; attacker(choice[mk_idpsk(s_dom_17,h_286,psk_120),idpsk]) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero; attacker(choice[idpsk,mk_idpsk(s_dom_17,h_286,psk_120)]) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero; not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,zero,psk_120),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,zero,psk_120)])); not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero))),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero)))])); not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e)])); not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))])); not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))])); not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))])); not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))]))
Encoding: 
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[psk_120,psk''])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(psk_120,psk''))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[psk'',psk_120])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(psk'',psk_120))
axiom table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[is_safe_48,is_safe'])) && attacker(choice[psk_120,psk'']) ==> is_safe_48 ≠ true encoded as table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,is_safe_48),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(psk_120,psk'') ==> is_safe_48 ≠ true
axiom table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',is_safe_48])) && attacker(choice[psk'',psk_120]) ==> is_safe_48 ≠ true encoded as table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,is_safe_48)) && attacker2(psk'',psk_120) ==> is_safe_48 ≠ true
axiom table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[is_safe_48,is_safe'])) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,is_safe_48),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',is_safe_48])) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,is_safe_48)) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom attacker(choice[mk_idpsk(s_dom_17,h_286,psk_120),idpsk]) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as attacker2(mk_idpsk(s_dom_17,h_286,psk_120),idpsk) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom attacker(choice[idpsk,mk_idpsk(s_dom_17,h_286,psk_120)]) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as attacker2(idpsk,mk_idpsk(s_dom_17,h_286,psk_120)) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,zero,psk_120),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,zero,psk_120),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,zero,psk_120)])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,zero,psk_120)))
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero))),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero))),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero)))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero)))))
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e)])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e)))
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))))
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))))
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))))
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))))
in biprocess 1.
-- Axiom not (event(Server_new_PSK(choice[id_s,id_s_1],choice[new_psk,new_psk'])) && table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[new_psk,new_psk''],choice[id_c,id_c'],choice[is_safe_48,is_safe'])) && event(Server_DH_client(choice[id_s,id_s_2],choice[dh_pub(g_25,x_322),e])) && attacker(choice[x_322,x'])); not (event(Server_new_PSK(choice[id_s_1,id_s],choice[new_psk',new_psk])) && table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[new_psk'',new_psk],choice[id_c',id_c],choice[is_safe',is_safe_48])) && event(Server_DH_client(choice[id_s_2,id_s],choice[e,dh_pub(g_25,x_322)])) && attacker(choice[x',x_322]))
Encoding: 
axiom not (event(Server_new_PSK(choice[id_s,id_s_1],choice[new_psk,new_psk'])) && table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[new_psk,new_psk''],choice[id_c,id_c'],choice[is_safe_48,is_safe'])) && event(Server_DH_client(choice[id_s,id_s_2],choice[dh_pub(g_25,x_322),e])) && attacker(choice[x_322,x'])) encoded as not (event2(Server_new_PSK(id_s,new_psk),Server_new_PSK(id_s_1,new_psk')) && table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,new_psk,id_c,is_safe_48),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',new_psk'',id_c',is_safe')) && event2(Server_DH_client(id_s,dh_pub(g_25,x_322)),Server_DH_client(id_s_2,e)) && attacker2(x_322,x'))
axiom not (event(Server_new_PSK(choice[id_s_1,id_s],choice[new_psk',new_psk])) && table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[new_psk'',new_psk],choice[id_c',id_c],choice[is_safe',is_safe_48])) && event(Server_DH_client(choice[id_s_2,id_s],choice[e,dh_pub(g_25,x_322)])) && attacker(choice[x',x_322])) encoded as not (event2(Server_new_PSK(id_s_1,new_psk'),Server_new_PSK(id_s,new_psk)) && table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',new_psk'',id_c',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,new_psk,id_c,is_safe_48)) && event2(Server_DH_client(id_s_2,e),Server_DH_client(id_s,dh_pub(g_25,x_322))) && attacker2(x',x_322))
in biprocess 1.
-- Axiom table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_alg_13,h_alg'_1],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,safe'])) ==> id_58 = mk_idpsk(s_dom_17,h_alg_13,psk_120); table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h_alg'_1,h_alg_13],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[safe',true])) ==> id_58 = mk_idpsk(s_dom_17,h_alg_13,psk_120)
Encoding: 
axiom table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_alg_13,h_alg'_1],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,safe'])) ==> id_58 = mk_idpsk(s_dom_17,h_alg_13,psk_120) encoded as table2(pre_shared_keys(c_dom_7,s_dom_17,h_alg_13,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP',safe')) ==> id_58 = mk_idpsk(s_dom_17,h_alg_13,psk_120)
axiom table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h_alg'_1,h_alg_13],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[safe',true])) ==> id_58 = mk_idpsk(s_dom_17,h_alg_13,psk_120) encoded as table2(pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP',safe'),pre_shared_keys(c_dom_7,s_dom_17,h_alg_13,id_58,psk_120,idP_12,true)) ==> id_58 = mk_idpsk(s_dom_17,h_alg_13,psk_120)
in biprocess 1.
-- Axiom table(pre_shared_keys(choice[c_dom_7,c_dom1_1],choice[s_dom_17,s_dom1],choice[h_alg_13,h_alg1],choice[id_58,id1_1],choice[psk_120,psk1_1],choice[idP_12,idP1_2],choice[safe,safe1_1])) && table(pre_shared_keys(choice[c_dom'_10,c_dom2_1],choice[s_dom'_1,s_dom2],choice[h_alg'_1,h_alg2],choice[id',id2_1],choice[psk',psk2_1],choice[idP_12,idP2_2],choice[safe',safe2_1])) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && psk_120 = psk' && safe = safe'; table(pre_shared_keys(choice[c_dom1_1,c_dom_7],choice[s_dom1,s_dom_17],choice[h_alg1,h_alg_13],choice[id1_1,id_58],choice[psk1_1,psk_120],choice[idP1_2,idP_12],choice[safe1_1,safe])) && table(pre_shared_keys(choice[c_dom2_1,c_dom'_10],choice[s_dom2,s_dom'_1],choice[h_alg2,h_alg'_1],choice[id2_1,id'],choice[psk2_1,psk'],choice[idP2_2,idP_12],choice[safe2_1,safe'])) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && psk_120 = psk' && safe = safe'; table(pre_shared_keys(choice[c_dom_7,c_dom1_1],choice[s_dom_17,s_dom1],choice[h_alg_13,h_alg1],choice[id_58,id1_1],choice[psk_120,psk1_1],choice[idP_12,idP1_2],choice[safe,safe1_1])) && table(pre_shared_keys(choice[c_dom'_10,c_dom2_1],choice[s_dom'_1,s_dom2],choice[h_alg'_1,h_alg2],choice[id',id2_1],choice[psk_120,psk2_1],choice[idP',idP2_2],choice[safe',safe2_1])) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && idP_12 = idP' && safe = safe'; table(pre_shared_keys(choice[c_dom1_1,c_dom_7],choice[s_dom1,s_dom_17],choice[h_alg1,h_alg_13],choice[id1_1,id_58],choice[psk1_1,psk_120],choice[idP1_2,idP_12],choice[safe1_1,safe])) && table(pre_shared_keys(choice[c_dom2_1,c_dom'_10],choice[s_dom2,s_dom'_1],choice[h_alg2,h_alg'_1],choice[id2_1,id'],choice[psk2_1,psk_120],choice[idP2_2,idP'],choice[safe2_1,safe'])) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && idP_12 = idP' && safe = safe'
Encoding: 
axiom table(pre_shared_keys(choice[c_dom_7,c_dom1_1],choice[s_dom_17,s_dom1],choice[h_alg_13,h_alg1],choice[id_58,id1_1],choice[psk_120,psk1_1],choice[idP_12,idP1_2],choice[safe,safe1_1])) && table(pre_shared_keys(choice[c_dom'_10,c_dom2_1],choice[s_dom'_1,s_dom2],choice[h_alg'_1,h_alg2],choice[id',id2_1],choice[psk',psk2_1],choice[idP_12,idP2_2],choice[safe',safe2_1])) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && psk_120 = psk' && safe = safe' encoded as table2(pre_shared_keys(c_dom_7,s_dom_17,h_alg_13,id_58,psk_120,idP_12,safe),pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1)) && table2(pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP_12,safe'),pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1)) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && psk_120 = psk' && safe = safe'
axiom table(pre_shared_keys(choice[c_dom1_1,c_dom_7],choice[s_dom1,s_dom_17],choice[h_alg1,h_alg_13],choice[id1_1,id_58],choice[psk1_1,psk_120],choice[idP1_2,idP_12],choice[safe1_1,safe])) && table(pre_shared_keys(choice[c_dom2_1,c_dom'_10],choice[s_dom2,s_dom'_1],choice[h_alg2,h_alg'_1],choice[id2_1,id'],choice[psk2_1,psk'],choice[idP2_2,idP_12],choice[safe2_1,safe'])) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && psk_120 = psk' && safe = safe' encoded as table2(pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1),pre_shared_keys(c_dom_7,s_dom_17,h_alg_13,id_58,psk_120,idP_12,safe)) && table2(pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1),pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP_12,safe')) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && psk_120 = psk' && safe = safe'
axiom table(pre_shared_keys(choice[c_dom_7,c_dom1_1],choice[s_dom_17,s_dom1],choice[h_alg_13,h_alg1],choice[id_58,id1_1],choice[psk_120,psk1_1],choice[idP_12,idP1_2],choice[safe,safe1_1])) && table(pre_shared_keys(choice[c_dom'_10,c_dom2_1],choice[s_dom'_1,s_dom2],choice[h_alg'_1,h_alg2],choice[id',id2_1],choice[psk_120,psk2_1],choice[idP',idP2_2],choice[safe',safe2_1])) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && idP_12 = idP' && safe = safe' encoded as table2(pre_shared_keys(c_dom_7,s_dom_17,h_alg_13,id_58,psk_120,idP_12,safe),pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1)) && table2(pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk_120,idP',safe'),pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1)) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && idP_12 = idP' && safe = safe'
axiom table(pre_shared_keys(choice[c_dom1_1,c_dom_7],choice[s_dom1,s_dom_17],choice[h_alg1,h_alg_13],choice[id1_1,id_58],choice[psk1_1,psk_120],choice[idP1_2,idP_12],choice[safe1_1,safe])) && table(pre_shared_keys(choice[c_dom2_1,c_dom'_10],choice[s_dom2,s_dom'_1],choice[h_alg2,h_alg'_1],choice[id2_1,id'],choice[psk2_1,psk_120],choice[idP2_2,idP'],choice[safe2_1,safe'])) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && idP_12 = idP' && safe = safe' encoded as table2(pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1),pre_shared_keys(c_dom_7,s_dom_17,h_alg_13,id_58,psk_120,idP_12,safe)) && table2(pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1),pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk_120,idP',safe')) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && idP_12 = idP' && safe = safe'
in biprocess 1.
-- Restriction event(Same(choice[x_322,x'])) ==> x_322 = x' encoded as event2(Same(x_322),Same(x')) ==> x_322 = x' in biprocess 1.
-- Restriction not (event(Client_Cert_server(idClientDiff(s_92),s_pkey_7)) && event(CompromisedLtkForEquiv(s_pkey_7))) encoded as not (event2(Client_Cert_server(idClientDiff(s_92),s_pkey_7),Client_Cert_server(idClientDiff(s_92),s_pkey_7)) && event2(CompromisedLtkForEquiv(s_pkey_7),CompromisedLtkForEquiv(s_pkey_7))) in biprocess 1.
-- Restriction event(Selected_ltk(choice[dom1_1,dom1'],choice[dom2_1,dom2'],choice[idP_12,idP'])) ==> dom1_1 = dom2_1 && dom1' = dom2' && ((dom1_1 = dom1' && idP_12 = idP') || dom1_1 ≠ dom1') encoded as event2(Selected_ltk(dom1_1,dom2_1,idP_12),Selected_ltk(dom1',dom2',idP')) ==> dom1_1 = dom2_1 && dom1' = dom2' && ((dom1_1 = dom1' && idP_12 = idP') || dom1_1 ≠ dom1') in biprocess 1.
-- Restriction event(Selected_psk(choice[dom1_1,dom1'],choice[dom2_1,dom2'],choice[idP_12,idP'],choice[safe,safe'])) ==> dom1_1 = dom2_1 && dom1' = dom2' && (dom1_1 ≠ dom1' || (dom1_1 = dom1' && idP_12 = idP')) encoded as event2(Selected_psk(dom1_1,dom2_1,idP_12,safe),Selected_psk(dom1',dom2',idP',safe')) ==> dom1_1 = dom2_1 && dom1' = dom2' && (dom1_1 ≠ dom1' || (dom1_1 = dom1' && idP_12 = idP')) in biprocess 1.
-- Restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk,ipsk1],choice[safe,safe1_1])) && event(Selected_one_time_used_psk(idP_12,choice[ipsk,ipsk2],choice[safe,safe2_1])) ==> idP_12 = idClientDiff(s_92); event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk1,ipsk],choice[safe1_1,safe])) && event(Selected_one_time_used_psk(idP_12,choice[ipsk2,ipsk],choice[safe2_1,safe])) ==> idP_12 = idClientDiff(s_92); event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk1,ipsk2],choice[safe1_1,safe2_1])) ==> safe1_1 = true && safe2_1 = true
Encoding: 
restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk,ipsk1],choice[safe,safe1_1])) && event(Selected_one_time_used_psk(idP_12,choice[ipsk,ipsk2],choice[safe,safe2_1])) ==> idP_12 = idClientDiff(s_92) encoded as event2(Selected_one_time_used_psk(idClientDiff(s_92),ipsk,safe),Selected_one_time_used_psk(idClientDiff(s_92),ipsk1,safe1_1)) && event2(Selected_one_time_used_psk(idP_12,ipsk,safe),Selected_one_time_used_psk(idP_12,ipsk2,safe2_1)) ==> idP_12 = idClientDiff(s_92)
restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk1,ipsk],choice[safe1_1,safe])) && event(Selected_one_time_used_psk(idP_12,choice[ipsk2,ipsk],choice[safe2_1,safe])) ==> idP_12 = idClientDiff(s_92) encoded as event2(Selected_one_time_used_psk(idClientDiff(s_92),ipsk1,safe1_1),Selected_one_time_used_psk(idClientDiff(s_92),ipsk,safe)) && event2(Selected_one_time_used_psk(idP_12,ipsk2,safe2_1),Selected_one_time_used_psk(idP_12,ipsk,safe)) ==> idP_12 = idClientDiff(s_92)
restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk1,ipsk2],choice[safe1_1,safe2_1])) ==> safe1_1 = true && safe2_1 = true encoded as event2(Selected_one_time_used_psk(idClientDiff(s_92),ipsk1,safe1_1),Selected_one_time_used_psk(idClientDiff(s_92),ipsk2,safe2_1)) ==> safe1_1 = true && safe2_1 = true
in biprocess 1.
-- Restriction event(ClientSequenceClientDataWriteKey(idP_12,st_16,i_7)) && event(ClientSequenceClientDataWriteKey(idP_12,st',i_7)) ==> st_16 = st'; event(ClientSequenceServerDataWriteKey(idP_12,st_16,i_7)) && event(ClientSequenceServerDataWriteKey(idP_12,st',i_7)) ==> st_16 = st'; event(ServerSequenceServerDataWriteKey(idP_12,st_16,i_7)) && event(ServerSequenceServerDataWriteKey(idP_12,st',i_7)) ==> st_16 = st'; event(ServerSequenceClientDataWriteKey(idP_12,st_16,i_7)) && event(ServerSequenceClientDataWriteKey(idP_12,st',i_7)) ==> st_16 = st'
Encoding: 
restriction event(ClientSequenceClientDataWriteKey(idP_12,st_16,i_7)) && event(ClientSequenceClientDataWriteKey(idP_12,st',i_7)) ==> st_16 = st' encoded as event2(ClientSequenceClientDataWriteKey(idP_12,st_16,i_7),ClientSequenceClientDataWriteKey(idP_12,st_16,i_7)) && event2(ClientSequenceClientDataWriteKey(idP_12,st',i_7),ClientSequenceClientDataWriteKey(idP_12,st',i_7)) ==> st_16 = st'
restriction event(ClientSequenceServerDataWriteKey(idP_12,st_16,i_7)) && event(ClientSequenceServerDataWriteKey(idP_12,st',i_7)) ==> st_16 = st' encoded as event2(ClientSequenceServerDataWriteKey(idP_12,st_16,i_7),ClientSequenceServerDataWriteKey(idP_12,st_16,i_7)) && event2(ClientSequenceServerDataWriteKey(idP_12,st',i_7),ClientSequenceServerDataWriteKey(idP_12,st',i_7)) ==> st_16 = st'
restriction event(ServerSequenceServerDataWriteKey(idP_12,st_16,i_7)) && event(ServerSequenceServerDataWriteKey(idP_12,st',i_7)) ==> st_16 = st' encoded as event2(ServerSequenceServerDataWriteKey(idP_12,st_16,i_7),ServerSequenceServerDataWriteKey(idP_12,st_16,i_7)) && event2(ServerSequenceServerDataWriteKey(idP_12,st',i_7),ServerSequenceServerDataWriteKey(idP_12,st',i_7)) ==> st_16 = st'
restriction event(ServerSequenceClientDataWriteKey(idP_12,st_16,i_7)) && event(ServerSequenceClientDataWriteKey(idP_12,st',i_7)) ==> st_16 = st' encoded as event2(ServerSequenceClientDataWriteKey(idP_12,st_16,i_7),ServerSequenceClientDataWriteKey(idP_12,st_16,i_7)) && event2(ServerSequenceClientDataWriteKey(idP_12,st',i_7),ServerSequenceClientDataWriteKey(idP_12,st',i_7)) ==> st_16 = st'
in biprocess 1.
-- Diff-equivalence in biprocess 1.
Translating the process into Horn clauses...
Termination warning: v_969 ≠ v_970 && attacker2(v_971,v_969) && attacker2(v_971,v_970) -> bad
Selecting 0
Termination warning: v_969 ≠ v_970 && attacker2(v_969,v_971) && attacker2(v_970,v_971) -> bad
Selecting 0
Completing...
200 rules inserted. Base: 200 rules (87 with conclusion selected). Queue: 12551 rules.
400 rules inserted. Base: 400 rules (106 with conclusion selected). Queue: 12351 rules.
Termination warning: v_969 ≠ v_970 && attacker2(v_971,v_969) && attacker2(v_971,v_970) -> bad
Selecting 0
Warning of non termination (Selected):
attacker2(v_969,v_970)
v_970 ≠ v_971 && attacker2(v_969,v_970) && attacker2(v_969,v_971) -> bad
Termination warning: v_969 ≠ v_970 && attacker2(v_969,v_971) && attacker2(v_970,v_971) -> bad
Selecting 0
Warning of non termination (Selected):
attacker2(v_969,v_970)
v_969 ≠ v_971 && attacker2(v_969,v_970) && attacker2(v_971,v_970) -> bad
600 rules inserted. Base: 600 rules (136 with conclusion selected). Queue: 12187 rules.
800 rules inserted. Base: 800 rules (136 with conclusion selected). Queue: 11987 rules.
1000 rules inserted. Base: 1000 rules (136 with conclusion selected). Queue: 11787 rules.
1200 rules inserted. Base: 1200 rules (136 with conclusion selected). Queue: 11587 rules.
1400 rules inserted. Base: 1400 rules (136 with conclusion selected). Queue: 11387 rules.
1600 rules inserted. Base: 1600 rules (136 with conclusion selected). Queue: 11187 rules.
1800 rules inserted. Base: 1800 rules (136 with conclusion selected). Queue: 10987 rules.
2000 rules inserted. Base: 2000 rules (136 with conclusion selected). Queue: 10787 rules.
2200 rules inserted. Base: 2200 rules (136 with conclusion selected). Queue: 10587 rules.
2400 rules inserted. Base: 2400 rules (137 with conclusion selected). Queue: 10389 rules.
2600 rules inserted. Base: 2600 rules (137 with conclusion selected). Queue: 10189 rules.
2800 rules inserted. Base: 2800 rules (137 with conclusion selected). Queue: 9989 rules.
3000 rules inserted. Base: 3000 rules (139 with conclusion selected). Queue: 9827 rules.
3200 rules inserted. Base: 3200 rules (139 with conclusion selected). Queue: 9627 rules.
3400 rules inserted. Base: 3400 rules (139 with conclusion selected). Queue: 9427 rules.
3600 rules inserted. Base: 3600 rules (139 with conclusion selected). Queue: 9227 rules.
3800 rules inserted. Base: 3800 rules (139 with conclusion selected). Queue: 9027 rules.
4000 rules inserted. Base: 4000 rules (139 with conclusion selected). Queue: 8827 rules.
4200 rules inserted. Base: 4200 rules (139 with conclusion selected). Queue: 8627 rules.
4400 rules inserted. Base: 4400 rules (139 with conclusion selected). Queue: 8427 rules.
4600 rules inserted. Base: 4600 rules (139 with conclusion selected). Queue: 8227 rules.
4800 rules inserted. Base: 4800 rules (139 with conclusion selected). Queue: 8027 rules.
5000 rules inserted. Base: 5000 rules (139 with conclusion selected). Queue: 7827 rules.
5200 rules inserted. Base: 5200 rules (139 with conclusion selected). Queue: 7627 rules.
5400 rules inserted. Base: 5400 rules (139 with conclusion selected). Queue: 7427 rules.
5600 rules inserted. Base: 5600 rules (139 with conclusion selected). Queue: 7227 rules.
5800 rules inserted. Base: 5800 rules (139 with conclusion selected). Queue: 7027 rules.
6000 rules inserted. Base: 6000 rules (139 with conclusion selected). Queue: 6827 rules.
6200 rules inserted. Base: 6200 rules (139 with conclusion selected). Queue: 6627 rules.
6400 rules inserted. Base: 6400 rules (139 with conclusion selected). Queue: 6427 rules.
6600 rules inserted. Base: 6600 rules (139 with conclusion selected). Queue: 6227 rules.
6800 rules inserted. Base: 6800 rules (139 with conclusion selected). Queue: 6027 rules.
7000 rules inserted. Base: 7000 rules (139 with conclusion selected). Queue: 5827 rules.
7200 rules inserted. Base: 7200 rules (139 with conclusion selected). Queue: 5627 rules.
7400 rules inserted. Base: 7400 rules (139 with conclusion selected). Queue: 5427 rules.
7600 rules inserted. Base: 7600 rules (139 with conclusion selected). Queue: 5227 rules.
7800 rules inserted. Base: 7800 rules (139 with conclusion selected). Queue: 5027 rules.
8000 rules inserted. Base: 8000 rules (139 with conclusion selected). Queue: 4827 rules.
8200 rules inserted. Base: 8200 rules (139 with conclusion selected). Queue: 4627 rules.
8400 rules inserted. Base: 8400 rules (139 with conclusion selected). Queue: 4427 rules.
8600 rules inserted. Base: 8600 rules (139 with conclusion selected). Queue: 4227 rules.
8800 rules inserted. Base: 8800 rules (139 with conclusion selected). Queue: 4027 rules.
9000 rules inserted. Base: 9000 rules (139 with conclusion selected). Queue: 3827 rules.
9200 rules inserted. Base: 9200 rules (139 with conclusion selected). Queue: 3627 rules.
9400 rules inserted. Base: 9400 rules (139 with conclusion selected). Queue: 3427 rules.
9600 rules inserted. Base: 9600 rules (139 with conclusion selected). Queue: 3227 rules.
9800 rules inserted. Base: 9800 rules (139 with conclusion selected). Queue: 3027 rules.
10000 rules inserted. Base: 10000 rules (139 with conclusion selected). Queue: 2827 rules.
10200 rules inserted. Base: 10200 rules (139 with conclusion selected). Queue: 2627 rules.
10400 rules inserted. Base: 10400 rules (139 with conclusion selected). Queue: 2427 rules.
10600 rules inserted. Base: 10600 rules (139 with conclusion selected). Queue: 2227 rules.
10800 rules inserted. Base: 10800 rules (139 with conclusion selected). Queue: 2027 rules.
11000 rules inserted. Base: 11000 rules (139 with conclusion selected). Queue: 1827 rules.
11200 rules inserted. Base: 11200 rules (139 with conclusion selected). Queue: 1627 rules.
11400 rules inserted. Base: 11400 rules (139 with conclusion selected). Queue: 1427 rules.
11600 rules inserted. Base: 11600 rules (139 with conclusion selected). Queue: 1227 rules.
11800 rules inserted. Base: 11800 rules (139 with conclusion selected). Queue: 1027 rules.
12000 rules inserted. Base: 12000 rules (139 with conclusion selected). Queue: 827 rules.
12200 rules inserted. Base: 12200 rules (140 with conclusion selected). Queue: 701 rules.
12400 rules inserted. Base: 12400 rules (141 with conclusion selected). Queue: 607 rules.
12600 rules inserted. Base: 12600 rules (142 with conclusion selected). Queue: 457 rules.
12800 rules inserted. Base: 12800 rules (152 with conclusion selected). Queue: 306 rules.
13000 rules inserted. Base: 13000 rules (152 with conclusion selected). Queue: 112 rules.
13200 rules inserted. Base: 13200 rules (175 with conclusion selected). Queue: 551 rules.
13400 rules inserted. Base: 13400 rules (175 with conclusion selected). Queue: 351 rules.
13600 rules inserted. Base: 13600 rules (175 with conclusion selected). Queue: 151 rules.
13800 rules inserted. Base: 13790 rules (193 with conclusion selected). Queue: 134 rules.
14000 rules inserted. Base: 13971 rules (197 with conclusion selected). Queue: 104 rules.
14200 rules inserted. Base: 14124 rules (197 with conclusion selected). Queue: 71 rules.
14400 rules inserted. Base: 14277 rules (200 with conclusion selected). Queue: 54 rules.
14600 rules inserted. Base: 14443 rules (204 with conclusion selected). Queue: 52 rules.
14800 rules inserted. Base: 14542 rules (212 with conclusion selected). Queue: 94 rules.
15000 rules inserted. Base: 14669 rules (230 with conclusion selected). Queue: 84 rules.
15200 rules inserted. Base: 14751 rules (234 with conclusion selected). Queue: 76 rules.
15400 rules inserted. Base: 14929 rules (246 with conclusion selected). Queue: 130 rules.
15600 rules inserted. Base: 15018 rules (246 with conclusion selected). Queue: 109 rules.
15800 rules inserted. Base: 15038 rules (255 with conclusion selected). Queue: 147 rules.
16000 rules inserted. Base: 15210 rules (335 with conclusion selected). Queue: 540 rules.
16200 rules inserted. Base: 15394 rules (346 with conclusion selected). Queue: 498 rules.
16400 rules inserted. Base: 15578 rules (354 with conclusion selected). Queue: 404 rules.
16600 rules inserted. Base: 15750 rules (354 with conclusion selected). Queue: 376 rules.
16800 rules inserted. Base: 15930 rules (354 with conclusion selected). Queue: 352 rules.
17000 rules inserted. Base: 16107 rules (354 with conclusion selected). Queue: 328 rules.
17200 rules inserted. Base: 16284 rules (354 with conclusion selected). Queue: 313 rules.
17400 rules inserted. Base: 16458 rules (354 with conclusion selected). Queue: 235 rules.
17600 rules inserted. Base: 16626 rules (374 with conclusion selected). Queue: 419 rules.
17800 rules inserted. Base: 16818 rules (396 with conclusion selected). Queue: 603 rules.
18000 rules inserted. Base: 17006 rules (396 with conclusion selected). Queue: 557 rules.
18200 rules inserted. Base: 17192 rules (396 with conclusion selected). Queue: 511 rules.
18400 rules inserted. Base: 17376 rules (400 with conclusion selected). Queue: 534 rules.
18600 rules inserted. Base: 17572 rules (408 with conclusion selected). Queue: 568 rules.
18800 rules inserted. Base: 17772 rules (417 with conclusion selected). Queue: 615 rules.
19000 rules inserted. Base: 17970 rules (477 with conclusion selected). Queue: 1102 rules.
19200 rules inserted. Base: 18168 rules (525 with conclusion selected). Queue: 1486 rules.
19400 rules inserted. Base: 18368 rules (585 with conclusion selected). Queue: 1976 rules.
19600 rules inserted. Base: 18524 rules (585 with conclusion selected). Queue: 1920 rules.
19800 rules inserted. Base: 18675 rules (585 with conclusion selected). Queue: 1850 rules.
20000 rules inserted. Base: 18830 rules (585 with conclusion selected). Queue: 1786 rules.
20200 rules inserted. Base: 18976 rules (585 with conclusion selected). Queue: 1718 rules.
20400 rules inserted. Base: 19118 rules (585 with conclusion selected). Queue: 1652 rules.
20600 rules inserted. Base: 19268 rules (585 with conclusion selected). Queue: 1588 rules.
20800 rules inserted. Base: 19416 rules (585 with conclusion selected). Queue: 1520 rules.
21000 rules inserted. Base: 19572 rules (585 with conclusion selected). Queue: 1452 rules.
21200 rules inserted. Base: 19717 rules (585 with conclusion selected). Queue: 1390 rules.
21400 rules inserted. Base: 19862 rules (585 with conclusion selected). Queue: 1326 rules.
21600 rules inserted. Base: 20023 rules (585 with conclusion selected). Queue: 1231 rules.
21800 rules inserted. Base: 20184 rules (585 with conclusion selected). Queue: 1129 rules.
22000 rules inserted. Base: 20352 rules (585 with conclusion selected). Queue: 1024 rules.
22200 rules inserted. Base: 20514 rules (585 with conclusion selected). Queue: 928 rules.
22400 rules inserted. Base: 20678 rules (585 with conclusion selected). Queue: 823 rules.
22600 rules inserted. Base: 20842 rules (585 with conclusion selected). Queue: 718 rules.
22800 rules inserted. Base: 21016 rules (585 with conclusion selected). Queue: 610 rules.
23000 rules inserted. Base: 21210 rules (585 with conclusion selected). Queue: 476 rules.
23200 rules inserted. Base: 21402 rules (585 with conclusion selected). Queue: 344 rules.
23400 rules inserted. Base: 21588 rules (585 with conclusion selected). Queue: 253 rules.
23600 rules inserted. Base: 21733 rules (585 with conclusion selected). Queue: 162 rules.
23800 rules inserted. Base: 21882 rules (585 with conclusion selected). Queue: 68 rules.
24000 rules inserted. Base: 21944 rules (585 with conclusion selected). Queue: 50 rules.
24200 rules inserted. Base: 21960 rules (592 with conclusion selected). Queue: 59 rules.
24400 rules inserted. Base: 22144 rules (600 with conclusion selected). Queue: 53 rules.
24600 rules inserted. Base: 22289 rules (600 with conclusion selected). Queue: 47 rules.
24800 rules inserted. Base: 22408 rules (605 with conclusion selected). Queue: 82 rules.
25000 rules inserted. Base: 22547 rules (605 with conclusion selected). Queue: 62 rules.
25200 rules inserted. Base: 22597 rules (605 with conclusion selected). Queue: 34 rules.
25400 rules inserted. Base: 22622 rules (615 with conclusion selected). Queue: 80 rules.
25600 rules inserted. Base: 22738 rules (621 with conclusion selected). Queue: 72 rules.
25800 rules inserted. Base: 22907 rules (627 with conclusion selected). Queue: 44 rules.
26000 rules inserted. Base: 23082 rules (627 with conclusion selected). Queue: 42 rules.
26200 rules inserted. Base: 23208 rules (631 with conclusion selected). Queue: 53 rules.
26400 rules inserted. Base: 23368 rules (631 with conclusion selected). Queue: 40 rules.
26600 rules inserted. Base: 23494 rules (639 with conclusion selected). Queue: 51 rules.
26800 rules inserted. Base: 23694 rules (639 with conclusion selected). Queue: 52 rules.
27000 rules inserted. Base: 23894 rules (639 with conclusion selected). Queue: 8 rules.
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_CFIN[],ch_client_CFIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_FIN[],ch_client_FIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_CRT[],ch_client_CRT[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_after_EE[],ch_client_after_EE[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_CFIN[],ch_server_CFIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_FIN[],ch_server_FIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_CRT[],ch_server_CRT[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_SH[],ch_server_SH[])
ok, secrecy assumption verified: fact unreachable attacker2(uc_privkey(s_92),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,uc_privkey(s_92))
ok, secrecy assumption verified: fact unreachable attacker2(uc_psk(s_92),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,uc_psk(s_92))
ok, secrecy assumption verified: fact unreachable attacker2(x_322,dh_k(s_92))
ok, secrecy assumption verified: fact unreachable attacker2(dh_k(s_92),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,zero,uc_psk(s_92)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,zero,uc_psk(s_92)),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_ext_res_binder,hash_ideal(i_7,zero))))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_ext_res_binder,hash_ideal(i_7,zero))),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,dh_f(s_92))
ok, secrecy assumption verified: fact unreachable attacker2(dh_f(s_92),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))))
ok, secrecy assumption verified: fact unreachable attacker2(dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,extra_es,dh_f(s_92)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,extra_es,dh_f(s_92)),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(t,aead_enc(a_2,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322,y,z))
ok, secrecy assumption verified: fact unreachable attacker2(aead_enc(a_2,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322,y,z),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,aead_enc(a_2,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322,y,z))
ok, secrecy assumption verified: fact unreachable attacker2(aead_enc(a_2,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322,y,z),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_key,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_key,zero)),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_finished,zero)),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_key,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_key,zero)),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_finished,zero)),t)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,dh_xy(s',dh_pub(id_g(StrongDH,i_7),dh_k(s_92))))
ok, secrecy assumption verified: fact unreachable attacker2(dh_xy(s',dh_pub(id_g(StrongDH,i_7),dh_k(s_92))),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,dh_xy(s',dh_pub(id_g(StrongDH,i_7),dh_k(s_92))),(hpke_secret,zero)),(hpke_key,hmac_ideal(i_7,zero,(hpke_info_hash,info_1)))))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,dh_xy(s',dh_pub(id_g(StrongDH,i_7),dh_k(s_92))),(hpke_secret,zero)),(hpke_key,hmac_ideal(i_7,zero,(hpke_info_hash,info_1)))),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,dh_f(s'),(hpke_secret,zero)),(hpke_key,hmac_ideal(i_7,zero,(hpke_info_hash,info_1)))))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,dh_f(s'),(hpke_secret,zero)),(hpke_key,hmac_ideal(i_7,zero,(hpke_info_hash,info_1)))),x_322)
RESULT Diff-equivalence is true.

--------------------------------------------------------------
Verification summary:

Query(ies):
 - Diff-equivalence is true.
Associated axiom(s):
 - 
Axiom event(PreciseMess(ch,choice[id_58,id2_1],choice[st1_9,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id_58,id2'],choice[st1',st2'],choice[x1',x2'])) ==> st1_9 = st1' && x1 = x1' encoded as event2(PreciseMess(ch,id_58,st1_9,x1),PreciseMess(ch,id2_1,st2_2,x2)) && event2(PreciseMess(ch,id_58,st1',x1'),PreciseMess(ch,id2',st2',x2')) ==> st1_9 = st1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id_58],choice[st1_9,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id_58],choice[st1',st2'],choice[x1',x2'])) ==> st2_2 = st2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1_9,x1),PreciseMess(ch,id_58,st2_2,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id_58,st2',x2')) ==> st2_2 = st2' && x2 = x2'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st_16,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st_16,st2'],choice[x1',x2'])) ==> id1_1 = id1' && x1 = x1' encoded as event2(PreciseMess(ch,id1_1,st_16,x1),PreciseMess(ch,id2_1,st2_2,x2)) && event2(PreciseMess(ch,id1',st_16,x1'),PreciseMess(ch,id2',st2',x2')) ==> id1_1 = id1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st1_9,st_16],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st1',st_16],choice[x1',x2'])) ==> id2_1 = id2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1_9,x1),PreciseMess(ch,id2_1,st_16,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id2',st_16,x2')) ==> id2_1 = id2' && x2 = x2'
 in biprocess 1.
 - Axiom event(PreciseInput(st_16,choice[x_322,x1])) && event(PreciseInput(st_16,choice[x',x2])) ==> x_322 = x' && x1 = x2 encoded as event2(PreciseInput(st_16,x_322),PreciseInput(st_16,x1)) && event2(PreciseInput(st_16,x'),PreciseInput(st_16,x2)) ==> x_322 = x' && x1 = x2 in biprocess 1.
 - 
Axiom event(Server_DH_client(choice[id_58,id1_1],choice[e,e1])) && event(Server_DH_client(choice[id_58,id2_1],choice[e',e2])) ==> e = e' encoded as event2(Server_DH_client(id_58,e),Server_DH_client(id1_1,e1)) && event2(Server_DH_client(id_58,e'),Server_DH_client(id2_1,e2)) ==> e = e'
axiom event(Server_DH_client(choice[id1_1,id_58],choice[e1,e])) && event(Server_DH_client(choice[id2_1,id_58],choice[e2,e'])) ==> e = e' encoded as event2(Server_DH_client(id1_1,e1),Server_DH_client(id_58,e)) && event2(Server_DH_client(id2_1,e2),Server_DH_client(id_58,e')) ==> e = e'
 in biprocess 1.
 - 
Axiom event(Server_new_PSK(choice[id_58,id1_1],choice[k_82,k1])) && event(Server_new_PSK(choice[id_58,id2_1],choice[k',k2])) ==> k_82 = k' encoded as event2(Server_new_PSK(id_58,k_82),Server_new_PSK(id1_1,k1)) && event2(Server_new_PSK(id_58,k'),Server_new_PSK(id2_1,k2)) ==> k_82 = k'
axiom event(Server_new_PSK(choice[id1_1,id_58],choice[k1,k_82])) && event(Server_new_PSK(choice[id2_1,id_58],choice[k2,k'])) ==> k_82 = k' encoded as event2(Server_new_PSK(id1_1,k1),Server_new_PSK(id_58,k_82)) && event2(Server_new_PSK(id2_1,k2),Server_new_PSK(id_58,k')) ==> k_82 = k'
 in biprocess 1.
 - 
Axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[psk_120,psk''])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(psk_120,psk''))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[psk'',psk_120])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(psk'',psk_120))
axiom table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[is_safe_48,is_safe'])) && attacker(choice[psk_120,psk'']) ==> is_safe_48 ≠ true encoded as table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,is_safe_48),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(psk_120,psk'') ==> is_safe_48 ≠ true
axiom table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',is_safe_48])) && attacker(choice[psk'',psk_120]) ==> is_safe_48 ≠ true encoded as table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,is_safe_48)) && attacker2(psk'',psk_120) ==> is_safe_48 ≠ true
axiom table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[is_safe_48,is_safe'])) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,is_safe_48),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',is_safe_48])) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,is_safe_48)) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom attacker(choice[mk_idpsk(s_dom_17,h_286,psk_120),idpsk]) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as attacker2(mk_idpsk(s_dom_17,h_286,psk_120),idpsk) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom attacker(choice[idpsk,mk_idpsk(s_dom_17,h_286,psk_120)]) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as attacker2(idpsk,mk_idpsk(s_dom_17,h_286,psk_120)) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,zero,psk_120),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,zero,psk_120),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,zero,psk_120)])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,zero,psk_120)))
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero))),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero))),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero)))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero)))))
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e)])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e)))
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))))
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))))
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))))
axiom not (table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,psk_120,idP_12,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))))
 in biprocess 1.
 - 
Axiom not (event(Server_new_PSK(choice[id_s,id_s_1],choice[new_psk,new_psk'])) && table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_286,h'],choice[id_58,id'],choice[new_psk,new_psk''],choice[id_c,id_c'],choice[is_safe_48,is_safe'])) && event(Server_DH_client(choice[id_s,id_s_2],choice[dh_pub(g_25,x_322),e])) && attacker(choice[x_322,x'])) encoded as not (event2(Server_new_PSK(id_s,new_psk),Server_new_PSK(id_s_1,new_psk')) && table2(pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,new_psk,id_c,is_safe_48),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',new_psk'',id_c',is_safe')) && event2(Server_DH_client(id_s,dh_pub(g_25,x_322)),Server_DH_client(id_s_2,e)) && attacker2(x_322,x'))
axiom not (event(Server_new_PSK(choice[id_s_1,id_s],choice[new_psk',new_psk])) && table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h',h_286],choice[id',id_58],choice[new_psk'',new_psk],choice[id_c',id_c],choice[is_safe',is_safe_48])) && event(Server_DH_client(choice[id_s_2,id_s],choice[e,dh_pub(g_25,x_322)])) && attacker(choice[x',x_322])) encoded as not (event2(Server_new_PSK(id_s_1,new_psk'),Server_new_PSK(id_s,new_psk)) && table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',new_psk'',id_c',is_safe'),pre_shared_keys(c_dom_7,s_dom_17,h_286,id_58,new_psk,id_c,is_safe_48)) && event2(Server_DH_client(id_s_2,e),Server_DH_client(id_s,dh_pub(g_25,x_322))) && attacker2(x',x_322))
 in biprocess 1.
 - 
Axiom table(pre_shared_keys(choice[c_dom_7,c_dom'_10],choice[s_dom_17,s_dom'_1],choice[h_alg_13,h_alg'_1],choice[id_58,id'],choice[psk_120,psk'],choice[idP_12,idP'],choice[true,safe'])) ==> id_58 = mk_idpsk(s_dom_17,h_alg_13,psk_120) encoded as table2(pre_shared_keys(c_dom_7,s_dom_17,h_alg_13,id_58,psk_120,idP_12,true),pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP',safe')) ==> id_58 = mk_idpsk(s_dom_17,h_alg_13,psk_120)
axiom table(pre_shared_keys(choice[c_dom'_10,c_dom_7],choice[s_dom'_1,s_dom_17],choice[h_alg'_1,h_alg_13],choice[id',id_58],choice[psk',psk_120],choice[idP',idP_12],choice[safe',true])) ==> id_58 = mk_idpsk(s_dom_17,h_alg_13,psk_120) encoded as table2(pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP',safe'),pre_shared_keys(c_dom_7,s_dom_17,h_alg_13,id_58,psk_120,idP_12,true)) ==> id_58 = mk_idpsk(s_dom_17,h_alg_13,psk_120)
 in biprocess 1.
 - 
Axiom table(pre_shared_keys(choice[c_dom_7,c_dom1_1],choice[s_dom_17,s_dom1],choice[h_alg_13,h_alg1],choice[id_58,id1_1],choice[psk_120,psk1_1],choice[idP_12,idP1_2],choice[safe,safe1_1])) && table(pre_shared_keys(choice[c_dom'_10,c_dom2_1],choice[s_dom'_1,s_dom2],choice[h_alg'_1,h_alg2],choice[id',id2_1],choice[psk',psk2_1],choice[idP_12,idP2_2],choice[safe',safe2_1])) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && psk_120 = psk' && safe = safe' encoded as table2(pre_shared_keys(c_dom_7,s_dom_17,h_alg_13,id_58,psk_120,idP_12,safe),pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1)) && table2(pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP_12,safe'),pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1)) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && psk_120 = psk' && safe = safe'
axiom table(pre_shared_keys(choice[c_dom1_1,c_dom_7],choice[s_dom1,s_dom_17],choice[h_alg1,h_alg_13],choice[id1_1,id_58],choice[psk1_1,psk_120],choice[idP1_2,idP_12],choice[safe1_1,safe])) && table(pre_shared_keys(choice[c_dom2_1,c_dom'_10],choice[s_dom2,s_dom'_1],choice[h_alg2,h_alg'_1],choice[id2_1,id'],choice[psk2_1,psk'],choice[idP2_2,idP_12],choice[safe2_1,safe'])) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && psk_120 = psk' && safe = safe' encoded as table2(pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1),pre_shared_keys(c_dom_7,s_dom_17,h_alg_13,id_58,psk_120,idP_12,safe)) && table2(pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1),pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP_12,safe')) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && psk_120 = psk' && safe = safe'
axiom table(pre_shared_keys(choice[c_dom_7,c_dom1_1],choice[s_dom_17,s_dom1],choice[h_alg_13,h_alg1],choice[id_58,id1_1],choice[psk_120,psk1_1],choice[idP_12,idP1_2],choice[safe,safe1_1])) && table(pre_shared_keys(choice[c_dom'_10,c_dom2_1],choice[s_dom'_1,s_dom2],choice[h_alg'_1,h_alg2],choice[id',id2_1],choice[psk_120,psk2_1],choice[idP',idP2_2],choice[safe',safe2_1])) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && idP_12 = idP' && safe = safe' encoded as table2(pre_shared_keys(c_dom_7,s_dom_17,h_alg_13,id_58,psk_120,idP_12,safe),pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1)) && table2(pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk_120,idP',safe'),pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1)) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && idP_12 = idP' && safe = safe'
axiom table(pre_shared_keys(choice[c_dom1_1,c_dom_7],choice[s_dom1,s_dom_17],choice[h_alg1,h_alg_13],choice[id1_1,id_58],choice[psk1_1,psk_120],choice[idP1_2,idP_12],choice[safe1_1,safe])) && table(pre_shared_keys(choice[c_dom2_1,c_dom'_10],choice[s_dom2,s_dom'_1],choice[h_alg2,h_alg'_1],choice[id2_1,id'],choice[psk2_1,psk_120],choice[idP2_2,idP'],choice[safe2_1,safe'])) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && idP_12 = idP' && safe = safe' encoded as table2(pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1),pre_shared_keys(c_dom_7,s_dom_17,h_alg_13,id_58,psk_120,idP_12,safe)) && table2(pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1),pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk_120,idP',safe')) ==> c_dom_7 = c_dom'_10 && s_dom_17 = s_dom'_1 && h_alg_13 = h_alg'_1 && id_58 = id' && idP_12 = idP' && safe = safe'
 in biprocess 1.
Associated restriction(s):
 - Restriction event(Same(choice[x_322,x'])) ==> x_322 = x' encoded as event2(Same(x_322),Same(x')) ==> x_322 = x' in biprocess 1.
 - Restriction not (event(Client_Cert_server(idClientDiff(s_92),s_pkey_7)) && event(CompromisedLtkForEquiv(s_pkey_7))) encoded as not (event2(Client_Cert_server(idClientDiff(s_92),s_pkey_7),Client_Cert_server(idClientDiff(s_92),s_pkey_7)) && event2(CompromisedLtkForEquiv(s_pkey_7),CompromisedLtkForEquiv(s_pkey_7))) in biprocess 1.
 - Restriction event(Selected_ltk(choice[dom1_1,dom1'],choice[dom2_1,dom2'],choice[idP_12,idP'])) ==> dom1_1 = dom2_1 && dom1' = dom2' && ((dom1_1 = dom1' && idP_12 = idP') || dom1_1 ≠ dom1') encoded as event2(Selected_ltk(dom1_1,dom2_1,idP_12),Selected_ltk(dom1',dom2',idP')) ==> dom1_1 = dom2_1 && dom1' = dom2' && ((dom1_1 = dom1' && idP_12 = idP') || dom1_1 ≠ dom1') in biprocess 1.
 - Restriction event(Selected_psk(choice[dom1_1,dom1'],choice[dom2_1,dom2'],choice[idP_12,idP'],choice[safe,safe'])) ==> dom1_1 = dom2_1 && dom1' = dom2' && (dom1_1 ≠ dom1' || (dom1_1 = dom1' && idP_12 = idP')) encoded as event2(Selected_psk(dom1_1,dom2_1,idP_12,safe),Selected_psk(dom1',dom2',idP',safe')) ==> dom1_1 = dom2_1 && dom1' = dom2' && (dom1_1 ≠ dom1' || (dom1_1 = dom1' && idP_12 = idP')) in biprocess 1.
 - 
Restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk,ipsk1],choice[safe,safe1_1])) && event(Selected_one_time_used_psk(idP_12,choice[ipsk,ipsk2],choice[safe,safe2_1])) ==> idP_12 = idClientDiff(s_92) encoded as event2(Selected_one_time_used_psk(idClientDiff(s_92),ipsk,safe),Selected_one_time_used_psk(idClientDiff(s_92),ipsk1,safe1_1)) && event2(Selected_one_time_used_psk(idP_12,ipsk,safe),Selected_one_time_used_psk(idP_12,ipsk2,safe2_1)) ==> idP_12 = idClientDiff(s_92)
restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk1,ipsk],choice[safe1_1,safe])) && event(Selected_one_time_used_psk(idP_12,choice[ipsk2,ipsk],choice[safe2_1,safe])) ==> idP_12 = idClientDiff(s_92) encoded as event2(Selected_one_time_used_psk(idClientDiff(s_92),ipsk1,safe1_1),Selected_one_time_used_psk(idClientDiff(s_92),ipsk,safe)) && event2(Selected_one_time_used_psk(idP_12,ipsk2,safe2_1),Selected_one_time_used_psk(idP_12,ipsk,safe)) ==> idP_12 = idClientDiff(s_92)
restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk1,ipsk2],choice[safe1_1,safe2_1])) ==> safe1_1 = true && safe2_1 = true encoded as event2(Selected_one_time_used_psk(idClientDiff(s_92),ipsk1,safe1_1),Selected_one_time_used_psk(idClientDiff(s_92),ipsk2,safe2_1)) ==> safe1_1 = true && safe2_1 = true
 in biprocess 1.
 - 
Restriction event(ClientSequenceClientDataWriteKey(idP_12,st_16,i_7)) && event(ClientSequenceClientDataWriteKey(idP_12,st',i_7)) ==> st_16 = st' encoded as event2(ClientSequenceClientDataWriteKey(idP_12,st_16,i_7),ClientSequenceClientDataWriteKey(idP_12,st_16,i_7)) && event2(ClientSequenceClientDataWriteKey(idP_12,st',i_7),ClientSequenceClientDataWriteKey(idP_12,st',i_7)) ==> st_16 = st'
restriction event(ClientSequenceServerDataWriteKey(idP_12,st_16,i_7)) && event(ClientSequenceServerDataWriteKey(idP_12,st',i_7)) ==> st_16 = st' encoded as event2(ClientSequenceServerDataWriteKey(idP_12,st_16,i_7),ClientSequenceServerDataWriteKey(idP_12,st_16,i_7)) && event2(ClientSequenceServerDataWriteKey(idP_12,st',i_7),ClientSequenceServerDataWriteKey(idP_12,st',i_7)) ==> st_16 = st'
restriction event(ServerSequenceServerDataWriteKey(idP_12,st_16,i_7)) && event(ServerSequenceServerDataWriteKey(idP_12,st',i_7)) ==> st_16 = st' encoded as event2(ServerSequenceServerDataWriteKey(idP_12,st_16,i_7),ServerSequenceServerDataWriteKey(idP_12,st_16,i_7)) && event2(ServerSequenceServerDataWriteKey(idP_12,st',i_7),ServerSequenceServerDataWriteKey(idP_12,st',i_7)) ==> st_16 = st'
restriction event(ServerSequenceClientDataWriteKey(idP_12,st_16,i_7)) && event(ServerSequenceClientDataWriteKey(idP_12,st',i_7)) ==> st_16 = st' encoded as event2(ServerSequenceClientDataWriteKey(idP_12,st_16,i_7),ServerSequenceClientDataWriteKey(idP_12,st_16,i_7)) && event2(ServerSequenceClientDataWriteKey(idP_12,st',i_7),ServerSequenceClientDataWriteKey(idP_12,st',i_7)) ==> st_16 = st'
 in biprocess 1.

--------------------------------------------------------------

974.23user 9.54system 16:24.97elapsed 99%CPU (0avgtext+0avgdata 15005116maxresident)k
24inputs+2800outputs (0major+5458075minor)pagefaults 0swaps
