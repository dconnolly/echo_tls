mkdir -p ../../generated_libraries
m4 ../../libraries/client.m4.pvl > ../../generated_libraries/client.pvl
proverif \
-lib config.m4.pvl \
-lib ../../libraries/primitives.pvl \
-lib ../../libraries/format.pvl \
-lib ../../libraries/key_schedule.pvl \
-lib ../../libraries/events.pvl \
-lib config_proof_helper.m4.pvl \
-lib ../../libraries/tls_functions.pvl \
-lib ../../libraries/ech_functions.pvl \
-lib ../../libraries/server.pvl \
-lib ../../generated_libraries/client.pvl \
-lib ../../libraries/main_processes.pvl \
-lib ../../libraries/proof_helper_equivalence.pvl \
anonymity_unlinkability_TLS_client_no_ticket.pv
File "anonymity_unlinkability_TLS_client_no_ticket.pv", line 142, characters 11-17:
Warning: identifier ClientA rebound.
File "anonymity_unlinkability_TLS_client_no_ticket.pv", line 143, characters 11-17:
Warning: identifier ClientB rebound.
Biprocess 0 (that is, the initial process):
(
    {1}!
    {2}in(io, a: domain);
    {3}new lgt_id: idProc;
    {4}event Same(a);
    {5}new s: seed;
    {6}let sk_h: privkey = uc_privkey(s) in
    {7}let crt: certificate = valid_cert(a,pk(sk_h)) in
    {8}insert long_term_keys(a,sk_h,pk(sk_h),crt,lgt_id);
    {9}out(io, crt)
) | (
    {10}!
    {11}in(io, (c_dom: domain,s_dom: domain));
    {12}let h_alg: hash_alg = id_hash(StrongHash,1) in
    {13}new psk_id: idProc;
    {14}event Same(c_dom);
    {15}event Same(s_dom);
    {16}new s_1: seed;
    {17}let psk: preSharedKey = uc_psk(s_1) in
    {18}let id: identityPsk = mk_idpsk(s_dom,h_alg,psk) in
    {19}insert pre_shared_keys(c_dom,s_dom,h_alg,id,psk,psk_id,true)
) | (
    {20}!
    {21}in(io, s_dom_1: domain);
    {22}let ech_h: hash_alg = id_hash(StrongHash,2) in
    {23}let ech_a: aead_alg = id_aead(StrongAE,2) in
    {24}let ech_g: group = id_g(StrongDH,2) in
    {25}event Same(s_dom_1);
    {26}new id_1: configId;
    {27}new s_2[]: seed;
    {28}let gx: element = dh_pub(ech_g,dh_k(s_2)) in
    {29}let (skR: bitstring,pkR: element) = (dh_k(s_2),gx) in
    {30}let config: echConfig = ech_config(id_1,ech_g,pkR,s_dom_1,ech_h,ech_a) in
    {31}insert ech_configurations(config,skR);
    {32}out(io, config)
) | (
    {33}!
    {34}in(io, a_1: domain);
    {35}new idP: idProc;
    {36}new sk_d: privkey;
    {37}event CompromisedLtkForEquiv(pk(sk_d));
    {38}event Same(a_1);
    {39}let crt_1: certificate = valid_cert(a_1,pk(sk_d)) in
    {40}insert long_term_keys(a_1,sk_d,pk(sk_d),crt_1,idP);
    {41}event CompromisedLtk(pk(sk_d));
    {42}out(io, (sk_d,crt_1))
) | (
    {43}!
    {44}in(io, (c_dom_1: domain,s_dom_2: domain));
    {45}let h_alg_1: hash_alg = id_hash(StrongHash,1) in
    {46}new idP_1: idProc;
    {47}event Same(c_dom_1);
    {48}event Same(s_dom_2);
    {49}new psk_d: preSharedKey;
    {50}let id_2: identityPsk = mk_idpsk(s_dom_2,h_alg_1,psk_d) in
    {51}insert pre_shared_keys(c_dom_1,s_dom_2,h_alg_1,id_2,psk_d,idP_1,false);
    {52}event CompromisedPsk(psk_d);
    {53}out(io, psk_d)
) | (
    {54}!
    {55}in(io, s_dom_3: domain);
    {56}let ech_h_1: hash_alg = id_hash(StrongHash,2) in
    {57}let ech_a_1: aead_alg = id_aead(StrongAE,2) in
    {58}let ech_g_1: group = id_g(StrongDH,2) in
    {59}event Same(s_dom_3);
    {60}new id_3: configId;
    {61}new skR_d: bitstring;
    {62}let pkR_d: element = dh_pub(ech_g_1,skR_d) in
    {63}let config_1: echConfig = ech_config(id_3,ech_g_1,pkR_d,s_dom_3,ech_h_1,ech_a_1) in
    {64}event CompromisedEchKeyForEquiv(config_1);
    {65}insert ech_configurations(config_1,skR_d);
    {66}out(io, config_1);
    {67}event CompromisedEchKey(config_1);
    {68}out(io, skR_d)
) | (
    {69}!
    {70}in(ch_server_CFIN, (id_server: idProc,ArgsServerCFIN(cr: bytes32,sr: bytes32,h_alg_2: hash_alg,a_alg: aead_alg,s_dom_4: domain,s_pkey: pubkey,c_pkey: pubkey,psk_1: preSharedKey,master_secret: bitstring,chk: aead_key,c_seq: nat,cfin: mac_key,cur_log: bitstring)));
    {71}new st[]: stamp;
    {72}event PreciseIdProcess(ch_server_CFIN,id_server,st);
    {73}event Server_Rand_client(id_server,cr);
    {74}event Server_Rand_server(id_server,sr);
    {75}event Server_PSKChoosen(id_server,psk_1);
    {76}event Server_chk(id_server,chk);
    {77}event Server_cfin(id_server,cfin);
    {78}event Server_Cert_server(id_server,s_pkey);
    {79}event Server_Cert_client(id_server,c_pkey);
    {80}new st1[]: stamp;
    {81}event PreciseMess(ch_server_CFIN,id_server,st1,(chk,cfin,master_secret));
    {82}in(io, enc_fin: bitstring);
    {83}let fin_msg: msg = aead_dec(a_alg,chk,c_seq,zero,enc_fin) in
    {84}let FIN(hash_msg: bitstring) = fin_msg in
    {85}if (hash_msg = hmac(h_alg_2,cfin,cur_log)) then
    {86}let l: label = tls13_client_application_traffic_secret in
    {87}let h: bitstring = catch-fail(hash(h_alg_2,cur_log)) in
    {88}let v: bool = not-caught-fail(h) in
    {89}let x: bitstring = (if v then (l,h) else caught-fail) in
    {90}let client_ats: bitstring = catch-fail((if v then hmac(h_alg_2,master_secret,x) else fail-any)) in
    {91}let v_1: bool = not-caught-fail(client_ats) in
    {92}let l_1: label = (if v_1 then tls13_server_application_traffic_secret else caught-fail) in
    {93}let h_1: bitstring = (if v_1 then catch-fail(hash(h_alg_2,cur_log)) else caught-fail) in
    {94}let v_2: bool = not-caught-fail(h_1) in
    {95}let x_1: bitstring = (if v_2 then (l_1,h_1) else caught-fail) in
    {96}let server_ats: bitstring = (if v_1 then catch-fail((if v_2 then hmac(h_alg_2,master_secret,x_1) else fail-any)) else caught-fail) in
    {97}let v_3: bool = not-caught-fail(server_ats) in
    {98}let l_2: label = (if v_3 then tls13_exporter_master_secret else caught-fail) in
    {99}let h_2: bitstring = (if v_3 then catch-fail(hash(h_alg_2,cur_log)) else caught-fail) in
    {100}let v_4: bool = not-caught-fail(h_2) in
    {101}let x_2: bitstring = (if v_4 then (l_2,h_2) else caught-fail) in
    {102}let ems: bitstring = (if v_3 then catch-fail((if v_4 then hmac(h_alg_2,master_secret,x_2) else fail-any)) else caught-fail) in
    {103}let v_5: bool = not-caught-fail(ems) in
    {104}let l_3: label = (if v_5 then tls13_key else caught-fail) in
    {105}let h_3: bitstring = (if v_5 then zero else caught-fail) in
    {106}let x_3: bitstring = (if v_5 then (l_3,h_3) else caught-fail) in
    {107}let client_wkad: bitstring = (if v_5 then catch-fail(hmac(h_alg_2,client_ats,x_3)) else caught-fail) in
    {108}let v_6: bool = not-caught-fail(client_wkad) in
    {109}let l_4: label = (if v_6 then tls13_key else caught-fail) in
    {110}let h_4: bitstring = (if v_6 then zero else caught-fail) in
    {111}let x_4: bitstring = (if v_6 then (l_4,h_4) else caught-fail) in
    {112}let server_wkad: bitstring = (if v_6 then catch-fail(hmac(h_alg_2,server_ats,x_4)) else caught-fail) in
    {113}let v_7: bool = not-caught-fail(server_wkad) in
    {114}let l_5: label = (if v_7 then tls13_finished else caught-fail) in
    {115}let h_5: bitstring = (if v_7 then zero else caught-fail) in
    {116}let x_5: bitstring = (if v_7 then (l_5,h_5) else caught-fail) in
    {117}let client_fkad: bitstring = (if v_7 then catch-fail(hmac(h_alg_2,client_ats,x_5)) else caught-fail) in
    {118}let v_8: bool = not-caught-fail(client_fkad) in
    {119}let (cak: aead_key,sak: aead_key,cfkad: mac_key,ems_1: bitstring) = (if v_1 then (if v_3 then (if v_5 then (if v_6 then (if v_7 then (if v_8 then (client_wkad,server_wkad,client_fkad,ems) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {120}let cur_log_CFIN: bitstring = (cur_log,fin_msg) in
    {121}let l_6: label = tls13_resumption_master_secret in
    {122}let h_6: bitstring = catch-fail(hash(h_alg_2,cur_log_CFIN)) in
    {123}let v_9: bool = not-caught-fail(h_6) in
    {124}let x_6: bitstring = (if v_9 then (l_6,h_6) else caught-fail) in
    {125}let rms: bitstring = (if v_9 then hmac(h_alg_2,master_secret,x_6) else fail-any) in
    {126}event Server_cak(id_server,cak);
    {127}event Server_sak(id_server,sak);
    {128}event Server_cfkad(id_server,cfkad);
    {129}event Server_rms(id_server,rms);
    {130}event ServerFinished(id_server,cr,sr,psk_1,s_pkey,c_pkey,cak,sak,ems_1,rms);
    (
        0
    ) | (
        0
    ) | (
        {131}!
        {132}in(io, (seq_srv: nat,seq_client: nat));
        {133}if (is_nat(seq_srv) && is_nat(seq_client)) then
        {134}new req_rand: bitstring;
        {135}event ServerRequestPH(id_server,cr,sr,psk_1,s_pkey,c_pkey,req_rand);
        {136}let crtr_msg: msg = CRTR(req_rand) in
        {137}let enc_crt: bitstring = aead_enc(a_alg,sak,seq_srv,zero,crtr_msg) in
        {138}new st_1[]: stamp;
        {139}event ServerSequenceServerDataWriteKey(id_server,st_1,seq_srv);
        {140}event ServerSends(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_srv,zero,crtr_msg);
        {141}out(io, enc_crt);
        {142}let cur_log_CRTR: bitstring = (cur_log_CFIN,crtr_msg) in
        {143}in(io, enc_cert_msg: bitstring);
        {144}let cert_msg: msg = aead_dec(a_alg,cak,seq_client,zero,enc_cert_msg) in
        {145}new st1_1[]: stamp;
        {146}event ServerSequenceClientDataWriteKey(id_server,st1_1,seq_client);
        {147}event ServerReceives(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_client,zero,cert_msg);
        {148}let CRT(=req_rand,crt_2: certificate) = cert_msg in
        {149}let cur_log_CRT: bitstring = (cur_log_CRTR,cert_msg) in
        {150}in(io, enc_cert_verif_msg: bitstring);
        {151}let cert_verify_msg: msg = aead_dec(a_alg,cak,seq_client + 1,zero,enc_cert_verif_msg) in
        {152}new st2[]: stamp;
        {153}event ServerSequenceClientDataWriteKey(id_server,st2,seq_client + 1);
        {154}event ServerReceives(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_client + 1,zero,cert_verify_msg);
        {155}let CV(signed_log: bitstring) = cert_verify_msg in
        {156}if (verify(get_pkey(crt_2),hash(h_alg_2,cur_log_CRT),signed_log) && verify_cert(crt_2)) then
        {157}let c_pkey': pubkey = get_pkey(crt_2) in
        {158}let cur_log_CV: bitstring = (cur_log_CRT,cert_verify_msg) in
        {159}in(io, enc_fin_1: bitstring);
        {160}let fin_msg_1: msg = aead_dec(a_alg,cak,seq_client + 2,zero,enc_fin_1) in
        {161}new st3[]: stamp;
        {162}event ServerSequenceClientDataWriteKey(id_server,st3,seq_client + 2);
        {163}event ServerReceives(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_client + 2,zero,fin_msg_1);
        {164}let FIN(hash_msg_1: bitstring) = fin_msg_1 in
        {165}if (hash_msg_1 = hmac(h_alg_2,cfkad,cur_log_CV)) then
            {166}event ServerFinishedPH(id_server,cr,sr,psk_1,s_pkey,c_pkey,req_rand,c_pkey')
        else
            {167}out(io, handshake_failure)
    )
) | (
    {168}!
    {169}in(ch_server_FIN, (id_server_1: idProc,ArgsServerFIN(cr_1: bytes32,sr_1: bytes32,h_alg_3: hash_alg,a_alg_1: aead_alg,s_dom_5: domain,s_pkey_1: pubkey,req_cert: bool,psk_2: preSharedKey,master_secret_1: bitstring,chk_1: aead_key,c_seq_1: nat,shk: aead_key,s_seq: nat,cfin_1: mac_key,sfin: mac_key,cur_log_1: bitstring)));
    {170}new st_2[]: stamp;
    {171}event PreciseIdProcess(ch_server_FIN,id_server_1,st_2);
    {172}event Server_Rand_client(id_server_1,cr_1);
    {173}event Server_Rand_server(id_server_1,sr_1);
    {174}event Server_PSKChoosen(id_server_1,psk_2);
    {175}event Server_chk(id_server_1,chk_1);
    {176}event Server_shk(id_server_1,shk);
    {177}event Server_cfin(id_server_1,cfin_1);
    {178}event Server_sfin(id_server_1,sfin);
    {179}event Server_Cert_server(id_server_1,s_pkey_1);
    {180}new st1_2[]: stamp;
    {181}event PreciseMess(ch_server_FIN,id_server_1,st1_2,(chk_1,shk,master_secret_1));
    {182}let hash_msg_2: bitstring = hmac(h_alg_3,sfin,cur_log_1) in
    {183}let finished_msg: msg = FIN(hash_msg_2) in
    {184}let enc_finished: bitstring = aead_enc(a_alg_1,shk,s_seq,zero,finished_msg) in
    {185}event PreServerFinished(id_server_1,cr_1,sr_1,psk_2,s_pkey_1);
    {186}out(io, enc_finished);
    {187}let cur_log_FIN: bitstring = (cur_log_1,finished_msg) in
    {188}if (req_cert && (psk_2 = NoPsk)) then
    (
        {189}in(io, enc_cert_msg_1: bitstring);
        {190}let cert_msg_1: msg = aead_dec(a_alg_1,chk_1,c_seq_1,zero,enc_cert_msg_1) in
        {191}let CRT(=zero,crt_3: certificate) = cert_msg_1 in
        {192}let cur_log_CRT_1: bitstring = (cur_log_FIN,cert_msg_1) in
        {193}in(io, enc_cert_verif_msg_1: bitstring);
        {194}let cert_verify_msg_1: msg = aead_dec(a_alg_1,chk_1,c_seq_1 + 1,zero,enc_cert_verif_msg_1) in
        {195}let CV(signed_log_1: bitstring) = cert_verify_msg_1 in
        {196}if (verify(get_pkey(crt_3),hash(h_alg_3,cur_log_CRT_1),signed_log_1) && verify_cert(crt_3)) then
        {197}let c_pkey_1: pubkey = get_pkey(crt_3) in
        {198}let cur_log_CV_1: bitstring = (cur_log_CRT_1,cert_verify_msg_1) in
        {199}event Server_Cert_client(id_server_1,c_pkey_1);
        {200}out(ch_server_CFIN, (id_server_1,ArgsServerCFIN(cr_1,sr_1,h_alg_3,a_alg_1,s_dom_5,s_pkey_1,c_pkey_1,psk_2,master_secret_1,chk_1,c_seq_1 + 2,cfin_1,cur_log_CV_1)))
    )
    else
        {201}event Server_Cert_client(id_server_1,NoPubKey);
        {202}out(ch_server_CFIN, (id_server_1,ArgsServerCFIN(cr_1,sr_1,h_alg_3,a_alg_1,s_dom_5,s_pkey_1,NoPubKey,psk_2,master_secret_1,chk_1,c_seq_1,cfin_1,cur_log_FIN)))
) | (
    {203}!
    {204}in(ch_server_CRT, (id_server_2: idProc,ArgsServerCRT(cr_2: bytes32,sr_2: bytes32,h_alg_4: hash_alg,a_alg_2: aead_alg,s_dom_6: domain,req_cert_1: bool,master_secret_2: bitstring,chk_2: aead_key,c_seq_2: nat,shk_1: aead_key,s_seq_1: nat,cfin_2: mac_key,sfin_1: mac_key,cur_log_2: bitstring)));
    {205}new st_3[]: stamp;
    {206}event PreciseIdProcess(ch_server_CRT,id_server_2,st_3);
    {207}event Server_Rand_client(id_server_2,cr_2);
    {208}event Server_Rand_server(id_server_2,sr_2);
    {209}event Server_PSKChoosen(id_server_2,NoPsk);
    {210}event Server_chk(id_server_2,chk_2);
    {211}event Server_shk(id_server_2,shk_1);
    {212}event Server_cfin(id_server_2,cfin_2);
    {213}event Server_sfin(id_server_2,sfin_1);
    {214}new st1_3[]: stamp;
    {215}event PreciseMess(ch_server_CRT,id_server_2,st1_3,(master_secret_2,chk_2,shk_1));
    {233}get long_term_keys(s_dom': domain,sk: privkey,s_pkey_2: pubkey,crt_4: certificate,idP_2: idProc) in
    {216}let @3_x: bitstring = (s_dom',sk,s_pkey_2,crt_4,idP_2) in
    {217}new @3_st[]: stamp;
    {218}event PreciseInput(@3_st,@3_x);
    {219}let () = () in
    {220}event Selected_ltk(s_dom_6,s_dom',idP_2);
    {221}let (sk_1: privkey,s_pkey_3: pubkey,crt_5: certificate) = (sk,s_pkey_2,crt_4) in
    {222}event Server_Cert_server(id_server_2,s_pkey_3);
    {223}let certificate_msg: msg = CRT(zero,crt_5) in
    {224}let encrypted_certificate_msg: bitstring = aead_enc(a_alg_2,shk_1,s_seq_1,zero,certificate_msg) in
    {225}out(io, encrypted_certificate_msg);
    {226}let cur_log_CRT_2: bitstring = (cur_log_2,certificate_msg) in
    {227}let signed_log_2: bitstring = sign(sk_1,hash(h_alg_4,cur_log_CRT_2)) in
    {228}let certificate_verify_msg: msg = CV(signed_log_2) in
    {229}let encrypted_certificate_verify_msg: bitstring = aead_enc(a_alg_2,shk_1,s_seq_1 + 1,zero,certificate_verify_msg) in
    {230}out(io, encrypted_certificate_verify_msg);
    {231}let cur_log_CV_2: bitstring = (cur_log_CRT_2,certificate_verify_msg) in
    {232}out(ch_server_FIN, (id_server_2,ArgsServerFIN(cr_2,sr_2,h_alg_4,a_alg_2,s_dom_6,s_pkey_3,req_cert_1,NoPsk,master_secret_2,chk_2,c_seq_2,shk_1,s_seq_1 + 2,cfin_2,sfin_1,cur_log_CV_2)))
) | (
    {234}!
    {235}in(ch_server_SH, (id_server_3: idProc,ArgsServerSH(tls_g: group,tls_h: hash_alg,tls_a: aead_alg,s_dom_7: domain,req_cert_2: bool,is_backend: bool,use_psk: bool,no_HRR: bool,ee_msg: msg,client_hello: msg,cur_log_3: bitstring)));
    {236}new st_4[]: stamp;
    {237}event PreciseMess(ch_server_SH,id_server_3,st_4,(use_psk,client_hello));
    {238}let CH(cr_3: bytes32,offer: params) = client_hello in
    {239}event Server_Rand_client(id_server_3,cr_3);
    {240}let nego(=TLS13,=tls_h,=tls_a,client_kex_ext(DHE_kex(=tls_g,gx_1: element)),sni_ext: sniExt,ech_ext: echExt,extra_ext: extraExt,psk_ext: preSharedKeyExt) = offer in
    (
        {241}if (sni_ext = SNI(s_dom_7)) then
        (
            {242}event Server_DH_client(id_server_3,gx_1);
            {243}let v_10: msg = client_hello in
            {244}let v_11: bool = (((TLS13 =nf 1-proj-nego(2-proj-CH(v_10))) && success?(1-proj-nego(2-proj-CH(v_10)))) && success?(1-proj-CH(v_10))) in
            {245}let psk_ext_1: preSharedKeyExt = (if v_11 then 8-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {246}let extra_ext_1: extraExt = (if v_11 then 7-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {247}let ech_ext_1: echExt = (if v_11 then 6-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {248}let sni_ext_1: sniExt = (if v_11 then 5-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {249}let kex_ext: keyShareExt = (if v_11 then 4-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {250}let a_alg_3: aead_alg = (if v_11 then 3-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {251}let h_alg_5: hash_alg = (if v_11 then 2-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {252}let cr_4: bytes32 = (if v_11 then 1-proj-CH(v_10) else caught-fail) in
            {253}let v_12: bitstring = (if v_11 then catch-fail((use_psk,psk_ext_1)) else caught-fail) in
            {254}let v_13: bool = (not-caught-fail(v_12) && (((true =nf 1-proj-2-tuple(v_12)) && success?(1-proj-client_psk_ext(2-proj-2-tuple(v_12)))) && success?(1-proj-2-tuple(v_12)))) in
            {255}let binders: bitstring = (if v_13 then 2-proj-client_psk_ext(2-proj-2-tuple(v_12)) else caught-fail) in
            {256}let id_4: identityPsk = (if v_13 then 1-proj-client_psk_ext(2-proj-2-tuple(v_12)) else caught-fail) in
            {257}let v_14: bitstring = (if v_13 then catch-fail((get_server_psk(id_4),get_hash_psk(id_4))) else caught-fail) in
            {258}let v_15: bool = (not-caught-fail(v_14) && (((s_dom_7 =nf 1-proj-2-tuple(v_14)) && (h_alg_5 =nf 2-proj-2-tuple(v_14))) && success?(1-proj-2-tuple(v_14)))) in
            {259}let psk_3: preSharedKey = (if v_15 then catch-fail(get_psk(id_4)) else caught-fail) in
            {260}let v_16: bool = not-caught-fail(psk_3) in
            {261}let s_3: bitstring = (if v_16 then zero else caught-fail) in
            {262}let k: bitstring = (if v_16 then catch-fail(psk2b(psk_3)) else caught-fail) in
            {263}let v_17: bool = not-caught-fail(k) in
            {264}let early_secret: bitstring = (if v_16 then catch-fail((if v_17 then hmac(h_alg_5,s_3,k) else fail-any)) else caught-fail) in
            {265}let v_18: bool = not-caught-fail(early_secret) in
            {266}let l_7: label = (if v_18 then tls13_ext_res_binder else caught-fail) in
            {267}let m: bitstring = (if v_18 then zero else caught-fail) in
            {268}let h_7: bitstring = (if v_18 then catch-fail(hash(h_alg_5,m)) else caught-fail) in
            {269}let v_19: bool = not-caught-fail(h_7) in
            {270}let x_7: bitstring = (if v_19 then (l_7,h_7) else caught-fail) in
            {271}let binder_key: bitstring = (if v_18 then catch-fail((if v_19 then hmac(h_alg_5,early_secret,x_7) else fail-any)) else caught-fail) in
            {272}let v_20: bool = not-caught-fail(binder_key) in
            {273}let v_21: bitstring = (if v_16 then catch-fail((if v_18 then (if v_20 then (early_secret,binder_key) else fail-any) else fail-any)) else caught-fail) in
            {274}let v_22: bool = (not-caught-fail(v_21) && success?(1-proj-2-tuple(v_21))) in
            {275}let kb: mac_key = (if v_22 then 2-proj-2-tuple(v_21) else caught-fail) in
            {276}let early_secret_1: bitstring = (if v_22 then 1-proj-2-tuple(v_21) else caught-fail) in
            {277}let offer_1: params = (if v_22 then nego(TLS13,h_alg_5,a_alg_3,kex_ext,sni_ext_1,ech_ext_1,extra_ext_1,trunc_client_psk_ext(id_4)) else caught-fail) in
            {278}let cur_log': bitstring = (if v_22 then (cur_log_3,CH(cr_4,offer_1)) else caught-fail) in
            {279}let v_23: bool = (v_13 && not(v_15)) in
            {280}let psk_4: preSharedKey = (if v_23 then NoPsk else caught-fail) in
            {281}let s_4: bitstring = (if v_23 then zero else caught-fail) in
            {282}let k_1: bitstring = (if v_23 then catch-fail(psk2b(psk_4)) else caught-fail) in
            {283}let v_24: bool = not-caught-fail(k_1) in
            {284}let early_secret_2: bitstring = (if v_23 then catch-fail((if v_24 then hmac(h_alg_5,s_4,k_1) else fail-any)) else caught-fail) in
            {285}let v_25: bool = not-caught-fail(early_secret_2) in
            {286}let l_8: label = (if v_25 then tls13_ext_res_binder else caught-fail) in
            {287}let m_1: bitstring = (if v_25 then zero else caught-fail) in
            {288}let h_8: bitstring = (if v_25 then catch-fail(hash(h_alg_5,m_1)) else caught-fail) in
            {289}let v_26: bool = not-caught-fail(h_8) in
            {290}let x_8: bitstring = (if v_26 then (l_8,h_8) else caught-fail) in
            {291}let binder_key_1: bitstring = (if v_25 then catch-fail((if v_26 then hmac(h_alg_5,early_secret_2,x_8) else fail-any)) else caught-fail) in
            {292}let v_27: bool = not-caught-fail(binder_key_1) in
            {293}let v_28: bitstring = (if v_23 then catch-fail((if v_25 then (if v_27 then (early_secret_2,binder_key_1) else fail-any) else fail-any)) else caught-fail) in
            {294}let v_29: bool = (not-caught-fail(v_28) && success?(1-proj-2-tuple(v_28))) in
            {295}let kb_1: mac_key = (if v_29 then 2-proj-2-tuple(v_28) else caught-fail) in
            {296}let es: bitstring = (if v_29 then 1-proj-2-tuple(v_28) else caught-fail) in
            {297}let v_30: bool = (v_11 && not(v_13)) in
            {298}let psk_5: preSharedKey = (if v_30 then NoPsk else caught-fail) in
            {299}let s_5: bitstring = (if v_30 then zero else caught-fail) in
            {300}let k_2: bitstring = (if v_30 then catch-fail(psk2b(psk_5)) else caught-fail) in
            {301}let v_31: bool = not-caught-fail(k_2) in
            {302}let early_secret_3: bitstring = (if v_30 then catch-fail((if v_31 then hmac(h_alg_5,s_5,k_2) else fail-any)) else caught-fail) in
            {303}let v_32: bool = not-caught-fail(early_secret_3) in
            {304}let l_9: label = (if v_32 then tls13_ext_res_binder else caught-fail) in
            {305}let m_2: bitstring = (if v_32 then zero else caught-fail) in
            {306}let h_9: bitstring = (if v_32 then catch-fail(hash(h_alg_5,m_2)) else caught-fail) in
            {307}let v_33: bool = not-caught-fail(h_9) in
            {308}let x_9: bitstring = (if v_33 then (l_9,h_9) else caught-fail) in
            {309}let binder_key_2: bitstring = (if v_32 then catch-fail((if v_33 then hmac(h_alg_5,early_secret_3,x_9) else fail-any)) else caught-fail) in
            {310}let v_34: bool = not-caught-fail(binder_key_2) in
            {311}let v_35: bitstring = (if v_30 then catch-fail((if v_32 then (if v_34 then (early_secret_3,binder_key_2) else fail-any) else fail-any)) else caught-fail) in
            {312}let v_36: bool = (not-caught-fail(v_35) && success?(1-proj-2-tuple(v_35))) in
            {313}let kb_2: mac_key = (if v_36 then 2-proj-2-tuple(v_35) else caught-fail) in
            {314}let es_1: bitstring = (if v_36 then 1-proj-2-tuple(v_35) else caught-fail) in
            {315}let (early_secret_4: bitstring,s_psk_ext: preSharedKeyExt,psk_6: preSharedKey) = (if v_11 then (if v_13 then (if v_15 then (if v_16 then (if v_22 then (if (binders = hmac(h_alg_5,kb,cur_log')) then (early_secret_1,server_psk_ext(1),psk_3) else fail-any) else fail-any) else fail-any) else (if v_29 then (es,empty_psk_ext,NoPsk) else fail-any)) else (if v_36 then (es_1,empty_psk_ext,NoPsk) else fail-any)) else fail-any) in
            {316}event Server_PSKChoosen(id_server_3,psk_6);
            {317}let cur_log_CH: bitstring = (cur_log_3,client_hello) in
            (
                {318}if (false && (no_HRR && (psk_6 ≠ NoPsk))) then
                {319}!
                {320}in(io, (i: nat,ad: bitstring,enc_early_data: bitstring));
                {321}let l_10: label = tls13_client_early_traffic_secret in
                {322}let h_10: bitstring = catch-fail(hash(tls_h,cur_log_CH)) in
                {323}let v_37: bool = not-caught-fail(h_10) in
                {324}let x_10: bitstring = (if v_37 then (l_10,h_10) else caught-fail) in
                {325}let atsc0: bitstring = catch-fail((if v_37 then hmac(tls_h,early_secret_4,x_10) else fail-any)) in
                {326}let v_38: bool = not-caught-fail(atsc0) in
                {327}let l_11: label = (if v_38 then tls13_key else caught-fail) in
                {328}let h_11: bitstring = (if v_38 then zero else caught-fail) in
                {329}let x_11: bitstring = (if v_38 then (l_11,h_11) else caught-fail) in
                {330}let kc0: bitstring = (if v_38 then catch-fail(hmac(tls_h,atsc0,x_11)) else caught-fail) in
                {331}let v_39: bool = not-caught-fail(kc0) in
                {332}let l_12: label = (if v_39 then tls13_early_exporter_master_secret else caught-fail) in
                {333}let h_12: bitstring = (if v_39 then catch-fail(hash(tls_h,cur_log_CH)) else caught-fail) in
                {334}let v_40: bool = not-caught-fail(h_12) in
                {335}let x_12: bitstring = (if v_40 then (l_12,h_12) else caught-fail) in
                {336}let ems0: bitstring = (if v_39 then catch-fail((if v_40 then hmac(tls_h,early_secret_4,x_12) else fail-any)) else caught-fail) in
                {337}let v_41: bool = not-caught-fail(ems0) in
                {338}let (wkc0: aead_key,ems0_1: bitstring) = (if v_38 then (if v_39 then (if v_41 then (kc0,ems0) else fail-any) else fail-any) else fail-any) in
                {339}let early_data: bitstring = aead_dec(tls_a,wkc0,i,ad,enc_early_data) in
                    {340}new st1_4[]: stamp;
                    {341}event ServerSequenceClient0RTTDataWriteKey(id_server_3,st1_4,i);
                    {342}event ServerReceives0(id_server_3,s_dom_7,cr_3,psk_6,i,ad,early_data)
                else
                    {343}out(io, bad_record_mac)
            ) | (
                {344}new s_6[]: seed;
                {345}let (gxy: element,gy: element) = (dh_xy(s_6,client_hello),dh_encap_fun(tls_g,gx_1,dh_xy(s_6,client_hello))) in
                {346}event Server_DH_server(id_server_3,gy);
                {347}event Server_DH_gxy(id_server_3,gxy);
                {348}let l_13: label = tls13_derived in
                {349}let m_3: bitstring = catch-fail(hash(tls_h,zero)) in
                {350}let v_42: bool = not-caught-fail(m_3) in
                {351}let h_13: bitstring = (if v_42 then catch-fail(hash(tls_h,m_3)) else caught-fail) in
                {352}let v_43: bool = not-caught-fail(h_13) in
                {353}let x_13: bitstring = (if v_43 then (l_13,h_13) else caught-fail) in
                {354}let extra: bitstring = catch-fail((if v_42 then (if v_43 then hmac(tls_h,early_secret_4,x_13) else fail-any) else fail-any)) in
                {355}let v_44: bool = not-caught-fail(extra) in
                {356}let handshake_secret: bitstring = (if v_44 then hmac(tls_h,extra,gxy) else fail-any) in
                {357}let s_offer: params = nego(TLS13,tls_h,tls_a,server_kex_ext(DHE_kex(tls_g,gy)),empty_sni_ext,empty_ech_ext,empty_extra_ext,s_psk_ext) in
                {358}let v_45: bool = is_backend in
                {359}new sr24[]: bytes24;
                {360}let sr24_1: bytes24 = (if v_45 then sr24 else caught-fail) in
                {361}let sh_modified: msg = (if v_45 then SH(B32(sr24_1,zero8),s_offer) else caught-fail) in
                {362}let cur_log_sh: bitstring = (if v_45 then (cur_log_CH,sh_modified) else caught-fail) in
                {363}let transcript_ech_conf: bitstring = (if v_45 then catch-fail(hash(tls_h,cur_log_sh)) else caught-fail) in
                {364}let v_46: bool = not-caught-fail(transcript_ech_conf) in
                {365}let s_7: bitstring = (if v_46 then zero else caught-fail) in
                {366}let k_3: bitstring = (if v_46 then catch-fail(b32_2_b(get_random(client_hello))) else caught-fail) in
                {367}let v_47: bool = not-caught-fail(k_3) in
                {368}let k_4: bitstring = (if v_46 then catch-fail((if v_47 then hmac(tls_h,s_7,k_3) else fail-any)) else caught-fail) in
                {369}let v_48: bool = not-caught-fail(k_4) in
                {370}let l_14: label = (if v_48 then ech_accept_confirmation else caught-fail) in
                {371}let x_14: bitstring = (if v_48 then (l_14,cur_log_sh) else caught-fail) in
                {372}let sr8: bytes8 = (if v_46 then catch-fail(crop_into_bytes8((if v_48 then hmac(tls_h,k_4,x_14) else fail-any))) else caught-fail) in
                {373}let v_49: bool = not-caught-fail(sr8) in
                {374}new rand24[]: bytes24;
                {375}new rand8[]: bytes8;
                {376}let sr_3: bytes32 = (if v_45 then (if v_46 then (if v_49 then B32(sr24_1,sr8) else fail-any) else fail-any) else B32(rand24,rand8)) in
                {377}let server_hello: msg = SH(sr_3,s_offer) in
                {378}event Server_Rand_server(id_server_3,sr_3);
                {379}event ServerChoosesGroup(id_server_3,tls_g);
                {380}event ServerChoosesHash(cr_3,sr_3,tls_h);
                {381}event ServerChoosesAead(cr_3,sr_3,tls_a);
                {382}out(io, server_hello);
                {383}let cur_log_SH: bitstring = (cur_log_CH,server_hello) in
                {384}let l_15: label = tls13_derived in
                {385}let m_4: bitstring = catch-fail(hash(tls_h,zero)) in
                {386}let v_50: bool = not-caught-fail(m_4) in
                {387}let h_14: bitstring = (if v_50 then catch-fail(hash(tls_h,m_4)) else caught-fail) in
                {388}let v_51: bool = not-caught-fail(h_14) in
                {389}let x_15: bitstring = (if v_51 then (l_15,h_14) else caught-fail) in
                {390}let extra_1: bitstring = catch-fail((if v_50 then (if v_51 then hmac(tls_h,handshake_secret,x_15) else fail-any) else fail-any)) in
                {391}let v_52: bool = not-caught-fail(extra_1) in
                {392}let k_5: bitstring = (if v_52 then zero else caught-fail) in
                {393}let master_secret_3: bitstring = (if v_52 then catch-fail(hmac(tls_h,handshake_secret,k_5)) else caught-fail) in
                {394}let v_53: bool = not-caught-fail(master_secret_3) in
                {395}let l_16: label = (if v_53 then tls13_client_handshake_traffic_secret else caught-fail) in
                {396}let h_15: bitstring = (if v_53 then catch-fail(hash(tls_h,cur_log_SH)) else caught-fail) in
                {397}let v_54: bool = not-caught-fail(h_15) in
                {398}let x_16: bitstring = (if v_54 then (l_16,h_15) else caught-fail) in
                {399}let client_hts: bitstring = (if v_53 then catch-fail((if v_54 then hmac(tls_h,handshake_secret,x_16) else fail-any)) else caught-fail) in
                {400}let v_55: bool = not-caught-fail(client_hts) in
                {401}let l_17: label = (if v_55 then tls13_server_handshake_traffic_secret else caught-fail) in
                {402}let h_16: bitstring = (if v_55 then catch-fail(hash(tls_h,cur_log_SH)) else caught-fail) in
                {403}let v_56: bool = not-caught-fail(h_16) in
                {404}let x_17: bitstring = (if v_56 then (l_17,h_16) else caught-fail) in
                {405}let server_hts: bitstring = (if v_55 then catch-fail((if v_56 then hmac(tls_h,handshake_secret,x_17) else fail-any)) else caught-fail) in
                {406}let v_57: bool = not-caught-fail(server_hts) in
                {407}let l_18: label = (if v_57 then tls13_key else caught-fail) in
                {408}let h_17: bitstring = (if v_57 then zero else caught-fail) in
                {409}let x_18: bitstring = (if v_57 then (l_18,h_17) else caught-fail) in
                {410}let client_wkh: bitstring = (if v_57 then catch-fail(hmac(tls_h,client_hts,x_18)) else caught-fail) in
                {411}let v_58: bool = not-caught-fail(client_wkh) in
                {412}let l_19: label = (if v_58 then tls13_key else caught-fail) in
                {413}let h_18: bitstring = (if v_58 then zero else caught-fail) in
                {414}let x_19: bitstring = (if v_58 then (l_19,h_18) else caught-fail) in
                {415}let server_wkh: bitstring = (if v_58 then catch-fail(hmac(tls_h,server_hts,x_19)) else caught-fail) in
                {416}let v_59: bool = not-caught-fail(server_wkh) in
                {417}let l_20: label = (if v_59 then tls13_finished else caught-fail) in
                {418}let h_19: bitstring = (if v_59 then zero else caught-fail) in
                {419}let x_20: bitstring = (if v_59 then (l_20,h_19) else caught-fail) in
                {420}let client_fk: bitstring = (if v_59 then catch-fail(hmac(tls_h,client_hts,x_20)) else caught-fail) in
                {421}let v_60: bool = not-caught-fail(client_fk) in
                {422}let l_21: label = (if v_60 then tls13_finished else caught-fail) in
                {423}let h_20: bitstring = (if v_60 then zero else caught-fail) in
                {424}let x_21: bitstring = (if v_60 then (l_21,h_20) else caught-fail) in
                {425}let server_fk: bitstring = (if v_60 then catch-fail(hmac(tls_h,server_hts,x_21)) else caught-fail) in
                {426}let v_61: bool = not-caught-fail(server_fk) in
                {427}let (master_secret_4: bitstring,chk_3: aead_key,shk_2: aead_key,cfin_3: mac_key,sfin_2: mac_key) = (if v_52 then (if v_53 then (if v_55 then (if v_57 then (if v_58 then (if v_59 then (if v_60 then (if v_61 then (master_secret_3,client_wkh,server_wkh,client_fk,server_fk) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                {428}event Server_chk(id_server_3,chk_3);
                {429}event Server_shk(id_server_3,shk_2);
                {430}event Server_cfin(id_server_3,cfin_3);
                {431}event Server_sfin(id_server_3,sfin_2);
                {432}let enc_ee: bitstring = aead_enc(tls_a,shk_2,0,zero,ee_msg) in
                {433}out(io, enc_ee);
                {434}let cur_log_EE: bitstring = (cur_log_SH,ee_msg) in
                {435}if (psk_6 = NoPsk) then
                (
                    {436}if req_cert_2 then
                    (
                        {437}let crtr_msg_1: msg = CRTR(zero) in
                        {438}let enc_crt_1: bitstring = aead_enc(tls_a,shk_2,1,zero,crtr_msg_1) in
                        {439}out(io, enc_crt_1);
                        {440}let cur_log_CRTR_1: bitstring = (cur_log_EE,crtr_msg_1) in
                        {441}out(ch_server_CRT, (id_server_3,ArgsServerCRT(cr_3,sr_3,tls_h,tls_a,s_dom_7,req_cert_2,master_secret_4,chk_3,0,shk_2,2,cfin_3,sfin_2,cur_log_CRTR_1)))
                    )
                    else
                        {442}out(ch_server_CRT, (id_server_3,ArgsServerCRT(cr_3,sr_3,tls_h,tls_a,s_dom_7,req_cert_2,master_secret_4,chk_3,0,shk_2,1,cfin_3,sfin_2,cur_log_EE)))
                )
                else
                    {443}out(ch_server_FIN, (id_server_3,ArgsServerFIN(cr_3,sr_3,tls_h,tls_a,s_dom_7,NoPubKey,false,psk_6,master_secret_4,chk_3,0,shk_2,1,cfin_3,sfin_2,cur_log_EE)))
            )
        )
        else
            {444}out(io, illegal_parameter)
    )
    else
        {445}out(io, handshake_failure)
) | (
    {446}!
    {447}in(ch_client_CFIN, (id_client: idProc,ArgsClientCFIN(cr_5: bytes32,sr_4: bytes32,h_alg_6: hash_alg,a_alg_4: aead_alg,c_dom_2: domain,s_dom_8: domain,s_pkey_4: pubkey,c_pkey_2: pubkey,psk_7: preSharedKey,safe_psk: bool,comp_psk: bool,master_secret_5: bitstring,chk_4: aead_key,seq_client_1: nat,shk_3: aead_key,seq_srv_1: nat,cfin_4: mac_key,sfin_3: mac_key,cur_log_4: bitstring)));
    {448}new st_5[]: stamp;
    {449}event PreciseIdProcess(ch_client_CFIN,id_client,st_5);
    {450}event Client_server_domain(id_client,s_dom_8);
    {451}event Client_Rand_client(id_client,cr_5);
    {452}event Client_Rand_server(id_client,sr_4);
    {453}event Client_PSKChoosen(id_client,psk_7,safe_psk);
    {454}event Client_comp_psk(id_client,comp_psk);
    {455}event Client_chk(id_client,chk_4);
    {456}event Client_shk(id_client,shk_3);
    {457}event Client_cfin(id_client,cfin_4);
    {458}event Client_sfin(id_client,sfin_3);
    {459}event Client_Cert_server(id_client,s_pkey_4);
    {460}event Client_Cert_client(id_client,c_pkey_2);
    {461}new st1_5[]: stamp;
    {462}let args: bitstring = (c_dom_2,s_dom_8,psk_7,s_pkey_4,master_secret_5,safe_psk,comp_psk,cur_log_4) in
    {463}event PreciseMess(ch_client_CFIN,id_client,st1_5,args);
    {464}let l_22: label = tls13_client_application_traffic_secret in
    {465}let h_21: bitstring = catch-fail(hash(h_alg_6,cur_log_4)) in
    {466}let v_62: bool = not-caught-fail(h_21) in
    {467}let x_22: bitstring = (if v_62 then (l_22,h_21) else caught-fail) in
    {468}let client_ats_1: bitstring = catch-fail((if v_62 then hmac(h_alg_6,master_secret_5,x_22) else fail-any)) in
    {469}let v_63: bool = not-caught-fail(client_ats_1) in
    {470}let l_23: label = (if v_63 then tls13_server_application_traffic_secret else caught-fail) in
    {471}let h_22: bitstring = (if v_63 then catch-fail(hash(h_alg_6,cur_log_4)) else caught-fail) in
    {472}let v_64: bool = not-caught-fail(h_22) in
    {473}let x_23: bitstring = (if v_64 then (l_23,h_22) else caught-fail) in
    {474}let server_ats_1: bitstring = (if v_63 then catch-fail((if v_64 then hmac(h_alg_6,master_secret_5,x_23) else fail-any)) else caught-fail) in
    {475}let v_65: bool = not-caught-fail(server_ats_1) in
    {476}let l_24: label = (if v_65 then tls13_exporter_master_secret else caught-fail) in
    {477}let h_23: bitstring = (if v_65 then catch-fail(hash(h_alg_6,cur_log_4)) else caught-fail) in
    {478}let v_66: bool = not-caught-fail(h_23) in
    {479}let x_24: bitstring = (if v_66 then (l_24,h_23) else caught-fail) in
    {480}let ems_2: bitstring = (if v_65 then catch-fail((if v_66 then hmac(h_alg_6,master_secret_5,x_24) else fail-any)) else caught-fail) in
    {481}let v_67: bool = not-caught-fail(ems_2) in
    {482}let l_25: label = (if v_67 then tls13_key else caught-fail) in
    {483}let h_24: bitstring = (if v_67 then zero else caught-fail) in
    {484}let x_25: bitstring = (if v_67 then (l_25,h_24) else caught-fail) in
    {485}let client_wkad_1: bitstring = (if v_67 then catch-fail(hmac(h_alg_6,client_ats_1,x_25)) else caught-fail) in
    {486}let v_68: bool = not-caught-fail(client_wkad_1) in
    {487}let l_26: label = (if v_68 then tls13_key else caught-fail) in
    {488}let h_25: bitstring = (if v_68 then zero else caught-fail) in
    {489}let x_26: bitstring = (if v_68 then (l_26,h_25) else caught-fail) in
    {490}let server_wkad_1: bitstring = (if v_68 then catch-fail(hmac(h_alg_6,server_ats_1,x_26)) else caught-fail) in
    {491}let v_69: bool = not-caught-fail(server_wkad_1) in
    {492}let l_27: label = (if v_69 then tls13_finished else caught-fail) in
    {493}let h_26: bitstring = (if v_69 then zero else caught-fail) in
    {494}let x_27: bitstring = (if v_69 then (l_27,h_26) else caught-fail) in
    {495}let client_fkad_1: bitstring = (if v_69 then catch-fail(hmac(h_alg_6,client_ats_1,x_27)) else caught-fail) in
    {496}let v_70: bool = not-caught-fail(client_fkad_1) in
    {497}let (cak_1: aead_key,sak_1: aead_key,cfkad_1: mac_key,ems_3: bitstring) = (if v_63 then (if v_65 then (if v_67 then (if v_68 then (if v_69 then (if v_70 then (client_wkad_1,server_wkad_1,client_fkad_1,ems_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {498}event Client_cak(id_client,cak_1);
    {499}event Client_sak(id_client,sak_1);
    {500}event Client_cfkad(id_client,cfkad_1);
    {501}let client_hash_msg: bitstring = hmac(h_alg_6,cfin_4,cur_log_4) in
    {502}let client_finished_msg: msg = FIN(client_hash_msg) in
    {503}let cur_log'_1: bitstring = (cur_log_4,client_finished_msg) in
    {504}let l_28: label = tls13_resumption_master_secret in
    {505}let h_27: bitstring = catch-fail(hash(h_alg_6,cur_log'_1)) in
    {506}let v_71: bool = not-caught-fail(h_27) in
    {507}let x_28: bitstring = (if v_71 then (l_28,h_27) else caught-fail) in
    {508}let rms_1: bitstring = (if v_71 then hmac(h_alg_6,master_secret_5,x_28) else fail-any) in
    {509}event Client_rms(id_client,rms_1);
    {510}let enc_client_finished_msg: bitstring = aead_enc(a_alg_4,chk_4,seq_client_1,zero,client_finished_msg) in
    {511}event ClientFinished(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,cak_1,sak_1,ems_3,rms_1);
    {512}out(io, enc_client_finished_msg);
    (
        0
    ) | (
        0
    ) | (
        {513}!
        {514}in(io, (seq_srv_2: nat,seq_client_2: nat));
        {515}if (is_nat(seq_srv_2) && is_nat(seq_client_2)) then
        {516}in(io, enc_msg: bitstring);
        {517}let CRTR(rand_crt: bitstring) = aead_dec(a_alg_4,sak_1,seq_srv_2,zero,enc_msg) in
        {518}new st_6[]: stamp;
        {519}event ClientSequenceServerDataWriteKey(id_client,st_6,seq_srv_2);
        {520}event ClientReceives(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_srv_2,zero,CRTR(rand_crt));
        {521}let cur_log_CRTR_2: bitstring = (cur_log'_1,CRTR(rand_crt)) in
        {550}get long_term_keys(c_dom': domain,sk_2: privkey,c_pkey'_1: pubkey,crt_6: certificate,idP_3: idProc) in
        {522}let @1_x: bitstring = (c_dom',sk_2,c_pkey'_1,crt_6,idP_3) in
        {523}new @1_st[]: stamp;
        {524}event PreciseInput(@1_st,@1_x);
        {525}let () = () in
        {526}event Selected_ltk(c_dom_2,c_dom',idP_3);
        {527}let (sk_3: privkey,c_pkey'_2: pubkey,crt_7: certificate) = (sk_2,c_pkey'_1,crt_6) in
        {528}let certificate_msg_1: msg = CRT(rand_crt,crt_7) in
        {529}let encrypted_certificate_msg_1: bitstring = aead_enc(a_alg_4,cak_1,seq_client_2,zero,certificate_msg_1) in
        {530}new st1_6[]: stamp;
        {531}event ClientSequenceClientDataWriteKey(id_client,st1_6,seq_client_2);
        {532}event ClientSends(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_client_2,zero,certificate_msg_1);
        {533}out(io, encrypted_certificate_msg_1);
        {534}let cur_log_CRT_3: bitstring = (cur_log_CRTR_2,certificate_msg_1) in
        {535}let signed_log_3: bitstring = sign(sk_3,hash(h_alg_6,cur_log_CRT_3)) in
        {536}let certificate_verify_msg_1: msg = CV(signed_log_3) in
        {537}let enc_verify_msg: bitstring = aead_enc(a_alg_4,cak_1,seq_client_2 + 1,zero,certificate_verify_msg_1) in
        {538}new st2_1[]: stamp;
        {539}event ClientSequenceClientDataWriteKey(id_client,st2_1,seq_client_2 + 1);
        {540}event ClientSends(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_client_2 + 1,zero,certificate_verify_msg_1);
        {541}out(io, enc_verify_msg);
        {542}let cur_log_CV_3: bitstring = (cur_log_CRT_3,certificate_verify_msg_1) in
        {543}let hash_msg_3: bitstring = hmac(h_alg_6,cfkad_1,cur_log_CV_3) in
        {544}let enc_fin_2: bitstring = aead_enc(a_alg_4,cak_1,seq_client_2 + 2,zero,FIN(hash_msg_3)) in
        {545}new st3_1[]: stamp;
        {546}event ClientSequenceClientDataWriteKey(id_client,st3_1,seq_client_2 + 2);
        {547}event ClientSends(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_client_2 + 2,zero,FIN(hash_msg_3));
        {548}event ClientFinishedPH(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,rand_crt,c_pkey'_2);
        {549}out(io, enc_fin_2)
    )
) | (
    {551}!
    {552}in(ch_client_FIN, (id_client_1: idProc,ArgsClientFIN(cr_6: bytes32,sr_5: bytes32,h_alg_7: hash_alg,a_alg_5: aead_alg,c_dom_3: domain,s_dom_9: domain,s_pkey_5: pubkey,cert_req: bool,psk_8: preSharedKey,safe_psk_1: bool,comp_psk_1: bool,master_secret_6: bitstring,chk_5: aead_key,seq_client_3: nat,shk_4: aead_key,seq_srv_3: nat,cfin_5: mac_key,sfin_4: mac_key,cur_log_5: bitstring)));
    {553}new st_7[]: stamp;
    {554}event PreciseIdProcess(ch_client_FIN,id_client_1,st_7);
    {555}event Client_server_domain(id_client_1,s_dom_9);
    {556}event Client_Rand_client(id_client_1,cr_6);
    {557}event Client_Rand_server(id_client_1,sr_5);
    {558}event Client_PSKChoosen(id_client_1,psk_8,safe_psk_1);
    {559}event Client_comp_psk(id_client_1,comp_psk_1);
    {560}event Client_chk(id_client_1,chk_5);
    {561}event Client_shk(id_client_1,shk_4);
    {562}event Client_cfin(id_client_1,cfin_5);
    {563}event Client_sfin(id_client_1,sfin_4);
    {564}event Client_Cert_server(id_client_1,s_pkey_5);
    {565}new st1_7[]: stamp;
    {566}event PreciseMess(ch_client_FIN,id_client_1,st1_7,(master_secret_6,s_pkey_5,psk_8,safe_psk_1,comp_psk_1));
    {567}in(io, enc_finished_msg: bitstring);
    {568}let finished_msg_1: msg = aead_dec(a_alg_5,shk_4,seq_srv_3,zero,enc_finished_msg) in
    (
        {569}let FIN(hash_msg_4: bitstring) = finished_msg_1 in
        (
            {570}if (hash_msg_4 = hmac(h_alg_7,sfin_4,cur_log_5)) then
            {571}let cur_log2: bitstring = (cur_log_5,finished_msg_1) in
            {572}if cert_req then
            (
                {573}let seq_srv_4: nat = seq_srv_3 + 1 in
                {591}get long_term_keys(c_dom'_1: domain,sk_4: privkey,c_pkey_3: pubkey,crt_8: certificate,idP_4: idProc) in
                {574}let @2_x: bitstring = (c_dom'_1,sk_4,c_pkey_3,crt_8,idP_4) in
                {575}new @2_st[]: stamp;
                {576}event PreciseInput(@2_st,@2_x);
                {577}let () = () in
                {578}event Selected_ltk(c_dom_3,c_dom'_1,idP_4);
                {579}let (sk_5: privkey,c_pkey_4: pubkey,crt_9: certificate) = (sk_4,c_pkey_3,crt_8) in
                {580}event Client_Cert_client(id_client_1,c_pkey_4);
                {581}let certificate_msg_2: msg = CRT(zero,crt_9) in
                {582}let encrypted_certificate_msg_2: bitstring = aead_enc(a_alg_5,chk_5,seq_client_3,zero,certificate_msg_2) in
                {583}out(io, encrypted_certificate_msg_2);
                {584}let cur_log2_1: bitstring = (cur_log2,certificate_msg_2) in
                {585}let signed_log_4: bitstring = sign(sk_5,hash(h_alg_7,cur_log2_1)) in
                {586}let certificate_verify_msg_2: msg = CV(signed_log_4) in
                {587}let encrypted_certificate_verify_msg_1: bitstring = aead_enc(a_alg_5,chk_5,seq_client_3 + 1,zero,certificate_verify_msg_2) in
                {588}out(io, encrypted_certificate_verify_msg_1);
                {589}let cur_log3: bitstring = (cur_log2_1,certificate_verify_msg_2) in
                {590}out(ch_client_CFIN, (id_client_1,ArgsClientCFIN(cr_6,sr_5,h_alg_7,a_alg_5,c_dom_3,s_dom_9,s_pkey_5,c_pkey_4,NoPsk,false,comp_psk_1,master_secret_6,chk_5,seq_client_3 + 2,shk_4,seq_srv_4,cfin_5,sfin_4,cur_log3)))
            )
            else
                {592}event Client_Cert_client(id_client_1,NoPubKey);
                {593}out(ch_client_CFIN, (id_client_1,ArgsClientCFIN(cr_6,sr_5,h_alg_7,a_alg_5,c_dom_3,s_dom_9,s_pkey_5,NoPubKey,psk_8,safe_psk_1,comp_psk_1,master_secret_6,chk_5,seq_client_3,shk_4,seq_srv_3 + 1,cfin_5,sfin_4,cur_log2)))
        )
        else
            {594}out(io, unexpected_message)
    )
    else
        {595}out(io, bad_record_mac)
) | (
    {596}!
    {597}in(ch_client_CRT, (id_client_2: idProc,ArgsClientCRT(cr_7: bytes32,sr_6: bytes32,h_alg_8: hash_alg,a_alg_6: aead_alg,c_dom_4: domain,s_dom_10: domain,cert_req_1: bool,certificate_msg_3: msg,comp_psk_2: bool,master_secret_7: bitstring,chk_6: aead_key,seq_client_4: nat,shk_5: aead_key,seq_srv_5: nat,cfin_6: mac_key,sfin_5: mac_key,cur_log_6: bitstring)));
    {598}new st_8[]: stamp;
    {599}event PreciseIdProcess(ch_client_CRT,id_client_2,st_8);
    {600}event Client_server_domain(id_client_2,s_dom_10);
    {601}event Client_Rand_client(id_client_2,cr_7);
    {602}event Client_Rand_server(id_client_2,sr_6);
    {603}event Client_comp_psk(id_client_2,comp_psk_2);
    {604}event Client_chk(id_client_2,chk_6);
    {605}event Client_shk(id_client_2,shk_5);
    {606}event Client_cfin(id_client_2,cfin_6);
    {607}event Client_sfin(id_client_2,sfin_5);
    {608}let CRT(=zero,crt_10: certificate) = certificate_msg_3 in
    {609}let cur_log2_2: bitstring = (cur_log_6,certificate_msg_3) in
    {610}in(io, enc_crt_verif_msg: bitstring);
    {611}let certificate_verify_msg_3: msg = aead_dec(a_alg_6,shk_5,seq_srv_5,zero,enc_crt_verif_msg) in
    {612}let CV(signed_log_5: bitstring) = certificate_verify_msg_3 in
    {613}if (verify(get_pkey(crt_10),hash(h_alg_8,cur_log2_2),signed_log_5) && ((get_domain(crt_10) = s_dom_10) && verify_cert(crt_10))) then
    {614}let s_pkey_6: pubkey = get_pkey(crt_10) in
    {615}let cur_log3_1: bitstring = (cur_log2_2,certificate_verify_msg_3) in
    {616}event Client_Cert_server(id_client_2,s_pkey_6);
    {617}out(ch_client_FIN, (id_client_2,ArgsClientFIN(cr_7,sr_6,h_alg_8,a_alg_6,c_dom_4,s_dom_10,s_pkey_6,cert_req_1,NoPsk,false,comp_psk_2,master_secret_7,chk_6,seq_client_4,shk_5,seq_srv_5 + 1,cfin_6,sfin_5,cur_log3_1)))
) | (
    {618}!
    {619}in(ch_client_after_EE, (id_client_3: idProc,ArgsClientAfterEE(cr_8: bytes32,sr_7: bytes32,h_alg_9: hash_alg,a_alg_7: aead_alg,c_dom_5: domain,s_dom_11: domain,psk_9: preSharedKey,safe_psk_2: bool,comp_psk_3: bool,master_secret_8: bitstring,chk_7: aead_key,seq_client_5: nat,shk_6: aead_key,seq_srv_6: nat,cfin_7: mac_key,sfin_6: mac_key,cur_log_7: bitstring)));
    {620}new st_9[]: stamp;
    {621}event PreciseIdProcess(ch_client_after_EE,id_client_3,st_9);
    {622}event Client_server_domain(id_client_3,s_dom_11);
    {623}event Client_Rand_client(id_client_3,cr_8);
    {624}event Client_Rand_server(id_client_3,sr_7);
    {625}event Client_PSKChoosen(id_client_3,psk_9,safe_psk_2);
    {626}event Client_comp_psk(id_client_3,comp_psk_3);
    {627}event Client_chk(id_client_3,chk_7);
    {628}event Client_shk(id_client_3,shk_6);
    {629}event Client_cfin(id_client_3,cfin_7);
    {630}event Client_sfin(id_client_3,sfin_6);
    {631}new st1_8[]: stamp;
    {632}event PreciseMess(ch_client_after_EE,id_client_3,st1_8,master_secret_8);
    {633}if (psk_9 = NoPsk) then
    (
        {634}in(io, enc_msg_1: bitstring);
        {635}let msg': msg = aead_dec(a_alg_7,shk_6,seq_srv_6,zero,enc_msg_1) in
        {636}let CRTR(=zero) = msg' in
        (
            {637}let cur_log2_3: bitstring = (cur_log_7,msg') in
            {638}in(io, enc_crt_msg: bitstring);
            {639}let certificate_msg_4: msg = aead_dec(a_alg_7,shk_6,seq_srv_6 + 1,zero,enc_crt_msg) in
            {640}out(ch_client_CRT, (id_client_3,ArgsClientCRT(cr_8,sr_7,h_alg_9,a_alg_7,c_dom_5,s_dom_11,true,certificate_msg_4,comp_psk_3,master_secret_8,chk_7,seq_client_5,shk_6,seq_srv_6 + 2,cfin_7,sfin_6,cur_log2_3)))
        )
        else
            {641}let CRT(=zero,crt_11: certificate) = msg' in
                {642}out(ch_client_CRT, (id_client_3,ArgsClientCRT(cr_8,sr_7,h_alg_9,a_alg_7,c_dom_5,s_dom_11,false,msg',comp_psk_3,master_secret_8,chk_7,seq_client_5,shk_6,seq_srv_6 + 1,cfin_7,sfin_6,cur_log_7)))
            else
                {643}out(io, unexpected_message)
    )
    else
        {644}event Client_Cert_server(id_client_3,NoPubKey);
        {645}out(ch_client_FIN, (id_client_3,ArgsClientFIN(cr_8,sr_7,h_alg_9,a_alg_7,c_dom_5,s_dom_11,NoPubKey,false,psk_9,safe_psk_2,comp_psk_3,master_secret_8,chk_7,seq_client_5,shk_6,seq_srv_6,cfin_7,sfin_6,cur_log_7)))
) | (
    {646}!
    {652}get long_term_keys(dom1: domain,sk1: privkey,pk1: pubkey,cert1: certificate,idP1: idProc) in
    {647}event Same(idP1);
    {651}get long_term_keys(dom2: domain,sk2: privkey,pk2: pubkey,cert2: certificate,idP2: idProc) in
    {648}event Same(idP2);
    {649}insert long_term_keys(choice[dom1,dom2],choice[sk1,sk2],choice[pk1,pk2],choice[cert1,cert2],choice[idP1,idP2]);
    {650}insert long_term_keys(choice[dom2,dom1],choice[sk2,sk1],choice[pk2,pk1],choice[cert2,cert1],choice[idP2,idP1])
) | (
    {653}!
    {659}get pre_shared_keys(c_dom1: domain,s_dom_12: domain,h_alg_10: hash_alg,id1: identityPsk,psk1: preSharedKey,idP1_1: idProc,safe1: bool) in
    {654}event Same(idP1_1);
    {658}get pre_shared_keys(c_dom2: domain,=s_dom_12,=h_alg_10,id2: identityPsk,psk2: preSharedKey,idP2_1: idProc,safe2: bool) in
    {655}event Same(idP2_1);
    {656}insert pre_shared_keys(choice[c_dom1,c_dom2],s_dom_12,h_alg_10,choice[id1,id2],choice[psk1,psk2],choice[idP1_1,idP2_1],choice[safe1,safe2]);
    {657}insert pre_shared_keys(choice[c_dom2,c_dom1],s_dom_12,h_alg_10,choice[id2,id1],choice[psk2,psk1],choice[idP2_1,idP1_1],choice[safe2,safe1])
) | (
    {660}!
    {661}new id_tls_client: idProc;
    {662}in(io, s_dom_13: domain);
    {663}event Same(s_dom_13);
    {664}in(io, c_dom_6: domain);
    {665}event Same(c_dom_6);
    {666}let @7_id_client: idProc = id_tls_client in
    {667}let @7_tls_h: hash_alg = id_hash(StrongHash,1) in
    {668}let @7_tls_a: aead_alg = id_aead(StrongAE,1) in
    {669}let @7_tls_g: group = id_g(StrongDH,1) in
    {670}in(io, @7_use_psk: bool);
    {671}event Same(@7_use_psk);
    {672}let () = () in
    {673}in(io, @7_send_kex: bool);
    {674}event Same(@7_send_kex);
    {675}let () = () in
    {676}let @7_comp_psk: bool = false in
    {677}let send_kex: bool = (not(true) || @7_send_kex) in
    {678}let cur_log_8: bitstring = zero in
    {679}let old_psk_data: bitstring = zero in
    {680}new rand24_1[]: bytes24;
    {681}new rand8_1[]: bytes8;
    {682}let cr_9: bytes32 = B32(rand24_1,rand8_1) in
    {683}new s_8[]: seed;
    {684}let gx_2: element = dh_pub(@7_tls_g,dh_k(s_8)) in
    {685}let v_72: bitstring = (dh_k(s_8),gx_2) in
    {686}let v_73: bool = success?(1-proj-2-tuple(v_72)) in
    {687}let gx_3: element = (if v_73 then 2-proj-2-tuple(v_72) else caught-fail) in
    {688}let x_29: bitstring = (if v_73 then 1-proj-2-tuple(v_72) else caught-fail) in
    {689}let kex: kex_alg = (if v_73 then (if send_kex then DHE_kex(@7_tls_g,gx_3) else DHE_group(@7_tls_g)) else caught-fail) in
    {690}let (kex_ext_1: keyShareExt,kex_data: bitstring) = (if v_73 then (client_kex_ext(kex),(x_29,@7_tls_g)) else fail-any) in
    {691}let ech_ext_2: echExt = empty_ech_ext in
    {692}let extra_2: extraExt = empty_extra_ext in
    {693}if @7_use_psk then
    (
        {694}let (psk_10: preSharedKey,id_5: identityPsk,old_es: bitstring,is_safe: bool) = old_psk_data in
        (
            {695}let offer_2: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_13),ech_ext_2,extra_2,trunc_client_psk_ext(id_5)) in
            {696}let cur_log'_2: bitstring = (cur_log_8,CH(cr_9,offer_2)) in
            {697}let s_9: bitstring = zero in
            {698}let k_6: bitstring = catch-fail(psk2b(psk_10)) in
            {699}let v_74: bool = not-caught-fail(k_6) in
            {700}let early_secret_5: bitstring = catch-fail((if v_74 then hmac(@7_tls_h,s_9,k_6) else fail-any)) in
            {701}let v_75: bool = not-caught-fail(early_secret_5) in
            {702}let l_29: label = (if v_75 then tls13_ext_res_binder else caught-fail) in
            {703}let m_5: bitstring = (if v_75 then zero else caught-fail) in
            {704}let h_28: bitstring = (if v_75 then catch-fail(hash(@7_tls_h,m_5)) else caught-fail) in
            {705}let v_76: bool = not-caught-fail(h_28) in
            {706}let x_30: bitstring = (if v_76 then (l_29,h_28) else caught-fail) in
            {707}let binder_key_3: bitstring = (if v_75 then catch-fail((if v_76 then hmac(@7_tls_h,early_secret_5,x_30) else fail-any)) else caught-fail) in
            {708}let v_77: bool = not-caught-fail(binder_key_3) in
            {709}let v_78: bitstring = catch-fail((if v_75 then (if v_77 then (early_secret_5,binder_key_3) else fail-any) else fail-any)) in
            {710}let v_79: bool = (not-caught-fail(v_78) && success?(1-proj-2-tuple(v_78))) in
            {711}let kb_3: mac_key = (if v_79 then 2-proj-2-tuple(v_78) else caught-fail) in
            {712}let es_2: bitstring = (if v_79 then 1-proj-2-tuple(v_78) else caught-fail) in
            {713}let binders_1: bitstring = (if v_79 then catch-fail(hmac(@7_tls_h,kb_3,cur_log'_2)) else caught-fail) in
            {714}let v_80: bool = not-caught-fail(binders_1) in
            {715}let v_81: bitstring = catch-fail((if v_79 then (if v_80 then (client_psk_ext(id_5,binders_1),(psk_10,id_5,es_2,is_safe)) else fail-any) else fail-any)) in
            {716}let v_82: bool = (not-caught-fail(v_81) && success?(1-proj-2-tuple(v_81))) in
            {717}let psk_data: bitstring = (if v_82 then 2-proj-2-tuple(v_81) else caught-fail) in
            {718}let psk_ext_2: preSharedKeyExt = (if v_82 then 1-proj-2-tuple(v_81) else caught-fail) in
            {719}let offer_3: params = (if v_82 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_2) else caught-fail) in
            {720}let (client_hello_1: msg,cr_10: bytes32,kex_data_1: bitstring,psk_data_1: bitstring) = (if v_82 then (CH(cr_9,offer_3),cr_9,kex_data,psk_data) else fail-any) in
            {721}event ClientOffersAead(cr_10,@7_tls_a);
            {722}event ClientOffersHash(cr_10,@7_tls_h);
            {723}event ClientOffersGroup(cr_10,@7_tls_g);
            {724}out(io, client_hello_1);
            {725}let cur_log2_4: bitstring = (cur_log_8,client_hello_1) in
            {726}let (psk_11: preSharedKey,id_6: identityPsk,es_3: bitstring,safe_psk_3: bool) = psk_data_1 in
            (
                {727}if (false && (psk_11 ≠ NoPsk)) then
                {728}let client_hello_2: bitstring = (zero,client_hello_1) in
                {729}let l_30: label = tls13_client_early_traffic_secret in
                {730}let h_29: bitstring = catch-fail(hash(@7_tls_h,client_hello_2)) in
                {731}let v_83: bool = not-caught-fail(h_29) in
                {732}let x_31: bitstring = (if v_83 then (l_30,h_29) else caught-fail) in
                {733}let atsc0_1: bitstring = catch-fail((if v_83 then hmac(@7_tls_h,es_3,x_31) else fail-any)) in
                {734}let v_84: bool = not-caught-fail(atsc0_1) in
                {735}let l_31: label = (if v_84 then tls13_key else caught-fail) in
                {736}let h_30: bitstring = (if v_84 then zero else caught-fail) in
                {737}let x_32: bitstring = (if v_84 then (l_31,h_30) else caught-fail) in
                {738}let kc0_1: bitstring = (if v_84 then catch-fail(hmac(@7_tls_h,atsc0_1,x_32)) else caught-fail) in
                {739}let v_85: bool = not-caught-fail(kc0_1) in
                {740}let l_32: label = (if v_85 then tls13_early_exporter_master_secret else caught-fail) in
                {741}let h_31: bitstring = (if v_85 then catch-fail(hash(@7_tls_h,client_hello_2)) else caught-fail) in
                {742}let v_86: bool = not-caught-fail(h_31) in
                {743}let x_33: bitstring = (if v_86 then (l_32,h_31) else caught-fail) in
                {744}let ems0_2: bitstring = (if v_85 then catch-fail((if v_86 then hmac(@7_tls_h,es_3,x_33) else fail-any)) else caught-fail) in
                {745}let v_87: bool = not-caught-fail(ems0_2) in
                {746}let (wkc0_1: aead_key,ems0_3: bitstring) = (if v_84 then (if v_85 then (if v_87 then (kc0_1,ems0_2) else fail-any) else fail-any) else fail-any) in
                {747}!
                {748}in(io, (i_1: nat,ad_1: bitstring));
                {749}if is_nat(i_1) then
                {750}new msg_ed[]: bitstring;
                {751}let enc_ed: bitstring = aead_enc(@7_tls_a,wkc0_1,i_1,ad_1,msg_ed) in
                {752}new st_10: stamp;
                {753}event ClientSequenceClient0RTTDataWriteKey(@7_id_client,st_10,i_1);
                {754}event ClientSends0(@7_id_client,cr_10,psk_11,i_1,ad_1,msg_ed);
                {755}out(io, enc_ed)
            ) | (
                {756}in(io, server_hello_1: msg);
                {757}let SH(sr_8: bytes32,mode: params) = server_hello_1 in
                (
                    {758}event ClientEchAcceptance(@7_id_client,false);
                    {759}if (true && (sr_8 = B32(HRR24,HRR8))) then
                    (
                        {760}if ((mode = nego(TLS13,@7_tls_h,@7_tls_a,hrr_kex_ext(@7_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex ≠ true)) then
                        (
                            {761}let cur_log3_2: bitstring = (cur_log2_4,server_hello_1) in
                            {762}let send_kex_1: bool = true in
                            {763}new rand24_2[]: bytes24;
                            {764}new rand8_2[]: bytes8;
                            {765}let cr_11: bytes32 = B32(rand24_2,rand8_2) in
                            {766}new s_10[]: seed;
                            {767}let gx_4: element = dh_pub(@7_tls_g,dh_k(s_10)) in
                            {768}let v_88: bitstring = (dh_k(s_10),gx_4) in
                            {769}let v_89: bool = success?(1-proj-2-tuple(v_88)) in
                            {770}let gx_5: element = (if v_89 then 2-proj-2-tuple(v_88) else caught-fail) in
                            {771}let x_34: bitstring = (if v_89 then 1-proj-2-tuple(v_88) else caught-fail) in
                            {772}let kex_1: kex_alg = (if v_89 then (if send_kex_1 then DHE_kex(@7_tls_g,gx_5) else DHE_group(@7_tls_g)) else caught-fail) in
                            {773}let (kex_ext_2: keyShareExt,kex_data_2: bitstring) = (if v_89 then (client_kex_ext(kex_1),(x_34,@7_tls_g)) else fail-any) in
                            {774}let ech_ext_3: echExt = empty_ech_ext in
                            {775}let extra_3: extraExt = empty_extra_ext in
                            {776}if @7_use_psk then
                            (
                                {777}let (psk_12: preSharedKey,id_7: identityPsk,old_es_1: bitstring,is_safe_1: bool) = psk_data_1 in
                                (
                                    {778}let offer_4: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_13),ech_ext_3,extra_3,trunc_client_psk_ext(id_7)) in
                                    {779}let cur_log'_3: bitstring = (cur_log3_2,CH(cr_11,offer_4)) in
                                    {780}let s_11: bitstring = zero in
                                    {781}let k_7: bitstring = catch-fail(psk2b(psk_12)) in
                                    {782}let v_90: bool = not-caught-fail(k_7) in
                                    {783}let early_secret_6: bitstring = catch-fail((if v_90 then hmac(@7_tls_h,s_11,k_7) else fail-any)) in
                                    {784}let v_91: bool = not-caught-fail(early_secret_6) in
                                    {785}let l_33: label = (if v_91 then tls13_ext_res_binder else caught-fail) in
                                    {786}let m_6: bitstring = (if v_91 then zero else caught-fail) in
                                    {787}let h_32: bitstring = (if v_91 then catch-fail(hash(@7_tls_h,m_6)) else caught-fail) in
                                    {788}let v_92: bool = not-caught-fail(h_32) in
                                    {789}let x_35: bitstring = (if v_92 then (l_33,h_32) else caught-fail) in
                                    {790}let binder_key_4: bitstring = (if v_91 then catch-fail((if v_92 then hmac(@7_tls_h,early_secret_6,x_35) else fail-any)) else caught-fail) in
                                    {791}let v_93: bool = not-caught-fail(binder_key_4) in
                                    {792}let v_94: bitstring = catch-fail((if v_91 then (if v_93 then (early_secret_6,binder_key_4) else fail-any) else fail-any)) in
                                    {793}let v_95: bool = (not-caught-fail(v_94) && success?(1-proj-2-tuple(v_94))) in
                                    {794}let kb_4: mac_key = (if v_95 then 2-proj-2-tuple(v_94) else caught-fail) in
                                    {795}let es_4: bitstring = (if v_95 then 1-proj-2-tuple(v_94) else caught-fail) in
                                    {796}let binders_2: bitstring = (if v_95 then catch-fail(hmac(@7_tls_h,kb_4,cur_log'_3)) else caught-fail) in
                                    {797}let v_96: bool = not-caught-fail(binders_2) in
                                    {798}let v_97: bitstring = catch-fail((if v_95 then (if v_96 then (client_psk_ext(id_7,binders_2),(psk_12,id_7,es_4,is_safe_1)) else fail-any) else fail-any)) in
                                    {799}let v_98: bool = (not-caught-fail(v_97) && success?(1-proj-2-tuple(v_97))) in
                                    {800}let psk_data_2: bitstring = (if v_98 then 2-proj-2-tuple(v_97) else caught-fail) in
                                    {801}let psk_ext_3: preSharedKeyExt = (if v_98 then 1-proj-2-tuple(v_97) else caught-fail) in
                                    {802}let offer_5: params = (if v_98 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_3) else caught-fail) in
                                    {803}let (client_hello': msg,cr': bytes32,kex_data': bitstring,psk_data': bitstring) = (if v_98 then (CH(cr_11,offer_5),cr_11,kex_data_2,psk_data_2) else fail-any) in
                                    {804}event ClientOffersAead(cr',@7_tls_a);
                                    {805}event ClientOffersHash(cr',@7_tls_h);
                                    {806}event ClientOffersGroup(cr',@7_tls_g);
                                    {807}out(io, client_hello');
                                    {808}let cur_log4: bitstring = (cur_log3_2,client_hello') in
                                    {809}in(io, server_hello': msg);
                                    {810}let SH(sr': bytes32,mode': params) = server_hello' in
                                    (
                                        {811}if (sr' = B32(HRR24,HRR8)) then
                                            {812}out(io, unexpected_message)
                                        else
                                            {813}let (x_36: bitstring,g: group) = kex_data' in
                                            {814}let (psk_offer: preSharedKey,id_offer: identityPsk,es_offer: bitstring,is_safe_offer: bool) = psk_data' in
                                            {815}event Client_PSKOffer(@7_id_client,psk_offer,id_offer,is_safe_offer);
                                            {816}event Client_Rand_client(@7_id_client,cr');
                                            {817}event Client_DH_client(@7_id_client,dh_pub(g,x_36));
                                            {818}event Client_server_domain(@7_id_client,s_dom_13);
                                            {819}let SH(sr_9: bytes32,mode_1: params) = server_hello' in
                                            {820}event Client_Rand_server(@7_id_client,sr_9);
                                            {821}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g,gy_1: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_4: preSharedKeyExt) = mode_1 in
                                            (
                                                {822}let cur_log2_5: bitstring = (cur_log4,server_hello') in
                                                {823}event Client_DH_server(@7_id_client,gy_1);
                                                {824}let v_99: bool = (psk_ext_4 = empty_psk_ext) in
                                                {825}let psk_13: preSharedKey = (if v_99 then NoPsk else caught-fail) in
                                                {826}let s_12: bitstring = (if v_99 then zero else caught-fail) in
                                                {827}let k_8: bitstring = (if v_99 then catch-fail(psk2b(psk_13)) else caught-fail) in
                                                {828}let v_100: bool = not-caught-fail(k_8) in
                                                {829}let early_secret_7: bitstring = (if v_99 then catch-fail((if v_100 then hmac(@7_tls_h,s_12,k_8) else fail-any)) else caught-fail) in
                                                {830}let v_101: bool = not-caught-fail(early_secret_7) in
                                                {831}let l_34: label = (if v_101 then tls13_ext_res_binder else caught-fail) in
                                                {832}let m_7: bitstring = (if v_101 then zero else caught-fail) in
                                                {833}let h_33: bitstring = (if v_101 then catch-fail(hash(@7_tls_h,m_7)) else caught-fail) in
                                                {834}let v_102: bool = not-caught-fail(h_33) in
                                                {835}let x_37: bitstring = (if v_102 then (l_34,h_33) else caught-fail) in
                                                {836}let binder_key_5: bitstring = (if v_101 then catch-fail((if v_102 then hmac(@7_tls_h,early_secret_7,x_37) else fail-any)) else caught-fail) in
                                                {837}let v_103: bool = not-caught-fail(binder_key_5) in
                                                {838}let v_104: bitstring = (if v_99 then catch-fail((if v_101 then (if v_103 then (early_secret_7,binder_key_5) else fail-any) else fail-any)) else caught-fail) in
                                                {839}let v_105: bool = (not-caught-fail(v_104) && success?(1-proj-2-tuple(v_104))) in
                                                {840}let kb_5: mac_key = (if v_105 then 2-proj-2-tuple(v_104) else caught-fail) in
                                                {841}let es_5: bitstring = (if v_105 then 1-proj-2-tuple(v_104) else caught-fail) in
                                                {842}let v_106: bitstring = (if not(v_99) then catch-fail(psk_data') else caught-fail) in
                                                {843}let v_107: bool = (not-caught-fail(v_106) && success?(1-proj-4-tuple(v_106))) in
                                                {844}let is_safe_2: bool = (if v_107 then 4-proj-4-tuple(v_106) else caught-fail) in
                                                {845}let es_6: bitstring = (if v_107 then 3-proj-4-tuple(v_106) else caught-fail) in
                                                {846}let id_8: identityPsk = (if v_107 then 2-proj-4-tuple(v_106) else caught-fail) in
                                                {847}let psk_14: preSharedKey = (if v_107 then 1-proj-4-tuple(v_106) else caught-fail) in
                                                {848}let (psk_15: preSharedKey,early_secret_8: bitstring,valid: bool,safe_psk_4: bool) = (if v_99 then (if v_105 then (NoPsk,es_5,true,false) else fail-any) else (if v_107 then (psk_14,es_6,((psk_14 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_4)),is_safe_2) else fail-any)) in
                                                {849}event Client_PSKChoosen(@7_id_client,psk_15,safe_psk_4);
                                                {850}if valid then
                                                (
                                                    {851}let gxy_1: element = catch-fail(dh_decap_fun(g,gy_1,x_36)) in
                                                    {852}let v_108: bool = not-caught-fail(gxy_1) in
                                                    {853}new s_13[]: seed;
                                                    {854}let gxy_2: element = (if v_108 then gxy_1 else dh_f(s_13)) in
                                                    {855}event Client_DH_gxy(@7_id_client,gxy_2);
                                                    {856}let l_35: label = tls13_derived in
                                                    {857}let m_8: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {858}let v_109: bool = not-caught-fail(m_8) in
                                                    {859}let h_34: bitstring = (if v_109 then catch-fail(hash(@7_tls_h,m_8)) else caught-fail) in
                                                    {860}let v_110: bool = not-caught-fail(h_34) in
                                                    {861}let x_38: bitstring = (if v_110 then (l_35,h_34) else caught-fail) in
                                                    {862}let extra_4: bitstring = catch-fail((if v_109 then (if v_110 then hmac(@7_tls_h,early_secret_8,x_38) else fail-any) else fail-any)) in
                                                    {863}let v_111: bool = not-caught-fail(extra_4) in
                                                    {864}let handshake_secret_1: bitstring = (if v_111 then hmac(@7_tls_h,extra_4,gxy_2) else fail-any) in
                                                    {865}let l_36: label = tls13_derived in
                                                    {866}let m_9: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {867}let v_112: bool = not-caught-fail(m_9) in
                                                    {868}let h_35: bitstring = (if v_112 then catch-fail(hash(@7_tls_h,m_9)) else caught-fail) in
                                                    {869}let v_113: bool = not-caught-fail(h_35) in
                                                    {870}let x_39: bitstring = (if v_113 then (l_36,h_35) else caught-fail) in
                                                    {871}let extra_5: bitstring = catch-fail((if v_112 then (if v_113 then hmac(@7_tls_h,handshake_secret_1,x_39) else fail-any) else fail-any)) in
                                                    {872}let v_114: bool = not-caught-fail(extra_5) in
                                                    {873}let k_9: bitstring = (if v_114 then zero else caught-fail) in
                                                    {874}let master_secret_9: bitstring = (if v_114 then catch-fail(hmac(@7_tls_h,handshake_secret_1,k_9)) else caught-fail) in
                                                    {875}let v_115: bool = not-caught-fail(master_secret_9) in
                                                    {876}let l_37: label = (if v_115 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {877}let h_36: bitstring = (if v_115 then catch-fail(hash(@7_tls_h,cur_log2_5)) else caught-fail) in
                                                    {878}let v_116: bool = not-caught-fail(h_36) in
                                                    {879}let x_40: bitstring = (if v_116 then (l_37,h_36) else caught-fail) in
                                                    {880}let client_hts_1: bitstring = (if v_115 then catch-fail((if v_116 then hmac(@7_tls_h,handshake_secret_1,x_40) else fail-any)) else caught-fail) in
                                                    {881}let v_117: bool = not-caught-fail(client_hts_1) in
                                                    {882}let l_38: label = (if v_117 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {883}let h_37: bitstring = (if v_117 then catch-fail(hash(@7_tls_h,cur_log2_5)) else caught-fail) in
                                                    {884}let v_118: bool = not-caught-fail(h_37) in
                                                    {885}let x_41: bitstring = (if v_118 then (l_38,h_37) else caught-fail) in
                                                    {886}let server_hts_1: bitstring = (if v_117 then catch-fail((if v_118 then hmac(@7_tls_h,handshake_secret_1,x_41) else fail-any)) else caught-fail) in
                                                    {887}let v_119: bool = not-caught-fail(server_hts_1) in
                                                    {888}let l_39: label = (if v_119 then tls13_key else caught-fail) in
                                                    {889}let h_38: bitstring = (if v_119 then zero else caught-fail) in
                                                    {890}let x_42: bitstring = (if v_119 then (l_39,h_38) else caught-fail) in
                                                    {891}let client_wkh_1: bitstring = (if v_119 then catch-fail(hmac(@7_tls_h,client_hts_1,x_42)) else caught-fail) in
                                                    {892}let v_120: bool = not-caught-fail(client_wkh_1) in
                                                    {893}let l_40: label = (if v_120 then tls13_key else caught-fail) in
                                                    {894}let h_39: bitstring = (if v_120 then zero else caught-fail) in
                                                    {895}let x_43: bitstring = (if v_120 then (l_40,h_39) else caught-fail) in
                                                    {896}let server_wkh_1: bitstring = (if v_120 then catch-fail(hmac(@7_tls_h,server_hts_1,x_43)) else caught-fail) in
                                                    {897}let v_121: bool = not-caught-fail(server_wkh_1) in
                                                    {898}let l_41: label = (if v_121 then tls13_finished else caught-fail) in
                                                    {899}let h_40: bitstring = (if v_121 then zero else caught-fail) in
                                                    {900}let x_44: bitstring = (if v_121 then (l_41,h_40) else caught-fail) in
                                                    {901}let client_fk_1: bitstring = (if v_121 then catch-fail(hmac(@7_tls_h,client_hts_1,x_44)) else caught-fail) in
                                                    {902}let v_122: bool = not-caught-fail(client_fk_1) in
                                                    {903}let l_42: label = (if v_122 then tls13_finished else caught-fail) in
                                                    {904}let h_41: bitstring = (if v_122 then zero else caught-fail) in
                                                    {905}let x_45: bitstring = (if v_122 then (l_42,h_41) else caught-fail) in
                                                    {906}let server_fk_1: bitstring = (if v_122 then catch-fail(hmac(@7_tls_h,server_hts_1,x_45)) else caught-fail) in
                                                    {907}let v_123: bool = not-caught-fail(server_fk_1) in
                                                    {908}let (master_secret_10: bitstring,chk_8: aead_key,shk_7: aead_key,cfin_8: mac_key,sfin_7: mac_key) = (if v_114 then (if v_115 then (if v_117 then (if v_119 then (if v_120 then (if v_121 then (if v_122 then (if v_123 then (master_secret_9,client_wkh_1,server_wkh_1,client_fk_1,server_fk_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {909}event Client_chk(@7_id_client,chk_8);
                                                    {910}event Client_shk(@7_id_client,shk_7);
                                                    {911}event Client_cfin(@7_id_client,cfin_8);
                                                    {912}event Client_sfin(@7_id_client,sfin_7);
                                                    {913}in(io, enc_ee_msg: bitstring);
                                                    {914}let ee_msg_1: msg = aead_dec(@7_tls_a,shk_7,0,zero,enc_ee_msg) in
                                                    {915}let EE(ech_ee: echExt,extra_ee: extraExt) = ee_msg_1 in
                                                    {916}let cur_log2_6: bitstring = (cur_log2_5,ee_msg_1) in
                                                    {917}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr',sr_9,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_15,safe_psk_4,@7_comp_psk,master_secret_10,chk_8,0,shk_7,1,cfin_8,sfin_7,cur_log2_6)))
                                                )
                                                else
                                                    {918}out(io, illegal_parameter)
                                            )
                                            else
                                                {919}out(io, illegal_parameter)
                                    )
                                    else
                                        {920}out(io, unexpected_message)
                                )
                                else
                                    {1073}get pre_shared_keys(c_dom'_2: domain,=s_dom_13,=@7_tls_h,id_9: identityPsk,psk_16: preSharedKey,idP_5: idProc,is_safe_3: bool) in
                                    {921}event Selected_one_time_used_psk(@7_id_client,psk_16,is_safe_3);
                                    {922}event Selected_psk(c_dom_6,c_dom'_2,idP_5,is_safe_3);
                                    {923}event Selected_psk_no_missmatch(@7_id_client,s_dom_13,@7_tls_h,psk_16,id_9);
                                    {924}event Selected_psk_with_ID(c_dom_6,c_dom'_2,id_9,idP_5,is_safe_3);
                                    {925}let v_124: bitstring = (id_9,psk_16,is_safe_3) in
                                    {926}let v_125: bool = success?(1-proj-3-tuple(v_124)) in
                                    {927}let is_safe_4: bool = (if v_125 then 3-proj-3-tuple(v_124) else caught-fail) in
                                    {928}let psk_17: preSharedKey = (if v_125 then 2-proj-3-tuple(v_124) else caught-fail) in
                                    {929}let id_10: identityPsk = (if v_125 then 1-proj-3-tuple(v_124) else caught-fail) in
                                    {930}let offer_6: params = (if v_125 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_13),ech_ext_3,extra_3,trunc_client_psk_ext(id_10)) else caught-fail) in
                                    {931}let cur_log'_4: bitstring = (if v_125 then (cur_log3_2,CH(cr_11,offer_6)) else caught-fail) in
                                    {932}let s_14: bitstring = (if v_125 then zero else caught-fail) in
                                    {933}let k_10: bitstring = (if v_125 then catch-fail(psk2b(psk_17)) else caught-fail) in
                                    {934}let v_126: bool = not-caught-fail(k_10) in
                                    {935}let early_secret_9: bitstring = (if v_125 then catch-fail((if v_126 then hmac(@7_tls_h,s_14,k_10) else fail-any)) else caught-fail) in
                                    {936}let v_127: bool = not-caught-fail(early_secret_9) in
                                    {937}let l_43: label = (if v_127 then tls13_ext_res_binder else caught-fail) in
                                    {938}let m_10: bitstring = (if v_127 then zero else caught-fail) in
                                    {939}let h_42: bitstring = (if v_127 then catch-fail(hash(@7_tls_h,m_10)) else caught-fail) in
                                    {940}let v_128: bool = not-caught-fail(h_42) in
                                    {941}let x_46: bitstring = (if v_128 then (l_43,h_42) else caught-fail) in
                                    {942}let binder_key_6: bitstring = (if v_127 then catch-fail((if v_128 then hmac(@7_tls_h,early_secret_9,x_46) else fail-any)) else caught-fail) in
                                    {943}let v_129: bool = not-caught-fail(binder_key_6) in
                                    {944}let v_130: bitstring = (if v_125 then catch-fail((if v_127 then (if v_129 then (early_secret_9,binder_key_6) else fail-any) else fail-any)) else caught-fail) in
                                    {945}let v_131: bool = (not-caught-fail(v_130) && success?(1-proj-2-tuple(v_130))) in
                                    {946}let kb_6: mac_key = (if v_131 then 2-proj-2-tuple(v_130) else caught-fail) in
                                    {947}let es_7: bitstring = (if v_131 then 1-proj-2-tuple(v_130) else caught-fail) in
                                    {948}let binders_3: bitstring = (if v_131 then catch-fail(hmac(@7_tls_h,kb_6,cur_log'_4)) else caught-fail) in
                                    {949}let v_132: bool = not-caught-fail(binders_3) in
                                    {950}let v_133: bitstring = catch-fail((if v_125 then (if v_131 then (if v_132 then (client_psk_ext(id_10,binders_3),(psk_17,id_10,es_7,is_safe_4)) else fail-any) else fail-any) else fail-any)) in
                                    {951}let v_134: bool = (not-caught-fail(v_133) && success?(1-proj-2-tuple(v_133))) in
                                    {952}let psk_data_3: bitstring = (if v_134 then 2-proj-2-tuple(v_133) else caught-fail) in
                                    {953}let psk_ext_5: preSharedKeyExt = (if v_134 then 1-proj-2-tuple(v_133) else caught-fail) in
                                    {954}let offer_7: params = (if v_134 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_5) else caught-fail) in
                                    {955}let (client_hello'_1: msg,cr'_1: bytes32,kex_data'_1: bitstring,psk_data'_1: bitstring) = (if v_134 then (CH(cr_11,offer_7),cr_11,kex_data_2,psk_data_3) else fail-any) in
                                    {956}event ClientOffersAead(cr'_1,@7_tls_a);
                                    {957}event ClientOffersHash(cr'_1,@7_tls_h);
                                    {958}event ClientOffersGroup(cr'_1,@7_tls_g);
                                    {959}out(io, client_hello'_1);
                                    {960}let cur_log4_1: bitstring = (cur_log3_2,client_hello'_1) in
                                    {961}in(io, server_hello'_1: msg);
                                    {962}let SH(sr'_1: bytes32,mode'_1: params) = server_hello'_1 in
                                    (
                                        {963}if (sr'_1 = B32(HRR24,HRR8)) then
                                            {964}out(io, unexpected_message)
                                        else
                                            {965}let (x_47: bitstring,g_1: group) = kex_data'_1 in
                                            {966}let (psk_offer_1: preSharedKey,id_offer_1: identityPsk,es_offer_1: bitstring,is_safe_offer_1: bool) = psk_data'_1 in
                                            {967}event Client_PSKOffer(@7_id_client,psk_offer_1,id_offer_1,is_safe_offer_1);
                                            {968}event Client_Rand_client(@7_id_client,cr'_1);
                                            {969}event Client_DH_client(@7_id_client,dh_pub(g_1,x_47));
                                            {970}event Client_server_domain(@7_id_client,s_dom_13);
                                            {971}let SH(sr_10: bytes32,mode_2: params) = server_hello'_1 in
                                            {972}event Client_Rand_server(@7_id_client,sr_10);
                                            {973}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_1,gy_2: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_6: preSharedKeyExt) = mode_2 in
                                            (
                                                {974}let cur_log2_7: bitstring = (cur_log4_1,server_hello'_1) in
                                                {975}event Client_DH_server(@7_id_client,gy_2);
                                                {976}let v_135: bool = (psk_ext_6 = empty_psk_ext) in
                                                {977}let psk_18: preSharedKey = (if v_135 then NoPsk else caught-fail) in
                                                {978}let s_15: bitstring = (if v_135 then zero else caught-fail) in
                                                {979}let k_11: bitstring = (if v_135 then catch-fail(psk2b(psk_18)) else caught-fail) in
                                                {980}let v_136: bool = not-caught-fail(k_11) in
                                                {981}let early_secret_10: bitstring = (if v_135 then catch-fail((if v_136 then hmac(@7_tls_h,s_15,k_11) else fail-any)) else caught-fail) in
                                                {982}let v_137: bool = not-caught-fail(early_secret_10) in
                                                {983}let l_44: label = (if v_137 then tls13_ext_res_binder else caught-fail) in
                                                {984}let m_11: bitstring = (if v_137 then zero else caught-fail) in
                                                {985}let h_43: bitstring = (if v_137 then catch-fail(hash(@7_tls_h,m_11)) else caught-fail) in
                                                {986}let v_138: bool = not-caught-fail(h_43) in
                                                {987}let x_48: bitstring = (if v_138 then (l_44,h_43) else caught-fail) in
                                                {988}let binder_key_7: bitstring = (if v_137 then catch-fail((if v_138 then hmac(@7_tls_h,early_secret_10,x_48) else fail-any)) else caught-fail) in
                                                {989}let v_139: bool = not-caught-fail(binder_key_7) in
                                                {990}let v_140: bitstring = (if v_135 then catch-fail((if v_137 then (if v_139 then (early_secret_10,binder_key_7) else fail-any) else fail-any)) else caught-fail) in
                                                {991}let v_141: bool = (not-caught-fail(v_140) && success?(1-proj-2-tuple(v_140))) in
                                                {992}let kb_7: mac_key = (if v_141 then 2-proj-2-tuple(v_140) else caught-fail) in
                                                {993}let es_8: bitstring = (if v_141 then 1-proj-2-tuple(v_140) else caught-fail) in
                                                {994}let v_142: bitstring = (if not(v_135) then catch-fail(psk_data'_1) else caught-fail) in
                                                {995}let v_143: bool = (not-caught-fail(v_142) && success?(1-proj-4-tuple(v_142))) in
                                                {996}let is_safe_5: bool = (if v_143 then 4-proj-4-tuple(v_142) else caught-fail) in
                                                {997}let es_9: bitstring = (if v_143 then 3-proj-4-tuple(v_142) else caught-fail) in
                                                {998}let id_11: identityPsk = (if v_143 then 2-proj-4-tuple(v_142) else caught-fail) in
                                                {999}let psk_19: preSharedKey = (if v_143 then 1-proj-4-tuple(v_142) else caught-fail) in
                                                {1000}let (psk_20: preSharedKey,early_secret_11: bitstring,valid_1: bool,safe_psk_5: bool) = (if v_135 then (if v_141 then (NoPsk,es_8,true,false) else fail-any) else (if v_143 then (psk_19,es_9,((psk_19 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_6)),is_safe_5) else fail-any)) in
                                                {1001}event Client_PSKChoosen(@7_id_client,psk_20,safe_psk_5);
                                                {1002}if valid_1 then
                                                (
                                                    {1003}let gxy_3: element = catch-fail(dh_decap_fun(g_1,gy_2,x_47)) in
                                                    {1004}let v_144: bool = not-caught-fail(gxy_3) in
                                                    {1005}new s_16[]: seed;
                                                    {1006}let gxy_4: element = (if v_144 then gxy_3 else dh_f(s_16)) in
                                                    {1007}event Client_DH_gxy(@7_id_client,gxy_4);
                                                    {1008}let l_45: label = tls13_derived in
                                                    {1009}let m_12: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1010}let v_145: bool = not-caught-fail(m_12) in
                                                    {1011}let h_44: bitstring = (if v_145 then catch-fail(hash(@7_tls_h,m_12)) else caught-fail) in
                                                    {1012}let v_146: bool = not-caught-fail(h_44) in
                                                    {1013}let x_49: bitstring = (if v_146 then (l_45,h_44) else caught-fail) in
                                                    {1014}let extra_6: bitstring = catch-fail((if v_145 then (if v_146 then hmac(@7_tls_h,early_secret_11,x_49) else fail-any) else fail-any)) in
                                                    {1015}let v_147: bool = not-caught-fail(extra_6) in
                                                    {1016}let handshake_secret_2: bitstring = (if v_147 then hmac(@7_tls_h,extra_6,gxy_4) else fail-any) in
                                                    {1017}let l_46: label = tls13_derived in
                                                    {1018}let m_13: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1019}let v_148: bool = not-caught-fail(m_13) in
                                                    {1020}let h_45: bitstring = (if v_148 then catch-fail(hash(@7_tls_h,m_13)) else caught-fail) in
                                                    {1021}let v_149: bool = not-caught-fail(h_45) in
                                                    {1022}let x_50: bitstring = (if v_149 then (l_46,h_45) else caught-fail) in
                                                    {1023}let extra_7: bitstring = catch-fail((if v_148 then (if v_149 then hmac(@7_tls_h,handshake_secret_2,x_50) else fail-any) else fail-any)) in
                                                    {1024}let v_150: bool = not-caught-fail(extra_7) in
                                                    {1025}let k_12: bitstring = (if v_150 then zero else caught-fail) in
                                                    {1026}let master_secret_11: bitstring = (if v_150 then catch-fail(hmac(@7_tls_h,handshake_secret_2,k_12)) else caught-fail) in
                                                    {1027}let v_151: bool = not-caught-fail(master_secret_11) in
                                                    {1028}let l_47: label = (if v_151 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {1029}let h_46: bitstring = (if v_151 then catch-fail(hash(@7_tls_h,cur_log2_7)) else caught-fail) in
                                                    {1030}let v_152: bool = not-caught-fail(h_46) in
                                                    {1031}let x_51: bitstring = (if v_152 then (l_47,h_46) else caught-fail) in
                                                    {1032}let client_hts_2: bitstring = (if v_151 then catch-fail((if v_152 then hmac(@7_tls_h,handshake_secret_2,x_51) else fail-any)) else caught-fail) in
                                                    {1033}let v_153: bool = not-caught-fail(client_hts_2) in
                                                    {1034}let l_48: label = (if v_153 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {1035}let h_47: bitstring = (if v_153 then catch-fail(hash(@7_tls_h,cur_log2_7)) else caught-fail) in
                                                    {1036}let v_154: bool = not-caught-fail(h_47) in
                                                    {1037}let x_52: bitstring = (if v_154 then (l_48,h_47) else caught-fail) in
                                                    {1038}let server_hts_2: bitstring = (if v_153 then catch-fail((if v_154 then hmac(@7_tls_h,handshake_secret_2,x_52) else fail-any)) else caught-fail) in
                                                    {1039}let v_155: bool = not-caught-fail(server_hts_2) in
                                                    {1040}let l_49: label = (if v_155 then tls13_key else caught-fail) in
                                                    {1041}let h_48: bitstring = (if v_155 then zero else caught-fail) in
                                                    {1042}let x_53: bitstring = (if v_155 then (l_49,h_48) else caught-fail) in
                                                    {1043}let client_wkh_2: bitstring = (if v_155 then catch-fail(hmac(@7_tls_h,client_hts_2,x_53)) else caught-fail) in
                                                    {1044}let v_156: bool = not-caught-fail(client_wkh_2) in
                                                    {1045}let l_50: label = (if v_156 then tls13_key else caught-fail) in
                                                    {1046}let h_49: bitstring = (if v_156 then zero else caught-fail) in
                                                    {1047}let x_54: bitstring = (if v_156 then (l_50,h_49) else caught-fail) in
                                                    {1048}let server_wkh_2: bitstring = (if v_156 then catch-fail(hmac(@7_tls_h,server_hts_2,x_54)) else caught-fail) in
                                                    {1049}let v_157: bool = not-caught-fail(server_wkh_2) in
                                                    {1050}let l_51: label = (if v_157 then tls13_finished else caught-fail) in
                                                    {1051}let h_50: bitstring = (if v_157 then zero else caught-fail) in
                                                    {1052}let x_55: bitstring = (if v_157 then (l_51,h_50) else caught-fail) in
                                                    {1053}let client_fk_2: bitstring = (if v_157 then catch-fail(hmac(@7_tls_h,client_hts_2,x_55)) else caught-fail) in
                                                    {1054}let v_158: bool = not-caught-fail(client_fk_2) in
                                                    {1055}let l_52: label = (if v_158 then tls13_finished else caught-fail) in
                                                    {1056}let h_51: bitstring = (if v_158 then zero else caught-fail) in
                                                    {1057}let x_56: bitstring = (if v_158 then (l_52,h_51) else caught-fail) in
                                                    {1058}let server_fk_2: bitstring = (if v_158 then catch-fail(hmac(@7_tls_h,server_hts_2,x_56)) else caught-fail) in
                                                    {1059}let v_159: bool = not-caught-fail(server_fk_2) in
                                                    {1060}let (master_secret_12: bitstring,chk_9: aead_key,shk_8: aead_key,cfin_9: mac_key,sfin_8: mac_key) = (if v_150 then (if v_151 then (if v_153 then (if v_155 then (if v_156 then (if v_157 then (if v_158 then (if v_159 then (master_secret_11,client_wkh_2,server_wkh_2,client_fk_2,server_fk_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {1061}event Client_chk(@7_id_client,chk_9);
                                                    {1062}event Client_shk(@7_id_client,shk_8);
                                                    {1063}event Client_cfin(@7_id_client,cfin_9);
                                                    {1064}event Client_sfin(@7_id_client,sfin_8);
                                                    {1065}in(io, enc_ee_msg_1: bitstring);
                                                    {1066}let ee_msg_2: msg = aead_dec(@7_tls_a,shk_8,0,zero,enc_ee_msg_1) in
                                                    {1067}let EE(ech_ee_1: echExt,extra_ee_1: extraExt) = ee_msg_2 in
                                                    {1068}let cur_log2_8: bitstring = (cur_log2_7,ee_msg_2) in
                                                    {1069}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_1,sr_10,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_20,safe_psk_5,@7_comp_psk,master_secret_12,chk_9,0,shk_8,1,cfin_9,sfin_8,cur_log2_8)))
                                                )
                                                else
                                                    {1070}out(io, illegal_parameter)
                                            )
                                            else
                                                {1071}out(io, illegal_parameter)
                                    )
                                    else
                                        {1072}out(io, unexpected_message)
                            )
                            else
                                {1074}let psk_21: preSharedKey = NoPsk in
                                {1075}let s_17: bitstring = zero in
                                {1076}let k_13: bitstring = catch-fail(psk2b(psk_21)) in
                                {1077}let v_160: bool = not-caught-fail(k_13) in
                                {1078}let early_secret_12: bitstring = catch-fail((if v_160 then hmac(@7_tls_h,s_17,k_13) else fail-any)) in
                                {1079}let v_161: bool = not-caught-fail(early_secret_12) in
                                {1080}let l_53: label = (if v_161 then tls13_ext_res_binder else caught-fail) in
                                {1081}let m_14: bitstring = (if v_161 then zero else caught-fail) in
                                {1082}let h_52: bitstring = (if v_161 then catch-fail(hash(@7_tls_h,m_14)) else caught-fail) in
                                {1083}let v_162: bool = not-caught-fail(h_52) in
                                {1084}let x_57: bitstring = (if v_162 then (l_53,h_52) else caught-fail) in
                                {1085}let binder_key_8: bitstring = (if v_161 then catch-fail((if v_162 then hmac(@7_tls_h,early_secret_12,x_57) else fail-any)) else caught-fail) in
                                {1086}let v_163: bool = not-caught-fail(binder_key_8) in
                                {1087}let v_164: bitstring = catch-fail((if v_161 then (if v_163 then (early_secret_12,binder_key_8) else fail-any) else fail-any)) in
                                {1088}let v_165: bool = (not-caught-fail(v_164) && success?(1-proj-2-tuple(v_164))) in
                                {1089}let kb_8: mac_key = (if v_165 then 2-proj-2-tuple(v_164) else caught-fail) in
                                {1090}let es_10: bitstring = (if v_165 then 1-proj-2-tuple(v_164) else caught-fail) in
                                {1091}let v_166: bitstring = catch-fail((if v_165 then (empty_psk_ext,(NoPsk,zero,es_10,false)) else fail-any)) in
                                {1092}let v_167: bool = (not-caught-fail(v_166) && success?(1-proj-2-tuple(v_166))) in
                                {1093}let psk_data_4: bitstring = (if v_167 then 2-proj-2-tuple(v_166) else caught-fail) in
                                {1094}let psk_ext_7: preSharedKeyExt = (if v_167 then 1-proj-2-tuple(v_166) else caught-fail) in
                                {1095}let offer_8: params = (if v_167 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_7) else caught-fail) in
                                {1096}let (client_hello'_2: msg,cr'_2: bytes32,kex_data'_2: bitstring,psk_data'_2: bitstring) = (if v_167 then (CH(cr_11,offer_8),cr_11,kex_data_2,psk_data_4) else fail-any) in
                                {1097}event ClientOffersAead(cr'_2,@7_tls_a);
                                {1098}event ClientOffersHash(cr'_2,@7_tls_h);
                                {1099}event ClientOffersGroup(cr'_2,@7_tls_g);
                                {1100}out(io, client_hello'_2);
                                {1101}let cur_log4_2: bitstring = (cur_log3_2,client_hello'_2) in
                                {1102}in(io, server_hello'_2: msg);
                                {1103}let SH(sr'_2: bytes32,mode'_2: params) = server_hello'_2 in
                                (
                                    {1104}if (sr'_2 = B32(HRR24,HRR8)) then
                                        {1105}out(io, unexpected_message)
                                    else
                                        {1106}let (x_58: bitstring,g_2: group) = kex_data'_2 in
                                        {1107}let (psk_offer_2: preSharedKey,id_offer_2: identityPsk,es_offer_2: bitstring,is_safe_offer_2: bool) = psk_data'_2 in
                                        {1108}event Client_PSKOffer(@7_id_client,psk_offer_2,id_offer_2,is_safe_offer_2);
                                        {1109}event Client_Rand_client(@7_id_client,cr'_2);
                                        {1110}event Client_DH_client(@7_id_client,dh_pub(g_2,x_58));
                                        {1111}event Client_server_domain(@7_id_client,s_dom_13);
                                        {1112}let SH(sr_11: bytes32,mode_3: params) = server_hello'_2 in
                                        {1113}event Client_Rand_server(@7_id_client,sr_11);
                                        {1114}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_2,gy_3: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_8: preSharedKeyExt) = mode_3 in
                                        (
                                            {1115}let cur_log2_9: bitstring = (cur_log4_2,server_hello'_2) in
                                            {1116}event Client_DH_server(@7_id_client,gy_3);
                                            {1117}let v_168: bool = (psk_ext_8 = empty_psk_ext) in
                                            {1118}let psk_22: preSharedKey = (if v_168 then NoPsk else caught-fail) in
                                            {1119}let s_18: bitstring = (if v_168 then zero else caught-fail) in
                                            {1120}let k_14: bitstring = (if v_168 then catch-fail(psk2b(psk_22)) else caught-fail) in
                                            {1121}let v_169: bool = not-caught-fail(k_14) in
                                            {1122}let early_secret_13: bitstring = (if v_168 then catch-fail((if v_169 then hmac(@7_tls_h,s_18,k_14) else fail-any)) else caught-fail) in
                                            {1123}let v_170: bool = not-caught-fail(early_secret_13) in
                                            {1124}let l_54: label = (if v_170 then tls13_ext_res_binder else caught-fail) in
                                            {1125}let m_15: bitstring = (if v_170 then zero else caught-fail) in
                                            {1126}let h_53: bitstring = (if v_170 then catch-fail(hash(@7_tls_h,m_15)) else caught-fail) in
                                            {1127}let v_171: bool = not-caught-fail(h_53) in
                                            {1128}let x_59: bitstring = (if v_171 then (l_54,h_53) else caught-fail) in
                                            {1129}let binder_key_9: bitstring = (if v_170 then catch-fail((if v_171 then hmac(@7_tls_h,early_secret_13,x_59) else fail-any)) else caught-fail) in
                                            {1130}let v_172: bool = not-caught-fail(binder_key_9) in
                                            {1131}let v_173: bitstring = (if v_168 then catch-fail((if v_170 then (if v_172 then (early_secret_13,binder_key_9) else fail-any) else fail-any)) else caught-fail) in
                                            {1132}let v_174: bool = (not-caught-fail(v_173) && success?(1-proj-2-tuple(v_173))) in
                                            {1133}let kb_9: mac_key = (if v_174 then 2-proj-2-tuple(v_173) else caught-fail) in
                                            {1134}let es_11: bitstring = (if v_174 then 1-proj-2-tuple(v_173) else caught-fail) in
                                            {1135}let v_175: bitstring = (if not(v_168) then catch-fail(psk_data'_2) else caught-fail) in
                                            {1136}let v_176: bool = (not-caught-fail(v_175) && success?(1-proj-4-tuple(v_175))) in
                                            {1137}let is_safe_6: bool = (if v_176 then 4-proj-4-tuple(v_175) else caught-fail) in
                                            {1138}let es_12: bitstring = (if v_176 then 3-proj-4-tuple(v_175) else caught-fail) in
                                            {1139}let id_12: identityPsk = (if v_176 then 2-proj-4-tuple(v_175) else caught-fail) in
                                            {1140}let psk_23: preSharedKey = (if v_176 then 1-proj-4-tuple(v_175) else caught-fail) in
                                            {1141}let (psk_24: preSharedKey,early_secret_14: bitstring,valid_2: bool,safe_psk_6: bool) = (if v_168 then (if v_174 then (NoPsk,es_11,true,false) else fail-any) else (if v_176 then (psk_23,es_12,((psk_23 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_8)),is_safe_6) else fail-any)) in
                                            {1142}event Client_PSKChoosen(@7_id_client,psk_24,safe_psk_6);
                                            {1143}if valid_2 then
                                            (
                                                {1144}let gxy_5: element = catch-fail(dh_decap_fun(g_2,gy_3,x_58)) in
                                                {1145}let v_177: bool = not-caught-fail(gxy_5) in
                                                {1146}new s_19[]: seed;
                                                {1147}let gxy_6: element = (if v_177 then gxy_5 else dh_f(s_19)) in
                                                {1148}event Client_DH_gxy(@7_id_client,gxy_6);
                                                {1149}let l_55: label = tls13_derived in
                                                {1150}let m_16: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1151}let v_178: bool = not-caught-fail(m_16) in
                                                {1152}let h_54: bitstring = (if v_178 then catch-fail(hash(@7_tls_h,m_16)) else caught-fail) in
                                                {1153}let v_179: bool = not-caught-fail(h_54) in
                                                {1154}let x_60: bitstring = (if v_179 then (l_55,h_54) else caught-fail) in
                                                {1155}let extra_8: bitstring = catch-fail((if v_178 then (if v_179 then hmac(@7_tls_h,early_secret_14,x_60) else fail-any) else fail-any)) in
                                                {1156}let v_180: bool = not-caught-fail(extra_8) in
                                                {1157}let handshake_secret_3: bitstring = (if v_180 then hmac(@7_tls_h,extra_8,gxy_6) else fail-any) in
                                                {1158}let l_56: label = tls13_derived in
                                                {1159}let m_17: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1160}let v_181: bool = not-caught-fail(m_17) in
                                                {1161}let h_55: bitstring = (if v_181 then catch-fail(hash(@7_tls_h,m_17)) else caught-fail) in
                                                {1162}let v_182: bool = not-caught-fail(h_55) in
                                                {1163}let x_61: bitstring = (if v_182 then (l_56,h_55) else caught-fail) in
                                                {1164}let extra_9: bitstring = catch-fail((if v_181 then (if v_182 then hmac(@7_tls_h,handshake_secret_3,x_61) else fail-any) else fail-any)) in
                                                {1165}let v_183: bool = not-caught-fail(extra_9) in
                                                {1166}let k_15: bitstring = (if v_183 then zero else caught-fail) in
                                                {1167}let master_secret_13: bitstring = (if v_183 then catch-fail(hmac(@7_tls_h,handshake_secret_3,k_15)) else caught-fail) in
                                                {1168}let v_184: bool = not-caught-fail(master_secret_13) in
                                                {1169}let l_57: label = (if v_184 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {1170}let h_56: bitstring = (if v_184 then catch-fail(hash(@7_tls_h,cur_log2_9)) else caught-fail) in
                                                {1171}let v_185: bool = not-caught-fail(h_56) in
                                                {1172}let x_62: bitstring = (if v_185 then (l_57,h_56) else caught-fail) in
                                                {1173}let client_hts_3: bitstring = (if v_184 then catch-fail((if v_185 then hmac(@7_tls_h,handshake_secret_3,x_62) else fail-any)) else caught-fail) in
                                                {1174}let v_186: bool = not-caught-fail(client_hts_3) in
                                                {1175}let l_58: label = (if v_186 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {1176}let h_57: bitstring = (if v_186 then catch-fail(hash(@7_tls_h,cur_log2_9)) else caught-fail) in
                                                {1177}let v_187: bool = not-caught-fail(h_57) in
                                                {1178}let x_63: bitstring = (if v_187 then (l_58,h_57) else caught-fail) in
                                                {1179}let server_hts_3: bitstring = (if v_186 then catch-fail((if v_187 then hmac(@7_tls_h,handshake_secret_3,x_63) else fail-any)) else caught-fail) in
                                                {1180}let v_188: bool = not-caught-fail(server_hts_3) in
                                                {1181}let l_59: label = (if v_188 then tls13_key else caught-fail) in
                                                {1182}let h_58: bitstring = (if v_188 then zero else caught-fail) in
                                                {1183}let x_64: bitstring = (if v_188 then (l_59,h_58) else caught-fail) in
                                                {1184}let client_wkh_3: bitstring = (if v_188 then catch-fail(hmac(@7_tls_h,client_hts_3,x_64)) else caught-fail) in
                                                {1185}let v_189: bool = not-caught-fail(client_wkh_3) in
                                                {1186}let l_60: label = (if v_189 then tls13_key else caught-fail) in
                                                {1187}let h_59: bitstring = (if v_189 then zero else caught-fail) in
                                                {1188}let x_65: bitstring = (if v_189 then (l_60,h_59) else caught-fail) in
                                                {1189}let server_wkh_3: bitstring = (if v_189 then catch-fail(hmac(@7_tls_h,server_hts_3,x_65)) else caught-fail) in
                                                {1190}let v_190: bool = not-caught-fail(server_wkh_3) in
                                                {1191}let l_61: label = (if v_190 then tls13_finished else caught-fail) in
                                                {1192}let h_60: bitstring = (if v_190 then zero else caught-fail) in
                                                {1193}let x_66: bitstring = (if v_190 then (l_61,h_60) else caught-fail) in
                                                {1194}let client_fk_3: bitstring = (if v_190 then catch-fail(hmac(@7_tls_h,client_hts_3,x_66)) else caught-fail) in
                                                {1195}let v_191: bool = not-caught-fail(client_fk_3) in
                                                {1196}let l_62: label = (if v_191 then tls13_finished else caught-fail) in
                                                {1197}let h_61: bitstring = (if v_191 then zero else caught-fail) in
                                                {1198}let x_67: bitstring = (if v_191 then (l_62,h_61) else caught-fail) in
                                                {1199}let server_fk_3: bitstring = (if v_191 then catch-fail(hmac(@7_tls_h,server_hts_3,x_67)) else caught-fail) in
                                                {1200}let v_192: bool = not-caught-fail(server_fk_3) in
                                                {1201}let (master_secret_14: bitstring,chk_10: aead_key,shk_9: aead_key,cfin_10: mac_key,sfin_9: mac_key) = (if v_183 then (if v_184 then (if v_186 then (if v_188 then (if v_189 then (if v_190 then (if v_191 then (if v_192 then (master_secret_13,client_wkh_3,server_wkh_3,client_fk_3,server_fk_3) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {1202}event Client_chk(@7_id_client,chk_10);
                                                {1203}event Client_shk(@7_id_client,shk_9);
                                                {1204}event Client_cfin(@7_id_client,cfin_10);
                                                {1205}event Client_sfin(@7_id_client,sfin_9);
                                                {1206}in(io, enc_ee_msg_2: bitstring);
                                                {1207}let ee_msg_3: msg = aead_dec(@7_tls_a,shk_9,0,zero,enc_ee_msg_2) in
                                                {1208}let EE(ech_ee_2: echExt,extra_ee_2: extraExt) = ee_msg_3 in
                                                {1209}let cur_log2_10: bitstring = (cur_log2_9,ee_msg_3) in
                                                {1210}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_2,sr_11,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_24,safe_psk_6,@7_comp_psk,master_secret_14,chk_10,0,shk_9,1,cfin_10,sfin_9,cur_log2_10)))
                                            )
                                            else
                                                {1211}out(io, illegal_parameter)
                                        )
                                        else
                                            {1212}out(io, illegal_parameter)
                                )
                                else
                                    {1213}out(io, unexpected_message)
                        )
                        else
                            {1214}out(io, illegal_parameter)
                    )
                    else
                        {1215}if send_kex then
                        (
                            {1216}let (x_68: bitstring,g_3: group) = kex_data_1 in
                            {1217}let (psk_offer_3: preSharedKey,id_offer_3: identityPsk,es_offer_3: bitstring,is_safe_offer_3: bool) = psk_data_1 in
                            {1218}event Client_PSKOffer(@7_id_client,psk_offer_3,id_offer_3,is_safe_offer_3);
                            {1219}event Client_Rand_client(@7_id_client,cr_10);
                            {1220}event Client_DH_client(@7_id_client,dh_pub(g_3,x_68));
                            {1221}event Client_server_domain(@7_id_client,s_dom_13);
                            {1222}let SH(sr_12: bytes32,mode_4: params) = server_hello_1 in
                            {1223}event Client_Rand_server(@7_id_client,sr_12);
                            {1224}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_3,gy_4: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_9: preSharedKeyExt) = mode_4 in
                            (
                                {1225}let cur_log2_11: bitstring = (cur_log2_4,server_hello_1) in
                                {1226}event Client_DH_server(@7_id_client,gy_4);
                                {1227}let v_193: bool = (psk_ext_9 = empty_psk_ext) in
                                {1228}let psk_25: preSharedKey = (if v_193 then NoPsk else caught-fail) in
                                {1229}let s_20: bitstring = (if v_193 then zero else caught-fail) in
                                {1230}let k_16: bitstring = (if v_193 then catch-fail(psk2b(psk_25)) else caught-fail) in
                                {1231}let v_194: bool = not-caught-fail(k_16) in
                                {1232}let early_secret_15: bitstring = (if v_193 then catch-fail((if v_194 then hmac(@7_tls_h,s_20,k_16) else fail-any)) else caught-fail) in
                                {1233}let v_195: bool = not-caught-fail(early_secret_15) in
                                {1234}let l_63: label = (if v_195 then tls13_ext_res_binder else caught-fail) in
                                {1235}let m_18: bitstring = (if v_195 then zero else caught-fail) in
                                {1236}let h_62: bitstring = (if v_195 then catch-fail(hash(@7_tls_h,m_18)) else caught-fail) in
                                {1237}let v_196: bool = not-caught-fail(h_62) in
                                {1238}let x_69: bitstring = (if v_196 then (l_63,h_62) else caught-fail) in
                                {1239}let binder_key_10: bitstring = (if v_195 then catch-fail((if v_196 then hmac(@7_tls_h,early_secret_15,x_69) else fail-any)) else caught-fail) in
                                {1240}let v_197: bool = not-caught-fail(binder_key_10) in
                                {1241}let v_198: bitstring = (if v_193 then catch-fail((if v_195 then (if v_197 then (early_secret_15,binder_key_10) else fail-any) else fail-any)) else caught-fail) in
                                {1242}let v_199: bool = (not-caught-fail(v_198) && success?(1-proj-2-tuple(v_198))) in
                                {1243}let kb_10: mac_key = (if v_199 then 2-proj-2-tuple(v_198) else caught-fail) in
                                {1244}let es_13: bitstring = (if v_199 then 1-proj-2-tuple(v_198) else caught-fail) in
                                {1245}let v_200: bitstring = (if not(v_193) then catch-fail(psk_data_1) else caught-fail) in
                                {1246}let v_201: bool = (not-caught-fail(v_200) && success?(1-proj-4-tuple(v_200))) in
                                {1247}let is_safe_7: bool = (if v_201 then 4-proj-4-tuple(v_200) else caught-fail) in
                                {1248}let es_14: bitstring = (if v_201 then 3-proj-4-tuple(v_200) else caught-fail) in
                                {1249}let id_13: identityPsk = (if v_201 then 2-proj-4-tuple(v_200) else caught-fail) in
                                {1250}let psk_26: preSharedKey = (if v_201 then 1-proj-4-tuple(v_200) else caught-fail) in
                                {1251}let (psk_27: preSharedKey,early_secret_16: bitstring,valid_3: bool,safe_psk_7: bool) = (if v_193 then (if v_199 then (NoPsk,es_13,true,false) else fail-any) else (if v_201 then (psk_26,es_14,((psk_26 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_9)),is_safe_7) else fail-any)) in
                                {1252}event Client_PSKChoosen(@7_id_client,psk_27,safe_psk_7);
                                {1253}if valid_3 then
                                (
                                    {1254}let gxy_7: element = catch-fail(dh_decap_fun(g_3,gy_4,x_68)) in
                                    {1255}let v_202: bool = not-caught-fail(gxy_7) in
                                    {1256}new s_21[]: seed;
                                    {1257}let gxy_8: element = (if v_202 then gxy_7 else dh_f(s_21)) in
                                    {1258}event Client_DH_gxy(@7_id_client,gxy_8);
                                    {1259}let l_64: label = tls13_derived in
                                    {1260}let m_19: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1261}let v_203: bool = not-caught-fail(m_19) in
                                    {1262}let h_63: bitstring = (if v_203 then catch-fail(hash(@7_tls_h,m_19)) else caught-fail) in
                                    {1263}let v_204: bool = not-caught-fail(h_63) in
                                    {1264}let x_70: bitstring = (if v_204 then (l_64,h_63) else caught-fail) in
                                    {1265}let extra_10: bitstring = catch-fail((if v_203 then (if v_204 then hmac(@7_tls_h,early_secret_16,x_70) else fail-any) else fail-any)) in
                                    {1266}let v_205: bool = not-caught-fail(extra_10) in
                                    {1267}let handshake_secret_4: bitstring = (if v_205 then hmac(@7_tls_h,extra_10,gxy_8) else fail-any) in
                                    {1268}let l_65: label = tls13_derived in
                                    {1269}let m_20: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1270}let v_206: bool = not-caught-fail(m_20) in
                                    {1271}let h_64: bitstring = (if v_206 then catch-fail(hash(@7_tls_h,m_20)) else caught-fail) in
                                    {1272}let v_207: bool = not-caught-fail(h_64) in
                                    {1273}let x_71: bitstring = (if v_207 then (l_65,h_64) else caught-fail) in
                                    {1274}let extra_11: bitstring = catch-fail((if v_206 then (if v_207 then hmac(@7_tls_h,handshake_secret_4,x_71) else fail-any) else fail-any)) in
                                    {1275}let v_208: bool = not-caught-fail(extra_11) in
                                    {1276}let k_17: bitstring = (if v_208 then zero else caught-fail) in
                                    {1277}let master_secret_15: bitstring = (if v_208 then catch-fail(hmac(@7_tls_h,handshake_secret_4,k_17)) else caught-fail) in
                                    {1278}let v_209: bool = not-caught-fail(master_secret_15) in
                                    {1279}let l_66: label = (if v_209 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {1280}let h_65: bitstring = (if v_209 then catch-fail(hash(@7_tls_h,cur_log2_11)) else caught-fail) in
                                    {1281}let v_210: bool = not-caught-fail(h_65) in
                                    {1282}let x_72: bitstring = (if v_210 then (l_66,h_65) else caught-fail) in
                                    {1283}let client_hts_4: bitstring = (if v_209 then catch-fail((if v_210 then hmac(@7_tls_h,handshake_secret_4,x_72) else fail-any)) else caught-fail) in
                                    {1284}let v_211: bool = not-caught-fail(client_hts_4) in
                                    {1285}let l_67: label = (if v_211 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {1286}let h_66: bitstring = (if v_211 then catch-fail(hash(@7_tls_h,cur_log2_11)) else caught-fail) in
                                    {1287}let v_212: bool = not-caught-fail(h_66) in
                                    {1288}let x_73: bitstring = (if v_212 then (l_67,h_66) else caught-fail) in
                                    {1289}let server_hts_4: bitstring = (if v_211 then catch-fail((if v_212 then hmac(@7_tls_h,handshake_secret_4,x_73) else fail-any)) else caught-fail) in
                                    {1290}let v_213: bool = not-caught-fail(server_hts_4) in
                                    {1291}let l_68: label = (if v_213 then tls13_key else caught-fail) in
                                    {1292}let h_67: bitstring = (if v_213 then zero else caught-fail) in
                                    {1293}let x_74: bitstring = (if v_213 then (l_68,h_67) else caught-fail) in
                                    {1294}let client_wkh_4: bitstring = (if v_213 then catch-fail(hmac(@7_tls_h,client_hts_4,x_74)) else caught-fail) in
                                    {1295}let v_214: bool = not-caught-fail(client_wkh_4) in
                                    {1296}let l_69: label = (if v_214 then tls13_key else caught-fail) in
                                    {1297}let h_68: bitstring = (if v_214 then zero else caught-fail) in
                                    {1298}let x_75: bitstring = (if v_214 then (l_69,h_68) else caught-fail) in
                                    {1299}let server_wkh_4: bitstring = (if v_214 then catch-fail(hmac(@7_tls_h,server_hts_4,x_75)) else caught-fail) in
                                    {1300}let v_215: bool = not-caught-fail(server_wkh_4) in
                                    {1301}let l_70: label = (if v_215 then tls13_finished else caught-fail) in
                                    {1302}let h_69: bitstring = (if v_215 then zero else caught-fail) in
                                    {1303}let x_76: bitstring = (if v_215 then (l_70,h_69) else caught-fail) in
                                    {1304}let client_fk_4: bitstring = (if v_215 then catch-fail(hmac(@7_tls_h,client_hts_4,x_76)) else caught-fail) in
                                    {1305}let v_216: bool = not-caught-fail(client_fk_4) in
                                    {1306}let l_71: label = (if v_216 then tls13_finished else caught-fail) in
                                    {1307}let h_70: bitstring = (if v_216 then zero else caught-fail) in
                                    {1308}let x_77: bitstring = (if v_216 then (l_71,h_70) else caught-fail) in
                                    {1309}let server_fk_4: bitstring = (if v_216 then catch-fail(hmac(@7_tls_h,server_hts_4,x_77)) else caught-fail) in
                                    {1310}let v_217: bool = not-caught-fail(server_fk_4) in
                                    {1311}let (master_secret_16: bitstring,chk_11: aead_key,shk_10: aead_key,cfin_11: mac_key,sfin_10: mac_key) = (if v_208 then (if v_209 then (if v_211 then (if v_213 then (if v_214 then (if v_215 then (if v_216 then (if v_217 then (master_secret_15,client_wkh_4,server_wkh_4,client_fk_4,server_fk_4) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {1312}event Client_chk(@7_id_client,chk_11);
                                    {1313}event Client_shk(@7_id_client,shk_10);
                                    {1314}event Client_cfin(@7_id_client,cfin_11);
                                    {1315}event Client_sfin(@7_id_client,sfin_10);
                                    {1316}in(io, enc_ee_msg_3: bitstring);
                                    {1317}let ee_msg_4: msg = aead_dec(@7_tls_a,shk_10,0,zero,enc_ee_msg_3) in
                                    {1318}let EE(ech_ee_3: echExt,extra_ee_3: extraExt) = ee_msg_4 in
                                    {1319}let cur_log2_12: bitstring = (cur_log2_11,ee_msg_4) in
                                    {1320}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr_10,sr_12,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_27,safe_psk_7,@7_comp_psk,master_secret_16,chk_11,0,shk_10,1,cfin_11,sfin_10,cur_log2_12)))
                                )
                                else
                                    {1321}out(io, illegal_parameter)
                            )
                            else
                                {1322}out(io, illegal_parameter)
                        )
                        else
                            {1323}out(io, illegal_parameter)
                )
                else
                    {1324}out(io, unexpected_message)
            )
        )
        else
            {1964}get pre_shared_keys(c_dom'_3: domain,=s_dom_13,=@7_tls_h,id_14: identityPsk,psk_28: preSharedKey,idP_6: idProc,is_safe_8: bool) in
            {1325}event Selected_one_time_used_psk(@7_id_client,psk_28,is_safe_8);
            {1326}event Selected_psk(c_dom_6,c_dom'_3,idP_6,is_safe_8);
            {1327}event Selected_psk_no_missmatch(@7_id_client,s_dom_13,@7_tls_h,psk_28,id_14);
            {1328}event Selected_psk_with_ID(c_dom_6,c_dom'_3,id_14,idP_6,is_safe_8);
            {1329}let v_218: bitstring = (id_14,psk_28,is_safe_8) in
            {1330}let v_219: bool = success?(1-proj-3-tuple(v_218)) in
            {1331}let is_safe_9: bool = (if v_219 then 3-proj-3-tuple(v_218) else caught-fail) in
            {1332}let psk_29: preSharedKey = (if v_219 then 2-proj-3-tuple(v_218) else caught-fail) in
            {1333}let id_15: identityPsk = (if v_219 then 1-proj-3-tuple(v_218) else caught-fail) in
            {1334}let offer_9: params = (if v_219 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_13),ech_ext_2,extra_2,trunc_client_psk_ext(id_15)) else caught-fail) in
            {1335}let cur_log'_5: bitstring = (if v_219 then (cur_log_8,CH(cr_9,offer_9)) else caught-fail) in
            {1336}let s_22: bitstring = (if v_219 then zero else caught-fail) in
            {1337}let k_18: bitstring = (if v_219 then catch-fail(psk2b(psk_29)) else caught-fail) in
            {1338}let v_220: bool = not-caught-fail(k_18) in
            {1339}let early_secret_17: bitstring = (if v_219 then catch-fail((if v_220 then hmac(@7_tls_h,s_22,k_18) else fail-any)) else caught-fail) in
            {1340}let v_221: bool = not-caught-fail(early_secret_17) in
            {1341}let l_72: label = (if v_221 then tls13_ext_res_binder else caught-fail) in
            {1342}let m_21: bitstring = (if v_221 then zero else caught-fail) in
            {1343}let h_71: bitstring = (if v_221 then catch-fail(hash(@7_tls_h,m_21)) else caught-fail) in
            {1344}let v_222: bool = not-caught-fail(h_71) in
            {1345}let x_78: bitstring = (if v_222 then (l_72,h_71) else caught-fail) in
            {1346}let binder_key_11: bitstring = (if v_221 then catch-fail((if v_222 then hmac(@7_tls_h,early_secret_17,x_78) else fail-any)) else caught-fail) in
            {1347}let v_223: bool = not-caught-fail(binder_key_11) in
            {1348}let v_224: bitstring = (if v_219 then catch-fail((if v_221 then (if v_223 then (early_secret_17,binder_key_11) else fail-any) else fail-any)) else caught-fail) in
            {1349}let v_225: bool = (not-caught-fail(v_224) && success?(1-proj-2-tuple(v_224))) in
            {1350}let kb_11: mac_key = (if v_225 then 2-proj-2-tuple(v_224) else caught-fail) in
            {1351}let es_15: bitstring = (if v_225 then 1-proj-2-tuple(v_224) else caught-fail) in
            {1352}let binders_4: bitstring = (if v_225 then catch-fail(hmac(@7_tls_h,kb_11,cur_log'_5)) else caught-fail) in
            {1353}let v_226: bool = not-caught-fail(binders_4) in
            {1354}let v_227: bitstring = catch-fail((if v_219 then (if v_225 then (if v_226 then (client_psk_ext(id_15,binders_4),(psk_29,id_15,es_15,is_safe_9)) else fail-any) else fail-any) else fail-any)) in
            {1355}let v_228: bool = (not-caught-fail(v_227) && success?(1-proj-2-tuple(v_227))) in
            {1356}let psk_data_5: bitstring = (if v_228 then 2-proj-2-tuple(v_227) else caught-fail) in
            {1357}let psk_ext_10: preSharedKeyExt = (if v_228 then 1-proj-2-tuple(v_227) else caught-fail) in
            {1358}let offer_10: params = (if v_228 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_10) else caught-fail) in
            {1359}let (client_hello_3: msg,cr_12: bytes32,kex_data_3: bitstring,psk_data_6: bitstring) = (if v_228 then (CH(cr_9,offer_10),cr_9,kex_data,psk_data_5) else fail-any) in
            {1360}event ClientOffersAead(cr_12,@7_tls_a);
            {1361}event ClientOffersHash(cr_12,@7_tls_h);
            {1362}event ClientOffersGroup(cr_12,@7_tls_g);
            {1363}out(io, client_hello_3);
            {1364}let cur_log2_13: bitstring = (cur_log_8,client_hello_3) in
            {1365}let (psk_30: preSharedKey,id_16: identityPsk,es_16: bitstring,safe_psk_8: bool) = psk_data_6 in
            (
                {1366}if (false && (psk_30 ≠ NoPsk)) then
                {1367}let client_hello_4: bitstring = (zero,client_hello_3) in
                {1368}let l_73: label = tls13_client_early_traffic_secret in
                {1369}let h_72: bitstring = catch-fail(hash(@7_tls_h,client_hello_4)) in
                {1370}let v_229: bool = not-caught-fail(h_72) in
                {1371}let x_79: bitstring = (if v_229 then (l_73,h_72) else caught-fail) in
                {1372}let atsc0_2: bitstring = catch-fail((if v_229 then hmac(@7_tls_h,es_16,x_79) else fail-any)) in
                {1373}let v_230: bool = not-caught-fail(atsc0_2) in
                {1374}let l_74: label = (if v_230 then tls13_key else caught-fail) in
                {1375}let h_73: bitstring = (if v_230 then zero else caught-fail) in
                {1376}let x_80: bitstring = (if v_230 then (l_74,h_73) else caught-fail) in
                {1377}let kc0_2: bitstring = (if v_230 then catch-fail(hmac(@7_tls_h,atsc0_2,x_80)) else caught-fail) in
                {1378}let v_231: bool = not-caught-fail(kc0_2) in
                {1379}let l_75: label = (if v_231 then tls13_early_exporter_master_secret else caught-fail) in
                {1380}let h_74: bitstring = (if v_231 then catch-fail(hash(@7_tls_h,client_hello_4)) else caught-fail) in
                {1381}let v_232: bool = not-caught-fail(h_74) in
                {1382}let x_81: bitstring = (if v_232 then (l_75,h_74) else caught-fail) in
                {1383}let ems0_4: bitstring = (if v_231 then catch-fail((if v_232 then hmac(@7_tls_h,es_16,x_81) else fail-any)) else caught-fail) in
                {1384}let v_233: bool = not-caught-fail(ems0_4) in
                {1385}let (wkc0_2: aead_key,ems0_5: bitstring) = (if v_230 then (if v_231 then (if v_233 then (kc0_2,ems0_4) else fail-any) else fail-any) else fail-any) in
                {1386}!
                {1387}in(io, (i_2: nat,ad_2: bitstring));
                {1388}if is_nat(i_2) then
                {1389}new msg_ed_1[]: bitstring;
                {1390}let enc_ed_1: bitstring = aead_enc(@7_tls_a,wkc0_2,i_2,ad_2,msg_ed_1) in
                {1391}new st_11: stamp;
                {1392}event ClientSequenceClient0RTTDataWriteKey(@7_id_client,st_11,i_2);
                {1393}event ClientSends0(@7_id_client,cr_12,psk_30,i_2,ad_2,msg_ed_1);
                {1394}out(io, enc_ed_1)
            ) | (
                {1395}in(io, server_hello_2: msg);
                {1396}let SH(sr_13: bytes32,mode_5: params) = server_hello_2 in
                (
                    {1397}event ClientEchAcceptance(@7_id_client,false);
                    {1398}if (true && (sr_13 = B32(HRR24,HRR8))) then
                    (
                        {1399}if ((mode_5 = nego(TLS13,@7_tls_h,@7_tls_a,hrr_kex_ext(@7_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex ≠ true)) then
                        (
                            {1400}let cur_log3_3: bitstring = (cur_log2_13,server_hello_2) in
                            {1401}let send_kex_2: bool = true in
                            {1402}new rand24_3[]: bytes24;
                            {1403}new rand8_3[]: bytes8;
                            {1404}let cr_13: bytes32 = B32(rand24_3,rand8_3) in
                            {1405}new s_23[]: seed;
                            {1406}let gx_6: element = dh_pub(@7_tls_g,dh_k(s_23)) in
                            {1407}let v_234: bitstring = (dh_k(s_23),gx_6) in
                            {1408}let v_235: bool = success?(1-proj-2-tuple(v_234)) in
                            {1409}let gx_7: element = (if v_235 then 2-proj-2-tuple(v_234) else caught-fail) in
                            {1410}let x_82: bitstring = (if v_235 then 1-proj-2-tuple(v_234) else caught-fail) in
                            {1411}let kex_2: kex_alg = (if v_235 then (if send_kex_2 then DHE_kex(@7_tls_g,gx_7) else DHE_group(@7_tls_g)) else caught-fail) in
                            {1412}let (kex_ext_3: keyShareExt,kex_data_4: bitstring) = (if v_235 then (client_kex_ext(kex_2),(x_82,@7_tls_g)) else fail-any) in
                            {1413}let ech_ext_4: echExt = empty_ech_ext in
                            {1414}let extra_12: extraExt = empty_extra_ext in
                            {1415}if @7_use_psk then
                            (
                                {1416}let (psk_31: preSharedKey,id_17: identityPsk,old_es_2: bitstring,is_safe_10: bool) = psk_data_6 in
                                (
                                    {1417}let offer_11: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_13),ech_ext_4,extra_12,trunc_client_psk_ext(id_17)) in
                                    {1418}let cur_log'_6: bitstring = (cur_log3_3,CH(cr_13,offer_11)) in
                                    {1419}let s_24: bitstring = zero in
                                    {1420}let k_19: bitstring = catch-fail(psk2b(psk_31)) in
                                    {1421}let v_236: bool = not-caught-fail(k_19) in
                                    {1422}let early_secret_18: bitstring = catch-fail((if v_236 then hmac(@7_tls_h,s_24,k_19) else fail-any)) in
                                    {1423}let v_237: bool = not-caught-fail(early_secret_18) in
                                    {1424}let l_76: label = (if v_237 then tls13_ext_res_binder else caught-fail) in
                                    {1425}let m_22: bitstring = (if v_237 then zero else caught-fail) in
                                    {1426}let h_75: bitstring = (if v_237 then catch-fail(hash(@7_tls_h,m_22)) else caught-fail) in
                                    {1427}let v_238: bool = not-caught-fail(h_75) in
                                    {1428}let x_83: bitstring = (if v_238 then (l_76,h_75) else caught-fail) in
                                    {1429}let binder_key_12: bitstring = (if v_237 then catch-fail((if v_238 then hmac(@7_tls_h,early_secret_18,x_83) else fail-any)) else caught-fail) in
                                    {1430}let v_239: bool = not-caught-fail(binder_key_12) in
                                    {1431}let v_240: bitstring = catch-fail((if v_237 then (if v_239 then (early_secret_18,binder_key_12) else fail-any) else fail-any)) in
                                    {1432}let v_241: bool = (not-caught-fail(v_240) && success?(1-proj-2-tuple(v_240))) in
                                    {1433}let kb_12: mac_key = (if v_241 then 2-proj-2-tuple(v_240) else caught-fail) in
                                    {1434}let es_17: bitstring = (if v_241 then 1-proj-2-tuple(v_240) else caught-fail) in
                                    {1435}let binders_5: bitstring = (if v_241 then catch-fail(hmac(@7_tls_h,kb_12,cur_log'_6)) else caught-fail) in
                                    {1436}let v_242: bool = not-caught-fail(binders_5) in
                                    {1437}let v_243: bitstring = catch-fail((if v_241 then (if v_242 then (client_psk_ext(id_17,binders_5),(psk_31,id_17,es_17,is_safe_10)) else fail-any) else fail-any)) in
                                    {1438}let v_244: bool = (not-caught-fail(v_243) && success?(1-proj-2-tuple(v_243))) in
                                    {1439}let psk_data_7: bitstring = (if v_244 then 2-proj-2-tuple(v_243) else caught-fail) in
                                    {1440}let psk_ext_11: preSharedKeyExt = (if v_244 then 1-proj-2-tuple(v_243) else caught-fail) in
                                    {1441}let offer_12: params = (if v_244 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_11) else caught-fail) in
                                    {1442}let (client_hello'_3: msg,cr'_3: bytes32,kex_data'_3: bitstring,psk_data'_3: bitstring) = (if v_244 then (CH(cr_13,offer_12),cr_13,kex_data_4,psk_data_7) else fail-any) in
                                    {1443}event ClientOffersAead(cr'_3,@7_tls_a);
                                    {1444}event ClientOffersHash(cr'_3,@7_tls_h);
                                    {1445}event ClientOffersGroup(cr'_3,@7_tls_g);
                                    {1446}out(io, client_hello'_3);
                                    {1447}let cur_log4_3: bitstring = (cur_log3_3,client_hello'_3) in
                                    {1448}in(io, server_hello'_3: msg);
                                    {1449}let SH(sr'_3: bytes32,mode'_3: params) = server_hello'_3 in
                                    (
                                        {1450}if (sr'_3 = B32(HRR24,HRR8)) then
                                            {1451}out(io, unexpected_message)
                                        else
                                            {1452}let (x_84: bitstring,g_4: group) = kex_data'_3 in
                                            {1453}let (psk_offer_4: preSharedKey,id_offer_4: identityPsk,es_offer_4: bitstring,is_safe_offer_4: bool) = psk_data'_3 in
                                            {1454}event Client_PSKOffer(@7_id_client,psk_offer_4,id_offer_4,is_safe_offer_4);
                                            {1455}event Client_Rand_client(@7_id_client,cr'_3);
                                            {1456}event Client_DH_client(@7_id_client,dh_pub(g_4,x_84));
                                            {1457}event Client_server_domain(@7_id_client,s_dom_13);
                                            {1458}let SH(sr_14: bytes32,mode_6: params) = server_hello'_3 in
                                            {1459}event Client_Rand_server(@7_id_client,sr_14);
                                            {1460}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_4,gy_5: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_12: preSharedKeyExt) = mode_6 in
                                            (
                                                {1461}let cur_log2_14: bitstring = (cur_log4_3,server_hello'_3) in
                                                {1462}event Client_DH_server(@7_id_client,gy_5);
                                                {1463}let v_245: bool = (psk_ext_12 = empty_psk_ext) in
                                                {1464}let psk_32: preSharedKey = (if v_245 then NoPsk else caught-fail) in
                                                {1465}let s_25: bitstring = (if v_245 then zero else caught-fail) in
                                                {1466}let k_20: bitstring = (if v_245 then catch-fail(psk2b(psk_32)) else caught-fail) in
                                                {1467}let v_246: bool = not-caught-fail(k_20) in
                                                {1468}let early_secret_19: bitstring = (if v_245 then catch-fail((if v_246 then hmac(@7_tls_h,s_25,k_20) else fail-any)) else caught-fail) in
                                                {1469}let v_247: bool = not-caught-fail(early_secret_19) in
                                                {1470}let l_77: label = (if v_247 then tls13_ext_res_binder else caught-fail) in
                                                {1471}let m_23: bitstring = (if v_247 then zero else caught-fail) in
                                                {1472}let h_76: bitstring = (if v_247 then catch-fail(hash(@7_tls_h,m_23)) else caught-fail) in
                                                {1473}let v_248: bool = not-caught-fail(h_76) in
                                                {1474}let x_85: bitstring = (if v_248 then (l_77,h_76) else caught-fail) in
                                                {1475}let binder_key_13: bitstring = (if v_247 then catch-fail((if v_248 then hmac(@7_tls_h,early_secret_19,x_85) else fail-any)) else caught-fail) in
                                                {1476}let v_249: bool = not-caught-fail(binder_key_13) in
                                                {1477}let v_250: bitstring = (if v_245 then catch-fail((if v_247 then (if v_249 then (early_secret_19,binder_key_13) else fail-any) else fail-any)) else caught-fail) in
                                                {1478}let v_251: bool = (not-caught-fail(v_250) && success?(1-proj-2-tuple(v_250))) in
                                                {1479}let kb_13: mac_key = (if v_251 then 2-proj-2-tuple(v_250) else caught-fail) in
                                                {1480}let es_18: bitstring = (if v_251 then 1-proj-2-tuple(v_250) else caught-fail) in
                                                {1481}let v_252: bitstring = (if not(v_245) then catch-fail(psk_data'_3) else caught-fail) in
                                                {1482}let v_253: bool = (not-caught-fail(v_252) && success?(1-proj-4-tuple(v_252))) in
                                                {1483}let is_safe_11: bool = (if v_253 then 4-proj-4-tuple(v_252) else caught-fail) in
                                                {1484}let es_19: bitstring = (if v_253 then 3-proj-4-tuple(v_252) else caught-fail) in
                                                {1485}let id_18: identityPsk = (if v_253 then 2-proj-4-tuple(v_252) else caught-fail) in
                                                {1486}let psk_33: preSharedKey = (if v_253 then 1-proj-4-tuple(v_252) else caught-fail) in
                                                {1487}let (psk_34: preSharedKey,early_secret_20: bitstring,valid_4: bool,safe_psk_9: bool) = (if v_245 then (if v_251 then (NoPsk,es_18,true,false) else fail-any) else (if v_253 then (psk_33,es_19,((psk_33 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_12)),is_safe_11) else fail-any)) in
                                                {1488}event Client_PSKChoosen(@7_id_client,psk_34,safe_psk_9);
                                                {1489}if valid_4 then
                                                (
                                                    {1490}let gxy_9: element = catch-fail(dh_decap_fun(g_4,gy_5,x_84)) in
                                                    {1491}let v_254: bool = not-caught-fail(gxy_9) in
                                                    {1492}new s_26[]: seed;
                                                    {1493}let gxy_10: element = (if v_254 then gxy_9 else dh_f(s_26)) in
                                                    {1494}event Client_DH_gxy(@7_id_client,gxy_10);
                                                    {1495}let l_78: label = tls13_derived in
                                                    {1496}let m_24: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1497}let v_255: bool = not-caught-fail(m_24) in
                                                    {1498}let h_77: bitstring = (if v_255 then catch-fail(hash(@7_tls_h,m_24)) else caught-fail) in
                                                    {1499}let v_256: bool = not-caught-fail(h_77) in
                                                    {1500}let x_86: bitstring = (if v_256 then (l_78,h_77) else caught-fail) in
                                                    {1501}let extra_13: bitstring = catch-fail((if v_255 then (if v_256 then hmac(@7_tls_h,early_secret_20,x_86) else fail-any) else fail-any)) in
                                                    {1502}let v_257: bool = not-caught-fail(extra_13) in
                                                    {1503}let handshake_secret_5: bitstring = (if v_257 then hmac(@7_tls_h,extra_13,gxy_10) else fail-any) in
                                                    {1504}let l_79: label = tls13_derived in
                                                    {1505}let m_25: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1506}let v_258: bool = not-caught-fail(m_25) in
                                                    {1507}let h_78: bitstring = (if v_258 then catch-fail(hash(@7_tls_h,m_25)) else caught-fail) in
                                                    {1508}let v_259: bool = not-caught-fail(h_78) in
                                                    {1509}let x_87: bitstring = (if v_259 then (l_79,h_78) else caught-fail) in
                                                    {1510}let extra_14: bitstring = catch-fail((if v_258 then (if v_259 then hmac(@7_tls_h,handshake_secret_5,x_87) else fail-any) else fail-any)) in
                                                    {1511}let v_260: bool = not-caught-fail(extra_14) in
                                                    {1512}let k_21: bitstring = (if v_260 then zero else caught-fail) in
                                                    {1513}let master_secret_17: bitstring = (if v_260 then catch-fail(hmac(@7_tls_h,handshake_secret_5,k_21)) else caught-fail) in
                                                    {1514}let v_261: bool = not-caught-fail(master_secret_17) in
                                                    {1515}let l_80: label = (if v_261 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {1516}let h_79: bitstring = (if v_261 then catch-fail(hash(@7_tls_h,cur_log2_14)) else caught-fail) in
                                                    {1517}let v_262: bool = not-caught-fail(h_79) in
                                                    {1518}let x_88: bitstring = (if v_262 then (l_80,h_79) else caught-fail) in
                                                    {1519}let client_hts_5: bitstring = (if v_261 then catch-fail((if v_262 then hmac(@7_tls_h,handshake_secret_5,x_88) else fail-any)) else caught-fail) in
                                                    {1520}let v_263: bool = not-caught-fail(client_hts_5) in
                                                    {1521}let l_81: label = (if v_263 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {1522}let h_80: bitstring = (if v_263 then catch-fail(hash(@7_tls_h,cur_log2_14)) else caught-fail) in
                                                    {1523}let v_264: bool = not-caught-fail(h_80) in
                                                    {1524}let x_89: bitstring = (if v_264 then (l_81,h_80) else caught-fail) in
                                                    {1525}let server_hts_5: bitstring = (if v_263 then catch-fail((if v_264 then hmac(@7_tls_h,handshake_secret_5,x_89) else fail-any)) else caught-fail) in
                                                    {1526}let v_265: bool = not-caught-fail(server_hts_5) in
                                                    {1527}let l_82: label = (if v_265 then tls13_key else caught-fail) in
                                                    {1528}let h_81: bitstring = (if v_265 then zero else caught-fail) in
                                                    {1529}let x_90: bitstring = (if v_265 then (l_82,h_81) else caught-fail) in
                                                    {1530}let client_wkh_5: bitstring = (if v_265 then catch-fail(hmac(@7_tls_h,client_hts_5,x_90)) else caught-fail) in
                                                    {1531}let v_266: bool = not-caught-fail(client_wkh_5) in
                                                    {1532}let l_83: label = (if v_266 then tls13_key else caught-fail) in
                                                    {1533}let h_82: bitstring = (if v_266 then zero else caught-fail) in
                                                    {1534}let x_91: bitstring = (if v_266 then (l_83,h_82) else caught-fail) in
                                                    {1535}let server_wkh_5: bitstring = (if v_266 then catch-fail(hmac(@7_tls_h,server_hts_5,x_91)) else caught-fail) in
                                                    {1536}let v_267: bool = not-caught-fail(server_wkh_5) in
                                                    {1537}let l_84: label = (if v_267 then tls13_finished else caught-fail) in
                                                    {1538}let h_83: bitstring = (if v_267 then zero else caught-fail) in
                                                    {1539}let x_92: bitstring = (if v_267 then (l_84,h_83) else caught-fail) in
                                                    {1540}let client_fk_5: bitstring = (if v_267 then catch-fail(hmac(@7_tls_h,client_hts_5,x_92)) else caught-fail) in
                                                    {1541}let v_268: bool = not-caught-fail(client_fk_5) in
                                                    {1542}let l_85: label = (if v_268 then tls13_finished else caught-fail) in
                                                    {1543}let h_84: bitstring = (if v_268 then zero else caught-fail) in
                                                    {1544}let x_93: bitstring = (if v_268 then (l_85,h_84) else caught-fail) in
                                                    {1545}let server_fk_5: bitstring = (if v_268 then catch-fail(hmac(@7_tls_h,server_hts_5,x_93)) else caught-fail) in
                                                    {1546}let v_269: bool = not-caught-fail(server_fk_5) in
                                                    {1547}let (master_secret_18: bitstring,chk_12: aead_key,shk_11: aead_key,cfin_12: mac_key,sfin_11: mac_key) = (if v_260 then (if v_261 then (if v_263 then (if v_265 then (if v_266 then (if v_267 then (if v_268 then (if v_269 then (master_secret_17,client_wkh_5,server_wkh_5,client_fk_5,server_fk_5) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {1548}event Client_chk(@7_id_client,chk_12);
                                                    {1549}event Client_shk(@7_id_client,shk_11);
                                                    {1550}event Client_cfin(@7_id_client,cfin_12);
                                                    {1551}event Client_sfin(@7_id_client,sfin_11);
                                                    {1552}in(io, enc_ee_msg_4: bitstring);
                                                    {1553}let ee_msg_5: msg = aead_dec(@7_tls_a,shk_11,0,zero,enc_ee_msg_4) in
                                                    {1554}let EE(ech_ee_4: echExt,extra_ee_4: extraExt) = ee_msg_5 in
                                                    {1555}let cur_log2_15: bitstring = (cur_log2_14,ee_msg_5) in
                                                    {1556}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_3,sr_14,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_34,safe_psk_9,@7_comp_psk,master_secret_18,chk_12,0,shk_11,1,cfin_12,sfin_11,cur_log2_15)))
                                                )
                                                else
                                                    {1557}out(io, illegal_parameter)
                                            )
                                            else
                                                {1558}out(io, illegal_parameter)
                                    )
                                    else
                                        {1559}out(io, unexpected_message)
                                )
                                else
                                    {1712}get pre_shared_keys(c_dom'_4: domain,=s_dom_13,=@7_tls_h,id_19: identityPsk,psk_35: preSharedKey,idP_7: idProc,is_safe_12: bool) in
                                    {1560}event Selected_one_time_used_psk(@7_id_client,psk_35,is_safe_12);
                                    {1561}event Selected_psk(c_dom_6,c_dom'_4,idP_7,is_safe_12);
                                    {1562}event Selected_psk_no_missmatch(@7_id_client,s_dom_13,@7_tls_h,psk_35,id_19);
                                    {1563}event Selected_psk_with_ID(c_dom_6,c_dom'_4,id_19,idP_7,is_safe_12);
                                    {1564}let v_270: bitstring = (id_19,psk_35,is_safe_12) in
                                    {1565}let v_271: bool = success?(1-proj-3-tuple(v_270)) in
                                    {1566}let is_safe_13: bool = (if v_271 then 3-proj-3-tuple(v_270) else caught-fail) in
                                    {1567}let psk_36: preSharedKey = (if v_271 then 2-proj-3-tuple(v_270) else caught-fail) in
                                    {1568}let id_20: identityPsk = (if v_271 then 1-proj-3-tuple(v_270) else caught-fail) in
                                    {1569}let offer_13: params = (if v_271 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_13),ech_ext_4,extra_12,trunc_client_psk_ext(id_20)) else caught-fail) in
                                    {1570}let cur_log'_7: bitstring = (if v_271 then (cur_log3_3,CH(cr_13,offer_13)) else caught-fail) in
                                    {1571}let s_27: bitstring = (if v_271 then zero else caught-fail) in
                                    {1572}let k_22: bitstring = (if v_271 then catch-fail(psk2b(psk_36)) else caught-fail) in
                                    {1573}let v_272: bool = not-caught-fail(k_22) in
                                    {1574}let early_secret_21: bitstring = (if v_271 then catch-fail((if v_272 then hmac(@7_tls_h,s_27,k_22) else fail-any)) else caught-fail) in
                                    {1575}let v_273: bool = not-caught-fail(early_secret_21) in
                                    {1576}let l_86: label = (if v_273 then tls13_ext_res_binder else caught-fail) in
                                    {1577}let m_26: bitstring = (if v_273 then zero else caught-fail) in
                                    {1578}let h_85: bitstring = (if v_273 then catch-fail(hash(@7_tls_h,m_26)) else caught-fail) in
                                    {1579}let v_274: bool = not-caught-fail(h_85) in
                                    {1580}let x_94: bitstring = (if v_274 then (l_86,h_85) else caught-fail) in
                                    {1581}let binder_key_14: bitstring = (if v_273 then catch-fail((if v_274 then hmac(@7_tls_h,early_secret_21,x_94) else fail-any)) else caught-fail) in
                                    {1582}let v_275: bool = not-caught-fail(binder_key_14) in
                                    {1583}let v_276: bitstring = (if v_271 then catch-fail((if v_273 then (if v_275 then (early_secret_21,binder_key_14) else fail-any) else fail-any)) else caught-fail) in
                                    {1584}let v_277: bool = (not-caught-fail(v_276) && success?(1-proj-2-tuple(v_276))) in
                                    {1585}let kb_14: mac_key = (if v_277 then 2-proj-2-tuple(v_276) else caught-fail) in
                                    {1586}let es_20: bitstring = (if v_277 then 1-proj-2-tuple(v_276) else caught-fail) in
                                    {1587}let binders_6: bitstring = (if v_277 then catch-fail(hmac(@7_tls_h,kb_14,cur_log'_7)) else caught-fail) in
                                    {1588}let v_278: bool = not-caught-fail(binders_6) in
                                    {1589}let v_279: bitstring = catch-fail((if v_271 then (if v_277 then (if v_278 then (client_psk_ext(id_20,binders_6),(psk_36,id_20,es_20,is_safe_13)) else fail-any) else fail-any) else fail-any)) in
                                    {1590}let v_280: bool = (not-caught-fail(v_279) && success?(1-proj-2-tuple(v_279))) in
                                    {1591}let psk_data_8: bitstring = (if v_280 then 2-proj-2-tuple(v_279) else caught-fail) in
                                    {1592}let psk_ext_13: preSharedKeyExt = (if v_280 then 1-proj-2-tuple(v_279) else caught-fail) in
                                    {1593}let offer_14: params = (if v_280 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_13) else caught-fail) in
                                    {1594}let (client_hello'_4: msg,cr'_4: bytes32,kex_data'_4: bitstring,psk_data'_4: bitstring) = (if v_280 then (CH(cr_13,offer_14),cr_13,kex_data_4,psk_data_8) else fail-any) in
                                    {1595}event ClientOffersAead(cr'_4,@7_tls_a);
                                    {1596}event ClientOffersHash(cr'_4,@7_tls_h);
                                    {1597}event ClientOffersGroup(cr'_4,@7_tls_g);
                                    {1598}out(io, client_hello'_4);
                                    {1599}let cur_log4_4: bitstring = (cur_log3_3,client_hello'_4) in
                                    {1600}in(io, server_hello'_4: msg);
                                    {1601}let SH(sr'_4: bytes32,mode'_4: params) = server_hello'_4 in
                                    (
                                        {1602}if (sr'_4 = B32(HRR24,HRR8)) then
                                            {1603}out(io, unexpected_message)
                                        else
                                            {1604}let (x_95: bitstring,g_5: group) = kex_data'_4 in
                                            {1605}let (psk_offer_5: preSharedKey,id_offer_5: identityPsk,es_offer_5: bitstring,is_safe_offer_5: bool) = psk_data'_4 in
                                            {1606}event Client_PSKOffer(@7_id_client,psk_offer_5,id_offer_5,is_safe_offer_5);
                                            {1607}event Client_Rand_client(@7_id_client,cr'_4);
                                            {1608}event Client_DH_client(@7_id_client,dh_pub(g_5,x_95));
                                            {1609}event Client_server_domain(@7_id_client,s_dom_13);
                                            {1610}let SH(sr_15: bytes32,mode_7: params) = server_hello'_4 in
                                            {1611}event Client_Rand_server(@7_id_client,sr_15);
                                            {1612}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_5,gy_6: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_14: preSharedKeyExt) = mode_7 in
                                            (
                                                {1613}let cur_log2_16: bitstring = (cur_log4_4,server_hello'_4) in
                                                {1614}event Client_DH_server(@7_id_client,gy_6);
                                                {1615}let v_281: bool = (psk_ext_14 = empty_psk_ext) in
                                                {1616}let psk_37: preSharedKey = (if v_281 then NoPsk else caught-fail) in
                                                {1617}let s_28: bitstring = (if v_281 then zero else caught-fail) in
                                                {1618}let k_23: bitstring = (if v_281 then catch-fail(psk2b(psk_37)) else caught-fail) in
                                                {1619}let v_282: bool = not-caught-fail(k_23) in
                                                {1620}let early_secret_22: bitstring = (if v_281 then catch-fail((if v_282 then hmac(@7_tls_h,s_28,k_23) else fail-any)) else caught-fail) in
                                                {1621}let v_283: bool = not-caught-fail(early_secret_22) in
                                                {1622}let l_87: label = (if v_283 then tls13_ext_res_binder else caught-fail) in
                                                {1623}let m_27: bitstring = (if v_283 then zero else caught-fail) in
                                                {1624}let h_86: bitstring = (if v_283 then catch-fail(hash(@7_tls_h,m_27)) else caught-fail) in
                                                {1625}let v_284: bool = not-caught-fail(h_86) in
                                                {1626}let x_96: bitstring = (if v_284 then (l_87,h_86) else caught-fail) in
                                                {1627}let binder_key_15: bitstring = (if v_283 then catch-fail((if v_284 then hmac(@7_tls_h,early_secret_22,x_96) else fail-any)) else caught-fail) in
                                                {1628}let v_285: bool = not-caught-fail(binder_key_15) in
                                                {1629}let v_286: bitstring = (if v_281 then catch-fail((if v_283 then (if v_285 then (early_secret_22,binder_key_15) else fail-any) else fail-any)) else caught-fail) in
                                                {1630}let v_287: bool = (not-caught-fail(v_286) && success?(1-proj-2-tuple(v_286))) in
                                                {1631}let kb_15: mac_key = (if v_287 then 2-proj-2-tuple(v_286) else caught-fail) in
                                                {1632}let es_21: bitstring = (if v_287 then 1-proj-2-tuple(v_286) else caught-fail) in
                                                {1633}let v_288: bitstring = (if not(v_281) then catch-fail(psk_data'_4) else caught-fail) in
                                                {1634}let v_289: bool = (not-caught-fail(v_288) && success?(1-proj-4-tuple(v_288))) in
                                                {1635}let is_safe_14: bool = (if v_289 then 4-proj-4-tuple(v_288) else caught-fail) in
                                                {1636}let es_22: bitstring = (if v_289 then 3-proj-4-tuple(v_288) else caught-fail) in
                                                {1637}let id_21: identityPsk = (if v_289 then 2-proj-4-tuple(v_288) else caught-fail) in
                                                {1638}let psk_38: preSharedKey = (if v_289 then 1-proj-4-tuple(v_288) else caught-fail) in
                                                {1639}let (psk_39: preSharedKey,early_secret_23: bitstring,valid_5: bool,safe_psk_10: bool) = (if v_281 then (if v_287 then (NoPsk,es_21,true,false) else fail-any) else (if v_289 then (psk_38,es_22,((psk_38 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_14)),is_safe_14) else fail-any)) in
                                                {1640}event Client_PSKChoosen(@7_id_client,psk_39,safe_psk_10);
                                                {1641}if valid_5 then
                                                (
                                                    {1642}let gxy_11: element = catch-fail(dh_decap_fun(g_5,gy_6,x_95)) in
                                                    {1643}let v_290: bool = not-caught-fail(gxy_11) in
                                                    {1644}new s_29[]: seed;
                                                    {1645}let gxy_12: element = (if v_290 then gxy_11 else dh_f(s_29)) in
                                                    {1646}event Client_DH_gxy(@7_id_client,gxy_12);
                                                    {1647}let l_88: label = tls13_derived in
                                                    {1648}let m_28: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1649}let v_291: bool = not-caught-fail(m_28) in
                                                    {1650}let h_87: bitstring = (if v_291 then catch-fail(hash(@7_tls_h,m_28)) else caught-fail) in
                                                    {1651}let v_292: bool = not-caught-fail(h_87) in
                                                    {1652}let x_97: bitstring = (if v_292 then (l_88,h_87) else caught-fail) in
                                                    {1653}let extra_15: bitstring = catch-fail((if v_291 then (if v_292 then hmac(@7_tls_h,early_secret_23,x_97) else fail-any) else fail-any)) in
                                                    {1654}let v_293: bool = not-caught-fail(extra_15) in
                                                    {1655}let handshake_secret_6: bitstring = (if v_293 then hmac(@7_tls_h,extra_15,gxy_12) else fail-any) in
                                                    {1656}let l_89: label = tls13_derived in
                                                    {1657}let m_29: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1658}let v_294: bool = not-caught-fail(m_29) in
                                                    {1659}let h_88: bitstring = (if v_294 then catch-fail(hash(@7_tls_h,m_29)) else caught-fail) in
                                                    {1660}let v_295: bool = not-caught-fail(h_88) in
                                                    {1661}let x_98: bitstring = (if v_295 then (l_89,h_88) else caught-fail) in
                                                    {1662}let extra_16: bitstring = catch-fail((if v_294 then (if v_295 then hmac(@7_tls_h,handshake_secret_6,x_98) else fail-any) else fail-any)) in
                                                    {1663}let v_296: bool = not-caught-fail(extra_16) in
                                                    {1664}let k_24: bitstring = (if v_296 then zero else caught-fail) in
                                                    {1665}let master_secret_19: bitstring = (if v_296 then catch-fail(hmac(@7_tls_h,handshake_secret_6,k_24)) else caught-fail) in
                                                    {1666}let v_297: bool = not-caught-fail(master_secret_19) in
                                                    {1667}let l_90: label = (if v_297 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {1668}let h_89: bitstring = (if v_297 then catch-fail(hash(@7_tls_h,cur_log2_16)) else caught-fail) in
                                                    {1669}let v_298: bool = not-caught-fail(h_89) in
                                                    {1670}let x_99: bitstring = (if v_298 then (l_90,h_89) else caught-fail) in
                                                    {1671}let client_hts_6: bitstring = (if v_297 then catch-fail((if v_298 then hmac(@7_tls_h,handshake_secret_6,x_99) else fail-any)) else caught-fail) in
                                                    {1672}let v_299: bool = not-caught-fail(client_hts_6) in
                                                    {1673}let l_91: label = (if v_299 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {1674}let h_90: bitstring = (if v_299 then catch-fail(hash(@7_tls_h,cur_log2_16)) else caught-fail) in
                                                    {1675}let v_300: bool = not-caught-fail(h_90) in
                                                    {1676}let x_100: bitstring = (if v_300 then (l_91,h_90) else caught-fail) in
                                                    {1677}let server_hts_6: bitstring = (if v_299 then catch-fail((if v_300 then hmac(@7_tls_h,handshake_secret_6,x_100) else fail-any)) else caught-fail) in
                                                    {1678}let v_301: bool = not-caught-fail(server_hts_6) in
                                                    {1679}let l_92: label = (if v_301 then tls13_key else caught-fail) in
                                                    {1680}let h_91: bitstring = (if v_301 then zero else caught-fail) in
                                                    {1681}let x_101: bitstring = (if v_301 then (l_92,h_91) else caught-fail) in
                                                    {1682}let client_wkh_6: bitstring = (if v_301 then catch-fail(hmac(@7_tls_h,client_hts_6,x_101)) else caught-fail) in
                                                    {1683}let v_302: bool = not-caught-fail(client_wkh_6) in
                                                    {1684}let l_93: label = (if v_302 then tls13_key else caught-fail) in
                                                    {1685}let h_92: bitstring = (if v_302 then zero else caught-fail) in
                                                    {1686}let x_102: bitstring = (if v_302 then (l_93,h_92) else caught-fail) in
                                                    {1687}let server_wkh_6: bitstring = (if v_302 then catch-fail(hmac(@7_tls_h,server_hts_6,x_102)) else caught-fail) in
                                                    {1688}let v_303: bool = not-caught-fail(server_wkh_6) in
                                                    {1689}let l_94: label = (if v_303 then tls13_finished else caught-fail) in
                                                    {1690}let h_93: bitstring = (if v_303 then zero else caught-fail) in
                                                    {1691}let x_103: bitstring = (if v_303 then (l_94,h_93) else caught-fail) in
                                                    {1692}let client_fk_6: bitstring = (if v_303 then catch-fail(hmac(@7_tls_h,client_hts_6,x_103)) else caught-fail) in
                                                    {1693}let v_304: bool = not-caught-fail(client_fk_6) in
                                                    {1694}let l_95: label = (if v_304 then tls13_finished else caught-fail) in
                                                    {1695}let h_94: bitstring = (if v_304 then zero else caught-fail) in
                                                    {1696}let x_104: bitstring = (if v_304 then (l_95,h_94) else caught-fail) in
                                                    {1697}let server_fk_6: bitstring = (if v_304 then catch-fail(hmac(@7_tls_h,server_hts_6,x_104)) else caught-fail) in
                                                    {1698}let v_305: bool = not-caught-fail(server_fk_6) in
                                                    {1699}let (master_secret_20: bitstring,chk_13: aead_key,shk_12: aead_key,cfin_13: mac_key,sfin_12: mac_key) = (if v_296 then (if v_297 then (if v_299 then (if v_301 then (if v_302 then (if v_303 then (if v_304 then (if v_305 then (master_secret_19,client_wkh_6,server_wkh_6,client_fk_6,server_fk_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {1700}event Client_chk(@7_id_client,chk_13);
                                                    {1701}event Client_shk(@7_id_client,shk_12);
                                                    {1702}event Client_cfin(@7_id_client,cfin_13);
                                                    {1703}event Client_sfin(@7_id_client,sfin_12);
                                                    {1704}in(io, enc_ee_msg_5: bitstring);
                                                    {1705}let ee_msg_6: msg = aead_dec(@7_tls_a,shk_12,0,zero,enc_ee_msg_5) in
                                                    {1706}let EE(ech_ee_5: echExt,extra_ee_5: extraExt) = ee_msg_6 in
                                                    {1707}let cur_log2_17: bitstring = (cur_log2_16,ee_msg_6) in
                                                    {1708}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_4,sr_15,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_39,safe_psk_10,@7_comp_psk,master_secret_20,chk_13,0,shk_12,1,cfin_13,sfin_12,cur_log2_17)))
                                                )
                                                else
                                                    {1709}out(io, illegal_parameter)
                                            )
                                            else
                                                {1710}out(io, illegal_parameter)
                                    )
                                    else
                                        {1711}out(io, unexpected_message)
                            )
                            else
                                {1713}let psk_40: preSharedKey = NoPsk in
                                {1714}let s_30: bitstring = zero in
                                {1715}let k_25: bitstring = catch-fail(psk2b(psk_40)) in
                                {1716}let v_306: bool = not-caught-fail(k_25) in
                                {1717}let early_secret_24: bitstring = catch-fail((if v_306 then hmac(@7_tls_h,s_30,k_25) else fail-any)) in
                                {1718}let v_307: bool = not-caught-fail(early_secret_24) in
                                {1719}let l_96: label = (if v_307 then tls13_ext_res_binder else caught-fail) in
                                {1720}let m_30: bitstring = (if v_307 then zero else caught-fail) in
                                {1721}let h_95: bitstring = (if v_307 then catch-fail(hash(@7_tls_h,m_30)) else caught-fail) in
                                {1722}let v_308: bool = not-caught-fail(h_95) in
                                {1723}let x_105: bitstring = (if v_308 then (l_96,h_95) else caught-fail) in
                                {1724}let binder_key_16: bitstring = (if v_307 then catch-fail((if v_308 then hmac(@7_tls_h,early_secret_24,x_105) else fail-any)) else caught-fail) in
                                {1725}let v_309: bool = not-caught-fail(binder_key_16) in
                                {1726}let v_310: bitstring = catch-fail((if v_307 then (if v_309 then (early_secret_24,binder_key_16) else fail-any) else fail-any)) in
                                {1727}let v_311: bool = (not-caught-fail(v_310) && success?(1-proj-2-tuple(v_310))) in
                                {1728}let kb_16: mac_key = (if v_311 then 2-proj-2-tuple(v_310) else caught-fail) in
                                {1729}let es_23: bitstring = (if v_311 then 1-proj-2-tuple(v_310) else caught-fail) in
                                {1730}let v_312: bitstring = catch-fail((if v_311 then (empty_psk_ext,(NoPsk,zero,es_23,false)) else fail-any)) in
                                {1731}let v_313: bool = (not-caught-fail(v_312) && success?(1-proj-2-tuple(v_312))) in
                                {1732}let psk_data_9: bitstring = (if v_313 then 2-proj-2-tuple(v_312) else caught-fail) in
                                {1733}let psk_ext_15: preSharedKeyExt = (if v_313 then 1-proj-2-tuple(v_312) else caught-fail) in
                                {1734}let offer_15: params = (if v_313 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_15) else caught-fail) in
                                {1735}let (client_hello'_5: msg,cr'_5: bytes32,kex_data'_5: bitstring,psk_data'_5: bitstring) = (if v_313 then (CH(cr_13,offer_15),cr_13,kex_data_4,psk_data_9) else fail-any) in
                                {1736}event ClientOffersAead(cr'_5,@7_tls_a);
                                {1737}event ClientOffersHash(cr'_5,@7_tls_h);
                                {1738}event ClientOffersGroup(cr'_5,@7_tls_g);
                                {1739}out(io, client_hello'_5);
                                {1740}let cur_log4_5: bitstring = (cur_log3_3,client_hello'_5) in
                                {1741}in(io, server_hello'_5: msg);
                                {1742}let SH(sr'_5: bytes32,mode'_5: params) = server_hello'_5 in
                                (
                                    {1743}if (sr'_5 = B32(HRR24,HRR8)) then
                                        {1744}out(io, unexpected_message)
                                    else
                                        {1745}let (x_106: bitstring,g_6: group) = kex_data'_5 in
                                        {1746}let (psk_offer_6: preSharedKey,id_offer_6: identityPsk,es_offer_6: bitstring,is_safe_offer_6: bool) = psk_data'_5 in
                                        {1747}event Client_PSKOffer(@7_id_client,psk_offer_6,id_offer_6,is_safe_offer_6);
                                        {1748}event Client_Rand_client(@7_id_client,cr'_5);
                                        {1749}event Client_DH_client(@7_id_client,dh_pub(g_6,x_106));
                                        {1750}event Client_server_domain(@7_id_client,s_dom_13);
                                        {1751}let SH(sr_16: bytes32,mode_8: params) = server_hello'_5 in
                                        {1752}event Client_Rand_server(@7_id_client,sr_16);
                                        {1753}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_6,gy_7: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_16: preSharedKeyExt) = mode_8 in
                                        (
                                            {1754}let cur_log2_18: bitstring = (cur_log4_5,server_hello'_5) in
                                            {1755}event Client_DH_server(@7_id_client,gy_7);
                                            {1756}let v_314: bool = (psk_ext_16 = empty_psk_ext) in
                                            {1757}let psk_41: preSharedKey = (if v_314 then NoPsk else caught-fail) in
                                            {1758}let s_31: bitstring = (if v_314 then zero else caught-fail) in
                                            {1759}let k_26: bitstring = (if v_314 then catch-fail(psk2b(psk_41)) else caught-fail) in
                                            {1760}let v_315: bool = not-caught-fail(k_26) in
                                            {1761}let early_secret_25: bitstring = (if v_314 then catch-fail((if v_315 then hmac(@7_tls_h,s_31,k_26) else fail-any)) else caught-fail) in
                                            {1762}let v_316: bool = not-caught-fail(early_secret_25) in
                                            {1763}let l_97: label = (if v_316 then tls13_ext_res_binder else caught-fail) in
                                            {1764}let m_31: bitstring = (if v_316 then zero else caught-fail) in
                                            {1765}let h_96: bitstring = (if v_316 then catch-fail(hash(@7_tls_h,m_31)) else caught-fail) in
                                            {1766}let v_317: bool = not-caught-fail(h_96) in
                                            {1767}let x_107: bitstring = (if v_317 then (l_97,h_96) else caught-fail) in
                                            {1768}let binder_key_17: bitstring = (if v_316 then catch-fail((if v_317 then hmac(@7_tls_h,early_secret_25,x_107) else fail-any)) else caught-fail) in
                                            {1769}let v_318: bool = not-caught-fail(binder_key_17) in
                                            {1770}let v_319: bitstring = (if v_314 then catch-fail((if v_316 then (if v_318 then (early_secret_25,binder_key_17) else fail-any) else fail-any)) else caught-fail) in
                                            {1771}let v_320: bool = (not-caught-fail(v_319) && success?(1-proj-2-tuple(v_319))) in
                                            {1772}let kb_17: mac_key = (if v_320 then 2-proj-2-tuple(v_319) else caught-fail) in
                                            {1773}let es_24: bitstring = (if v_320 then 1-proj-2-tuple(v_319) else caught-fail) in
                                            {1774}let v_321: bitstring = (if not(v_314) then catch-fail(psk_data'_5) else caught-fail) in
                                            {1775}let v_322: bool = (not-caught-fail(v_321) && success?(1-proj-4-tuple(v_321))) in
                                            {1776}let is_safe_15: bool = (if v_322 then 4-proj-4-tuple(v_321) else caught-fail) in
                                            {1777}let es_25: bitstring = (if v_322 then 3-proj-4-tuple(v_321) else caught-fail) in
                                            {1778}let id_22: identityPsk = (if v_322 then 2-proj-4-tuple(v_321) else caught-fail) in
                                            {1779}let psk_42: preSharedKey = (if v_322 then 1-proj-4-tuple(v_321) else caught-fail) in
                                            {1780}let (psk_43: preSharedKey,early_secret_26: bitstring,valid_6: bool,safe_psk_11: bool) = (if v_314 then (if v_320 then (NoPsk,es_24,true,false) else fail-any) else (if v_322 then (psk_42,es_25,((psk_42 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_16)),is_safe_15) else fail-any)) in
                                            {1781}event Client_PSKChoosen(@7_id_client,psk_43,safe_psk_11);
                                            {1782}if valid_6 then
                                            (
                                                {1783}let gxy_13: element = catch-fail(dh_decap_fun(g_6,gy_7,x_106)) in
                                                {1784}let v_323: bool = not-caught-fail(gxy_13) in
                                                {1785}new s_32[]: seed;
                                                {1786}let gxy_14: element = (if v_323 then gxy_13 else dh_f(s_32)) in
                                                {1787}event Client_DH_gxy(@7_id_client,gxy_14);
                                                {1788}let l_98: label = tls13_derived in
                                                {1789}let m_32: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1790}let v_324: bool = not-caught-fail(m_32) in
                                                {1791}let h_97: bitstring = (if v_324 then catch-fail(hash(@7_tls_h,m_32)) else caught-fail) in
                                                {1792}let v_325: bool = not-caught-fail(h_97) in
                                                {1793}let x_108: bitstring = (if v_325 then (l_98,h_97) else caught-fail) in
                                                {1794}let extra_17: bitstring = catch-fail((if v_324 then (if v_325 then hmac(@7_tls_h,early_secret_26,x_108) else fail-any) else fail-any)) in
                                                {1795}let v_326: bool = not-caught-fail(extra_17) in
                                                {1796}let handshake_secret_7: bitstring = (if v_326 then hmac(@7_tls_h,extra_17,gxy_14) else fail-any) in
                                                {1797}let l_99: label = tls13_derived in
                                                {1798}let m_33: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1799}let v_327: bool = not-caught-fail(m_33) in
                                                {1800}let h_98: bitstring = (if v_327 then catch-fail(hash(@7_tls_h,m_33)) else caught-fail) in
                                                {1801}let v_328: bool = not-caught-fail(h_98) in
                                                {1802}let x_109: bitstring = (if v_328 then (l_99,h_98) else caught-fail) in
                                                {1803}let extra_18: bitstring = catch-fail((if v_327 then (if v_328 then hmac(@7_tls_h,handshake_secret_7,x_109) else fail-any) else fail-any)) in
                                                {1804}let v_329: bool = not-caught-fail(extra_18) in
                                                {1805}let k_27: bitstring = (if v_329 then zero else caught-fail) in
                                                {1806}let master_secret_21: bitstring = (if v_329 then catch-fail(hmac(@7_tls_h,handshake_secret_7,k_27)) else caught-fail) in
                                                {1807}let v_330: bool = not-caught-fail(master_secret_21) in
                                                {1808}let l_100: label = (if v_330 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {1809}let h_99: bitstring = (if v_330 then catch-fail(hash(@7_tls_h,cur_log2_18)) else caught-fail) in
                                                {1810}let v_331: bool = not-caught-fail(h_99) in
                                                {1811}let x_110: bitstring = (if v_331 then (l_100,h_99) else caught-fail) in
                                                {1812}let client_hts_7: bitstring = (if v_330 then catch-fail((if v_331 then hmac(@7_tls_h,handshake_secret_7,x_110) else fail-any)) else caught-fail) in
                                                {1813}let v_332: bool = not-caught-fail(client_hts_7) in
                                                {1814}let l_101: label = (if v_332 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {1815}let h_100: bitstring = (if v_332 then catch-fail(hash(@7_tls_h,cur_log2_18)) else caught-fail) in
                                                {1816}let v_333: bool = not-caught-fail(h_100) in
                                                {1817}let x_111: bitstring = (if v_333 then (l_101,h_100) else caught-fail) in
                                                {1818}let server_hts_7: bitstring = (if v_332 then catch-fail((if v_333 then hmac(@7_tls_h,handshake_secret_7,x_111) else fail-any)) else caught-fail) in
                                                {1819}let v_334: bool = not-caught-fail(server_hts_7) in
                                                {1820}let l_102: label = (if v_334 then tls13_key else caught-fail) in
                                                {1821}let h_101: bitstring = (if v_334 then zero else caught-fail) in
                                                {1822}let x_112: bitstring = (if v_334 then (l_102,h_101) else caught-fail) in
                                                {1823}let client_wkh_7: bitstring = (if v_334 then catch-fail(hmac(@7_tls_h,client_hts_7,x_112)) else caught-fail) in
                                                {1824}let v_335: bool = not-caught-fail(client_wkh_7) in
                                                {1825}let l_103: label = (if v_335 then tls13_key else caught-fail) in
                                                {1826}let h_102: bitstring = (if v_335 then zero else caught-fail) in
                                                {1827}let x_113: bitstring = (if v_335 then (l_103,h_102) else caught-fail) in
                                                {1828}let server_wkh_7: bitstring = (if v_335 then catch-fail(hmac(@7_tls_h,server_hts_7,x_113)) else caught-fail) in
                                                {1829}let v_336: bool = not-caught-fail(server_wkh_7) in
                                                {1830}let l_104: label = (if v_336 then tls13_finished else caught-fail) in
                                                {1831}let h_103: bitstring = (if v_336 then zero else caught-fail) in
                                                {1832}let x_114: bitstring = (if v_336 then (l_104,h_103) else caught-fail) in
                                                {1833}let client_fk_7: bitstring = (if v_336 then catch-fail(hmac(@7_tls_h,client_hts_7,x_114)) else caught-fail) in
                                                {1834}let v_337: bool = not-caught-fail(client_fk_7) in
                                                {1835}let l_105: label = (if v_337 then tls13_finished else caught-fail) in
                                                {1836}let h_104: bitstring = (if v_337 then zero else caught-fail) in
                                                {1837}let x_115: bitstring = (if v_337 then (l_105,h_104) else caught-fail) in
                                                {1838}let server_fk_7: bitstring = (if v_337 then catch-fail(hmac(@7_tls_h,server_hts_7,x_115)) else caught-fail) in
                                                {1839}let v_338: bool = not-caught-fail(server_fk_7) in
                                                {1840}let (master_secret_22: bitstring,chk_14: aead_key,shk_13: aead_key,cfin_14: mac_key,sfin_13: mac_key) = (if v_329 then (if v_330 then (if v_332 then (if v_334 then (if v_335 then (if v_336 then (if v_337 then (if v_338 then (master_secret_21,client_wkh_7,server_wkh_7,client_fk_7,server_fk_7) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {1841}event Client_chk(@7_id_client,chk_14);
                                                {1842}event Client_shk(@7_id_client,shk_13);
                                                {1843}event Client_cfin(@7_id_client,cfin_14);
                                                {1844}event Client_sfin(@7_id_client,sfin_13);
                                                {1845}in(io, enc_ee_msg_6: bitstring);
                                                {1846}let ee_msg_7: msg = aead_dec(@7_tls_a,shk_13,0,zero,enc_ee_msg_6) in
                                                {1847}let EE(ech_ee_6: echExt,extra_ee_6: extraExt) = ee_msg_7 in
                                                {1848}let cur_log2_19: bitstring = (cur_log2_18,ee_msg_7) in
                                                {1849}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_5,sr_16,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_43,safe_psk_11,@7_comp_psk,master_secret_22,chk_14,0,shk_13,1,cfin_14,sfin_13,cur_log2_19)))
                                            )
                                            else
                                                {1850}out(io, illegal_parameter)
                                        )
                                        else
                                            {1851}out(io, illegal_parameter)
                                )
                                else
                                    {1852}out(io, unexpected_message)
                        )
                        else
                            {1853}out(io, illegal_parameter)
                    )
                    else
                        {1854}if send_kex then
                        (
                            {1855}let (x_116: bitstring,g_7: group) = kex_data_3 in
                            {1856}let (psk_offer_7: preSharedKey,id_offer_7: identityPsk,es_offer_7: bitstring,is_safe_offer_7: bool) = psk_data_6 in
                            {1857}event Client_PSKOffer(@7_id_client,psk_offer_7,id_offer_7,is_safe_offer_7);
                            {1858}event Client_Rand_client(@7_id_client,cr_12);
                            {1859}event Client_DH_client(@7_id_client,dh_pub(g_7,x_116));
                            {1860}event Client_server_domain(@7_id_client,s_dom_13);
                            {1861}let SH(sr_17: bytes32,mode_9: params) = server_hello_2 in
                            {1862}event Client_Rand_server(@7_id_client,sr_17);
                            {1863}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_7,gy_8: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_17: preSharedKeyExt) = mode_9 in
                            (
                                {1864}let cur_log2_20: bitstring = (cur_log2_13,server_hello_2) in
                                {1865}event Client_DH_server(@7_id_client,gy_8);
                                {1866}let v_339: bool = (psk_ext_17 = empty_psk_ext) in
                                {1867}let psk_44: preSharedKey = (if v_339 then NoPsk else caught-fail) in
                                {1868}let s_33: bitstring = (if v_339 then zero else caught-fail) in
                                {1869}let k_28: bitstring = (if v_339 then catch-fail(psk2b(psk_44)) else caught-fail) in
                                {1870}let v_340: bool = not-caught-fail(k_28) in
                                {1871}let early_secret_27: bitstring = (if v_339 then catch-fail((if v_340 then hmac(@7_tls_h,s_33,k_28) else fail-any)) else caught-fail) in
                                {1872}let v_341: bool = not-caught-fail(early_secret_27) in
                                {1873}let l_106: label = (if v_341 then tls13_ext_res_binder else caught-fail) in
                                {1874}let m_34: bitstring = (if v_341 then zero else caught-fail) in
                                {1875}let h_105: bitstring = (if v_341 then catch-fail(hash(@7_tls_h,m_34)) else caught-fail) in
                                {1876}let v_342: bool = not-caught-fail(h_105) in
                                {1877}let x_117: bitstring = (if v_342 then (l_106,h_105) else caught-fail) in
                                {1878}let binder_key_18: bitstring = (if v_341 then catch-fail((if v_342 then hmac(@7_tls_h,early_secret_27,x_117) else fail-any)) else caught-fail) in
                                {1879}let v_343: bool = not-caught-fail(binder_key_18) in
                                {1880}let v_344: bitstring = (if v_339 then catch-fail((if v_341 then (if v_343 then (early_secret_27,binder_key_18) else fail-any) else fail-any)) else caught-fail) in
                                {1881}let v_345: bool = (not-caught-fail(v_344) && success?(1-proj-2-tuple(v_344))) in
                                {1882}let kb_18: mac_key = (if v_345 then 2-proj-2-tuple(v_344) else caught-fail) in
                                {1883}let es_26: bitstring = (if v_345 then 1-proj-2-tuple(v_344) else caught-fail) in
                                {1884}let v_346: bitstring = (if not(v_339) then catch-fail(psk_data_6) else caught-fail) in
                                {1885}let v_347: bool = (not-caught-fail(v_346) && success?(1-proj-4-tuple(v_346))) in
                                {1886}let is_safe_16: bool = (if v_347 then 4-proj-4-tuple(v_346) else caught-fail) in
                                {1887}let es_27: bitstring = (if v_347 then 3-proj-4-tuple(v_346) else caught-fail) in
                                {1888}let id_23: identityPsk = (if v_347 then 2-proj-4-tuple(v_346) else caught-fail) in
                                {1889}let psk_45: preSharedKey = (if v_347 then 1-proj-4-tuple(v_346) else caught-fail) in
                                {1890}let (psk_46: preSharedKey,early_secret_28: bitstring,valid_7: bool,safe_psk_12: bool) = (if v_339 then (if v_345 then (NoPsk,es_26,true,false) else fail-any) else (if v_347 then (psk_45,es_27,((psk_45 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_17)),is_safe_16) else fail-any)) in
                                {1891}event Client_PSKChoosen(@7_id_client,psk_46,safe_psk_12);
                                {1892}if valid_7 then
                                (
                                    {1893}let gxy_15: element = catch-fail(dh_decap_fun(g_7,gy_8,x_116)) in
                                    {1894}let v_348: bool = not-caught-fail(gxy_15) in
                                    {1895}new s_34[]: seed;
                                    {1896}let gxy_16: element = (if v_348 then gxy_15 else dh_f(s_34)) in
                                    {1897}event Client_DH_gxy(@7_id_client,gxy_16);
                                    {1898}let l_107: label = tls13_derived in
                                    {1899}let m_35: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1900}let v_349: bool = not-caught-fail(m_35) in
                                    {1901}let h_106: bitstring = (if v_349 then catch-fail(hash(@7_tls_h,m_35)) else caught-fail) in
                                    {1902}let v_350: bool = not-caught-fail(h_106) in
                                    {1903}let x_118: bitstring = (if v_350 then (l_107,h_106) else caught-fail) in
                                    {1904}let extra_19: bitstring = catch-fail((if v_349 then (if v_350 then hmac(@7_tls_h,early_secret_28,x_118) else fail-any) else fail-any)) in
                                    {1905}let v_351: bool = not-caught-fail(extra_19) in
                                    {1906}let handshake_secret_8: bitstring = (if v_351 then hmac(@7_tls_h,extra_19,gxy_16) else fail-any) in
                                    {1907}let l_108: label = tls13_derived in
                                    {1908}let m_36: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1909}let v_352: bool = not-caught-fail(m_36) in
                                    {1910}let h_107: bitstring = (if v_352 then catch-fail(hash(@7_tls_h,m_36)) else caught-fail) in
                                    {1911}let v_353: bool = not-caught-fail(h_107) in
                                    {1912}let x_119: bitstring = (if v_353 then (l_108,h_107) else caught-fail) in
                                    {1913}let extra_20: bitstring = catch-fail((if v_352 then (if v_353 then hmac(@7_tls_h,handshake_secret_8,x_119) else fail-any) else fail-any)) in
                                    {1914}let v_354: bool = not-caught-fail(extra_20) in
                                    {1915}let k_29: bitstring = (if v_354 then zero else caught-fail) in
                                    {1916}let master_secret_23: bitstring = (if v_354 then catch-fail(hmac(@7_tls_h,handshake_secret_8,k_29)) else caught-fail) in
                                    {1917}let v_355: bool = not-caught-fail(master_secret_23) in
                                    {1918}let l_109: label = (if v_355 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {1919}let h_108: bitstring = (if v_355 then catch-fail(hash(@7_tls_h,cur_log2_20)) else caught-fail) in
                                    {1920}let v_356: bool = not-caught-fail(h_108) in
                                    {1921}let x_120: bitstring = (if v_356 then (l_109,h_108) else caught-fail) in
                                    {1922}let client_hts_8: bitstring = (if v_355 then catch-fail((if v_356 then hmac(@7_tls_h,handshake_secret_8,x_120) else fail-any)) else caught-fail) in
                                    {1923}let v_357: bool = not-caught-fail(client_hts_8) in
                                    {1924}let l_110: label = (if v_357 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {1925}let h_109: bitstring = (if v_357 then catch-fail(hash(@7_tls_h,cur_log2_20)) else caught-fail) in
                                    {1926}let v_358: bool = not-caught-fail(h_109) in
                                    {1927}let x_121: bitstring = (if v_358 then (l_110,h_109) else caught-fail) in
                                    {1928}let server_hts_8: bitstring = (if v_357 then catch-fail((if v_358 then hmac(@7_tls_h,handshake_secret_8,x_121) else fail-any)) else caught-fail) in
                                    {1929}let v_359: bool = not-caught-fail(server_hts_8) in
                                    {1930}let l_111: label = (if v_359 then tls13_key else caught-fail) in
                                    {1931}let h_110: bitstring = (if v_359 then zero else caught-fail) in
                                    {1932}let x_122: bitstring = (if v_359 then (l_111,h_110) else caught-fail) in
                                    {1933}let client_wkh_8: bitstring = (if v_359 then catch-fail(hmac(@7_tls_h,client_hts_8,x_122)) else caught-fail) in
                                    {1934}let v_360: bool = not-caught-fail(client_wkh_8) in
                                    {1935}let l_112: label = (if v_360 then tls13_key else caught-fail) in
                                    {1936}let h_111: bitstring = (if v_360 then zero else caught-fail) in
                                    {1937}let x_123: bitstring = (if v_360 then (l_112,h_111) else caught-fail) in
                                    {1938}let server_wkh_8: bitstring = (if v_360 then catch-fail(hmac(@7_tls_h,server_hts_8,x_123)) else caught-fail) in
                                    {1939}let v_361: bool = not-caught-fail(server_wkh_8) in
                                    {1940}let l_113: label = (if v_361 then tls13_finished else caught-fail) in
                                    {1941}let h_112: bitstring = (if v_361 then zero else caught-fail) in
                                    {1942}let x_124: bitstring = (if v_361 then (l_113,h_112) else caught-fail) in
                                    {1943}let client_fk_8: bitstring = (if v_361 then catch-fail(hmac(@7_tls_h,client_hts_8,x_124)) else caught-fail) in
                                    {1944}let v_362: bool = not-caught-fail(client_fk_8) in
                                    {1945}let l_114: label = (if v_362 then tls13_finished else caught-fail) in
                                    {1946}let h_113: bitstring = (if v_362 then zero else caught-fail) in
                                    {1947}let x_125: bitstring = (if v_362 then (l_114,h_113) else caught-fail) in
                                    {1948}let server_fk_8: bitstring = (if v_362 then catch-fail(hmac(@7_tls_h,server_hts_8,x_125)) else caught-fail) in
                                    {1949}let v_363: bool = not-caught-fail(server_fk_8) in
                                    {1950}let (master_secret_24: bitstring,chk_15: aead_key,shk_14: aead_key,cfin_15: mac_key,sfin_14: mac_key) = (if v_354 then (if v_355 then (if v_357 then (if v_359 then (if v_360 then (if v_361 then (if v_362 then (if v_363 then (master_secret_23,client_wkh_8,server_wkh_8,client_fk_8,server_fk_8) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {1951}event Client_chk(@7_id_client,chk_15);
                                    {1952}event Client_shk(@7_id_client,shk_14);
                                    {1953}event Client_cfin(@7_id_client,cfin_15);
                                    {1954}event Client_sfin(@7_id_client,sfin_14);
                                    {1955}in(io, enc_ee_msg_7: bitstring);
                                    {1956}let ee_msg_8: msg = aead_dec(@7_tls_a,shk_14,0,zero,enc_ee_msg_7) in
                                    {1957}let EE(ech_ee_7: echExt,extra_ee_7: extraExt) = ee_msg_8 in
                                    {1958}let cur_log2_21: bitstring = (cur_log2_20,ee_msg_8) in
                                    {1959}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr_12,sr_17,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_46,safe_psk_12,@7_comp_psk,master_secret_24,chk_15,0,shk_14,1,cfin_15,sfin_14,cur_log2_21)))
                                )
                                else
                                    {1960}out(io, illegal_parameter)
                            )
                            else
                                {1961}out(io, illegal_parameter)
                        )
                        else
                            {1962}out(io, illegal_parameter)
                )
                else
                    {1963}out(io, unexpected_message)
            )
    )
    else
        {1965}let psk_47: preSharedKey = NoPsk in
        {1966}let s_35: bitstring = zero in
        {1967}let k_30: bitstring = catch-fail(psk2b(psk_47)) in
        {1968}let v_364: bool = not-caught-fail(k_30) in
        {1969}let early_secret_29: bitstring = catch-fail((if v_364 then hmac(@7_tls_h,s_35,k_30) else fail-any)) in
        {1970}let v_365: bool = not-caught-fail(early_secret_29) in
        {1971}let l_115: label = (if v_365 then tls13_ext_res_binder else caught-fail) in
        {1972}let m_37: bitstring = (if v_365 then zero else caught-fail) in
        {1973}let h_114: bitstring = (if v_365 then catch-fail(hash(@7_tls_h,m_37)) else caught-fail) in
        {1974}let v_366: bool = not-caught-fail(h_114) in
        {1975}let x_126: bitstring = (if v_366 then (l_115,h_114) else caught-fail) in
        {1976}let binder_key_19: bitstring = (if v_365 then catch-fail((if v_366 then hmac(@7_tls_h,early_secret_29,x_126) else fail-any)) else caught-fail) in
        {1977}let v_367: bool = not-caught-fail(binder_key_19) in
        {1978}let v_368: bitstring = catch-fail((if v_365 then (if v_367 then (early_secret_29,binder_key_19) else fail-any) else fail-any)) in
        {1979}let v_369: bool = (not-caught-fail(v_368) && success?(1-proj-2-tuple(v_368))) in
        {1980}let kb_19: mac_key = (if v_369 then 2-proj-2-tuple(v_368) else caught-fail) in
        {1981}let es_28: bitstring = (if v_369 then 1-proj-2-tuple(v_368) else caught-fail) in
        {1982}let v_370: bitstring = catch-fail((if v_369 then (empty_psk_ext,(NoPsk,zero,es_28,false)) else fail-any)) in
        {1983}let v_371: bool = (not-caught-fail(v_370) && success?(1-proj-2-tuple(v_370))) in
        {1984}let psk_data_10: bitstring = (if v_371 then 2-proj-2-tuple(v_370) else caught-fail) in
        {1985}let psk_ext_18: preSharedKeyExt = (if v_371 then 1-proj-2-tuple(v_370) else caught-fail) in
        {1986}let offer_16: params = (if v_371 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_18) else caught-fail) in
        {1987}let (client_hello_5: msg,cr_14: bytes32,kex_data_5: bitstring,psk_data_11: bitstring) = (if v_371 then (CH(cr_9,offer_16),cr_9,kex_data,psk_data_10) else fail-any) in
        {1988}event ClientOffersAead(cr_14,@7_tls_a);
        {1989}event ClientOffersHash(cr_14,@7_tls_h);
        {1990}event ClientOffersGroup(cr_14,@7_tls_g);
        {1991}out(io, client_hello_5);
        {1992}let cur_log2_22: bitstring = (cur_log_8,client_hello_5) in
        {1993}let (psk_48: preSharedKey,id_24: identityPsk,es_29: bitstring,safe_psk_13: bool) = psk_data_11 in
        (
            {1994}if (false && (psk_48 ≠ NoPsk)) then
            {1995}let client_hello_6: bitstring = (zero,client_hello_5) in
            {1996}let l_116: label = tls13_client_early_traffic_secret in
            {1997}let h_115: bitstring = catch-fail(hash(@7_tls_h,client_hello_6)) in
            {1998}let v_372: bool = not-caught-fail(h_115) in
            {1999}let x_127: bitstring = (if v_372 then (l_116,h_115) else caught-fail) in
            {2000}let atsc0_3: bitstring = catch-fail((if v_372 then hmac(@7_tls_h,es_29,x_127) else fail-any)) in
            {2001}let v_373: bool = not-caught-fail(atsc0_3) in
            {2002}let l_117: label = (if v_373 then tls13_key else caught-fail) in
            {2003}let h_116: bitstring = (if v_373 then zero else caught-fail) in
            {2004}let x_128: bitstring = (if v_373 then (l_117,h_116) else caught-fail) in
            {2005}let kc0_3: bitstring = (if v_373 then catch-fail(hmac(@7_tls_h,atsc0_3,x_128)) else caught-fail) in
            {2006}let v_374: bool = not-caught-fail(kc0_3) in
            {2007}let l_118: label = (if v_374 then tls13_early_exporter_master_secret else caught-fail) in
            {2008}let h_117: bitstring = (if v_374 then catch-fail(hash(@7_tls_h,client_hello_6)) else caught-fail) in
            {2009}let v_375: bool = not-caught-fail(h_117) in
            {2010}let x_129: bitstring = (if v_375 then (l_118,h_117) else caught-fail) in
            {2011}let ems0_6: bitstring = (if v_374 then catch-fail((if v_375 then hmac(@7_tls_h,es_29,x_129) else fail-any)) else caught-fail) in
            {2012}let v_376: bool = not-caught-fail(ems0_6) in
            {2013}let (wkc0_3: aead_key,ems0_7: bitstring) = (if v_373 then (if v_374 then (if v_376 then (kc0_3,ems0_6) else fail-any) else fail-any) else fail-any) in
            {2014}!
            {2015}in(io, (i_3: nat,ad_3: bitstring));
            {2016}if is_nat(i_3) then
            {2017}new msg_ed_2[]: bitstring;
            {2018}let enc_ed_2: bitstring = aead_enc(@7_tls_a,wkc0_3,i_3,ad_3,msg_ed_2) in
            {2019}new st_12: stamp;
            {2020}event ClientSequenceClient0RTTDataWriteKey(@7_id_client,st_12,i_3);
            {2021}event ClientSends0(@7_id_client,cr_14,psk_48,i_3,ad_3,msg_ed_2);
            {2022}out(io, enc_ed_2)
        ) | (
            {2023}in(io, server_hello_3: msg);
            {2024}let SH(sr_18: bytes32,mode_10: params) = server_hello_3 in
            (
                {2025}event ClientEchAcceptance(@7_id_client,false);
                {2026}if (true && (sr_18 = B32(HRR24,HRR8))) then
                (
                    {2027}if ((mode_10 = nego(TLS13,@7_tls_h,@7_tls_a,hrr_kex_ext(@7_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex ≠ true)) then
                    (
                        {2028}let cur_log3_4: bitstring = (cur_log2_22,server_hello_3) in
                        {2029}let send_kex_3: bool = true in
                        {2030}new rand24_4[]: bytes24;
                        {2031}new rand8_4[]: bytes8;
                        {2032}let cr_15: bytes32 = B32(rand24_4,rand8_4) in
                        {2033}new s_36[]: seed;
                        {2034}let gx_8: element = dh_pub(@7_tls_g,dh_k(s_36)) in
                        {2035}let v_377: bitstring = (dh_k(s_36),gx_8) in
                        {2036}let v_378: bool = success?(1-proj-2-tuple(v_377)) in
                        {2037}let gx_9: element = (if v_378 then 2-proj-2-tuple(v_377) else caught-fail) in
                        {2038}let x_130: bitstring = (if v_378 then 1-proj-2-tuple(v_377) else caught-fail) in
                        {2039}let kex_3: kex_alg = (if v_378 then (if send_kex_3 then DHE_kex(@7_tls_g,gx_9) else DHE_group(@7_tls_g)) else caught-fail) in
                        {2040}let (kex_ext_4: keyShareExt,kex_data_6: bitstring) = (if v_378 then (client_kex_ext(kex_3),(x_130,@7_tls_g)) else fail-any) in
                        {2041}let ech_ext_5: echExt = empty_ech_ext in
                        {2042}let extra_21: extraExt = empty_extra_ext in
                        {2043}if @7_use_psk then
                        (
                            {2044}let (psk_49: preSharedKey,id_25: identityPsk,old_es_3: bitstring,is_safe_17: bool) = psk_data_11 in
                            (
                                {2045}let offer_17: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_13),ech_ext_5,extra_21,trunc_client_psk_ext(id_25)) in
                                {2046}let cur_log'_8: bitstring = (cur_log3_4,CH(cr_15,offer_17)) in
                                {2047}let s_37: bitstring = zero in
                                {2048}let k_31: bitstring = catch-fail(psk2b(psk_49)) in
                                {2049}let v_379: bool = not-caught-fail(k_31) in
                                {2050}let early_secret_30: bitstring = catch-fail((if v_379 then hmac(@7_tls_h,s_37,k_31) else fail-any)) in
                                {2051}let v_380: bool = not-caught-fail(early_secret_30) in
                                {2052}let l_119: label = (if v_380 then tls13_ext_res_binder else caught-fail) in
                                {2053}let m_38: bitstring = (if v_380 then zero else caught-fail) in
                                {2054}let h_118: bitstring = (if v_380 then catch-fail(hash(@7_tls_h,m_38)) else caught-fail) in
                                {2055}let v_381: bool = not-caught-fail(h_118) in
                                {2056}let x_131: bitstring = (if v_381 then (l_119,h_118) else caught-fail) in
                                {2057}let binder_key_20: bitstring = (if v_380 then catch-fail((if v_381 then hmac(@7_tls_h,early_secret_30,x_131) else fail-any)) else caught-fail) in
                                {2058}let v_382: bool = not-caught-fail(binder_key_20) in
                                {2059}let v_383: bitstring = catch-fail((if v_380 then (if v_382 then (early_secret_30,binder_key_20) else fail-any) else fail-any)) in
                                {2060}let v_384: bool = (not-caught-fail(v_383) && success?(1-proj-2-tuple(v_383))) in
                                {2061}let kb_20: mac_key = (if v_384 then 2-proj-2-tuple(v_383) else caught-fail) in
                                {2062}let es_30: bitstring = (if v_384 then 1-proj-2-tuple(v_383) else caught-fail) in
                                {2063}let binders_7: bitstring = (if v_384 then catch-fail(hmac(@7_tls_h,kb_20,cur_log'_8)) else caught-fail) in
                                {2064}let v_385: bool = not-caught-fail(binders_7) in
                                {2065}let v_386: bitstring = catch-fail((if v_384 then (if v_385 then (client_psk_ext(id_25,binders_7),(psk_49,id_25,es_30,is_safe_17)) else fail-any) else fail-any)) in
                                {2066}let v_387: bool = (not-caught-fail(v_386) && success?(1-proj-2-tuple(v_386))) in
                                {2067}let psk_data_12: bitstring = (if v_387 then 2-proj-2-tuple(v_386) else caught-fail) in
                                {2068}let psk_ext_19: preSharedKeyExt = (if v_387 then 1-proj-2-tuple(v_386) else caught-fail) in
                                {2069}let offer_18: params = (if v_387 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_19) else caught-fail) in
                                {2070}let (client_hello'_6: msg,cr'_6: bytes32,kex_data'_6: bitstring,psk_data'_6: bitstring) = (if v_387 then (CH(cr_15,offer_18),cr_15,kex_data_6,psk_data_12) else fail-any) in
                                {2071}event ClientOffersAead(cr'_6,@7_tls_a);
                                {2072}event ClientOffersHash(cr'_6,@7_tls_h);
                                {2073}event ClientOffersGroup(cr'_6,@7_tls_g);
                                {2074}out(io, client_hello'_6);
                                {2075}let cur_log4_6: bitstring = (cur_log3_4,client_hello'_6) in
                                {2076}in(io, server_hello'_6: msg);
                                {2077}let SH(sr'_6: bytes32,mode'_6: params) = server_hello'_6 in
                                (
                                    {2078}if (sr'_6 = B32(HRR24,HRR8)) then
                                        {2079}out(io, unexpected_message)
                                    else
                                        {2080}let (x_132: bitstring,g_8: group) = kex_data'_6 in
                                        {2081}let (psk_offer_8: preSharedKey,id_offer_8: identityPsk,es_offer_8: bitstring,is_safe_offer_8: bool) = psk_data'_6 in
                                        {2082}event Client_PSKOffer(@7_id_client,psk_offer_8,id_offer_8,is_safe_offer_8);
                                        {2083}event Client_Rand_client(@7_id_client,cr'_6);
                                        {2084}event Client_DH_client(@7_id_client,dh_pub(g_8,x_132));
                                        {2085}event Client_server_domain(@7_id_client,s_dom_13);
                                        {2086}let SH(sr_19: bytes32,mode_11: params) = server_hello'_6 in
                                        {2087}event Client_Rand_server(@7_id_client,sr_19);
                                        {2088}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_8,gy_9: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_20: preSharedKeyExt) = mode_11 in
                                        (
                                            {2089}let cur_log2_23: bitstring = (cur_log4_6,server_hello'_6) in
                                            {2090}event Client_DH_server(@7_id_client,gy_9);
                                            {2091}let v_388: bool = (psk_ext_20 = empty_psk_ext) in
                                            {2092}let psk_50: preSharedKey = (if v_388 then NoPsk else caught-fail) in
                                            {2093}let s_38: bitstring = (if v_388 then zero else caught-fail) in
                                            {2094}let k_32: bitstring = (if v_388 then catch-fail(psk2b(psk_50)) else caught-fail) in
                                            {2095}let v_389: bool = not-caught-fail(k_32) in
                                            {2096}let early_secret_31: bitstring = (if v_388 then catch-fail((if v_389 then hmac(@7_tls_h,s_38,k_32) else fail-any)) else caught-fail) in
                                            {2097}let v_390: bool = not-caught-fail(early_secret_31) in
                                            {2098}let l_120: label = (if v_390 then tls13_ext_res_binder else caught-fail) in
                                            {2099}let m_39: bitstring = (if v_390 then zero else caught-fail) in
                                            {2100}let h_119: bitstring = (if v_390 then catch-fail(hash(@7_tls_h,m_39)) else caught-fail) in
                                            {2101}let v_391: bool = not-caught-fail(h_119) in
                                            {2102}let x_133: bitstring = (if v_391 then (l_120,h_119) else caught-fail) in
                                            {2103}let binder_key_21: bitstring = (if v_390 then catch-fail((if v_391 then hmac(@7_tls_h,early_secret_31,x_133) else fail-any)) else caught-fail) in
                                            {2104}let v_392: bool = not-caught-fail(binder_key_21) in
                                            {2105}let v_393: bitstring = (if v_388 then catch-fail((if v_390 then (if v_392 then (early_secret_31,binder_key_21) else fail-any) else fail-any)) else caught-fail) in
                                            {2106}let v_394: bool = (not-caught-fail(v_393) && success?(1-proj-2-tuple(v_393))) in
                                            {2107}let kb_21: mac_key = (if v_394 then 2-proj-2-tuple(v_393) else caught-fail) in
                                            {2108}let es_31: bitstring = (if v_394 then 1-proj-2-tuple(v_393) else caught-fail) in
                                            {2109}let v_395: bitstring = (if not(v_388) then catch-fail(psk_data'_6) else caught-fail) in
                                            {2110}let v_396: bool = (not-caught-fail(v_395) && success?(1-proj-4-tuple(v_395))) in
                                            {2111}let is_safe_18: bool = (if v_396 then 4-proj-4-tuple(v_395) else caught-fail) in
                                            {2112}let es_32: bitstring = (if v_396 then 3-proj-4-tuple(v_395) else caught-fail) in
                                            {2113}let id_26: identityPsk = (if v_396 then 2-proj-4-tuple(v_395) else caught-fail) in
                                            {2114}let psk_51: preSharedKey = (if v_396 then 1-proj-4-tuple(v_395) else caught-fail) in
                                            {2115}let (psk_52: preSharedKey,early_secret_32: bitstring,valid_8: bool,safe_psk_14: bool) = (if v_388 then (if v_394 then (NoPsk,es_31,true,false) else fail-any) else (if v_396 then (psk_51,es_32,((psk_51 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_20)),is_safe_18) else fail-any)) in
                                            {2116}event Client_PSKChoosen(@7_id_client,psk_52,safe_psk_14);
                                            {2117}if valid_8 then
                                            (
                                                {2118}let gxy_17: element = catch-fail(dh_decap_fun(g_8,gy_9,x_132)) in
                                                {2119}let v_397: bool = not-caught-fail(gxy_17) in
                                                {2120}new s_39[]: seed;
                                                {2121}let gxy_18: element = (if v_397 then gxy_17 else dh_f(s_39)) in
                                                {2122}event Client_DH_gxy(@7_id_client,gxy_18);
                                                {2123}let l_121: label = tls13_derived in
                                                {2124}let m_40: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2125}let v_398: bool = not-caught-fail(m_40) in
                                                {2126}let h_120: bitstring = (if v_398 then catch-fail(hash(@7_tls_h,m_40)) else caught-fail) in
                                                {2127}let v_399: bool = not-caught-fail(h_120) in
                                                {2128}let x_134: bitstring = (if v_399 then (l_121,h_120) else caught-fail) in
                                                {2129}let extra_22: bitstring = catch-fail((if v_398 then (if v_399 then hmac(@7_tls_h,early_secret_32,x_134) else fail-any) else fail-any)) in
                                                {2130}let v_400: bool = not-caught-fail(extra_22) in
                                                {2131}let handshake_secret_9: bitstring = (if v_400 then hmac(@7_tls_h,extra_22,gxy_18) else fail-any) in
                                                {2132}let l_122: label = tls13_derived in
                                                {2133}let m_41: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2134}let v_401: bool = not-caught-fail(m_41) in
                                                {2135}let h_121: bitstring = (if v_401 then catch-fail(hash(@7_tls_h,m_41)) else caught-fail) in
                                                {2136}let v_402: bool = not-caught-fail(h_121) in
                                                {2137}let x_135: bitstring = (if v_402 then (l_122,h_121) else caught-fail) in
                                                {2138}let extra_23: bitstring = catch-fail((if v_401 then (if v_402 then hmac(@7_tls_h,handshake_secret_9,x_135) else fail-any) else fail-any)) in
                                                {2139}let v_403: bool = not-caught-fail(extra_23) in
                                                {2140}let k_33: bitstring = (if v_403 then zero else caught-fail) in
                                                {2141}let master_secret_25: bitstring = (if v_403 then catch-fail(hmac(@7_tls_h,handshake_secret_9,k_33)) else caught-fail) in
                                                {2142}let v_404: bool = not-caught-fail(master_secret_25) in
                                                {2143}let l_123: label = (if v_404 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {2144}let h_122: bitstring = (if v_404 then catch-fail(hash(@7_tls_h,cur_log2_23)) else caught-fail) in
                                                {2145}let v_405: bool = not-caught-fail(h_122) in
                                                {2146}let x_136: bitstring = (if v_405 then (l_123,h_122) else caught-fail) in
                                                {2147}let client_hts_9: bitstring = (if v_404 then catch-fail((if v_405 then hmac(@7_tls_h,handshake_secret_9,x_136) else fail-any)) else caught-fail) in
                                                {2148}let v_406: bool = not-caught-fail(client_hts_9) in
                                                {2149}let l_124: label = (if v_406 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {2150}let h_123: bitstring = (if v_406 then catch-fail(hash(@7_tls_h,cur_log2_23)) else caught-fail) in
                                                {2151}let v_407: bool = not-caught-fail(h_123) in
                                                {2152}let x_137: bitstring = (if v_407 then (l_124,h_123) else caught-fail) in
                                                {2153}let server_hts_9: bitstring = (if v_406 then catch-fail((if v_407 then hmac(@7_tls_h,handshake_secret_9,x_137) else fail-any)) else caught-fail) in
                                                {2154}let v_408: bool = not-caught-fail(server_hts_9) in
                                                {2155}let l_125: label = (if v_408 then tls13_key else caught-fail) in
                                                {2156}let h_124: bitstring = (if v_408 then zero else caught-fail) in
                                                {2157}let x_138: bitstring = (if v_408 then (l_125,h_124) else caught-fail) in
                                                {2158}let client_wkh_9: bitstring = (if v_408 then catch-fail(hmac(@7_tls_h,client_hts_9,x_138)) else caught-fail) in
                                                {2159}let v_409: bool = not-caught-fail(client_wkh_9) in
                                                {2160}let l_126: label = (if v_409 then tls13_key else caught-fail) in
                                                {2161}let h_125: bitstring = (if v_409 then zero else caught-fail) in
                                                {2162}let x_139: bitstring = (if v_409 then (l_126,h_125) else caught-fail) in
                                                {2163}let server_wkh_9: bitstring = (if v_409 then catch-fail(hmac(@7_tls_h,server_hts_9,x_139)) else caught-fail) in
                                                {2164}let v_410: bool = not-caught-fail(server_wkh_9) in
                                                {2165}let l_127: label = (if v_410 then tls13_finished else caught-fail) in
                                                {2166}let h_126: bitstring = (if v_410 then zero else caught-fail) in
                                                {2167}let x_140: bitstring = (if v_410 then (l_127,h_126) else caught-fail) in
                                                {2168}let client_fk_9: bitstring = (if v_410 then catch-fail(hmac(@7_tls_h,client_hts_9,x_140)) else caught-fail) in
                                                {2169}let v_411: bool = not-caught-fail(client_fk_9) in
                                                {2170}let l_128: label = (if v_411 then tls13_finished else caught-fail) in
                                                {2171}let h_127: bitstring = (if v_411 then zero else caught-fail) in
                                                {2172}let x_141: bitstring = (if v_411 then (l_128,h_127) else caught-fail) in
                                                {2173}let server_fk_9: bitstring = (if v_411 then catch-fail(hmac(@7_tls_h,server_hts_9,x_141)) else caught-fail) in
                                                {2174}let v_412: bool = not-caught-fail(server_fk_9) in
                                                {2175}let (master_secret_26: bitstring,chk_16: aead_key,shk_15: aead_key,cfin_16: mac_key,sfin_15: mac_key) = (if v_403 then (if v_404 then (if v_406 then (if v_408 then (if v_409 then (if v_410 then (if v_411 then (if v_412 then (master_secret_25,client_wkh_9,server_wkh_9,client_fk_9,server_fk_9) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {2176}event Client_chk(@7_id_client,chk_16);
                                                {2177}event Client_shk(@7_id_client,shk_15);
                                                {2178}event Client_cfin(@7_id_client,cfin_16);
                                                {2179}event Client_sfin(@7_id_client,sfin_15);
                                                {2180}in(io, enc_ee_msg_8: bitstring);
                                                {2181}let ee_msg_9: msg = aead_dec(@7_tls_a,shk_15,0,zero,enc_ee_msg_8) in
                                                {2182}let EE(ech_ee_8: echExt,extra_ee_8: extraExt) = ee_msg_9 in
                                                {2183}let cur_log2_24: bitstring = (cur_log2_23,ee_msg_9) in
                                                {2184}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_6,sr_19,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_52,safe_psk_14,@7_comp_psk,master_secret_26,chk_16,0,shk_15,1,cfin_16,sfin_15,cur_log2_24)))
                                            )
                                            else
                                                {2185}out(io, illegal_parameter)
                                        )
                                        else
                                            {2186}out(io, illegal_parameter)
                                )
                                else
                                    {2187}out(io, unexpected_message)
                            )
                            else
                                {2340}get pre_shared_keys(c_dom'_5: domain,=s_dom_13,=@7_tls_h,id_27: identityPsk,psk_53: preSharedKey,idP_8: idProc,is_safe_19: bool) in
                                {2188}event Selected_one_time_used_psk(@7_id_client,psk_53,is_safe_19);
                                {2189}event Selected_psk(c_dom_6,c_dom'_5,idP_8,is_safe_19);
                                {2190}event Selected_psk_no_missmatch(@7_id_client,s_dom_13,@7_tls_h,psk_53,id_27);
                                {2191}event Selected_psk_with_ID(c_dom_6,c_dom'_5,id_27,idP_8,is_safe_19);
                                {2192}let v_413: bitstring = (id_27,psk_53,is_safe_19) in
                                {2193}let v_414: bool = success?(1-proj-3-tuple(v_413)) in
                                {2194}let is_safe_20: bool = (if v_414 then 3-proj-3-tuple(v_413) else caught-fail) in
                                {2195}let psk_54: preSharedKey = (if v_414 then 2-proj-3-tuple(v_413) else caught-fail) in
                                {2196}let id_28: identityPsk = (if v_414 then 1-proj-3-tuple(v_413) else caught-fail) in
                                {2197}let offer_19: params = (if v_414 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_13),ech_ext_5,extra_21,trunc_client_psk_ext(id_28)) else caught-fail) in
                                {2198}let cur_log'_9: bitstring = (if v_414 then (cur_log3_4,CH(cr_15,offer_19)) else caught-fail) in
                                {2199}let s_40: bitstring = (if v_414 then zero else caught-fail) in
                                {2200}let k_34: bitstring = (if v_414 then catch-fail(psk2b(psk_54)) else caught-fail) in
                                {2201}let v_415: bool = not-caught-fail(k_34) in
                                {2202}let early_secret_33: bitstring = (if v_414 then catch-fail((if v_415 then hmac(@7_tls_h,s_40,k_34) else fail-any)) else caught-fail) in
                                {2203}let v_416: bool = not-caught-fail(early_secret_33) in
                                {2204}let l_129: label = (if v_416 then tls13_ext_res_binder else caught-fail) in
                                {2205}let m_42: bitstring = (if v_416 then zero else caught-fail) in
                                {2206}let h_128: bitstring = (if v_416 then catch-fail(hash(@7_tls_h,m_42)) else caught-fail) in
                                {2207}let v_417: bool = not-caught-fail(h_128) in
                                {2208}let x_142: bitstring = (if v_417 then (l_129,h_128) else caught-fail) in
                                {2209}let binder_key_22: bitstring = (if v_416 then catch-fail((if v_417 then hmac(@7_tls_h,early_secret_33,x_142) else fail-any)) else caught-fail) in
                                {2210}let v_418: bool = not-caught-fail(binder_key_22) in
                                {2211}let v_419: bitstring = (if v_414 then catch-fail((if v_416 then (if v_418 then (early_secret_33,binder_key_22) else fail-any) else fail-any)) else caught-fail) in
                                {2212}let v_420: bool = (not-caught-fail(v_419) && success?(1-proj-2-tuple(v_419))) in
                                {2213}let kb_22: mac_key = (if v_420 then 2-proj-2-tuple(v_419) else caught-fail) in
                                {2214}let es_33: bitstring = (if v_420 then 1-proj-2-tuple(v_419) else caught-fail) in
                                {2215}let binders_8: bitstring = (if v_420 then catch-fail(hmac(@7_tls_h,kb_22,cur_log'_9)) else caught-fail) in
                                {2216}let v_421: bool = not-caught-fail(binders_8) in
                                {2217}let v_422: bitstring = catch-fail((if v_414 then (if v_420 then (if v_421 then (client_psk_ext(id_28,binders_8),(psk_54,id_28,es_33,is_safe_20)) else fail-any) else fail-any) else fail-any)) in
                                {2218}let v_423: bool = (not-caught-fail(v_422) && success?(1-proj-2-tuple(v_422))) in
                                {2219}let psk_data_13: bitstring = (if v_423 then 2-proj-2-tuple(v_422) else caught-fail) in
                                {2220}let psk_ext_21: preSharedKeyExt = (if v_423 then 1-proj-2-tuple(v_422) else caught-fail) in
                                {2221}let offer_20: params = (if v_423 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_21) else caught-fail) in
                                {2222}let (client_hello'_7: msg,cr'_7: bytes32,kex_data'_7: bitstring,psk_data'_7: bitstring) = (if v_423 then (CH(cr_15,offer_20),cr_15,kex_data_6,psk_data_13) else fail-any) in
                                {2223}event ClientOffersAead(cr'_7,@7_tls_a);
                                {2224}event ClientOffersHash(cr'_7,@7_tls_h);
                                {2225}event ClientOffersGroup(cr'_7,@7_tls_g);
                                {2226}out(io, client_hello'_7);
                                {2227}let cur_log4_7: bitstring = (cur_log3_4,client_hello'_7) in
                                {2228}in(io, server_hello'_7: msg);
                                {2229}let SH(sr'_7: bytes32,mode'_7: params) = server_hello'_7 in
                                (
                                    {2230}if (sr'_7 = B32(HRR24,HRR8)) then
                                        {2231}out(io, unexpected_message)
                                    else
                                        {2232}let (x_143: bitstring,g_9: group) = kex_data'_7 in
                                        {2233}let (psk_offer_9: preSharedKey,id_offer_9: identityPsk,es_offer_9: bitstring,is_safe_offer_9: bool) = psk_data'_7 in
                                        {2234}event Client_PSKOffer(@7_id_client,psk_offer_9,id_offer_9,is_safe_offer_9);
                                        {2235}event Client_Rand_client(@7_id_client,cr'_7);
                                        {2236}event Client_DH_client(@7_id_client,dh_pub(g_9,x_143));
                                        {2237}event Client_server_domain(@7_id_client,s_dom_13);
                                        {2238}let SH(sr_20: bytes32,mode_12: params) = server_hello'_7 in
                                        {2239}event Client_Rand_server(@7_id_client,sr_20);
                                        {2240}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_9,gy_10: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_22: preSharedKeyExt) = mode_12 in
                                        (
                                            {2241}let cur_log2_25: bitstring = (cur_log4_7,server_hello'_7) in
                                            {2242}event Client_DH_server(@7_id_client,gy_10);
                                            {2243}let v_424: bool = (psk_ext_22 = empty_psk_ext) in
                                            {2244}let psk_55: preSharedKey = (if v_424 then NoPsk else caught-fail) in
                                            {2245}let s_41: bitstring = (if v_424 then zero else caught-fail) in
                                            {2246}let k_35: bitstring = (if v_424 then catch-fail(psk2b(psk_55)) else caught-fail) in
                                            {2247}let v_425: bool = not-caught-fail(k_35) in
                                            {2248}let early_secret_34: bitstring = (if v_424 then catch-fail((if v_425 then hmac(@7_tls_h,s_41,k_35) else fail-any)) else caught-fail) in
                                            {2249}let v_426: bool = not-caught-fail(early_secret_34) in
                                            {2250}let l_130: label = (if v_426 then tls13_ext_res_binder else caught-fail) in
                                            {2251}let m_43: bitstring = (if v_426 then zero else caught-fail) in
                                            {2252}let h_129: bitstring = (if v_426 then catch-fail(hash(@7_tls_h,m_43)) else caught-fail) in
                                            {2253}let v_427: bool = not-caught-fail(h_129) in
                                            {2254}let x_144: bitstring = (if v_427 then (l_130,h_129) else caught-fail) in
                                            {2255}let binder_key_23: bitstring = (if v_426 then catch-fail((if v_427 then hmac(@7_tls_h,early_secret_34,x_144) else fail-any)) else caught-fail) in
                                            {2256}let v_428: bool = not-caught-fail(binder_key_23) in
                                            {2257}let v_429: bitstring = (if v_424 then catch-fail((if v_426 then (if v_428 then (early_secret_34,binder_key_23) else fail-any) else fail-any)) else caught-fail) in
                                            {2258}let v_430: bool = (not-caught-fail(v_429) && success?(1-proj-2-tuple(v_429))) in
                                            {2259}let kb_23: mac_key = (if v_430 then 2-proj-2-tuple(v_429) else caught-fail) in
                                            {2260}let es_34: bitstring = (if v_430 then 1-proj-2-tuple(v_429) else caught-fail) in
                                            {2261}let v_431: bitstring = (if not(v_424) then catch-fail(psk_data'_7) else caught-fail) in
                                            {2262}let v_432: bool = (not-caught-fail(v_431) && success?(1-proj-4-tuple(v_431))) in
                                            {2263}let is_safe_21: bool = (if v_432 then 4-proj-4-tuple(v_431) else caught-fail) in
                                            {2264}let es_35: bitstring = (if v_432 then 3-proj-4-tuple(v_431) else caught-fail) in
                                            {2265}let id_29: identityPsk = (if v_432 then 2-proj-4-tuple(v_431) else caught-fail) in
                                            {2266}let psk_56: preSharedKey = (if v_432 then 1-proj-4-tuple(v_431) else caught-fail) in
                                            {2267}let (psk_57: preSharedKey,early_secret_35: bitstring,valid_9: bool,safe_psk_15: bool) = (if v_424 then (if v_430 then (NoPsk,es_34,true,false) else fail-any) else (if v_432 then (psk_56,es_35,((psk_56 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_22)),is_safe_21) else fail-any)) in
                                            {2268}event Client_PSKChoosen(@7_id_client,psk_57,safe_psk_15);
                                            {2269}if valid_9 then
                                            (
                                                {2270}let gxy_19: element = catch-fail(dh_decap_fun(g_9,gy_10,x_143)) in
                                                {2271}let v_433: bool = not-caught-fail(gxy_19) in
                                                {2272}new s_42[]: seed;
                                                {2273}let gxy_20: element = (if v_433 then gxy_19 else dh_f(s_42)) in
                                                {2274}event Client_DH_gxy(@7_id_client,gxy_20);
                                                {2275}let l_131: label = tls13_derived in
                                                {2276}let m_44: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2277}let v_434: bool = not-caught-fail(m_44) in
                                                {2278}let h_130: bitstring = (if v_434 then catch-fail(hash(@7_tls_h,m_44)) else caught-fail) in
                                                {2279}let v_435: bool = not-caught-fail(h_130) in
                                                {2280}let x_145: bitstring = (if v_435 then (l_131,h_130) else caught-fail) in
                                                {2281}let extra_24: bitstring = catch-fail((if v_434 then (if v_435 then hmac(@7_tls_h,early_secret_35,x_145) else fail-any) else fail-any)) in
                                                {2282}let v_436: bool = not-caught-fail(extra_24) in
                                                {2283}let handshake_secret_10: bitstring = (if v_436 then hmac(@7_tls_h,extra_24,gxy_20) else fail-any) in
                                                {2284}let l_132: label = tls13_derived in
                                                {2285}let m_45: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2286}let v_437: bool = not-caught-fail(m_45) in
                                                {2287}let h_131: bitstring = (if v_437 then catch-fail(hash(@7_tls_h,m_45)) else caught-fail) in
                                                {2288}let v_438: bool = not-caught-fail(h_131) in
                                                {2289}let x_146: bitstring = (if v_438 then (l_132,h_131) else caught-fail) in
                                                {2290}let extra_25: bitstring = catch-fail((if v_437 then (if v_438 then hmac(@7_tls_h,handshake_secret_10,x_146) else fail-any) else fail-any)) in
                                                {2291}let v_439: bool = not-caught-fail(extra_25) in
                                                {2292}let k_36: bitstring = (if v_439 then zero else caught-fail) in
                                                {2293}let master_secret_27: bitstring = (if v_439 then catch-fail(hmac(@7_tls_h,handshake_secret_10,k_36)) else caught-fail) in
                                                {2294}let v_440: bool = not-caught-fail(master_secret_27) in
                                                {2295}let l_133: label = (if v_440 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {2296}let h_132: bitstring = (if v_440 then catch-fail(hash(@7_tls_h,cur_log2_25)) else caught-fail) in
                                                {2297}let v_441: bool = not-caught-fail(h_132) in
                                                {2298}let x_147: bitstring = (if v_441 then (l_133,h_132) else caught-fail) in
                                                {2299}let client_hts_10: bitstring = (if v_440 then catch-fail((if v_441 then hmac(@7_tls_h,handshake_secret_10,x_147) else fail-any)) else caught-fail) in
                                                {2300}let v_442: bool = not-caught-fail(client_hts_10) in
                                                {2301}let l_134: label = (if v_442 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {2302}let h_133: bitstring = (if v_442 then catch-fail(hash(@7_tls_h,cur_log2_25)) else caught-fail) in
                                                {2303}let v_443: bool = not-caught-fail(h_133) in
                                                {2304}let x_148: bitstring = (if v_443 then (l_134,h_133) else caught-fail) in
                                                {2305}let server_hts_10: bitstring = (if v_442 then catch-fail((if v_443 then hmac(@7_tls_h,handshake_secret_10,x_148) else fail-any)) else caught-fail) in
                                                {2306}let v_444: bool = not-caught-fail(server_hts_10) in
                                                {2307}let l_135: label = (if v_444 then tls13_key else caught-fail) in
                                                {2308}let h_134: bitstring = (if v_444 then zero else caught-fail) in
                                                {2309}let x_149: bitstring = (if v_444 then (l_135,h_134) else caught-fail) in
                                                {2310}let client_wkh_10: bitstring = (if v_444 then catch-fail(hmac(@7_tls_h,client_hts_10,x_149)) else caught-fail) in
                                                {2311}let v_445: bool = not-caught-fail(client_wkh_10) in
                                                {2312}let l_136: label = (if v_445 then tls13_key else caught-fail) in
                                                {2313}let h_135: bitstring = (if v_445 then zero else caught-fail) in
                                                {2314}let x_150: bitstring = (if v_445 then (l_136,h_135) else caught-fail) in
                                                {2315}let server_wkh_10: bitstring = (if v_445 then catch-fail(hmac(@7_tls_h,server_hts_10,x_150)) else caught-fail) in
                                                {2316}let v_446: bool = not-caught-fail(server_wkh_10) in
                                                {2317}let l_137: label = (if v_446 then tls13_finished else caught-fail) in
                                                {2318}let h_136: bitstring = (if v_446 then zero else caught-fail) in
                                                {2319}let x_151: bitstring = (if v_446 then (l_137,h_136) else caught-fail) in
                                                {2320}let client_fk_10: bitstring = (if v_446 then catch-fail(hmac(@7_tls_h,client_hts_10,x_151)) else caught-fail) in
                                                {2321}let v_447: bool = not-caught-fail(client_fk_10) in
                                                {2322}let l_138: label = (if v_447 then tls13_finished else caught-fail) in
                                                {2323}let h_137: bitstring = (if v_447 then zero else caught-fail) in
                                                {2324}let x_152: bitstring = (if v_447 then (l_138,h_137) else caught-fail) in
                                                {2325}let server_fk_10: bitstring = (if v_447 then catch-fail(hmac(@7_tls_h,server_hts_10,x_152)) else caught-fail) in
                                                {2326}let v_448: bool = not-caught-fail(server_fk_10) in
                                                {2327}let (master_secret_28: bitstring,chk_17: aead_key,shk_16: aead_key,cfin_17: mac_key,sfin_16: mac_key) = (if v_439 then (if v_440 then (if v_442 then (if v_444 then (if v_445 then (if v_446 then (if v_447 then (if v_448 then (master_secret_27,client_wkh_10,server_wkh_10,client_fk_10,server_fk_10) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {2328}event Client_chk(@7_id_client,chk_17);
                                                {2329}event Client_shk(@7_id_client,shk_16);
                                                {2330}event Client_cfin(@7_id_client,cfin_17);
                                                {2331}event Client_sfin(@7_id_client,sfin_16);
                                                {2332}in(io, enc_ee_msg_9: bitstring);
                                                {2333}let ee_msg_10: msg = aead_dec(@7_tls_a,shk_16,0,zero,enc_ee_msg_9) in
                                                {2334}let EE(ech_ee_9: echExt,extra_ee_9: extraExt) = ee_msg_10 in
                                                {2335}let cur_log2_26: bitstring = (cur_log2_25,ee_msg_10) in
                                                {2336}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_7,sr_20,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_57,safe_psk_15,@7_comp_psk,master_secret_28,chk_17,0,shk_16,1,cfin_17,sfin_16,cur_log2_26)))
                                            )
                                            else
                                                {2337}out(io, illegal_parameter)
                                        )
                                        else
                                            {2338}out(io, illegal_parameter)
                                )
                                else
                                    {2339}out(io, unexpected_message)
                        )
                        else
                            {2341}let psk_58: preSharedKey = NoPsk in
                            {2342}let s_43: bitstring = zero in
                            {2343}let k_37: bitstring = catch-fail(psk2b(psk_58)) in
                            {2344}let v_449: bool = not-caught-fail(k_37) in
                            {2345}let early_secret_36: bitstring = catch-fail((if v_449 then hmac(@7_tls_h,s_43,k_37) else fail-any)) in
                            {2346}let v_450: bool = not-caught-fail(early_secret_36) in
                            {2347}let l_139: label = (if v_450 then tls13_ext_res_binder else caught-fail) in
                            {2348}let m_46: bitstring = (if v_450 then zero else caught-fail) in
                            {2349}let h_138: bitstring = (if v_450 then catch-fail(hash(@7_tls_h,m_46)) else caught-fail) in
                            {2350}let v_451: bool = not-caught-fail(h_138) in
                            {2351}let x_153: bitstring = (if v_451 then (l_139,h_138) else caught-fail) in
                            {2352}let binder_key_24: bitstring = (if v_450 then catch-fail((if v_451 then hmac(@7_tls_h,early_secret_36,x_153) else fail-any)) else caught-fail) in
                            {2353}let v_452: bool = not-caught-fail(binder_key_24) in
                            {2354}let v_453: bitstring = catch-fail((if v_450 then (if v_452 then (early_secret_36,binder_key_24) else fail-any) else fail-any)) in
                            {2355}let v_454: bool = (not-caught-fail(v_453) && success?(1-proj-2-tuple(v_453))) in
                            {2356}let kb_24: mac_key = (if v_454 then 2-proj-2-tuple(v_453) else caught-fail) in
                            {2357}let es_36: bitstring = (if v_454 then 1-proj-2-tuple(v_453) else caught-fail) in
                            {2358}let v_455: bitstring = catch-fail((if v_454 then (empty_psk_ext,(NoPsk,zero,es_36,false)) else fail-any)) in
                            {2359}let v_456: bool = (not-caught-fail(v_455) && success?(1-proj-2-tuple(v_455))) in
                            {2360}let psk_data_14: bitstring = (if v_456 then 2-proj-2-tuple(v_455) else caught-fail) in
                            {2361}let psk_ext_23: preSharedKeyExt = (if v_456 then 1-proj-2-tuple(v_455) else caught-fail) in
                            {2362}let offer_21: params = (if v_456 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_23) else caught-fail) in
                            {2363}let (client_hello'_8: msg,cr'_8: bytes32,kex_data'_8: bitstring,psk_data'_8: bitstring) = (if v_456 then (CH(cr_15,offer_21),cr_15,kex_data_6,psk_data_14) else fail-any) in
                            {2364}event ClientOffersAead(cr'_8,@7_tls_a);
                            {2365}event ClientOffersHash(cr'_8,@7_tls_h);
                            {2366}event ClientOffersGroup(cr'_8,@7_tls_g);
                            {2367}out(io, client_hello'_8);
                            {2368}let cur_log4_8: bitstring = (cur_log3_4,client_hello'_8) in
                            {2369}in(io, server_hello'_8: msg);
                            {2370}let SH(sr'_8: bytes32,mode'_8: params) = server_hello'_8 in
                            (
                                {2371}if (sr'_8 = B32(HRR24,HRR8)) then
                                    {2372}out(io, unexpected_message)
                                else
                                    {2373}let (x_154: bitstring,g_10: group) = kex_data'_8 in
                                    {2374}let (psk_offer_10: preSharedKey,id_offer_10: identityPsk,es_offer_10: bitstring,is_safe_offer_10: bool) = psk_data'_8 in
                                    {2375}event Client_PSKOffer(@7_id_client,psk_offer_10,id_offer_10,is_safe_offer_10);
                                    {2376}event Client_Rand_client(@7_id_client,cr'_8);
                                    {2377}event Client_DH_client(@7_id_client,dh_pub(g_10,x_154));
                                    {2378}event Client_server_domain(@7_id_client,s_dom_13);
                                    {2379}let SH(sr_21: bytes32,mode_13: params) = server_hello'_8 in
                                    {2380}event Client_Rand_server(@7_id_client,sr_21);
                                    {2381}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_10,gy_11: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_24: preSharedKeyExt) = mode_13 in
                                    (
                                        {2382}let cur_log2_27: bitstring = (cur_log4_8,server_hello'_8) in
                                        {2383}event Client_DH_server(@7_id_client,gy_11);
                                        {2384}let v_457: bool = (psk_ext_24 = empty_psk_ext) in
                                        {2385}let psk_59: preSharedKey = (if v_457 then NoPsk else caught-fail) in
                                        {2386}let s_44: bitstring = (if v_457 then zero else caught-fail) in
                                        {2387}let k_38: bitstring = (if v_457 then catch-fail(psk2b(psk_59)) else caught-fail) in
                                        {2388}let v_458: bool = not-caught-fail(k_38) in
                                        {2389}let early_secret_37: bitstring = (if v_457 then catch-fail((if v_458 then hmac(@7_tls_h,s_44,k_38) else fail-any)) else caught-fail) in
                                        {2390}let v_459: bool = not-caught-fail(early_secret_37) in
                                        {2391}let l_140: label = (if v_459 then tls13_ext_res_binder else caught-fail) in
                                        {2392}let m_47: bitstring = (if v_459 then zero else caught-fail) in
                                        {2393}let h_139: bitstring = (if v_459 then catch-fail(hash(@7_tls_h,m_47)) else caught-fail) in
                                        {2394}let v_460: bool = not-caught-fail(h_139) in
                                        {2395}let x_155: bitstring = (if v_460 then (l_140,h_139) else caught-fail) in
                                        {2396}let binder_key_25: bitstring = (if v_459 then catch-fail((if v_460 then hmac(@7_tls_h,early_secret_37,x_155) else fail-any)) else caught-fail) in
                                        {2397}let v_461: bool = not-caught-fail(binder_key_25) in
                                        {2398}let v_462: bitstring = (if v_457 then catch-fail((if v_459 then (if v_461 then (early_secret_37,binder_key_25) else fail-any) else fail-any)) else caught-fail) in
                                        {2399}let v_463: bool = (not-caught-fail(v_462) && success?(1-proj-2-tuple(v_462))) in
                                        {2400}let kb_25: mac_key = (if v_463 then 2-proj-2-tuple(v_462) else caught-fail) in
                                        {2401}let es_37: bitstring = (if v_463 then 1-proj-2-tuple(v_462) else caught-fail) in
                                        {2402}let v_464: bitstring = (if not(v_457) then catch-fail(psk_data'_8) else caught-fail) in
                                        {2403}let v_465: bool = (not-caught-fail(v_464) && success?(1-proj-4-tuple(v_464))) in
                                        {2404}let is_safe_22: bool = (if v_465 then 4-proj-4-tuple(v_464) else caught-fail) in
                                        {2405}let es_38: bitstring = (if v_465 then 3-proj-4-tuple(v_464) else caught-fail) in
                                        {2406}let id_30: identityPsk = (if v_465 then 2-proj-4-tuple(v_464) else caught-fail) in
                                        {2407}let psk_60: preSharedKey = (if v_465 then 1-proj-4-tuple(v_464) else caught-fail) in
                                        {2408}let (psk_61: preSharedKey,early_secret_38: bitstring,valid_10: bool,safe_psk_16: bool) = (if v_457 then (if v_463 then (NoPsk,es_37,true,false) else fail-any) else (if v_465 then (psk_60,es_38,((psk_60 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_24)),is_safe_22) else fail-any)) in
                                        {2409}event Client_PSKChoosen(@7_id_client,psk_61,safe_psk_16);
                                        {2410}if valid_10 then
                                        (
                                            {2411}let gxy_21: element = catch-fail(dh_decap_fun(g_10,gy_11,x_154)) in
                                            {2412}let v_466: bool = not-caught-fail(gxy_21) in
                                            {2413}new s_45[]: seed;
                                            {2414}let gxy_22: element = (if v_466 then gxy_21 else dh_f(s_45)) in
                                            {2415}event Client_DH_gxy(@7_id_client,gxy_22);
                                            {2416}let l_141: label = tls13_derived in
                                            {2417}let m_48: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                            {2418}let v_467: bool = not-caught-fail(m_48) in
                                            {2419}let h_140: bitstring = (if v_467 then catch-fail(hash(@7_tls_h,m_48)) else caught-fail) in
                                            {2420}let v_468: bool = not-caught-fail(h_140) in
                                            {2421}let x_156: bitstring = (if v_468 then (l_141,h_140) else caught-fail) in
                                            {2422}let extra_26: bitstring = catch-fail((if v_467 then (if v_468 then hmac(@7_tls_h,early_secret_38,x_156) else fail-any) else fail-any)) in
                                            {2423}let v_469: bool = not-caught-fail(extra_26) in
                                            {2424}let handshake_secret_11: bitstring = (if v_469 then hmac(@7_tls_h,extra_26,gxy_22) else fail-any) in
                                            {2425}let l_142: label = tls13_derived in
                                            {2426}let m_49: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                            {2427}let v_470: bool = not-caught-fail(m_49) in
                                            {2428}let h_141: bitstring = (if v_470 then catch-fail(hash(@7_tls_h,m_49)) else caught-fail) in
                                            {2429}let v_471: bool = not-caught-fail(h_141) in
                                            {2430}let x_157: bitstring = (if v_471 then (l_142,h_141) else caught-fail) in
                                            {2431}let extra_27: bitstring = catch-fail((if v_470 then (if v_471 then hmac(@7_tls_h,handshake_secret_11,x_157) else fail-any) else fail-any)) in
                                            {2432}let v_472: bool = not-caught-fail(extra_27) in
                                            {2433}let k_39: bitstring = (if v_472 then zero else caught-fail) in
                                            {2434}let master_secret_29: bitstring = (if v_472 then catch-fail(hmac(@7_tls_h,handshake_secret_11,k_39)) else caught-fail) in
                                            {2435}let v_473: bool = not-caught-fail(master_secret_29) in
                                            {2436}let l_143: label = (if v_473 then tls13_client_handshake_traffic_secret else caught-fail) in
                                            {2437}let h_142: bitstring = (if v_473 then catch-fail(hash(@7_tls_h,cur_log2_27)) else caught-fail) in
                                            {2438}let v_474: bool = not-caught-fail(h_142) in
                                            {2439}let x_158: bitstring = (if v_474 then (l_143,h_142) else caught-fail) in
                                            {2440}let client_hts_11: bitstring = (if v_473 then catch-fail((if v_474 then hmac(@7_tls_h,handshake_secret_11,x_158) else fail-any)) else caught-fail) in
                                            {2441}let v_475: bool = not-caught-fail(client_hts_11) in
                                            {2442}let l_144: label = (if v_475 then tls13_server_handshake_traffic_secret else caught-fail) in
                                            {2443}let h_143: bitstring = (if v_475 then catch-fail(hash(@7_tls_h,cur_log2_27)) else caught-fail) in
                                            {2444}let v_476: bool = not-caught-fail(h_143) in
                                            {2445}let x_159: bitstring = (if v_476 then (l_144,h_143) else caught-fail) in
                                            {2446}let server_hts_11: bitstring = (if v_475 then catch-fail((if v_476 then hmac(@7_tls_h,handshake_secret_11,x_159) else fail-any)) else caught-fail) in
                                            {2447}let v_477: bool = not-caught-fail(server_hts_11) in
                                            {2448}let l_145: label = (if v_477 then tls13_key else caught-fail) in
                                            {2449}let h_144: bitstring = (if v_477 then zero else caught-fail) in
                                            {2450}let x_160: bitstring = (if v_477 then (l_145,h_144) else caught-fail) in
                                            {2451}let client_wkh_11: bitstring = (if v_477 then catch-fail(hmac(@7_tls_h,client_hts_11,x_160)) else caught-fail) in
                                            {2452}let v_478: bool = not-caught-fail(client_wkh_11) in
                                            {2453}let l_146: label = (if v_478 then tls13_key else caught-fail) in
                                            {2454}let h_145: bitstring = (if v_478 then zero else caught-fail) in
                                            {2455}let x_161: bitstring = (if v_478 then (l_146,h_145) else caught-fail) in
                                            {2456}let server_wkh_11: bitstring = (if v_478 then catch-fail(hmac(@7_tls_h,server_hts_11,x_161)) else caught-fail) in
                                            {2457}let v_479: bool = not-caught-fail(server_wkh_11) in
                                            {2458}let l_147: label = (if v_479 then tls13_finished else caught-fail) in
                                            {2459}let h_146: bitstring = (if v_479 then zero else caught-fail) in
                                            {2460}let x_162: bitstring = (if v_479 then (l_147,h_146) else caught-fail) in
                                            {2461}let client_fk_11: bitstring = (if v_479 then catch-fail(hmac(@7_tls_h,client_hts_11,x_162)) else caught-fail) in
                                            {2462}let v_480: bool = not-caught-fail(client_fk_11) in
                                            {2463}let l_148: label = (if v_480 then tls13_finished else caught-fail) in
                                            {2464}let h_147: bitstring = (if v_480 then zero else caught-fail) in
                                            {2465}let x_163: bitstring = (if v_480 then (l_148,h_147) else caught-fail) in
                                            {2466}let server_fk_11: bitstring = (if v_480 then catch-fail(hmac(@7_tls_h,server_hts_11,x_163)) else caught-fail) in
                                            {2467}let v_481: bool = not-caught-fail(server_fk_11) in
                                            {2468}let (master_secret_30: bitstring,chk_18: aead_key,shk_17: aead_key,cfin_18: mac_key,sfin_17: mac_key) = (if v_472 then (if v_473 then (if v_475 then (if v_477 then (if v_478 then (if v_479 then (if v_480 then (if v_481 then (master_secret_29,client_wkh_11,server_wkh_11,client_fk_11,server_fk_11) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                            {2469}event Client_chk(@7_id_client,chk_18);
                                            {2470}event Client_shk(@7_id_client,shk_17);
                                            {2471}event Client_cfin(@7_id_client,cfin_18);
                                            {2472}event Client_sfin(@7_id_client,sfin_17);
                                            {2473}in(io, enc_ee_msg_10: bitstring);
                                            {2474}let ee_msg_11: msg = aead_dec(@7_tls_a,shk_17,0,zero,enc_ee_msg_10) in
                                            {2475}let EE(ech_ee_10: echExt,extra_ee_10: extraExt) = ee_msg_11 in
                                            {2476}let cur_log2_28: bitstring = (cur_log2_27,ee_msg_11) in
                                            {2477}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_8,sr_21,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_61,safe_psk_16,@7_comp_psk,master_secret_30,chk_18,0,shk_17,1,cfin_18,sfin_17,cur_log2_28)))
                                        )
                                        else
                                            {2478}out(io, illegal_parameter)
                                    )
                                    else
                                        {2479}out(io, illegal_parameter)
                            )
                            else
                                {2480}out(io, unexpected_message)
                    )
                    else
                        {2481}out(io, illegal_parameter)
                )
                else
                    {2482}if send_kex then
                    (
                        {2483}let (x_164: bitstring,g_11: group) = kex_data_5 in
                        {2484}let (psk_offer_11: preSharedKey,id_offer_11: identityPsk,es_offer_11: bitstring,is_safe_offer_11: bool) = psk_data_11 in
                        {2485}event Client_PSKOffer(@7_id_client,psk_offer_11,id_offer_11,is_safe_offer_11);
                        {2486}event Client_Rand_client(@7_id_client,cr_14);
                        {2487}event Client_DH_client(@7_id_client,dh_pub(g_11,x_164));
                        {2488}event Client_server_domain(@7_id_client,s_dom_13);
                        {2489}let SH(sr_22: bytes32,mode_14: params) = server_hello_3 in
                        {2490}event Client_Rand_server(@7_id_client,sr_22);
                        {2491}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_11,gy_12: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_25: preSharedKeyExt) = mode_14 in
                        (
                            {2492}let cur_log2_29: bitstring = (cur_log2_22,server_hello_3) in
                            {2493}event Client_DH_server(@7_id_client,gy_12);
                            {2494}let v_482: bool = (psk_ext_25 = empty_psk_ext) in
                            {2495}let psk_62: preSharedKey = (if v_482 then NoPsk else caught-fail) in
                            {2496}let s_46: bitstring = (if v_482 then zero else caught-fail) in
                            {2497}let k_40: bitstring = (if v_482 then catch-fail(psk2b(psk_62)) else caught-fail) in
                            {2498}let v_483: bool = not-caught-fail(k_40) in
                            {2499}let early_secret_39: bitstring = (if v_482 then catch-fail((if v_483 then hmac(@7_tls_h,s_46,k_40) else fail-any)) else caught-fail) in
                            {2500}let v_484: bool = not-caught-fail(early_secret_39) in
                            {2501}let l_149: label = (if v_484 then tls13_ext_res_binder else caught-fail) in
                            {2502}let m_50: bitstring = (if v_484 then zero else caught-fail) in
                            {2503}let h_148: bitstring = (if v_484 then catch-fail(hash(@7_tls_h,m_50)) else caught-fail) in
                            {2504}let v_485: bool = not-caught-fail(h_148) in
                            {2505}let x_165: bitstring = (if v_485 then (l_149,h_148) else caught-fail) in
                            {2506}let binder_key_26: bitstring = (if v_484 then catch-fail((if v_485 then hmac(@7_tls_h,early_secret_39,x_165) else fail-any)) else caught-fail) in
                            {2507}let v_486: bool = not-caught-fail(binder_key_26) in
                            {2508}let v_487: bitstring = (if v_482 then catch-fail((if v_484 then (if v_486 then (early_secret_39,binder_key_26) else fail-any) else fail-any)) else caught-fail) in
                            {2509}let v_488: bool = (not-caught-fail(v_487) && success?(1-proj-2-tuple(v_487))) in
                            {2510}let kb_26: mac_key = (if v_488 then 2-proj-2-tuple(v_487) else caught-fail) in
                            {2511}let es_39: bitstring = (if v_488 then 1-proj-2-tuple(v_487) else caught-fail) in
                            {2512}let v_489: bitstring = (if not(v_482) then catch-fail(psk_data_11) else caught-fail) in
                            {2513}let v_490: bool = (not-caught-fail(v_489) && success?(1-proj-4-tuple(v_489))) in
                            {2514}let is_safe_23: bool = (if v_490 then 4-proj-4-tuple(v_489) else caught-fail) in
                            {2515}let es_40: bitstring = (if v_490 then 3-proj-4-tuple(v_489) else caught-fail) in
                            {2516}let id_31: identityPsk = (if v_490 then 2-proj-4-tuple(v_489) else caught-fail) in
                            {2517}let psk_63: preSharedKey = (if v_490 then 1-proj-4-tuple(v_489) else caught-fail) in
                            {2518}let (psk_64: preSharedKey,early_secret_40: bitstring,valid_11: bool,safe_psk_17: bool) = (if v_482 then (if v_488 then (NoPsk,es_39,true,false) else fail-any) else (if v_490 then (psk_63,es_40,((psk_63 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_25)),is_safe_23) else fail-any)) in
                            {2519}event Client_PSKChoosen(@7_id_client,psk_64,safe_psk_17);
                            {2520}if valid_11 then
                            (
                                {2521}let gxy_23: element = catch-fail(dh_decap_fun(g_11,gy_12,x_164)) in
                                {2522}let v_491: bool = not-caught-fail(gxy_23) in
                                {2523}new s_47[]: seed;
                                {2524}let gxy_24: element = (if v_491 then gxy_23 else dh_f(s_47)) in
                                {2525}event Client_DH_gxy(@7_id_client,gxy_24);
                                {2526}let l_150: label = tls13_derived in
                                {2527}let m_51: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                {2528}let v_492: bool = not-caught-fail(m_51) in
                                {2529}let h_149: bitstring = (if v_492 then catch-fail(hash(@7_tls_h,m_51)) else caught-fail) in
                                {2530}let v_493: bool = not-caught-fail(h_149) in
                                {2531}let x_166: bitstring = (if v_493 then (l_150,h_149) else caught-fail) in
                                {2532}let extra_28: bitstring = catch-fail((if v_492 then (if v_493 then hmac(@7_tls_h,early_secret_40,x_166) else fail-any) else fail-any)) in
                                {2533}let v_494: bool = not-caught-fail(extra_28) in
                                {2534}let handshake_secret_12: bitstring = (if v_494 then hmac(@7_tls_h,extra_28,gxy_24) else fail-any) in
                                {2535}let l_151: label = tls13_derived in
                                {2536}let m_52: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                {2537}let v_495: bool = not-caught-fail(m_52) in
                                {2538}let h_150: bitstring = (if v_495 then catch-fail(hash(@7_tls_h,m_52)) else caught-fail) in
                                {2539}let v_496: bool = not-caught-fail(h_150) in
                                {2540}let x_167: bitstring = (if v_496 then (l_151,h_150) else caught-fail) in
                                {2541}let extra_29: bitstring = catch-fail((if v_495 then (if v_496 then hmac(@7_tls_h,handshake_secret_12,x_167) else fail-any) else fail-any)) in
                                {2542}let v_497: bool = not-caught-fail(extra_29) in
                                {2543}let k_41: bitstring = (if v_497 then zero else caught-fail) in
                                {2544}let master_secret_31: bitstring = (if v_497 then catch-fail(hmac(@7_tls_h,handshake_secret_12,k_41)) else caught-fail) in
                                {2545}let v_498: bool = not-caught-fail(master_secret_31) in
                                {2546}let l_152: label = (if v_498 then tls13_client_handshake_traffic_secret else caught-fail) in
                                {2547}let h_151: bitstring = (if v_498 then catch-fail(hash(@7_tls_h,cur_log2_29)) else caught-fail) in
                                {2548}let v_499: bool = not-caught-fail(h_151) in
                                {2549}let x_168: bitstring = (if v_499 then (l_152,h_151) else caught-fail) in
                                {2550}let client_hts_12: bitstring = (if v_498 then catch-fail((if v_499 then hmac(@7_tls_h,handshake_secret_12,x_168) else fail-any)) else caught-fail) in
                                {2551}let v_500: bool = not-caught-fail(client_hts_12) in
                                {2552}let l_153: label = (if v_500 then tls13_server_handshake_traffic_secret else caught-fail) in
                                {2553}let h_152: bitstring = (if v_500 then catch-fail(hash(@7_tls_h,cur_log2_29)) else caught-fail) in
                                {2554}let v_501: bool = not-caught-fail(h_152) in
                                {2555}let x_169: bitstring = (if v_501 then (l_153,h_152) else caught-fail) in
                                {2556}let server_hts_12: bitstring = (if v_500 then catch-fail((if v_501 then hmac(@7_tls_h,handshake_secret_12,x_169) else fail-any)) else caught-fail) in
                                {2557}let v_502: bool = not-caught-fail(server_hts_12) in
                                {2558}let l_154: label = (if v_502 then tls13_key else caught-fail) in
                                {2559}let h_153: bitstring = (if v_502 then zero else caught-fail) in
                                {2560}let x_170: bitstring = (if v_502 then (l_154,h_153) else caught-fail) in
                                {2561}let client_wkh_12: bitstring = (if v_502 then catch-fail(hmac(@7_tls_h,client_hts_12,x_170)) else caught-fail) in
                                {2562}let v_503: bool = not-caught-fail(client_wkh_12) in
                                {2563}let l_155: label = (if v_503 then tls13_key else caught-fail) in
                                {2564}let h_154: bitstring = (if v_503 then zero else caught-fail) in
                                {2565}let x_171: bitstring = (if v_503 then (l_155,h_154) else caught-fail) in
                                {2566}let server_wkh_12: bitstring = (if v_503 then catch-fail(hmac(@7_tls_h,server_hts_12,x_171)) else caught-fail) in
                                {2567}let v_504: bool = not-caught-fail(server_wkh_12) in
                                {2568}let l_156: label = (if v_504 then tls13_finished else caught-fail) in
                                {2569}let h_155: bitstring = (if v_504 then zero else caught-fail) in
                                {2570}let x_172: bitstring = (if v_504 then (l_156,h_155) else caught-fail) in
                                {2571}let client_fk_12: bitstring = (if v_504 then catch-fail(hmac(@7_tls_h,client_hts_12,x_172)) else caught-fail) in
                                {2572}let v_505: bool = not-caught-fail(client_fk_12) in
                                {2573}let l_157: label = (if v_505 then tls13_finished else caught-fail) in
                                {2574}let h_156: bitstring = (if v_505 then zero else caught-fail) in
                                {2575}let x_173: bitstring = (if v_505 then (l_157,h_156) else caught-fail) in
                                {2576}let server_fk_12: bitstring = (if v_505 then catch-fail(hmac(@7_tls_h,server_hts_12,x_173)) else caught-fail) in
                                {2577}let v_506: bool = not-caught-fail(server_fk_12) in
                                {2578}let (master_secret_32: bitstring,chk_19: aead_key,shk_18: aead_key,cfin_19: mac_key,sfin_18: mac_key) = (if v_497 then (if v_498 then (if v_500 then (if v_502 then (if v_503 then (if v_504 then (if v_505 then (if v_506 then (master_secret_31,client_wkh_12,server_wkh_12,client_fk_12,server_fk_12) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                {2579}event Client_chk(@7_id_client,chk_19);
                                {2580}event Client_shk(@7_id_client,shk_18);
                                {2581}event Client_cfin(@7_id_client,cfin_19);
                                {2582}event Client_sfin(@7_id_client,sfin_18);
                                {2583}in(io, enc_ee_msg_11: bitstring);
                                {2584}let ee_msg_12: msg = aead_dec(@7_tls_a,shk_18,0,zero,enc_ee_msg_11) in
                                {2585}let EE(ech_ee_11: echExt,extra_ee_11: extraExt) = ee_msg_12 in
                                {2586}let cur_log2_30: bitstring = (cur_log2_29,ee_msg_12) in
                                {2587}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr_14,sr_22,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_64,safe_psk_17,@7_comp_psk,master_secret_32,chk_19,0,shk_18,1,cfin_19,sfin_18,cur_log2_30)))
                            )
                            else
                                {2588}out(io, illegal_parameter)
                        )
                        else
                            {2589}out(io, illegal_parameter)
                    )
                    else
                        {2590}out(io, illegal_parameter)
            )
            else
                {2591}out(io, unexpected_message)
        )
) | (
    0
) | (
    {2592}!
    {2593}new id_server_4: idProc;
    {2594}in(io, s_dom_14: domain);
    {2595}event Same(s_dom_14);
    {2596}let id_server_5: idProc = id_server_4 in
    {2597}let extra_ext_2: extraExt = empty_extra_ext in
    {2598}let tls_h_1: hash_alg = id_hash(StrongHash,1) in
    {2599}let tls_a_1: aead_alg = id_aead(StrongAE,1) in
    {2600}let tls_g_1: group = id_g(StrongDH,1) in
    {2601}let backend_h: hash_alg = id_hash(StrongHash,1) in
    {2602}let backend_a: aead_alg = id_aead(StrongAE,1) in
    {2603}let backend_g: group = id_g(StrongDH,1) in
    {2604}let use_ech: bool = false in
    {2605}in(io, use_psk_1: bool);
    {2606}new @5_st[]: stamp;
    {2607}event PreciseInput(@5_st,use_psk_1);
    {2608}let () = () in
    {2609}event Same(use_psk_1);
    {2610}in(io, req_cert_3: bool);
    {2611}new @5_st_1[]: stamp;
    {2612}event PreciseInput(@5_st_1,req_cert_3);
    {2613}let () = () in
    {2614}event Same(req_cert_3);
    {2615}in(io, o_client_hello: msg);
    {2616}let CH(cr_16: bytes32,nego(=TLS13,c_h_alg: hash_alg,c_a_alg: aead_alg,kex_ext_5: keyShareExt,sni_ext_2: sniExt,ech_ext_6: echExt,extra_ext_3: extraExt,psk_ext_26: preSharedKeyExt)) = o_client_hello in
    (
        {2617}if (sni_ext_2 = SNI(s_dom_14)) then
        (
            {2808}get ech_configurations(ech_config(config_id: configId,ech_g_2: group,pkR_1: element,=s_dom_14,ech_h_2: hash_alg,ech_a_2: aead_alg),skR_1: bitstring) in
            {2618}let ech_conf: echConfig = ech_config(config_id,ech_g_2,pkR_1,s_dom_14,ech_h_2,ech_a_2) in
            {2619}let @4_x: bitstring = (ech_conf,skR_1) in
            {2620}new @4_st[]: stamp;
            {2621}event PreciseInput(@4_st,@4_x);
            {2622}let () = () in
            {2623}event ServerChoosesEchConfig(id_server_5,ech_conf,use_ech);
            {2624}let v_507: echConfig = ech_conf in
            {2625}let v_508: bool = success?(1-proj-ech_config(v_507)) in
            {2626}let a_alg_8: aead_alg = (if v_508 then 6-proj-ech_config(v_507) else caught-fail) in
            {2627}let h_alg_11: hash_alg = (if v_508 then 5-proj-ech_config(v_507) else caught-fail) in
            {2628}let s_dom_15: domain = (if v_508 then 4-proj-ech_config(v_507) else caught-fail) in
            {2629}let pkR_2: element = (if v_508 then 3-proj-ech_config(v_507) else caught-fail) in
            {2630}let g_12: group = (if v_508 then 2-proj-ech_config(v_507) else caught-fail) in
            {2631}let config_id_1: configId = (if v_508 then 1-proj-ech_config(v_507) else caught-fail) in
            {2632}new s_48[]: seed;
            {2633}let gx_10: element = (if v_508 then dh_pub(g_12,dh_k(s_48)) else caught-fail) in
            {2634}let v_509: bitstring = (if v_508 then catch-fail((dh_k(s_48),gx_10)) else caught-fail) in
            {2635}let v_510: bool = (not-caught-fail(v_509) && success?(1-proj-2-tuple(v_509))) in
            {2636}let pkR': element = (if v_510 then 2-proj-2-tuple(v_509) else caught-fail) in
            {2637}let skR': bitstring = (if v_510 then 1-proj-2-tuple(v_509) else caught-fail) in
            {2638}new config_id'[]: configId;
            {2639}let retry_ech_ext: echExt = (if v_508 then (if v_510 then ECHConfigList(ech_config(config_id',g_12,pkR',s_dom_15,h_alg_11,a_alg_8)) else fail-any) else fail-any) in
            {2640}if ((use_ech ≠ true) || (ech_ext_6 = empty_ech_ext)) then
            (
                {2641}event ServerEchAcceptance(id_server_5,false);
                {2642}let ee_msg_13: msg = EE(empty_ech_ext,extra_ext_2) in
                {2643}let CH(cr_17: bytes32,nego(=TLS13,=tls_h_1,=tls_a_1,kex_ext_6: keyShareExt,SNI(=s_dom_14),ech_ext_7: echExt,extra_ext_4: extraExt,psk_ext_27: preSharedKeyExt)) = o_client_hello in
                (
                    {2644}let (=true,client_kex_ext(DHE_group(=tls_g_1))) = (true,kex_ext_6) in
                    (
                        {2645}let hrr_mode: params = nego(TLS13,tls_h_1,tls_a_1,hrr_kex_ext(tls_g_1),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext) in
                        {2646}let hello_retry_request: msg = SH(B32(HRR24,HRR8),hrr_mode) in
                        {2647}out(io, hello_retry_request);
                        {2648}let cur_log_HRR: bitstring = ((zero,o_client_hello),hello_retry_request) in
                        {2649}in(io, client_hello'_9: msg);
                        {2650}let CH(cr'_9: bytes32,offer': params) = client_hello'_9 in
                            {2651}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_14,req_cert_3,false,use_psk_1,false,ee_msg_13,client_hello'_9,cur_log_HRR)))
                        else
                            {2652}out(io, unexpected_message)
                    )
                    else
                        {2653}let client_kex_ext(DHE_kex(=tls_g_1,gx_11: element)) = kex_ext_6 in
                            {2654}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_14,req_cert_3,false,use_psk_1,true,ee_msg_13,o_client_hello,zero)))
                        else
                            {2655}out(io, handshake_failure)
                )
                else
                    {2656}out(io, handshake_failure)
            )
            else
                {2657}let ECHClientHelloOuter(ech_h': hash_alg,ech_a': aead_alg,config_id'_1: configId,enc: element,payload: bitstring) = ech_ext_6 in
                (
                    {2658}if ((ech_h' = ech_h_2) && ((ech_a' = ech_a_2) && (config_id'_1 = config_id))) then
                    (
                        {2659}let info: bitstring = (tls_ech_str,ech_conf) in
                        {2660}let gxy_25: element = catch-fail(dh_decap_fun(ech_g_2,enc,skR_1)) in
                        {2661}let v_511: bool = not-caught-fail(gxy_25) in
                        {2662}new s_49[]: seed;
                        {2663}let shared_secret: element = (if v_511 then gxy_25 else dh_f(s_49)) in
                        {2664}let r: hpkeRole = R in
                        {2665}let salt: bitstring = zero in
                        {2666}let label_1: label = hpke_info_hash in
                        {2667}let k_42: bitstring = (label_1,info) in
                        {2668}let info_hash: bitstring = catch-fail(hmac(ech_h_2,salt,k_42)) in
                        {2669}let v_512: bool = not-caught-fail(info_hash) in
                        {2670}let label_2: label = (if v_512 then hpke_secret else caught-fail) in
                        {2671}let ikm: bitstring = (if v_512 then zero else caught-fail) in
                        {2672}let k_43: bitstring = (if v_512 then (label_2,ikm) else caught-fail) in
                        {2673}let xsecret: bitstring = (if v_512 then catch-fail(hmac(ech_h_2,shared_secret,k_43)) else caught-fail) in
                        {2674}let v_513: bool = not-caught-fail(xsecret) in
                        {2675}let label_3: label = (if v_513 then hpke_key else caught-fail) in
                        {2676}let x_174: bitstring = (if v_513 then (label_3,info_hash) else caught-fail) in
                        {2677}let key: aead_key = (if v_513 then catch-fail(hmac(ech_h_2,xsecret,x_174)) else caught-fail) in
                        {2678}let v_514: bool = not-caught-fail(key) in
                        {2679}let label_4: label = (if v_514 then hpke_base_nonce else caught-fail) in
                        {2680}let x_175: bitstring = (if v_514 then (label_4,info_hash) else caught-fail) in
                        {2681}let base_nonce: bitstring = (if v_514 then catch-fail(hmac(ech_h_2,xsecret,x_175)) else caught-fail) in
                        {2682}let v_515: bool = not-caught-fail(base_nonce) in
                        {2683}let context: hpkeContext = (if v_512 then (if v_513 then (if v_514 then (if v_515 then hpke_context(r,key,base_nonce) else fail-any) else fail-any) else fail-any) else fail-any) in
                        {2684}let v_516: msg = o_client_hello in
                        {2685}let v_517: bool = (success?(1-proj-nego(2-proj-CH(v_516))) && success?(1-proj-CH(v_516))) in
                        {2686}let psk_ext_28: preSharedKeyExt = (if v_517 then 8-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2687}let extra_ext_5: extraExt = (if v_517 then 7-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2688}let ech_ext_8: echExt = (if v_517 then 6-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2689}let sni_ext_3: sniExt = (if v_517 then 5-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2690}let kex_ext_7: keyShareExt = (if v_517 then 4-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2691}let a_alg_9: aead_alg = (if v_517 then 3-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2692}let h_alg_12: hash_alg = (if v_517 then 2-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2693}let v_518: TLS_version = (if v_517 then 1-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2694}let r_1: bytes32 = (if v_517 then 1-proj-CH(v_516) else caught-fail) in
                        {2695}let v_519: echExt = (if v_517 then catch-fail(ech_ext_8) else caught-fail) in
                        {2696}let v_520: bool = (not-caught-fail(v_519) && success?(1-proj-ECHClientHelloOuter(v_519))) in
                        {2697}let payload_1: bitstring = (if v_520 then 5-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2698}let enc_1: element = (if v_520 then 4-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2699}let config_id_2: configId = (if v_520 then 3-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2700}let a_alg_ech: aead_alg = (if v_520 then 2-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2701}let h_alg_ech: hash_alg = (if v_520 then 1-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2702}let ech_ext': echExt = (if v_520 then ECHClientHelloOuter(h_alg_ech,a_alg_ech,config_id_2,enc_1,zero) else caught-fail) in
                        {2703}let client_hello_AAD: msg = (if v_517 then (if v_520 then CH(r_1,nego(v_518,h_alg_12,a_alg_9,kex_ext_7,sni_ext_3,ech_ext',extra_ext_5,psk_ext_28)) else fail-any) else fail-any) in
                        {2704}let n: nat = 1 in
                        {2705}let v_521: hpkeContext = context in
                        {2706}let v_522: bool = ((R =nf 1-proj-hpke_context(v_521)) && success?(1-proj-hpke_context(v_521))) in
                        {2707}let base_nonce_1: bitstring = (if v_522 then 3-proj-hpke_context(v_521) else caught-fail) in
                        {2708}let key_1: aead_key = (if v_522 then 2-proj-hpke_context(v_521) else caught-fail) in
                        {2709}let i_client_hello: msg = (if v_522 then aead_dec(ech_a_2,key_1,(base_nonce_1,n),client_hello_AAD,payload) else fail-any) in
                        (
                            {2710}let CH(cr'_10: bytes32,nego(=TLS13,c_h_alg': hash_alg,c_a_alg': aead_alg,kex_ext': keyShareExt,SNI(i_dom: domain),=ECHClientHelloInner,extra_ext': extraExt,psk_ext': preSharedKeyExt)) = i_client_hello in
                            (
                                {2711}event ServerEchAcceptance(id_server_5,true);
                                {2712}let ee_msg_14: msg = EE(empty_ech_ext,extra_ext_2) in
                                {2713}let CH(cr_18: bytes32,nego(=TLS13,=backend_h,=backend_a,kex_ext_8: keyShareExt,SNI(i_dom_1: domain),=ECHClientHelloInner,extra_ext_6: extraExt,psk_ext_29: preSharedKeyExt)) = i_client_hello in
                                (
                                    {2714}let (=true,client_kex_ext(DHE_group(=backend_g))) = (true,kex_ext_8) in
                                    (
                                        {2715}let hrr_mode_1: params = nego(TLS13,backend_h,backend_a,hrr_kex_ext(backend_g),empty_sni_ext,ECHHelloRetryRequest(zero8),empty_extra_ext,empty_psk_ext) in
                                        {2716}let hrr: msg = SH(B32(HRR24,HRR8),hrr_mode_1) in
                                        {2717}let cur_log_9: bitstring = ((zero,i_client_hello),hrr) in
                                        {2718}let transcript_hrr_ech_conf: bitstring = catch-fail(hash(backend_h,cur_log_9)) in
                                        {2719}let v_523: bool = not-caught-fail(transcript_hrr_ech_conf) in
                                        {2720}let s_50: bitstring = (if v_523 then zero else caught-fail) in
                                        {2721}let k_44: bitstring = (if v_523 then catch-fail(b32_2_b(get_random(i_client_hello))) else caught-fail) in
                                        {2722}let v_524: bool = not-caught-fail(k_44) in
                                        {2723}let k_45: bitstring = (if v_523 then catch-fail((if v_524 then hmac(backend_h,s_50,k_44) else fail-any)) else caught-fail) in
                                        {2724}let v_525: bool = not-caught-fail(k_45) in
                                        {2725}let l_158: label = (if v_525 then hrr_ech_accept_confirmation else caught-fail) in
                                        {2726}let x_176: bitstring = (if v_525 then (l_158,cur_log_9) else caught-fail) in
                                        {2727}let hrr_accept_confirmation: bytes8 = catch-fail((if v_523 then crop_into_bytes8((if v_525 then hmac(backend_h,k_45,x_176) else fail-any)) else fail-any)) in
                                        {2728}let v_526: bool = not-caught-fail(hrr_accept_confirmation) in
                                        {2729}let hrr_mode_2: params = (if v_526 then nego(TLS13,backend_h,backend_a,hrr_kex_ext(backend_g),empty_sni_ext,ECHHelloRetryRequest(hrr_accept_confirmation),empty_extra_ext,empty_psk_ext) else caught-fail) in
                                        {2730}let hrr_msg: msg = (if v_526 then SH(B32(HRR24,HRR8),hrr_mode_2) else fail-any) in
                                        {2731}out(io, hrr_msg);
                                        {2732}let ech_config(id_conf: configId,ech_g_3: group,pkR_3: element,s_dom_16: domain,ech_h_3: hash_alg,ech_a_3: aead_alg) = ech_conf in
                                        {2733}in(io, o_client_hello_1: msg);
                                        {2734}let CH(cr'_11: bytes32,nego(=TLS13,h_alg': hash_alg,a_alg': aead_alg,kex_ext'_1: keyShareExt,SNI(=s_dom_16),ech_ext_9: echExt,extra_ext'_1: extraExt,psk_ext'_1: preSharedKeyExt)) = o_client_hello_1 in
                                        (
                                            {2735}if (ech_ext_9 = empty_ech_ext) then
                                                {2736}out(io, missing_extension)
                                            else
                                                {2737}let ECHClientHelloOuter(=ech_h_3,=ech_a_3,=id_conf,=zero,payload_2: bitstring) = ech_ext_9 in
                                                (
                                                    {2738}let v_527: msg = o_client_hello_1 in
                                                    {2739}let v_528: bool = (success?(1-proj-nego(2-proj-CH(v_527))) && success?(1-proj-CH(v_527))) in
                                                    {2740}let psk_ext_30: preSharedKeyExt = (if v_528 then 8-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2741}let extra_ext_7: extraExt = (if v_528 then 7-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2742}let ech_ext_10: echExt = (if v_528 then 6-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2743}let sni_ext_4: sniExt = (if v_528 then 5-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2744}let kex_ext_9: keyShareExt = (if v_528 then 4-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2745}let a_alg_10: aead_alg = (if v_528 then 3-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2746}let h_alg_13: hash_alg = (if v_528 then 2-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2747}let v_529: TLS_version = (if v_528 then 1-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2748}let r_2: bytes32 = (if v_528 then 1-proj-CH(v_527) else caught-fail) in
                                                    {2749}let v_530: echExt = (if v_528 then catch-fail(ech_ext_10) else caught-fail) in
                                                    {2750}let v_531: bool = (not-caught-fail(v_530) && success?(1-proj-ECHClientHelloOuter(v_530))) in
                                                    {2751}let payload_3: bitstring = (if v_531 then 5-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2752}let enc_2: element = (if v_531 then 4-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2753}let config_id_3: configId = (if v_531 then 3-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2754}let a_alg_ech_1: aead_alg = (if v_531 then 2-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2755}let h_alg_ech_1: hash_alg = (if v_531 then 1-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2756}let ech_ext'_1: echExt = (if v_531 then ECHClientHelloOuter(h_alg_ech_1,a_alg_ech_1,config_id_3,enc_2,zero) else caught-fail) in
                                                    {2757}let client_hello_AAD_1: msg = (if v_528 then (if v_531 then CH(r_2,nego(v_529,h_alg_13,a_alg_10,kex_ext_9,sni_ext_4,ech_ext'_1,extra_ext_7,psk_ext_30)) else fail-any) else fail-any) in
                                                    {2758}let n_1: nat = 2 in
                                                    {2759}let v_532: hpkeContext = context in
                                                    {2760}let v_533: bool = ((R =nf 1-proj-hpke_context(v_532)) && success?(1-proj-hpke_context(v_532))) in
                                                    {2761}let base_nonce_2: bitstring = (if v_533 then 3-proj-hpke_context(v_532) else caught-fail) in
                                                    {2762}let key_2: aead_key = (if v_533 then 2-proj-hpke_context(v_532) else caught-fail) in
                                                    {2763}let i_client_hello': msg = (if v_533 then aead_dec(ech_a_3,key_2,(base_nonce_2,n_1),client_hello_AAD_1,payload_2) else fail-any) in
                                                    (
                                                        {2764}let CH(i_cr: bytes32,nego(=TLS13,i_h_alg: hash_alg,i_a_alg: aead_alg,i_kex_ext: keyShareExt,SNI(=i_dom_1),=ECHClientHelloInner,i_extra_ext: extraExt,i_psk_ext: preSharedKeyExt)) = i_client_hello' in
                                                            {2765}out(ch_server_SH, (id_server_5,ArgsServerSH(backend_g,backend_h,backend_a,i_dom_1,req_cert_3,true,use_psk_1,false,ee_msg_14,i_client_hello',((zero,i_client_hello),hrr_msg))))
                                                        else
                                                            {2766}out(io, illegal_parameter)
                                                    )
                                                    else
                                                        {2767}out(io, decrypt_error)
                                                )
                                                else
                                                    {2768}out(io, illegal_parameter)
                                        )
                                        else
                                            {2769}out(io, unexpected_message)
                                    )
                                    else
                                        {2770}let client_kex_ext(DHE_kex(=backend_g,gx_12: element)) = kex_ext_8 in
                                            {2771}out(ch_server_SH, (id_server_5,ArgsServerSH(backend_g,backend_h,backend_a,i_dom_1,req_cert_3,true,use_psk_1,true,ee_msg_14,i_client_hello,zero)))
                                        else
                                            {2772}out(io, handshake_failure)
                                )
                                else
                                    {2773}out(io, handshake_failure)
                            )
                            else
                                {2774}out(io, illegal_parameter)
                        )
                        else
                            {2775}event ServerEchAcceptance(id_server_5,false);
                            {2776}let ee_msg_15: msg = EE(retry_ech_ext,extra_ext_2) in
                            {2777}let CH(cr_19: bytes32,nego(=TLS13,=tls_h_1,=tls_a_1,kex_ext_10: keyShareExt,SNI(=s_dom_14),ech_ext_11: echExt,extra_ext_8: extraExt,psk_ext_31: preSharedKeyExt)) = o_client_hello in
                            (
                                {2778}let (=true,client_kex_ext(DHE_group(=tls_g_1))) = (true,kex_ext_10) in
                                (
                                    {2779}let hrr_mode_3: params = nego(TLS13,tls_h_1,tls_a_1,hrr_kex_ext(tls_g_1),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext) in
                                    {2780}let hello_retry_request_1: msg = SH(B32(HRR24,HRR8),hrr_mode_3) in
                                    {2781}out(io, hello_retry_request_1);
                                    {2782}let cur_log_HRR_1: bitstring = ((zero,o_client_hello),hello_retry_request_1) in
                                    {2783}in(io, client_hello'_10: msg);
                                    {2784}let CH(cr'_12: bytes32,offer'_1: params) = client_hello'_10 in
                                        {2785}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_14,req_cert_3,false,use_psk_1,false,ee_msg_15,client_hello'_10,cur_log_HRR_1)))
                                    else
                                        {2786}out(io, unexpected_message)
                                )
                                else
                                    {2787}let client_kex_ext(DHE_kex(=tls_g_1,gx_13: element)) = kex_ext_10 in
                                        {2788}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_14,req_cert_3,false,use_psk_1,true,ee_msg_15,o_client_hello,zero)))
                                    else
                                        {2789}out(io, handshake_failure)
                            )
                            else
                                {2790}out(io, handshake_failure)
                    )
                    else
                        {2791}event ServerEchAcceptance(id_server_5,false);
                        {2792}let ee_msg_16: msg = EE(retry_ech_ext,extra_ext_2) in
                        {2793}let CH(cr_20: bytes32,nego(=TLS13,=tls_h_1,=tls_a_1,kex_ext_11: keyShareExt,SNI(=s_dom_14),ech_ext_12: echExt,extra_ext_9: extraExt,psk_ext_32: preSharedKeyExt)) = o_client_hello in
                        (
                            {2794}let (=true,client_kex_ext(DHE_group(=tls_g_1))) = (true,kex_ext_11) in
                            (
                                {2795}let hrr_mode_4: params = nego(TLS13,tls_h_1,tls_a_1,hrr_kex_ext(tls_g_1),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext) in
                                {2796}let hello_retry_request_2: msg = SH(B32(HRR24,HRR8),hrr_mode_4) in
                                {2797}out(io, hello_retry_request_2);
                                {2798}let cur_log_HRR_2: bitstring = ((zero,o_client_hello),hello_retry_request_2) in
                                {2799}in(io, client_hello'_11: msg);
                                {2800}let CH(cr'_13: bytes32,offer'_2: params) = client_hello'_11 in
                                    {2801}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_14,req_cert_3,false,use_psk_1,false,ee_msg_16,client_hello'_11,cur_log_HRR_2)))
                                else
                                    {2802}out(io, unexpected_message)
                            )
                            else
                                {2803}let client_kex_ext(DHE_kex(=tls_g_1,gx_14: element)) = kex_ext_11 in
                                    {2804}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_14,req_cert_3,false,use_psk_1,true,ee_msg_16,o_client_hello,zero)))
                                else
                                    {2805}out(io, handshake_failure)
                        )
                        else
                            {2806}out(io, handshake_failure)
                )
                else
                    {2807}out(io, illegal_parameter)
        )
        else
            {2809}out(io, handshake_failure)
    )
    else
        {2810}out(io, unexpected_message)
) | (
    {2811}!
    {2812}in(io, ClientA_1: domain);
    {2813}in(io, ClientB_1: domain);
    {2814}let c_dom_7: domain = choice[ClientA_1,ClientB_1] in
    {2815}in(io, s_dom_17: domain);
    {2816}event Same(s_dom_17);
    {2817}new s_51: seed;
    {2818}let id_client_4: idProc = idClientDiff(s_51) in
    {2819}let @8_tls_h: hash_alg = id_hash(StrongHash,1) in
    {2820}let @8_tls_a: aead_alg = id_aead(StrongAE,1) in
    {2821}let @8_tls_g: group = id_g(StrongDH,1) in
    {2822}in(io, @8_use_psk: bool);
    {2823}event Same(@8_use_psk);
    {2824}new @8_st[]: stamp;
    {2825}event PreciseInput(@8_st,@8_use_psk);
    {2826}let () = () in
    {2827}in(io, @8_send_kex: bool);
    {2828}event Same(@8_send_kex);
    {2829}new @8_st_1[]: stamp;
    {2830}event PreciseInput(@8_st_1,@8_send_kex);
    {2831}let () = () in
    {2832}let @8_comp_psk: bool = false in
    {2833}let send_kex_4: bool = (not(true) || @8_send_kex) in
    {2834}let cur_log_10: bitstring = zero in
    {2835}let old_psk_data_1: bitstring = zero in
    {2836}new rand24_5[]: bytes24;
    {2837}new rand8_5[]: bytes8;
    {2838}let cr_21: bytes32 = B32(rand24_5,rand8_5) in
    {2839}new s_52[]: seed;
    {2840}let gx_15: element = dh_pub(@8_tls_g,dh_k(s_52)) in
    {2841}let v_534: bitstring = (dh_k(s_52),gx_15) in
    {2842}let v_535: bool = success?(1-proj-2-tuple(v_534)) in
    {2843}let gx_16: element = (if v_535 then 2-proj-2-tuple(v_534) else caught-fail) in
    {2844}let x_177: bitstring = (if v_535 then 1-proj-2-tuple(v_534) else caught-fail) in
    {2845}let kex_4: kex_alg = (if v_535 then (if send_kex_4 then DHE_kex(@8_tls_g,gx_16) else DHE_group(@8_tls_g)) else caught-fail) in
    {2846}let (kex_ext_12: keyShareExt,kex_data_7: bitstring) = (if v_535 then (client_kex_ext(kex_4),(x_177,@8_tls_g)) else fail-any) in
    {2847}let ech_ext_13: echExt = empty_ech_ext in
    {2848}let extra_30: extraExt = empty_extra_ext in
    {2849}if @8_use_psk then
    (
        {2850}let (psk_65: preSharedKey,id_32: identityPsk,old_es_4: bitstring,is_safe_24: bool) = old_psk_data_1 in
        (
            {2851}let offer_22: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_17),ech_ext_13,extra_30,trunc_client_psk_ext(id_32)) in
            {2852}let cur_log'_10: bitstring = (cur_log_10,CH(cr_21,offer_22)) in
            {2853}let s_53: bitstring = zero in
            {2854}let k_46: bitstring = catch-fail(psk2b(psk_65)) in
            {2855}let v_536: bool = not-caught-fail(k_46) in
            {2856}let early_secret_41: bitstring = catch-fail((if v_536 then hmac(@8_tls_h,s_53,k_46) else fail-any)) in
            {2857}let v_537: bool = not-caught-fail(early_secret_41) in
            {2858}let l_159: label = (if v_537 then tls13_ext_res_binder else caught-fail) in
            {2859}let m_53: bitstring = (if v_537 then zero else caught-fail) in
            {2860}let h_157: bitstring = (if v_537 then catch-fail(hash(@8_tls_h,m_53)) else caught-fail) in
            {2861}let v_538: bool = not-caught-fail(h_157) in
            {2862}let x_178: bitstring = (if v_538 then (l_159,h_157) else caught-fail) in
            {2863}let binder_key_27: bitstring = (if v_537 then catch-fail((if v_538 then hmac(@8_tls_h,early_secret_41,x_178) else fail-any)) else caught-fail) in
            {2864}let v_539: bool = not-caught-fail(binder_key_27) in
            {2865}let v_540: bitstring = catch-fail((if v_537 then (if v_539 then (early_secret_41,binder_key_27) else fail-any) else fail-any)) in
            {2866}let v_541: bool = (not-caught-fail(v_540) && success?(1-proj-2-tuple(v_540))) in
            {2867}let kb_27: mac_key = (if v_541 then 2-proj-2-tuple(v_540) else caught-fail) in
            {2868}let es_41: bitstring = (if v_541 then 1-proj-2-tuple(v_540) else caught-fail) in
            {2869}let binders_9: bitstring = (if v_541 then catch-fail(hmac(@8_tls_h,kb_27,cur_log'_10)) else caught-fail) in
            {2870}let v_542: bool = not-caught-fail(binders_9) in
            {2871}let v_543: bitstring = catch-fail((if v_541 then (if v_542 then (client_psk_ext(id_32,binders_9),(psk_65,id_32,es_41,is_safe_24)) else fail-any) else fail-any)) in
            {2872}let v_544: bool = (not-caught-fail(v_543) && success?(1-proj-2-tuple(v_543))) in
            {2873}let psk_data_15: bitstring = (if v_544 then 2-proj-2-tuple(v_543) else caught-fail) in
            {2874}let psk_ext_33: preSharedKeyExt = (if v_544 then 1-proj-2-tuple(v_543) else caught-fail) in
            {2875}let offer_23: params = (if v_544 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_33) else caught-fail) in
            {2876}let (client_hello_7: msg,cr_22: bytes32,kex_data_8: bitstring,psk_data_16: bitstring) = (if v_544 then (CH(cr_21,offer_23),cr_21,kex_data_7,psk_data_15) else fail-any) in
            {2877}event ClientOffersAead(cr_22,@8_tls_a);
            {2878}event ClientOffersHash(cr_22,@8_tls_h);
            {2879}event ClientOffersGroup(cr_22,@8_tls_g);
            {2880}out(io, client_hello_7);
            {2881}let cur_log2_31: bitstring = (cur_log_10,client_hello_7) in
            {2882}let (psk_66: preSharedKey,id_33: identityPsk,es_42: bitstring,safe_psk_18: bool) = psk_data_16 in
            (
                {2883}if (false && (psk_66 ≠ NoPsk)) then
                {2884}let client_hello_8: bitstring = (zero,client_hello_7) in
                {2885}let l_160: label = tls13_client_early_traffic_secret in
                {2886}let h_158: bitstring = catch-fail(hash(@8_tls_h,client_hello_8)) in
                {2887}let v_545: bool = not-caught-fail(h_158) in
                {2888}let x_179: bitstring = (if v_545 then (l_160,h_158) else caught-fail) in
                {2889}let atsc0_4: bitstring = catch-fail((if v_545 then hmac(@8_tls_h,es_42,x_179) else fail-any)) in
                {2890}let v_546: bool = not-caught-fail(atsc0_4) in
                {2891}let l_161: label = (if v_546 then tls13_key else caught-fail) in
                {2892}let h_159: bitstring = (if v_546 then zero else caught-fail) in
                {2893}let x_180: bitstring = (if v_546 then (l_161,h_159) else caught-fail) in
                {2894}let kc0_4: bitstring = (if v_546 then catch-fail(hmac(@8_tls_h,atsc0_4,x_180)) else caught-fail) in
                {2895}let v_547: bool = not-caught-fail(kc0_4) in
                {2896}let l_162: label = (if v_547 then tls13_early_exporter_master_secret else caught-fail) in
                {2897}let h_160: bitstring = (if v_547 then catch-fail(hash(@8_tls_h,client_hello_8)) else caught-fail) in
                {2898}let v_548: bool = not-caught-fail(h_160) in
                {2899}let x_181: bitstring = (if v_548 then (l_162,h_160) else caught-fail) in
                {2900}let ems0_8: bitstring = (if v_547 then catch-fail((if v_548 then hmac(@8_tls_h,es_42,x_181) else fail-any)) else caught-fail) in
                {2901}let v_549: bool = not-caught-fail(ems0_8) in
                {2902}let (wkc0_4: aead_key,ems0_9: bitstring) = (if v_546 then (if v_547 then (if v_549 then (kc0_4,ems0_8) else fail-any) else fail-any) else fail-any) in
                {2903}!
                {2904}in(io, (i_4: nat,ad_4: bitstring));
                {2905}if is_nat(i_4) then
                {2906}new msg_ed_3[]: bitstring;
                {2907}let enc_ed_3: bitstring = aead_enc(@8_tls_a,wkc0_4,i_4,ad_4,msg_ed_3) in
                {2908}new st_13: stamp;
                {2909}event ClientSequenceClient0RTTDataWriteKey(id_client_4,st_13,i_4);
                {2910}event ClientSends0(id_client_4,cr_22,psk_66,i_4,ad_4,msg_ed_3);
                {2911}out(io, enc_ed_3)
            ) | (
                {2912}in(io, server_hello_4: msg);
                {2913}let SH(sr_23: bytes32,mode_15: params) = server_hello_4 in
                (
                    {2914}event ClientEchAcceptance(id_client_4,false);
                    {2915}if (true && (sr_23 = B32(HRR24,HRR8))) then
                    (
                        {2916}if ((mode_15 = nego(TLS13,@8_tls_h,@8_tls_a,hrr_kex_ext(@8_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex_4 ≠ true)) then
                        (
                            {2917}let cur_log3_5: bitstring = (cur_log2_31,server_hello_4) in
                            {2918}let send_kex_5: bool = true in
                            {2919}new rand24_6[]: bytes24;
                            {2920}new rand8_6[]: bytes8;
                            {2921}let cr_23: bytes32 = B32(rand24_6,rand8_6) in
                            {2922}new s_54[]: seed;
                            {2923}let gx_17: element = dh_pub(@8_tls_g,dh_k(s_54)) in
                            {2924}let v_550: bitstring = (dh_k(s_54),gx_17) in
                            {2925}let v_551: bool = success?(1-proj-2-tuple(v_550)) in
                            {2926}let gx_18: element = (if v_551 then 2-proj-2-tuple(v_550) else caught-fail) in
                            {2927}let x_182: bitstring = (if v_551 then 1-proj-2-tuple(v_550) else caught-fail) in
                            {2928}let kex_5: kex_alg = (if v_551 then (if send_kex_5 then DHE_kex(@8_tls_g,gx_18) else DHE_group(@8_tls_g)) else caught-fail) in
                            {2929}let (kex_ext_13: keyShareExt,kex_data_9: bitstring) = (if v_551 then (client_kex_ext(kex_5),(x_182,@8_tls_g)) else fail-any) in
                            {2930}let ech_ext_14: echExt = empty_ech_ext in
                            {2931}let extra_31: extraExt = empty_extra_ext in
                            {2932}if @8_use_psk then
                            (
                                {2933}let (psk_67: preSharedKey,id_34: identityPsk,old_es_5: bitstring,is_safe_25: bool) = psk_data_16 in
                                (
                                    {2934}let offer_24: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_17),ech_ext_14,extra_31,trunc_client_psk_ext(id_34)) in
                                    {2935}let cur_log'_11: bitstring = (cur_log3_5,CH(cr_23,offer_24)) in
                                    {2936}let s_55: bitstring = zero in
                                    {2937}let k_47: bitstring = catch-fail(psk2b(psk_67)) in
                                    {2938}let v_552: bool = not-caught-fail(k_47) in
                                    {2939}let early_secret_42: bitstring = catch-fail((if v_552 then hmac(@8_tls_h,s_55,k_47) else fail-any)) in
                                    {2940}let v_553: bool = not-caught-fail(early_secret_42) in
                                    {2941}let l_163: label = (if v_553 then tls13_ext_res_binder else caught-fail) in
                                    {2942}let m_54: bitstring = (if v_553 then zero else caught-fail) in
                                    {2943}let h_161: bitstring = (if v_553 then catch-fail(hash(@8_tls_h,m_54)) else caught-fail) in
                                    {2944}let v_554: bool = not-caught-fail(h_161) in
                                    {2945}let x_183: bitstring = (if v_554 then (l_163,h_161) else caught-fail) in
                                    {2946}let binder_key_28: bitstring = (if v_553 then catch-fail((if v_554 then hmac(@8_tls_h,early_secret_42,x_183) else fail-any)) else caught-fail) in
                                    {2947}let v_555: bool = not-caught-fail(binder_key_28) in
                                    {2948}let v_556: bitstring = catch-fail((if v_553 then (if v_555 then (early_secret_42,binder_key_28) else fail-any) else fail-any)) in
                                    {2949}let v_557: bool = (not-caught-fail(v_556) && success?(1-proj-2-tuple(v_556))) in
                                    {2950}let kb_28: mac_key = (if v_557 then 2-proj-2-tuple(v_556) else caught-fail) in
                                    {2951}let es_43: bitstring = (if v_557 then 1-proj-2-tuple(v_556) else caught-fail) in
                                    {2952}let binders_10: bitstring = (if v_557 then catch-fail(hmac(@8_tls_h,kb_28,cur_log'_11)) else caught-fail) in
                                    {2953}let v_558: bool = not-caught-fail(binders_10) in
                                    {2954}let v_559: bitstring = catch-fail((if v_557 then (if v_558 then (client_psk_ext(id_34,binders_10),(psk_67,id_34,es_43,is_safe_25)) else fail-any) else fail-any)) in
                                    {2955}let v_560: bool = (not-caught-fail(v_559) && success?(1-proj-2-tuple(v_559))) in
                                    {2956}let psk_data_17: bitstring = (if v_560 then 2-proj-2-tuple(v_559) else caught-fail) in
                                    {2957}let psk_ext_34: preSharedKeyExt = (if v_560 then 1-proj-2-tuple(v_559) else caught-fail) in
                                    {2958}let offer_25: params = (if v_560 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_34) else caught-fail) in
                                    {2959}let (client_hello'_12: msg,cr'_14: bytes32,kex_data'_9: bitstring,psk_data'_9: bitstring) = (if v_560 then (CH(cr_23,offer_25),cr_23,kex_data_9,psk_data_17) else fail-any) in
                                    {2960}event ClientOffersAead(cr'_14,@8_tls_a);
                                    {2961}event ClientOffersHash(cr'_14,@8_tls_h);
                                    {2962}event ClientOffersGroup(cr'_14,@8_tls_g);
                                    {2963}out(io, client_hello'_12);
                                    {2964}let cur_log4_9: bitstring = (cur_log3_5,client_hello'_12) in
                                    {2965}in(io, server_hello'_9: msg);
                                    {2966}let SH(sr'_9: bytes32,mode'_9: params) = server_hello'_9 in
                                    (
                                        {2967}if (sr'_9 = B32(HRR24,HRR8)) then
                                            {2968}out(io, unexpected_message)
                                        else
                                            {2969}let (x_184: bitstring,g_13: group) = kex_data'_9 in
                                            {2970}let (psk_offer_12: preSharedKey,id_offer_12: identityPsk,es_offer_12: bitstring,is_safe_offer_12: bool) = psk_data'_9 in
                                            {2971}event Client_PSKOffer(id_client_4,psk_offer_12,id_offer_12,is_safe_offer_12);
                                            {2972}event Client_Rand_client(id_client_4,cr'_14);
                                            {2973}event Client_DH_client(id_client_4,dh_pub(g_13,x_184));
                                            {2974}event Client_server_domain(id_client_4,s_dom_17);
                                            {2975}let SH(sr_24: bytes32,mode_16: params) = server_hello'_9 in
                                            {2976}event Client_Rand_server(id_client_4,sr_24);
                                            {2977}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_13,gy_13: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_35: preSharedKeyExt) = mode_16 in
                                            (
                                                {2978}let cur_log2_32: bitstring = (cur_log4_9,server_hello'_9) in
                                                {2979}event Client_DH_server(id_client_4,gy_13);
                                                {2980}let v_561: bool = (psk_ext_35 = empty_psk_ext) in
                                                {2981}let psk_68: preSharedKey = (if v_561 then NoPsk else caught-fail) in
                                                {2982}let s_56: bitstring = (if v_561 then zero else caught-fail) in
                                                {2983}let k_48: bitstring = (if v_561 then catch-fail(psk2b(psk_68)) else caught-fail) in
                                                {2984}let v_562: bool = not-caught-fail(k_48) in
                                                {2985}let early_secret_43: bitstring = (if v_561 then catch-fail((if v_562 then hmac(@8_tls_h,s_56,k_48) else fail-any)) else caught-fail) in
                                                {2986}let v_563: bool = not-caught-fail(early_secret_43) in
                                                {2987}let l_164: label = (if v_563 then tls13_ext_res_binder else caught-fail) in
                                                {2988}let m_55: bitstring = (if v_563 then zero else caught-fail) in
                                                {2989}let h_162: bitstring = (if v_563 then catch-fail(hash(@8_tls_h,m_55)) else caught-fail) in
                                                {2990}let v_564: bool = not-caught-fail(h_162) in
                                                {2991}let x_185: bitstring = (if v_564 then (l_164,h_162) else caught-fail) in
                                                {2992}let binder_key_29: bitstring = (if v_563 then catch-fail((if v_564 then hmac(@8_tls_h,early_secret_43,x_185) else fail-any)) else caught-fail) in
                                                {2993}let v_565: bool = not-caught-fail(binder_key_29) in
                                                {2994}let v_566: bitstring = (if v_561 then catch-fail((if v_563 then (if v_565 then (early_secret_43,binder_key_29) else fail-any) else fail-any)) else caught-fail) in
                                                {2995}let v_567: bool = (not-caught-fail(v_566) && success?(1-proj-2-tuple(v_566))) in
                                                {2996}let kb_29: mac_key = (if v_567 then 2-proj-2-tuple(v_566) else caught-fail) in
                                                {2997}let es_44: bitstring = (if v_567 then 1-proj-2-tuple(v_566) else caught-fail) in
                                                {2998}let v_568: bitstring = (if not(v_561) then catch-fail(psk_data'_9) else caught-fail) in
                                                {2999}let v_569: bool = (not-caught-fail(v_568) && success?(1-proj-4-tuple(v_568))) in
                                                {3000}let is_safe_26: bool = (if v_569 then 4-proj-4-tuple(v_568) else caught-fail) in
                                                {3001}let es_45: bitstring = (if v_569 then 3-proj-4-tuple(v_568) else caught-fail) in
                                                {3002}let id_35: identityPsk = (if v_569 then 2-proj-4-tuple(v_568) else caught-fail) in
                                                {3003}let psk_69: preSharedKey = (if v_569 then 1-proj-4-tuple(v_568) else caught-fail) in
                                                {3004}let (psk_70: preSharedKey,early_secret_44: bitstring,valid_12: bool,safe_psk_19: bool) = (if v_561 then (if v_567 then (NoPsk,es_44,true,false) else fail-any) else (if v_569 then (psk_69,es_45,((psk_69 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_35)),is_safe_26) else fail-any)) in
                                                {3005}event Client_PSKChoosen(id_client_4,psk_70,safe_psk_19);
                                                {3006}if valid_12 then
                                                (
                                                    {3007}let gxy_26: element = catch-fail(dh_decap_fun(g_13,gy_13,x_184)) in
                                                    {3008}let v_570: bool = not-caught-fail(gxy_26) in
                                                    {3009}new s_57[]: seed;
                                                    {3010}let gxy_27: element = (if v_570 then gxy_26 else dh_f(s_57)) in
                                                    {3011}event Client_DH_gxy(id_client_4,gxy_27);
                                                    {3012}let l_165: label = tls13_derived in
                                                    {3013}let m_56: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3014}let v_571: bool = not-caught-fail(m_56) in
                                                    {3015}let h_163: bitstring = (if v_571 then catch-fail(hash(@8_tls_h,m_56)) else caught-fail) in
                                                    {3016}let v_572: bool = not-caught-fail(h_163) in
                                                    {3017}let x_186: bitstring = (if v_572 then (l_165,h_163) else caught-fail) in
                                                    {3018}let extra_32: bitstring = catch-fail((if v_571 then (if v_572 then hmac(@8_tls_h,early_secret_44,x_186) else fail-any) else fail-any)) in
                                                    {3019}let v_573: bool = not-caught-fail(extra_32) in
                                                    {3020}let handshake_secret_13: bitstring = (if v_573 then hmac(@8_tls_h,extra_32,gxy_27) else fail-any) in
                                                    {3021}let l_166: label = tls13_derived in
                                                    {3022}let m_57: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3023}let v_574: bool = not-caught-fail(m_57) in
                                                    {3024}let h_164: bitstring = (if v_574 then catch-fail(hash(@8_tls_h,m_57)) else caught-fail) in
                                                    {3025}let v_575: bool = not-caught-fail(h_164) in
                                                    {3026}let x_187: bitstring = (if v_575 then (l_166,h_164) else caught-fail) in
                                                    {3027}let extra_33: bitstring = catch-fail((if v_574 then (if v_575 then hmac(@8_tls_h,handshake_secret_13,x_187) else fail-any) else fail-any)) in
                                                    {3028}let v_576: bool = not-caught-fail(extra_33) in
                                                    {3029}let k_49: bitstring = (if v_576 then zero else caught-fail) in
                                                    {3030}let master_secret_33: bitstring = (if v_576 then catch-fail(hmac(@8_tls_h,handshake_secret_13,k_49)) else caught-fail) in
                                                    {3031}let v_577: bool = not-caught-fail(master_secret_33) in
                                                    {3032}let l_167: label = (if v_577 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3033}let h_165: bitstring = (if v_577 then catch-fail(hash(@8_tls_h,cur_log2_32)) else caught-fail) in
                                                    {3034}let v_578: bool = not-caught-fail(h_165) in
                                                    {3035}let x_188: bitstring = (if v_578 then (l_167,h_165) else caught-fail) in
                                                    {3036}let client_hts_13: bitstring = (if v_577 then catch-fail((if v_578 then hmac(@8_tls_h,handshake_secret_13,x_188) else fail-any)) else caught-fail) in
                                                    {3037}let v_579: bool = not-caught-fail(client_hts_13) in
                                                    {3038}let l_168: label = (if v_579 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3039}let h_166: bitstring = (if v_579 then catch-fail(hash(@8_tls_h,cur_log2_32)) else caught-fail) in
                                                    {3040}let v_580: bool = not-caught-fail(h_166) in
                                                    {3041}let x_189: bitstring = (if v_580 then (l_168,h_166) else caught-fail) in
                                                    {3042}let server_hts_13: bitstring = (if v_579 then catch-fail((if v_580 then hmac(@8_tls_h,handshake_secret_13,x_189) else fail-any)) else caught-fail) in
                                                    {3043}let v_581: bool = not-caught-fail(server_hts_13) in
                                                    {3044}let l_169: label = (if v_581 then tls13_key else caught-fail) in
                                                    {3045}let h_167: bitstring = (if v_581 then zero else caught-fail) in
                                                    {3046}let x_190: bitstring = (if v_581 then (l_169,h_167) else caught-fail) in
                                                    {3047}let client_wkh_13: bitstring = (if v_581 then catch-fail(hmac(@8_tls_h,client_hts_13,x_190)) else caught-fail) in
                                                    {3048}let v_582: bool = not-caught-fail(client_wkh_13) in
                                                    {3049}let l_170: label = (if v_582 then tls13_key else caught-fail) in
                                                    {3050}let h_168: bitstring = (if v_582 then zero else caught-fail) in
                                                    {3051}let x_191: bitstring = (if v_582 then (l_170,h_168) else caught-fail) in
                                                    {3052}let server_wkh_13: bitstring = (if v_582 then catch-fail(hmac(@8_tls_h,server_hts_13,x_191)) else caught-fail) in
                                                    {3053}let v_583: bool = not-caught-fail(server_wkh_13) in
                                                    {3054}let l_171: label = (if v_583 then tls13_finished else caught-fail) in
                                                    {3055}let h_169: bitstring = (if v_583 then zero else caught-fail) in
                                                    {3056}let x_192: bitstring = (if v_583 then (l_171,h_169) else caught-fail) in
                                                    {3057}let client_fk_13: bitstring = (if v_583 then catch-fail(hmac(@8_tls_h,client_hts_13,x_192)) else caught-fail) in
                                                    {3058}let v_584: bool = not-caught-fail(client_fk_13) in
                                                    {3059}let l_172: label = (if v_584 then tls13_finished else caught-fail) in
                                                    {3060}let h_170: bitstring = (if v_584 then zero else caught-fail) in
                                                    {3061}let x_193: bitstring = (if v_584 then (l_172,h_170) else caught-fail) in
                                                    {3062}let server_fk_13: bitstring = (if v_584 then catch-fail(hmac(@8_tls_h,server_hts_13,x_193)) else caught-fail) in
                                                    {3063}let v_585: bool = not-caught-fail(server_fk_13) in
                                                    {3064}let (master_secret_34: bitstring,chk_20: aead_key,shk_19: aead_key,cfin_20: mac_key,sfin_19: mac_key) = (if v_576 then (if v_577 then (if v_579 then (if v_581 then (if v_582 then (if v_583 then (if v_584 then (if v_585 then (master_secret_33,client_wkh_13,server_wkh_13,client_fk_13,server_fk_13) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3065}event Client_chk(id_client_4,chk_20);
                                                    {3066}event Client_shk(id_client_4,shk_19);
                                                    {3067}event Client_cfin(id_client_4,cfin_20);
                                                    {3068}event Client_sfin(id_client_4,sfin_19);
                                                    {3069}in(io, enc_ee_msg_12: bitstring);
                                                    {3070}let ee_msg_17: msg = aead_dec(@8_tls_a,shk_19,0,zero,enc_ee_msg_12) in
                                                    {3071}let EE(ech_ee_12: echExt,extra_ee_12: extraExt) = ee_msg_17 in
                                                    {3072}let cur_log2_33: bitstring = (cur_log2_32,ee_msg_17) in
                                                    {3073}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_14,sr_24,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_70,safe_psk_19,@8_comp_psk,master_secret_34,chk_20,0,shk_19,1,cfin_20,sfin_19,cur_log2_33)))
                                                )
                                                else
                                                    {3074}out(io, illegal_parameter)
                                            )
                                            else
                                                {3075}out(io, illegal_parameter)
                                    )
                                    else
                                        {3076}out(io, unexpected_message)
                                )
                                else
                                    {3229}get pre_shared_keys(c_dom'_6: domain,=s_dom_17,=@8_tls_h,id_36: identityPsk,psk_71: preSharedKey,idP_9: idProc,is_safe_27: bool) in
                                    {3077}event Selected_one_time_used_psk(id_client_4,psk_71,is_safe_27);
                                    {3078}event Selected_psk(c_dom_7,c_dom'_6,idP_9,is_safe_27);
                                    {3079}event Selected_psk_no_missmatch(id_client_4,s_dom_17,@8_tls_h,psk_71,id_36);
                                    {3080}event Selected_psk_with_ID(c_dom_7,c_dom'_6,id_36,idP_9,is_safe_27);
                                    {3081}let v_586: bitstring = (id_36,psk_71,is_safe_27) in
                                    {3082}let v_587: bool = success?(1-proj-3-tuple(v_586)) in
                                    {3083}let is_safe_28: bool = (if v_587 then 3-proj-3-tuple(v_586) else caught-fail) in
                                    {3084}let psk_72: preSharedKey = (if v_587 then 2-proj-3-tuple(v_586) else caught-fail) in
                                    {3085}let id_37: identityPsk = (if v_587 then 1-proj-3-tuple(v_586) else caught-fail) in
                                    {3086}let offer_26: params = (if v_587 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_17),ech_ext_14,extra_31,trunc_client_psk_ext(id_37)) else caught-fail) in
                                    {3087}let cur_log'_12: bitstring = (if v_587 then (cur_log3_5,CH(cr_23,offer_26)) else caught-fail) in
                                    {3088}let s_58: bitstring = (if v_587 then zero else caught-fail) in
                                    {3089}let k_50: bitstring = (if v_587 then catch-fail(psk2b(psk_72)) else caught-fail) in
                                    {3090}let v_588: bool = not-caught-fail(k_50) in
                                    {3091}let early_secret_45: bitstring = (if v_587 then catch-fail((if v_588 then hmac(@8_tls_h,s_58,k_50) else fail-any)) else caught-fail) in
                                    {3092}let v_589: bool = not-caught-fail(early_secret_45) in
                                    {3093}let l_173: label = (if v_589 then tls13_ext_res_binder else caught-fail) in
                                    {3094}let m_58: bitstring = (if v_589 then zero else caught-fail) in
                                    {3095}let h_171: bitstring = (if v_589 then catch-fail(hash(@8_tls_h,m_58)) else caught-fail) in
                                    {3096}let v_590: bool = not-caught-fail(h_171) in
                                    {3097}let x_194: bitstring = (if v_590 then (l_173,h_171) else caught-fail) in
                                    {3098}let binder_key_30: bitstring = (if v_589 then catch-fail((if v_590 then hmac(@8_tls_h,early_secret_45,x_194) else fail-any)) else caught-fail) in
                                    {3099}let v_591: bool = not-caught-fail(binder_key_30) in
                                    {3100}let v_592: bitstring = (if v_587 then catch-fail((if v_589 then (if v_591 then (early_secret_45,binder_key_30) else fail-any) else fail-any)) else caught-fail) in
                                    {3101}let v_593: bool = (not-caught-fail(v_592) && success?(1-proj-2-tuple(v_592))) in
                                    {3102}let kb_30: mac_key = (if v_593 then 2-proj-2-tuple(v_592) else caught-fail) in
                                    {3103}let es_46: bitstring = (if v_593 then 1-proj-2-tuple(v_592) else caught-fail) in
                                    {3104}let binders_11: bitstring = (if v_593 then catch-fail(hmac(@8_tls_h,kb_30,cur_log'_12)) else caught-fail) in
                                    {3105}let v_594: bool = not-caught-fail(binders_11) in
                                    {3106}let v_595: bitstring = catch-fail((if v_587 then (if v_593 then (if v_594 then (client_psk_ext(id_37,binders_11),(psk_72,id_37,es_46,is_safe_28)) else fail-any) else fail-any) else fail-any)) in
                                    {3107}let v_596: bool = (not-caught-fail(v_595) && success?(1-proj-2-tuple(v_595))) in
                                    {3108}let psk_data_18: bitstring = (if v_596 then 2-proj-2-tuple(v_595) else caught-fail) in
                                    {3109}let psk_ext_36: preSharedKeyExt = (if v_596 then 1-proj-2-tuple(v_595) else caught-fail) in
                                    {3110}let offer_27: params = (if v_596 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_36) else caught-fail) in
                                    {3111}let (client_hello'_13: msg,cr'_15: bytes32,kex_data'_10: bitstring,psk_data'_10: bitstring) = (if v_596 then (CH(cr_23,offer_27),cr_23,kex_data_9,psk_data_18) else fail-any) in
                                    {3112}event ClientOffersAead(cr'_15,@8_tls_a);
                                    {3113}event ClientOffersHash(cr'_15,@8_tls_h);
                                    {3114}event ClientOffersGroup(cr'_15,@8_tls_g);
                                    {3115}out(io, client_hello'_13);
                                    {3116}let cur_log4_10: bitstring = (cur_log3_5,client_hello'_13) in
                                    {3117}in(io, server_hello'_10: msg);
                                    {3118}let SH(sr'_10: bytes32,mode'_10: params) = server_hello'_10 in
                                    (
                                        {3119}if (sr'_10 = B32(HRR24,HRR8)) then
                                            {3120}out(io, unexpected_message)
                                        else
                                            {3121}let (x_195: bitstring,g_14: group) = kex_data'_10 in
                                            {3122}let (psk_offer_13: preSharedKey,id_offer_13: identityPsk,es_offer_13: bitstring,is_safe_offer_13: bool) = psk_data'_10 in
                                            {3123}event Client_PSKOffer(id_client_4,psk_offer_13,id_offer_13,is_safe_offer_13);
                                            {3124}event Client_Rand_client(id_client_4,cr'_15);
                                            {3125}event Client_DH_client(id_client_4,dh_pub(g_14,x_195));
                                            {3126}event Client_server_domain(id_client_4,s_dom_17);
                                            {3127}let SH(sr_25: bytes32,mode_17: params) = server_hello'_10 in
                                            {3128}event Client_Rand_server(id_client_4,sr_25);
                                            {3129}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_14,gy_14: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_37: preSharedKeyExt) = mode_17 in
                                            (
                                                {3130}let cur_log2_34: bitstring = (cur_log4_10,server_hello'_10) in
                                                {3131}event Client_DH_server(id_client_4,gy_14);
                                                {3132}let v_597: bool = (psk_ext_37 = empty_psk_ext) in
                                                {3133}let psk_73: preSharedKey = (if v_597 then NoPsk else caught-fail) in
                                                {3134}let s_59: bitstring = (if v_597 then zero else caught-fail) in
                                                {3135}let k_51: bitstring = (if v_597 then catch-fail(psk2b(psk_73)) else caught-fail) in
                                                {3136}let v_598: bool = not-caught-fail(k_51) in
                                                {3137}let early_secret_46: bitstring = (if v_597 then catch-fail((if v_598 then hmac(@8_tls_h,s_59,k_51) else fail-any)) else caught-fail) in
                                                {3138}let v_599: bool = not-caught-fail(early_secret_46) in
                                                {3139}let l_174: label = (if v_599 then tls13_ext_res_binder else caught-fail) in
                                                {3140}let m_59: bitstring = (if v_599 then zero else caught-fail) in
                                                {3141}let h_172: bitstring = (if v_599 then catch-fail(hash(@8_tls_h,m_59)) else caught-fail) in
                                                {3142}let v_600: bool = not-caught-fail(h_172) in
                                                {3143}let x_196: bitstring = (if v_600 then (l_174,h_172) else caught-fail) in
                                                {3144}let binder_key_31: bitstring = (if v_599 then catch-fail((if v_600 then hmac(@8_tls_h,early_secret_46,x_196) else fail-any)) else caught-fail) in
                                                {3145}let v_601: bool = not-caught-fail(binder_key_31) in
                                                {3146}let v_602: bitstring = (if v_597 then catch-fail((if v_599 then (if v_601 then (early_secret_46,binder_key_31) else fail-any) else fail-any)) else caught-fail) in
                                                {3147}let v_603: bool = (not-caught-fail(v_602) && success?(1-proj-2-tuple(v_602))) in
                                                {3148}let kb_31: mac_key = (if v_603 then 2-proj-2-tuple(v_602) else caught-fail) in
                                                {3149}let es_47: bitstring = (if v_603 then 1-proj-2-tuple(v_602) else caught-fail) in
                                                {3150}let v_604: bitstring = (if not(v_597) then catch-fail(psk_data'_10) else caught-fail) in
                                                {3151}let v_605: bool = (not-caught-fail(v_604) && success?(1-proj-4-tuple(v_604))) in
                                                {3152}let is_safe_29: bool = (if v_605 then 4-proj-4-tuple(v_604) else caught-fail) in
                                                {3153}let es_48: bitstring = (if v_605 then 3-proj-4-tuple(v_604) else caught-fail) in
                                                {3154}let id_38: identityPsk = (if v_605 then 2-proj-4-tuple(v_604) else caught-fail) in
                                                {3155}let psk_74: preSharedKey = (if v_605 then 1-proj-4-tuple(v_604) else caught-fail) in
                                                {3156}let (psk_75: preSharedKey,early_secret_47: bitstring,valid_13: bool,safe_psk_20: bool) = (if v_597 then (if v_603 then (NoPsk,es_47,true,false) else fail-any) else (if v_605 then (psk_74,es_48,((psk_74 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_37)),is_safe_29) else fail-any)) in
                                                {3157}event Client_PSKChoosen(id_client_4,psk_75,safe_psk_20);
                                                {3158}if valid_13 then
                                                (
                                                    {3159}let gxy_28: element = catch-fail(dh_decap_fun(g_14,gy_14,x_195)) in
                                                    {3160}let v_606: bool = not-caught-fail(gxy_28) in
                                                    {3161}new s_60[]: seed;
                                                    {3162}let gxy_29: element = (if v_606 then gxy_28 else dh_f(s_60)) in
                                                    {3163}event Client_DH_gxy(id_client_4,gxy_29);
                                                    {3164}let l_175: label = tls13_derived in
                                                    {3165}let m_60: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3166}let v_607: bool = not-caught-fail(m_60) in
                                                    {3167}let h_173: bitstring = (if v_607 then catch-fail(hash(@8_tls_h,m_60)) else caught-fail) in
                                                    {3168}let v_608: bool = not-caught-fail(h_173) in
                                                    {3169}let x_197: bitstring = (if v_608 then (l_175,h_173) else caught-fail) in
                                                    {3170}let extra_34: bitstring = catch-fail((if v_607 then (if v_608 then hmac(@8_tls_h,early_secret_47,x_197) else fail-any) else fail-any)) in
                                                    {3171}let v_609: bool = not-caught-fail(extra_34) in
                                                    {3172}let handshake_secret_14: bitstring = (if v_609 then hmac(@8_tls_h,extra_34,gxy_29) else fail-any) in
                                                    {3173}let l_176: label = tls13_derived in
                                                    {3174}let m_61: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3175}let v_610: bool = not-caught-fail(m_61) in
                                                    {3176}let h_174: bitstring = (if v_610 then catch-fail(hash(@8_tls_h,m_61)) else caught-fail) in
                                                    {3177}let v_611: bool = not-caught-fail(h_174) in
                                                    {3178}let x_198: bitstring = (if v_611 then (l_176,h_174) else caught-fail) in
                                                    {3179}let extra_35: bitstring = catch-fail((if v_610 then (if v_611 then hmac(@8_tls_h,handshake_secret_14,x_198) else fail-any) else fail-any)) in
                                                    {3180}let v_612: bool = not-caught-fail(extra_35) in
                                                    {3181}let k_52: bitstring = (if v_612 then zero else caught-fail) in
                                                    {3182}let master_secret_35: bitstring = (if v_612 then catch-fail(hmac(@8_tls_h,handshake_secret_14,k_52)) else caught-fail) in
                                                    {3183}let v_613: bool = not-caught-fail(master_secret_35) in
                                                    {3184}let l_177: label = (if v_613 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3185}let h_175: bitstring = (if v_613 then catch-fail(hash(@8_tls_h,cur_log2_34)) else caught-fail) in
                                                    {3186}let v_614: bool = not-caught-fail(h_175) in
                                                    {3187}let x_199: bitstring = (if v_614 then (l_177,h_175) else caught-fail) in
                                                    {3188}let client_hts_14: bitstring = (if v_613 then catch-fail((if v_614 then hmac(@8_tls_h,handshake_secret_14,x_199) else fail-any)) else caught-fail) in
                                                    {3189}let v_615: bool = not-caught-fail(client_hts_14) in
                                                    {3190}let l_178: label = (if v_615 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3191}let h_176: bitstring = (if v_615 then catch-fail(hash(@8_tls_h,cur_log2_34)) else caught-fail) in
                                                    {3192}let v_616: bool = not-caught-fail(h_176) in
                                                    {3193}let x_200: bitstring = (if v_616 then (l_178,h_176) else caught-fail) in
                                                    {3194}let server_hts_14: bitstring = (if v_615 then catch-fail((if v_616 then hmac(@8_tls_h,handshake_secret_14,x_200) else fail-any)) else caught-fail) in
                                                    {3195}let v_617: bool = not-caught-fail(server_hts_14) in
                                                    {3196}let l_179: label = (if v_617 then tls13_key else caught-fail) in
                                                    {3197}let h_177: bitstring = (if v_617 then zero else caught-fail) in
                                                    {3198}let x_201: bitstring = (if v_617 then (l_179,h_177) else caught-fail) in
                                                    {3199}let client_wkh_14: bitstring = (if v_617 then catch-fail(hmac(@8_tls_h,client_hts_14,x_201)) else caught-fail) in
                                                    {3200}let v_618: bool = not-caught-fail(client_wkh_14) in
                                                    {3201}let l_180: label = (if v_618 then tls13_key else caught-fail) in
                                                    {3202}let h_178: bitstring = (if v_618 then zero else caught-fail) in
                                                    {3203}let x_202: bitstring = (if v_618 then (l_180,h_178) else caught-fail) in
                                                    {3204}let server_wkh_14: bitstring = (if v_618 then catch-fail(hmac(@8_tls_h,server_hts_14,x_202)) else caught-fail) in
                                                    {3205}let v_619: bool = not-caught-fail(server_wkh_14) in
                                                    {3206}let l_181: label = (if v_619 then tls13_finished else caught-fail) in
                                                    {3207}let h_179: bitstring = (if v_619 then zero else caught-fail) in
                                                    {3208}let x_203: bitstring = (if v_619 then (l_181,h_179) else caught-fail) in
                                                    {3209}let client_fk_14: bitstring = (if v_619 then catch-fail(hmac(@8_tls_h,client_hts_14,x_203)) else caught-fail) in
                                                    {3210}let v_620: bool = not-caught-fail(client_fk_14) in
                                                    {3211}let l_182: label = (if v_620 then tls13_finished else caught-fail) in
                                                    {3212}let h_180: bitstring = (if v_620 then zero else caught-fail) in
                                                    {3213}let x_204: bitstring = (if v_620 then (l_182,h_180) else caught-fail) in
                                                    {3214}let server_fk_14: bitstring = (if v_620 then catch-fail(hmac(@8_tls_h,server_hts_14,x_204)) else caught-fail) in
                                                    {3215}let v_621: bool = not-caught-fail(server_fk_14) in
                                                    {3216}let (master_secret_36: bitstring,chk_21: aead_key,shk_20: aead_key,cfin_21: mac_key,sfin_20: mac_key) = (if v_612 then (if v_613 then (if v_615 then (if v_617 then (if v_618 then (if v_619 then (if v_620 then (if v_621 then (master_secret_35,client_wkh_14,server_wkh_14,client_fk_14,server_fk_14) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3217}event Client_chk(id_client_4,chk_21);
                                                    {3218}event Client_shk(id_client_4,shk_20);
                                                    {3219}event Client_cfin(id_client_4,cfin_21);
                                                    {3220}event Client_sfin(id_client_4,sfin_20);
                                                    {3221}in(io, enc_ee_msg_13: bitstring);
                                                    {3222}let ee_msg_18: msg = aead_dec(@8_tls_a,shk_20,0,zero,enc_ee_msg_13) in
                                                    {3223}let EE(ech_ee_13: echExt,extra_ee_13: extraExt) = ee_msg_18 in
                                                    {3224}let cur_log2_35: bitstring = (cur_log2_34,ee_msg_18) in
                                                    {3225}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_15,sr_25,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_75,safe_psk_20,@8_comp_psk,master_secret_36,chk_21,0,shk_20,1,cfin_21,sfin_20,cur_log2_35)))
                                                )
                                                else
                                                    {3226}out(io, illegal_parameter)
                                            )
                                            else
                                                {3227}out(io, illegal_parameter)
                                    )
                                    else
                                        {3228}out(io, unexpected_message)
                            )
                            else
                                {3230}let psk_76: preSharedKey = NoPsk in
                                {3231}let s_61: bitstring = zero in
                                {3232}let k_53: bitstring = catch-fail(psk2b(psk_76)) in
                                {3233}let v_622: bool = not-caught-fail(k_53) in
                                {3234}let early_secret_48: bitstring = catch-fail((if v_622 then hmac(@8_tls_h,s_61,k_53) else fail-any)) in
                                {3235}let v_623: bool = not-caught-fail(early_secret_48) in
                                {3236}let l_183: label = (if v_623 then tls13_ext_res_binder else caught-fail) in
                                {3237}let m_62: bitstring = (if v_623 then zero else caught-fail) in
                                {3238}let h_181: bitstring = (if v_623 then catch-fail(hash(@8_tls_h,m_62)) else caught-fail) in
                                {3239}let v_624: bool = not-caught-fail(h_181) in
                                {3240}let x_205: bitstring = (if v_624 then (l_183,h_181) else caught-fail) in
                                {3241}let binder_key_32: bitstring = (if v_623 then catch-fail((if v_624 then hmac(@8_tls_h,early_secret_48,x_205) else fail-any)) else caught-fail) in
                                {3242}let v_625: bool = not-caught-fail(binder_key_32) in
                                {3243}let v_626: bitstring = catch-fail((if v_623 then (if v_625 then (early_secret_48,binder_key_32) else fail-any) else fail-any)) in
                                {3244}let v_627: bool = (not-caught-fail(v_626) && success?(1-proj-2-tuple(v_626))) in
                                {3245}let kb_32: mac_key = (if v_627 then 2-proj-2-tuple(v_626) else caught-fail) in
                                {3246}let es_49: bitstring = (if v_627 then 1-proj-2-tuple(v_626) else caught-fail) in
                                {3247}let v_628: bitstring = catch-fail((if v_627 then (empty_psk_ext,(NoPsk,zero,es_49,false)) else fail-any)) in
                                {3248}let v_629: bool = (not-caught-fail(v_628) && success?(1-proj-2-tuple(v_628))) in
                                {3249}let psk_data_19: bitstring = (if v_629 then 2-proj-2-tuple(v_628) else caught-fail) in
                                {3250}let psk_ext_38: preSharedKeyExt = (if v_629 then 1-proj-2-tuple(v_628) else caught-fail) in
                                {3251}let offer_28: params = (if v_629 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_38) else caught-fail) in
                                {3252}let (client_hello'_14: msg,cr'_16: bytes32,kex_data'_11: bitstring,psk_data'_11: bitstring) = (if v_629 then (CH(cr_23,offer_28),cr_23,kex_data_9,psk_data_19) else fail-any) in
                                {3253}event ClientOffersAead(cr'_16,@8_tls_a);
                                {3254}event ClientOffersHash(cr'_16,@8_tls_h);
                                {3255}event ClientOffersGroup(cr'_16,@8_tls_g);
                                {3256}out(io, client_hello'_14);
                                {3257}let cur_log4_11: bitstring = (cur_log3_5,client_hello'_14) in
                                {3258}in(io, server_hello'_11: msg);
                                {3259}let SH(sr'_11: bytes32,mode'_11: params) = server_hello'_11 in
                                (
                                    {3260}if (sr'_11 = B32(HRR24,HRR8)) then
                                        {3261}out(io, unexpected_message)
                                    else
                                        {3262}let (x_206: bitstring,g_15: group) = kex_data'_11 in
                                        {3263}let (psk_offer_14: preSharedKey,id_offer_14: identityPsk,es_offer_14: bitstring,is_safe_offer_14: bool) = psk_data'_11 in
                                        {3264}event Client_PSKOffer(id_client_4,psk_offer_14,id_offer_14,is_safe_offer_14);
                                        {3265}event Client_Rand_client(id_client_4,cr'_16);
                                        {3266}event Client_DH_client(id_client_4,dh_pub(g_15,x_206));
                                        {3267}event Client_server_domain(id_client_4,s_dom_17);
                                        {3268}let SH(sr_26: bytes32,mode_18: params) = server_hello'_11 in
                                        {3269}event Client_Rand_server(id_client_4,sr_26);
                                        {3270}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_15,gy_15: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_39: preSharedKeyExt) = mode_18 in
                                        (
                                            {3271}let cur_log2_36: bitstring = (cur_log4_11,server_hello'_11) in
                                            {3272}event Client_DH_server(id_client_4,gy_15);
                                            {3273}let v_630: bool = (psk_ext_39 = empty_psk_ext) in
                                            {3274}let psk_77: preSharedKey = (if v_630 then NoPsk else caught-fail) in
                                            {3275}let s_62: bitstring = (if v_630 then zero else caught-fail) in
                                            {3276}let k_54: bitstring = (if v_630 then catch-fail(psk2b(psk_77)) else caught-fail) in
                                            {3277}let v_631: bool = not-caught-fail(k_54) in
                                            {3278}let early_secret_49: bitstring = (if v_630 then catch-fail((if v_631 then hmac(@8_tls_h,s_62,k_54) else fail-any)) else caught-fail) in
                                            {3279}let v_632: bool = not-caught-fail(early_secret_49) in
                                            {3280}let l_184: label = (if v_632 then tls13_ext_res_binder else caught-fail) in
                                            {3281}let m_63: bitstring = (if v_632 then zero else caught-fail) in
                                            {3282}let h_182: bitstring = (if v_632 then catch-fail(hash(@8_tls_h,m_63)) else caught-fail) in
                                            {3283}let v_633: bool = not-caught-fail(h_182) in
                                            {3284}let x_207: bitstring = (if v_633 then (l_184,h_182) else caught-fail) in
                                            {3285}let binder_key_33: bitstring = (if v_632 then catch-fail((if v_633 then hmac(@8_tls_h,early_secret_49,x_207) else fail-any)) else caught-fail) in
                                            {3286}let v_634: bool = not-caught-fail(binder_key_33) in
                                            {3287}let v_635: bitstring = (if v_630 then catch-fail((if v_632 then (if v_634 then (early_secret_49,binder_key_33) else fail-any) else fail-any)) else caught-fail) in
                                            {3288}let v_636: bool = (not-caught-fail(v_635) && success?(1-proj-2-tuple(v_635))) in
                                            {3289}let kb_33: mac_key = (if v_636 then 2-proj-2-tuple(v_635) else caught-fail) in
                                            {3290}let es_50: bitstring = (if v_636 then 1-proj-2-tuple(v_635) else caught-fail) in
                                            {3291}let v_637: bitstring = (if not(v_630) then catch-fail(psk_data'_11) else caught-fail) in
                                            {3292}let v_638: bool = (not-caught-fail(v_637) && success?(1-proj-4-tuple(v_637))) in
                                            {3293}let is_safe_30: bool = (if v_638 then 4-proj-4-tuple(v_637) else caught-fail) in
                                            {3294}let es_51: bitstring = (if v_638 then 3-proj-4-tuple(v_637) else caught-fail) in
                                            {3295}let id_39: identityPsk = (if v_638 then 2-proj-4-tuple(v_637) else caught-fail) in
                                            {3296}let psk_78: preSharedKey = (if v_638 then 1-proj-4-tuple(v_637) else caught-fail) in
                                            {3297}let (psk_79: preSharedKey,early_secret_50: bitstring,valid_14: bool,safe_psk_21: bool) = (if v_630 then (if v_636 then (NoPsk,es_50,true,false) else fail-any) else (if v_638 then (psk_78,es_51,((psk_78 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_39)),is_safe_30) else fail-any)) in
                                            {3298}event Client_PSKChoosen(id_client_4,psk_79,safe_psk_21);
                                            {3299}if valid_14 then
                                            (
                                                {3300}let gxy_30: element = catch-fail(dh_decap_fun(g_15,gy_15,x_206)) in
                                                {3301}let v_639: bool = not-caught-fail(gxy_30) in
                                                {3302}new s_63[]: seed;
                                                {3303}let gxy_31: element = (if v_639 then gxy_30 else dh_f(s_63)) in
                                                {3304}event Client_DH_gxy(id_client_4,gxy_31);
                                                {3305}let l_185: label = tls13_derived in
                                                {3306}let m_64: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3307}let v_640: bool = not-caught-fail(m_64) in
                                                {3308}let h_183: bitstring = (if v_640 then catch-fail(hash(@8_tls_h,m_64)) else caught-fail) in
                                                {3309}let v_641: bool = not-caught-fail(h_183) in
                                                {3310}let x_208: bitstring = (if v_641 then (l_185,h_183) else caught-fail) in
                                                {3311}let extra_36: bitstring = catch-fail((if v_640 then (if v_641 then hmac(@8_tls_h,early_secret_50,x_208) else fail-any) else fail-any)) in
                                                {3312}let v_642: bool = not-caught-fail(extra_36) in
                                                {3313}let handshake_secret_15: bitstring = (if v_642 then hmac(@8_tls_h,extra_36,gxy_31) else fail-any) in
                                                {3314}let l_186: label = tls13_derived in
                                                {3315}let m_65: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3316}let v_643: bool = not-caught-fail(m_65) in
                                                {3317}let h_184: bitstring = (if v_643 then catch-fail(hash(@8_tls_h,m_65)) else caught-fail) in
                                                {3318}let v_644: bool = not-caught-fail(h_184) in
                                                {3319}let x_209: bitstring = (if v_644 then (l_186,h_184) else caught-fail) in
                                                {3320}let extra_37: bitstring = catch-fail((if v_643 then (if v_644 then hmac(@8_tls_h,handshake_secret_15,x_209) else fail-any) else fail-any)) in
                                                {3321}let v_645: bool = not-caught-fail(extra_37) in
                                                {3322}let k_55: bitstring = (if v_645 then zero else caught-fail) in
                                                {3323}let master_secret_37: bitstring = (if v_645 then catch-fail(hmac(@8_tls_h,handshake_secret_15,k_55)) else caught-fail) in
                                                {3324}let v_646: bool = not-caught-fail(master_secret_37) in
                                                {3325}let l_187: label = (if v_646 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {3326}let h_185: bitstring = (if v_646 then catch-fail(hash(@8_tls_h,cur_log2_36)) else caught-fail) in
                                                {3327}let v_647: bool = not-caught-fail(h_185) in
                                                {3328}let x_210: bitstring = (if v_647 then (l_187,h_185) else caught-fail) in
                                                {3329}let client_hts_15: bitstring = (if v_646 then catch-fail((if v_647 then hmac(@8_tls_h,handshake_secret_15,x_210) else fail-any)) else caught-fail) in
                                                {3330}let v_648: bool = not-caught-fail(client_hts_15) in
                                                {3331}let l_188: label = (if v_648 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {3332}let h_186: bitstring = (if v_648 then catch-fail(hash(@8_tls_h,cur_log2_36)) else caught-fail) in
                                                {3333}let v_649: bool = not-caught-fail(h_186) in
                                                {3334}let x_211: bitstring = (if v_649 then (l_188,h_186) else caught-fail) in
                                                {3335}let server_hts_15: bitstring = (if v_648 then catch-fail((if v_649 then hmac(@8_tls_h,handshake_secret_15,x_211) else fail-any)) else caught-fail) in
                                                {3336}let v_650: bool = not-caught-fail(server_hts_15) in
                                                {3337}let l_189: label = (if v_650 then tls13_key else caught-fail) in
                                                {3338}let h_187: bitstring = (if v_650 then zero else caught-fail) in
                                                {3339}let x_212: bitstring = (if v_650 then (l_189,h_187) else caught-fail) in
                                                {3340}let client_wkh_15: bitstring = (if v_650 then catch-fail(hmac(@8_tls_h,client_hts_15,x_212)) else caught-fail) in
                                                {3341}let v_651: bool = not-caught-fail(client_wkh_15) in
                                                {3342}let l_190: label = (if v_651 then tls13_key else caught-fail) in
                                                {3343}let h_188: bitstring = (if v_651 then zero else caught-fail) in
                                                {3344}let x_213: bitstring = (if v_651 then (l_190,h_188) else caught-fail) in
                                                {3345}let server_wkh_15: bitstring = (if v_651 then catch-fail(hmac(@8_tls_h,server_hts_15,x_213)) else caught-fail) in
                                                {3346}let v_652: bool = not-caught-fail(server_wkh_15) in
                                                {3347}let l_191: label = (if v_652 then tls13_finished else caught-fail) in
                                                {3348}let h_189: bitstring = (if v_652 then zero else caught-fail) in
                                                {3349}let x_214: bitstring = (if v_652 then (l_191,h_189) else caught-fail) in
                                                {3350}let client_fk_15: bitstring = (if v_652 then catch-fail(hmac(@8_tls_h,client_hts_15,x_214)) else caught-fail) in
                                                {3351}let v_653: bool = not-caught-fail(client_fk_15) in
                                                {3352}let l_192: label = (if v_653 then tls13_finished else caught-fail) in
                                                {3353}let h_190: bitstring = (if v_653 then zero else caught-fail) in
                                                {3354}let x_215: bitstring = (if v_653 then (l_192,h_190) else caught-fail) in
                                                {3355}let server_fk_15: bitstring = (if v_653 then catch-fail(hmac(@8_tls_h,server_hts_15,x_215)) else caught-fail) in
                                                {3356}let v_654: bool = not-caught-fail(server_fk_15) in
                                                {3357}let (master_secret_38: bitstring,chk_22: aead_key,shk_21: aead_key,cfin_22: mac_key,sfin_21: mac_key) = (if v_645 then (if v_646 then (if v_648 then (if v_650 then (if v_651 then (if v_652 then (if v_653 then (if v_654 then (master_secret_37,client_wkh_15,server_wkh_15,client_fk_15,server_fk_15) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {3358}event Client_chk(id_client_4,chk_22);
                                                {3359}event Client_shk(id_client_4,shk_21);
                                                {3360}event Client_cfin(id_client_4,cfin_22);
                                                {3361}event Client_sfin(id_client_4,sfin_21);
                                                {3362}in(io, enc_ee_msg_14: bitstring);
                                                {3363}let ee_msg_19: msg = aead_dec(@8_tls_a,shk_21,0,zero,enc_ee_msg_14) in
                                                {3364}let EE(ech_ee_14: echExt,extra_ee_14: extraExt) = ee_msg_19 in
                                                {3365}let cur_log2_37: bitstring = (cur_log2_36,ee_msg_19) in
                                                {3366}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_16,sr_26,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_79,safe_psk_21,@8_comp_psk,master_secret_38,chk_22,0,shk_21,1,cfin_22,sfin_21,cur_log2_37)))
                                            )
                                            else
                                                {3367}out(io, illegal_parameter)
                                        )
                                        else
                                            {3368}out(io, illegal_parameter)
                                )
                                else
                                    {3369}out(io, unexpected_message)
                        )
                        else
                            {3370}out(io, illegal_parameter)
                    )
                    else
                        {3371}if send_kex_4 then
                        (
                            {3372}let (x_216: bitstring,g_16: group) = kex_data_8 in
                            {3373}let (psk_offer_15: preSharedKey,id_offer_15: identityPsk,es_offer_15: bitstring,is_safe_offer_15: bool) = psk_data_16 in
                            {3374}event Client_PSKOffer(id_client_4,psk_offer_15,id_offer_15,is_safe_offer_15);
                            {3375}event Client_Rand_client(id_client_4,cr_22);
                            {3376}event Client_DH_client(id_client_4,dh_pub(g_16,x_216));
                            {3377}event Client_server_domain(id_client_4,s_dom_17);
                            {3378}let SH(sr_27: bytes32,mode_19: params) = server_hello_4 in
                            {3379}event Client_Rand_server(id_client_4,sr_27);
                            {3380}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_16,gy_16: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_40: preSharedKeyExt) = mode_19 in
                            (
                                {3381}let cur_log2_38: bitstring = (cur_log2_31,server_hello_4) in
                                {3382}event Client_DH_server(id_client_4,gy_16);
                                {3383}let v_655: bool = (psk_ext_40 = empty_psk_ext) in
                                {3384}let psk_80: preSharedKey = (if v_655 then NoPsk else caught-fail) in
                                {3385}let s_64: bitstring = (if v_655 then zero else caught-fail) in
                                {3386}let k_56: bitstring = (if v_655 then catch-fail(psk2b(psk_80)) else caught-fail) in
                                {3387}let v_656: bool = not-caught-fail(k_56) in
                                {3388}let early_secret_51: bitstring = (if v_655 then catch-fail((if v_656 then hmac(@8_tls_h,s_64,k_56) else fail-any)) else caught-fail) in
                                {3389}let v_657: bool = not-caught-fail(early_secret_51) in
                                {3390}let l_193: label = (if v_657 then tls13_ext_res_binder else caught-fail) in
                                {3391}let m_66: bitstring = (if v_657 then zero else caught-fail) in
                                {3392}let h_191: bitstring = (if v_657 then catch-fail(hash(@8_tls_h,m_66)) else caught-fail) in
                                {3393}let v_658: bool = not-caught-fail(h_191) in
                                {3394}let x_217: bitstring = (if v_658 then (l_193,h_191) else caught-fail) in
                                {3395}let binder_key_34: bitstring = (if v_657 then catch-fail((if v_658 then hmac(@8_tls_h,early_secret_51,x_217) else fail-any)) else caught-fail) in
                                {3396}let v_659: bool = not-caught-fail(binder_key_34) in
                                {3397}let v_660: bitstring = (if v_655 then catch-fail((if v_657 then (if v_659 then (early_secret_51,binder_key_34) else fail-any) else fail-any)) else caught-fail) in
                                {3398}let v_661: bool = (not-caught-fail(v_660) && success?(1-proj-2-tuple(v_660))) in
                                {3399}let kb_34: mac_key = (if v_661 then 2-proj-2-tuple(v_660) else caught-fail) in
                                {3400}let es_52: bitstring = (if v_661 then 1-proj-2-tuple(v_660) else caught-fail) in
                                {3401}let v_662: bitstring = (if not(v_655) then catch-fail(psk_data_16) else caught-fail) in
                                {3402}let v_663: bool = (not-caught-fail(v_662) && success?(1-proj-4-tuple(v_662))) in
                                {3403}let is_safe_31: bool = (if v_663 then 4-proj-4-tuple(v_662) else caught-fail) in
                                {3404}let es_53: bitstring = (if v_663 then 3-proj-4-tuple(v_662) else caught-fail) in
                                {3405}let id_40: identityPsk = (if v_663 then 2-proj-4-tuple(v_662) else caught-fail) in
                                {3406}let psk_81: preSharedKey = (if v_663 then 1-proj-4-tuple(v_662) else caught-fail) in
                                {3407}let (psk_82: preSharedKey,early_secret_52: bitstring,valid_15: bool,safe_psk_22: bool) = (if v_655 then (if v_661 then (NoPsk,es_52,true,false) else fail-any) else (if v_663 then (psk_81,es_53,((psk_81 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_40)),is_safe_31) else fail-any)) in
                                {3408}event Client_PSKChoosen(id_client_4,psk_82,safe_psk_22);
                                {3409}if valid_15 then
                                (
                                    {3410}let gxy_32: element = catch-fail(dh_decap_fun(g_16,gy_16,x_216)) in
                                    {3411}let v_664: bool = not-caught-fail(gxy_32) in
                                    {3412}new s_65[]: seed;
                                    {3413}let gxy_33: element = (if v_664 then gxy_32 else dh_f(s_65)) in
                                    {3414}event Client_DH_gxy(id_client_4,gxy_33);
                                    {3415}let l_194: label = tls13_derived in
                                    {3416}let m_67: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {3417}let v_665: bool = not-caught-fail(m_67) in
                                    {3418}let h_192: bitstring = (if v_665 then catch-fail(hash(@8_tls_h,m_67)) else caught-fail) in
                                    {3419}let v_666: bool = not-caught-fail(h_192) in
                                    {3420}let x_218: bitstring = (if v_666 then (l_194,h_192) else caught-fail) in
                                    {3421}let extra_38: bitstring = catch-fail((if v_665 then (if v_666 then hmac(@8_tls_h,early_secret_52,x_218) else fail-any) else fail-any)) in
                                    {3422}let v_667: bool = not-caught-fail(extra_38) in
                                    {3423}let handshake_secret_16: bitstring = (if v_667 then hmac(@8_tls_h,extra_38,gxy_33) else fail-any) in
                                    {3424}let l_195: label = tls13_derived in
                                    {3425}let m_68: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {3426}let v_668: bool = not-caught-fail(m_68) in
                                    {3427}let h_193: bitstring = (if v_668 then catch-fail(hash(@8_tls_h,m_68)) else caught-fail) in
                                    {3428}let v_669: bool = not-caught-fail(h_193) in
                                    {3429}let x_219: bitstring = (if v_669 then (l_195,h_193) else caught-fail) in
                                    {3430}let extra_39: bitstring = catch-fail((if v_668 then (if v_669 then hmac(@8_tls_h,handshake_secret_16,x_219) else fail-any) else fail-any)) in
                                    {3431}let v_670: bool = not-caught-fail(extra_39) in
                                    {3432}let k_57: bitstring = (if v_670 then zero else caught-fail) in
                                    {3433}let master_secret_39: bitstring = (if v_670 then catch-fail(hmac(@8_tls_h,handshake_secret_16,k_57)) else caught-fail) in
                                    {3434}let v_671: bool = not-caught-fail(master_secret_39) in
                                    {3435}let l_196: label = (if v_671 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {3436}let h_194: bitstring = (if v_671 then catch-fail(hash(@8_tls_h,cur_log2_38)) else caught-fail) in
                                    {3437}let v_672: bool = not-caught-fail(h_194) in
                                    {3438}let x_220: bitstring = (if v_672 then (l_196,h_194) else caught-fail) in
                                    {3439}let client_hts_16: bitstring = (if v_671 then catch-fail((if v_672 then hmac(@8_tls_h,handshake_secret_16,x_220) else fail-any)) else caught-fail) in
                                    {3440}let v_673: bool = not-caught-fail(client_hts_16) in
                                    {3441}let l_197: label = (if v_673 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {3442}let h_195: bitstring = (if v_673 then catch-fail(hash(@8_tls_h,cur_log2_38)) else caught-fail) in
                                    {3443}let v_674: bool = not-caught-fail(h_195) in
                                    {3444}let x_221: bitstring = (if v_674 then (l_197,h_195) else caught-fail) in
                                    {3445}let server_hts_16: bitstring = (if v_673 then catch-fail((if v_674 then hmac(@8_tls_h,handshake_secret_16,x_221) else fail-any)) else caught-fail) in
                                    {3446}let v_675: bool = not-caught-fail(server_hts_16) in
                                    {3447}let l_198: label = (if v_675 then tls13_key else caught-fail) in
                                    {3448}let h_196: bitstring = (if v_675 then zero else caught-fail) in
                                    {3449}let x_222: bitstring = (if v_675 then (l_198,h_196) else caught-fail) in
                                    {3450}let client_wkh_16: bitstring = (if v_675 then catch-fail(hmac(@8_tls_h,client_hts_16,x_222)) else caught-fail) in
                                    {3451}let v_676: bool = not-caught-fail(client_wkh_16) in
                                    {3452}let l_199: label = (if v_676 then tls13_key else caught-fail) in
                                    {3453}let h_197: bitstring = (if v_676 then zero else caught-fail) in
                                    {3454}let x_223: bitstring = (if v_676 then (l_199,h_197) else caught-fail) in
                                    {3455}let server_wkh_16: bitstring = (if v_676 then catch-fail(hmac(@8_tls_h,server_hts_16,x_223)) else caught-fail) in
                                    {3456}let v_677: bool = not-caught-fail(server_wkh_16) in
                                    {3457}let l_200: label = (if v_677 then tls13_finished else caught-fail) in
                                    {3458}let h_198: bitstring = (if v_677 then zero else caught-fail) in
                                    {3459}let x_224: bitstring = (if v_677 then (l_200,h_198) else caught-fail) in
                                    {3460}let client_fk_16: bitstring = (if v_677 then catch-fail(hmac(@8_tls_h,client_hts_16,x_224)) else caught-fail) in
                                    {3461}let v_678: bool = not-caught-fail(client_fk_16) in
                                    {3462}let l_201: label = (if v_678 then tls13_finished else caught-fail) in
                                    {3463}let h_199: bitstring = (if v_678 then zero else caught-fail) in
                                    {3464}let x_225: bitstring = (if v_678 then (l_201,h_199) else caught-fail) in
                                    {3465}let server_fk_16: bitstring = (if v_678 then catch-fail(hmac(@8_tls_h,server_hts_16,x_225)) else caught-fail) in
                                    {3466}let v_679: bool = not-caught-fail(server_fk_16) in
                                    {3467}let (master_secret_40: bitstring,chk_23: aead_key,shk_22: aead_key,cfin_23: mac_key,sfin_22: mac_key) = (if v_670 then (if v_671 then (if v_673 then (if v_675 then (if v_676 then (if v_677 then (if v_678 then (if v_679 then (master_secret_39,client_wkh_16,server_wkh_16,client_fk_16,server_fk_16) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {3468}event Client_chk(id_client_4,chk_23);
                                    {3469}event Client_shk(id_client_4,shk_22);
                                    {3470}event Client_cfin(id_client_4,cfin_23);
                                    {3471}event Client_sfin(id_client_4,sfin_22);
                                    {3472}in(io, enc_ee_msg_15: bitstring);
                                    {3473}let ee_msg_20: msg = aead_dec(@8_tls_a,shk_22,0,zero,enc_ee_msg_15) in
                                    {3474}let EE(ech_ee_15: echExt,extra_ee_15: extraExt) = ee_msg_20 in
                                    {3475}let cur_log2_39: bitstring = (cur_log2_38,ee_msg_20) in
                                    {3476}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr_22,sr_27,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_82,safe_psk_22,@8_comp_psk,master_secret_40,chk_23,0,shk_22,1,cfin_23,sfin_22,cur_log2_39)))
                                )
                                else
                                    {3477}out(io, illegal_parameter)
                            )
                            else
                                {3478}out(io, illegal_parameter)
                        )
                        else
                            {3479}out(io, illegal_parameter)
                )
                else
                    {3480}out(io, unexpected_message)
            )
        )
        else
            {4120}get pre_shared_keys(c_dom'_7: domain,=s_dom_17,=@8_tls_h,id_41: identityPsk,psk_83: preSharedKey,idP_10: idProc,is_safe_32: bool) in
            {3481}event Selected_one_time_used_psk(id_client_4,psk_83,is_safe_32);
            {3482}event Selected_psk(c_dom_7,c_dom'_7,idP_10,is_safe_32);
            {3483}event Selected_psk_no_missmatch(id_client_4,s_dom_17,@8_tls_h,psk_83,id_41);
            {3484}event Selected_psk_with_ID(c_dom_7,c_dom'_7,id_41,idP_10,is_safe_32);
            {3485}let v_680: bitstring = (id_41,psk_83,is_safe_32) in
            {3486}let v_681: bool = success?(1-proj-3-tuple(v_680)) in
            {3487}let is_safe_33: bool = (if v_681 then 3-proj-3-tuple(v_680) else caught-fail) in
            {3488}let psk_84: preSharedKey = (if v_681 then 2-proj-3-tuple(v_680) else caught-fail) in
            {3489}let id_42: identityPsk = (if v_681 then 1-proj-3-tuple(v_680) else caught-fail) in
            {3490}let offer_29: params = (if v_681 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_17),ech_ext_13,extra_30,trunc_client_psk_ext(id_42)) else caught-fail) in
            {3491}let cur_log'_13: bitstring = (if v_681 then (cur_log_10,CH(cr_21,offer_29)) else caught-fail) in
            {3492}let s_66: bitstring = (if v_681 then zero else caught-fail) in
            {3493}let k_58: bitstring = (if v_681 then catch-fail(psk2b(psk_84)) else caught-fail) in
            {3494}let v_682: bool = not-caught-fail(k_58) in
            {3495}let early_secret_53: bitstring = (if v_681 then catch-fail((if v_682 then hmac(@8_tls_h,s_66,k_58) else fail-any)) else caught-fail) in
            {3496}let v_683: bool = not-caught-fail(early_secret_53) in
            {3497}let l_202: label = (if v_683 then tls13_ext_res_binder else caught-fail) in
            {3498}let m_69: bitstring = (if v_683 then zero else caught-fail) in
            {3499}let h_200: bitstring = (if v_683 then catch-fail(hash(@8_tls_h,m_69)) else caught-fail) in
            {3500}let v_684: bool = not-caught-fail(h_200) in
            {3501}let x_226: bitstring = (if v_684 then (l_202,h_200) else caught-fail) in
            {3502}let binder_key_35: bitstring = (if v_683 then catch-fail((if v_684 then hmac(@8_tls_h,early_secret_53,x_226) else fail-any)) else caught-fail) in
            {3503}let v_685: bool = not-caught-fail(binder_key_35) in
            {3504}let v_686: bitstring = (if v_681 then catch-fail((if v_683 then (if v_685 then (early_secret_53,binder_key_35) else fail-any) else fail-any)) else caught-fail) in
            {3505}let v_687: bool = (not-caught-fail(v_686) && success?(1-proj-2-tuple(v_686))) in
            {3506}let kb_35: mac_key = (if v_687 then 2-proj-2-tuple(v_686) else caught-fail) in
            {3507}let es_54: bitstring = (if v_687 then 1-proj-2-tuple(v_686) else caught-fail) in
            {3508}let binders_12: bitstring = (if v_687 then catch-fail(hmac(@8_tls_h,kb_35,cur_log'_13)) else caught-fail) in
            {3509}let v_688: bool = not-caught-fail(binders_12) in
            {3510}let v_689: bitstring = catch-fail((if v_681 then (if v_687 then (if v_688 then (client_psk_ext(id_42,binders_12),(psk_84,id_42,es_54,is_safe_33)) else fail-any) else fail-any) else fail-any)) in
            {3511}let v_690: bool = (not-caught-fail(v_689) && success?(1-proj-2-tuple(v_689))) in
            {3512}let psk_data_20: bitstring = (if v_690 then 2-proj-2-tuple(v_689) else caught-fail) in
            {3513}let psk_ext_41: preSharedKeyExt = (if v_690 then 1-proj-2-tuple(v_689) else caught-fail) in
            {3514}let offer_30: params = (if v_690 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_41) else caught-fail) in
            {3515}let (client_hello_9: msg,cr_24: bytes32,kex_data_10: bitstring,psk_data_21: bitstring) = (if v_690 then (CH(cr_21,offer_30),cr_21,kex_data_7,psk_data_20) else fail-any) in
            {3516}event ClientOffersAead(cr_24,@8_tls_a);
            {3517}event ClientOffersHash(cr_24,@8_tls_h);
            {3518}event ClientOffersGroup(cr_24,@8_tls_g);
            {3519}out(io, client_hello_9);
            {3520}let cur_log2_40: bitstring = (cur_log_10,client_hello_9) in
            {3521}let (psk_85: preSharedKey,id_43: identityPsk,es_55: bitstring,safe_psk_23: bool) = psk_data_21 in
            (
                {3522}if (false && (psk_85 ≠ NoPsk)) then
                {3523}let client_hello_10: bitstring = (zero,client_hello_9) in
                {3524}let l_203: label = tls13_client_early_traffic_secret in
                {3525}let h_201: bitstring = catch-fail(hash(@8_tls_h,client_hello_10)) in
                {3526}let v_691: bool = not-caught-fail(h_201) in
                {3527}let x_227: bitstring = (if v_691 then (l_203,h_201) else caught-fail) in
                {3528}let atsc0_5: bitstring = catch-fail((if v_691 then hmac(@8_tls_h,es_55,x_227) else fail-any)) in
                {3529}let v_692: bool = not-caught-fail(atsc0_5) in
                {3530}let l_204: label = (if v_692 then tls13_key else caught-fail) in
                {3531}let h_202: bitstring = (if v_692 then zero else caught-fail) in
                {3532}let x_228: bitstring = (if v_692 then (l_204,h_202) else caught-fail) in
                {3533}let kc0_5: bitstring = (if v_692 then catch-fail(hmac(@8_tls_h,atsc0_5,x_228)) else caught-fail) in
                {3534}let v_693: bool = not-caught-fail(kc0_5) in
                {3535}let l_205: label = (if v_693 then tls13_early_exporter_master_secret else caught-fail) in
                {3536}let h_203: bitstring = (if v_693 then catch-fail(hash(@8_tls_h,client_hello_10)) else caught-fail) in
                {3537}let v_694: bool = not-caught-fail(h_203) in
                {3538}let x_229: bitstring = (if v_694 then (l_205,h_203) else caught-fail) in
                {3539}let ems0_10: bitstring = (if v_693 then catch-fail((if v_694 then hmac(@8_tls_h,es_55,x_229) else fail-any)) else caught-fail) in
                {3540}let v_695: bool = not-caught-fail(ems0_10) in
                {3541}let (wkc0_5: aead_key,ems0_11: bitstring) = (if v_692 then (if v_693 then (if v_695 then (kc0_5,ems0_10) else fail-any) else fail-any) else fail-any) in
                {3542}!
                {3543}in(io, (i_5: nat,ad_5: bitstring));
                {3544}if is_nat(i_5) then
                {3545}new msg_ed_4[]: bitstring;
                {3546}let enc_ed_4: bitstring = aead_enc(@8_tls_a,wkc0_5,i_5,ad_5,msg_ed_4) in
                {3547}new st_14: stamp;
                {3548}event ClientSequenceClient0RTTDataWriteKey(id_client_4,st_14,i_5);
                {3549}event ClientSends0(id_client_4,cr_24,psk_85,i_5,ad_5,msg_ed_4);
                {3550}out(io, enc_ed_4)
            ) | (
                {3551}in(io, server_hello_5: msg);
                {3552}let SH(sr_28: bytes32,mode_20: params) = server_hello_5 in
                (
                    {3553}event ClientEchAcceptance(id_client_4,false);
                    {3554}if (true && (sr_28 = B32(HRR24,HRR8))) then
                    (
                        {3555}if ((mode_20 = nego(TLS13,@8_tls_h,@8_tls_a,hrr_kex_ext(@8_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex_4 ≠ true)) then
                        (
                            {3556}let cur_log3_6: bitstring = (cur_log2_40,server_hello_5) in
                            {3557}let send_kex_6: bool = true in
                            {3558}new rand24_7[]: bytes24;
                            {3559}new rand8_7[]: bytes8;
                            {3560}let cr_25: bytes32 = B32(rand24_7,rand8_7) in
                            {3561}new s_67[]: seed;
                            {3562}let gx_19: element = dh_pub(@8_tls_g,dh_k(s_67)) in
                            {3563}let v_696: bitstring = (dh_k(s_67),gx_19) in
                            {3564}let v_697: bool = success?(1-proj-2-tuple(v_696)) in
                            {3565}let gx_20: element = (if v_697 then 2-proj-2-tuple(v_696) else caught-fail) in
                            {3566}let x_230: bitstring = (if v_697 then 1-proj-2-tuple(v_696) else caught-fail) in
                            {3567}let kex_6: kex_alg = (if v_697 then (if send_kex_6 then DHE_kex(@8_tls_g,gx_20) else DHE_group(@8_tls_g)) else caught-fail) in
                            {3568}let (kex_ext_14: keyShareExt,kex_data_11: bitstring) = (if v_697 then (client_kex_ext(kex_6),(x_230,@8_tls_g)) else fail-any) in
                            {3569}let ech_ext_15: echExt = empty_ech_ext in
                            {3570}let extra_40: extraExt = empty_extra_ext in
                            {3571}if @8_use_psk then
                            (
                                {3572}let (psk_86: preSharedKey,id_44: identityPsk,old_es_6: bitstring,is_safe_34: bool) = psk_data_21 in
                                (
                                    {3573}let offer_31: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_17),ech_ext_15,extra_40,trunc_client_psk_ext(id_44)) in
                                    {3574}let cur_log'_14: bitstring = (cur_log3_6,CH(cr_25,offer_31)) in
                                    {3575}let s_68: bitstring = zero in
                                    {3576}let k_59: bitstring = catch-fail(psk2b(psk_86)) in
                                    {3577}let v_698: bool = not-caught-fail(k_59) in
                                    {3578}let early_secret_54: bitstring = catch-fail((if v_698 then hmac(@8_tls_h,s_68,k_59) else fail-any)) in
                                    {3579}let v_699: bool = not-caught-fail(early_secret_54) in
                                    {3580}let l_206: label = (if v_699 then tls13_ext_res_binder else caught-fail) in
                                    {3581}let m_70: bitstring = (if v_699 then zero else caught-fail) in
                                    {3582}let h_204: bitstring = (if v_699 then catch-fail(hash(@8_tls_h,m_70)) else caught-fail) in
                                    {3583}let v_700: bool = not-caught-fail(h_204) in
                                    {3584}let x_231: bitstring = (if v_700 then (l_206,h_204) else caught-fail) in
                                    {3585}let binder_key_36: bitstring = (if v_699 then catch-fail((if v_700 then hmac(@8_tls_h,early_secret_54,x_231) else fail-any)) else caught-fail) in
                                    {3586}let v_701: bool = not-caught-fail(binder_key_36) in
                                    {3587}let v_702: bitstring = catch-fail((if v_699 then (if v_701 then (early_secret_54,binder_key_36) else fail-any) else fail-any)) in
                                    {3588}let v_703: bool = (not-caught-fail(v_702) && success?(1-proj-2-tuple(v_702))) in
                                    {3589}let kb_36: mac_key = (if v_703 then 2-proj-2-tuple(v_702) else caught-fail) in
                                    {3590}let es_56: bitstring = (if v_703 then 1-proj-2-tuple(v_702) else caught-fail) in
                                    {3591}let binders_13: bitstring = (if v_703 then catch-fail(hmac(@8_tls_h,kb_36,cur_log'_14)) else caught-fail) in
                                    {3592}let v_704: bool = not-caught-fail(binders_13) in
                                    {3593}let v_705: bitstring = catch-fail((if v_703 then (if v_704 then (client_psk_ext(id_44,binders_13),(psk_86,id_44,es_56,is_safe_34)) else fail-any) else fail-any)) in
                                    {3594}let v_706: bool = (not-caught-fail(v_705) && success?(1-proj-2-tuple(v_705))) in
                                    {3595}let psk_data_22: bitstring = (if v_706 then 2-proj-2-tuple(v_705) else caught-fail) in
                                    {3596}let psk_ext_42: preSharedKeyExt = (if v_706 then 1-proj-2-tuple(v_705) else caught-fail) in
                                    {3597}let offer_32: params = (if v_706 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_42) else caught-fail) in
                                    {3598}let (client_hello'_15: msg,cr'_17: bytes32,kex_data'_12: bitstring,psk_data'_12: bitstring) = (if v_706 then (CH(cr_25,offer_32),cr_25,kex_data_11,psk_data_22) else fail-any) in
                                    {3599}event ClientOffersAead(cr'_17,@8_tls_a);
                                    {3600}event ClientOffersHash(cr'_17,@8_tls_h);
                                    {3601}event ClientOffersGroup(cr'_17,@8_tls_g);
                                    {3602}out(io, client_hello'_15);
                                    {3603}let cur_log4_12: bitstring = (cur_log3_6,client_hello'_15) in
                                    {3604}in(io, server_hello'_12: msg);
                                    {3605}let SH(sr'_12: bytes32,mode'_12: params) = server_hello'_12 in
                                    (
                                        {3606}if (sr'_12 = B32(HRR24,HRR8)) then
                                            {3607}out(io, unexpected_message)
                                        else
                                            {3608}let (x_232: bitstring,g_17: group) = kex_data'_12 in
                                            {3609}let (psk_offer_16: preSharedKey,id_offer_16: identityPsk,es_offer_16: bitstring,is_safe_offer_16: bool) = psk_data'_12 in
                                            {3610}event Client_PSKOffer(id_client_4,psk_offer_16,id_offer_16,is_safe_offer_16);
                                            {3611}event Client_Rand_client(id_client_4,cr'_17);
                                            {3612}event Client_DH_client(id_client_4,dh_pub(g_17,x_232));
                                            {3613}event Client_server_domain(id_client_4,s_dom_17);
                                            {3614}let SH(sr_29: bytes32,mode_21: params) = server_hello'_12 in
                                            {3615}event Client_Rand_server(id_client_4,sr_29);
                                            {3616}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_17,gy_17: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_43: preSharedKeyExt) = mode_21 in
                                            (
                                                {3617}let cur_log2_41: bitstring = (cur_log4_12,server_hello'_12) in
                                                {3618}event Client_DH_server(id_client_4,gy_17);
                                                {3619}let v_707: bool = (psk_ext_43 = empty_psk_ext) in
                                                {3620}let psk_87: preSharedKey = (if v_707 then NoPsk else caught-fail) in
                                                {3621}let s_69: bitstring = (if v_707 then zero else caught-fail) in
                                                {3622}let k_60: bitstring = (if v_707 then catch-fail(psk2b(psk_87)) else caught-fail) in
                                                {3623}let v_708: bool = not-caught-fail(k_60) in
                                                {3624}let early_secret_55: bitstring = (if v_707 then catch-fail((if v_708 then hmac(@8_tls_h,s_69,k_60) else fail-any)) else caught-fail) in
                                                {3625}let v_709: bool = not-caught-fail(early_secret_55) in
                                                {3626}let l_207: label = (if v_709 then tls13_ext_res_binder else caught-fail) in
                                                {3627}let m_71: bitstring = (if v_709 then zero else caught-fail) in
                                                {3628}let h_205: bitstring = (if v_709 then catch-fail(hash(@8_tls_h,m_71)) else caught-fail) in
                                                {3629}let v_710: bool = not-caught-fail(h_205) in
                                                {3630}let x_233: bitstring = (if v_710 then (l_207,h_205) else caught-fail) in
                                                {3631}let binder_key_37: bitstring = (if v_709 then catch-fail((if v_710 then hmac(@8_tls_h,early_secret_55,x_233) else fail-any)) else caught-fail) in
                                                {3632}let v_711: bool = not-caught-fail(binder_key_37) in
                                                {3633}let v_712: bitstring = (if v_707 then catch-fail((if v_709 then (if v_711 then (early_secret_55,binder_key_37) else fail-any) else fail-any)) else caught-fail) in
                                                {3634}let v_713: bool = (not-caught-fail(v_712) && success?(1-proj-2-tuple(v_712))) in
                                                {3635}let kb_37: mac_key = (if v_713 then 2-proj-2-tuple(v_712) else caught-fail) in
                                                {3636}let es_57: bitstring = (if v_713 then 1-proj-2-tuple(v_712) else caught-fail) in
                                                {3637}let v_714: bitstring = (if not(v_707) then catch-fail(psk_data'_12) else caught-fail) in
                                                {3638}let v_715: bool = (not-caught-fail(v_714) && success?(1-proj-4-tuple(v_714))) in
                                                {3639}let is_safe_35: bool = (if v_715 then 4-proj-4-tuple(v_714) else caught-fail) in
                                                {3640}let es_58: bitstring = (if v_715 then 3-proj-4-tuple(v_714) else caught-fail) in
                                                {3641}let id_45: identityPsk = (if v_715 then 2-proj-4-tuple(v_714) else caught-fail) in
                                                {3642}let psk_88: preSharedKey = (if v_715 then 1-proj-4-tuple(v_714) else caught-fail) in
                                                {3643}let (psk_89: preSharedKey,early_secret_56: bitstring,valid_16: bool,safe_psk_24: bool) = (if v_707 then (if v_713 then (NoPsk,es_57,true,false) else fail-any) else (if v_715 then (psk_88,es_58,((psk_88 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_43)),is_safe_35) else fail-any)) in
                                                {3644}event Client_PSKChoosen(id_client_4,psk_89,safe_psk_24);
                                                {3645}if valid_16 then
                                                (
                                                    {3646}let gxy_34: element = catch-fail(dh_decap_fun(g_17,gy_17,x_232)) in
                                                    {3647}let v_716: bool = not-caught-fail(gxy_34) in
                                                    {3648}new s_70[]: seed;
                                                    {3649}let gxy_35: element = (if v_716 then gxy_34 else dh_f(s_70)) in
                                                    {3650}event Client_DH_gxy(id_client_4,gxy_35);
                                                    {3651}let l_208: label = tls13_derived in
                                                    {3652}let m_72: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3653}let v_717: bool = not-caught-fail(m_72) in
                                                    {3654}let h_206: bitstring = (if v_717 then catch-fail(hash(@8_tls_h,m_72)) else caught-fail) in
                                                    {3655}let v_718: bool = not-caught-fail(h_206) in
                                                    {3656}let x_234: bitstring = (if v_718 then (l_208,h_206) else caught-fail) in
                                                    {3657}let extra_41: bitstring = catch-fail((if v_717 then (if v_718 then hmac(@8_tls_h,early_secret_56,x_234) else fail-any) else fail-any)) in
                                                    {3658}let v_719: bool = not-caught-fail(extra_41) in
                                                    {3659}let handshake_secret_17: bitstring = (if v_719 then hmac(@8_tls_h,extra_41,gxy_35) else fail-any) in
                                                    {3660}let l_209: label = tls13_derived in
                                                    {3661}let m_73: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3662}let v_720: bool = not-caught-fail(m_73) in
                                                    {3663}let h_207: bitstring = (if v_720 then catch-fail(hash(@8_tls_h,m_73)) else caught-fail) in
                                                    {3664}let v_721: bool = not-caught-fail(h_207) in
                                                    {3665}let x_235: bitstring = (if v_721 then (l_209,h_207) else caught-fail) in
                                                    {3666}let extra_42: bitstring = catch-fail((if v_720 then (if v_721 then hmac(@8_tls_h,handshake_secret_17,x_235) else fail-any) else fail-any)) in
                                                    {3667}let v_722: bool = not-caught-fail(extra_42) in
                                                    {3668}let k_61: bitstring = (if v_722 then zero else caught-fail) in
                                                    {3669}let master_secret_41: bitstring = (if v_722 then catch-fail(hmac(@8_tls_h,handshake_secret_17,k_61)) else caught-fail) in
                                                    {3670}let v_723: bool = not-caught-fail(master_secret_41) in
                                                    {3671}let l_210: label = (if v_723 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3672}let h_208: bitstring = (if v_723 then catch-fail(hash(@8_tls_h,cur_log2_41)) else caught-fail) in
                                                    {3673}let v_724: bool = not-caught-fail(h_208) in
                                                    {3674}let x_236: bitstring = (if v_724 then (l_210,h_208) else caught-fail) in
                                                    {3675}let client_hts_17: bitstring = (if v_723 then catch-fail((if v_724 then hmac(@8_tls_h,handshake_secret_17,x_236) else fail-any)) else caught-fail) in
                                                    {3676}let v_725: bool = not-caught-fail(client_hts_17) in
                                                    {3677}let l_211: label = (if v_725 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3678}let h_209: bitstring = (if v_725 then catch-fail(hash(@8_tls_h,cur_log2_41)) else caught-fail) in
                                                    {3679}let v_726: bool = not-caught-fail(h_209) in
                                                    {3680}let x_237: bitstring = (if v_726 then (l_211,h_209) else caught-fail) in
                                                    {3681}let server_hts_17: bitstring = (if v_725 then catch-fail((if v_726 then hmac(@8_tls_h,handshake_secret_17,x_237) else fail-any)) else caught-fail) in
                                                    {3682}let v_727: bool = not-caught-fail(server_hts_17) in
                                                    {3683}let l_212: label = (if v_727 then tls13_key else caught-fail) in
                                                    {3684}let h_210: bitstring = (if v_727 then zero else caught-fail) in
                                                    {3685}let x_238: bitstring = (if v_727 then (l_212,h_210) else caught-fail) in
                                                    {3686}let client_wkh_17: bitstring = (if v_727 then catch-fail(hmac(@8_tls_h,client_hts_17,x_238)) else caught-fail) in
                                                    {3687}let v_728: bool = not-caught-fail(client_wkh_17) in
                                                    {3688}let l_213: label = (if v_728 then tls13_key else caught-fail) in
                                                    {3689}let h_211: bitstring = (if v_728 then zero else caught-fail) in
                                                    {3690}let x_239: bitstring = (if v_728 then (l_213,h_211) else caught-fail) in
                                                    {3691}let server_wkh_17: bitstring = (if v_728 then catch-fail(hmac(@8_tls_h,server_hts_17,x_239)) else caught-fail) in
                                                    {3692}let v_729: bool = not-caught-fail(server_wkh_17) in
                                                    {3693}let l_214: label = (if v_729 then tls13_finished else caught-fail) in
                                                    {3694}let h_212: bitstring = (if v_729 then zero else caught-fail) in
                                                    {3695}let x_240: bitstring = (if v_729 then (l_214,h_212) else caught-fail) in
                                                    {3696}let client_fk_17: bitstring = (if v_729 then catch-fail(hmac(@8_tls_h,client_hts_17,x_240)) else caught-fail) in
                                                    {3697}let v_730: bool = not-caught-fail(client_fk_17) in
                                                    {3698}let l_215: label = (if v_730 then tls13_finished else caught-fail) in
                                                    {3699}let h_213: bitstring = (if v_730 then zero else caught-fail) in
                                                    {3700}let x_241: bitstring = (if v_730 then (l_215,h_213) else caught-fail) in
                                                    {3701}let server_fk_17: bitstring = (if v_730 then catch-fail(hmac(@8_tls_h,server_hts_17,x_241)) else caught-fail) in
                                                    {3702}let v_731: bool = not-caught-fail(server_fk_17) in
                                                    {3703}let (master_secret_42: bitstring,chk_24: aead_key,shk_23: aead_key,cfin_24: mac_key,sfin_23: mac_key) = (if v_722 then (if v_723 then (if v_725 then (if v_727 then (if v_728 then (if v_729 then (if v_730 then (if v_731 then (master_secret_41,client_wkh_17,server_wkh_17,client_fk_17,server_fk_17) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3704}event Client_chk(id_client_4,chk_24);
                                                    {3705}event Client_shk(id_client_4,shk_23);
                                                    {3706}event Client_cfin(id_client_4,cfin_24);
                                                    {3707}event Client_sfin(id_client_4,sfin_23);
                                                    {3708}in(io, enc_ee_msg_16: bitstring);
                                                    {3709}let ee_msg_21: msg = aead_dec(@8_tls_a,shk_23,0,zero,enc_ee_msg_16) in
                                                    {3710}let EE(ech_ee_16: echExt,extra_ee_16: extraExt) = ee_msg_21 in
                                                    {3711}let cur_log2_42: bitstring = (cur_log2_41,ee_msg_21) in
                                                    {3712}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_17,sr_29,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_89,safe_psk_24,@8_comp_psk,master_secret_42,chk_24,0,shk_23,1,cfin_24,sfin_23,cur_log2_42)))
                                                )
                                                else
                                                    {3713}out(io, illegal_parameter)
                                            )
                                            else
                                                {3714}out(io, illegal_parameter)
                                    )
                                    else
                                        {3715}out(io, unexpected_message)
                                )
                                else
                                    {3868}get pre_shared_keys(c_dom'_8: domain,=s_dom_17,=@8_tls_h,id_46: identityPsk,psk_90: preSharedKey,idP_11: idProc,is_safe_36: bool) in
                                    {3716}event Selected_one_time_used_psk(id_client_4,psk_90,is_safe_36);
                                    {3717}event Selected_psk(c_dom_7,c_dom'_8,idP_11,is_safe_36);
                                    {3718}event Selected_psk_no_missmatch(id_client_4,s_dom_17,@8_tls_h,psk_90,id_46);
                                    {3719}event Selected_psk_with_ID(c_dom_7,c_dom'_8,id_46,idP_11,is_safe_36);
                                    {3720}let v_732: bitstring = (id_46,psk_90,is_safe_36) in
                                    {3721}let v_733: bool = success?(1-proj-3-tuple(v_732)) in
                                    {3722}let is_safe_37: bool = (if v_733 then 3-proj-3-tuple(v_732) else caught-fail) in
                                    {3723}let psk_91: preSharedKey = (if v_733 then 2-proj-3-tuple(v_732) else caught-fail) in
                                    {3724}let id_47: identityPsk = (if v_733 then 1-proj-3-tuple(v_732) else caught-fail) in
                                    {3725}let offer_33: params = (if v_733 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_17),ech_ext_15,extra_40,trunc_client_psk_ext(id_47)) else caught-fail) in
                                    {3726}let cur_log'_15: bitstring = (if v_733 then (cur_log3_6,CH(cr_25,offer_33)) else caught-fail) in
                                    {3727}let s_71: bitstring = (if v_733 then zero else caught-fail) in
                                    {3728}let k_62: bitstring = (if v_733 then catch-fail(psk2b(psk_91)) else caught-fail) in
                                    {3729}let v_734: bool = not-caught-fail(k_62) in
                                    {3730}let early_secret_57: bitstring = (if v_733 then catch-fail((if v_734 then hmac(@8_tls_h,s_71,k_62) else fail-any)) else caught-fail) in
                                    {3731}let v_735: bool = not-caught-fail(early_secret_57) in
                                    {3732}let l_216: label = (if v_735 then tls13_ext_res_binder else caught-fail) in
                                    {3733}let m_74: bitstring = (if v_735 then zero else caught-fail) in
                                    {3734}let h_214: bitstring = (if v_735 then catch-fail(hash(@8_tls_h,m_74)) else caught-fail) in
                                    {3735}let v_736: bool = not-caught-fail(h_214) in
                                    {3736}let x_242: bitstring = (if v_736 then (l_216,h_214) else caught-fail) in
                                    {3737}let binder_key_38: bitstring = (if v_735 then catch-fail((if v_736 then hmac(@8_tls_h,early_secret_57,x_242) else fail-any)) else caught-fail) in
                                    {3738}let v_737: bool = not-caught-fail(binder_key_38) in
                                    {3739}let v_738: bitstring = (if v_733 then catch-fail((if v_735 then (if v_737 then (early_secret_57,binder_key_38) else fail-any) else fail-any)) else caught-fail) in
                                    {3740}let v_739: bool = (not-caught-fail(v_738) && success?(1-proj-2-tuple(v_738))) in
                                    {3741}let kb_38: mac_key = (if v_739 then 2-proj-2-tuple(v_738) else caught-fail) in
                                    {3742}let es_59: bitstring = (if v_739 then 1-proj-2-tuple(v_738) else caught-fail) in
                                    {3743}let binders_14: bitstring = (if v_739 then catch-fail(hmac(@8_tls_h,kb_38,cur_log'_15)) else caught-fail) in
                                    {3744}let v_740: bool = not-caught-fail(binders_14) in
                                    {3745}let v_741: bitstring = catch-fail((if v_733 then (if v_739 then (if v_740 then (client_psk_ext(id_47,binders_14),(psk_91,id_47,es_59,is_safe_37)) else fail-any) else fail-any) else fail-any)) in
                                    {3746}let v_742: bool = (not-caught-fail(v_741) && success?(1-proj-2-tuple(v_741))) in
                                    {3747}let psk_data_23: bitstring = (if v_742 then 2-proj-2-tuple(v_741) else caught-fail) in
                                    {3748}let psk_ext_44: preSharedKeyExt = (if v_742 then 1-proj-2-tuple(v_741) else caught-fail) in
                                    {3749}let offer_34: params = (if v_742 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_44) else caught-fail) in
                                    {3750}let (client_hello'_16: msg,cr'_18: bytes32,kex_data'_13: bitstring,psk_data'_13: bitstring) = (if v_742 then (CH(cr_25,offer_34),cr_25,kex_data_11,psk_data_23) else fail-any) in
                                    {3751}event ClientOffersAead(cr'_18,@8_tls_a);
                                    {3752}event ClientOffersHash(cr'_18,@8_tls_h);
                                    {3753}event ClientOffersGroup(cr'_18,@8_tls_g);
                                    {3754}out(io, client_hello'_16);
                                    {3755}let cur_log4_13: bitstring = (cur_log3_6,client_hello'_16) in
                                    {3756}in(io, server_hello'_13: msg);
                                    {3757}let SH(sr'_13: bytes32,mode'_13: params) = server_hello'_13 in
                                    (
                                        {3758}if (sr'_13 = B32(HRR24,HRR8)) then
                                            {3759}out(io, unexpected_message)
                                        else
                                            {3760}let (x_243: bitstring,g_18: group) = kex_data'_13 in
                                            {3761}let (psk_offer_17: preSharedKey,id_offer_17: identityPsk,es_offer_17: bitstring,is_safe_offer_17: bool) = psk_data'_13 in
                                            {3762}event Client_PSKOffer(id_client_4,psk_offer_17,id_offer_17,is_safe_offer_17);
                                            {3763}event Client_Rand_client(id_client_4,cr'_18);
                                            {3764}event Client_DH_client(id_client_4,dh_pub(g_18,x_243));
                                            {3765}event Client_server_domain(id_client_4,s_dom_17);
                                            {3766}let SH(sr_30: bytes32,mode_22: params) = server_hello'_13 in
                                            {3767}event Client_Rand_server(id_client_4,sr_30);
                                            {3768}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_18,gy_18: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_45: preSharedKeyExt) = mode_22 in
                                            (
                                                {3769}let cur_log2_43: bitstring = (cur_log4_13,server_hello'_13) in
                                                {3770}event Client_DH_server(id_client_4,gy_18);
                                                {3771}let v_743: bool = (psk_ext_45 = empty_psk_ext) in
                                                {3772}let psk_92: preSharedKey = (if v_743 then NoPsk else caught-fail) in
                                                {3773}let s_72: bitstring = (if v_743 then zero else caught-fail) in
                                                {3774}let k_63: bitstring = (if v_743 then catch-fail(psk2b(psk_92)) else caught-fail) in
                                                {3775}let v_744: bool = not-caught-fail(k_63) in
                                                {3776}let early_secret_58: bitstring = (if v_743 then catch-fail((if v_744 then hmac(@8_tls_h,s_72,k_63) else fail-any)) else caught-fail) in
                                                {3777}let v_745: bool = not-caught-fail(early_secret_58) in
                                                {3778}let l_217: label = (if v_745 then tls13_ext_res_binder else caught-fail) in
                                                {3779}let m_75: bitstring = (if v_745 then zero else caught-fail) in
                                                {3780}let h_215: bitstring = (if v_745 then catch-fail(hash(@8_tls_h,m_75)) else caught-fail) in
                                                {3781}let v_746: bool = not-caught-fail(h_215) in
                                                {3782}let x_244: bitstring = (if v_746 then (l_217,h_215) else caught-fail) in
                                                {3783}let binder_key_39: bitstring = (if v_745 then catch-fail((if v_746 then hmac(@8_tls_h,early_secret_58,x_244) else fail-any)) else caught-fail) in
                                                {3784}let v_747: bool = not-caught-fail(binder_key_39) in
                                                {3785}let v_748: bitstring = (if v_743 then catch-fail((if v_745 then (if v_747 then (early_secret_58,binder_key_39) else fail-any) else fail-any)) else caught-fail) in
                                                {3786}let v_749: bool = (not-caught-fail(v_748) && success?(1-proj-2-tuple(v_748))) in
                                                {3787}let kb_39: mac_key = (if v_749 then 2-proj-2-tuple(v_748) else caught-fail) in
                                                {3788}let es_60: bitstring = (if v_749 then 1-proj-2-tuple(v_748) else caught-fail) in
                                                {3789}let v_750: bitstring = (if not(v_743) then catch-fail(psk_data'_13) else caught-fail) in
                                                {3790}let v_751: bool = (not-caught-fail(v_750) && success?(1-proj-4-tuple(v_750))) in
                                                {3791}let is_safe_38: bool = (if v_751 then 4-proj-4-tuple(v_750) else caught-fail) in
                                                {3792}let es_61: bitstring = (if v_751 then 3-proj-4-tuple(v_750) else caught-fail) in
                                                {3793}let id_48: identityPsk = (if v_751 then 2-proj-4-tuple(v_750) else caught-fail) in
                                                {3794}let psk_93: preSharedKey = (if v_751 then 1-proj-4-tuple(v_750) else caught-fail) in
                                                {3795}let (psk_94: preSharedKey,early_secret_59: bitstring,valid_17: bool,safe_psk_25: bool) = (if v_743 then (if v_749 then (NoPsk,es_60,true,false) else fail-any) else (if v_751 then (psk_93,es_61,((psk_93 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_45)),is_safe_38) else fail-any)) in
                                                {3796}event Client_PSKChoosen(id_client_4,psk_94,safe_psk_25);
                                                {3797}if valid_17 then
                                                (
                                                    {3798}let gxy_36: element = catch-fail(dh_decap_fun(g_18,gy_18,x_243)) in
                                                    {3799}let v_752: bool = not-caught-fail(gxy_36) in
                                                    {3800}new s_73[]: seed;
                                                    {3801}let gxy_37: element = (if v_752 then gxy_36 else dh_f(s_73)) in
                                                    {3802}event Client_DH_gxy(id_client_4,gxy_37);
                                                    {3803}let l_218: label = tls13_derived in
                                                    {3804}let m_76: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3805}let v_753: bool = not-caught-fail(m_76) in
                                                    {3806}let h_216: bitstring = (if v_753 then catch-fail(hash(@8_tls_h,m_76)) else caught-fail) in
                                                    {3807}let v_754: bool = not-caught-fail(h_216) in
                                                    {3808}let x_245: bitstring = (if v_754 then (l_218,h_216) else caught-fail) in
                                                    {3809}let extra_43: bitstring = catch-fail((if v_753 then (if v_754 then hmac(@8_tls_h,early_secret_59,x_245) else fail-any) else fail-any)) in
                                                    {3810}let v_755: bool = not-caught-fail(extra_43) in
                                                    {3811}let handshake_secret_18: bitstring = (if v_755 then hmac(@8_tls_h,extra_43,gxy_37) else fail-any) in
                                                    {3812}let l_219: label = tls13_derived in
                                                    {3813}let m_77: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3814}let v_756: bool = not-caught-fail(m_77) in
                                                    {3815}let h_217: bitstring = (if v_756 then catch-fail(hash(@8_tls_h,m_77)) else caught-fail) in
                                                    {3816}let v_757: bool = not-caught-fail(h_217) in
                                                    {3817}let x_246: bitstring = (if v_757 then (l_219,h_217) else caught-fail) in
                                                    {3818}let extra_44: bitstring = catch-fail((if v_756 then (if v_757 then hmac(@8_tls_h,handshake_secret_18,x_246) else fail-any) else fail-any)) in
                                                    {3819}let v_758: bool = not-caught-fail(extra_44) in
                                                    {3820}let k_64: bitstring = (if v_758 then zero else caught-fail) in
                                                    {3821}let master_secret_43: bitstring = (if v_758 then catch-fail(hmac(@8_tls_h,handshake_secret_18,k_64)) else caught-fail) in
                                                    {3822}let v_759: bool = not-caught-fail(master_secret_43) in
                                                    {3823}let l_220: label = (if v_759 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3824}let h_218: bitstring = (if v_759 then catch-fail(hash(@8_tls_h,cur_log2_43)) else caught-fail) in
                                                    {3825}let v_760: bool = not-caught-fail(h_218) in
                                                    {3826}let x_247: bitstring = (if v_760 then (l_220,h_218) else caught-fail) in
                                                    {3827}let client_hts_18: bitstring = (if v_759 then catch-fail((if v_760 then hmac(@8_tls_h,handshake_secret_18,x_247) else fail-any)) else caught-fail) in
                                                    {3828}let v_761: bool = not-caught-fail(client_hts_18) in
                                                    {3829}let l_221: label = (if v_761 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3830}let h_219: bitstring = (if v_761 then catch-fail(hash(@8_tls_h,cur_log2_43)) else caught-fail) in
                                                    {3831}let v_762: bool = not-caught-fail(h_219) in
                                                    {3832}let x_248: bitstring = (if v_762 then (l_221,h_219) else caught-fail) in
                                                    {3833}let server_hts_18: bitstring = (if v_761 then catch-fail((if v_762 then hmac(@8_tls_h,handshake_secret_18,x_248) else fail-any)) else caught-fail) in
                                                    {3834}let v_763: bool = not-caught-fail(server_hts_18) in
                                                    {3835}let l_222: label = (if v_763 then tls13_key else caught-fail) in
                                                    {3836}let h_220: bitstring = (if v_763 then zero else caught-fail) in
                                                    {3837}let x_249: bitstring = (if v_763 then (l_222,h_220) else caught-fail) in
                                                    {3838}let client_wkh_18: bitstring = (if v_763 then catch-fail(hmac(@8_tls_h,client_hts_18,x_249)) else caught-fail) in
                                                    {3839}let v_764: bool = not-caught-fail(client_wkh_18) in
                                                    {3840}let l_223: label = (if v_764 then tls13_key else caught-fail) in
                                                    {3841}let h_221: bitstring = (if v_764 then zero else caught-fail) in
                                                    {3842}let x_250: bitstring = (if v_764 then (l_223,h_221) else caught-fail) in
                                                    {3843}let server_wkh_18: bitstring = (if v_764 then catch-fail(hmac(@8_tls_h,server_hts_18,x_250)) else caught-fail) in
                                                    {3844}let v_765: bool = not-caught-fail(server_wkh_18) in
                                                    {3845}let l_224: label = (if v_765 then tls13_finished else caught-fail) in
                                                    {3846}let h_222: bitstring = (if v_765 then zero else caught-fail) in
                                                    {3847}let x_251: bitstring = (if v_765 then (l_224,h_222) else caught-fail) in
                                                    {3848}let client_fk_18: bitstring = (if v_765 then catch-fail(hmac(@8_tls_h,client_hts_18,x_251)) else caught-fail) in
                                                    {3849}let v_766: bool = not-caught-fail(client_fk_18) in
                                                    {3850}let l_225: label = (if v_766 then tls13_finished else caught-fail) in
                                                    {3851}let h_223: bitstring = (if v_766 then zero else caught-fail) in
                                                    {3852}let x_252: bitstring = (if v_766 then (l_225,h_223) else caught-fail) in
                                                    {3853}let server_fk_18: bitstring = (if v_766 then catch-fail(hmac(@8_tls_h,server_hts_18,x_252)) else caught-fail) in
                                                    {3854}let v_767: bool = not-caught-fail(server_fk_18) in
                                                    {3855}let (master_secret_44: bitstring,chk_25: aead_key,shk_24: aead_key,cfin_25: mac_key,sfin_24: mac_key) = (if v_758 then (if v_759 then (if v_761 then (if v_763 then (if v_764 then (if v_765 then (if v_766 then (if v_767 then (master_secret_43,client_wkh_18,server_wkh_18,client_fk_18,server_fk_18) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3856}event Client_chk(id_client_4,chk_25);
                                                    {3857}event Client_shk(id_client_4,shk_24);
                                                    {3858}event Client_cfin(id_client_4,cfin_25);
                                                    {3859}event Client_sfin(id_client_4,sfin_24);
                                                    {3860}in(io, enc_ee_msg_17: bitstring);
                                                    {3861}let ee_msg_22: msg = aead_dec(@8_tls_a,shk_24,0,zero,enc_ee_msg_17) in
                                                    {3862}let EE(ech_ee_17: echExt,extra_ee_17: extraExt) = ee_msg_22 in
                                                    {3863}let cur_log2_44: bitstring = (cur_log2_43,ee_msg_22) in
                                                    {3864}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_18,sr_30,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_94,safe_psk_25,@8_comp_psk,master_secret_44,chk_25,0,shk_24,1,cfin_25,sfin_24,cur_log2_44)))
                                                )
                                                else
                                                    {3865}out(io, illegal_parameter)
                                            )
                                            else
                                                {3866}out(io, illegal_parameter)
                                    )
                                    else
                                        {3867}out(io, unexpected_message)
                            )
                            else
                                {3869}let psk_95: preSharedKey = NoPsk in
                                {3870}let s_74: bitstring = zero in
                                {3871}let k_65: bitstring = catch-fail(psk2b(psk_95)) in
                                {3872}let v_768: bool = not-caught-fail(k_65) in
                                {3873}let early_secret_60: bitstring = catch-fail((if v_768 then hmac(@8_tls_h,s_74,k_65) else fail-any)) in
                                {3874}let v_769: bool = not-caught-fail(early_secret_60) in
                                {3875}let l_226: label = (if v_769 then tls13_ext_res_binder else caught-fail) in
                                {3876}let m_78: bitstring = (if v_769 then zero else caught-fail) in
                                {3877}let h_224: bitstring = (if v_769 then catch-fail(hash(@8_tls_h,m_78)) else caught-fail) in
                                {3878}let v_770: bool = not-caught-fail(h_224) in
                                {3879}let x_253: bitstring = (if v_770 then (l_226,h_224) else caught-fail) in
                                {3880}let binder_key_40: bitstring = (if v_769 then catch-fail((if v_770 then hmac(@8_tls_h,early_secret_60,x_253) else fail-any)) else caught-fail) in
                                {3881}let v_771: bool = not-caught-fail(binder_key_40) in
                                {3882}let v_772: bitstring = catch-fail((if v_769 then (if v_771 then (early_secret_60,binder_key_40) else fail-any) else fail-any)) in
                                {3883}let v_773: bool = (not-caught-fail(v_772) && success?(1-proj-2-tuple(v_772))) in
                                {3884}let kb_40: mac_key = (if v_773 then 2-proj-2-tuple(v_772) else caught-fail) in
                                {3885}let es_62: bitstring = (if v_773 then 1-proj-2-tuple(v_772) else caught-fail) in
                                {3886}let v_774: bitstring = catch-fail((if v_773 then (empty_psk_ext,(NoPsk,zero,es_62,false)) else fail-any)) in
                                {3887}let v_775: bool = (not-caught-fail(v_774) && success?(1-proj-2-tuple(v_774))) in
                                {3888}let psk_data_24: bitstring = (if v_775 then 2-proj-2-tuple(v_774) else caught-fail) in
                                {3889}let psk_ext_46: preSharedKeyExt = (if v_775 then 1-proj-2-tuple(v_774) else caught-fail) in
                                {3890}let offer_35: params = (if v_775 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_46) else caught-fail) in
                                {3891}let (client_hello'_17: msg,cr'_19: bytes32,kex_data'_14: bitstring,psk_data'_14: bitstring) = (if v_775 then (CH(cr_25,offer_35),cr_25,kex_data_11,psk_data_24) else fail-any) in
                                {3892}event ClientOffersAead(cr'_19,@8_tls_a);
                                {3893}event ClientOffersHash(cr'_19,@8_tls_h);
                                {3894}event ClientOffersGroup(cr'_19,@8_tls_g);
                                {3895}out(io, client_hello'_17);
                                {3896}let cur_log4_14: bitstring = (cur_log3_6,client_hello'_17) in
                                {3897}in(io, server_hello'_14: msg);
                                {3898}let SH(sr'_14: bytes32,mode'_14: params) = server_hello'_14 in
                                (
                                    {3899}if (sr'_14 = B32(HRR24,HRR8)) then
                                        {3900}out(io, unexpected_message)
                                    else
                                        {3901}let (x_254: bitstring,g_19: group) = kex_data'_14 in
                                        {3902}let (psk_offer_18: preSharedKey,id_offer_18: identityPsk,es_offer_18: bitstring,is_safe_offer_18: bool) = psk_data'_14 in
                                        {3903}event Client_PSKOffer(id_client_4,psk_offer_18,id_offer_18,is_safe_offer_18);
                                        {3904}event Client_Rand_client(id_client_4,cr'_19);
                                        {3905}event Client_DH_client(id_client_4,dh_pub(g_19,x_254));
                                        {3906}event Client_server_domain(id_client_4,s_dom_17);
                                        {3907}let SH(sr_31: bytes32,mode_23: params) = server_hello'_14 in
                                        {3908}event Client_Rand_server(id_client_4,sr_31);
                                        {3909}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_19,gy_19: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_47: preSharedKeyExt) = mode_23 in
                                        (
                                            {3910}let cur_log2_45: bitstring = (cur_log4_14,server_hello'_14) in
                                            {3911}event Client_DH_server(id_client_4,gy_19);
                                            {3912}let v_776: bool = (psk_ext_47 = empty_psk_ext) in
                                            {3913}let psk_96: preSharedKey = (if v_776 then NoPsk else caught-fail) in
                                            {3914}let s_75: bitstring = (if v_776 then zero else caught-fail) in
                                            {3915}let k_66: bitstring = (if v_776 then catch-fail(psk2b(psk_96)) else caught-fail) in
                                            {3916}let v_777: bool = not-caught-fail(k_66) in
                                            {3917}let early_secret_61: bitstring = (if v_776 then catch-fail((if v_777 then hmac(@8_tls_h,s_75,k_66) else fail-any)) else caught-fail) in
                                            {3918}let v_778: bool = not-caught-fail(early_secret_61) in
                                            {3919}let l_227: label = (if v_778 then tls13_ext_res_binder else caught-fail) in
                                            {3920}let m_79: bitstring = (if v_778 then zero else caught-fail) in
                                            {3921}let h_225: bitstring = (if v_778 then catch-fail(hash(@8_tls_h,m_79)) else caught-fail) in
                                            {3922}let v_779: bool = not-caught-fail(h_225) in
                                            {3923}let x_255: bitstring = (if v_779 then (l_227,h_225) else caught-fail) in
                                            {3924}let binder_key_41: bitstring = (if v_778 then catch-fail((if v_779 then hmac(@8_tls_h,early_secret_61,x_255) else fail-any)) else caught-fail) in
                                            {3925}let v_780: bool = not-caught-fail(binder_key_41) in
                                            {3926}let v_781: bitstring = (if v_776 then catch-fail((if v_778 then (if v_780 then (early_secret_61,binder_key_41) else fail-any) else fail-any)) else caught-fail) in
                                            {3927}let v_782: bool = (not-caught-fail(v_781) && success?(1-proj-2-tuple(v_781))) in
                                            {3928}let kb_41: mac_key = (if v_782 then 2-proj-2-tuple(v_781) else caught-fail) in
                                            {3929}let es_63: bitstring = (if v_782 then 1-proj-2-tuple(v_781) else caught-fail) in
                                            {3930}let v_783: bitstring = (if not(v_776) then catch-fail(psk_data'_14) else caught-fail) in
                                            {3931}let v_784: bool = (not-caught-fail(v_783) && success?(1-proj-4-tuple(v_783))) in
                                            {3932}let is_safe_39: bool = (if v_784 then 4-proj-4-tuple(v_783) else caught-fail) in
                                            {3933}let es_64: bitstring = (if v_784 then 3-proj-4-tuple(v_783) else caught-fail) in
                                            {3934}let id_49: identityPsk = (if v_784 then 2-proj-4-tuple(v_783) else caught-fail) in
                                            {3935}let psk_97: preSharedKey = (if v_784 then 1-proj-4-tuple(v_783) else caught-fail) in
                                            {3936}let (psk_98: preSharedKey,early_secret_62: bitstring,valid_18: bool,safe_psk_26: bool) = (if v_776 then (if v_782 then (NoPsk,es_63,true,false) else fail-any) else (if v_784 then (psk_97,es_64,((psk_97 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_47)),is_safe_39) else fail-any)) in
                                            {3937}event Client_PSKChoosen(id_client_4,psk_98,safe_psk_26);
                                            {3938}if valid_18 then
                                            (
                                                {3939}let gxy_38: element = catch-fail(dh_decap_fun(g_19,gy_19,x_254)) in
                                                {3940}let v_785: bool = not-caught-fail(gxy_38) in
                                                {3941}new s_76[]: seed;
                                                {3942}let gxy_39: element = (if v_785 then gxy_38 else dh_f(s_76)) in
                                                {3943}event Client_DH_gxy(id_client_4,gxy_39);
                                                {3944}let l_228: label = tls13_derived in
                                                {3945}let m_80: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3946}let v_786: bool = not-caught-fail(m_80) in
                                                {3947}let h_226: bitstring = (if v_786 then catch-fail(hash(@8_tls_h,m_80)) else caught-fail) in
                                                {3948}let v_787: bool = not-caught-fail(h_226) in
                                                {3949}let x_256: bitstring = (if v_787 then (l_228,h_226) else caught-fail) in
                                                {3950}let extra_45: bitstring = catch-fail((if v_786 then (if v_787 then hmac(@8_tls_h,early_secret_62,x_256) else fail-any) else fail-any)) in
                                                {3951}let v_788: bool = not-caught-fail(extra_45) in
                                                {3952}let handshake_secret_19: bitstring = (if v_788 then hmac(@8_tls_h,extra_45,gxy_39) else fail-any) in
                                                {3953}let l_229: label = tls13_derived in
                                                {3954}let m_81: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3955}let v_789: bool = not-caught-fail(m_81) in
                                                {3956}let h_227: bitstring = (if v_789 then catch-fail(hash(@8_tls_h,m_81)) else caught-fail) in
                                                {3957}let v_790: bool = not-caught-fail(h_227) in
                                                {3958}let x_257: bitstring = (if v_790 then (l_229,h_227) else caught-fail) in
                                                {3959}let extra_46: bitstring = catch-fail((if v_789 then (if v_790 then hmac(@8_tls_h,handshake_secret_19,x_257) else fail-any) else fail-any)) in
                                                {3960}let v_791: bool = not-caught-fail(extra_46) in
                                                {3961}let k_67: bitstring = (if v_791 then zero else caught-fail) in
                                                {3962}let master_secret_45: bitstring = (if v_791 then catch-fail(hmac(@8_tls_h,handshake_secret_19,k_67)) else caught-fail) in
                                                {3963}let v_792: bool = not-caught-fail(master_secret_45) in
                                                {3964}let l_230: label = (if v_792 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {3965}let h_228: bitstring = (if v_792 then catch-fail(hash(@8_tls_h,cur_log2_45)) else caught-fail) in
                                                {3966}let v_793: bool = not-caught-fail(h_228) in
                                                {3967}let x_258: bitstring = (if v_793 then (l_230,h_228) else caught-fail) in
                                                {3968}let client_hts_19: bitstring = (if v_792 then catch-fail((if v_793 then hmac(@8_tls_h,handshake_secret_19,x_258) else fail-any)) else caught-fail) in
                                                {3969}let v_794: bool = not-caught-fail(client_hts_19) in
                                                {3970}let l_231: label = (if v_794 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {3971}let h_229: bitstring = (if v_794 then catch-fail(hash(@8_tls_h,cur_log2_45)) else caught-fail) in
                                                {3972}let v_795: bool = not-caught-fail(h_229) in
                                                {3973}let x_259: bitstring = (if v_795 then (l_231,h_229) else caught-fail) in
                                                {3974}let server_hts_19: bitstring = (if v_794 then catch-fail((if v_795 then hmac(@8_tls_h,handshake_secret_19,x_259) else fail-any)) else caught-fail) in
                                                {3975}let v_796: bool = not-caught-fail(server_hts_19) in
                                                {3976}let l_232: label = (if v_796 then tls13_key else caught-fail) in
                                                {3977}let h_230: bitstring = (if v_796 then zero else caught-fail) in
                                                {3978}let x_260: bitstring = (if v_796 then (l_232,h_230) else caught-fail) in
                                                {3979}let client_wkh_19: bitstring = (if v_796 then catch-fail(hmac(@8_tls_h,client_hts_19,x_260)) else caught-fail) in
                                                {3980}let v_797: bool = not-caught-fail(client_wkh_19) in
                                                {3981}let l_233: label = (if v_797 then tls13_key else caught-fail) in
                                                {3982}let h_231: bitstring = (if v_797 then zero else caught-fail) in
                                                {3983}let x_261: bitstring = (if v_797 then (l_233,h_231) else caught-fail) in
                                                {3984}let server_wkh_19: bitstring = (if v_797 then catch-fail(hmac(@8_tls_h,server_hts_19,x_261)) else caught-fail) in
                                                {3985}let v_798: bool = not-caught-fail(server_wkh_19) in
                                                {3986}let l_234: label = (if v_798 then tls13_finished else caught-fail) in
                                                {3987}let h_232: bitstring = (if v_798 then zero else caught-fail) in
                                                {3988}let x_262: bitstring = (if v_798 then (l_234,h_232) else caught-fail) in
                                                {3989}let client_fk_19: bitstring = (if v_798 then catch-fail(hmac(@8_tls_h,client_hts_19,x_262)) else caught-fail) in
                                                {3990}let v_799: bool = not-caught-fail(client_fk_19) in
                                                {3991}let l_235: label = (if v_799 then tls13_finished else caught-fail) in
                                                {3992}let h_233: bitstring = (if v_799 then zero else caught-fail) in
                                                {3993}let x_263: bitstring = (if v_799 then (l_235,h_233) else caught-fail) in
                                                {3994}let server_fk_19: bitstring = (if v_799 then catch-fail(hmac(@8_tls_h,server_hts_19,x_263)) else caught-fail) in
                                                {3995}let v_800: bool = not-caught-fail(server_fk_19) in
                                                {3996}let (master_secret_46: bitstring,chk_26: aead_key,shk_25: aead_key,cfin_26: mac_key,sfin_25: mac_key) = (if v_791 then (if v_792 then (if v_794 then (if v_796 then (if v_797 then (if v_798 then (if v_799 then (if v_800 then (master_secret_45,client_wkh_19,server_wkh_19,client_fk_19,server_fk_19) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {3997}event Client_chk(id_client_4,chk_26);
                                                {3998}event Client_shk(id_client_4,shk_25);
                                                {3999}event Client_cfin(id_client_4,cfin_26);
                                                {4000}event Client_sfin(id_client_4,sfin_25);
                                                {4001}in(io, enc_ee_msg_18: bitstring);
                                                {4002}let ee_msg_23: msg = aead_dec(@8_tls_a,shk_25,0,zero,enc_ee_msg_18) in
                                                {4003}let EE(ech_ee_18: echExt,extra_ee_18: extraExt) = ee_msg_23 in
                                                {4004}let cur_log2_46: bitstring = (cur_log2_45,ee_msg_23) in
                                                {4005}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_19,sr_31,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_98,safe_psk_26,@8_comp_psk,master_secret_46,chk_26,0,shk_25,1,cfin_26,sfin_25,cur_log2_46)))
                                            )
                                            else
                                                {4006}out(io, illegal_parameter)
                                        )
                                        else
                                            {4007}out(io, illegal_parameter)
                                )
                                else
                                    {4008}out(io, unexpected_message)
                        )
                        else
                            {4009}out(io, illegal_parameter)
                    )
                    else
                        {4010}if send_kex_4 then
                        (
                            {4011}let (x_264: bitstring,g_20: group) = kex_data_10 in
                            {4012}let (psk_offer_19: preSharedKey,id_offer_19: identityPsk,es_offer_19: bitstring,is_safe_offer_19: bool) = psk_data_21 in
                            {4013}event Client_PSKOffer(id_client_4,psk_offer_19,id_offer_19,is_safe_offer_19);
                            {4014}event Client_Rand_client(id_client_4,cr_24);
                            {4015}event Client_DH_client(id_client_4,dh_pub(g_20,x_264));
                            {4016}event Client_server_domain(id_client_4,s_dom_17);
                            {4017}let SH(sr_32: bytes32,mode_24: params) = server_hello_5 in
                            {4018}event Client_Rand_server(id_client_4,sr_32);
                            {4019}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_20,gy_20: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_48: preSharedKeyExt) = mode_24 in
                            (
                                {4020}let cur_log2_47: bitstring = (cur_log2_40,server_hello_5) in
                                {4021}event Client_DH_server(id_client_4,gy_20);
                                {4022}let v_801: bool = (psk_ext_48 = empty_psk_ext) in
                                {4023}let psk_99: preSharedKey = (if v_801 then NoPsk else caught-fail) in
                                {4024}let s_77: bitstring = (if v_801 then zero else caught-fail) in
                                {4025}let k_68: bitstring = (if v_801 then catch-fail(psk2b(psk_99)) else caught-fail) in
                                {4026}let v_802: bool = not-caught-fail(k_68) in
                                {4027}let early_secret_63: bitstring = (if v_801 then catch-fail((if v_802 then hmac(@8_tls_h,s_77,k_68) else fail-any)) else caught-fail) in
                                {4028}let v_803: bool = not-caught-fail(early_secret_63) in
                                {4029}let l_236: label = (if v_803 then tls13_ext_res_binder else caught-fail) in
                                {4030}let m_82: bitstring = (if v_803 then zero else caught-fail) in
                                {4031}let h_234: bitstring = (if v_803 then catch-fail(hash(@8_tls_h,m_82)) else caught-fail) in
                                {4032}let v_804: bool = not-caught-fail(h_234) in
                                {4033}let x_265: bitstring = (if v_804 then (l_236,h_234) else caught-fail) in
                                {4034}let binder_key_42: bitstring = (if v_803 then catch-fail((if v_804 then hmac(@8_tls_h,early_secret_63,x_265) else fail-any)) else caught-fail) in
                                {4035}let v_805: bool = not-caught-fail(binder_key_42) in
                                {4036}let v_806: bitstring = (if v_801 then catch-fail((if v_803 then (if v_805 then (early_secret_63,binder_key_42) else fail-any) else fail-any)) else caught-fail) in
                                {4037}let v_807: bool = (not-caught-fail(v_806) && success?(1-proj-2-tuple(v_806))) in
                                {4038}let kb_42: mac_key = (if v_807 then 2-proj-2-tuple(v_806) else caught-fail) in
                                {4039}let es_65: bitstring = (if v_807 then 1-proj-2-tuple(v_806) else caught-fail) in
                                {4040}let v_808: bitstring = (if not(v_801) then catch-fail(psk_data_21) else caught-fail) in
                                {4041}let v_809: bool = (not-caught-fail(v_808) && success?(1-proj-4-tuple(v_808))) in
                                {4042}let is_safe_40: bool = (if v_809 then 4-proj-4-tuple(v_808) else caught-fail) in
                                {4043}let es_66: bitstring = (if v_809 then 3-proj-4-tuple(v_808) else caught-fail) in
                                {4044}let id_50: identityPsk = (if v_809 then 2-proj-4-tuple(v_808) else caught-fail) in
                                {4045}let psk_100: preSharedKey = (if v_809 then 1-proj-4-tuple(v_808) else caught-fail) in
                                {4046}let (psk_101: preSharedKey,early_secret_64: bitstring,valid_19: bool,safe_psk_27: bool) = (if v_801 then (if v_807 then (NoPsk,es_65,true,false) else fail-any) else (if v_809 then (psk_100,es_66,((psk_100 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_48)),is_safe_40) else fail-any)) in
                                {4047}event Client_PSKChoosen(id_client_4,psk_101,safe_psk_27);
                                {4048}if valid_19 then
                                (
                                    {4049}let gxy_40: element = catch-fail(dh_decap_fun(g_20,gy_20,x_264)) in
                                    {4050}let v_810: bool = not-caught-fail(gxy_40) in
                                    {4051}new s_78[]: seed;
                                    {4052}let gxy_41: element = (if v_810 then gxy_40 else dh_f(s_78)) in
                                    {4053}event Client_DH_gxy(id_client_4,gxy_41);
                                    {4054}let l_237: label = tls13_derived in
                                    {4055}let m_83: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {4056}let v_811: bool = not-caught-fail(m_83) in
                                    {4057}let h_235: bitstring = (if v_811 then catch-fail(hash(@8_tls_h,m_83)) else caught-fail) in
                                    {4058}let v_812: bool = not-caught-fail(h_235) in
                                    {4059}let x_266: bitstring = (if v_812 then (l_237,h_235) else caught-fail) in
                                    {4060}let extra_47: bitstring = catch-fail((if v_811 then (if v_812 then hmac(@8_tls_h,early_secret_64,x_266) else fail-any) else fail-any)) in
                                    {4061}let v_813: bool = not-caught-fail(extra_47) in
                                    {4062}let handshake_secret_20: bitstring = (if v_813 then hmac(@8_tls_h,extra_47,gxy_41) else fail-any) in
                                    {4063}let l_238: label = tls13_derived in
                                    {4064}let m_84: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {4065}let v_814: bool = not-caught-fail(m_84) in
                                    {4066}let h_236: bitstring = (if v_814 then catch-fail(hash(@8_tls_h,m_84)) else caught-fail) in
                                    {4067}let v_815: bool = not-caught-fail(h_236) in
                                    {4068}let x_267: bitstring = (if v_815 then (l_238,h_236) else caught-fail) in
                                    {4069}let extra_48: bitstring = catch-fail((if v_814 then (if v_815 then hmac(@8_tls_h,handshake_secret_20,x_267) else fail-any) else fail-any)) in
                                    {4070}let v_816: bool = not-caught-fail(extra_48) in
                                    {4071}let k_69: bitstring = (if v_816 then zero else caught-fail) in
                                    {4072}let master_secret_47: bitstring = (if v_816 then catch-fail(hmac(@8_tls_h,handshake_secret_20,k_69)) else caught-fail) in
                                    {4073}let v_817: bool = not-caught-fail(master_secret_47) in
                                    {4074}let l_239: label = (if v_817 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {4075}let h_237: bitstring = (if v_817 then catch-fail(hash(@8_tls_h,cur_log2_47)) else caught-fail) in
                                    {4076}let v_818: bool = not-caught-fail(h_237) in
                                    {4077}let x_268: bitstring = (if v_818 then (l_239,h_237) else caught-fail) in
                                    {4078}let client_hts_20: bitstring = (if v_817 then catch-fail((if v_818 then hmac(@8_tls_h,handshake_secret_20,x_268) else fail-any)) else caught-fail) in
                                    {4079}let v_819: bool = not-caught-fail(client_hts_20) in
                                    {4080}let l_240: label = (if v_819 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {4081}let h_238: bitstring = (if v_819 then catch-fail(hash(@8_tls_h,cur_log2_47)) else caught-fail) in
                                    {4082}let v_820: bool = not-caught-fail(h_238) in
                                    {4083}let x_269: bitstring = (if v_820 then (l_240,h_238) else caught-fail) in
                                    {4084}let server_hts_20: bitstring = (if v_819 then catch-fail((if v_820 then hmac(@8_tls_h,handshake_secret_20,x_269) else fail-any)) else caught-fail) in
                                    {4085}let v_821: bool = not-caught-fail(server_hts_20) in
                                    {4086}let l_241: label = (if v_821 then tls13_key else caught-fail) in
                                    {4087}let h_239: bitstring = (if v_821 then zero else caught-fail) in
                                    {4088}let x_270: bitstring = (if v_821 then (l_241,h_239) else caught-fail) in
                                    {4089}let client_wkh_20: bitstring = (if v_821 then catch-fail(hmac(@8_tls_h,client_hts_20,x_270)) else caught-fail) in
                                    {4090}let v_822: bool = not-caught-fail(client_wkh_20) in
                                    {4091}let l_242: label = (if v_822 then tls13_key else caught-fail) in
                                    {4092}let h_240: bitstring = (if v_822 then zero else caught-fail) in
                                    {4093}let x_271: bitstring = (if v_822 then (l_242,h_240) else caught-fail) in
                                    {4094}let server_wkh_20: bitstring = (if v_822 then catch-fail(hmac(@8_tls_h,server_hts_20,x_271)) else caught-fail) in
                                    {4095}let v_823: bool = not-caught-fail(server_wkh_20) in
                                    {4096}let l_243: label = (if v_823 then tls13_finished else caught-fail) in
                                    {4097}let h_241: bitstring = (if v_823 then zero else caught-fail) in
                                    {4098}let x_272: bitstring = (if v_823 then (l_243,h_241) else caught-fail) in
                                    {4099}let client_fk_20: bitstring = (if v_823 then catch-fail(hmac(@8_tls_h,client_hts_20,x_272)) else caught-fail) in
                                    {4100}let v_824: bool = not-caught-fail(client_fk_20) in
                                    {4101}let l_244: label = (if v_824 then tls13_finished else caught-fail) in
                                    {4102}let h_242: bitstring = (if v_824 then zero else caught-fail) in
                                    {4103}let x_273: bitstring = (if v_824 then (l_244,h_242) else caught-fail) in
                                    {4104}let server_fk_20: bitstring = (if v_824 then catch-fail(hmac(@8_tls_h,server_hts_20,x_273)) else caught-fail) in
                                    {4105}let v_825: bool = not-caught-fail(server_fk_20) in
                                    {4106}let (master_secret_48: bitstring,chk_27: aead_key,shk_26: aead_key,cfin_27: mac_key,sfin_26: mac_key) = (if v_816 then (if v_817 then (if v_819 then (if v_821 then (if v_822 then (if v_823 then (if v_824 then (if v_825 then (master_secret_47,client_wkh_20,server_wkh_20,client_fk_20,server_fk_20) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {4107}event Client_chk(id_client_4,chk_27);
                                    {4108}event Client_shk(id_client_4,shk_26);
                                    {4109}event Client_cfin(id_client_4,cfin_27);
                                    {4110}event Client_sfin(id_client_4,sfin_26);
                                    {4111}in(io, enc_ee_msg_19: bitstring);
                                    {4112}let ee_msg_24: msg = aead_dec(@8_tls_a,shk_26,0,zero,enc_ee_msg_19) in
                                    {4113}let EE(ech_ee_19: echExt,extra_ee_19: extraExt) = ee_msg_24 in
                                    {4114}let cur_log2_48: bitstring = (cur_log2_47,ee_msg_24) in
                                    {4115}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr_24,sr_32,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_101,safe_psk_27,@8_comp_psk,master_secret_48,chk_27,0,shk_26,1,cfin_27,sfin_26,cur_log2_48)))
                                )
                                else
                                    {4116}out(io, illegal_parameter)
                            )
                            else
                                {4117}out(io, illegal_parameter)
                        )
                        else
                            {4118}out(io, illegal_parameter)
                )
                else
                    {4119}out(io, unexpected_message)
            )
    )
    else
        {4121}let psk_102: preSharedKey = NoPsk in
        {4122}let s_79: bitstring = zero in
        {4123}let k_70: bitstring = catch-fail(psk2b(psk_102)) in
        {4124}let v_826: bool = not-caught-fail(k_70) in
        {4125}let early_secret_65: bitstring = catch-fail((if v_826 then hmac(@8_tls_h,s_79,k_70) else fail-any)) in
        {4126}let v_827: bool = not-caught-fail(early_secret_65) in
        {4127}let l_245: label = (if v_827 then tls13_ext_res_binder else caught-fail) in
        {4128}let m_85: bitstring = (if v_827 then zero else caught-fail) in
        {4129}let h_243: bitstring = (if v_827 then catch-fail(hash(@8_tls_h,m_85)) else caught-fail) in
        {4130}let v_828: bool = not-caught-fail(h_243) in
        {4131}let x_274: bitstring = (if v_828 then (l_245,h_243) else caught-fail) in
        {4132}let binder_key_43: bitstring = (if v_827 then catch-fail((if v_828 then hmac(@8_tls_h,early_secret_65,x_274) else fail-any)) else caught-fail) in
        {4133}let v_829: bool = not-caught-fail(binder_key_43) in
        {4134}let v_830: bitstring = catch-fail((if v_827 then (if v_829 then (early_secret_65,binder_key_43) else fail-any) else fail-any)) in
        {4135}let v_831: bool = (not-caught-fail(v_830) && success?(1-proj-2-tuple(v_830))) in
        {4136}let kb_43: mac_key = (if v_831 then 2-proj-2-tuple(v_830) else caught-fail) in
        {4137}let es_67: bitstring = (if v_831 then 1-proj-2-tuple(v_830) else caught-fail) in
        {4138}let v_832: bitstring = catch-fail((if v_831 then (empty_psk_ext,(NoPsk,zero,es_67,false)) else fail-any)) in
        {4139}let v_833: bool = (not-caught-fail(v_832) && success?(1-proj-2-tuple(v_832))) in
        {4140}let psk_data_25: bitstring = (if v_833 then 2-proj-2-tuple(v_832) else caught-fail) in
        {4141}let psk_ext_49: preSharedKeyExt = (if v_833 then 1-proj-2-tuple(v_832) else caught-fail) in
        {4142}let offer_36: params = (if v_833 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_49) else caught-fail) in
        {4143}let (client_hello_11: msg,cr_26: bytes32,kex_data_12: bitstring,psk_data_26: bitstring) = (if v_833 then (CH(cr_21,offer_36),cr_21,kex_data_7,psk_data_25) else fail-any) in
        {4144}event ClientOffersAead(cr_26,@8_tls_a);
        {4145}event ClientOffersHash(cr_26,@8_tls_h);
        {4146}event ClientOffersGroup(cr_26,@8_tls_g);
        {4147}out(io, client_hello_11);
        {4148}let cur_log2_49: bitstring = (cur_log_10,client_hello_11) in
        {4149}let (psk_103: preSharedKey,id_51: identityPsk,es_68: bitstring,safe_psk_28: bool) = psk_data_26 in
        (
            {4150}if (false && (psk_103 ≠ NoPsk)) then
            {4151}let client_hello_12: bitstring = (zero,client_hello_11) in
            {4152}let l_246: label = tls13_client_early_traffic_secret in
            {4153}let h_244: bitstring = catch-fail(hash(@8_tls_h,client_hello_12)) in
            {4154}let v_834: bool = not-caught-fail(h_244) in
            {4155}let x_275: bitstring = (if v_834 then (l_246,h_244) else caught-fail) in
            {4156}let atsc0_6: bitstring = catch-fail((if v_834 then hmac(@8_tls_h,es_68,x_275) else fail-any)) in
            {4157}let v_835: bool = not-caught-fail(atsc0_6) in
            {4158}let l_247: label = (if v_835 then tls13_key else caught-fail) in
            {4159}let h_245: bitstring = (if v_835 then zero else caught-fail) in
            {4160}let x_276: bitstring = (if v_835 then (l_247,h_245) else caught-fail) in
            {4161}let kc0_6: bitstring = (if v_835 then catch-fail(hmac(@8_tls_h,atsc0_6,x_276)) else caught-fail) in
            {4162}let v_836: bool = not-caught-fail(kc0_6) in
            {4163}let l_248: label = (if v_836 then tls13_early_exporter_master_secret else caught-fail) in
            {4164}let h_246: bitstring = (if v_836 then catch-fail(hash(@8_tls_h,client_hello_12)) else caught-fail) in
            {4165}let v_837: bool = not-caught-fail(h_246) in
            {4166}let x_277: bitstring = (if v_837 then (l_248,h_246) else caught-fail) in
            {4167}let ems0_12: bitstring = (if v_836 then catch-fail((if v_837 then hmac(@8_tls_h,es_68,x_277) else fail-any)) else caught-fail) in
            {4168}let v_838: bool = not-caught-fail(ems0_12) in
            {4169}let (wkc0_6: aead_key,ems0_13: bitstring) = (if v_835 then (if v_836 then (if v_838 then (kc0_6,ems0_12) else fail-any) else fail-any) else fail-any) in
            {4170}!
            {4171}in(io, (i_6: nat,ad_6: bitstring));
            {4172}if is_nat(i_6) then
            {4173}new msg_ed_5[]: bitstring;
            {4174}let enc_ed_5: bitstring = aead_enc(@8_tls_a,wkc0_6,i_6,ad_6,msg_ed_5) in
            {4175}new st_15: stamp;
            {4176}event ClientSequenceClient0RTTDataWriteKey(id_client_4,st_15,i_6);
            {4177}event ClientSends0(id_client_4,cr_26,psk_103,i_6,ad_6,msg_ed_5);
            {4178}out(io, enc_ed_5)
        ) | (
            {4179}in(io, server_hello_6: msg);
            {4180}let SH(sr_33: bytes32,mode_25: params) = server_hello_6 in
            (
                {4181}event ClientEchAcceptance(id_client_4,false);
                {4182}if (true && (sr_33 = B32(HRR24,HRR8))) then
                (
                    {4183}if ((mode_25 = nego(TLS13,@8_tls_h,@8_tls_a,hrr_kex_ext(@8_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex_4 ≠ true)) then
                    (
                        {4184}let cur_log3_7: bitstring = (cur_log2_49,server_hello_6) in
                        {4185}let send_kex_7: bool = true in
                        {4186}new rand24_8[]: bytes24;
                        {4187}new rand8_8[]: bytes8;
                        {4188}let cr_27: bytes32 = B32(rand24_8,rand8_8) in
                        {4189}new s_80[]: seed;
                        {4190}let gx_21: element = dh_pub(@8_tls_g,dh_k(s_80)) in
                        {4191}let v_839: bitstring = (dh_k(s_80),gx_21) in
                        {4192}let v_840: bool = success?(1-proj-2-tuple(v_839)) in
                        {4193}let gx_22: element = (if v_840 then 2-proj-2-tuple(v_839) else caught-fail) in
                        {4194}let x_278: bitstring = (if v_840 then 1-proj-2-tuple(v_839) else caught-fail) in
                        {4195}let kex_7: kex_alg = (if v_840 then (if send_kex_7 then DHE_kex(@8_tls_g,gx_22) else DHE_group(@8_tls_g)) else caught-fail) in
                        {4196}let (kex_ext_15: keyShareExt,kex_data_13: bitstring) = (if v_840 then (client_kex_ext(kex_7),(x_278,@8_tls_g)) else fail-any) in
                        {4197}let ech_ext_16: echExt = empty_ech_ext in
                        {4198}let extra_49: extraExt = empty_extra_ext in
                        {4199}if @8_use_psk then
                        (
                            {4200}let (psk_104: preSharedKey,id_52: identityPsk,old_es_7: bitstring,is_safe_41: bool) = psk_data_26 in
                            (
                                {4201}let offer_37: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_17),ech_ext_16,extra_49,trunc_client_psk_ext(id_52)) in
                                {4202}let cur_log'_16: bitstring = (cur_log3_7,CH(cr_27,offer_37)) in
                                {4203}let s_81: bitstring = zero in
                                {4204}let k_71: bitstring = catch-fail(psk2b(psk_104)) in
                                {4205}let v_841: bool = not-caught-fail(k_71) in
                                {4206}let early_secret_66: bitstring = catch-fail((if v_841 then hmac(@8_tls_h,s_81,k_71) else fail-any)) in
                                {4207}let v_842: bool = not-caught-fail(early_secret_66) in
                                {4208}let l_249: label = (if v_842 then tls13_ext_res_binder else caught-fail) in
                                {4209}let m_86: bitstring = (if v_842 then zero else caught-fail) in
                                {4210}let h_247: bitstring = (if v_842 then catch-fail(hash(@8_tls_h,m_86)) else caught-fail) in
                                {4211}let v_843: bool = not-caught-fail(h_247) in
                                {4212}let x_279: bitstring = (if v_843 then (l_249,h_247) else caught-fail) in
                                {4213}let binder_key_44: bitstring = (if v_842 then catch-fail((if v_843 then hmac(@8_tls_h,early_secret_66,x_279) else fail-any)) else caught-fail) in
                                {4214}let v_844: bool = not-caught-fail(binder_key_44) in
                                {4215}let v_845: bitstring = catch-fail((if v_842 then (if v_844 then (early_secret_66,binder_key_44) else fail-any) else fail-any)) in
                                {4216}let v_846: bool = (not-caught-fail(v_845) && success?(1-proj-2-tuple(v_845))) in
                                {4217}let kb_44: mac_key = (if v_846 then 2-proj-2-tuple(v_845) else caught-fail) in
                                {4218}let es_69: bitstring = (if v_846 then 1-proj-2-tuple(v_845) else caught-fail) in
                                {4219}let binders_15: bitstring = (if v_846 then catch-fail(hmac(@8_tls_h,kb_44,cur_log'_16)) else caught-fail) in
                                {4220}let v_847: bool = not-caught-fail(binders_15) in
                                {4221}let v_848: bitstring = catch-fail((if v_846 then (if v_847 then (client_psk_ext(id_52,binders_15),(psk_104,id_52,es_69,is_safe_41)) else fail-any) else fail-any)) in
                                {4222}let v_849: bool = (not-caught-fail(v_848) && success?(1-proj-2-tuple(v_848))) in
                                {4223}let psk_data_27: bitstring = (if v_849 then 2-proj-2-tuple(v_848) else caught-fail) in
                                {4224}let psk_ext_50: preSharedKeyExt = (if v_849 then 1-proj-2-tuple(v_848) else caught-fail) in
                                {4225}let offer_38: params = (if v_849 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_50) else caught-fail) in
                                {4226}let (client_hello'_18: msg,cr'_20: bytes32,kex_data'_15: bitstring,psk_data'_15: bitstring) = (if v_849 then (CH(cr_27,offer_38),cr_27,kex_data_13,psk_data_27) else fail-any) in
                                {4227}event ClientOffersAead(cr'_20,@8_tls_a);
                                {4228}event ClientOffersHash(cr'_20,@8_tls_h);
                                {4229}event ClientOffersGroup(cr'_20,@8_tls_g);
                                {4230}out(io, client_hello'_18);
                                {4231}let cur_log4_15: bitstring = (cur_log3_7,client_hello'_18) in
                                {4232}in(io, server_hello'_15: msg);
                                {4233}let SH(sr'_15: bytes32,mode'_15: params) = server_hello'_15 in
                                (
                                    {4234}if (sr'_15 = B32(HRR24,HRR8)) then
                                        {4235}out(io, unexpected_message)
                                    else
                                        {4236}let (x_280: bitstring,g_21: group) = kex_data'_15 in
                                        {4237}let (psk_offer_20: preSharedKey,id_offer_20: identityPsk,es_offer_20: bitstring,is_safe_offer_20: bool) = psk_data'_15 in
                                        {4238}event Client_PSKOffer(id_client_4,psk_offer_20,id_offer_20,is_safe_offer_20);
                                        {4239}event Client_Rand_client(id_client_4,cr'_20);
                                        {4240}event Client_DH_client(id_client_4,dh_pub(g_21,x_280));
                                        {4241}event Client_server_domain(id_client_4,s_dom_17);
                                        {4242}let SH(sr_34: bytes32,mode_26: params) = server_hello'_15 in
                                        {4243}event Client_Rand_server(id_client_4,sr_34);
                                        {4244}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_21,gy_21: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_51: preSharedKeyExt) = mode_26 in
                                        (
                                            {4245}let cur_log2_50: bitstring = (cur_log4_15,server_hello'_15) in
                                            {4246}event Client_DH_server(id_client_4,gy_21);
                                            {4247}let v_850: bool = (psk_ext_51 = empty_psk_ext) in
                                            {4248}let psk_105: preSharedKey = (if v_850 then NoPsk else caught-fail) in
                                            {4249}let s_82: bitstring = (if v_850 then zero else caught-fail) in
                                            {4250}let k_72: bitstring = (if v_850 then catch-fail(psk2b(psk_105)) else caught-fail) in
                                            {4251}let v_851: bool = not-caught-fail(k_72) in
                                            {4252}let early_secret_67: bitstring = (if v_850 then catch-fail((if v_851 then hmac(@8_tls_h,s_82,k_72) else fail-any)) else caught-fail) in
                                            {4253}let v_852: bool = not-caught-fail(early_secret_67) in
                                            {4254}let l_250: label = (if v_852 then tls13_ext_res_binder else caught-fail) in
                                            {4255}let m_87: bitstring = (if v_852 then zero else caught-fail) in
                                            {4256}let h_248: bitstring = (if v_852 then catch-fail(hash(@8_tls_h,m_87)) else caught-fail) in
                                            {4257}let v_853: bool = not-caught-fail(h_248) in
                                            {4258}let x_281: bitstring = (if v_853 then (l_250,h_248) else caught-fail) in
                                            {4259}let binder_key_45: bitstring = (if v_852 then catch-fail((if v_853 then hmac(@8_tls_h,early_secret_67,x_281) else fail-any)) else caught-fail) in
                                            {4260}let v_854: bool = not-caught-fail(binder_key_45) in
                                            {4261}let v_855: bitstring = (if v_850 then catch-fail((if v_852 then (if v_854 then (early_secret_67,binder_key_45) else fail-any) else fail-any)) else caught-fail) in
                                            {4262}let v_856: bool = (not-caught-fail(v_855) && success?(1-proj-2-tuple(v_855))) in
                                            {4263}let kb_45: mac_key = (if v_856 then 2-proj-2-tuple(v_855) else caught-fail) in
                                            {4264}let es_70: bitstring = (if v_856 then 1-proj-2-tuple(v_855) else caught-fail) in
                                            {4265}let v_857: bitstring = (if not(v_850) then catch-fail(psk_data'_15) else caught-fail) in
                                            {4266}let v_858: bool = (not-caught-fail(v_857) && success?(1-proj-4-tuple(v_857))) in
                                            {4267}let is_safe_42: bool = (if v_858 then 4-proj-4-tuple(v_857) else caught-fail) in
                                            {4268}let es_71: bitstring = (if v_858 then 3-proj-4-tuple(v_857) else caught-fail) in
                                            {4269}let id_53: identityPsk = (if v_858 then 2-proj-4-tuple(v_857) else caught-fail) in
                                            {4270}let psk_106: preSharedKey = (if v_858 then 1-proj-4-tuple(v_857) else caught-fail) in
                                            {4271}let (psk_107: preSharedKey,early_secret_68: bitstring,valid_20: bool,safe_psk_29: bool) = (if v_850 then (if v_856 then (NoPsk,es_70,true,false) else fail-any) else (if v_858 then (psk_106,es_71,((psk_106 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_51)),is_safe_42) else fail-any)) in
                                            {4272}event Client_PSKChoosen(id_client_4,psk_107,safe_psk_29);
                                            {4273}if valid_20 then
                                            (
                                                {4274}let gxy_42: element = catch-fail(dh_decap_fun(g_21,gy_21,x_280)) in
                                                {4275}let v_859: bool = not-caught-fail(gxy_42) in
                                                {4276}new s_83[]: seed;
                                                {4277}let gxy_43: element = (if v_859 then gxy_42 else dh_f(s_83)) in
                                                {4278}event Client_DH_gxy(id_client_4,gxy_43);
                                                {4279}let l_251: label = tls13_derived in
                                                {4280}let m_88: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4281}let v_860: bool = not-caught-fail(m_88) in
                                                {4282}let h_249: bitstring = (if v_860 then catch-fail(hash(@8_tls_h,m_88)) else caught-fail) in
                                                {4283}let v_861: bool = not-caught-fail(h_249) in
                                                {4284}let x_282: bitstring = (if v_861 then (l_251,h_249) else caught-fail) in
                                                {4285}let extra_50: bitstring = catch-fail((if v_860 then (if v_861 then hmac(@8_tls_h,early_secret_68,x_282) else fail-any) else fail-any)) in
                                                {4286}let v_862: bool = not-caught-fail(extra_50) in
                                                {4287}let handshake_secret_21: bitstring = (if v_862 then hmac(@8_tls_h,extra_50,gxy_43) else fail-any) in
                                                {4288}let l_252: label = tls13_derived in
                                                {4289}let m_89: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4290}let v_863: bool = not-caught-fail(m_89) in
                                                {4291}let h_250: bitstring = (if v_863 then catch-fail(hash(@8_tls_h,m_89)) else caught-fail) in
                                                {4292}let v_864: bool = not-caught-fail(h_250) in
                                                {4293}let x_283: bitstring = (if v_864 then (l_252,h_250) else caught-fail) in
                                                {4294}let extra_51: bitstring = catch-fail((if v_863 then (if v_864 then hmac(@8_tls_h,handshake_secret_21,x_283) else fail-any) else fail-any)) in
                                                {4295}let v_865: bool = not-caught-fail(extra_51) in
                                                {4296}let k_73: bitstring = (if v_865 then zero else caught-fail) in
                                                {4297}let master_secret_49: bitstring = (if v_865 then catch-fail(hmac(@8_tls_h,handshake_secret_21,k_73)) else caught-fail) in
                                                {4298}let v_866: bool = not-caught-fail(master_secret_49) in
                                                {4299}let l_253: label = (if v_866 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {4300}let h_251: bitstring = (if v_866 then catch-fail(hash(@8_tls_h,cur_log2_50)) else caught-fail) in
                                                {4301}let v_867: bool = not-caught-fail(h_251) in
                                                {4302}let x_284: bitstring = (if v_867 then (l_253,h_251) else caught-fail) in
                                                {4303}let client_hts_21: bitstring = (if v_866 then catch-fail((if v_867 then hmac(@8_tls_h,handshake_secret_21,x_284) else fail-any)) else caught-fail) in
                                                {4304}let v_868: bool = not-caught-fail(client_hts_21) in
                                                {4305}let l_254: label = (if v_868 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {4306}let h_252: bitstring = (if v_868 then catch-fail(hash(@8_tls_h,cur_log2_50)) else caught-fail) in
                                                {4307}let v_869: bool = not-caught-fail(h_252) in
                                                {4308}let x_285: bitstring = (if v_869 then (l_254,h_252) else caught-fail) in
                                                {4309}let server_hts_21: bitstring = (if v_868 then catch-fail((if v_869 then hmac(@8_tls_h,handshake_secret_21,x_285) else fail-any)) else caught-fail) in
                                                {4310}let v_870: bool = not-caught-fail(server_hts_21) in
                                                {4311}let l_255: label = (if v_870 then tls13_key else caught-fail) in
                                                {4312}let h_253: bitstring = (if v_870 then zero else caught-fail) in
                                                {4313}let x_286: bitstring = (if v_870 then (l_255,h_253) else caught-fail) in
                                                {4314}let client_wkh_21: bitstring = (if v_870 then catch-fail(hmac(@8_tls_h,client_hts_21,x_286)) else caught-fail) in
                                                {4315}let v_871: bool = not-caught-fail(client_wkh_21) in
                                                {4316}let l_256: label = (if v_871 then tls13_key else caught-fail) in
                                                {4317}let h_254: bitstring = (if v_871 then zero else caught-fail) in
                                                {4318}let x_287: bitstring = (if v_871 then (l_256,h_254) else caught-fail) in
                                                {4319}let server_wkh_21: bitstring = (if v_871 then catch-fail(hmac(@8_tls_h,server_hts_21,x_287)) else caught-fail) in
                                                {4320}let v_872: bool = not-caught-fail(server_wkh_21) in
                                                {4321}let l_257: label = (if v_872 then tls13_finished else caught-fail) in
                                                {4322}let h_255: bitstring = (if v_872 then zero else caught-fail) in
                                                {4323}let x_288: bitstring = (if v_872 then (l_257,h_255) else caught-fail) in
                                                {4324}let client_fk_21: bitstring = (if v_872 then catch-fail(hmac(@8_tls_h,client_hts_21,x_288)) else caught-fail) in
                                                {4325}let v_873: bool = not-caught-fail(client_fk_21) in
                                                {4326}let l_258: label = (if v_873 then tls13_finished else caught-fail) in
                                                {4327}let h_256: bitstring = (if v_873 then zero else caught-fail) in
                                                {4328}let x_289: bitstring = (if v_873 then (l_258,h_256) else caught-fail) in
                                                {4329}let server_fk_21: bitstring = (if v_873 then catch-fail(hmac(@8_tls_h,server_hts_21,x_289)) else caught-fail) in
                                                {4330}let v_874: bool = not-caught-fail(server_fk_21) in
                                                {4331}let (master_secret_50: bitstring,chk_28: aead_key,shk_27: aead_key,cfin_28: mac_key,sfin_27: mac_key) = (if v_865 then (if v_866 then (if v_868 then (if v_870 then (if v_871 then (if v_872 then (if v_873 then (if v_874 then (master_secret_49,client_wkh_21,server_wkh_21,client_fk_21,server_fk_21) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {4332}event Client_chk(id_client_4,chk_28);
                                                {4333}event Client_shk(id_client_4,shk_27);
                                                {4334}event Client_cfin(id_client_4,cfin_28);
                                                {4335}event Client_sfin(id_client_4,sfin_27);
                                                {4336}in(io, enc_ee_msg_20: bitstring);
                                                {4337}let ee_msg_25: msg = aead_dec(@8_tls_a,shk_27,0,zero,enc_ee_msg_20) in
                                                {4338}let EE(ech_ee_20: echExt,extra_ee_20: extraExt) = ee_msg_25 in
                                                {4339}let cur_log2_51: bitstring = (cur_log2_50,ee_msg_25) in
                                                {4340}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_20,sr_34,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_107,safe_psk_29,@8_comp_psk,master_secret_50,chk_28,0,shk_27,1,cfin_28,sfin_27,cur_log2_51)))
                                            )
                                            else
                                                {4341}out(io, illegal_parameter)
                                        )
                                        else
                                            {4342}out(io, illegal_parameter)
                                )
                                else
                                    {4343}out(io, unexpected_message)
                            )
                            else
                                {4496}get pre_shared_keys(c_dom'_9: domain,=s_dom_17,=@8_tls_h,id_54: identityPsk,psk_108: preSharedKey,idP_12: idProc,is_safe_43: bool) in
                                {4344}event Selected_one_time_used_psk(id_client_4,psk_108,is_safe_43);
                                {4345}event Selected_psk(c_dom_7,c_dom'_9,idP_12,is_safe_43);
                                {4346}event Selected_psk_no_missmatch(id_client_4,s_dom_17,@8_tls_h,psk_108,id_54);
                                {4347}event Selected_psk_with_ID(c_dom_7,c_dom'_9,id_54,idP_12,is_safe_43);
                                {4348}let v_875: bitstring = (id_54,psk_108,is_safe_43) in
                                {4349}let v_876: bool = success?(1-proj-3-tuple(v_875)) in
                                {4350}let is_safe_44: bool = (if v_876 then 3-proj-3-tuple(v_875) else caught-fail) in
                                {4351}let psk_109: preSharedKey = (if v_876 then 2-proj-3-tuple(v_875) else caught-fail) in
                                {4352}let id_55: identityPsk = (if v_876 then 1-proj-3-tuple(v_875) else caught-fail) in
                                {4353}let offer_39: params = (if v_876 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_17),ech_ext_16,extra_49,trunc_client_psk_ext(id_55)) else caught-fail) in
                                {4354}let cur_log'_17: bitstring = (if v_876 then (cur_log3_7,CH(cr_27,offer_39)) else caught-fail) in
                                {4355}let s_84: bitstring = (if v_876 then zero else caught-fail) in
                                {4356}let k_74: bitstring = (if v_876 then catch-fail(psk2b(psk_109)) else caught-fail) in
                                {4357}let v_877: bool = not-caught-fail(k_74) in
                                {4358}let early_secret_69: bitstring = (if v_876 then catch-fail((if v_877 then hmac(@8_tls_h,s_84,k_74) else fail-any)) else caught-fail) in
                                {4359}let v_878: bool = not-caught-fail(early_secret_69) in
                                {4360}let l_259: label = (if v_878 then tls13_ext_res_binder else caught-fail) in
                                {4361}let m_90: bitstring = (if v_878 then zero else caught-fail) in
                                {4362}let h_257: bitstring = (if v_878 then catch-fail(hash(@8_tls_h,m_90)) else caught-fail) in
                                {4363}let v_879: bool = not-caught-fail(h_257) in
                                {4364}let x_290: bitstring = (if v_879 then (l_259,h_257) else caught-fail) in
                                {4365}let binder_key_46: bitstring = (if v_878 then catch-fail((if v_879 then hmac(@8_tls_h,early_secret_69,x_290) else fail-any)) else caught-fail) in
                                {4366}let v_880: bool = not-caught-fail(binder_key_46) in
                                {4367}let v_881: bitstring = (if v_876 then catch-fail((if v_878 then (if v_880 then (early_secret_69,binder_key_46) else fail-any) else fail-any)) else caught-fail) in
                                {4368}let v_882: bool = (not-caught-fail(v_881) && success?(1-proj-2-tuple(v_881))) in
                                {4369}let kb_46: mac_key = (if v_882 then 2-proj-2-tuple(v_881) else caught-fail) in
                                {4370}let es_72: bitstring = (if v_882 then 1-proj-2-tuple(v_881) else caught-fail) in
                                {4371}let binders_16: bitstring = (if v_882 then catch-fail(hmac(@8_tls_h,kb_46,cur_log'_17)) else caught-fail) in
                                {4372}let v_883: bool = not-caught-fail(binders_16) in
                                {4373}let v_884: bitstring = catch-fail((if v_876 then (if v_882 then (if v_883 then (client_psk_ext(id_55,binders_16),(psk_109,id_55,es_72,is_safe_44)) else fail-any) else fail-any) else fail-any)) in
                                {4374}let v_885: bool = (not-caught-fail(v_884) && success?(1-proj-2-tuple(v_884))) in
                                {4375}let psk_data_28: bitstring = (if v_885 then 2-proj-2-tuple(v_884) else caught-fail) in
                                {4376}let psk_ext_52: preSharedKeyExt = (if v_885 then 1-proj-2-tuple(v_884) else caught-fail) in
                                {4377}let offer_40: params = (if v_885 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_52) else caught-fail) in
                                {4378}let (client_hello'_19: msg,cr'_21: bytes32,kex_data'_16: bitstring,psk_data'_16: bitstring) = (if v_885 then (CH(cr_27,offer_40),cr_27,kex_data_13,psk_data_28) else fail-any) in
                                {4379}event ClientOffersAead(cr'_21,@8_tls_a);
                                {4380}event ClientOffersHash(cr'_21,@8_tls_h);
                                {4381}event ClientOffersGroup(cr'_21,@8_tls_g);
                                {4382}out(io, client_hello'_19);
                                {4383}let cur_log4_16: bitstring = (cur_log3_7,client_hello'_19) in
                                {4384}in(io, server_hello'_16: msg);
                                {4385}let SH(sr'_16: bytes32,mode'_16: params) = server_hello'_16 in
                                (
                                    {4386}if (sr'_16 = B32(HRR24,HRR8)) then
                                        {4387}out(io, unexpected_message)
                                    else
                                        {4388}let (x_291: bitstring,g_22: group) = kex_data'_16 in
                                        {4389}let (psk_offer_21: preSharedKey,id_offer_21: identityPsk,es_offer_21: bitstring,is_safe_offer_21: bool) = psk_data'_16 in
                                        {4390}event Client_PSKOffer(id_client_4,psk_offer_21,id_offer_21,is_safe_offer_21);
                                        {4391}event Client_Rand_client(id_client_4,cr'_21);
                                        {4392}event Client_DH_client(id_client_4,dh_pub(g_22,x_291));
                                        {4393}event Client_server_domain(id_client_4,s_dom_17);
                                        {4394}let SH(sr_35: bytes32,mode_27: params) = server_hello'_16 in
                                        {4395}event Client_Rand_server(id_client_4,sr_35);
                                        {4396}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_22,gy_22: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_53: preSharedKeyExt) = mode_27 in
                                        (
                                            {4397}let cur_log2_52: bitstring = (cur_log4_16,server_hello'_16) in
                                            {4398}event Client_DH_server(id_client_4,gy_22);
                                            {4399}let v_886: bool = (psk_ext_53 = empty_psk_ext) in
                                            {4400}let psk_110: preSharedKey = (if v_886 then NoPsk else caught-fail) in
                                            {4401}let s_85: bitstring = (if v_886 then zero else caught-fail) in
                                            {4402}let k_75: bitstring = (if v_886 then catch-fail(psk2b(psk_110)) else caught-fail) in
                                            {4403}let v_887: bool = not-caught-fail(k_75) in
                                            {4404}let early_secret_70: bitstring = (if v_886 then catch-fail((if v_887 then hmac(@8_tls_h,s_85,k_75) else fail-any)) else caught-fail) in
                                            {4405}let v_888: bool = not-caught-fail(early_secret_70) in
                                            {4406}let l_260: label = (if v_888 then tls13_ext_res_binder else caught-fail) in
                                            {4407}let m_91: bitstring = (if v_888 then zero else caught-fail) in
                                            {4408}let h_258: bitstring = (if v_888 then catch-fail(hash(@8_tls_h,m_91)) else caught-fail) in
                                            {4409}let v_889: bool = not-caught-fail(h_258) in
                                            {4410}let x_292: bitstring = (if v_889 then (l_260,h_258) else caught-fail) in
                                            {4411}let binder_key_47: bitstring = (if v_888 then catch-fail((if v_889 then hmac(@8_tls_h,early_secret_70,x_292) else fail-any)) else caught-fail) in
                                            {4412}let v_890: bool = not-caught-fail(binder_key_47) in
                                            {4413}let v_891: bitstring = (if v_886 then catch-fail((if v_888 then (if v_890 then (early_secret_70,binder_key_47) else fail-any) else fail-any)) else caught-fail) in
                                            {4414}let v_892: bool = (not-caught-fail(v_891) && success?(1-proj-2-tuple(v_891))) in
                                            {4415}let kb_47: mac_key = (if v_892 then 2-proj-2-tuple(v_891) else caught-fail) in
                                            {4416}let es_73: bitstring = (if v_892 then 1-proj-2-tuple(v_891) else caught-fail) in
                                            {4417}let v_893: bitstring = (if not(v_886) then catch-fail(psk_data'_16) else caught-fail) in
                                            {4418}let v_894: bool = (not-caught-fail(v_893) && success?(1-proj-4-tuple(v_893))) in
                                            {4419}let is_safe_45: bool = (if v_894 then 4-proj-4-tuple(v_893) else caught-fail) in
                                            {4420}let es_74: bitstring = (if v_894 then 3-proj-4-tuple(v_893) else caught-fail) in
                                            {4421}let id_56: identityPsk = (if v_894 then 2-proj-4-tuple(v_893) else caught-fail) in
                                            {4422}let psk_111: preSharedKey = (if v_894 then 1-proj-4-tuple(v_893) else caught-fail) in
                                            {4423}let (psk_112: preSharedKey,early_secret_71: bitstring,valid_21: bool,safe_psk_30: bool) = (if v_886 then (if v_892 then (NoPsk,es_73,true,false) else fail-any) else (if v_894 then (psk_111,es_74,((psk_111 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_53)),is_safe_45) else fail-any)) in
                                            {4424}event Client_PSKChoosen(id_client_4,psk_112,safe_psk_30);
                                            {4425}if valid_21 then
                                            (
                                                {4426}let gxy_44: element = catch-fail(dh_decap_fun(g_22,gy_22,x_291)) in
                                                {4427}let v_895: bool = not-caught-fail(gxy_44) in
                                                {4428}new s_86[]: seed;
                                                {4429}let gxy_45: element = (if v_895 then gxy_44 else dh_f(s_86)) in
                                                {4430}event Client_DH_gxy(id_client_4,gxy_45);
                                                {4431}let l_261: label = tls13_derived in
                                                {4432}let m_92: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4433}let v_896: bool = not-caught-fail(m_92) in
                                                {4434}let h_259: bitstring = (if v_896 then catch-fail(hash(@8_tls_h,m_92)) else caught-fail) in
                                                {4435}let v_897: bool = not-caught-fail(h_259) in
                                                {4436}let x_293: bitstring = (if v_897 then (l_261,h_259) else caught-fail) in
                                                {4437}let extra_52: bitstring = catch-fail((if v_896 then (if v_897 then hmac(@8_tls_h,early_secret_71,x_293) else fail-any) else fail-any)) in
                                                {4438}let v_898: bool = not-caught-fail(extra_52) in
                                                {4439}let handshake_secret_22: bitstring = (if v_898 then hmac(@8_tls_h,extra_52,gxy_45) else fail-any) in
                                                {4440}let l_262: label = tls13_derived in
                                                {4441}let m_93: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4442}let v_899: bool = not-caught-fail(m_93) in
                                                {4443}let h_260: bitstring = (if v_899 then catch-fail(hash(@8_tls_h,m_93)) else caught-fail) in
                                                {4444}let v_900: bool = not-caught-fail(h_260) in
                                                {4445}let x_294: bitstring = (if v_900 then (l_262,h_260) else caught-fail) in
                                                {4446}let extra_53: bitstring = catch-fail((if v_899 then (if v_900 then hmac(@8_tls_h,handshake_secret_22,x_294) else fail-any) else fail-any)) in
                                                {4447}let v_901: bool = not-caught-fail(extra_53) in
                                                {4448}let k_76: bitstring = (if v_901 then zero else caught-fail) in
                                                {4449}let master_secret_51: bitstring = (if v_901 then catch-fail(hmac(@8_tls_h,handshake_secret_22,k_76)) else caught-fail) in
                                                {4450}let v_902: bool = not-caught-fail(master_secret_51) in
                                                {4451}let l_263: label = (if v_902 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {4452}let h_261: bitstring = (if v_902 then catch-fail(hash(@8_tls_h,cur_log2_52)) else caught-fail) in
                                                {4453}let v_903: bool = not-caught-fail(h_261) in
                                                {4454}let x_295: bitstring = (if v_903 then (l_263,h_261) else caught-fail) in
                                                {4455}let client_hts_22: bitstring = (if v_902 then catch-fail((if v_903 then hmac(@8_tls_h,handshake_secret_22,x_295) else fail-any)) else caught-fail) in
                                                {4456}let v_904: bool = not-caught-fail(client_hts_22) in
                                                {4457}let l_264: label = (if v_904 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {4458}let h_262: bitstring = (if v_904 then catch-fail(hash(@8_tls_h,cur_log2_52)) else caught-fail) in
                                                {4459}let v_905: bool = not-caught-fail(h_262) in
                                                {4460}let x_296: bitstring = (if v_905 then (l_264,h_262) else caught-fail) in
                                                {4461}let server_hts_22: bitstring = (if v_904 then catch-fail((if v_905 then hmac(@8_tls_h,handshake_secret_22,x_296) else fail-any)) else caught-fail) in
                                                {4462}let v_906: bool = not-caught-fail(server_hts_22) in
                                                {4463}let l_265: label = (if v_906 then tls13_key else caught-fail) in
                                                {4464}let h_263: bitstring = (if v_906 then zero else caught-fail) in
                                                {4465}let x_297: bitstring = (if v_906 then (l_265,h_263) else caught-fail) in
                                                {4466}let client_wkh_22: bitstring = (if v_906 then catch-fail(hmac(@8_tls_h,client_hts_22,x_297)) else caught-fail) in
                                                {4467}let v_907: bool = not-caught-fail(client_wkh_22) in
                                                {4468}let l_266: label = (if v_907 then tls13_key else caught-fail) in
                                                {4469}let h_264: bitstring = (if v_907 then zero else caught-fail) in
                                                {4470}let x_298: bitstring = (if v_907 then (l_266,h_264) else caught-fail) in
                                                {4471}let server_wkh_22: bitstring = (if v_907 then catch-fail(hmac(@8_tls_h,server_hts_22,x_298)) else caught-fail) in
                                                {4472}let v_908: bool = not-caught-fail(server_wkh_22) in
                                                {4473}let l_267: label = (if v_908 then tls13_finished else caught-fail) in
                                                {4474}let h_265: bitstring = (if v_908 then zero else caught-fail) in
                                                {4475}let x_299: bitstring = (if v_908 then (l_267,h_265) else caught-fail) in
                                                {4476}let client_fk_22: bitstring = (if v_908 then catch-fail(hmac(@8_tls_h,client_hts_22,x_299)) else caught-fail) in
                                                {4477}let v_909: bool = not-caught-fail(client_fk_22) in
                                                {4478}let l_268: label = (if v_909 then tls13_finished else caught-fail) in
                                                {4479}let h_266: bitstring = (if v_909 then zero else caught-fail) in
                                                {4480}let x_300: bitstring = (if v_909 then (l_268,h_266) else caught-fail) in
                                                {4481}let server_fk_22: bitstring = (if v_909 then catch-fail(hmac(@8_tls_h,server_hts_22,x_300)) else caught-fail) in
                                                {4482}let v_910: bool = not-caught-fail(server_fk_22) in
                                                {4483}let (master_secret_52: bitstring,chk_29: aead_key,shk_28: aead_key,cfin_29: mac_key,sfin_28: mac_key) = (if v_901 then (if v_902 then (if v_904 then (if v_906 then (if v_907 then (if v_908 then (if v_909 then (if v_910 then (master_secret_51,client_wkh_22,server_wkh_22,client_fk_22,server_fk_22) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {4484}event Client_chk(id_client_4,chk_29);
                                                {4485}event Client_shk(id_client_4,shk_28);
                                                {4486}event Client_cfin(id_client_4,cfin_29);
                                                {4487}event Client_sfin(id_client_4,sfin_28);
                                                {4488}in(io, enc_ee_msg_21: bitstring);
                                                {4489}let ee_msg_26: msg = aead_dec(@8_tls_a,shk_28,0,zero,enc_ee_msg_21) in
                                                {4490}let EE(ech_ee_21: echExt,extra_ee_21: extraExt) = ee_msg_26 in
                                                {4491}let cur_log2_53: bitstring = (cur_log2_52,ee_msg_26) in
                                                {4492}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_21,sr_35,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_112,safe_psk_30,@8_comp_psk,master_secret_52,chk_29,0,shk_28,1,cfin_29,sfin_28,cur_log2_53)))
                                            )
                                            else
                                                {4493}out(io, illegal_parameter)
                                        )
                                        else
                                            {4494}out(io, illegal_parameter)
                                )
                                else
                                    {4495}out(io, unexpected_message)
                        )
                        else
                            {4497}let psk_113: preSharedKey = NoPsk in
                            {4498}let s_87: bitstring = zero in
                            {4499}let k_77: bitstring = catch-fail(psk2b(psk_113)) in
                            {4500}let v_911: bool = not-caught-fail(k_77) in
                            {4501}let early_secret_72: bitstring = catch-fail((if v_911 then hmac(@8_tls_h,s_87,k_77) else fail-any)) in
                            {4502}let v_912: bool = not-caught-fail(early_secret_72) in
                            {4503}let l_269: label = (if v_912 then tls13_ext_res_binder else caught-fail) in
                            {4504}let m_94: bitstring = (if v_912 then zero else caught-fail) in
                            {4505}let h_267: bitstring = (if v_912 then catch-fail(hash(@8_tls_h,m_94)) else caught-fail) in
                            {4506}let v_913: bool = not-caught-fail(h_267) in
                            {4507}let x_301: bitstring = (if v_913 then (l_269,h_267) else caught-fail) in
                            {4508}let binder_key_48: bitstring = (if v_912 then catch-fail((if v_913 then hmac(@8_tls_h,early_secret_72,x_301) else fail-any)) else caught-fail) in
                            {4509}let v_914: bool = not-caught-fail(binder_key_48) in
                            {4510}let v_915: bitstring = catch-fail((if v_912 then (if v_914 then (early_secret_72,binder_key_48) else fail-any) else fail-any)) in
                            {4511}let v_916: bool = (not-caught-fail(v_915) && success?(1-proj-2-tuple(v_915))) in
                            {4512}let kb_48: mac_key = (if v_916 then 2-proj-2-tuple(v_915) else caught-fail) in
                            {4513}let es_75: bitstring = (if v_916 then 1-proj-2-tuple(v_915) else caught-fail) in
                            {4514}let v_917: bitstring = catch-fail((if v_916 then (empty_psk_ext,(NoPsk,zero,es_75,false)) else fail-any)) in
                            {4515}let v_918: bool = (not-caught-fail(v_917) && success?(1-proj-2-tuple(v_917))) in
                            {4516}let psk_data_29: bitstring = (if v_918 then 2-proj-2-tuple(v_917) else caught-fail) in
                            {4517}let psk_ext_54: preSharedKeyExt = (if v_918 then 1-proj-2-tuple(v_917) else caught-fail) in
                            {4518}let offer_41: params = (if v_918 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_54) else caught-fail) in
                            {4519}let (client_hello'_20: msg,cr'_22: bytes32,kex_data'_17: bitstring,psk_data'_17: bitstring) = (if v_918 then (CH(cr_27,offer_41),cr_27,kex_data_13,psk_data_29) else fail-any) in
                            {4520}event ClientOffersAead(cr'_22,@8_tls_a);
                            {4521}event ClientOffersHash(cr'_22,@8_tls_h);
                            {4522}event ClientOffersGroup(cr'_22,@8_tls_g);
                            {4523}out(io, client_hello'_20);
                            {4524}let cur_log4_17: bitstring = (cur_log3_7,client_hello'_20) in
                            {4525}in(io, server_hello'_17: msg);
                            {4526}let SH(sr'_17: bytes32,mode'_17: params) = server_hello'_17 in
                            (
                                {4527}if (sr'_17 = B32(HRR24,HRR8)) then
                                    {4528}out(io, unexpected_message)
                                else
                                    {4529}let (x_302: bitstring,g_23: group) = kex_data'_17 in
                                    {4530}let (psk_offer_22: preSharedKey,id_offer_22: identityPsk,es_offer_22: bitstring,is_safe_offer_22: bool) = psk_data'_17 in
                                    {4531}event Client_PSKOffer(id_client_4,psk_offer_22,id_offer_22,is_safe_offer_22);
                                    {4532}event Client_Rand_client(id_client_4,cr'_22);
                                    {4533}event Client_DH_client(id_client_4,dh_pub(g_23,x_302));
                                    {4534}event Client_server_domain(id_client_4,s_dom_17);
                                    {4535}let SH(sr_36: bytes32,mode_28: params) = server_hello'_17 in
                                    {4536}event Client_Rand_server(id_client_4,sr_36);
                                    {4537}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_23,gy_23: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_55: preSharedKeyExt) = mode_28 in
                                    (
                                        {4538}let cur_log2_54: bitstring = (cur_log4_17,server_hello'_17) in
                                        {4539}event Client_DH_server(id_client_4,gy_23);
                                        {4540}let v_919: bool = (psk_ext_55 = empty_psk_ext) in
                                        {4541}let psk_114: preSharedKey = (if v_919 then NoPsk else caught-fail) in
                                        {4542}let s_88: bitstring = (if v_919 then zero else caught-fail) in
                                        {4543}let k_78: bitstring = (if v_919 then catch-fail(psk2b(psk_114)) else caught-fail) in
                                        {4544}let v_920: bool = not-caught-fail(k_78) in
                                        {4545}let early_secret_73: bitstring = (if v_919 then catch-fail((if v_920 then hmac(@8_tls_h,s_88,k_78) else fail-any)) else caught-fail) in
                                        {4546}let v_921: bool = not-caught-fail(early_secret_73) in
                                        {4547}let l_270: label = (if v_921 then tls13_ext_res_binder else caught-fail) in
                                        {4548}let m_95: bitstring = (if v_921 then zero else caught-fail) in
                                        {4549}let h_268: bitstring = (if v_921 then catch-fail(hash(@8_tls_h,m_95)) else caught-fail) in
                                        {4550}let v_922: bool = not-caught-fail(h_268) in
                                        {4551}let x_303: bitstring = (if v_922 then (l_270,h_268) else caught-fail) in
                                        {4552}let binder_key_49: bitstring = (if v_921 then catch-fail((if v_922 then hmac(@8_tls_h,early_secret_73,x_303) else fail-any)) else caught-fail) in
                                        {4553}let v_923: bool = not-caught-fail(binder_key_49) in
                                        {4554}let v_924: bitstring = (if v_919 then catch-fail((if v_921 then (if v_923 then (early_secret_73,binder_key_49) else fail-any) else fail-any)) else caught-fail) in
                                        {4555}let v_925: bool = (not-caught-fail(v_924) && success?(1-proj-2-tuple(v_924))) in
                                        {4556}let kb_49: mac_key = (if v_925 then 2-proj-2-tuple(v_924) else caught-fail) in
                                        {4557}let es_76: bitstring = (if v_925 then 1-proj-2-tuple(v_924) else caught-fail) in
                                        {4558}let v_926: bitstring = (if not(v_919) then catch-fail(psk_data'_17) else caught-fail) in
                                        {4559}let v_927: bool = (not-caught-fail(v_926) && success?(1-proj-4-tuple(v_926))) in
                                        {4560}let is_safe_46: bool = (if v_927 then 4-proj-4-tuple(v_926) else caught-fail) in
                                        {4561}let es_77: bitstring = (if v_927 then 3-proj-4-tuple(v_926) else caught-fail) in
                                        {4562}let id_57: identityPsk = (if v_927 then 2-proj-4-tuple(v_926) else caught-fail) in
                                        {4563}let psk_115: preSharedKey = (if v_927 then 1-proj-4-tuple(v_926) else caught-fail) in
                                        {4564}let (psk_116: preSharedKey,early_secret_74: bitstring,valid_22: bool,safe_psk_31: bool) = (if v_919 then (if v_925 then (NoPsk,es_76,true,false) else fail-any) else (if v_927 then (psk_115,es_77,((psk_115 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_55)),is_safe_46) else fail-any)) in
                                        {4565}event Client_PSKChoosen(id_client_4,psk_116,safe_psk_31);
                                        {4566}if valid_22 then
                                        (
                                            {4567}let gxy_46: element = catch-fail(dh_decap_fun(g_23,gy_23,x_302)) in
                                            {4568}let v_928: bool = not-caught-fail(gxy_46) in
                                            {4569}new s_89[]: seed;
                                            {4570}let gxy_47: element = (if v_928 then gxy_46 else dh_f(s_89)) in
                                            {4571}event Client_DH_gxy(id_client_4,gxy_47);
                                            {4572}let l_271: label = tls13_derived in
                                            {4573}let m_96: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                            {4574}let v_929: bool = not-caught-fail(m_96) in
                                            {4575}let h_269: bitstring = (if v_929 then catch-fail(hash(@8_tls_h,m_96)) else caught-fail) in
                                            {4576}let v_930: bool = not-caught-fail(h_269) in
                                            {4577}let x_304: bitstring = (if v_930 then (l_271,h_269) else caught-fail) in
                                            {4578}let extra_54: bitstring = catch-fail((if v_929 then (if v_930 then hmac(@8_tls_h,early_secret_74,x_304) else fail-any) else fail-any)) in
                                            {4579}let v_931: bool = not-caught-fail(extra_54) in
                                            {4580}let handshake_secret_23: bitstring = (if v_931 then hmac(@8_tls_h,extra_54,gxy_47) else fail-any) in
                                            {4581}let l_272: label = tls13_derived in
                                            {4582}let m_97: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                            {4583}let v_932: bool = not-caught-fail(m_97) in
                                            {4584}let h_270: bitstring = (if v_932 then catch-fail(hash(@8_tls_h,m_97)) else caught-fail) in
                                            {4585}let v_933: bool = not-caught-fail(h_270) in
                                            {4586}let x_305: bitstring = (if v_933 then (l_272,h_270) else caught-fail) in
                                            {4587}let extra_55: bitstring = catch-fail((if v_932 then (if v_933 then hmac(@8_tls_h,handshake_secret_23,x_305) else fail-any) else fail-any)) in
                                            {4588}let v_934: bool = not-caught-fail(extra_55) in
                                            {4589}let k_79: bitstring = (if v_934 then zero else caught-fail) in
                                            {4590}let master_secret_53: bitstring = (if v_934 then catch-fail(hmac(@8_tls_h,handshake_secret_23,k_79)) else caught-fail) in
                                            {4591}let v_935: bool = not-caught-fail(master_secret_53) in
                                            {4592}let l_273: label = (if v_935 then tls13_client_handshake_traffic_secret else caught-fail) in
                                            {4593}let h_271: bitstring = (if v_935 then catch-fail(hash(@8_tls_h,cur_log2_54)) else caught-fail) in
                                            {4594}let v_936: bool = not-caught-fail(h_271) in
                                            {4595}let x_306: bitstring = (if v_936 then (l_273,h_271) else caught-fail) in
                                            {4596}let client_hts_23: bitstring = (if v_935 then catch-fail((if v_936 then hmac(@8_tls_h,handshake_secret_23,x_306) else fail-any)) else caught-fail) in
                                            {4597}let v_937: bool = not-caught-fail(client_hts_23) in
                                            {4598}let l_274: label = (if v_937 then tls13_server_handshake_traffic_secret else caught-fail) in
                                            {4599}let h_272: bitstring = (if v_937 then catch-fail(hash(@8_tls_h,cur_log2_54)) else caught-fail) in
                                            {4600}let v_938: bool = not-caught-fail(h_272) in
                                            {4601}let x_307: bitstring = (if v_938 then (l_274,h_272) else caught-fail) in
                                            {4602}let server_hts_23: bitstring = (if v_937 then catch-fail((if v_938 then hmac(@8_tls_h,handshake_secret_23,x_307) else fail-any)) else caught-fail) in
                                            {4603}let v_939: bool = not-caught-fail(server_hts_23) in
                                            {4604}let l_275: label = (if v_939 then tls13_key else caught-fail) in
                                            {4605}let h_273: bitstring = (if v_939 then zero else caught-fail) in
                                            {4606}let x_308: bitstring = (if v_939 then (l_275,h_273) else caught-fail) in
                                            {4607}let client_wkh_23: bitstring = (if v_939 then catch-fail(hmac(@8_tls_h,client_hts_23,x_308)) else caught-fail) in
                                            {4608}let v_940: bool = not-caught-fail(client_wkh_23) in
                                            {4609}let l_276: label = (if v_940 then tls13_key else caught-fail) in
                                            {4610}let h_274: bitstring = (if v_940 then zero else caught-fail) in
                                            {4611}let x_309: bitstring = (if v_940 then (l_276,h_274) else caught-fail) in
                                            {4612}let server_wkh_23: bitstring = (if v_940 then catch-fail(hmac(@8_tls_h,server_hts_23,x_309)) else caught-fail) in
                                            {4613}let v_941: bool = not-caught-fail(server_wkh_23) in
                                            {4614}let l_277: label = (if v_941 then tls13_finished else caught-fail) in
                                            {4615}let h_275: bitstring = (if v_941 then zero else caught-fail) in
                                            {4616}let x_310: bitstring = (if v_941 then (l_277,h_275) else caught-fail) in
                                            {4617}let client_fk_23: bitstring = (if v_941 then catch-fail(hmac(@8_tls_h,client_hts_23,x_310)) else caught-fail) in
                                            {4618}let v_942: bool = not-caught-fail(client_fk_23) in
                                            {4619}let l_278: label = (if v_942 then tls13_finished else caught-fail) in
                                            {4620}let h_276: bitstring = (if v_942 then zero else caught-fail) in
                                            {4621}let x_311: bitstring = (if v_942 then (l_278,h_276) else caught-fail) in
                                            {4622}let server_fk_23: bitstring = (if v_942 then catch-fail(hmac(@8_tls_h,server_hts_23,x_311)) else caught-fail) in
                                            {4623}let v_943: bool = not-caught-fail(server_fk_23) in
                                            {4624}let (master_secret_54: bitstring,chk_30: aead_key,shk_29: aead_key,cfin_30: mac_key,sfin_29: mac_key) = (if v_934 then (if v_935 then (if v_937 then (if v_939 then (if v_940 then (if v_941 then (if v_942 then (if v_943 then (master_secret_53,client_wkh_23,server_wkh_23,client_fk_23,server_fk_23) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                            {4625}event Client_chk(id_client_4,chk_30);
                                            {4626}event Client_shk(id_client_4,shk_29);
                                            {4627}event Client_cfin(id_client_4,cfin_30);
                                            {4628}event Client_sfin(id_client_4,sfin_29);
                                            {4629}in(io, enc_ee_msg_22: bitstring);
                                            {4630}let ee_msg_27: msg = aead_dec(@8_tls_a,shk_29,0,zero,enc_ee_msg_22) in
                                            {4631}let EE(ech_ee_22: echExt,extra_ee_22: extraExt) = ee_msg_27 in
                                            {4632}let cur_log2_55: bitstring = (cur_log2_54,ee_msg_27) in
                                            {4633}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_22,sr_36,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_116,safe_psk_31,@8_comp_psk,master_secret_54,chk_30,0,shk_29,1,cfin_30,sfin_29,cur_log2_55)))
                                        )
                                        else
                                            {4634}out(io, illegal_parameter)
                                    )
                                    else
                                        {4635}out(io, illegal_parameter)
                            )
                            else
                                {4636}out(io, unexpected_message)
                    )
                    else
                        {4637}out(io, illegal_parameter)
                )
                else
                    {4638}if send_kex_4 then
                    (
                        {4639}let (x_312: bitstring,g_24: group) = kex_data_12 in
                        {4640}let (psk_offer_23: preSharedKey,id_offer_23: identityPsk,es_offer_23: bitstring,is_safe_offer_23: bool) = psk_data_26 in
                        {4641}event Client_PSKOffer(id_client_4,psk_offer_23,id_offer_23,is_safe_offer_23);
                        {4642}event Client_Rand_client(id_client_4,cr_26);
                        {4643}event Client_DH_client(id_client_4,dh_pub(g_24,x_312));
                        {4644}event Client_server_domain(id_client_4,s_dom_17);
                        {4645}let SH(sr_37: bytes32,mode_29: params) = server_hello_6 in
                        {4646}event Client_Rand_server(id_client_4,sr_37);
                        {4647}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_24,gy_24: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_56: preSharedKeyExt) = mode_29 in
                        (
                            {4648}let cur_log2_56: bitstring = (cur_log2_49,server_hello_6) in
                            {4649}event Client_DH_server(id_client_4,gy_24);
                            {4650}let v_944: bool = (psk_ext_56 = empty_psk_ext) in
                            {4651}let psk_117: preSharedKey = (if v_944 then NoPsk else caught-fail) in
                            {4652}let s_90: bitstring = (if v_944 then zero else caught-fail) in
                            {4653}let k_80: bitstring = (if v_944 then catch-fail(psk2b(psk_117)) else caught-fail) in
                            {4654}let v_945: bool = not-caught-fail(k_80) in
                            {4655}let early_secret_75: bitstring = (if v_944 then catch-fail((if v_945 then hmac(@8_tls_h,s_90,k_80) else fail-any)) else caught-fail) in
                            {4656}let v_946: bool = not-caught-fail(early_secret_75) in
                            {4657}let l_279: label = (if v_946 then tls13_ext_res_binder else caught-fail) in
                            {4658}let m_98: bitstring = (if v_946 then zero else caught-fail) in
                            {4659}let h_277: bitstring = (if v_946 then catch-fail(hash(@8_tls_h,m_98)) else caught-fail) in
                            {4660}let v_947: bool = not-caught-fail(h_277) in
                            {4661}let x_313: bitstring = (if v_947 then (l_279,h_277) else caught-fail) in
                            {4662}let binder_key_50: bitstring = (if v_946 then catch-fail((if v_947 then hmac(@8_tls_h,early_secret_75,x_313) else fail-any)) else caught-fail) in
                            {4663}let v_948: bool = not-caught-fail(binder_key_50) in
                            {4664}let v_949: bitstring = (if v_944 then catch-fail((if v_946 then (if v_948 then (early_secret_75,binder_key_50) else fail-any) else fail-any)) else caught-fail) in
                            {4665}let v_950: bool = (not-caught-fail(v_949) && success?(1-proj-2-tuple(v_949))) in
                            {4666}let kb_50: mac_key = (if v_950 then 2-proj-2-tuple(v_949) else caught-fail) in
                            {4667}let es_78: bitstring = (if v_950 then 1-proj-2-tuple(v_949) else caught-fail) in
                            {4668}let v_951: bitstring = (if not(v_944) then catch-fail(psk_data_26) else caught-fail) in
                            {4669}let v_952: bool = (not-caught-fail(v_951) && success?(1-proj-4-tuple(v_951))) in
                            {4670}let is_safe_47: bool = (if v_952 then 4-proj-4-tuple(v_951) else caught-fail) in
                            {4671}let es_79: bitstring = (if v_952 then 3-proj-4-tuple(v_951) else caught-fail) in
                            {4672}let id_58: identityPsk = (if v_952 then 2-proj-4-tuple(v_951) else caught-fail) in
                            {4673}let psk_118: preSharedKey = (if v_952 then 1-proj-4-tuple(v_951) else caught-fail) in
                            {4674}let (psk_119: preSharedKey,early_secret_76: bitstring,valid_23: bool,safe_psk_32: bool) = (if v_944 then (if v_950 then (NoPsk,es_78,true,false) else fail-any) else (if v_952 then (psk_118,es_79,((psk_118 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_56)),is_safe_47) else fail-any)) in
                            {4675}event Client_PSKChoosen(id_client_4,psk_119,safe_psk_32);
                            {4676}if valid_23 then
                            (
                                {4677}let gxy_48: element = catch-fail(dh_decap_fun(g_24,gy_24,x_312)) in
                                {4678}let v_953: bool = not-caught-fail(gxy_48) in
                                {4679}new s_91[]: seed;
                                {4680}let gxy_49: element = (if v_953 then gxy_48 else dh_f(s_91)) in
                                {4681}event Client_DH_gxy(id_client_4,gxy_49);
                                {4682}let l_280: label = tls13_derived in
                                {4683}let m_99: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                {4684}let v_954: bool = not-caught-fail(m_99) in
                                {4685}let h_278: bitstring = (if v_954 then catch-fail(hash(@8_tls_h,m_99)) else caught-fail) in
                                {4686}let v_955: bool = not-caught-fail(h_278) in
                                {4687}let x_314: bitstring = (if v_955 then (l_280,h_278) else caught-fail) in
                                {4688}let extra_56: bitstring = catch-fail((if v_954 then (if v_955 then hmac(@8_tls_h,early_secret_76,x_314) else fail-any) else fail-any)) in
                                {4689}let v_956: bool = not-caught-fail(extra_56) in
                                {4690}let handshake_secret_24: bitstring = (if v_956 then hmac(@8_tls_h,extra_56,gxy_49) else fail-any) in
                                {4691}let l_281: label = tls13_derived in
                                {4692}let m_100: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                {4693}let v_957: bool = not-caught-fail(m_100) in
                                {4694}let h_279: bitstring = (if v_957 then catch-fail(hash(@8_tls_h,m_100)) else caught-fail) in
                                {4695}let v_958: bool = not-caught-fail(h_279) in
                                {4696}let x_315: bitstring = (if v_958 then (l_281,h_279) else caught-fail) in
                                {4697}let extra_57: bitstring = catch-fail((if v_957 then (if v_958 then hmac(@8_tls_h,handshake_secret_24,x_315) else fail-any) else fail-any)) in
                                {4698}let v_959: bool = not-caught-fail(extra_57) in
                                {4699}let k_81: bitstring = (if v_959 then zero else caught-fail) in
                                {4700}let master_secret_55: bitstring = (if v_959 then catch-fail(hmac(@8_tls_h,handshake_secret_24,k_81)) else caught-fail) in
                                {4701}let v_960: bool = not-caught-fail(master_secret_55) in
                                {4702}let l_282: label = (if v_960 then tls13_client_handshake_traffic_secret else caught-fail) in
                                {4703}let h_280: bitstring = (if v_960 then catch-fail(hash(@8_tls_h,cur_log2_56)) else caught-fail) in
                                {4704}let v_961: bool = not-caught-fail(h_280) in
                                {4705}let x_316: bitstring = (if v_961 then (l_282,h_280) else caught-fail) in
                                {4706}let client_hts_24: bitstring = (if v_960 then catch-fail((if v_961 then hmac(@8_tls_h,handshake_secret_24,x_316) else fail-any)) else caught-fail) in
                                {4707}let v_962: bool = not-caught-fail(client_hts_24) in
                                {4708}let l_283: label = (if v_962 then tls13_server_handshake_traffic_secret else caught-fail) in
                                {4709}let h_281: bitstring = (if v_962 then catch-fail(hash(@8_tls_h,cur_log2_56)) else caught-fail) in
                                {4710}let v_963: bool = not-caught-fail(h_281) in
                                {4711}let x_317: bitstring = (if v_963 then (l_283,h_281) else caught-fail) in
                                {4712}let server_hts_24: bitstring = (if v_962 then catch-fail((if v_963 then hmac(@8_tls_h,handshake_secret_24,x_317) else fail-any)) else caught-fail) in
                                {4713}let v_964: bool = not-caught-fail(server_hts_24) in
                                {4714}let l_284: label = (if v_964 then tls13_key else caught-fail) in
                                {4715}let h_282: bitstring = (if v_964 then zero else caught-fail) in
                                {4716}let x_318: bitstring = (if v_964 then (l_284,h_282) else caught-fail) in
                                {4717}let client_wkh_24: bitstring = (if v_964 then catch-fail(hmac(@8_tls_h,client_hts_24,x_318)) else caught-fail) in
                                {4718}let v_965: bool = not-caught-fail(client_wkh_24) in
                                {4719}let l_285: label = (if v_965 then tls13_key else caught-fail) in
                                {4720}let h_283: bitstring = (if v_965 then zero else caught-fail) in
                                {4721}let x_319: bitstring = (if v_965 then (l_285,h_283) else caught-fail) in
                                {4722}let server_wkh_24: bitstring = (if v_965 then catch-fail(hmac(@8_tls_h,server_hts_24,x_319)) else caught-fail) in
                                {4723}let v_966: bool = not-caught-fail(server_wkh_24) in
                                {4724}let l_286: label = (if v_966 then tls13_finished else caught-fail) in
                                {4725}let h_284: bitstring = (if v_966 then zero else caught-fail) in
                                {4726}let x_320: bitstring = (if v_966 then (l_286,h_284) else caught-fail) in
                                {4727}let client_fk_24: bitstring = (if v_966 then catch-fail(hmac(@8_tls_h,client_hts_24,x_320)) else caught-fail) in
                                {4728}let v_967: bool = not-caught-fail(client_fk_24) in
                                {4729}let l_287: label = (if v_967 then tls13_finished else caught-fail) in
                                {4730}let h_285: bitstring = (if v_967 then zero else caught-fail) in
                                {4731}let x_321: bitstring = (if v_967 then (l_287,h_285) else caught-fail) in
                                {4732}let server_fk_24: bitstring = (if v_967 then catch-fail(hmac(@8_tls_h,server_hts_24,x_321)) else caught-fail) in
                                {4733}let v_968: bool = not-caught-fail(server_fk_24) in
                                {4734}let (master_secret_56: bitstring,chk_31: aead_key,shk_30: aead_key,cfin_31: mac_key,sfin_30: mac_key) = (if v_959 then (if v_960 then (if v_962 then (if v_964 then (if v_965 then (if v_966 then (if v_967 then (if v_968 then (master_secret_55,client_wkh_24,server_wkh_24,client_fk_24,server_fk_24) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                {4735}event Client_chk(id_client_4,chk_31);
                                {4736}event Client_shk(id_client_4,shk_30);
                                {4737}event Client_cfin(id_client_4,cfin_31);
                                {4738}event Client_sfin(id_client_4,sfin_30);
                                {4739}in(io, enc_ee_msg_23: bitstring);
                                {4740}let ee_msg_28: msg = aead_dec(@8_tls_a,shk_30,0,zero,enc_ee_msg_23) in
                                {4741}let EE(ech_ee_23: echExt,extra_ee_23: extraExt) = ee_msg_28 in
                                {4742}let cur_log2_57: bitstring = (cur_log2_56,ee_msg_28) in
                                {4743}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr_26,sr_37,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_119,safe_psk_32,@8_comp_psk,master_secret_56,chk_31,0,shk_30,1,cfin_31,sfin_30,cur_log2_57)))
                            )
                            else
                                {4744}out(io, illegal_parameter)
                        )
                        else
                            {4745}out(io, illegal_parameter)
                    )
                    else
                        {4746}out(io, illegal_parameter)
            )
            else
                {4747}out(io, unexpected_message)
        )
)

--  Biprocess 1 (that is, biprocess 0, with let moved downwards):
(
    {1}!
    {2}in(io, a: domain);
    {3}new lgt_id: idProc;
    {4}event Same(a);
    {5}new s: seed;
    {6}let sk_h: privkey = uc_privkey(s) in
    {7}let crt: certificate = valid_cert(a,pk(sk_h)) in
    {8}insert long_term_keys(a,sk_h,pk(sk_h),crt,lgt_id);
    {9}out(io, crt)
) | (
    {10}!
    {11}in(io, (c_dom: domain,s_dom: domain));
    {13}new psk_id: idProc;
    {14}event Same(c_dom);
    {15}event Same(s_dom);
    {16}new s_1: seed;
    {17}let psk: preSharedKey = uc_psk(s_1) in
    {12}let h_alg: hash_alg = id_hash(StrongHash,1) in
    {18}let id: identityPsk = mk_idpsk(s_dom,h_alg,psk) in
    {19}insert pre_shared_keys(c_dom,s_dom,h_alg,id,psk,psk_id,true)
) | (
    {20}!
    {21}in(io, s_dom_1: domain);
    {25}event Same(s_dom_1);
    {26}new id_1: configId;
    {27}new s_2[]: seed;
    {24}let ech_g: group = id_g(StrongDH,2) in
    {28}let gx: element = dh_pub(ech_g,dh_k(s_2)) in
    {29}let (skR: bitstring,pkR: element) = (dh_k(s_2),gx) in
    {23}let ech_a: aead_alg = id_aead(StrongAE,2) in
    {22}let ech_h: hash_alg = id_hash(StrongHash,2) in
    {30}let config: echConfig = ech_config(id_1,ech_g,pkR,s_dom_1,ech_h,ech_a) in
    {31}insert ech_configurations(config,skR);
    {32}out(io, config)
) | (
    {33}!
    {34}in(io, a_1: domain);
    {35}new idP: idProc;
    {36}new sk_d: privkey;
    {37}event CompromisedLtkForEquiv(pk(sk_d));
    {38}event Same(a_1);
    {39}let crt_1: certificate = valid_cert(a_1,pk(sk_d)) in
    {40}insert long_term_keys(a_1,sk_d,pk(sk_d),crt_1,idP);
    {41}event CompromisedLtk(pk(sk_d));
    {42}out(io, (sk_d,crt_1))
) | (
    {43}!
    {44}in(io, (c_dom_1: domain,s_dom_2: domain));
    {46}new idP_1: idProc;
    {47}event Same(c_dom_1);
    {48}event Same(s_dom_2);
    {49}new psk_d: preSharedKey;
    {45}let h_alg_1: hash_alg = id_hash(StrongHash,1) in
    {50}let id_2: identityPsk = mk_idpsk(s_dom_2,h_alg_1,psk_d) in
    {51}insert pre_shared_keys(c_dom_1,s_dom_2,h_alg_1,id_2,psk_d,idP_1,false);
    {52}event CompromisedPsk(psk_d);
    {53}out(io, psk_d)
) | (
    {54}!
    {55}in(io, s_dom_3: domain);
    {59}event Same(s_dom_3);
    {60}new id_3: configId;
    {61}new skR_d: bitstring;
    {58}let ech_g_1: group = id_g(StrongDH,2) in
    {62}let pkR_d: element = dh_pub(ech_g_1,skR_d) in
    {57}let ech_a_1: aead_alg = id_aead(StrongAE,2) in
    {56}let ech_h_1: hash_alg = id_hash(StrongHash,2) in
    {63}let config_1: echConfig = ech_config(id_3,ech_g_1,pkR_d,s_dom_3,ech_h_1,ech_a_1) in
    {64}event CompromisedEchKeyForEquiv(config_1);
    {65}insert ech_configurations(config_1,skR_d);
    {66}out(io, config_1);
    {67}event CompromisedEchKey(config_1);
    {68}out(io, skR_d)
) | (
    {69}!
    {70}in(ch_server_CFIN, (id_server: idProc,ArgsServerCFIN(cr: bytes32,sr: bytes32,h_alg_2: hash_alg,a_alg: aead_alg,s_dom_4: domain,s_pkey: pubkey,c_pkey: pubkey,psk_1: preSharedKey,master_secret: bitstring,chk: aead_key,c_seq: nat,cfin: mac_key,cur_log: bitstring)));
    {71}new st[]: stamp;
    {72}event PreciseIdProcess(ch_server_CFIN,id_server,st);
    {73}event Server_Rand_client(id_server,cr);
    {74}event Server_Rand_server(id_server,sr);
    {75}event Server_PSKChoosen(id_server,psk_1);
    {76}event Server_chk(id_server,chk);
    {77}event Server_cfin(id_server,cfin);
    {78}event Server_Cert_server(id_server,s_pkey);
    {79}event Server_Cert_client(id_server,c_pkey);
    {80}new st1[]: stamp;
    {81}event PreciseMess(ch_server_CFIN,id_server,st1,(chk,cfin,master_secret));
    {82}in(io, enc_fin: bitstring);
    {83}let fin_msg: msg = aead_dec(a_alg,chk,c_seq,zero,enc_fin) in
    {84}let FIN(hash_msg: bitstring) = fin_msg in
    {85}if (hash_msg = hmac(h_alg_2,cfin,cur_log)) then
    {87}let h: bitstring = catch-fail(hash(h_alg_2,cur_log)) in
    {88}let v: bool = not-caught-fail(h) in
    {86}let l: label = tls13_client_application_traffic_secret in
    {89}let x: bitstring = (if v then (l,h) else caught-fail) in
    {90}let client_ats: bitstring = catch-fail((if v then hmac(h_alg_2,master_secret,x) else fail-any)) in
    {91}let v_1: bool = not-caught-fail(client_ats) in
    {93}let h_1: bitstring = (if v_1 then catch-fail(hash(h_alg_2,cur_log)) else caught-fail) in
    {94}let v_2: bool = not-caught-fail(h_1) in
    {92}let l_1: label = (if v_1 then tls13_server_application_traffic_secret else caught-fail) in
    {95}let x_1: bitstring = (if v_2 then (l_1,h_1) else caught-fail) in
    {96}let server_ats: bitstring = (if v_1 then catch-fail((if v_2 then hmac(h_alg_2,master_secret,x_1) else fail-any)) else caught-fail) in
    {97}let v_3: bool = not-caught-fail(server_ats) in
    {99}let h_2: bitstring = (if v_3 then catch-fail(hash(h_alg_2,cur_log)) else caught-fail) in
    {100}let v_4: bool = not-caught-fail(h_2) in
    {98}let l_2: label = (if v_3 then tls13_exporter_master_secret else caught-fail) in
    {101}let x_2: bitstring = (if v_4 then (l_2,h_2) else caught-fail) in
    {102}let ems: bitstring = (if v_3 then catch-fail((if v_4 then hmac(h_alg_2,master_secret,x_2) else fail-any)) else caught-fail) in
    {103}let v_5: bool = not-caught-fail(ems) in
    {105}let h_3: bitstring = (if v_5 then zero else caught-fail) in
    {104}let l_3: label = (if v_5 then tls13_key else caught-fail) in
    {106}let x_3: bitstring = (if v_5 then (l_3,h_3) else caught-fail) in
    {107}let client_wkad: bitstring = (if v_5 then catch-fail(hmac(h_alg_2,client_ats,x_3)) else caught-fail) in
    {108}let v_6: bool = not-caught-fail(client_wkad) in
    {110}let h_4: bitstring = (if v_6 then zero else caught-fail) in
    {109}let l_4: label = (if v_6 then tls13_key else caught-fail) in
    {111}let x_4: bitstring = (if v_6 then (l_4,h_4) else caught-fail) in
    {112}let server_wkad: bitstring = (if v_6 then catch-fail(hmac(h_alg_2,server_ats,x_4)) else caught-fail) in
    {113}let v_7: bool = not-caught-fail(server_wkad) in
    {115}let h_5: bitstring = (if v_7 then zero else caught-fail) in
    {114}let l_5: label = (if v_7 then tls13_finished else caught-fail) in
    {116}let x_5: bitstring = (if v_7 then (l_5,h_5) else caught-fail) in
    {117}let client_fkad: bitstring = (if v_7 then catch-fail(hmac(h_alg_2,client_ats,x_5)) else caught-fail) in
    {118}let v_8: bool = not-caught-fail(client_fkad) in
    {119}let (cak: aead_key,sak: aead_key,cfkad: mac_key,ems_1: bitstring) = (if v_1 then (if v_3 then (if v_5 then (if v_6 then (if v_7 then (if v_8 then (client_wkad,server_wkad,client_fkad,ems) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {120}let cur_log_CFIN: bitstring = (cur_log,fin_msg) in
    {122}let h_6: bitstring = catch-fail(hash(h_alg_2,cur_log_CFIN)) in
    {123}let v_9: bool = not-caught-fail(h_6) in
    {121}let l_6: label = tls13_resumption_master_secret in
    {124}let x_6: bitstring = (if v_9 then (l_6,h_6) else caught-fail) in
    {125}let rms: bitstring = (if v_9 then hmac(h_alg_2,master_secret,x_6) else fail-any) in
    {126}event Server_cak(id_server,cak);
    {127}event Server_sak(id_server,sak);
    {128}event Server_cfkad(id_server,cfkad);
    {129}event Server_rms(id_server,rms);
    {130}event ServerFinished(id_server,cr,sr,psk_1,s_pkey,c_pkey,cak,sak,ems_1,rms);
    (
        0
    ) | (
        0
    ) | (
        {131}!
        {132}in(io, (seq_srv: nat,seq_client: nat));
        {133}if (is_nat(seq_srv) && is_nat(seq_client)) then
        {134}new req_rand: bitstring;
        {135}event ServerRequestPH(id_server,cr,sr,psk_1,s_pkey,c_pkey,req_rand);
        {138}new st_1[]: stamp;
        {139}event ServerSequenceServerDataWriteKey(id_server,st_1,seq_srv);
        {136}let crtr_msg: msg = CRTR(req_rand) in
        {140}event ServerSends(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_srv,zero,crtr_msg);
        {137}let enc_crt: bitstring = aead_enc(a_alg,sak,seq_srv,zero,crtr_msg) in
        {141}out(io, enc_crt);
        {143}in(io, enc_cert_msg: bitstring);
        {144}let cert_msg: msg = aead_dec(a_alg,cak,seq_client,zero,enc_cert_msg) in
        {145}new st1_1[]: stamp;
        {146}event ServerSequenceClientDataWriteKey(id_server,st1_1,seq_client);
        {147}event ServerReceives(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_client,zero,cert_msg);
        {148}let CRT(=req_rand,crt_2: certificate) = cert_msg in
        {150}in(io, enc_cert_verif_msg: bitstring);
        {151}let cert_verify_msg: msg = aead_dec(a_alg,cak,seq_client + 1,zero,enc_cert_verif_msg) in
        {152}new st2[]: stamp;
        {153}event ServerSequenceClientDataWriteKey(id_server,st2,seq_client + 1);
        {154}event ServerReceives(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_client + 1,zero,cert_verify_msg);
        {155}let CV(signed_log: bitstring) = cert_verify_msg in
        {142}let cur_log_CRTR: bitstring = (cur_log_CFIN,crtr_msg) in
        {149}let cur_log_CRT: bitstring = (cur_log_CRTR,cert_msg) in
        {156}if (verify(get_pkey(crt_2),hash(h_alg_2,cur_log_CRT),signed_log) && verify_cert(crt_2)) then
        {157}let c_pkey': pubkey = get_pkey(crt_2) in
        {159}in(io, enc_fin_1: bitstring);
        {160}let fin_msg_1: msg = aead_dec(a_alg,cak,seq_client + 2,zero,enc_fin_1) in
        {161}new st3[]: stamp;
        {162}event ServerSequenceClientDataWriteKey(id_server,st3,seq_client + 2);
        {163}event ServerReceives(id_server,cr,sr,psk_1,s_pkey,c_pkey,seq_client + 2,zero,fin_msg_1);
        {164}let FIN(hash_msg_1: bitstring) = fin_msg_1 in
        {158}let cur_log_CV: bitstring = (cur_log_CRT,cert_verify_msg) in
        {165}if (hash_msg_1 = hmac(h_alg_2,cfkad,cur_log_CV)) then
            {166}event ServerFinishedPH(id_server,cr,sr,psk_1,s_pkey,c_pkey,req_rand,c_pkey')
        else
            {167}out(io, handshake_failure)
    )
) | (
    {168}!
    {169}in(ch_server_FIN, (id_server_1: idProc,ArgsServerFIN(cr_1: bytes32,sr_1: bytes32,h_alg_3: hash_alg,a_alg_1: aead_alg,s_dom_5: domain,s_pkey_1: pubkey,req_cert: bool,psk_2: preSharedKey,master_secret_1: bitstring,chk_1: aead_key,c_seq_1: nat,shk: aead_key,s_seq: nat,cfin_1: mac_key,sfin: mac_key,cur_log_1: bitstring)));
    {170}new st_2[]: stamp;
    {171}event PreciseIdProcess(ch_server_FIN,id_server_1,st_2);
    {172}event Server_Rand_client(id_server_1,cr_1);
    {173}event Server_Rand_server(id_server_1,sr_1);
    {174}event Server_PSKChoosen(id_server_1,psk_2);
    {175}event Server_chk(id_server_1,chk_1);
    {176}event Server_shk(id_server_1,shk);
    {177}event Server_cfin(id_server_1,cfin_1);
    {178}event Server_sfin(id_server_1,sfin);
    {179}event Server_Cert_server(id_server_1,s_pkey_1);
    {180}new st1_2[]: stamp;
    {181}event PreciseMess(ch_server_FIN,id_server_1,st1_2,(chk_1,shk,master_secret_1));
    {182}let hash_msg_2: bitstring = hmac(h_alg_3,sfin,cur_log_1) in
    {185}event PreServerFinished(id_server_1,cr_1,sr_1,psk_2,s_pkey_1);
    {183}let finished_msg: msg = FIN(hash_msg_2) in
    {184}let enc_finished: bitstring = aead_enc(a_alg_1,shk,s_seq,zero,finished_msg) in
    {186}out(io, enc_finished);
    {187}let cur_log_FIN: bitstring = (cur_log_1,finished_msg) in
    {188}if (req_cert && (psk_2 = NoPsk)) then
    (
        {189}in(io, enc_cert_msg_1: bitstring);
        {190}let cert_msg_1: msg = aead_dec(a_alg_1,chk_1,c_seq_1,zero,enc_cert_msg_1) in
        {191}let CRT(=zero,crt_3: certificate) = cert_msg_1 in
        {193}in(io, enc_cert_verif_msg_1: bitstring);
        {194}let cert_verify_msg_1: msg = aead_dec(a_alg_1,chk_1,c_seq_1 + 1,zero,enc_cert_verif_msg_1) in
        {195}let CV(signed_log_1: bitstring) = cert_verify_msg_1 in
        {192}let cur_log_CRT_1: bitstring = (cur_log_FIN,cert_msg_1) in
        {196}if (verify(get_pkey(crt_3),hash(h_alg_3,cur_log_CRT_1),signed_log_1) && verify_cert(crt_3)) then
        {197}let c_pkey_1: pubkey = get_pkey(crt_3) in
        {199}event Server_Cert_client(id_server_1,c_pkey_1);
        {198}let cur_log_CV_1: bitstring = (cur_log_CRT_1,cert_verify_msg_1) in
        {200}out(ch_server_CFIN, (id_server_1,ArgsServerCFIN(cr_1,sr_1,h_alg_3,a_alg_1,s_dom_5,s_pkey_1,c_pkey_1,psk_2,master_secret_1,chk_1,c_seq_1 + 2,cfin_1,cur_log_CV_1)))
    )
    else
        {201}event Server_Cert_client(id_server_1,NoPubKey);
        {202}out(ch_server_CFIN, (id_server_1,ArgsServerCFIN(cr_1,sr_1,h_alg_3,a_alg_1,s_dom_5,s_pkey_1,NoPubKey,psk_2,master_secret_1,chk_1,c_seq_1,cfin_1,cur_log_FIN)))
) | (
    {203}!
    {204}in(ch_server_CRT, (id_server_2: idProc,ArgsServerCRT(cr_2: bytes32,sr_2: bytes32,h_alg_4: hash_alg,a_alg_2: aead_alg,s_dom_6: domain,req_cert_1: bool,master_secret_2: bitstring,chk_2: aead_key,c_seq_2: nat,shk_1: aead_key,s_seq_1: nat,cfin_2: mac_key,sfin_1: mac_key,cur_log_2: bitstring)));
    {205}new st_3[]: stamp;
    {206}event PreciseIdProcess(ch_server_CRT,id_server_2,st_3);
    {207}event Server_Rand_client(id_server_2,cr_2);
    {208}event Server_Rand_server(id_server_2,sr_2);
    {209}event Server_PSKChoosen(id_server_2,NoPsk);
    {210}event Server_chk(id_server_2,chk_2);
    {211}event Server_shk(id_server_2,shk_1);
    {212}event Server_cfin(id_server_2,cfin_2);
    {213}event Server_sfin(id_server_2,sfin_1);
    {214}new st1_3[]: stamp;
    {215}event PreciseMess(ch_server_CRT,id_server_2,st1_3,(master_secret_2,chk_2,shk_1));
    {233}get long_term_keys(s_dom': domain,sk: privkey,s_pkey_2: pubkey,crt_4: certificate,idP_2: idProc) in
    {217}new @3_st[]: stamp;
    {216}let @3_x: bitstring = (s_dom',sk,s_pkey_2,crt_4,idP_2) in
    {218}event PreciseInput(@3_st,@3_x);
    {219}let () = () in
    {220}event Selected_ltk(s_dom_6,s_dom',idP_2);
    {221}let (sk_1: privkey,s_pkey_3: pubkey,crt_5: certificate) = (sk,s_pkey_2,crt_4) in
    {222}event Server_Cert_server(id_server_2,s_pkey_3);
    {223}let certificate_msg: msg = CRT(zero,crt_5) in
    {224}let encrypted_certificate_msg: bitstring = aead_enc(a_alg_2,shk_1,s_seq_1,zero,certificate_msg) in
    {225}out(io, encrypted_certificate_msg);
    {226}let cur_log_CRT_2: bitstring = (cur_log_2,certificate_msg) in
    {227}let signed_log_2: bitstring = sign(sk_1,hash(h_alg_4,cur_log_CRT_2)) in
    {228}let certificate_verify_msg: msg = CV(signed_log_2) in
    {229}let encrypted_certificate_verify_msg: bitstring = aead_enc(a_alg_2,shk_1,s_seq_1 + 1,zero,certificate_verify_msg) in
    {230}out(io, encrypted_certificate_verify_msg);
    {231}let cur_log_CV_2: bitstring = (cur_log_CRT_2,certificate_verify_msg) in
    {232}out(ch_server_FIN, (id_server_2,ArgsServerFIN(cr_2,sr_2,h_alg_4,a_alg_2,s_dom_6,s_pkey_3,req_cert_1,NoPsk,master_secret_2,chk_2,c_seq_2,shk_1,s_seq_1 + 2,cfin_2,sfin_1,cur_log_CV_2)))
) | (
    {234}!
    {235}in(ch_server_SH, (id_server_3: idProc,ArgsServerSH(tls_g: group,tls_h: hash_alg,tls_a: aead_alg,s_dom_7: domain,req_cert_2: bool,is_backend: bool,use_psk: bool,no_HRR: bool,ee_msg: msg,client_hello: msg,cur_log_3: bitstring)));
    {236}new st_4[]: stamp;
    {237}event PreciseMess(ch_server_SH,id_server_3,st_4,(use_psk,client_hello));
    {238}let CH(cr_3: bytes32,offer: params) = client_hello in
    {239}event Server_Rand_client(id_server_3,cr_3);
    {240}let nego(=TLS13,=tls_h,=tls_a,client_kex_ext(DHE_kex(=tls_g,gx_1: element)),sni_ext: sniExt,ech_ext: echExt,extra_ext: extraExt,psk_ext: preSharedKeyExt) = offer in
    (
        {241}if (sni_ext = SNI(s_dom_7)) then
        (
            {242}event Server_DH_client(id_server_3,gx_1);
            {243}let v_10: msg = client_hello in
            {244}let v_11: bool = (((TLS13 =nf 1-proj-nego(2-proj-CH(v_10))) && success?(1-proj-nego(2-proj-CH(v_10)))) && success?(1-proj-CH(v_10))) in
            {245}let psk_ext_1: preSharedKeyExt = (if v_11 then 8-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {246}let extra_ext_1: extraExt = (if v_11 then 7-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {247}let ech_ext_1: echExt = (if v_11 then 6-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {248}let sni_ext_1: sniExt = (if v_11 then 5-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {249}let kex_ext: keyShareExt = (if v_11 then 4-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {250}let a_alg_3: aead_alg = (if v_11 then 3-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {251}let h_alg_5: hash_alg = (if v_11 then 2-proj-nego(2-proj-CH(v_10)) else caught-fail) in
            {252}let cr_4: bytes32 = (if v_11 then 1-proj-CH(v_10) else caught-fail) in
            {253}let v_12: bitstring = (if v_11 then catch-fail((use_psk,psk_ext_1)) else caught-fail) in
            {254}let v_13: bool = (not-caught-fail(v_12) && (((true =nf 1-proj-2-tuple(v_12)) && success?(1-proj-client_psk_ext(2-proj-2-tuple(v_12)))) && success?(1-proj-2-tuple(v_12)))) in
            {255}let binders: bitstring = (if v_13 then 2-proj-client_psk_ext(2-proj-2-tuple(v_12)) else caught-fail) in
            {256}let id_4: identityPsk = (if v_13 then 1-proj-client_psk_ext(2-proj-2-tuple(v_12)) else caught-fail) in
            {257}let v_14: bitstring = (if v_13 then catch-fail((get_server_psk(id_4),get_hash_psk(id_4))) else caught-fail) in
            {258}let v_15: bool = (not-caught-fail(v_14) && (((s_dom_7 =nf 1-proj-2-tuple(v_14)) && (h_alg_5 =nf 2-proj-2-tuple(v_14))) && success?(1-proj-2-tuple(v_14)))) in
            {259}let psk_3: preSharedKey = (if v_15 then catch-fail(get_psk(id_4)) else caught-fail) in
            {260}let v_16: bool = not-caught-fail(psk_3) in
            {262}let k: bitstring = (if v_16 then catch-fail(psk2b(psk_3)) else caught-fail) in
            {263}let v_17: bool = not-caught-fail(k) in
            {261}let s_3: bitstring = (if v_16 then zero else caught-fail) in
            {264}let early_secret: bitstring = (if v_16 then catch-fail((if v_17 then hmac(h_alg_5,s_3,k) else fail-any)) else caught-fail) in
            {265}let v_18: bool = not-caught-fail(early_secret) in
            {267}let m: bitstring = (if v_18 then zero else caught-fail) in
            {268}let h_7: bitstring = (if v_18 then catch-fail(hash(h_alg_5,m)) else caught-fail) in
            {269}let v_19: bool = not-caught-fail(h_7) in
            {266}let l_7: label = (if v_18 then tls13_ext_res_binder else caught-fail) in
            {270}let x_7: bitstring = (if v_19 then (l_7,h_7) else caught-fail) in
            {271}let binder_key: bitstring = (if v_18 then catch-fail((if v_19 then hmac(h_alg_5,early_secret,x_7) else fail-any)) else caught-fail) in
            {272}let v_20: bool = not-caught-fail(binder_key) in
            {273}let v_21: bitstring = (if v_16 then catch-fail((if v_18 then (if v_20 then (early_secret,binder_key) else fail-any) else fail-any)) else caught-fail) in
            {274}let v_22: bool = (not-caught-fail(v_21) && success?(1-proj-2-tuple(v_21))) in
            {275}let kb: mac_key = (if v_22 then 2-proj-2-tuple(v_21) else caught-fail) in
            {276}let early_secret_1: bitstring = (if v_22 then 1-proj-2-tuple(v_21) else caught-fail) in
            {279}let v_23: bool = (v_13 && not(v_15)) in
            {280}let psk_4: preSharedKey = (if v_23 then NoPsk else caught-fail) in
            {282}let k_1: bitstring = (if v_23 then catch-fail(psk2b(psk_4)) else caught-fail) in
            {283}let v_24: bool = not-caught-fail(k_1) in
            {281}let s_4: bitstring = (if v_23 then zero else caught-fail) in
            {284}let early_secret_2: bitstring = (if v_23 then catch-fail((if v_24 then hmac(h_alg_5,s_4,k_1) else fail-any)) else caught-fail) in
            {285}let v_25: bool = not-caught-fail(early_secret_2) in
            {287}let m_1: bitstring = (if v_25 then zero else caught-fail) in
            {288}let h_8: bitstring = (if v_25 then catch-fail(hash(h_alg_5,m_1)) else caught-fail) in
            {289}let v_26: bool = not-caught-fail(h_8) in
            {286}let l_8: label = (if v_25 then tls13_ext_res_binder else caught-fail) in
            {290}let x_8: bitstring = (if v_26 then (l_8,h_8) else caught-fail) in
            {291}let binder_key_1: bitstring = (if v_25 then catch-fail((if v_26 then hmac(h_alg_5,early_secret_2,x_8) else fail-any)) else caught-fail) in
            {292}let v_27: bool = not-caught-fail(binder_key_1) in
            {293}let v_28: bitstring = (if v_23 then catch-fail((if v_25 then (if v_27 then (early_secret_2,binder_key_1) else fail-any) else fail-any)) else caught-fail) in
            {294}let v_29: bool = (not-caught-fail(v_28) && success?(1-proj-2-tuple(v_28))) in
            {295}let kb_1: mac_key = (if v_29 then 2-proj-2-tuple(v_28) else caught-fail) in
            {296}let es: bitstring = (if v_29 then 1-proj-2-tuple(v_28) else caught-fail) in
            {297}let v_30: bool = (v_11 && not(v_13)) in
            {298}let psk_5: preSharedKey = (if v_30 then NoPsk else caught-fail) in
            {300}let k_2: bitstring = (if v_30 then catch-fail(psk2b(psk_5)) else caught-fail) in
            {301}let v_31: bool = not-caught-fail(k_2) in
            {299}let s_5: bitstring = (if v_30 then zero else caught-fail) in
            {302}let early_secret_3: bitstring = (if v_30 then catch-fail((if v_31 then hmac(h_alg_5,s_5,k_2) else fail-any)) else caught-fail) in
            {303}let v_32: bool = not-caught-fail(early_secret_3) in
            {305}let m_2: bitstring = (if v_32 then zero else caught-fail) in
            {306}let h_9: bitstring = (if v_32 then catch-fail(hash(h_alg_5,m_2)) else caught-fail) in
            {307}let v_33: bool = not-caught-fail(h_9) in
            {304}let l_9: label = (if v_32 then tls13_ext_res_binder else caught-fail) in
            {308}let x_9: bitstring = (if v_33 then (l_9,h_9) else caught-fail) in
            {309}let binder_key_2: bitstring = (if v_32 then catch-fail((if v_33 then hmac(h_alg_5,early_secret_3,x_9) else fail-any)) else caught-fail) in
            {310}let v_34: bool = not-caught-fail(binder_key_2) in
            {311}let v_35: bitstring = (if v_30 then catch-fail((if v_32 then (if v_34 then (early_secret_3,binder_key_2) else fail-any) else fail-any)) else caught-fail) in
            {312}let v_36: bool = (not-caught-fail(v_35) && success?(1-proj-2-tuple(v_35))) in
            {313}let kb_2: mac_key = (if v_36 then 2-proj-2-tuple(v_35) else caught-fail) in
            {314}let es_1: bitstring = (if v_36 then 1-proj-2-tuple(v_35) else caught-fail) in
            {277}let offer_1: params = (if v_22 then nego(TLS13,h_alg_5,a_alg_3,kex_ext,sni_ext_1,ech_ext_1,extra_ext_1,trunc_client_psk_ext(id_4)) else caught-fail) in
            {278}let cur_log': bitstring = (if v_22 then (cur_log_3,CH(cr_4,offer_1)) else caught-fail) in
            {315}let (early_secret_4: bitstring,s_psk_ext: preSharedKeyExt,psk_6: preSharedKey) = (if v_11 then (if v_13 then (if v_15 then (if v_16 then (if v_22 then (if (binders = hmac(h_alg_5,kb,cur_log')) then (early_secret_1,server_psk_ext(1),psk_3) else fail-any) else fail-any) else fail-any) else (if v_29 then (es,empty_psk_ext,NoPsk) else fail-any)) else (if v_36 then (es_1,empty_psk_ext,NoPsk) else fail-any)) else fail-any) in
            {316}event Server_PSKChoosen(id_server_3,psk_6);
            {317}let cur_log_CH: bitstring = (cur_log_3,client_hello) in
            (
                {318}if (false && (no_HRR && (psk_6 ≠ NoPsk))) then
                {319}!
                {320}in(io, (i: nat,ad: bitstring,enc_early_data: bitstring));
                {322}let h_10: bitstring = catch-fail(hash(tls_h,cur_log_CH)) in
                {323}let v_37: bool = not-caught-fail(h_10) in
                {321}let l_10: label = tls13_client_early_traffic_secret in
                {324}let x_10: bitstring = (if v_37 then (l_10,h_10) else caught-fail) in
                {325}let atsc0: bitstring = catch-fail((if v_37 then hmac(tls_h,early_secret_4,x_10) else fail-any)) in
                {326}let v_38: bool = not-caught-fail(atsc0) in
                {328}let h_11: bitstring = (if v_38 then zero else caught-fail) in
                {327}let l_11: label = (if v_38 then tls13_key else caught-fail) in
                {329}let x_11: bitstring = (if v_38 then (l_11,h_11) else caught-fail) in
                {330}let kc0: bitstring = (if v_38 then catch-fail(hmac(tls_h,atsc0,x_11)) else caught-fail) in
                {331}let v_39: bool = not-caught-fail(kc0) in
                {333}let h_12: bitstring = (if v_39 then catch-fail(hash(tls_h,cur_log_CH)) else caught-fail) in
                {334}let v_40: bool = not-caught-fail(h_12) in
                {332}let l_12: label = (if v_39 then tls13_early_exporter_master_secret else caught-fail) in
                {335}let x_12: bitstring = (if v_40 then (l_12,h_12) else caught-fail) in
                {336}let ems0: bitstring = (if v_39 then catch-fail((if v_40 then hmac(tls_h,early_secret_4,x_12) else fail-any)) else caught-fail) in
                {337}let v_41: bool = not-caught-fail(ems0) in
                {338}let (wkc0: aead_key,ems0_1: bitstring) = (if v_38 then (if v_39 then (if v_41 then (kc0,ems0) else fail-any) else fail-any) else fail-any) in
                {339}let early_data: bitstring = aead_dec(tls_a,wkc0,i,ad,enc_early_data) in
                    {340}new st1_4[]: stamp;
                    {341}event ServerSequenceClient0RTTDataWriteKey(id_server_3,st1_4,i);
                    {342}event ServerReceives0(id_server_3,s_dom_7,cr_3,psk_6,i,ad,early_data)
                else
                    {343}out(io, bad_record_mac)
            ) | (
                {344}new s_6[]: seed;
                {345}let (gxy: element,gy: element) = (dh_xy(s_6,client_hello),dh_encap_fun(tls_g,gx_1,dh_xy(s_6,client_hello))) in
                {346}event Server_DH_server(id_server_3,gy);
                {347}event Server_DH_gxy(id_server_3,gxy);
                {349}let m_3: bitstring = catch-fail(hash(tls_h,zero)) in
                {350}let v_42: bool = not-caught-fail(m_3) in
                {351}let h_13: bitstring = (if v_42 then catch-fail(hash(tls_h,m_3)) else caught-fail) in
                {352}let v_43: bool = not-caught-fail(h_13) in
                {348}let l_13: label = tls13_derived in
                {353}let x_13: bitstring = (if v_43 then (l_13,h_13) else caught-fail) in
                {354}let extra: bitstring = catch-fail((if v_42 then (if v_43 then hmac(tls_h,early_secret_4,x_13) else fail-any) else fail-any)) in
                {355}let v_44: bool = not-caught-fail(extra) in
                {356}let handshake_secret: bitstring = (if v_44 then hmac(tls_h,extra,gxy) else fail-any) in
                {359}new sr24[]: bytes24;
                {374}new rand24[]: bytes24;
                {375}new rand8[]: bytes8;
                {358}let v_45: bool = is_backend in
                {360}let sr24_1: bytes24 = (if v_45 then sr24 else caught-fail) in
                {357}let s_offer: params = nego(TLS13,tls_h,tls_a,server_kex_ext(DHE_kex(tls_g,gy)),empty_sni_ext,empty_ech_ext,empty_extra_ext,s_psk_ext) in
                {361}let sh_modified: msg = (if v_45 then SH(B32(sr24_1,zero8),s_offer) else caught-fail) in
                {362}let cur_log_sh: bitstring = (if v_45 then (cur_log_CH,sh_modified) else caught-fail) in
                {363}let transcript_ech_conf: bitstring = (if v_45 then catch-fail(hash(tls_h,cur_log_sh)) else caught-fail) in
                {364}let v_46: bool = not-caught-fail(transcript_ech_conf) in
                {366}let k_3: bitstring = (if v_46 then catch-fail(b32_2_b(get_random(client_hello))) else caught-fail) in
                {367}let v_47: bool = not-caught-fail(k_3) in
                {365}let s_7: bitstring = (if v_46 then zero else caught-fail) in
                {368}let k_4: bitstring = (if v_46 then catch-fail((if v_47 then hmac(tls_h,s_7,k_3) else fail-any)) else caught-fail) in
                {369}let v_48: bool = not-caught-fail(k_4) in
                {370}let l_14: label = (if v_48 then ech_accept_confirmation else caught-fail) in
                {371}let x_14: bitstring = (if v_48 then (l_14,cur_log_sh) else caught-fail) in
                {372}let sr8: bytes8 = (if v_46 then catch-fail(crop_into_bytes8((if v_48 then hmac(tls_h,k_4,x_14) else fail-any))) else caught-fail) in
                {373}let v_49: bool = not-caught-fail(sr8) in
                {376}let sr_3: bytes32 = (if v_45 then (if v_46 then (if v_49 then B32(sr24_1,sr8) else fail-any) else fail-any) else B32(rand24,rand8)) in
                {378}event Server_Rand_server(id_server_3,sr_3);
                {379}event ServerChoosesGroup(id_server_3,tls_g);
                {380}event ServerChoosesHash(cr_3,sr_3,tls_h);
                {381}event ServerChoosesAead(cr_3,sr_3,tls_a);
                {377}let server_hello: msg = SH(sr_3,s_offer) in
                {382}out(io, server_hello);
                {385}let m_4: bitstring = catch-fail(hash(tls_h,zero)) in
                {386}let v_50: bool = not-caught-fail(m_4) in
                {387}let h_14: bitstring = (if v_50 then catch-fail(hash(tls_h,m_4)) else caught-fail) in
                {388}let v_51: bool = not-caught-fail(h_14) in
                {384}let l_15: label = tls13_derived in
                {389}let x_15: bitstring = (if v_51 then (l_15,h_14) else caught-fail) in
                {390}let extra_1: bitstring = catch-fail((if v_50 then (if v_51 then hmac(tls_h,handshake_secret,x_15) else fail-any) else fail-any)) in
                {391}let v_52: bool = not-caught-fail(extra_1) in
                {392}let k_5: bitstring = (if v_52 then zero else caught-fail) in
                {393}let master_secret_3: bitstring = (if v_52 then catch-fail(hmac(tls_h,handshake_secret,k_5)) else caught-fail) in
                {394}let v_53: bool = not-caught-fail(master_secret_3) in
                {383}let cur_log_SH: bitstring = (cur_log_CH,server_hello) in
                {396}let h_15: bitstring = (if v_53 then catch-fail(hash(tls_h,cur_log_SH)) else caught-fail) in
                {397}let v_54: bool = not-caught-fail(h_15) in
                {395}let l_16: label = (if v_53 then tls13_client_handshake_traffic_secret else caught-fail) in
                {398}let x_16: bitstring = (if v_54 then (l_16,h_15) else caught-fail) in
                {399}let client_hts: bitstring = (if v_53 then catch-fail((if v_54 then hmac(tls_h,handshake_secret,x_16) else fail-any)) else caught-fail) in
                {400}let v_55: bool = not-caught-fail(client_hts) in
                {402}let h_16: bitstring = (if v_55 then catch-fail(hash(tls_h,cur_log_SH)) else caught-fail) in
                {403}let v_56: bool = not-caught-fail(h_16) in
                {401}let l_17: label = (if v_55 then tls13_server_handshake_traffic_secret else caught-fail) in
                {404}let x_17: bitstring = (if v_56 then (l_17,h_16) else caught-fail) in
                {405}let server_hts: bitstring = (if v_55 then catch-fail((if v_56 then hmac(tls_h,handshake_secret,x_17) else fail-any)) else caught-fail) in
                {406}let v_57: bool = not-caught-fail(server_hts) in
                {408}let h_17: bitstring = (if v_57 then zero else caught-fail) in
                {407}let l_18: label = (if v_57 then tls13_key else caught-fail) in
                {409}let x_18: bitstring = (if v_57 then (l_18,h_17) else caught-fail) in
                {410}let client_wkh: bitstring = (if v_57 then catch-fail(hmac(tls_h,client_hts,x_18)) else caught-fail) in
                {411}let v_58: bool = not-caught-fail(client_wkh) in
                {413}let h_18: bitstring = (if v_58 then zero else caught-fail) in
                {412}let l_19: label = (if v_58 then tls13_key else caught-fail) in
                {414}let x_19: bitstring = (if v_58 then (l_19,h_18) else caught-fail) in
                {415}let server_wkh: bitstring = (if v_58 then catch-fail(hmac(tls_h,server_hts,x_19)) else caught-fail) in
                {416}let v_59: bool = not-caught-fail(server_wkh) in
                {418}let h_19: bitstring = (if v_59 then zero else caught-fail) in
                {417}let l_20: label = (if v_59 then tls13_finished else caught-fail) in
                {419}let x_20: bitstring = (if v_59 then (l_20,h_19) else caught-fail) in
                {420}let client_fk: bitstring = (if v_59 then catch-fail(hmac(tls_h,client_hts,x_20)) else caught-fail) in
                {421}let v_60: bool = not-caught-fail(client_fk) in
                {423}let h_20: bitstring = (if v_60 then zero else caught-fail) in
                {422}let l_21: label = (if v_60 then tls13_finished else caught-fail) in
                {424}let x_21: bitstring = (if v_60 then (l_21,h_20) else caught-fail) in
                {425}let server_fk: bitstring = (if v_60 then catch-fail(hmac(tls_h,server_hts,x_21)) else caught-fail) in
                {426}let v_61: bool = not-caught-fail(server_fk) in
                {427}let (master_secret_4: bitstring,chk_3: aead_key,shk_2: aead_key,cfin_3: mac_key,sfin_2: mac_key) = (if v_52 then (if v_53 then (if v_55 then (if v_57 then (if v_58 then (if v_59 then (if v_60 then (if v_61 then (master_secret_3,client_wkh,server_wkh,client_fk,server_fk) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                {428}event Server_chk(id_server_3,chk_3);
                {429}event Server_shk(id_server_3,shk_2);
                {430}event Server_cfin(id_server_3,cfin_3);
                {431}event Server_sfin(id_server_3,sfin_2);
                {432}let enc_ee: bitstring = aead_enc(tls_a,shk_2,0,zero,ee_msg) in
                {433}out(io, enc_ee);
                {434}let cur_log_EE: bitstring = (cur_log_SH,ee_msg) in
                {435}if (psk_6 = NoPsk) then
                (
                    {436}if req_cert_2 then
                    (
                        {437}let crtr_msg_1: msg = CRTR(zero) in
                        {438}let enc_crt_1: bitstring = aead_enc(tls_a,shk_2,1,zero,crtr_msg_1) in
                        {439}out(io, enc_crt_1);
                        {440}let cur_log_CRTR_1: bitstring = (cur_log_EE,crtr_msg_1) in
                        {441}out(ch_server_CRT, (id_server_3,ArgsServerCRT(cr_3,sr_3,tls_h,tls_a,s_dom_7,req_cert_2,master_secret_4,chk_3,0,shk_2,2,cfin_3,sfin_2,cur_log_CRTR_1)))
                    )
                    else
                        {442}out(ch_server_CRT, (id_server_3,ArgsServerCRT(cr_3,sr_3,tls_h,tls_a,s_dom_7,req_cert_2,master_secret_4,chk_3,0,shk_2,1,cfin_3,sfin_2,cur_log_EE)))
                )
                else
                    {443}out(ch_server_FIN, (id_server_3,ArgsServerFIN(cr_3,sr_3,tls_h,tls_a,s_dom_7,NoPubKey,false,psk_6,master_secret_4,chk_3,0,shk_2,1,cfin_3,sfin_2,cur_log_EE)))
            )
        )
        else
            {444}out(io, illegal_parameter)
    )
    else
        {445}out(io, handshake_failure)
) | (
    {446}!
    {447}in(ch_client_CFIN, (id_client: idProc,ArgsClientCFIN(cr_5: bytes32,sr_4: bytes32,h_alg_6: hash_alg,a_alg_4: aead_alg,c_dom_2: domain,s_dom_8: domain,s_pkey_4: pubkey,c_pkey_2: pubkey,psk_7: preSharedKey,safe_psk: bool,comp_psk: bool,master_secret_5: bitstring,chk_4: aead_key,seq_client_1: nat,shk_3: aead_key,seq_srv_1: nat,cfin_4: mac_key,sfin_3: mac_key,cur_log_4: bitstring)));
    {448}new st_5[]: stamp;
    {449}event PreciseIdProcess(ch_client_CFIN,id_client,st_5);
    {450}event Client_server_domain(id_client,s_dom_8);
    {451}event Client_Rand_client(id_client,cr_5);
    {452}event Client_Rand_server(id_client,sr_4);
    {453}event Client_PSKChoosen(id_client,psk_7,safe_psk);
    {454}event Client_comp_psk(id_client,comp_psk);
    {455}event Client_chk(id_client,chk_4);
    {456}event Client_shk(id_client,shk_3);
    {457}event Client_cfin(id_client,cfin_4);
    {458}event Client_sfin(id_client,sfin_3);
    {459}event Client_Cert_server(id_client,s_pkey_4);
    {460}event Client_Cert_client(id_client,c_pkey_2);
    {461}new st1_5[]: stamp;
    {462}let args: bitstring = (c_dom_2,s_dom_8,psk_7,s_pkey_4,master_secret_5,safe_psk,comp_psk,cur_log_4) in
    {463}event PreciseMess(ch_client_CFIN,id_client,st1_5,args);
    {465}let h_21: bitstring = catch-fail(hash(h_alg_6,cur_log_4)) in
    {466}let v_62: bool = not-caught-fail(h_21) in
    {464}let l_22: label = tls13_client_application_traffic_secret in
    {467}let x_22: bitstring = (if v_62 then (l_22,h_21) else caught-fail) in
    {468}let client_ats_1: bitstring = catch-fail((if v_62 then hmac(h_alg_6,master_secret_5,x_22) else fail-any)) in
    {469}let v_63: bool = not-caught-fail(client_ats_1) in
    {471}let h_22: bitstring = (if v_63 then catch-fail(hash(h_alg_6,cur_log_4)) else caught-fail) in
    {472}let v_64: bool = not-caught-fail(h_22) in
    {470}let l_23: label = (if v_63 then tls13_server_application_traffic_secret else caught-fail) in
    {473}let x_23: bitstring = (if v_64 then (l_23,h_22) else caught-fail) in
    {474}let server_ats_1: bitstring = (if v_63 then catch-fail((if v_64 then hmac(h_alg_6,master_secret_5,x_23) else fail-any)) else caught-fail) in
    {475}let v_65: bool = not-caught-fail(server_ats_1) in
    {477}let h_23: bitstring = (if v_65 then catch-fail(hash(h_alg_6,cur_log_4)) else caught-fail) in
    {478}let v_66: bool = not-caught-fail(h_23) in
    {476}let l_24: label = (if v_65 then tls13_exporter_master_secret else caught-fail) in
    {479}let x_24: bitstring = (if v_66 then (l_24,h_23) else caught-fail) in
    {480}let ems_2: bitstring = (if v_65 then catch-fail((if v_66 then hmac(h_alg_6,master_secret_5,x_24) else fail-any)) else caught-fail) in
    {481}let v_67: bool = not-caught-fail(ems_2) in
    {483}let h_24: bitstring = (if v_67 then zero else caught-fail) in
    {482}let l_25: label = (if v_67 then tls13_key else caught-fail) in
    {484}let x_25: bitstring = (if v_67 then (l_25,h_24) else caught-fail) in
    {485}let client_wkad_1: bitstring = (if v_67 then catch-fail(hmac(h_alg_6,client_ats_1,x_25)) else caught-fail) in
    {486}let v_68: bool = not-caught-fail(client_wkad_1) in
    {488}let h_25: bitstring = (if v_68 then zero else caught-fail) in
    {487}let l_26: label = (if v_68 then tls13_key else caught-fail) in
    {489}let x_26: bitstring = (if v_68 then (l_26,h_25) else caught-fail) in
    {490}let server_wkad_1: bitstring = (if v_68 then catch-fail(hmac(h_alg_6,server_ats_1,x_26)) else caught-fail) in
    {491}let v_69: bool = not-caught-fail(server_wkad_1) in
    {493}let h_26: bitstring = (if v_69 then zero else caught-fail) in
    {492}let l_27: label = (if v_69 then tls13_finished else caught-fail) in
    {494}let x_27: bitstring = (if v_69 then (l_27,h_26) else caught-fail) in
    {495}let client_fkad_1: bitstring = (if v_69 then catch-fail(hmac(h_alg_6,client_ats_1,x_27)) else caught-fail) in
    {496}let v_70: bool = not-caught-fail(client_fkad_1) in
    {497}let (cak_1: aead_key,sak_1: aead_key,cfkad_1: mac_key,ems_3: bitstring) = (if v_63 then (if v_65 then (if v_67 then (if v_68 then (if v_69 then (if v_70 then (client_wkad_1,server_wkad_1,client_fkad_1,ems_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
    {498}event Client_cak(id_client,cak_1);
    {499}event Client_sak(id_client,sak_1);
    {500}event Client_cfkad(id_client,cfkad_1);
    {501}let client_hash_msg: bitstring = hmac(h_alg_6,cfin_4,cur_log_4) in
    {502}let client_finished_msg: msg = FIN(client_hash_msg) in
    {503}let cur_log'_1: bitstring = (cur_log_4,client_finished_msg) in
    {505}let h_27: bitstring = catch-fail(hash(h_alg_6,cur_log'_1)) in
    {506}let v_71: bool = not-caught-fail(h_27) in
    {504}let l_28: label = tls13_resumption_master_secret in
    {507}let x_28: bitstring = (if v_71 then (l_28,h_27) else caught-fail) in
    {508}let rms_1: bitstring = (if v_71 then hmac(h_alg_6,master_secret_5,x_28) else fail-any) in
    {509}event Client_rms(id_client,rms_1);
    {511}event ClientFinished(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,cak_1,sak_1,ems_3,rms_1);
    {510}let enc_client_finished_msg: bitstring = aead_enc(a_alg_4,chk_4,seq_client_1,zero,client_finished_msg) in
    {512}out(io, enc_client_finished_msg);
    (
        0
    ) | (
        0
    ) | (
        {513}!
        {514}in(io, (seq_srv_2: nat,seq_client_2: nat));
        {515}if (is_nat(seq_srv_2) && is_nat(seq_client_2)) then
        {516}in(io, enc_msg: bitstring);
        {517}let CRTR(rand_crt: bitstring) = aead_dec(a_alg_4,sak_1,seq_srv_2,zero,enc_msg) in
        {518}new st_6[]: stamp;
        {519}event ClientSequenceServerDataWriteKey(id_client,st_6,seq_srv_2);
        {520}event ClientReceives(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_srv_2,zero,CRTR(rand_crt));
        {550}get long_term_keys(c_dom': domain,sk_2: privkey,c_pkey'_1: pubkey,crt_6: certificate,idP_3: idProc) in
        {523}new @1_st[]: stamp;
        {522}let @1_x: bitstring = (c_dom',sk_2,c_pkey'_1,crt_6,idP_3) in
        {524}event PreciseInput(@1_st,@1_x);
        {525}let () = () in
        {526}event Selected_ltk(c_dom_2,c_dom',idP_3);
        {527}let (sk_3: privkey,c_pkey'_2: pubkey,crt_7: certificate) = (sk_2,c_pkey'_1,crt_6) in
        {530}new st1_6[]: stamp;
        {531}event ClientSequenceClientDataWriteKey(id_client,st1_6,seq_client_2);
        {528}let certificate_msg_1: msg = CRT(rand_crt,crt_7) in
        {532}event ClientSends(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_client_2,zero,certificate_msg_1);
        {529}let encrypted_certificate_msg_1: bitstring = aead_enc(a_alg_4,cak_1,seq_client_2,zero,certificate_msg_1) in
        {533}out(io, encrypted_certificate_msg_1);
        {521}let cur_log_CRTR_2: bitstring = (cur_log'_1,CRTR(rand_crt)) in
        {534}let cur_log_CRT_3: bitstring = (cur_log_CRTR_2,certificate_msg_1) in
        {535}let signed_log_3: bitstring = sign(sk_3,hash(h_alg_6,cur_log_CRT_3)) in
        {538}new st2_1[]: stamp;
        {539}event ClientSequenceClientDataWriteKey(id_client,st2_1,seq_client_2 + 1);
        {536}let certificate_verify_msg_1: msg = CV(signed_log_3) in
        {540}event ClientSends(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_client_2 + 1,zero,certificate_verify_msg_1);
        {537}let enc_verify_msg: bitstring = aead_enc(a_alg_4,cak_1,seq_client_2 + 1,zero,certificate_verify_msg_1) in
        {541}out(io, enc_verify_msg);
        {542}let cur_log_CV_3: bitstring = (cur_log_CRT_3,certificate_verify_msg_1) in
        {543}let hash_msg_3: bitstring = hmac(h_alg_6,cfkad_1,cur_log_CV_3) in
        {545}new st3_1[]: stamp;
        {546}event ClientSequenceClientDataWriteKey(id_client,st3_1,seq_client_2 + 2);
        {547}event ClientSends(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,seq_client_2 + 2,zero,FIN(hash_msg_3));
        {548}event ClientFinishedPH(id_client,cr_5,sr_4,psk_7,s_pkey_4,c_pkey_2,rand_crt,c_pkey'_2);
        {544}let enc_fin_2: bitstring = aead_enc(a_alg_4,cak_1,seq_client_2 + 2,zero,FIN(hash_msg_3)) in
        {549}out(io, enc_fin_2)
    )
) | (
    {551}!
    {552}in(ch_client_FIN, (id_client_1: idProc,ArgsClientFIN(cr_6: bytes32,sr_5: bytes32,h_alg_7: hash_alg,a_alg_5: aead_alg,c_dom_3: domain,s_dom_9: domain,s_pkey_5: pubkey,cert_req: bool,psk_8: preSharedKey,safe_psk_1: bool,comp_psk_1: bool,master_secret_6: bitstring,chk_5: aead_key,seq_client_3: nat,shk_4: aead_key,seq_srv_3: nat,cfin_5: mac_key,sfin_4: mac_key,cur_log_5: bitstring)));
    {553}new st_7[]: stamp;
    {554}event PreciseIdProcess(ch_client_FIN,id_client_1,st_7);
    {555}event Client_server_domain(id_client_1,s_dom_9);
    {556}event Client_Rand_client(id_client_1,cr_6);
    {557}event Client_Rand_server(id_client_1,sr_5);
    {558}event Client_PSKChoosen(id_client_1,psk_8,safe_psk_1);
    {559}event Client_comp_psk(id_client_1,comp_psk_1);
    {560}event Client_chk(id_client_1,chk_5);
    {561}event Client_shk(id_client_1,shk_4);
    {562}event Client_cfin(id_client_1,cfin_5);
    {563}event Client_sfin(id_client_1,sfin_4);
    {564}event Client_Cert_server(id_client_1,s_pkey_5);
    {565}new st1_7[]: stamp;
    {566}event PreciseMess(ch_client_FIN,id_client_1,st1_7,(master_secret_6,s_pkey_5,psk_8,safe_psk_1,comp_psk_1));
    {567}in(io, enc_finished_msg: bitstring);
    {568}let finished_msg_1: msg = aead_dec(a_alg_5,shk_4,seq_srv_3,zero,enc_finished_msg) in
    (
        {569}let FIN(hash_msg_4: bitstring) = finished_msg_1 in
        (
            {570}if (hash_msg_4 = hmac(h_alg_7,sfin_4,cur_log_5)) then
            {571}let cur_log2: bitstring = (cur_log_5,finished_msg_1) in
            {572}if cert_req then
            (
                {591}get long_term_keys(c_dom'_1: domain,sk_4: privkey,c_pkey_3: pubkey,crt_8: certificate,idP_4: idProc) in
                {575}new @2_st[]: stamp;
                {574}let @2_x: bitstring = (c_dom'_1,sk_4,c_pkey_3,crt_8,idP_4) in
                {576}event PreciseInput(@2_st,@2_x);
                {577}let () = () in
                {578}event Selected_ltk(c_dom_3,c_dom'_1,idP_4);
                {579}let (sk_5: privkey,c_pkey_4: pubkey,crt_9: certificate) = (sk_4,c_pkey_3,crt_8) in
                {580}event Client_Cert_client(id_client_1,c_pkey_4);
                {581}let certificate_msg_2: msg = CRT(zero,crt_9) in
                {582}let encrypted_certificate_msg_2: bitstring = aead_enc(a_alg_5,chk_5,seq_client_3,zero,certificate_msg_2) in
                {583}out(io, encrypted_certificate_msg_2);
                {584}let cur_log2_1: bitstring = (cur_log2,certificate_msg_2) in
                {585}let signed_log_4: bitstring = sign(sk_5,hash(h_alg_7,cur_log2_1)) in
                {586}let certificate_verify_msg_2: msg = CV(signed_log_4) in
                {587}let encrypted_certificate_verify_msg_1: bitstring = aead_enc(a_alg_5,chk_5,seq_client_3 + 1,zero,certificate_verify_msg_2) in
                {588}out(io, encrypted_certificate_verify_msg_1);
                {589}let cur_log3: bitstring = (cur_log2_1,certificate_verify_msg_2) in
                {573}let seq_srv_4: nat = seq_srv_3 + 1 in
                {590}out(ch_client_CFIN, (id_client_1,ArgsClientCFIN(cr_6,sr_5,h_alg_7,a_alg_5,c_dom_3,s_dom_9,s_pkey_5,c_pkey_4,NoPsk,false,comp_psk_1,master_secret_6,chk_5,seq_client_3 + 2,shk_4,seq_srv_4,cfin_5,sfin_4,cur_log3)))
            )
            else
                {592}event Client_Cert_client(id_client_1,NoPubKey);
                {593}out(ch_client_CFIN, (id_client_1,ArgsClientCFIN(cr_6,sr_5,h_alg_7,a_alg_5,c_dom_3,s_dom_9,s_pkey_5,NoPubKey,psk_8,safe_psk_1,comp_psk_1,master_secret_6,chk_5,seq_client_3,shk_4,seq_srv_3 + 1,cfin_5,sfin_4,cur_log2)))
        )
        else
            {594}out(io, unexpected_message)
    )
    else
        {595}out(io, bad_record_mac)
) | (
    {596}!
    {597}in(ch_client_CRT, (id_client_2: idProc,ArgsClientCRT(cr_7: bytes32,sr_6: bytes32,h_alg_8: hash_alg,a_alg_6: aead_alg,c_dom_4: domain,s_dom_10: domain,cert_req_1: bool,certificate_msg_3: msg,comp_psk_2: bool,master_secret_7: bitstring,chk_6: aead_key,seq_client_4: nat,shk_5: aead_key,seq_srv_5: nat,cfin_6: mac_key,sfin_5: mac_key,cur_log_6: bitstring)));
    {598}new st_8[]: stamp;
    {599}event PreciseIdProcess(ch_client_CRT,id_client_2,st_8);
    {600}event Client_server_domain(id_client_2,s_dom_10);
    {601}event Client_Rand_client(id_client_2,cr_7);
    {602}event Client_Rand_server(id_client_2,sr_6);
    {603}event Client_comp_psk(id_client_2,comp_psk_2);
    {604}event Client_chk(id_client_2,chk_6);
    {605}event Client_shk(id_client_2,shk_5);
    {606}event Client_cfin(id_client_2,cfin_6);
    {607}event Client_sfin(id_client_2,sfin_5);
    {608}let CRT(=zero,crt_10: certificate) = certificate_msg_3 in
    {610}in(io, enc_crt_verif_msg: bitstring);
    {611}let certificate_verify_msg_3: msg = aead_dec(a_alg_6,shk_5,seq_srv_5,zero,enc_crt_verif_msg) in
    {612}let CV(signed_log_5: bitstring) = certificate_verify_msg_3 in
    {609}let cur_log2_2: bitstring = (cur_log_6,certificate_msg_3) in
    {613}if (verify(get_pkey(crt_10),hash(h_alg_8,cur_log2_2),signed_log_5) && ((get_domain(crt_10) = s_dom_10) && verify_cert(crt_10))) then
    {614}let s_pkey_6: pubkey = get_pkey(crt_10) in
    {616}event Client_Cert_server(id_client_2,s_pkey_6);
    {615}let cur_log3_1: bitstring = (cur_log2_2,certificate_verify_msg_3) in
    {617}out(ch_client_FIN, (id_client_2,ArgsClientFIN(cr_7,sr_6,h_alg_8,a_alg_6,c_dom_4,s_dom_10,s_pkey_6,cert_req_1,NoPsk,false,comp_psk_2,master_secret_7,chk_6,seq_client_4,shk_5,seq_srv_5 + 1,cfin_6,sfin_5,cur_log3_1)))
) | (
    {618}!
    {619}in(ch_client_after_EE, (id_client_3: idProc,ArgsClientAfterEE(cr_8: bytes32,sr_7: bytes32,h_alg_9: hash_alg,a_alg_7: aead_alg,c_dom_5: domain,s_dom_11: domain,psk_9: preSharedKey,safe_psk_2: bool,comp_psk_3: bool,master_secret_8: bitstring,chk_7: aead_key,seq_client_5: nat,shk_6: aead_key,seq_srv_6: nat,cfin_7: mac_key,sfin_6: mac_key,cur_log_7: bitstring)));
    {620}new st_9[]: stamp;
    {621}event PreciseIdProcess(ch_client_after_EE,id_client_3,st_9);
    {622}event Client_server_domain(id_client_3,s_dom_11);
    {623}event Client_Rand_client(id_client_3,cr_8);
    {624}event Client_Rand_server(id_client_3,sr_7);
    {625}event Client_PSKChoosen(id_client_3,psk_9,safe_psk_2);
    {626}event Client_comp_psk(id_client_3,comp_psk_3);
    {627}event Client_chk(id_client_3,chk_7);
    {628}event Client_shk(id_client_3,shk_6);
    {629}event Client_cfin(id_client_3,cfin_7);
    {630}event Client_sfin(id_client_3,sfin_6);
    {631}new st1_8[]: stamp;
    {632}event PreciseMess(ch_client_after_EE,id_client_3,st1_8,master_secret_8);
    {633}if (psk_9 = NoPsk) then
    (
        {634}in(io, enc_msg_1: bitstring);
        {635}let msg': msg = aead_dec(a_alg_7,shk_6,seq_srv_6,zero,enc_msg_1) in
        {636}let CRTR(=zero) = msg' in
        (
            {638}in(io, enc_crt_msg: bitstring);
            {639}let certificate_msg_4: msg = aead_dec(a_alg_7,shk_6,seq_srv_6 + 1,zero,enc_crt_msg) in
            {637}let cur_log2_3: bitstring = (cur_log_7,msg') in
            {640}out(ch_client_CRT, (id_client_3,ArgsClientCRT(cr_8,sr_7,h_alg_9,a_alg_7,c_dom_5,s_dom_11,true,certificate_msg_4,comp_psk_3,master_secret_8,chk_7,seq_client_5,shk_6,seq_srv_6 + 2,cfin_7,sfin_6,cur_log2_3)))
        )
        else
            {641}let CRT(=zero,crt_11: certificate) = msg' in
                {642}out(ch_client_CRT, (id_client_3,ArgsClientCRT(cr_8,sr_7,h_alg_9,a_alg_7,c_dom_5,s_dom_11,false,msg',comp_psk_3,master_secret_8,chk_7,seq_client_5,shk_6,seq_srv_6 + 1,cfin_7,sfin_6,cur_log_7)))
            else
                {643}out(io, unexpected_message)
    )
    else
        {644}event Client_Cert_server(id_client_3,NoPubKey);
        {645}out(ch_client_FIN, (id_client_3,ArgsClientFIN(cr_8,sr_7,h_alg_9,a_alg_7,c_dom_5,s_dom_11,NoPubKey,false,psk_9,safe_psk_2,comp_psk_3,master_secret_8,chk_7,seq_client_5,shk_6,seq_srv_6,cfin_7,sfin_6,cur_log_7)))
) | (
    {646}!
    {652}get long_term_keys(dom1: domain,sk1: privkey,pk1: pubkey,cert1: certificate,idP1: idProc) in
    {647}event Same(idP1);
    {651}get long_term_keys(dom2: domain,sk2: privkey,pk2: pubkey,cert2: certificate,idP2: idProc) in
    {648}event Same(idP2);
    {649}insert long_term_keys(choice[dom1,dom2],choice[sk1,sk2],choice[pk1,pk2],choice[cert1,cert2],choice[idP1,idP2]);
    {650}insert long_term_keys(choice[dom2,dom1],choice[sk2,sk1],choice[pk2,pk1],choice[cert2,cert1],choice[idP2,idP1])
) | (
    {653}!
    {659}get pre_shared_keys(c_dom1: domain,s_dom_12: domain,h_alg_10: hash_alg,id1: identityPsk,psk1: preSharedKey,idP1_1: idProc,safe1: bool) in
    {654}event Same(idP1_1);
    {658}get pre_shared_keys(c_dom2: domain,=s_dom_12,=h_alg_10,id2: identityPsk,psk2: preSharedKey,idP2_1: idProc,safe2: bool) in
    {655}event Same(idP2_1);
    {656}insert pre_shared_keys(choice[c_dom1,c_dom2],s_dom_12,h_alg_10,choice[id1,id2],choice[psk1,psk2],choice[idP1_1,idP2_1],choice[safe1,safe2]);
    {657}insert pre_shared_keys(choice[c_dom2,c_dom1],s_dom_12,h_alg_10,choice[id2,id1],choice[psk2,psk1],choice[idP2_1,idP1_1],choice[safe2,safe1])
) | (
    {660}!
    {661}new id_tls_client: idProc;
    {662}in(io, s_dom_13: domain);
    {663}event Same(s_dom_13);
    {664}in(io, c_dom_6: domain);
    {665}event Same(c_dom_6);
    {670}in(io, @7_use_psk: bool);
    {671}event Same(@7_use_psk);
    {672}let () = () in
    {673}in(io, @7_send_kex: bool);
    {674}event Same(@7_send_kex);
    {675}let () = () in
    {680}new rand24_1[]: bytes24;
    {681}new rand8_1[]: bytes8;
    {683}new s_8[]: seed;
    {669}let @7_tls_g: group = id_g(StrongDH,1) in
    {684}let gx_2: element = dh_pub(@7_tls_g,dh_k(s_8)) in
    {685}let v_72: bitstring = (dh_k(s_8),gx_2) in
    {686}let v_73: bool = success?(1-proj-2-tuple(v_72)) in
    {687}let gx_3: element = (if v_73 then 2-proj-2-tuple(v_72) else caught-fail) in
    {688}let x_29: bitstring = (if v_73 then 1-proj-2-tuple(v_72) else caught-fail) in
    {677}let send_kex: bool = (not(true) || @7_send_kex) in
    {689}let kex: kex_alg = (if v_73 then (if send_kex then DHE_kex(@7_tls_g,gx_3) else DHE_group(@7_tls_g)) else caught-fail) in
    {690}let (kex_ext_1: keyShareExt,kex_data: bitstring) = (if v_73 then (client_kex_ext(kex),(x_29,@7_tls_g)) else fail-any) in
    {682}let cr_9: bytes32 = B32(rand24_1,rand8_1) in
    {678}let cur_log_8: bitstring = zero in
    {676}let @7_comp_psk: bool = false in
    {668}let @7_tls_a: aead_alg = id_aead(StrongAE,1) in
    {667}let @7_tls_h: hash_alg = id_hash(StrongHash,1) in
    {666}let @7_id_client: idProc = id_tls_client in
    {693}if @7_use_psk then
    (
        {692}let extra_2: extraExt = empty_extra_ext in
        {691}let ech_ext_2: echExt = empty_ech_ext in
        {679}let old_psk_data: bitstring = zero in
        {694}let (psk_10: preSharedKey,id_5: identityPsk,old_es: bitstring,is_safe: bool) = old_psk_data in
        (
            {698}let k_6: bitstring = catch-fail(psk2b(psk_10)) in
            {699}let v_74: bool = not-caught-fail(k_6) in
            {697}let s_9: bitstring = zero in
            {700}let early_secret_5: bitstring = catch-fail((if v_74 then hmac(@7_tls_h,s_9,k_6) else fail-any)) in
            {701}let v_75: bool = not-caught-fail(early_secret_5) in
            {703}let m_5: bitstring = (if v_75 then zero else caught-fail) in
            {704}let h_28: bitstring = (if v_75 then catch-fail(hash(@7_tls_h,m_5)) else caught-fail) in
            {705}let v_76: bool = not-caught-fail(h_28) in
            {702}let l_29: label = (if v_75 then tls13_ext_res_binder else caught-fail) in
            {706}let x_30: bitstring = (if v_76 then (l_29,h_28) else caught-fail) in
            {707}let binder_key_3: bitstring = (if v_75 then catch-fail((if v_76 then hmac(@7_tls_h,early_secret_5,x_30) else fail-any)) else caught-fail) in
            {708}let v_77: bool = not-caught-fail(binder_key_3) in
            {709}let v_78: bitstring = catch-fail((if v_75 then (if v_77 then (early_secret_5,binder_key_3) else fail-any) else fail-any)) in
            {710}let v_79: bool = (not-caught-fail(v_78) && success?(1-proj-2-tuple(v_78))) in
            {711}let kb_3: mac_key = (if v_79 then 2-proj-2-tuple(v_78) else caught-fail) in
            {712}let es_2: bitstring = (if v_79 then 1-proj-2-tuple(v_78) else caught-fail) in
            {695}let offer_2: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_13),ech_ext_2,extra_2,trunc_client_psk_ext(id_5)) in
            {696}let cur_log'_2: bitstring = (cur_log_8,CH(cr_9,offer_2)) in
            {713}let binders_1: bitstring = (if v_79 then catch-fail(hmac(@7_tls_h,kb_3,cur_log'_2)) else caught-fail) in
            {714}let v_80: bool = not-caught-fail(binders_1) in
            {715}let v_81: bitstring = catch-fail((if v_79 then (if v_80 then (client_psk_ext(id_5,binders_1),(psk_10,id_5,es_2,is_safe)) else fail-any) else fail-any)) in
            {716}let v_82: bool = (not-caught-fail(v_81) && success?(1-proj-2-tuple(v_81))) in
            {717}let psk_data: bitstring = (if v_82 then 2-proj-2-tuple(v_81) else caught-fail) in
            {718}let psk_ext_2: preSharedKeyExt = (if v_82 then 1-proj-2-tuple(v_81) else caught-fail) in
            {719}let offer_3: params = (if v_82 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_2) else caught-fail) in
            {720}let (client_hello_1: msg,cr_10: bytes32,kex_data_1: bitstring,psk_data_1: bitstring) = (if v_82 then (CH(cr_9,offer_3),cr_9,kex_data,psk_data) else fail-any) in
            {721}event ClientOffersAead(cr_10,@7_tls_a);
            {722}event ClientOffersHash(cr_10,@7_tls_h);
            {723}event ClientOffersGroup(cr_10,@7_tls_g);
            {724}out(io, client_hello_1);
            {726}let (psk_11: preSharedKey,id_6: identityPsk,es_3: bitstring,safe_psk_3: bool) = psk_data_1 in
            (
                {727}if (false && (psk_11 ≠ NoPsk)) then
                {728}let client_hello_2: bitstring = (zero,client_hello_1) in
                {730}let h_29: bitstring = catch-fail(hash(@7_tls_h,client_hello_2)) in
                {731}let v_83: bool = not-caught-fail(h_29) in
                {729}let l_30: label = tls13_client_early_traffic_secret in
                {732}let x_31: bitstring = (if v_83 then (l_30,h_29) else caught-fail) in
                {733}let atsc0_1: bitstring = catch-fail((if v_83 then hmac(@7_tls_h,es_3,x_31) else fail-any)) in
                {734}let v_84: bool = not-caught-fail(atsc0_1) in
                {736}let h_30: bitstring = (if v_84 then zero else caught-fail) in
                {735}let l_31: label = (if v_84 then tls13_key else caught-fail) in
                {737}let x_32: bitstring = (if v_84 then (l_31,h_30) else caught-fail) in
                {738}let kc0_1: bitstring = (if v_84 then catch-fail(hmac(@7_tls_h,atsc0_1,x_32)) else caught-fail) in
                {739}let v_85: bool = not-caught-fail(kc0_1) in
                {741}let h_31: bitstring = (if v_85 then catch-fail(hash(@7_tls_h,client_hello_2)) else caught-fail) in
                {742}let v_86: bool = not-caught-fail(h_31) in
                {740}let l_32: label = (if v_85 then tls13_early_exporter_master_secret else caught-fail) in
                {743}let x_33: bitstring = (if v_86 then (l_32,h_31) else caught-fail) in
                {744}let ems0_2: bitstring = (if v_85 then catch-fail((if v_86 then hmac(@7_tls_h,es_3,x_33) else fail-any)) else caught-fail) in
                {745}let v_87: bool = not-caught-fail(ems0_2) in
                {746}let (wkc0_1: aead_key,ems0_3: bitstring) = (if v_84 then (if v_85 then (if v_87 then (kc0_1,ems0_2) else fail-any) else fail-any) else fail-any) in
                {747}!
                {748}in(io, (i_1: nat,ad_1: bitstring));
                {749}if is_nat(i_1) then
                {750}new msg_ed[]: bitstring;
                {752}new st_10: stamp;
                {753}event ClientSequenceClient0RTTDataWriteKey(@7_id_client,st_10,i_1);
                {754}event ClientSends0(@7_id_client,cr_10,psk_11,i_1,ad_1,msg_ed);
                {751}let enc_ed: bitstring = aead_enc(@7_tls_a,wkc0_1,i_1,ad_1,msg_ed) in
                {755}out(io, enc_ed)
            ) | (
                {756}in(io, server_hello_1: msg);
                {757}let SH(sr_8: bytes32,mode: params) = server_hello_1 in
                (
                    {758}event ClientEchAcceptance(@7_id_client,false);
                    {725}let cur_log2_4: bitstring = (cur_log_8,client_hello_1) in
                    {759}if (true && (sr_8 = B32(HRR24,HRR8))) then
                    (
                        {760}if ((mode = nego(TLS13,@7_tls_h,@7_tls_a,hrr_kex_ext(@7_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex ≠ true)) then
                        (
                            {763}new rand24_2[]: bytes24;
                            {764}new rand8_2[]: bytes8;
                            {766}new s_10[]: seed;
                            {767}let gx_4: element = dh_pub(@7_tls_g,dh_k(s_10)) in
                            {768}let v_88: bitstring = (dh_k(s_10),gx_4) in
                            {769}let v_89: bool = success?(1-proj-2-tuple(v_88)) in
                            {770}let gx_5: element = (if v_89 then 2-proj-2-tuple(v_88) else caught-fail) in
                            {771}let x_34: bitstring = (if v_89 then 1-proj-2-tuple(v_88) else caught-fail) in
                            {762}let send_kex_1: bool = true in
                            {772}let kex_1: kex_alg = (if v_89 then (if send_kex_1 then DHE_kex(@7_tls_g,gx_5) else DHE_group(@7_tls_g)) else caught-fail) in
                            {773}let (kex_ext_2: keyShareExt,kex_data_2: bitstring) = (if v_89 then (client_kex_ext(kex_1),(x_34,@7_tls_g)) else fail-any) in
                            {765}let cr_11: bytes32 = B32(rand24_2,rand8_2) in
                            {761}let cur_log3_2: bitstring = (cur_log2_4,server_hello_1) in
                            {776}if @7_use_psk then
                            (
                                {775}let extra_3: extraExt = empty_extra_ext in
                                {774}let ech_ext_3: echExt = empty_ech_ext in
                                {777}let (psk_12: preSharedKey,id_7: identityPsk,old_es_1: bitstring,is_safe_1: bool) = psk_data_1 in
                                (
                                    {781}let k_7: bitstring = catch-fail(psk2b(psk_12)) in
                                    {782}let v_90: bool = not-caught-fail(k_7) in
                                    {780}let s_11: bitstring = zero in
                                    {783}let early_secret_6: bitstring = catch-fail((if v_90 then hmac(@7_tls_h,s_11,k_7) else fail-any)) in
                                    {784}let v_91: bool = not-caught-fail(early_secret_6) in
                                    {786}let m_6: bitstring = (if v_91 then zero else caught-fail) in
                                    {787}let h_32: bitstring = (if v_91 then catch-fail(hash(@7_tls_h,m_6)) else caught-fail) in
                                    {788}let v_92: bool = not-caught-fail(h_32) in
                                    {785}let l_33: label = (if v_91 then tls13_ext_res_binder else caught-fail) in
                                    {789}let x_35: bitstring = (if v_92 then (l_33,h_32) else caught-fail) in
                                    {790}let binder_key_4: bitstring = (if v_91 then catch-fail((if v_92 then hmac(@7_tls_h,early_secret_6,x_35) else fail-any)) else caught-fail) in
                                    {791}let v_93: bool = not-caught-fail(binder_key_4) in
                                    {792}let v_94: bitstring = catch-fail((if v_91 then (if v_93 then (early_secret_6,binder_key_4) else fail-any) else fail-any)) in
                                    {793}let v_95: bool = (not-caught-fail(v_94) && success?(1-proj-2-tuple(v_94))) in
                                    {794}let kb_4: mac_key = (if v_95 then 2-proj-2-tuple(v_94) else caught-fail) in
                                    {795}let es_4: bitstring = (if v_95 then 1-proj-2-tuple(v_94) else caught-fail) in
                                    {778}let offer_4: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_13),ech_ext_3,extra_3,trunc_client_psk_ext(id_7)) in
                                    {779}let cur_log'_3: bitstring = (cur_log3_2,CH(cr_11,offer_4)) in
                                    {796}let binders_2: bitstring = (if v_95 then catch-fail(hmac(@7_tls_h,kb_4,cur_log'_3)) else caught-fail) in
                                    {797}let v_96: bool = not-caught-fail(binders_2) in
                                    {798}let v_97: bitstring = catch-fail((if v_95 then (if v_96 then (client_psk_ext(id_7,binders_2),(psk_12,id_7,es_4,is_safe_1)) else fail-any) else fail-any)) in
                                    {799}let v_98: bool = (not-caught-fail(v_97) && success?(1-proj-2-tuple(v_97))) in
                                    {800}let psk_data_2: bitstring = (if v_98 then 2-proj-2-tuple(v_97) else caught-fail) in
                                    {801}let psk_ext_3: preSharedKeyExt = (if v_98 then 1-proj-2-tuple(v_97) else caught-fail) in
                                    {802}let offer_5: params = (if v_98 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_3) else caught-fail) in
                                    {803}let (client_hello': msg,cr': bytes32,kex_data': bitstring,psk_data': bitstring) = (if v_98 then (CH(cr_11,offer_5),cr_11,kex_data_2,psk_data_2) else fail-any) in
                                    {804}event ClientOffersAead(cr',@7_tls_a);
                                    {805}event ClientOffersHash(cr',@7_tls_h);
                                    {806}event ClientOffersGroup(cr',@7_tls_g);
                                    {807}out(io, client_hello');
                                    {809}in(io, server_hello': msg);
                                    {810}let SH(sr': bytes32,mode': params) = server_hello' in
                                    (
                                        {811}if (sr' = B32(HRR24,HRR8)) then
                                            {812}out(io, unexpected_message)
                                        else
                                            {813}let (x_36: bitstring,g: group) = kex_data' in
                                            {814}let (psk_offer: preSharedKey,id_offer: identityPsk,es_offer: bitstring,is_safe_offer: bool) = psk_data' in
                                            {815}event Client_PSKOffer(@7_id_client,psk_offer,id_offer,is_safe_offer);
                                            {816}event Client_Rand_client(@7_id_client,cr');
                                            {817}event Client_DH_client(@7_id_client,dh_pub(g,x_36));
                                            {818}event Client_server_domain(@7_id_client,s_dom_13);
                                            {819}let SH(sr_9: bytes32,mode_1: params) = server_hello' in
                                            {820}event Client_Rand_server(@7_id_client,sr_9);
                                            {821}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g,gy_1: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_4: preSharedKeyExt) = mode_1 in
                                            (
                                                {823}event Client_DH_server(@7_id_client,gy_1);
                                                {824}let v_99: bool = (psk_ext_4 = empty_psk_ext) in
                                                {825}let psk_13: preSharedKey = (if v_99 then NoPsk else caught-fail) in
                                                {827}let k_8: bitstring = (if v_99 then catch-fail(psk2b(psk_13)) else caught-fail) in
                                                {828}let v_100: bool = not-caught-fail(k_8) in
                                                {826}let s_12: bitstring = (if v_99 then zero else caught-fail) in
                                                {829}let early_secret_7: bitstring = (if v_99 then catch-fail((if v_100 then hmac(@7_tls_h,s_12,k_8) else fail-any)) else caught-fail) in
                                                {830}let v_101: bool = not-caught-fail(early_secret_7) in
                                                {832}let m_7: bitstring = (if v_101 then zero else caught-fail) in
                                                {833}let h_33: bitstring = (if v_101 then catch-fail(hash(@7_tls_h,m_7)) else caught-fail) in
                                                {834}let v_102: bool = not-caught-fail(h_33) in
                                                {831}let l_34: label = (if v_101 then tls13_ext_res_binder else caught-fail) in
                                                {835}let x_37: bitstring = (if v_102 then (l_34,h_33) else caught-fail) in
                                                {836}let binder_key_5: bitstring = (if v_101 then catch-fail((if v_102 then hmac(@7_tls_h,early_secret_7,x_37) else fail-any)) else caught-fail) in
                                                {837}let v_103: bool = not-caught-fail(binder_key_5) in
                                                {838}let v_104: bitstring = (if v_99 then catch-fail((if v_101 then (if v_103 then (early_secret_7,binder_key_5) else fail-any) else fail-any)) else caught-fail) in
                                                {839}let v_105: bool = (not-caught-fail(v_104) && success?(1-proj-2-tuple(v_104))) in
                                                {840}let kb_5: mac_key = (if v_105 then 2-proj-2-tuple(v_104) else caught-fail) in
                                                {841}let es_5: bitstring = (if v_105 then 1-proj-2-tuple(v_104) else caught-fail) in
                                                {842}let v_106: bitstring = (if not(v_99) then catch-fail(psk_data') else caught-fail) in
                                                {843}let v_107: bool = (not-caught-fail(v_106) && success?(1-proj-4-tuple(v_106))) in
                                                {844}let is_safe_2: bool = (if v_107 then 4-proj-4-tuple(v_106) else caught-fail) in
                                                {845}let es_6: bitstring = (if v_107 then 3-proj-4-tuple(v_106) else caught-fail) in
                                                {846}let id_8: identityPsk = (if v_107 then 2-proj-4-tuple(v_106) else caught-fail) in
                                                {847}let psk_14: preSharedKey = (if v_107 then 1-proj-4-tuple(v_106) else caught-fail) in
                                                {848}let (psk_15: preSharedKey,early_secret_8: bitstring,valid: bool,safe_psk_4: bool) = (if v_99 then (if v_105 then (NoPsk,es_5,true,false) else fail-any) else (if v_107 then (psk_14,es_6,((psk_14 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_4)),is_safe_2) else fail-any)) in
                                                {849}event Client_PSKChoosen(@7_id_client,psk_15,safe_psk_4);
                                                {850}if valid then
                                                (
                                                    {853}new s_13[]: seed;
                                                    {851}let gxy_1: element = catch-fail(dh_decap_fun(g,gy_1,x_36)) in
                                                    {852}let v_108: bool = not-caught-fail(gxy_1) in
                                                    {854}let gxy_2: element = (if v_108 then gxy_1 else dh_f(s_13)) in
                                                    {855}event Client_DH_gxy(@7_id_client,gxy_2);
                                                    {857}let m_8: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {858}let v_109: bool = not-caught-fail(m_8) in
                                                    {859}let h_34: bitstring = (if v_109 then catch-fail(hash(@7_tls_h,m_8)) else caught-fail) in
                                                    {860}let v_110: bool = not-caught-fail(h_34) in
                                                    {856}let l_35: label = tls13_derived in
                                                    {861}let x_38: bitstring = (if v_110 then (l_35,h_34) else caught-fail) in
                                                    {862}let extra_4: bitstring = catch-fail((if v_109 then (if v_110 then hmac(@7_tls_h,early_secret_8,x_38) else fail-any) else fail-any)) in
                                                    {863}let v_111: bool = not-caught-fail(extra_4) in
                                                    {864}let handshake_secret_1: bitstring = (if v_111 then hmac(@7_tls_h,extra_4,gxy_2) else fail-any) in
                                                    {866}let m_9: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {867}let v_112: bool = not-caught-fail(m_9) in
                                                    {868}let h_35: bitstring = (if v_112 then catch-fail(hash(@7_tls_h,m_9)) else caught-fail) in
                                                    {869}let v_113: bool = not-caught-fail(h_35) in
                                                    {865}let l_36: label = tls13_derived in
                                                    {870}let x_39: bitstring = (if v_113 then (l_36,h_35) else caught-fail) in
                                                    {871}let extra_5: bitstring = catch-fail((if v_112 then (if v_113 then hmac(@7_tls_h,handshake_secret_1,x_39) else fail-any) else fail-any)) in
                                                    {872}let v_114: bool = not-caught-fail(extra_5) in
                                                    {873}let k_9: bitstring = (if v_114 then zero else caught-fail) in
                                                    {874}let master_secret_9: bitstring = (if v_114 then catch-fail(hmac(@7_tls_h,handshake_secret_1,k_9)) else caught-fail) in
                                                    {875}let v_115: bool = not-caught-fail(master_secret_9) in
                                                    {808}let cur_log4: bitstring = (cur_log3_2,client_hello') in
                                                    {822}let cur_log2_5: bitstring = (cur_log4,server_hello') in
                                                    {877}let h_36: bitstring = (if v_115 then catch-fail(hash(@7_tls_h,cur_log2_5)) else caught-fail) in
                                                    {878}let v_116: bool = not-caught-fail(h_36) in
                                                    {876}let l_37: label = (if v_115 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {879}let x_40: bitstring = (if v_116 then (l_37,h_36) else caught-fail) in
                                                    {880}let client_hts_1: bitstring = (if v_115 then catch-fail((if v_116 then hmac(@7_tls_h,handshake_secret_1,x_40) else fail-any)) else caught-fail) in
                                                    {881}let v_117: bool = not-caught-fail(client_hts_1) in
                                                    {883}let h_37: bitstring = (if v_117 then catch-fail(hash(@7_tls_h,cur_log2_5)) else caught-fail) in
                                                    {884}let v_118: bool = not-caught-fail(h_37) in
                                                    {882}let l_38: label = (if v_117 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {885}let x_41: bitstring = (if v_118 then (l_38,h_37) else caught-fail) in
                                                    {886}let server_hts_1: bitstring = (if v_117 then catch-fail((if v_118 then hmac(@7_tls_h,handshake_secret_1,x_41) else fail-any)) else caught-fail) in
                                                    {887}let v_119: bool = not-caught-fail(server_hts_1) in
                                                    {889}let h_38: bitstring = (if v_119 then zero else caught-fail) in
                                                    {888}let l_39: label = (if v_119 then tls13_key else caught-fail) in
                                                    {890}let x_42: bitstring = (if v_119 then (l_39,h_38) else caught-fail) in
                                                    {891}let client_wkh_1: bitstring = (if v_119 then catch-fail(hmac(@7_tls_h,client_hts_1,x_42)) else caught-fail) in
                                                    {892}let v_120: bool = not-caught-fail(client_wkh_1) in
                                                    {894}let h_39: bitstring = (if v_120 then zero else caught-fail) in
                                                    {893}let l_40: label = (if v_120 then tls13_key else caught-fail) in
                                                    {895}let x_43: bitstring = (if v_120 then (l_40,h_39) else caught-fail) in
                                                    {896}let server_wkh_1: bitstring = (if v_120 then catch-fail(hmac(@7_tls_h,server_hts_1,x_43)) else caught-fail) in
                                                    {897}let v_121: bool = not-caught-fail(server_wkh_1) in
                                                    {899}let h_40: bitstring = (if v_121 then zero else caught-fail) in
                                                    {898}let l_41: label = (if v_121 then tls13_finished else caught-fail) in
                                                    {900}let x_44: bitstring = (if v_121 then (l_41,h_40) else caught-fail) in
                                                    {901}let client_fk_1: bitstring = (if v_121 then catch-fail(hmac(@7_tls_h,client_hts_1,x_44)) else caught-fail) in
                                                    {902}let v_122: bool = not-caught-fail(client_fk_1) in
                                                    {904}let h_41: bitstring = (if v_122 then zero else caught-fail) in
                                                    {903}let l_42: label = (if v_122 then tls13_finished else caught-fail) in
                                                    {905}let x_45: bitstring = (if v_122 then (l_42,h_41) else caught-fail) in
                                                    {906}let server_fk_1: bitstring = (if v_122 then catch-fail(hmac(@7_tls_h,server_hts_1,x_45)) else caught-fail) in
                                                    {907}let v_123: bool = not-caught-fail(server_fk_1) in
                                                    {908}let (master_secret_10: bitstring,chk_8: aead_key,shk_7: aead_key,cfin_8: mac_key,sfin_7: mac_key) = (if v_114 then (if v_115 then (if v_117 then (if v_119 then (if v_120 then (if v_121 then (if v_122 then (if v_123 then (master_secret_9,client_wkh_1,server_wkh_1,client_fk_1,server_fk_1) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {909}event Client_chk(@7_id_client,chk_8);
                                                    {910}event Client_shk(@7_id_client,shk_7);
                                                    {911}event Client_cfin(@7_id_client,cfin_8);
                                                    {912}event Client_sfin(@7_id_client,sfin_7);
                                                    {913}in(io, enc_ee_msg: bitstring);
                                                    {914}let ee_msg_1: msg = aead_dec(@7_tls_a,shk_7,0,zero,enc_ee_msg) in
                                                    {915}let EE(ech_ee: echExt,extra_ee: extraExt) = ee_msg_1 in
                                                    {916}let cur_log2_6: bitstring = (cur_log2_5,ee_msg_1) in
                                                    {917}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr',sr_9,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_15,safe_psk_4,@7_comp_psk,master_secret_10,chk_8,0,shk_7,1,cfin_8,sfin_7,cur_log2_6)))
                                                )
                                                else
                                                    {918}out(io, illegal_parameter)
                                            )
                                            else
                                                {919}out(io, illegal_parameter)
                                    )
                                    else
                                        {920}out(io, unexpected_message)
                                )
                                else
                                    {1073}get pre_shared_keys(c_dom'_2: domain,=s_dom_13,=@7_tls_h,id_9: identityPsk,psk_16: preSharedKey,idP_5: idProc,is_safe_3: bool) in
                                    {921}event Selected_one_time_used_psk(@7_id_client,psk_16,is_safe_3);
                                    {922}event Selected_psk(c_dom_6,c_dom'_2,idP_5,is_safe_3);
                                    {923}event Selected_psk_no_missmatch(@7_id_client,s_dom_13,@7_tls_h,psk_16,id_9);
                                    {924}event Selected_psk_with_ID(c_dom_6,c_dom'_2,id_9,idP_5,is_safe_3);
                                    {925}let v_124: bitstring = (id_9,psk_16,is_safe_3) in
                                    {926}let v_125: bool = success?(1-proj-3-tuple(v_124)) in
                                    {927}let is_safe_4: bool = (if v_125 then 3-proj-3-tuple(v_124) else caught-fail) in
                                    {928}let psk_17: preSharedKey = (if v_125 then 2-proj-3-tuple(v_124) else caught-fail) in
                                    {929}let id_10: identityPsk = (if v_125 then 1-proj-3-tuple(v_124) else caught-fail) in
                                    {933}let k_10: bitstring = (if v_125 then catch-fail(psk2b(psk_17)) else caught-fail) in
                                    {934}let v_126: bool = not-caught-fail(k_10) in
                                    {932}let s_14: bitstring = (if v_125 then zero else caught-fail) in
                                    {935}let early_secret_9: bitstring = (if v_125 then catch-fail((if v_126 then hmac(@7_tls_h,s_14,k_10) else fail-any)) else caught-fail) in
                                    {936}let v_127: bool = not-caught-fail(early_secret_9) in
                                    {938}let m_10: bitstring = (if v_127 then zero else caught-fail) in
                                    {939}let h_42: bitstring = (if v_127 then catch-fail(hash(@7_tls_h,m_10)) else caught-fail) in
                                    {940}let v_128: bool = not-caught-fail(h_42) in
                                    {937}let l_43: label = (if v_127 then tls13_ext_res_binder else caught-fail) in
                                    {941}let x_46: bitstring = (if v_128 then (l_43,h_42) else caught-fail) in
                                    {942}let binder_key_6: bitstring = (if v_127 then catch-fail((if v_128 then hmac(@7_tls_h,early_secret_9,x_46) else fail-any)) else caught-fail) in
                                    {943}let v_129: bool = not-caught-fail(binder_key_6) in
                                    {944}let v_130: bitstring = (if v_125 then catch-fail((if v_127 then (if v_129 then (early_secret_9,binder_key_6) else fail-any) else fail-any)) else caught-fail) in
                                    {945}let v_131: bool = (not-caught-fail(v_130) && success?(1-proj-2-tuple(v_130))) in
                                    {946}let kb_6: mac_key = (if v_131 then 2-proj-2-tuple(v_130) else caught-fail) in
                                    {947}let es_7: bitstring = (if v_131 then 1-proj-2-tuple(v_130) else caught-fail) in
                                    {930}let offer_6: params = (if v_125 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_13),ech_ext_3,extra_3,trunc_client_psk_ext(id_10)) else caught-fail) in
                                    {931}let cur_log'_4: bitstring = (if v_125 then (cur_log3_2,CH(cr_11,offer_6)) else caught-fail) in
                                    {948}let binders_3: bitstring = (if v_131 then catch-fail(hmac(@7_tls_h,kb_6,cur_log'_4)) else caught-fail) in
                                    {949}let v_132: bool = not-caught-fail(binders_3) in
                                    {950}let v_133: bitstring = catch-fail((if v_125 then (if v_131 then (if v_132 then (client_psk_ext(id_10,binders_3),(psk_17,id_10,es_7,is_safe_4)) else fail-any) else fail-any) else fail-any)) in
                                    {951}let v_134: bool = (not-caught-fail(v_133) && success?(1-proj-2-tuple(v_133))) in
                                    {952}let psk_data_3: bitstring = (if v_134 then 2-proj-2-tuple(v_133) else caught-fail) in
                                    {953}let psk_ext_5: preSharedKeyExt = (if v_134 then 1-proj-2-tuple(v_133) else caught-fail) in
                                    {954}let offer_7: params = (if v_134 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_5) else caught-fail) in
                                    {955}let (client_hello'_1: msg,cr'_1: bytes32,kex_data'_1: bitstring,psk_data'_1: bitstring) = (if v_134 then (CH(cr_11,offer_7),cr_11,kex_data_2,psk_data_3) else fail-any) in
                                    {956}event ClientOffersAead(cr'_1,@7_tls_a);
                                    {957}event ClientOffersHash(cr'_1,@7_tls_h);
                                    {958}event ClientOffersGroup(cr'_1,@7_tls_g);
                                    {959}out(io, client_hello'_1);
                                    {961}in(io, server_hello'_1: msg);
                                    {962}let SH(sr'_1: bytes32,mode'_1: params) = server_hello'_1 in
                                    (
                                        {963}if (sr'_1 = B32(HRR24,HRR8)) then
                                            {964}out(io, unexpected_message)
                                        else
                                            {965}let (x_47: bitstring,g_1: group) = kex_data'_1 in
                                            {966}let (psk_offer_1: preSharedKey,id_offer_1: identityPsk,es_offer_1: bitstring,is_safe_offer_1: bool) = psk_data'_1 in
                                            {967}event Client_PSKOffer(@7_id_client,psk_offer_1,id_offer_1,is_safe_offer_1);
                                            {968}event Client_Rand_client(@7_id_client,cr'_1);
                                            {969}event Client_DH_client(@7_id_client,dh_pub(g_1,x_47));
                                            {970}event Client_server_domain(@7_id_client,s_dom_13);
                                            {971}let SH(sr_10: bytes32,mode_2: params) = server_hello'_1 in
                                            {972}event Client_Rand_server(@7_id_client,sr_10);
                                            {973}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_1,gy_2: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_6: preSharedKeyExt) = mode_2 in
                                            (
                                                {975}event Client_DH_server(@7_id_client,gy_2);
                                                {976}let v_135: bool = (psk_ext_6 = empty_psk_ext) in
                                                {977}let psk_18: preSharedKey = (if v_135 then NoPsk else caught-fail) in
                                                {979}let k_11: bitstring = (if v_135 then catch-fail(psk2b(psk_18)) else caught-fail) in
                                                {980}let v_136: bool = not-caught-fail(k_11) in
                                                {978}let s_15: bitstring = (if v_135 then zero else caught-fail) in
                                                {981}let early_secret_10: bitstring = (if v_135 then catch-fail((if v_136 then hmac(@7_tls_h,s_15,k_11) else fail-any)) else caught-fail) in
                                                {982}let v_137: bool = not-caught-fail(early_secret_10) in
                                                {984}let m_11: bitstring = (if v_137 then zero else caught-fail) in
                                                {985}let h_43: bitstring = (if v_137 then catch-fail(hash(@7_tls_h,m_11)) else caught-fail) in
                                                {986}let v_138: bool = not-caught-fail(h_43) in
                                                {983}let l_44: label = (if v_137 then tls13_ext_res_binder else caught-fail) in
                                                {987}let x_48: bitstring = (if v_138 then (l_44,h_43) else caught-fail) in
                                                {988}let binder_key_7: bitstring = (if v_137 then catch-fail((if v_138 then hmac(@7_tls_h,early_secret_10,x_48) else fail-any)) else caught-fail) in
                                                {989}let v_139: bool = not-caught-fail(binder_key_7) in
                                                {990}let v_140: bitstring = (if v_135 then catch-fail((if v_137 then (if v_139 then (early_secret_10,binder_key_7) else fail-any) else fail-any)) else caught-fail) in
                                                {991}let v_141: bool = (not-caught-fail(v_140) && success?(1-proj-2-tuple(v_140))) in
                                                {992}let kb_7: mac_key = (if v_141 then 2-proj-2-tuple(v_140) else caught-fail) in
                                                {993}let es_8: bitstring = (if v_141 then 1-proj-2-tuple(v_140) else caught-fail) in
                                                {994}let v_142: bitstring = (if not(v_135) then catch-fail(psk_data'_1) else caught-fail) in
                                                {995}let v_143: bool = (not-caught-fail(v_142) && success?(1-proj-4-tuple(v_142))) in
                                                {996}let is_safe_5: bool = (if v_143 then 4-proj-4-tuple(v_142) else caught-fail) in
                                                {997}let es_9: bitstring = (if v_143 then 3-proj-4-tuple(v_142) else caught-fail) in
                                                {998}let id_11: identityPsk = (if v_143 then 2-proj-4-tuple(v_142) else caught-fail) in
                                                {999}let psk_19: preSharedKey = (if v_143 then 1-proj-4-tuple(v_142) else caught-fail) in
                                                {1000}let (psk_20: preSharedKey,early_secret_11: bitstring,valid_1: bool,safe_psk_5: bool) = (if v_135 then (if v_141 then (NoPsk,es_8,true,false) else fail-any) else (if v_143 then (psk_19,es_9,((psk_19 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_6)),is_safe_5) else fail-any)) in
                                                {1001}event Client_PSKChoosen(@7_id_client,psk_20,safe_psk_5);
                                                {1002}if valid_1 then
                                                (
                                                    {1005}new s_16[]: seed;
                                                    {1003}let gxy_3: element = catch-fail(dh_decap_fun(g_1,gy_2,x_47)) in
                                                    {1004}let v_144: bool = not-caught-fail(gxy_3) in
                                                    {1006}let gxy_4: element = (if v_144 then gxy_3 else dh_f(s_16)) in
                                                    {1007}event Client_DH_gxy(@7_id_client,gxy_4);
                                                    {1009}let m_12: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1010}let v_145: bool = not-caught-fail(m_12) in
                                                    {1011}let h_44: bitstring = (if v_145 then catch-fail(hash(@7_tls_h,m_12)) else caught-fail) in
                                                    {1012}let v_146: bool = not-caught-fail(h_44) in
                                                    {1008}let l_45: label = tls13_derived in
                                                    {1013}let x_49: bitstring = (if v_146 then (l_45,h_44) else caught-fail) in
                                                    {1014}let extra_6: bitstring = catch-fail((if v_145 then (if v_146 then hmac(@7_tls_h,early_secret_11,x_49) else fail-any) else fail-any)) in
                                                    {1015}let v_147: bool = not-caught-fail(extra_6) in
                                                    {1016}let handshake_secret_2: bitstring = (if v_147 then hmac(@7_tls_h,extra_6,gxy_4) else fail-any) in
                                                    {1018}let m_13: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1019}let v_148: bool = not-caught-fail(m_13) in
                                                    {1020}let h_45: bitstring = (if v_148 then catch-fail(hash(@7_tls_h,m_13)) else caught-fail) in
                                                    {1021}let v_149: bool = not-caught-fail(h_45) in
                                                    {1017}let l_46: label = tls13_derived in
                                                    {1022}let x_50: bitstring = (if v_149 then (l_46,h_45) else caught-fail) in
                                                    {1023}let extra_7: bitstring = catch-fail((if v_148 then (if v_149 then hmac(@7_tls_h,handshake_secret_2,x_50) else fail-any) else fail-any)) in
                                                    {1024}let v_150: bool = not-caught-fail(extra_7) in
                                                    {1025}let k_12: bitstring = (if v_150 then zero else caught-fail) in
                                                    {1026}let master_secret_11: bitstring = (if v_150 then catch-fail(hmac(@7_tls_h,handshake_secret_2,k_12)) else caught-fail) in
                                                    {1027}let v_151: bool = not-caught-fail(master_secret_11) in
                                                    {960}let cur_log4_1: bitstring = (cur_log3_2,client_hello'_1) in
                                                    {974}let cur_log2_7: bitstring = (cur_log4_1,server_hello'_1) in
                                                    {1029}let h_46: bitstring = (if v_151 then catch-fail(hash(@7_tls_h,cur_log2_7)) else caught-fail) in
                                                    {1030}let v_152: bool = not-caught-fail(h_46) in
                                                    {1028}let l_47: label = (if v_151 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {1031}let x_51: bitstring = (if v_152 then (l_47,h_46) else caught-fail) in
                                                    {1032}let client_hts_2: bitstring = (if v_151 then catch-fail((if v_152 then hmac(@7_tls_h,handshake_secret_2,x_51) else fail-any)) else caught-fail) in
                                                    {1033}let v_153: bool = not-caught-fail(client_hts_2) in
                                                    {1035}let h_47: bitstring = (if v_153 then catch-fail(hash(@7_tls_h,cur_log2_7)) else caught-fail) in
                                                    {1036}let v_154: bool = not-caught-fail(h_47) in
                                                    {1034}let l_48: label = (if v_153 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {1037}let x_52: bitstring = (if v_154 then (l_48,h_47) else caught-fail) in
                                                    {1038}let server_hts_2: bitstring = (if v_153 then catch-fail((if v_154 then hmac(@7_tls_h,handshake_secret_2,x_52) else fail-any)) else caught-fail) in
                                                    {1039}let v_155: bool = not-caught-fail(server_hts_2) in
                                                    {1041}let h_48: bitstring = (if v_155 then zero else caught-fail) in
                                                    {1040}let l_49: label = (if v_155 then tls13_key else caught-fail) in
                                                    {1042}let x_53: bitstring = (if v_155 then (l_49,h_48) else caught-fail) in
                                                    {1043}let client_wkh_2: bitstring = (if v_155 then catch-fail(hmac(@7_tls_h,client_hts_2,x_53)) else caught-fail) in
                                                    {1044}let v_156: bool = not-caught-fail(client_wkh_2) in
                                                    {1046}let h_49: bitstring = (if v_156 then zero else caught-fail) in
                                                    {1045}let l_50: label = (if v_156 then tls13_key else caught-fail) in
                                                    {1047}let x_54: bitstring = (if v_156 then (l_50,h_49) else caught-fail) in
                                                    {1048}let server_wkh_2: bitstring = (if v_156 then catch-fail(hmac(@7_tls_h,server_hts_2,x_54)) else caught-fail) in
                                                    {1049}let v_157: bool = not-caught-fail(server_wkh_2) in
                                                    {1051}let h_50: bitstring = (if v_157 then zero else caught-fail) in
                                                    {1050}let l_51: label = (if v_157 then tls13_finished else caught-fail) in
                                                    {1052}let x_55: bitstring = (if v_157 then (l_51,h_50) else caught-fail) in
                                                    {1053}let client_fk_2: bitstring = (if v_157 then catch-fail(hmac(@7_tls_h,client_hts_2,x_55)) else caught-fail) in
                                                    {1054}let v_158: bool = not-caught-fail(client_fk_2) in
                                                    {1056}let h_51: bitstring = (if v_158 then zero else caught-fail) in
                                                    {1055}let l_52: label = (if v_158 then tls13_finished else caught-fail) in
                                                    {1057}let x_56: bitstring = (if v_158 then (l_52,h_51) else caught-fail) in
                                                    {1058}let server_fk_2: bitstring = (if v_158 then catch-fail(hmac(@7_tls_h,server_hts_2,x_56)) else caught-fail) in
                                                    {1059}let v_159: bool = not-caught-fail(server_fk_2) in
                                                    {1060}let (master_secret_12: bitstring,chk_9: aead_key,shk_8: aead_key,cfin_9: mac_key,sfin_8: mac_key) = (if v_150 then (if v_151 then (if v_153 then (if v_155 then (if v_156 then (if v_157 then (if v_158 then (if v_159 then (master_secret_11,client_wkh_2,server_wkh_2,client_fk_2,server_fk_2) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {1061}event Client_chk(@7_id_client,chk_9);
                                                    {1062}event Client_shk(@7_id_client,shk_8);
                                                    {1063}event Client_cfin(@7_id_client,cfin_9);
                                                    {1064}event Client_sfin(@7_id_client,sfin_8);
                                                    {1065}in(io, enc_ee_msg_1: bitstring);
                                                    {1066}let ee_msg_2: msg = aead_dec(@7_tls_a,shk_8,0,zero,enc_ee_msg_1) in
                                                    {1067}let EE(ech_ee_1: echExt,extra_ee_1: extraExt) = ee_msg_2 in
                                                    {1068}let cur_log2_8: bitstring = (cur_log2_7,ee_msg_2) in
                                                    {1069}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_1,sr_10,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_20,safe_psk_5,@7_comp_psk,master_secret_12,chk_9,0,shk_8,1,cfin_9,sfin_8,cur_log2_8)))
                                                )
                                                else
                                                    {1070}out(io, illegal_parameter)
                                            )
                                            else
                                                {1071}out(io, illegal_parameter)
                                    )
                                    else
                                        {1072}out(io, unexpected_message)
                            )
                            else
                                {1074}let psk_21: preSharedKey = NoPsk in
                                {1076}let k_13: bitstring = catch-fail(psk2b(psk_21)) in
                                {1077}let v_160: bool = not-caught-fail(k_13) in
                                {1075}let s_17: bitstring = zero in
                                {1078}let early_secret_12: bitstring = catch-fail((if v_160 then hmac(@7_tls_h,s_17,k_13) else fail-any)) in
                                {1079}let v_161: bool = not-caught-fail(early_secret_12) in
                                {1081}let m_14: bitstring = (if v_161 then zero else caught-fail) in
                                {1082}let h_52: bitstring = (if v_161 then catch-fail(hash(@7_tls_h,m_14)) else caught-fail) in
                                {1083}let v_162: bool = not-caught-fail(h_52) in
                                {1080}let l_53: label = (if v_161 then tls13_ext_res_binder else caught-fail) in
                                {1084}let x_57: bitstring = (if v_162 then (l_53,h_52) else caught-fail) in
                                {1085}let binder_key_8: bitstring = (if v_161 then catch-fail((if v_162 then hmac(@7_tls_h,early_secret_12,x_57) else fail-any)) else caught-fail) in
                                {1086}let v_163: bool = not-caught-fail(binder_key_8) in
                                {1087}let v_164: bitstring = catch-fail((if v_161 then (if v_163 then (early_secret_12,binder_key_8) else fail-any) else fail-any)) in
                                {1088}let v_165: bool = (not-caught-fail(v_164) && success?(1-proj-2-tuple(v_164))) in
                                {1089}let kb_8: mac_key = (if v_165 then 2-proj-2-tuple(v_164) else caught-fail) in
                                {1090}let es_10: bitstring = (if v_165 then 1-proj-2-tuple(v_164) else caught-fail) in
                                {1091}let v_166: bitstring = catch-fail((if v_165 then (empty_psk_ext,(NoPsk,zero,es_10,false)) else fail-any)) in
                                {1092}let v_167: bool = (not-caught-fail(v_166) && success?(1-proj-2-tuple(v_166))) in
                                {1093}let psk_data_4: bitstring = (if v_167 then 2-proj-2-tuple(v_166) else caught-fail) in
                                {1094}let psk_ext_7: preSharedKeyExt = (if v_167 then 1-proj-2-tuple(v_166) else caught-fail) in
                                {1095}let offer_8: params = (if v_167 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_2,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_7) else caught-fail) in
                                {1096}let (client_hello'_2: msg,cr'_2: bytes32,kex_data'_2: bitstring,psk_data'_2: bitstring) = (if v_167 then (CH(cr_11,offer_8),cr_11,kex_data_2,psk_data_4) else fail-any) in
                                {1097}event ClientOffersAead(cr'_2,@7_tls_a);
                                {1098}event ClientOffersHash(cr'_2,@7_tls_h);
                                {1099}event ClientOffersGroup(cr'_2,@7_tls_g);
                                {1100}out(io, client_hello'_2);
                                {1102}in(io, server_hello'_2: msg);
                                {1103}let SH(sr'_2: bytes32,mode'_2: params) = server_hello'_2 in
                                (
                                    {1104}if (sr'_2 = B32(HRR24,HRR8)) then
                                        {1105}out(io, unexpected_message)
                                    else
                                        {1106}let (x_58: bitstring,g_2: group) = kex_data'_2 in
                                        {1107}let (psk_offer_2: preSharedKey,id_offer_2: identityPsk,es_offer_2: bitstring,is_safe_offer_2: bool) = psk_data'_2 in
                                        {1108}event Client_PSKOffer(@7_id_client,psk_offer_2,id_offer_2,is_safe_offer_2);
                                        {1109}event Client_Rand_client(@7_id_client,cr'_2);
                                        {1110}event Client_DH_client(@7_id_client,dh_pub(g_2,x_58));
                                        {1111}event Client_server_domain(@7_id_client,s_dom_13);
                                        {1112}let SH(sr_11: bytes32,mode_3: params) = server_hello'_2 in
                                        {1113}event Client_Rand_server(@7_id_client,sr_11);
                                        {1114}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_2,gy_3: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_8: preSharedKeyExt) = mode_3 in
                                        (
                                            {1116}event Client_DH_server(@7_id_client,gy_3);
                                            {1117}let v_168: bool = (psk_ext_8 = empty_psk_ext) in
                                            {1118}let psk_22: preSharedKey = (if v_168 then NoPsk else caught-fail) in
                                            {1120}let k_14: bitstring = (if v_168 then catch-fail(psk2b(psk_22)) else caught-fail) in
                                            {1121}let v_169: bool = not-caught-fail(k_14) in
                                            {1119}let s_18: bitstring = (if v_168 then zero else caught-fail) in
                                            {1122}let early_secret_13: bitstring = (if v_168 then catch-fail((if v_169 then hmac(@7_tls_h,s_18,k_14) else fail-any)) else caught-fail) in
                                            {1123}let v_170: bool = not-caught-fail(early_secret_13) in
                                            {1125}let m_15: bitstring = (if v_170 then zero else caught-fail) in
                                            {1126}let h_53: bitstring = (if v_170 then catch-fail(hash(@7_tls_h,m_15)) else caught-fail) in
                                            {1127}let v_171: bool = not-caught-fail(h_53) in
                                            {1124}let l_54: label = (if v_170 then tls13_ext_res_binder else caught-fail) in
                                            {1128}let x_59: bitstring = (if v_171 then (l_54,h_53) else caught-fail) in
                                            {1129}let binder_key_9: bitstring = (if v_170 then catch-fail((if v_171 then hmac(@7_tls_h,early_secret_13,x_59) else fail-any)) else caught-fail) in
                                            {1130}let v_172: bool = not-caught-fail(binder_key_9) in
                                            {1131}let v_173: bitstring = (if v_168 then catch-fail((if v_170 then (if v_172 then (early_secret_13,binder_key_9) else fail-any) else fail-any)) else caught-fail) in
                                            {1132}let v_174: bool = (not-caught-fail(v_173) && success?(1-proj-2-tuple(v_173))) in
                                            {1133}let kb_9: mac_key = (if v_174 then 2-proj-2-tuple(v_173) else caught-fail) in
                                            {1134}let es_11: bitstring = (if v_174 then 1-proj-2-tuple(v_173) else caught-fail) in
                                            {1135}let v_175: bitstring = (if not(v_168) then catch-fail(psk_data'_2) else caught-fail) in
                                            {1136}let v_176: bool = (not-caught-fail(v_175) && success?(1-proj-4-tuple(v_175))) in
                                            {1137}let is_safe_6: bool = (if v_176 then 4-proj-4-tuple(v_175) else caught-fail) in
                                            {1138}let es_12: bitstring = (if v_176 then 3-proj-4-tuple(v_175) else caught-fail) in
                                            {1139}let id_12: identityPsk = (if v_176 then 2-proj-4-tuple(v_175) else caught-fail) in
                                            {1140}let psk_23: preSharedKey = (if v_176 then 1-proj-4-tuple(v_175) else caught-fail) in
                                            {1141}let (psk_24: preSharedKey,early_secret_14: bitstring,valid_2: bool,safe_psk_6: bool) = (if v_168 then (if v_174 then (NoPsk,es_11,true,false) else fail-any) else (if v_176 then (psk_23,es_12,((psk_23 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_8)),is_safe_6) else fail-any)) in
                                            {1142}event Client_PSKChoosen(@7_id_client,psk_24,safe_psk_6);
                                            {1143}if valid_2 then
                                            (
                                                {1146}new s_19[]: seed;
                                                {1144}let gxy_5: element = catch-fail(dh_decap_fun(g_2,gy_3,x_58)) in
                                                {1145}let v_177: bool = not-caught-fail(gxy_5) in
                                                {1147}let gxy_6: element = (if v_177 then gxy_5 else dh_f(s_19)) in
                                                {1148}event Client_DH_gxy(@7_id_client,gxy_6);
                                                {1150}let m_16: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1151}let v_178: bool = not-caught-fail(m_16) in
                                                {1152}let h_54: bitstring = (if v_178 then catch-fail(hash(@7_tls_h,m_16)) else caught-fail) in
                                                {1153}let v_179: bool = not-caught-fail(h_54) in
                                                {1149}let l_55: label = tls13_derived in
                                                {1154}let x_60: bitstring = (if v_179 then (l_55,h_54) else caught-fail) in
                                                {1155}let extra_8: bitstring = catch-fail((if v_178 then (if v_179 then hmac(@7_tls_h,early_secret_14,x_60) else fail-any) else fail-any)) in
                                                {1156}let v_180: bool = not-caught-fail(extra_8) in
                                                {1157}let handshake_secret_3: bitstring = (if v_180 then hmac(@7_tls_h,extra_8,gxy_6) else fail-any) in
                                                {1159}let m_17: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1160}let v_181: bool = not-caught-fail(m_17) in
                                                {1161}let h_55: bitstring = (if v_181 then catch-fail(hash(@7_tls_h,m_17)) else caught-fail) in
                                                {1162}let v_182: bool = not-caught-fail(h_55) in
                                                {1158}let l_56: label = tls13_derived in
                                                {1163}let x_61: bitstring = (if v_182 then (l_56,h_55) else caught-fail) in
                                                {1164}let extra_9: bitstring = catch-fail((if v_181 then (if v_182 then hmac(@7_tls_h,handshake_secret_3,x_61) else fail-any) else fail-any)) in
                                                {1165}let v_183: bool = not-caught-fail(extra_9) in
                                                {1166}let k_15: bitstring = (if v_183 then zero else caught-fail) in
                                                {1167}let master_secret_13: bitstring = (if v_183 then catch-fail(hmac(@7_tls_h,handshake_secret_3,k_15)) else caught-fail) in
                                                {1168}let v_184: bool = not-caught-fail(master_secret_13) in
                                                {1101}let cur_log4_2: bitstring = (cur_log3_2,client_hello'_2) in
                                                {1115}let cur_log2_9: bitstring = (cur_log4_2,server_hello'_2) in
                                                {1170}let h_56: bitstring = (if v_184 then catch-fail(hash(@7_tls_h,cur_log2_9)) else caught-fail) in
                                                {1171}let v_185: bool = not-caught-fail(h_56) in
                                                {1169}let l_57: label = (if v_184 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {1172}let x_62: bitstring = (if v_185 then (l_57,h_56) else caught-fail) in
                                                {1173}let client_hts_3: bitstring = (if v_184 then catch-fail((if v_185 then hmac(@7_tls_h,handshake_secret_3,x_62) else fail-any)) else caught-fail) in
                                                {1174}let v_186: bool = not-caught-fail(client_hts_3) in
                                                {1176}let h_57: bitstring = (if v_186 then catch-fail(hash(@7_tls_h,cur_log2_9)) else caught-fail) in
                                                {1177}let v_187: bool = not-caught-fail(h_57) in
                                                {1175}let l_58: label = (if v_186 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {1178}let x_63: bitstring = (if v_187 then (l_58,h_57) else caught-fail) in
                                                {1179}let server_hts_3: bitstring = (if v_186 then catch-fail((if v_187 then hmac(@7_tls_h,handshake_secret_3,x_63) else fail-any)) else caught-fail) in
                                                {1180}let v_188: bool = not-caught-fail(server_hts_3) in
                                                {1182}let h_58: bitstring = (if v_188 then zero else caught-fail) in
                                                {1181}let l_59: label = (if v_188 then tls13_key else caught-fail) in
                                                {1183}let x_64: bitstring = (if v_188 then (l_59,h_58) else caught-fail) in
                                                {1184}let client_wkh_3: bitstring = (if v_188 then catch-fail(hmac(@7_tls_h,client_hts_3,x_64)) else caught-fail) in
                                                {1185}let v_189: bool = not-caught-fail(client_wkh_3) in
                                                {1187}let h_59: bitstring = (if v_189 then zero else caught-fail) in
                                                {1186}let l_60: label = (if v_189 then tls13_key else caught-fail) in
                                                {1188}let x_65: bitstring = (if v_189 then (l_60,h_59) else caught-fail) in
                                                {1189}let server_wkh_3: bitstring = (if v_189 then catch-fail(hmac(@7_tls_h,server_hts_3,x_65)) else caught-fail) in
                                                {1190}let v_190: bool = not-caught-fail(server_wkh_3) in
                                                {1192}let h_60: bitstring = (if v_190 then zero else caught-fail) in
                                                {1191}let l_61: label = (if v_190 then tls13_finished else caught-fail) in
                                                {1193}let x_66: bitstring = (if v_190 then (l_61,h_60) else caught-fail) in
                                                {1194}let client_fk_3: bitstring = (if v_190 then catch-fail(hmac(@7_tls_h,client_hts_3,x_66)) else caught-fail) in
                                                {1195}let v_191: bool = not-caught-fail(client_fk_3) in
                                                {1197}let h_61: bitstring = (if v_191 then zero else caught-fail) in
                                                {1196}let l_62: label = (if v_191 then tls13_finished else caught-fail) in
                                                {1198}let x_67: bitstring = (if v_191 then (l_62,h_61) else caught-fail) in
                                                {1199}let server_fk_3: bitstring = (if v_191 then catch-fail(hmac(@7_tls_h,server_hts_3,x_67)) else caught-fail) in
                                                {1200}let v_192: bool = not-caught-fail(server_fk_3) in
                                                {1201}let (master_secret_14: bitstring,chk_10: aead_key,shk_9: aead_key,cfin_10: mac_key,sfin_9: mac_key) = (if v_183 then (if v_184 then (if v_186 then (if v_188 then (if v_189 then (if v_190 then (if v_191 then (if v_192 then (master_secret_13,client_wkh_3,server_wkh_3,client_fk_3,server_fk_3) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {1202}event Client_chk(@7_id_client,chk_10);
                                                {1203}event Client_shk(@7_id_client,shk_9);
                                                {1204}event Client_cfin(@7_id_client,cfin_10);
                                                {1205}event Client_sfin(@7_id_client,sfin_9);
                                                {1206}in(io, enc_ee_msg_2: bitstring);
                                                {1207}let ee_msg_3: msg = aead_dec(@7_tls_a,shk_9,0,zero,enc_ee_msg_2) in
                                                {1208}let EE(ech_ee_2: echExt,extra_ee_2: extraExt) = ee_msg_3 in
                                                {1209}let cur_log2_10: bitstring = (cur_log2_9,ee_msg_3) in
                                                {1210}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_2,sr_11,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_24,safe_psk_6,@7_comp_psk,master_secret_14,chk_10,0,shk_9,1,cfin_10,sfin_9,cur_log2_10)))
                                            )
                                            else
                                                {1211}out(io, illegal_parameter)
                                        )
                                        else
                                            {1212}out(io, illegal_parameter)
                                )
                                else
                                    {1213}out(io, unexpected_message)
                        )
                        else
                            {1214}out(io, illegal_parameter)
                    )
                    else
                        {1215}if send_kex then
                        (
                            {1216}let (x_68: bitstring,g_3: group) = kex_data_1 in
                            {1217}let (psk_offer_3: preSharedKey,id_offer_3: identityPsk,es_offer_3: bitstring,is_safe_offer_3: bool) = psk_data_1 in
                            {1218}event Client_PSKOffer(@7_id_client,psk_offer_3,id_offer_3,is_safe_offer_3);
                            {1219}event Client_Rand_client(@7_id_client,cr_10);
                            {1220}event Client_DH_client(@7_id_client,dh_pub(g_3,x_68));
                            {1221}event Client_server_domain(@7_id_client,s_dom_13);
                            {1222}let SH(sr_12: bytes32,mode_4: params) = server_hello_1 in
                            {1223}event Client_Rand_server(@7_id_client,sr_12);
                            {1224}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_3,gy_4: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_9: preSharedKeyExt) = mode_4 in
                            (
                                {1226}event Client_DH_server(@7_id_client,gy_4);
                                {1227}let v_193: bool = (psk_ext_9 = empty_psk_ext) in
                                {1228}let psk_25: preSharedKey = (if v_193 then NoPsk else caught-fail) in
                                {1230}let k_16: bitstring = (if v_193 then catch-fail(psk2b(psk_25)) else caught-fail) in
                                {1231}let v_194: bool = not-caught-fail(k_16) in
                                {1229}let s_20: bitstring = (if v_193 then zero else caught-fail) in
                                {1232}let early_secret_15: bitstring = (if v_193 then catch-fail((if v_194 then hmac(@7_tls_h,s_20,k_16) else fail-any)) else caught-fail) in
                                {1233}let v_195: bool = not-caught-fail(early_secret_15) in
                                {1235}let m_18: bitstring = (if v_195 then zero else caught-fail) in
                                {1236}let h_62: bitstring = (if v_195 then catch-fail(hash(@7_tls_h,m_18)) else caught-fail) in
                                {1237}let v_196: bool = not-caught-fail(h_62) in
                                {1234}let l_63: label = (if v_195 then tls13_ext_res_binder else caught-fail) in
                                {1238}let x_69: bitstring = (if v_196 then (l_63,h_62) else caught-fail) in
                                {1239}let binder_key_10: bitstring = (if v_195 then catch-fail((if v_196 then hmac(@7_tls_h,early_secret_15,x_69) else fail-any)) else caught-fail) in
                                {1240}let v_197: bool = not-caught-fail(binder_key_10) in
                                {1241}let v_198: bitstring = (if v_193 then catch-fail((if v_195 then (if v_197 then (early_secret_15,binder_key_10) else fail-any) else fail-any)) else caught-fail) in
                                {1242}let v_199: bool = (not-caught-fail(v_198) && success?(1-proj-2-tuple(v_198))) in
                                {1243}let kb_10: mac_key = (if v_199 then 2-proj-2-tuple(v_198) else caught-fail) in
                                {1244}let es_13: bitstring = (if v_199 then 1-proj-2-tuple(v_198) else caught-fail) in
                                {1245}let v_200: bitstring = (if not(v_193) then catch-fail(psk_data_1) else caught-fail) in
                                {1246}let v_201: bool = (not-caught-fail(v_200) && success?(1-proj-4-tuple(v_200))) in
                                {1247}let is_safe_7: bool = (if v_201 then 4-proj-4-tuple(v_200) else caught-fail) in
                                {1248}let es_14: bitstring = (if v_201 then 3-proj-4-tuple(v_200) else caught-fail) in
                                {1249}let id_13: identityPsk = (if v_201 then 2-proj-4-tuple(v_200) else caught-fail) in
                                {1250}let psk_26: preSharedKey = (if v_201 then 1-proj-4-tuple(v_200) else caught-fail) in
                                {1251}let (psk_27: preSharedKey,early_secret_16: bitstring,valid_3: bool,safe_psk_7: bool) = (if v_193 then (if v_199 then (NoPsk,es_13,true,false) else fail-any) else (if v_201 then (psk_26,es_14,((psk_26 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_9)),is_safe_7) else fail-any)) in
                                {1252}event Client_PSKChoosen(@7_id_client,psk_27,safe_psk_7);
                                {1253}if valid_3 then
                                (
                                    {1256}new s_21[]: seed;
                                    {1254}let gxy_7: element = catch-fail(dh_decap_fun(g_3,gy_4,x_68)) in
                                    {1255}let v_202: bool = not-caught-fail(gxy_7) in
                                    {1257}let gxy_8: element = (if v_202 then gxy_7 else dh_f(s_21)) in
                                    {1258}event Client_DH_gxy(@7_id_client,gxy_8);
                                    {1260}let m_19: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1261}let v_203: bool = not-caught-fail(m_19) in
                                    {1262}let h_63: bitstring = (if v_203 then catch-fail(hash(@7_tls_h,m_19)) else caught-fail) in
                                    {1263}let v_204: bool = not-caught-fail(h_63) in
                                    {1259}let l_64: label = tls13_derived in
                                    {1264}let x_70: bitstring = (if v_204 then (l_64,h_63) else caught-fail) in
                                    {1265}let extra_10: bitstring = catch-fail((if v_203 then (if v_204 then hmac(@7_tls_h,early_secret_16,x_70) else fail-any) else fail-any)) in
                                    {1266}let v_205: bool = not-caught-fail(extra_10) in
                                    {1267}let handshake_secret_4: bitstring = (if v_205 then hmac(@7_tls_h,extra_10,gxy_8) else fail-any) in
                                    {1269}let m_20: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1270}let v_206: bool = not-caught-fail(m_20) in
                                    {1271}let h_64: bitstring = (if v_206 then catch-fail(hash(@7_tls_h,m_20)) else caught-fail) in
                                    {1272}let v_207: bool = not-caught-fail(h_64) in
                                    {1268}let l_65: label = tls13_derived in
                                    {1273}let x_71: bitstring = (if v_207 then (l_65,h_64) else caught-fail) in
                                    {1274}let extra_11: bitstring = catch-fail((if v_206 then (if v_207 then hmac(@7_tls_h,handshake_secret_4,x_71) else fail-any) else fail-any)) in
                                    {1275}let v_208: bool = not-caught-fail(extra_11) in
                                    {1276}let k_17: bitstring = (if v_208 then zero else caught-fail) in
                                    {1277}let master_secret_15: bitstring = (if v_208 then catch-fail(hmac(@7_tls_h,handshake_secret_4,k_17)) else caught-fail) in
                                    {1278}let v_209: bool = not-caught-fail(master_secret_15) in
                                    {1225}let cur_log2_11: bitstring = (cur_log2_4,server_hello_1) in
                                    {1280}let h_65: bitstring = (if v_209 then catch-fail(hash(@7_tls_h,cur_log2_11)) else caught-fail) in
                                    {1281}let v_210: bool = not-caught-fail(h_65) in
                                    {1279}let l_66: label = (if v_209 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {1282}let x_72: bitstring = (if v_210 then (l_66,h_65) else caught-fail) in
                                    {1283}let client_hts_4: bitstring = (if v_209 then catch-fail((if v_210 then hmac(@7_tls_h,handshake_secret_4,x_72) else fail-any)) else caught-fail) in
                                    {1284}let v_211: bool = not-caught-fail(client_hts_4) in
                                    {1286}let h_66: bitstring = (if v_211 then catch-fail(hash(@7_tls_h,cur_log2_11)) else caught-fail) in
                                    {1287}let v_212: bool = not-caught-fail(h_66) in
                                    {1285}let l_67: label = (if v_211 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {1288}let x_73: bitstring = (if v_212 then (l_67,h_66) else caught-fail) in
                                    {1289}let server_hts_4: bitstring = (if v_211 then catch-fail((if v_212 then hmac(@7_tls_h,handshake_secret_4,x_73) else fail-any)) else caught-fail) in
                                    {1290}let v_213: bool = not-caught-fail(server_hts_4) in
                                    {1292}let h_67: bitstring = (if v_213 then zero else caught-fail) in
                                    {1291}let l_68: label = (if v_213 then tls13_key else caught-fail) in
                                    {1293}let x_74: bitstring = (if v_213 then (l_68,h_67) else caught-fail) in
                                    {1294}let client_wkh_4: bitstring = (if v_213 then catch-fail(hmac(@7_tls_h,client_hts_4,x_74)) else caught-fail) in
                                    {1295}let v_214: bool = not-caught-fail(client_wkh_4) in
                                    {1297}let h_68: bitstring = (if v_214 then zero else caught-fail) in
                                    {1296}let l_69: label = (if v_214 then tls13_key else caught-fail) in
                                    {1298}let x_75: bitstring = (if v_214 then (l_69,h_68) else caught-fail) in
                                    {1299}let server_wkh_4: bitstring = (if v_214 then catch-fail(hmac(@7_tls_h,server_hts_4,x_75)) else caught-fail) in
                                    {1300}let v_215: bool = not-caught-fail(server_wkh_4) in
                                    {1302}let h_69: bitstring = (if v_215 then zero else caught-fail) in
                                    {1301}let l_70: label = (if v_215 then tls13_finished else caught-fail) in
                                    {1303}let x_76: bitstring = (if v_215 then (l_70,h_69) else caught-fail) in
                                    {1304}let client_fk_4: bitstring = (if v_215 then catch-fail(hmac(@7_tls_h,client_hts_4,x_76)) else caught-fail) in
                                    {1305}let v_216: bool = not-caught-fail(client_fk_4) in
                                    {1307}let h_70: bitstring = (if v_216 then zero else caught-fail) in
                                    {1306}let l_71: label = (if v_216 then tls13_finished else caught-fail) in
                                    {1308}let x_77: bitstring = (if v_216 then (l_71,h_70) else caught-fail) in
                                    {1309}let server_fk_4: bitstring = (if v_216 then catch-fail(hmac(@7_tls_h,server_hts_4,x_77)) else caught-fail) in
                                    {1310}let v_217: bool = not-caught-fail(server_fk_4) in
                                    {1311}let (master_secret_16: bitstring,chk_11: aead_key,shk_10: aead_key,cfin_11: mac_key,sfin_10: mac_key) = (if v_208 then (if v_209 then (if v_211 then (if v_213 then (if v_214 then (if v_215 then (if v_216 then (if v_217 then (master_secret_15,client_wkh_4,server_wkh_4,client_fk_4,server_fk_4) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {1312}event Client_chk(@7_id_client,chk_11);
                                    {1313}event Client_shk(@7_id_client,shk_10);
                                    {1314}event Client_cfin(@7_id_client,cfin_11);
                                    {1315}event Client_sfin(@7_id_client,sfin_10);
                                    {1316}in(io, enc_ee_msg_3: bitstring);
                                    {1317}let ee_msg_4: msg = aead_dec(@7_tls_a,shk_10,0,zero,enc_ee_msg_3) in
                                    {1318}let EE(ech_ee_3: echExt,extra_ee_3: extraExt) = ee_msg_4 in
                                    {1319}let cur_log2_12: bitstring = (cur_log2_11,ee_msg_4) in
                                    {1320}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr_10,sr_12,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_27,safe_psk_7,@7_comp_psk,master_secret_16,chk_11,0,shk_10,1,cfin_11,sfin_10,cur_log2_12)))
                                )
                                else
                                    {1321}out(io, illegal_parameter)
                            )
                            else
                                {1322}out(io, illegal_parameter)
                        )
                        else
                            {1323}out(io, illegal_parameter)
                )
                else
                    {1324}out(io, unexpected_message)
            )
        )
        else
            {1964}get pre_shared_keys(c_dom'_3: domain,=s_dom_13,=@7_tls_h,id_14: identityPsk,psk_28: preSharedKey,idP_6: idProc,is_safe_8: bool) in
            {1325}event Selected_one_time_used_psk(@7_id_client,psk_28,is_safe_8);
            {1326}event Selected_psk(c_dom_6,c_dom'_3,idP_6,is_safe_8);
            {1327}event Selected_psk_no_missmatch(@7_id_client,s_dom_13,@7_tls_h,psk_28,id_14);
            {1328}event Selected_psk_with_ID(c_dom_6,c_dom'_3,id_14,idP_6,is_safe_8);
            {1329}let v_218: bitstring = (id_14,psk_28,is_safe_8) in
            {1330}let v_219: bool = success?(1-proj-3-tuple(v_218)) in
            {1331}let is_safe_9: bool = (if v_219 then 3-proj-3-tuple(v_218) else caught-fail) in
            {1332}let psk_29: preSharedKey = (if v_219 then 2-proj-3-tuple(v_218) else caught-fail) in
            {1333}let id_15: identityPsk = (if v_219 then 1-proj-3-tuple(v_218) else caught-fail) in
            {1337}let k_18: bitstring = (if v_219 then catch-fail(psk2b(psk_29)) else caught-fail) in
            {1338}let v_220: bool = not-caught-fail(k_18) in
            {1336}let s_22: bitstring = (if v_219 then zero else caught-fail) in
            {1339}let early_secret_17: bitstring = (if v_219 then catch-fail((if v_220 then hmac(@7_tls_h,s_22,k_18) else fail-any)) else caught-fail) in
            {1340}let v_221: bool = not-caught-fail(early_secret_17) in
            {1342}let m_21: bitstring = (if v_221 then zero else caught-fail) in
            {1343}let h_71: bitstring = (if v_221 then catch-fail(hash(@7_tls_h,m_21)) else caught-fail) in
            {1344}let v_222: bool = not-caught-fail(h_71) in
            {1341}let l_72: label = (if v_221 then tls13_ext_res_binder else caught-fail) in
            {1345}let x_78: bitstring = (if v_222 then (l_72,h_71) else caught-fail) in
            {1346}let binder_key_11: bitstring = (if v_221 then catch-fail((if v_222 then hmac(@7_tls_h,early_secret_17,x_78) else fail-any)) else caught-fail) in
            {1347}let v_223: bool = not-caught-fail(binder_key_11) in
            {1348}let v_224: bitstring = (if v_219 then catch-fail((if v_221 then (if v_223 then (early_secret_17,binder_key_11) else fail-any) else fail-any)) else caught-fail) in
            {1349}let v_225: bool = (not-caught-fail(v_224) && success?(1-proj-2-tuple(v_224))) in
            {1350}let kb_11: mac_key = (if v_225 then 2-proj-2-tuple(v_224) else caught-fail) in
            {1351}let es_15: bitstring = (if v_225 then 1-proj-2-tuple(v_224) else caught-fail) in
            {1334}let offer_9: params = (if v_219 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_13),ech_ext_2,extra_2,trunc_client_psk_ext(id_15)) else caught-fail) in
            {1335}let cur_log'_5: bitstring = (if v_219 then (cur_log_8,CH(cr_9,offer_9)) else caught-fail) in
            {1352}let binders_4: bitstring = (if v_225 then catch-fail(hmac(@7_tls_h,kb_11,cur_log'_5)) else caught-fail) in
            {1353}let v_226: bool = not-caught-fail(binders_4) in
            {1354}let v_227: bitstring = catch-fail((if v_219 then (if v_225 then (if v_226 then (client_psk_ext(id_15,binders_4),(psk_29,id_15,es_15,is_safe_9)) else fail-any) else fail-any) else fail-any)) in
            {1355}let v_228: bool = (not-caught-fail(v_227) && success?(1-proj-2-tuple(v_227))) in
            {1356}let psk_data_5: bitstring = (if v_228 then 2-proj-2-tuple(v_227) else caught-fail) in
            {1357}let psk_ext_10: preSharedKeyExt = (if v_228 then 1-proj-2-tuple(v_227) else caught-fail) in
            {1358}let offer_10: params = (if v_228 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_10) else caught-fail) in
            {1359}let (client_hello_3: msg,cr_12: bytes32,kex_data_3: bitstring,psk_data_6: bitstring) = (if v_228 then (CH(cr_9,offer_10),cr_9,kex_data,psk_data_5) else fail-any) in
            {1360}event ClientOffersAead(cr_12,@7_tls_a);
            {1361}event ClientOffersHash(cr_12,@7_tls_h);
            {1362}event ClientOffersGroup(cr_12,@7_tls_g);
            {1363}out(io, client_hello_3);
            {1365}let (psk_30: preSharedKey,id_16: identityPsk,es_16: bitstring,safe_psk_8: bool) = psk_data_6 in
            (
                {1366}if (false && (psk_30 ≠ NoPsk)) then
                {1367}let client_hello_4: bitstring = (zero,client_hello_3) in
                {1369}let h_72: bitstring = catch-fail(hash(@7_tls_h,client_hello_4)) in
                {1370}let v_229: bool = not-caught-fail(h_72) in
                {1368}let l_73: label = tls13_client_early_traffic_secret in
                {1371}let x_79: bitstring = (if v_229 then (l_73,h_72) else caught-fail) in
                {1372}let atsc0_2: bitstring = catch-fail((if v_229 then hmac(@7_tls_h,es_16,x_79) else fail-any)) in
                {1373}let v_230: bool = not-caught-fail(atsc0_2) in
                {1375}let h_73: bitstring = (if v_230 then zero else caught-fail) in
                {1374}let l_74: label = (if v_230 then tls13_key else caught-fail) in
                {1376}let x_80: bitstring = (if v_230 then (l_74,h_73) else caught-fail) in
                {1377}let kc0_2: bitstring = (if v_230 then catch-fail(hmac(@7_tls_h,atsc0_2,x_80)) else caught-fail) in
                {1378}let v_231: bool = not-caught-fail(kc0_2) in
                {1380}let h_74: bitstring = (if v_231 then catch-fail(hash(@7_tls_h,client_hello_4)) else caught-fail) in
                {1381}let v_232: bool = not-caught-fail(h_74) in
                {1379}let l_75: label = (if v_231 then tls13_early_exporter_master_secret else caught-fail) in
                {1382}let x_81: bitstring = (if v_232 then (l_75,h_74) else caught-fail) in
                {1383}let ems0_4: bitstring = (if v_231 then catch-fail((if v_232 then hmac(@7_tls_h,es_16,x_81) else fail-any)) else caught-fail) in
                {1384}let v_233: bool = not-caught-fail(ems0_4) in
                {1385}let (wkc0_2: aead_key,ems0_5: bitstring) = (if v_230 then (if v_231 then (if v_233 then (kc0_2,ems0_4) else fail-any) else fail-any) else fail-any) in
                {1386}!
                {1387}in(io, (i_2: nat,ad_2: bitstring));
                {1388}if is_nat(i_2) then
                {1389}new msg_ed_1[]: bitstring;
                {1391}new st_11: stamp;
                {1392}event ClientSequenceClient0RTTDataWriteKey(@7_id_client,st_11,i_2);
                {1393}event ClientSends0(@7_id_client,cr_12,psk_30,i_2,ad_2,msg_ed_1);
                {1390}let enc_ed_1: bitstring = aead_enc(@7_tls_a,wkc0_2,i_2,ad_2,msg_ed_1) in
                {1394}out(io, enc_ed_1)
            ) | (
                {1395}in(io, server_hello_2: msg);
                {1396}let SH(sr_13: bytes32,mode_5: params) = server_hello_2 in
                (
                    {1397}event ClientEchAcceptance(@7_id_client,false);
                    {1364}let cur_log2_13: bitstring = (cur_log_8,client_hello_3) in
                    {1398}if (true && (sr_13 = B32(HRR24,HRR8))) then
                    (
                        {1399}if ((mode_5 = nego(TLS13,@7_tls_h,@7_tls_a,hrr_kex_ext(@7_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex ≠ true)) then
                        (
                            {1402}new rand24_3[]: bytes24;
                            {1403}new rand8_3[]: bytes8;
                            {1405}new s_23[]: seed;
                            {1406}let gx_6: element = dh_pub(@7_tls_g,dh_k(s_23)) in
                            {1407}let v_234: bitstring = (dh_k(s_23),gx_6) in
                            {1408}let v_235: bool = success?(1-proj-2-tuple(v_234)) in
                            {1409}let gx_7: element = (if v_235 then 2-proj-2-tuple(v_234) else caught-fail) in
                            {1410}let x_82: bitstring = (if v_235 then 1-proj-2-tuple(v_234) else caught-fail) in
                            {1401}let send_kex_2: bool = true in
                            {1411}let kex_2: kex_alg = (if v_235 then (if send_kex_2 then DHE_kex(@7_tls_g,gx_7) else DHE_group(@7_tls_g)) else caught-fail) in
                            {1412}let (kex_ext_3: keyShareExt,kex_data_4: bitstring) = (if v_235 then (client_kex_ext(kex_2),(x_82,@7_tls_g)) else fail-any) in
                            {1404}let cr_13: bytes32 = B32(rand24_3,rand8_3) in
                            {1400}let cur_log3_3: bitstring = (cur_log2_13,server_hello_2) in
                            {1415}if @7_use_psk then
                            (
                                {1414}let extra_12: extraExt = empty_extra_ext in
                                {1413}let ech_ext_4: echExt = empty_ech_ext in
                                {1416}let (psk_31: preSharedKey,id_17: identityPsk,old_es_2: bitstring,is_safe_10: bool) = psk_data_6 in
                                (
                                    {1420}let k_19: bitstring = catch-fail(psk2b(psk_31)) in
                                    {1421}let v_236: bool = not-caught-fail(k_19) in
                                    {1419}let s_24: bitstring = zero in
                                    {1422}let early_secret_18: bitstring = catch-fail((if v_236 then hmac(@7_tls_h,s_24,k_19) else fail-any)) in
                                    {1423}let v_237: bool = not-caught-fail(early_secret_18) in
                                    {1425}let m_22: bitstring = (if v_237 then zero else caught-fail) in
                                    {1426}let h_75: bitstring = (if v_237 then catch-fail(hash(@7_tls_h,m_22)) else caught-fail) in
                                    {1427}let v_238: bool = not-caught-fail(h_75) in
                                    {1424}let l_76: label = (if v_237 then tls13_ext_res_binder else caught-fail) in
                                    {1428}let x_83: bitstring = (if v_238 then (l_76,h_75) else caught-fail) in
                                    {1429}let binder_key_12: bitstring = (if v_237 then catch-fail((if v_238 then hmac(@7_tls_h,early_secret_18,x_83) else fail-any)) else caught-fail) in
                                    {1430}let v_239: bool = not-caught-fail(binder_key_12) in
                                    {1431}let v_240: bitstring = catch-fail((if v_237 then (if v_239 then (early_secret_18,binder_key_12) else fail-any) else fail-any)) in
                                    {1432}let v_241: bool = (not-caught-fail(v_240) && success?(1-proj-2-tuple(v_240))) in
                                    {1433}let kb_12: mac_key = (if v_241 then 2-proj-2-tuple(v_240) else caught-fail) in
                                    {1434}let es_17: bitstring = (if v_241 then 1-proj-2-tuple(v_240) else caught-fail) in
                                    {1417}let offer_11: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_13),ech_ext_4,extra_12,trunc_client_psk_ext(id_17)) in
                                    {1418}let cur_log'_6: bitstring = (cur_log3_3,CH(cr_13,offer_11)) in
                                    {1435}let binders_5: bitstring = (if v_241 then catch-fail(hmac(@7_tls_h,kb_12,cur_log'_6)) else caught-fail) in
                                    {1436}let v_242: bool = not-caught-fail(binders_5) in
                                    {1437}let v_243: bitstring = catch-fail((if v_241 then (if v_242 then (client_psk_ext(id_17,binders_5),(psk_31,id_17,es_17,is_safe_10)) else fail-any) else fail-any)) in
                                    {1438}let v_244: bool = (not-caught-fail(v_243) && success?(1-proj-2-tuple(v_243))) in
                                    {1439}let psk_data_7: bitstring = (if v_244 then 2-proj-2-tuple(v_243) else caught-fail) in
                                    {1440}let psk_ext_11: preSharedKeyExt = (if v_244 then 1-proj-2-tuple(v_243) else caught-fail) in
                                    {1441}let offer_12: params = (if v_244 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_11) else caught-fail) in
                                    {1442}let (client_hello'_3: msg,cr'_3: bytes32,kex_data'_3: bitstring,psk_data'_3: bitstring) = (if v_244 then (CH(cr_13,offer_12),cr_13,kex_data_4,psk_data_7) else fail-any) in
                                    {1443}event ClientOffersAead(cr'_3,@7_tls_a);
                                    {1444}event ClientOffersHash(cr'_3,@7_tls_h);
                                    {1445}event ClientOffersGroup(cr'_3,@7_tls_g);
                                    {1446}out(io, client_hello'_3);
                                    {1448}in(io, server_hello'_3: msg);
                                    {1449}let SH(sr'_3: bytes32,mode'_3: params) = server_hello'_3 in
                                    (
                                        {1450}if (sr'_3 = B32(HRR24,HRR8)) then
                                            {1451}out(io, unexpected_message)
                                        else
                                            {1452}let (x_84: bitstring,g_4: group) = kex_data'_3 in
                                            {1453}let (psk_offer_4: preSharedKey,id_offer_4: identityPsk,es_offer_4: bitstring,is_safe_offer_4: bool) = psk_data'_3 in
                                            {1454}event Client_PSKOffer(@7_id_client,psk_offer_4,id_offer_4,is_safe_offer_4);
                                            {1455}event Client_Rand_client(@7_id_client,cr'_3);
                                            {1456}event Client_DH_client(@7_id_client,dh_pub(g_4,x_84));
                                            {1457}event Client_server_domain(@7_id_client,s_dom_13);
                                            {1458}let SH(sr_14: bytes32,mode_6: params) = server_hello'_3 in
                                            {1459}event Client_Rand_server(@7_id_client,sr_14);
                                            {1460}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_4,gy_5: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_12: preSharedKeyExt) = mode_6 in
                                            (
                                                {1462}event Client_DH_server(@7_id_client,gy_5);
                                                {1463}let v_245: bool = (psk_ext_12 = empty_psk_ext) in
                                                {1464}let psk_32: preSharedKey = (if v_245 then NoPsk else caught-fail) in
                                                {1466}let k_20: bitstring = (if v_245 then catch-fail(psk2b(psk_32)) else caught-fail) in
                                                {1467}let v_246: bool = not-caught-fail(k_20) in
                                                {1465}let s_25: bitstring = (if v_245 then zero else caught-fail) in
                                                {1468}let early_secret_19: bitstring = (if v_245 then catch-fail((if v_246 then hmac(@7_tls_h,s_25,k_20) else fail-any)) else caught-fail) in
                                                {1469}let v_247: bool = not-caught-fail(early_secret_19) in
                                                {1471}let m_23: bitstring = (if v_247 then zero else caught-fail) in
                                                {1472}let h_76: bitstring = (if v_247 then catch-fail(hash(@7_tls_h,m_23)) else caught-fail) in
                                                {1473}let v_248: bool = not-caught-fail(h_76) in
                                                {1470}let l_77: label = (if v_247 then tls13_ext_res_binder else caught-fail) in
                                                {1474}let x_85: bitstring = (if v_248 then (l_77,h_76) else caught-fail) in
                                                {1475}let binder_key_13: bitstring = (if v_247 then catch-fail((if v_248 then hmac(@7_tls_h,early_secret_19,x_85) else fail-any)) else caught-fail) in
                                                {1476}let v_249: bool = not-caught-fail(binder_key_13) in
                                                {1477}let v_250: bitstring = (if v_245 then catch-fail((if v_247 then (if v_249 then (early_secret_19,binder_key_13) else fail-any) else fail-any)) else caught-fail) in
                                                {1478}let v_251: bool = (not-caught-fail(v_250) && success?(1-proj-2-tuple(v_250))) in
                                                {1479}let kb_13: mac_key = (if v_251 then 2-proj-2-tuple(v_250) else caught-fail) in
                                                {1480}let es_18: bitstring = (if v_251 then 1-proj-2-tuple(v_250) else caught-fail) in
                                                {1481}let v_252: bitstring = (if not(v_245) then catch-fail(psk_data'_3) else caught-fail) in
                                                {1482}let v_253: bool = (not-caught-fail(v_252) && success?(1-proj-4-tuple(v_252))) in
                                                {1483}let is_safe_11: bool = (if v_253 then 4-proj-4-tuple(v_252) else caught-fail) in
                                                {1484}let es_19: bitstring = (if v_253 then 3-proj-4-tuple(v_252) else caught-fail) in
                                                {1485}let id_18: identityPsk = (if v_253 then 2-proj-4-tuple(v_252) else caught-fail) in
                                                {1486}let psk_33: preSharedKey = (if v_253 then 1-proj-4-tuple(v_252) else caught-fail) in
                                                {1487}let (psk_34: preSharedKey,early_secret_20: bitstring,valid_4: bool,safe_psk_9: bool) = (if v_245 then (if v_251 then (NoPsk,es_18,true,false) else fail-any) else (if v_253 then (psk_33,es_19,((psk_33 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_12)),is_safe_11) else fail-any)) in
                                                {1488}event Client_PSKChoosen(@7_id_client,psk_34,safe_psk_9);
                                                {1489}if valid_4 then
                                                (
                                                    {1492}new s_26[]: seed;
                                                    {1490}let gxy_9: element = catch-fail(dh_decap_fun(g_4,gy_5,x_84)) in
                                                    {1491}let v_254: bool = not-caught-fail(gxy_9) in
                                                    {1493}let gxy_10: element = (if v_254 then gxy_9 else dh_f(s_26)) in
                                                    {1494}event Client_DH_gxy(@7_id_client,gxy_10);
                                                    {1496}let m_24: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1497}let v_255: bool = not-caught-fail(m_24) in
                                                    {1498}let h_77: bitstring = (if v_255 then catch-fail(hash(@7_tls_h,m_24)) else caught-fail) in
                                                    {1499}let v_256: bool = not-caught-fail(h_77) in
                                                    {1495}let l_78: label = tls13_derived in
                                                    {1500}let x_86: bitstring = (if v_256 then (l_78,h_77) else caught-fail) in
                                                    {1501}let extra_13: bitstring = catch-fail((if v_255 then (if v_256 then hmac(@7_tls_h,early_secret_20,x_86) else fail-any) else fail-any)) in
                                                    {1502}let v_257: bool = not-caught-fail(extra_13) in
                                                    {1503}let handshake_secret_5: bitstring = (if v_257 then hmac(@7_tls_h,extra_13,gxy_10) else fail-any) in
                                                    {1505}let m_25: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1506}let v_258: bool = not-caught-fail(m_25) in
                                                    {1507}let h_78: bitstring = (if v_258 then catch-fail(hash(@7_tls_h,m_25)) else caught-fail) in
                                                    {1508}let v_259: bool = not-caught-fail(h_78) in
                                                    {1504}let l_79: label = tls13_derived in
                                                    {1509}let x_87: bitstring = (if v_259 then (l_79,h_78) else caught-fail) in
                                                    {1510}let extra_14: bitstring = catch-fail((if v_258 then (if v_259 then hmac(@7_tls_h,handshake_secret_5,x_87) else fail-any) else fail-any)) in
                                                    {1511}let v_260: bool = not-caught-fail(extra_14) in
                                                    {1512}let k_21: bitstring = (if v_260 then zero else caught-fail) in
                                                    {1513}let master_secret_17: bitstring = (if v_260 then catch-fail(hmac(@7_tls_h,handshake_secret_5,k_21)) else caught-fail) in
                                                    {1514}let v_261: bool = not-caught-fail(master_secret_17) in
                                                    {1447}let cur_log4_3: bitstring = (cur_log3_3,client_hello'_3) in
                                                    {1461}let cur_log2_14: bitstring = (cur_log4_3,server_hello'_3) in
                                                    {1516}let h_79: bitstring = (if v_261 then catch-fail(hash(@7_tls_h,cur_log2_14)) else caught-fail) in
                                                    {1517}let v_262: bool = not-caught-fail(h_79) in
                                                    {1515}let l_80: label = (if v_261 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {1518}let x_88: bitstring = (if v_262 then (l_80,h_79) else caught-fail) in
                                                    {1519}let client_hts_5: bitstring = (if v_261 then catch-fail((if v_262 then hmac(@7_tls_h,handshake_secret_5,x_88) else fail-any)) else caught-fail) in
                                                    {1520}let v_263: bool = not-caught-fail(client_hts_5) in
                                                    {1522}let h_80: bitstring = (if v_263 then catch-fail(hash(@7_tls_h,cur_log2_14)) else caught-fail) in
                                                    {1523}let v_264: bool = not-caught-fail(h_80) in
                                                    {1521}let l_81: label = (if v_263 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {1524}let x_89: bitstring = (if v_264 then (l_81,h_80) else caught-fail) in
                                                    {1525}let server_hts_5: bitstring = (if v_263 then catch-fail((if v_264 then hmac(@7_tls_h,handshake_secret_5,x_89) else fail-any)) else caught-fail) in
                                                    {1526}let v_265: bool = not-caught-fail(server_hts_5) in
                                                    {1528}let h_81: bitstring = (if v_265 then zero else caught-fail) in
                                                    {1527}let l_82: label = (if v_265 then tls13_key else caught-fail) in
                                                    {1529}let x_90: bitstring = (if v_265 then (l_82,h_81) else caught-fail) in
                                                    {1530}let client_wkh_5: bitstring = (if v_265 then catch-fail(hmac(@7_tls_h,client_hts_5,x_90)) else caught-fail) in
                                                    {1531}let v_266: bool = not-caught-fail(client_wkh_5) in
                                                    {1533}let h_82: bitstring = (if v_266 then zero else caught-fail) in
                                                    {1532}let l_83: label = (if v_266 then tls13_key else caught-fail) in
                                                    {1534}let x_91: bitstring = (if v_266 then (l_83,h_82) else caught-fail) in
                                                    {1535}let server_wkh_5: bitstring = (if v_266 then catch-fail(hmac(@7_tls_h,server_hts_5,x_91)) else caught-fail) in
                                                    {1536}let v_267: bool = not-caught-fail(server_wkh_5) in
                                                    {1538}let h_83: bitstring = (if v_267 then zero else caught-fail) in
                                                    {1537}let l_84: label = (if v_267 then tls13_finished else caught-fail) in
                                                    {1539}let x_92: bitstring = (if v_267 then (l_84,h_83) else caught-fail) in
                                                    {1540}let client_fk_5: bitstring = (if v_267 then catch-fail(hmac(@7_tls_h,client_hts_5,x_92)) else caught-fail) in
                                                    {1541}let v_268: bool = not-caught-fail(client_fk_5) in
                                                    {1543}let h_84: bitstring = (if v_268 then zero else caught-fail) in
                                                    {1542}let l_85: label = (if v_268 then tls13_finished else caught-fail) in
                                                    {1544}let x_93: bitstring = (if v_268 then (l_85,h_84) else caught-fail) in
                                                    {1545}let server_fk_5: bitstring = (if v_268 then catch-fail(hmac(@7_tls_h,server_hts_5,x_93)) else caught-fail) in
                                                    {1546}let v_269: bool = not-caught-fail(server_fk_5) in
                                                    {1547}let (master_secret_18: bitstring,chk_12: aead_key,shk_11: aead_key,cfin_12: mac_key,sfin_11: mac_key) = (if v_260 then (if v_261 then (if v_263 then (if v_265 then (if v_266 then (if v_267 then (if v_268 then (if v_269 then (master_secret_17,client_wkh_5,server_wkh_5,client_fk_5,server_fk_5) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {1548}event Client_chk(@7_id_client,chk_12);
                                                    {1549}event Client_shk(@7_id_client,shk_11);
                                                    {1550}event Client_cfin(@7_id_client,cfin_12);
                                                    {1551}event Client_sfin(@7_id_client,sfin_11);
                                                    {1552}in(io, enc_ee_msg_4: bitstring);
                                                    {1553}let ee_msg_5: msg = aead_dec(@7_tls_a,shk_11,0,zero,enc_ee_msg_4) in
                                                    {1554}let EE(ech_ee_4: echExt,extra_ee_4: extraExt) = ee_msg_5 in
                                                    {1555}let cur_log2_15: bitstring = (cur_log2_14,ee_msg_5) in
                                                    {1556}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_3,sr_14,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_34,safe_psk_9,@7_comp_psk,master_secret_18,chk_12,0,shk_11,1,cfin_12,sfin_11,cur_log2_15)))
                                                )
                                                else
                                                    {1557}out(io, illegal_parameter)
                                            )
                                            else
                                                {1558}out(io, illegal_parameter)
                                    )
                                    else
                                        {1559}out(io, unexpected_message)
                                )
                                else
                                    {1712}get pre_shared_keys(c_dom'_4: domain,=s_dom_13,=@7_tls_h,id_19: identityPsk,psk_35: preSharedKey,idP_7: idProc,is_safe_12: bool) in
                                    {1560}event Selected_one_time_used_psk(@7_id_client,psk_35,is_safe_12);
                                    {1561}event Selected_psk(c_dom_6,c_dom'_4,idP_7,is_safe_12);
                                    {1562}event Selected_psk_no_missmatch(@7_id_client,s_dom_13,@7_tls_h,psk_35,id_19);
                                    {1563}event Selected_psk_with_ID(c_dom_6,c_dom'_4,id_19,idP_7,is_safe_12);
                                    {1564}let v_270: bitstring = (id_19,psk_35,is_safe_12) in
                                    {1565}let v_271: bool = success?(1-proj-3-tuple(v_270)) in
                                    {1566}let is_safe_13: bool = (if v_271 then 3-proj-3-tuple(v_270) else caught-fail) in
                                    {1567}let psk_36: preSharedKey = (if v_271 then 2-proj-3-tuple(v_270) else caught-fail) in
                                    {1568}let id_20: identityPsk = (if v_271 then 1-proj-3-tuple(v_270) else caught-fail) in
                                    {1572}let k_22: bitstring = (if v_271 then catch-fail(psk2b(psk_36)) else caught-fail) in
                                    {1573}let v_272: bool = not-caught-fail(k_22) in
                                    {1571}let s_27: bitstring = (if v_271 then zero else caught-fail) in
                                    {1574}let early_secret_21: bitstring = (if v_271 then catch-fail((if v_272 then hmac(@7_tls_h,s_27,k_22) else fail-any)) else caught-fail) in
                                    {1575}let v_273: bool = not-caught-fail(early_secret_21) in
                                    {1577}let m_26: bitstring = (if v_273 then zero else caught-fail) in
                                    {1578}let h_85: bitstring = (if v_273 then catch-fail(hash(@7_tls_h,m_26)) else caught-fail) in
                                    {1579}let v_274: bool = not-caught-fail(h_85) in
                                    {1576}let l_86: label = (if v_273 then tls13_ext_res_binder else caught-fail) in
                                    {1580}let x_94: bitstring = (if v_274 then (l_86,h_85) else caught-fail) in
                                    {1581}let binder_key_14: bitstring = (if v_273 then catch-fail((if v_274 then hmac(@7_tls_h,early_secret_21,x_94) else fail-any)) else caught-fail) in
                                    {1582}let v_275: bool = not-caught-fail(binder_key_14) in
                                    {1583}let v_276: bitstring = (if v_271 then catch-fail((if v_273 then (if v_275 then (early_secret_21,binder_key_14) else fail-any) else fail-any)) else caught-fail) in
                                    {1584}let v_277: bool = (not-caught-fail(v_276) && success?(1-proj-2-tuple(v_276))) in
                                    {1585}let kb_14: mac_key = (if v_277 then 2-proj-2-tuple(v_276) else caught-fail) in
                                    {1586}let es_20: bitstring = (if v_277 then 1-proj-2-tuple(v_276) else caught-fail) in
                                    {1569}let offer_13: params = (if v_271 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_13),ech_ext_4,extra_12,trunc_client_psk_ext(id_20)) else caught-fail) in
                                    {1570}let cur_log'_7: bitstring = (if v_271 then (cur_log3_3,CH(cr_13,offer_13)) else caught-fail) in
                                    {1587}let binders_6: bitstring = (if v_277 then catch-fail(hmac(@7_tls_h,kb_14,cur_log'_7)) else caught-fail) in
                                    {1588}let v_278: bool = not-caught-fail(binders_6) in
                                    {1589}let v_279: bitstring = catch-fail((if v_271 then (if v_277 then (if v_278 then (client_psk_ext(id_20,binders_6),(psk_36,id_20,es_20,is_safe_13)) else fail-any) else fail-any) else fail-any)) in
                                    {1590}let v_280: bool = (not-caught-fail(v_279) && success?(1-proj-2-tuple(v_279))) in
                                    {1591}let psk_data_8: bitstring = (if v_280 then 2-proj-2-tuple(v_279) else caught-fail) in
                                    {1592}let psk_ext_13: preSharedKeyExt = (if v_280 then 1-proj-2-tuple(v_279) else caught-fail) in
                                    {1593}let offer_14: params = (if v_280 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_13) else caught-fail) in
                                    {1594}let (client_hello'_4: msg,cr'_4: bytes32,kex_data'_4: bitstring,psk_data'_4: bitstring) = (if v_280 then (CH(cr_13,offer_14),cr_13,kex_data_4,psk_data_8) else fail-any) in
                                    {1595}event ClientOffersAead(cr'_4,@7_tls_a);
                                    {1596}event ClientOffersHash(cr'_4,@7_tls_h);
                                    {1597}event ClientOffersGroup(cr'_4,@7_tls_g);
                                    {1598}out(io, client_hello'_4);
                                    {1600}in(io, server_hello'_4: msg);
                                    {1601}let SH(sr'_4: bytes32,mode'_4: params) = server_hello'_4 in
                                    (
                                        {1602}if (sr'_4 = B32(HRR24,HRR8)) then
                                            {1603}out(io, unexpected_message)
                                        else
                                            {1604}let (x_95: bitstring,g_5: group) = kex_data'_4 in
                                            {1605}let (psk_offer_5: preSharedKey,id_offer_5: identityPsk,es_offer_5: bitstring,is_safe_offer_5: bool) = psk_data'_4 in
                                            {1606}event Client_PSKOffer(@7_id_client,psk_offer_5,id_offer_5,is_safe_offer_5);
                                            {1607}event Client_Rand_client(@7_id_client,cr'_4);
                                            {1608}event Client_DH_client(@7_id_client,dh_pub(g_5,x_95));
                                            {1609}event Client_server_domain(@7_id_client,s_dom_13);
                                            {1610}let SH(sr_15: bytes32,mode_7: params) = server_hello'_4 in
                                            {1611}event Client_Rand_server(@7_id_client,sr_15);
                                            {1612}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_5,gy_6: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_14: preSharedKeyExt) = mode_7 in
                                            (
                                                {1614}event Client_DH_server(@7_id_client,gy_6);
                                                {1615}let v_281: bool = (psk_ext_14 = empty_psk_ext) in
                                                {1616}let psk_37: preSharedKey = (if v_281 then NoPsk else caught-fail) in
                                                {1618}let k_23: bitstring = (if v_281 then catch-fail(psk2b(psk_37)) else caught-fail) in
                                                {1619}let v_282: bool = not-caught-fail(k_23) in
                                                {1617}let s_28: bitstring = (if v_281 then zero else caught-fail) in
                                                {1620}let early_secret_22: bitstring = (if v_281 then catch-fail((if v_282 then hmac(@7_tls_h,s_28,k_23) else fail-any)) else caught-fail) in
                                                {1621}let v_283: bool = not-caught-fail(early_secret_22) in
                                                {1623}let m_27: bitstring = (if v_283 then zero else caught-fail) in
                                                {1624}let h_86: bitstring = (if v_283 then catch-fail(hash(@7_tls_h,m_27)) else caught-fail) in
                                                {1625}let v_284: bool = not-caught-fail(h_86) in
                                                {1622}let l_87: label = (if v_283 then tls13_ext_res_binder else caught-fail) in
                                                {1626}let x_96: bitstring = (if v_284 then (l_87,h_86) else caught-fail) in
                                                {1627}let binder_key_15: bitstring = (if v_283 then catch-fail((if v_284 then hmac(@7_tls_h,early_secret_22,x_96) else fail-any)) else caught-fail) in
                                                {1628}let v_285: bool = not-caught-fail(binder_key_15) in
                                                {1629}let v_286: bitstring = (if v_281 then catch-fail((if v_283 then (if v_285 then (early_secret_22,binder_key_15) else fail-any) else fail-any)) else caught-fail) in
                                                {1630}let v_287: bool = (not-caught-fail(v_286) && success?(1-proj-2-tuple(v_286))) in
                                                {1631}let kb_15: mac_key = (if v_287 then 2-proj-2-tuple(v_286) else caught-fail) in
                                                {1632}let es_21: bitstring = (if v_287 then 1-proj-2-tuple(v_286) else caught-fail) in
                                                {1633}let v_288: bitstring = (if not(v_281) then catch-fail(psk_data'_4) else caught-fail) in
                                                {1634}let v_289: bool = (not-caught-fail(v_288) && success?(1-proj-4-tuple(v_288))) in
                                                {1635}let is_safe_14: bool = (if v_289 then 4-proj-4-tuple(v_288) else caught-fail) in
                                                {1636}let es_22: bitstring = (if v_289 then 3-proj-4-tuple(v_288) else caught-fail) in
                                                {1637}let id_21: identityPsk = (if v_289 then 2-proj-4-tuple(v_288) else caught-fail) in
                                                {1638}let psk_38: preSharedKey = (if v_289 then 1-proj-4-tuple(v_288) else caught-fail) in
                                                {1639}let (psk_39: preSharedKey,early_secret_23: bitstring,valid_5: bool,safe_psk_10: bool) = (if v_281 then (if v_287 then (NoPsk,es_21,true,false) else fail-any) else (if v_289 then (psk_38,es_22,((psk_38 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_14)),is_safe_14) else fail-any)) in
                                                {1640}event Client_PSKChoosen(@7_id_client,psk_39,safe_psk_10);
                                                {1641}if valid_5 then
                                                (
                                                    {1644}new s_29[]: seed;
                                                    {1642}let gxy_11: element = catch-fail(dh_decap_fun(g_5,gy_6,x_95)) in
                                                    {1643}let v_290: bool = not-caught-fail(gxy_11) in
                                                    {1645}let gxy_12: element = (if v_290 then gxy_11 else dh_f(s_29)) in
                                                    {1646}event Client_DH_gxy(@7_id_client,gxy_12);
                                                    {1648}let m_28: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1649}let v_291: bool = not-caught-fail(m_28) in
                                                    {1650}let h_87: bitstring = (if v_291 then catch-fail(hash(@7_tls_h,m_28)) else caught-fail) in
                                                    {1651}let v_292: bool = not-caught-fail(h_87) in
                                                    {1647}let l_88: label = tls13_derived in
                                                    {1652}let x_97: bitstring = (if v_292 then (l_88,h_87) else caught-fail) in
                                                    {1653}let extra_15: bitstring = catch-fail((if v_291 then (if v_292 then hmac(@7_tls_h,early_secret_23,x_97) else fail-any) else fail-any)) in
                                                    {1654}let v_293: bool = not-caught-fail(extra_15) in
                                                    {1655}let handshake_secret_6: bitstring = (if v_293 then hmac(@7_tls_h,extra_15,gxy_12) else fail-any) in
                                                    {1657}let m_29: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                    {1658}let v_294: bool = not-caught-fail(m_29) in
                                                    {1659}let h_88: bitstring = (if v_294 then catch-fail(hash(@7_tls_h,m_29)) else caught-fail) in
                                                    {1660}let v_295: bool = not-caught-fail(h_88) in
                                                    {1656}let l_89: label = tls13_derived in
                                                    {1661}let x_98: bitstring = (if v_295 then (l_89,h_88) else caught-fail) in
                                                    {1662}let extra_16: bitstring = catch-fail((if v_294 then (if v_295 then hmac(@7_tls_h,handshake_secret_6,x_98) else fail-any) else fail-any)) in
                                                    {1663}let v_296: bool = not-caught-fail(extra_16) in
                                                    {1664}let k_24: bitstring = (if v_296 then zero else caught-fail) in
                                                    {1665}let master_secret_19: bitstring = (if v_296 then catch-fail(hmac(@7_tls_h,handshake_secret_6,k_24)) else caught-fail) in
                                                    {1666}let v_297: bool = not-caught-fail(master_secret_19) in
                                                    {1599}let cur_log4_4: bitstring = (cur_log3_3,client_hello'_4) in
                                                    {1613}let cur_log2_16: bitstring = (cur_log4_4,server_hello'_4) in
                                                    {1668}let h_89: bitstring = (if v_297 then catch-fail(hash(@7_tls_h,cur_log2_16)) else caught-fail) in
                                                    {1669}let v_298: bool = not-caught-fail(h_89) in
                                                    {1667}let l_90: label = (if v_297 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {1670}let x_99: bitstring = (if v_298 then (l_90,h_89) else caught-fail) in
                                                    {1671}let client_hts_6: bitstring = (if v_297 then catch-fail((if v_298 then hmac(@7_tls_h,handshake_secret_6,x_99) else fail-any)) else caught-fail) in
                                                    {1672}let v_299: bool = not-caught-fail(client_hts_6) in
                                                    {1674}let h_90: bitstring = (if v_299 then catch-fail(hash(@7_tls_h,cur_log2_16)) else caught-fail) in
                                                    {1675}let v_300: bool = not-caught-fail(h_90) in
                                                    {1673}let l_91: label = (if v_299 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {1676}let x_100: bitstring = (if v_300 then (l_91,h_90) else caught-fail) in
                                                    {1677}let server_hts_6: bitstring = (if v_299 then catch-fail((if v_300 then hmac(@7_tls_h,handshake_secret_6,x_100) else fail-any)) else caught-fail) in
                                                    {1678}let v_301: bool = not-caught-fail(server_hts_6) in
                                                    {1680}let h_91: bitstring = (if v_301 then zero else caught-fail) in
                                                    {1679}let l_92: label = (if v_301 then tls13_key else caught-fail) in
                                                    {1681}let x_101: bitstring = (if v_301 then (l_92,h_91) else caught-fail) in
                                                    {1682}let client_wkh_6: bitstring = (if v_301 then catch-fail(hmac(@7_tls_h,client_hts_6,x_101)) else caught-fail) in
                                                    {1683}let v_302: bool = not-caught-fail(client_wkh_6) in
                                                    {1685}let h_92: bitstring = (if v_302 then zero else caught-fail) in
                                                    {1684}let l_93: label = (if v_302 then tls13_key else caught-fail) in
                                                    {1686}let x_102: bitstring = (if v_302 then (l_93,h_92) else caught-fail) in
                                                    {1687}let server_wkh_6: bitstring = (if v_302 then catch-fail(hmac(@7_tls_h,server_hts_6,x_102)) else caught-fail) in
                                                    {1688}let v_303: bool = not-caught-fail(server_wkh_6) in
                                                    {1690}let h_93: bitstring = (if v_303 then zero else caught-fail) in
                                                    {1689}let l_94: label = (if v_303 then tls13_finished else caught-fail) in
                                                    {1691}let x_103: bitstring = (if v_303 then (l_94,h_93) else caught-fail) in
                                                    {1692}let client_fk_6: bitstring = (if v_303 then catch-fail(hmac(@7_tls_h,client_hts_6,x_103)) else caught-fail) in
                                                    {1693}let v_304: bool = not-caught-fail(client_fk_6) in
                                                    {1695}let h_94: bitstring = (if v_304 then zero else caught-fail) in
                                                    {1694}let l_95: label = (if v_304 then tls13_finished else caught-fail) in
                                                    {1696}let x_104: bitstring = (if v_304 then (l_95,h_94) else caught-fail) in
                                                    {1697}let server_fk_6: bitstring = (if v_304 then catch-fail(hmac(@7_tls_h,server_hts_6,x_104)) else caught-fail) in
                                                    {1698}let v_305: bool = not-caught-fail(server_fk_6) in
                                                    {1699}let (master_secret_20: bitstring,chk_13: aead_key,shk_12: aead_key,cfin_13: mac_key,sfin_12: mac_key) = (if v_296 then (if v_297 then (if v_299 then (if v_301 then (if v_302 then (if v_303 then (if v_304 then (if v_305 then (master_secret_19,client_wkh_6,server_wkh_6,client_fk_6,server_fk_6) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {1700}event Client_chk(@7_id_client,chk_13);
                                                    {1701}event Client_shk(@7_id_client,shk_12);
                                                    {1702}event Client_cfin(@7_id_client,cfin_13);
                                                    {1703}event Client_sfin(@7_id_client,sfin_12);
                                                    {1704}in(io, enc_ee_msg_5: bitstring);
                                                    {1705}let ee_msg_6: msg = aead_dec(@7_tls_a,shk_12,0,zero,enc_ee_msg_5) in
                                                    {1706}let EE(ech_ee_5: echExt,extra_ee_5: extraExt) = ee_msg_6 in
                                                    {1707}let cur_log2_17: bitstring = (cur_log2_16,ee_msg_6) in
                                                    {1708}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_4,sr_15,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_39,safe_psk_10,@7_comp_psk,master_secret_20,chk_13,0,shk_12,1,cfin_13,sfin_12,cur_log2_17)))
                                                )
                                                else
                                                    {1709}out(io, illegal_parameter)
                                            )
                                            else
                                                {1710}out(io, illegal_parameter)
                                    )
                                    else
                                        {1711}out(io, unexpected_message)
                            )
                            else
                                {1713}let psk_40: preSharedKey = NoPsk in
                                {1715}let k_25: bitstring = catch-fail(psk2b(psk_40)) in
                                {1716}let v_306: bool = not-caught-fail(k_25) in
                                {1714}let s_30: bitstring = zero in
                                {1717}let early_secret_24: bitstring = catch-fail((if v_306 then hmac(@7_tls_h,s_30,k_25) else fail-any)) in
                                {1718}let v_307: bool = not-caught-fail(early_secret_24) in
                                {1720}let m_30: bitstring = (if v_307 then zero else caught-fail) in
                                {1721}let h_95: bitstring = (if v_307 then catch-fail(hash(@7_tls_h,m_30)) else caught-fail) in
                                {1722}let v_308: bool = not-caught-fail(h_95) in
                                {1719}let l_96: label = (if v_307 then tls13_ext_res_binder else caught-fail) in
                                {1723}let x_105: bitstring = (if v_308 then (l_96,h_95) else caught-fail) in
                                {1724}let binder_key_16: bitstring = (if v_307 then catch-fail((if v_308 then hmac(@7_tls_h,early_secret_24,x_105) else fail-any)) else caught-fail) in
                                {1725}let v_309: bool = not-caught-fail(binder_key_16) in
                                {1726}let v_310: bitstring = catch-fail((if v_307 then (if v_309 then (early_secret_24,binder_key_16) else fail-any) else fail-any)) in
                                {1727}let v_311: bool = (not-caught-fail(v_310) && success?(1-proj-2-tuple(v_310))) in
                                {1728}let kb_16: mac_key = (if v_311 then 2-proj-2-tuple(v_310) else caught-fail) in
                                {1729}let es_23: bitstring = (if v_311 then 1-proj-2-tuple(v_310) else caught-fail) in
                                {1730}let v_312: bitstring = catch-fail((if v_311 then (empty_psk_ext,(NoPsk,zero,es_23,false)) else fail-any)) in
                                {1731}let v_313: bool = (not-caught-fail(v_312) && success?(1-proj-2-tuple(v_312))) in
                                {1732}let psk_data_9: bitstring = (if v_313 then 2-proj-2-tuple(v_312) else caught-fail) in
                                {1733}let psk_ext_15: preSharedKeyExt = (if v_313 then 1-proj-2-tuple(v_312) else caught-fail) in
                                {1734}let offer_15: params = (if v_313 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_3,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_15) else caught-fail) in
                                {1735}let (client_hello'_5: msg,cr'_5: bytes32,kex_data'_5: bitstring,psk_data'_5: bitstring) = (if v_313 then (CH(cr_13,offer_15),cr_13,kex_data_4,psk_data_9) else fail-any) in
                                {1736}event ClientOffersAead(cr'_5,@7_tls_a);
                                {1737}event ClientOffersHash(cr'_5,@7_tls_h);
                                {1738}event ClientOffersGroup(cr'_5,@7_tls_g);
                                {1739}out(io, client_hello'_5);
                                {1741}in(io, server_hello'_5: msg);
                                {1742}let SH(sr'_5: bytes32,mode'_5: params) = server_hello'_5 in
                                (
                                    {1743}if (sr'_5 = B32(HRR24,HRR8)) then
                                        {1744}out(io, unexpected_message)
                                    else
                                        {1745}let (x_106: bitstring,g_6: group) = kex_data'_5 in
                                        {1746}let (psk_offer_6: preSharedKey,id_offer_6: identityPsk,es_offer_6: bitstring,is_safe_offer_6: bool) = psk_data'_5 in
                                        {1747}event Client_PSKOffer(@7_id_client,psk_offer_6,id_offer_6,is_safe_offer_6);
                                        {1748}event Client_Rand_client(@7_id_client,cr'_5);
                                        {1749}event Client_DH_client(@7_id_client,dh_pub(g_6,x_106));
                                        {1750}event Client_server_domain(@7_id_client,s_dom_13);
                                        {1751}let SH(sr_16: bytes32,mode_8: params) = server_hello'_5 in
                                        {1752}event Client_Rand_server(@7_id_client,sr_16);
                                        {1753}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_6,gy_7: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_16: preSharedKeyExt) = mode_8 in
                                        (
                                            {1755}event Client_DH_server(@7_id_client,gy_7);
                                            {1756}let v_314: bool = (psk_ext_16 = empty_psk_ext) in
                                            {1757}let psk_41: preSharedKey = (if v_314 then NoPsk else caught-fail) in
                                            {1759}let k_26: bitstring = (if v_314 then catch-fail(psk2b(psk_41)) else caught-fail) in
                                            {1760}let v_315: bool = not-caught-fail(k_26) in
                                            {1758}let s_31: bitstring = (if v_314 then zero else caught-fail) in
                                            {1761}let early_secret_25: bitstring = (if v_314 then catch-fail((if v_315 then hmac(@7_tls_h,s_31,k_26) else fail-any)) else caught-fail) in
                                            {1762}let v_316: bool = not-caught-fail(early_secret_25) in
                                            {1764}let m_31: bitstring = (if v_316 then zero else caught-fail) in
                                            {1765}let h_96: bitstring = (if v_316 then catch-fail(hash(@7_tls_h,m_31)) else caught-fail) in
                                            {1766}let v_317: bool = not-caught-fail(h_96) in
                                            {1763}let l_97: label = (if v_316 then tls13_ext_res_binder else caught-fail) in
                                            {1767}let x_107: bitstring = (if v_317 then (l_97,h_96) else caught-fail) in
                                            {1768}let binder_key_17: bitstring = (if v_316 then catch-fail((if v_317 then hmac(@7_tls_h,early_secret_25,x_107) else fail-any)) else caught-fail) in
                                            {1769}let v_318: bool = not-caught-fail(binder_key_17) in
                                            {1770}let v_319: bitstring = (if v_314 then catch-fail((if v_316 then (if v_318 then (early_secret_25,binder_key_17) else fail-any) else fail-any)) else caught-fail) in
                                            {1771}let v_320: bool = (not-caught-fail(v_319) && success?(1-proj-2-tuple(v_319))) in
                                            {1772}let kb_17: mac_key = (if v_320 then 2-proj-2-tuple(v_319) else caught-fail) in
                                            {1773}let es_24: bitstring = (if v_320 then 1-proj-2-tuple(v_319) else caught-fail) in
                                            {1774}let v_321: bitstring = (if not(v_314) then catch-fail(psk_data'_5) else caught-fail) in
                                            {1775}let v_322: bool = (not-caught-fail(v_321) && success?(1-proj-4-tuple(v_321))) in
                                            {1776}let is_safe_15: bool = (if v_322 then 4-proj-4-tuple(v_321) else caught-fail) in
                                            {1777}let es_25: bitstring = (if v_322 then 3-proj-4-tuple(v_321) else caught-fail) in
                                            {1778}let id_22: identityPsk = (if v_322 then 2-proj-4-tuple(v_321) else caught-fail) in
                                            {1779}let psk_42: preSharedKey = (if v_322 then 1-proj-4-tuple(v_321) else caught-fail) in
                                            {1780}let (psk_43: preSharedKey,early_secret_26: bitstring,valid_6: bool,safe_psk_11: bool) = (if v_314 then (if v_320 then (NoPsk,es_24,true,false) else fail-any) else (if v_322 then (psk_42,es_25,((psk_42 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_16)),is_safe_15) else fail-any)) in
                                            {1781}event Client_PSKChoosen(@7_id_client,psk_43,safe_psk_11);
                                            {1782}if valid_6 then
                                            (
                                                {1785}new s_32[]: seed;
                                                {1783}let gxy_13: element = catch-fail(dh_decap_fun(g_6,gy_7,x_106)) in
                                                {1784}let v_323: bool = not-caught-fail(gxy_13) in
                                                {1786}let gxy_14: element = (if v_323 then gxy_13 else dh_f(s_32)) in
                                                {1787}event Client_DH_gxy(@7_id_client,gxy_14);
                                                {1789}let m_32: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1790}let v_324: bool = not-caught-fail(m_32) in
                                                {1791}let h_97: bitstring = (if v_324 then catch-fail(hash(@7_tls_h,m_32)) else caught-fail) in
                                                {1792}let v_325: bool = not-caught-fail(h_97) in
                                                {1788}let l_98: label = tls13_derived in
                                                {1793}let x_108: bitstring = (if v_325 then (l_98,h_97) else caught-fail) in
                                                {1794}let extra_17: bitstring = catch-fail((if v_324 then (if v_325 then hmac(@7_tls_h,early_secret_26,x_108) else fail-any) else fail-any)) in
                                                {1795}let v_326: bool = not-caught-fail(extra_17) in
                                                {1796}let handshake_secret_7: bitstring = (if v_326 then hmac(@7_tls_h,extra_17,gxy_14) else fail-any) in
                                                {1798}let m_33: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {1799}let v_327: bool = not-caught-fail(m_33) in
                                                {1800}let h_98: bitstring = (if v_327 then catch-fail(hash(@7_tls_h,m_33)) else caught-fail) in
                                                {1801}let v_328: bool = not-caught-fail(h_98) in
                                                {1797}let l_99: label = tls13_derived in
                                                {1802}let x_109: bitstring = (if v_328 then (l_99,h_98) else caught-fail) in
                                                {1803}let extra_18: bitstring = catch-fail((if v_327 then (if v_328 then hmac(@7_tls_h,handshake_secret_7,x_109) else fail-any) else fail-any)) in
                                                {1804}let v_329: bool = not-caught-fail(extra_18) in
                                                {1805}let k_27: bitstring = (if v_329 then zero else caught-fail) in
                                                {1806}let master_secret_21: bitstring = (if v_329 then catch-fail(hmac(@7_tls_h,handshake_secret_7,k_27)) else caught-fail) in
                                                {1807}let v_330: bool = not-caught-fail(master_secret_21) in
                                                {1740}let cur_log4_5: bitstring = (cur_log3_3,client_hello'_5) in
                                                {1754}let cur_log2_18: bitstring = (cur_log4_5,server_hello'_5) in
                                                {1809}let h_99: bitstring = (if v_330 then catch-fail(hash(@7_tls_h,cur_log2_18)) else caught-fail) in
                                                {1810}let v_331: bool = not-caught-fail(h_99) in
                                                {1808}let l_100: label = (if v_330 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {1811}let x_110: bitstring = (if v_331 then (l_100,h_99) else caught-fail) in
                                                {1812}let client_hts_7: bitstring = (if v_330 then catch-fail((if v_331 then hmac(@7_tls_h,handshake_secret_7,x_110) else fail-any)) else caught-fail) in
                                                {1813}let v_332: bool = not-caught-fail(client_hts_7) in
                                                {1815}let h_100: bitstring = (if v_332 then catch-fail(hash(@7_tls_h,cur_log2_18)) else caught-fail) in
                                                {1816}let v_333: bool = not-caught-fail(h_100) in
                                                {1814}let l_101: label = (if v_332 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {1817}let x_111: bitstring = (if v_333 then (l_101,h_100) else caught-fail) in
                                                {1818}let server_hts_7: bitstring = (if v_332 then catch-fail((if v_333 then hmac(@7_tls_h,handshake_secret_7,x_111) else fail-any)) else caught-fail) in
                                                {1819}let v_334: bool = not-caught-fail(server_hts_7) in
                                                {1821}let h_101: bitstring = (if v_334 then zero else caught-fail) in
                                                {1820}let l_102: label = (if v_334 then tls13_key else caught-fail) in
                                                {1822}let x_112: bitstring = (if v_334 then (l_102,h_101) else caught-fail) in
                                                {1823}let client_wkh_7: bitstring = (if v_334 then catch-fail(hmac(@7_tls_h,client_hts_7,x_112)) else caught-fail) in
                                                {1824}let v_335: bool = not-caught-fail(client_wkh_7) in
                                                {1826}let h_102: bitstring = (if v_335 then zero else caught-fail) in
                                                {1825}let l_103: label = (if v_335 then tls13_key else caught-fail) in
                                                {1827}let x_113: bitstring = (if v_335 then (l_103,h_102) else caught-fail) in
                                                {1828}let server_wkh_7: bitstring = (if v_335 then catch-fail(hmac(@7_tls_h,server_hts_7,x_113)) else caught-fail) in
                                                {1829}let v_336: bool = not-caught-fail(server_wkh_7) in
                                                {1831}let h_103: bitstring = (if v_336 then zero else caught-fail) in
                                                {1830}let l_104: label = (if v_336 then tls13_finished else caught-fail) in
                                                {1832}let x_114: bitstring = (if v_336 then (l_104,h_103) else caught-fail) in
                                                {1833}let client_fk_7: bitstring = (if v_336 then catch-fail(hmac(@7_tls_h,client_hts_7,x_114)) else caught-fail) in
                                                {1834}let v_337: bool = not-caught-fail(client_fk_7) in
                                                {1836}let h_104: bitstring = (if v_337 then zero else caught-fail) in
                                                {1835}let l_105: label = (if v_337 then tls13_finished else caught-fail) in
                                                {1837}let x_115: bitstring = (if v_337 then (l_105,h_104) else caught-fail) in
                                                {1838}let server_fk_7: bitstring = (if v_337 then catch-fail(hmac(@7_tls_h,server_hts_7,x_115)) else caught-fail) in
                                                {1839}let v_338: bool = not-caught-fail(server_fk_7) in
                                                {1840}let (master_secret_22: bitstring,chk_14: aead_key,shk_13: aead_key,cfin_14: mac_key,sfin_13: mac_key) = (if v_329 then (if v_330 then (if v_332 then (if v_334 then (if v_335 then (if v_336 then (if v_337 then (if v_338 then (master_secret_21,client_wkh_7,server_wkh_7,client_fk_7,server_fk_7) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {1841}event Client_chk(@7_id_client,chk_14);
                                                {1842}event Client_shk(@7_id_client,shk_13);
                                                {1843}event Client_cfin(@7_id_client,cfin_14);
                                                {1844}event Client_sfin(@7_id_client,sfin_13);
                                                {1845}in(io, enc_ee_msg_6: bitstring);
                                                {1846}let ee_msg_7: msg = aead_dec(@7_tls_a,shk_13,0,zero,enc_ee_msg_6) in
                                                {1847}let EE(ech_ee_6: echExt,extra_ee_6: extraExt) = ee_msg_7 in
                                                {1848}let cur_log2_19: bitstring = (cur_log2_18,ee_msg_7) in
                                                {1849}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_5,sr_16,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_43,safe_psk_11,@7_comp_psk,master_secret_22,chk_14,0,shk_13,1,cfin_14,sfin_13,cur_log2_19)))
                                            )
                                            else
                                                {1850}out(io, illegal_parameter)
                                        )
                                        else
                                            {1851}out(io, illegal_parameter)
                                )
                                else
                                    {1852}out(io, unexpected_message)
                        )
                        else
                            {1853}out(io, illegal_parameter)
                    )
                    else
                        {1854}if send_kex then
                        (
                            {1855}let (x_116: bitstring,g_7: group) = kex_data_3 in
                            {1856}let (psk_offer_7: preSharedKey,id_offer_7: identityPsk,es_offer_7: bitstring,is_safe_offer_7: bool) = psk_data_6 in
                            {1857}event Client_PSKOffer(@7_id_client,psk_offer_7,id_offer_7,is_safe_offer_7);
                            {1858}event Client_Rand_client(@7_id_client,cr_12);
                            {1859}event Client_DH_client(@7_id_client,dh_pub(g_7,x_116));
                            {1860}event Client_server_domain(@7_id_client,s_dom_13);
                            {1861}let SH(sr_17: bytes32,mode_9: params) = server_hello_2 in
                            {1862}event Client_Rand_server(@7_id_client,sr_17);
                            {1863}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_7,gy_8: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_17: preSharedKeyExt) = mode_9 in
                            (
                                {1865}event Client_DH_server(@7_id_client,gy_8);
                                {1866}let v_339: bool = (psk_ext_17 = empty_psk_ext) in
                                {1867}let psk_44: preSharedKey = (if v_339 then NoPsk else caught-fail) in
                                {1869}let k_28: bitstring = (if v_339 then catch-fail(psk2b(psk_44)) else caught-fail) in
                                {1870}let v_340: bool = not-caught-fail(k_28) in
                                {1868}let s_33: bitstring = (if v_339 then zero else caught-fail) in
                                {1871}let early_secret_27: bitstring = (if v_339 then catch-fail((if v_340 then hmac(@7_tls_h,s_33,k_28) else fail-any)) else caught-fail) in
                                {1872}let v_341: bool = not-caught-fail(early_secret_27) in
                                {1874}let m_34: bitstring = (if v_341 then zero else caught-fail) in
                                {1875}let h_105: bitstring = (if v_341 then catch-fail(hash(@7_tls_h,m_34)) else caught-fail) in
                                {1876}let v_342: bool = not-caught-fail(h_105) in
                                {1873}let l_106: label = (if v_341 then tls13_ext_res_binder else caught-fail) in
                                {1877}let x_117: bitstring = (if v_342 then (l_106,h_105) else caught-fail) in
                                {1878}let binder_key_18: bitstring = (if v_341 then catch-fail((if v_342 then hmac(@7_tls_h,early_secret_27,x_117) else fail-any)) else caught-fail) in
                                {1879}let v_343: bool = not-caught-fail(binder_key_18) in
                                {1880}let v_344: bitstring = (if v_339 then catch-fail((if v_341 then (if v_343 then (early_secret_27,binder_key_18) else fail-any) else fail-any)) else caught-fail) in
                                {1881}let v_345: bool = (not-caught-fail(v_344) && success?(1-proj-2-tuple(v_344))) in
                                {1882}let kb_18: mac_key = (if v_345 then 2-proj-2-tuple(v_344) else caught-fail) in
                                {1883}let es_26: bitstring = (if v_345 then 1-proj-2-tuple(v_344) else caught-fail) in
                                {1884}let v_346: bitstring = (if not(v_339) then catch-fail(psk_data_6) else caught-fail) in
                                {1885}let v_347: bool = (not-caught-fail(v_346) && success?(1-proj-4-tuple(v_346))) in
                                {1886}let is_safe_16: bool = (if v_347 then 4-proj-4-tuple(v_346) else caught-fail) in
                                {1887}let es_27: bitstring = (if v_347 then 3-proj-4-tuple(v_346) else caught-fail) in
                                {1888}let id_23: identityPsk = (if v_347 then 2-proj-4-tuple(v_346) else caught-fail) in
                                {1889}let psk_45: preSharedKey = (if v_347 then 1-proj-4-tuple(v_346) else caught-fail) in
                                {1890}let (psk_46: preSharedKey,early_secret_28: bitstring,valid_7: bool,safe_psk_12: bool) = (if v_339 then (if v_345 then (NoPsk,es_26,true,false) else fail-any) else (if v_347 then (psk_45,es_27,((psk_45 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_17)),is_safe_16) else fail-any)) in
                                {1891}event Client_PSKChoosen(@7_id_client,psk_46,safe_psk_12);
                                {1892}if valid_7 then
                                (
                                    {1895}new s_34[]: seed;
                                    {1893}let gxy_15: element = catch-fail(dh_decap_fun(g_7,gy_8,x_116)) in
                                    {1894}let v_348: bool = not-caught-fail(gxy_15) in
                                    {1896}let gxy_16: element = (if v_348 then gxy_15 else dh_f(s_34)) in
                                    {1897}event Client_DH_gxy(@7_id_client,gxy_16);
                                    {1899}let m_35: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1900}let v_349: bool = not-caught-fail(m_35) in
                                    {1901}let h_106: bitstring = (if v_349 then catch-fail(hash(@7_tls_h,m_35)) else caught-fail) in
                                    {1902}let v_350: bool = not-caught-fail(h_106) in
                                    {1898}let l_107: label = tls13_derived in
                                    {1903}let x_118: bitstring = (if v_350 then (l_107,h_106) else caught-fail) in
                                    {1904}let extra_19: bitstring = catch-fail((if v_349 then (if v_350 then hmac(@7_tls_h,early_secret_28,x_118) else fail-any) else fail-any)) in
                                    {1905}let v_351: bool = not-caught-fail(extra_19) in
                                    {1906}let handshake_secret_8: bitstring = (if v_351 then hmac(@7_tls_h,extra_19,gxy_16) else fail-any) in
                                    {1908}let m_36: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                    {1909}let v_352: bool = not-caught-fail(m_36) in
                                    {1910}let h_107: bitstring = (if v_352 then catch-fail(hash(@7_tls_h,m_36)) else caught-fail) in
                                    {1911}let v_353: bool = not-caught-fail(h_107) in
                                    {1907}let l_108: label = tls13_derived in
                                    {1912}let x_119: bitstring = (if v_353 then (l_108,h_107) else caught-fail) in
                                    {1913}let extra_20: bitstring = catch-fail((if v_352 then (if v_353 then hmac(@7_tls_h,handshake_secret_8,x_119) else fail-any) else fail-any)) in
                                    {1914}let v_354: bool = not-caught-fail(extra_20) in
                                    {1915}let k_29: bitstring = (if v_354 then zero else caught-fail) in
                                    {1916}let master_secret_23: bitstring = (if v_354 then catch-fail(hmac(@7_tls_h,handshake_secret_8,k_29)) else caught-fail) in
                                    {1917}let v_355: bool = not-caught-fail(master_secret_23) in
                                    {1864}let cur_log2_20: bitstring = (cur_log2_13,server_hello_2) in
                                    {1919}let h_108: bitstring = (if v_355 then catch-fail(hash(@7_tls_h,cur_log2_20)) else caught-fail) in
                                    {1920}let v_356: bool = not-caught-fail(h_108) in
                                    {1918}let l_109: label = (if v_355 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {1921}let x_120: bitstring = (if v_356 then (l_109,h_108) else caught-fail) in
                                    {1922}let client_hts_8: bitstring = (if v_355 then catch-fail((if v_356 then hmac(@7_tls_h,handshake_secret_8,x_120) else fail-any)) else caught-fail) in
                                    {1923}let v_357: bool = not-caught-fail(client_hts_8) in
                                    {1925}let h_109: bitstring = (if v_357 then catch-fail(hash(@7_tls_h,cur_log2_20)) else caught-fail) in
                                    {1926}let v_358: bool = not-caught-fail(h_109) in
                                    {1924}let l_110: label = (if v_357 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {1927}let x_121: bitstring = (if v_358 then (l_110,h_109) else caught-fail) in
                                    {1928}let server_hts_8: bitstring = (if v_357 then catch-fail((if v_358 then hmac(@7_tls_h,handshake_secret_8,x_121) else fail-any)) else caught-fail) in
                                    {1929}let v_359: bool = not-caught-fail(server_hts_8) in
                                    {1931}let h_110: bitstring = (if v_359 then zero else caught-fail) in
                                    {1930}let l_111: label = (if v_359 then tls13_key else caught-fail) in
                                    {1932}let x_122: bitstring = (if v_359 then (l_111,h_110) else caught-fail) in
                                    {1933}let client_wkh_8: bitstring = (if v_359 then catch-fail(hmac(@7_tls_h,client_hts_8,x_122)) else caught-fail) in
                                    {1934}let v_360: bool = not-caught-fail(client_wkh_8) in
                                    {1936}let h_111: bitstring = (if v_360 then zero else caught-fail) in
                                    {1935}let l_112: label = (if v_360 then tls13_key else caught-fail) in
                                    {1937}let x_123: bitstring = (if v_360 then (l_112,h_111) else caught-fail) in
                                    {1938}let server_wkh_8: bitstring = (if v_360 then catch-fail(hmac(@7_tls_h,server_hts_8,x_123)) else caught-fail) in
                                    {1939}let v_361: bool = not-caught-fail(server_wkh_8) in
                                    {1941}let h_112: bitstring = (if v_361 then zero else caught-fail) in
                                    {1940}let l_113: label = (if v_361 then tls13_finished else caught-fail) in
                                    {1942}let x_124: bitstring = (if v_361 then (l_113,h_112) else caught-fail) in
                                    {1943}let client_fk_8: bitstring = (if v_361 then catch-fail(hmac(@7_tls_h,client_hts_8,x_124)) else caught-fail) in
                                    {1944}let v_362: bool = not-caught-fail(client_fk_8) in
                                    {1946}let h_113: bitstring = (if v_362 then zero else caught-fail) in
                                    {1945}let l_114: label = (if v_362 then tls13_finished else caught-fail) in
                                    {1947}let x_125: bitstring = (if v_362 then (l_114,h_113) else caught-fail) in
                                    {1948}let server_fk_8: bitstring = (if v_362 then catch-fail(hmac(@7_tls_h,server_hts_8,x_125)) else caught-fail) in
                                    {1949}let v_363: bool = not-caught-fail(server_fk_8) in
                                    {1950}let (master_secret_24: bitstring,chk_15: aead_key,shk_14: aead_key,cfin_15: mac_key,sfin_14: mac_key) = (if v_354 then (if v_355 then (if v_357 then (if v_359 then (if v_360 then (if v_361 then (if v_362 then (if v_363 then (master_secret_23,client_wkh_8,server_wkh_8,client_fk_8,server_fk_8) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {1951}event Client_chk(@7_id_client,chk_15);
                                    {1952}event Client_shk(@7_id_client,shk_14);
                                    {1953}event Client_cfin(@7_id_client,cfin_15);
                                    {1954}event Client_sfin(@7_id_client,sfin_14);
                                    {1955}in(io, enc_ee_msg_7: bitstring);
                                    {1956}let ee_msg_8: msg = aead_dec(@7_tls_a,shk_14,0,zero,enc_ee_msg_7) in
                                    {1957}let EE(ech_ee_7: echExt,extra_ee_7: extraExt) = ee_msg_8 in
                                    {1958}let cur_log2_21: bitstring = (cur_log2_20,ee_msg_8) in
                                    {1959}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr_12,sr_17,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_46,safe_psk_12,@7_comp_psk,master_secret_24,chk_15,0,shk_14,1,cfin_15,sfin_14,cur_log2_21)))
                                )
                                else
                                    {1960}out(io, illegal_parameter)
                            )
                            else
                                {1961}out(io, illegal_parameter)
                        )
                        else
                            {1962}out(io, illegal_parameter)
                )
                else
                    {1963}out(io, unexpected_message)
            )
    )
    else
        {1965}let psk_47: preSharedKey = NoPsk in
        {1967}let k_30: bitstring = catch-fail(psk2b(psk_47)) in
        {1968}let v_364: bool = not-caught-fail(k_30) in
        {1966}let s_35: bitstring = zero in
        {1969}let early_secret_29: bitstring = catch-fail((if v_364 then hmac(@7_tls_h,s_35,k_30) else fail-any)) in
        {1970}let v_365: bool = not-caught-fail(early_secret_29) in
        {1972}let m_37: bitstring = (if v_365 then zero else caught-fail) in
        {1973}let h_114: bitstring = (if v_365 then catch-fail(hash(@7_tls_h,m_37)) else caught-fail) in
        {1974}let v_366: bool = not-caught-fail(h_114) in
        {1971}let l_115: label = (if v_365 then tls13_ext_res_binder else caught-fail) in
        {1975}let x_126: bitstring = (if v_366 then (l_115,h_114) else caught-fail) in
        {1976}let binder_key_19: bitstring = (if v_365 then catch-fail((if v_366 then hmac(@7_tls_h,early_secret_29,x_126) else fail-any)) else caught-fail) in
        {1977}let v_367: bool = not-caught-fail(binder_key_19) in
        {1978}let v_368: bitstring = catch-fail((if v_365 then (if v_367 then (early_secret_29,binder_key_19) else fail-any) else fail-any)) in
        {1979}let v_369: bool = (not-caught-fail(v_368) && success?(1-proj-2-tuple(v_368))) in
        {1980}let kb_19: mac_key = (if v_369 then 2-proj-2-tuple(v_368) else caught-fail) in
        {1981}let es_28: bitstring = (if v_369 then 1-proj-2-tuple(v_368) else caught-fail) in
        {1982}let v_370: bitstring = catch-fail((if v_369 then (empty_psk_ext,(NoPsk,zero,es_28,false)) else fail-any)) in
        {1983}let v_371: bool = (not-caught-fail(v_370) && success?(1-proj-2-tuple(v_370))) in
        {1984}let psk_data_10: bitstring = (if v_371 then 2-proj-2-tuple(v_370) else caught-fail) in
        {1985}let psk_ext_18: preSharedKeyExt = (if v_371 then 1-proj-2-tuple(v_370) else caught-fail) in
        {1986}let offer_16: params = (if v_371 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_1,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_18) else caught-fail) in
        {1987}let (client_hello_5: msg,cr_14: bytes32,kex_data_5: bitstring,psk_data_11: bitstring) = (if v_371 then (CH(cr_9,offer_16),cr_9,kex_data,psk_data_10) else fail-any) in
        {1988}event ClientOffersAead(cr_14,@7_tls_a);
        {1989}event ClientOffersHash(cr_14,@7_tls_h);
        {1990}event ClientOffersGroup(cr_14,@7_tls_g);
        {1991}out(io, client_hello_5);
        {1993}let (psk_48: preSharedKey,id_24: identityPsk,es_29: bitstring,safe_psk_13: bool) = psk_data_11 in
        (
            {1994}if (false && (psk_48 ≠ NoPsk)) then
            {1995}let client_hello_6: bitstring = (zero,client_hello_5) in
            {1997}let h_115: bitstring = catch-fail(hash(@7_tls_h,client_hello_6)) in
            {1998}let v_372: bool = not-caught-fail(h_115) in
            {1996}let l_116: label = tls13_client_early_traffic_secret in
            {1999}let x_127: bitstring = (if v_372 then (l_116,h_115) else caught-fail) in
            {2000}let atsc0_3: bitstring = catch-fail((if v_372 then hmac(@7_tls_h,es_29,x_127) else fail-any)) in
            {2001}let v_373: bool = not-caught-fail(atsc0_3) in
            {2003}let h_116: bitstring = (if v_373 then zero else caught-fail) in
            {2002}let l_117: label = (if v_373 then tls13_key else caught-fail) in
            {2004}let x_128: bitstring = (if v_373 then (l_117,h_116) else caught-fail) in
            {2005}let kc0_3: bitstring = (if v_373 then catch-fail(hmac(@7_tls_h,atsc0_3,x_128)) else caught-fail) in
            {2006}let v_374: bool = not-caught-fail(kc0_3) in
            {2008}let h_117: bitstring = (if v_374 then catch-fail(hash(@7_tls_h,client_hello_6)) else caught-fail) in
            {2009}let v_375: bool = not-caught-fail(h_117) in
            {2007}let l_118: label = (if v_374 then tls13_early_exporter_master_secret else caught-fail) in
            {2010}let x_129: bitstring = (if v_375 then (l_118,h_117) else caught-fail) in
            {2011}let ems0_6: bitstring = (if v_374 then catch-fail((if v_375 then hmac(@7_tls_h,es_29,x_129) else fail-any)) else caught-fail) in
            {2012}let v_376: bool = not-caught-fail(ems0_6) in
            {2013}let (wkc0_3: aead_key,ems0_7: bitstring) = (if v_373 then (if v_374 then (if v_376 then (kc0_3,ems0_6) else fail-any) else fail-any) else fail-any) in
            {2014}!
            {2015}in(io, (i_3: nat,ad_3: bitstring));
            {2016}if is_nat(i_3) then
            {2017}new msg_ed_2[]: bitstring;
            {2019}new st_12: stamp;
            {2020}event ClientSequenceClient0RTTDataWriteKey(@7_id_client,st_12,i_3);
            {2021}event ClientSends0(@7_id_client,cr_14,psk_48,i_3,ad_3,msg_ed_2);
            {2018}let enc_ed_2: bitstring = aead_enc(@7_tls_a,wkc0_3,i_3,ad_3,msg_ed_2) in
            {2022}out(io, enc_ed_2)
        ) | (
            {2023}in(io, server_hello_3: msg);
            {2024}let SH(sr_18: bytes32,mode_10: params) = server_hello_3 in
            (
                {2025}event ClientEchAcceptance(@7_id_client,false);
                {1992}let cur_log2_22: bitstring = (cur_log_8,client_hello_5) in
                {2026}if (true && (sr_18 = B32(HRR24,HRR8))) then
                (
                    {2027}if ((mode_10 = nego(TLS13,@7_tls_h,@7_tls_a,hrr_kex_ext(@7_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex ≠ true)) then
                    (
                        {2030}new rand24_4[]: bytes24;
                        {2031}new rand8_4[]: bytes8;
                        {2033}new s_36[]: seed;
                        {2034}let gx_8: element = dh_pub(@7_tls_g,dh_k(s_36)) in
                        {2035}let v_377: bitstring = (dh_k(s_36),gx_8) in
                        {2036}let v_378: bool = success?(1-proj-2-tuple(v_377)) in
                        {2037}let gx_9: element = (if v_378 then 2-proj-2-tuple(v_377) else caught-fail) in
                        {2038}let x_130: bitstring = (if v_378 then 1-proj-2-tuple(v_377) else caught-fail) in
                        {2029}let send_kex_3: bool = true in
                        {2039}let kex_3: kex_alg = (if v_378 then (if send_kex_3 then DHE_kex(@7_tls_g,gx_9) else DHE_group(@7_tls_g)) else caught-fail) in
                        {2040}let (kex_ext_4: keyShareExt,kex_data_6: bitstring) = (if v_378 then (client_kex_ext(kex_3),(x_130,@7_tls_g)) else fail-any) in
                        {2032}let cr_15: bytes32 = B32(rand24_4,rand8_4) in
                        {2028}let cur_log3_4: bitstring = (cur_log2_22,server_hello_3) in
                        {2043}if @7_use_psk then
                        (
                            {2042}let extra_21: extraExt = empty_extra_ext in
                            {2041}let ech_ext_5: echExt = empty_ech_ext in
                            {2044}let (psk_49: preSharedKey,id_25: identityPsk,old_es_3: bitstring,is_safe_17: bool) = psk_data_11 in
                            (
                                {2048}let k_31: bitstring = catch-fail(psk2b(psk_49)) in
                                {2049}let v_379: bool = not-caught-fail(k_31) in
                                {2047}let s_37: bitstring = zero in
                                {2050}let early_secret_30: bitstring = catch-fail((if v_379 then hmac(@7_tls_h,s_37,k_31) else fail-any)) in
                                {2051}let v_380: bool = not-caught-fail(early_secret_30) in
                                {2053}let m_38: bitstring = (if v_380 then zero else caught-fail) in
                                {2054}let h_118: bitstring = (if v_380 then catch-fail(hash(@7_tls_h,m_38)) else caught-fail) in
                                {2055}let v_381: bool = not-caught-fail(h_118) in
                                {2052}let l_119: label = (if v_380 then tls13_ext_res_binder else caught-fail) in
                                {2056}let x_131: bitstring = (if v_381 then (l_119,h_118) else caught-fail) in
                                {2057}let binder_key_20: bitstring = (if v_380 then catch-fail((if v_381 then hmac(@7_tls_h,early_secret_30,x_131) else fail-any)) else caught-fail) in
                                {2058}let v_382: bool = not-caught-fail(binder_key_20) in
                                {2059}let v_383: bitstring = catch-fail((if v_380 then (if v_382 then (early_secret_30,binder_key_20) else fail-any) else fail-any)) in
                                {2060}let v_384: bool = (not-caught-fail(v_383) && success?(1-proj-2-tuple(v_383))) in
                                {2061}let kb_20: mac_key = (if v_384 then 2-proj-2-tuple(v_383) else caught-fail) in
                                {2062}let es_30: bitstring = (if v_384 then 1-proj-2-tuple(v_383) else caught-fail) in
                                {2045}let offer_17: params = nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_13),ech_ext_5,extra_21,trunc_client_psk_ext(id_25)) in
                                {2046}let cur_log'_8: bitstring = (cur_log3_4,CH(cr_15,offer_17)) in
                                {2063}let binders_7: bitstring = (if v_384 then catch-fail(hmac(@7_tls_h,kb_20,cur_log'_8)) else caught-fail) in
                                {2064}let v_385: bool = not-caught-fail(binders_7) in
                                {2065}let v_386: bitstring = catch-fail((if v_384 then (if v_385 then (client_psk_ext(id_25,binders_7),(psk_49,id_25,es_30,is_safe_17)) else fail-any) else fail-any)) in
                                {2066}let v_387: bool = (not-caught-fail(v_386) && success?(1-proj-2-tuple(v_386))) in
                                {2067}let psk_data_12: bitstring = (if v_387 then 2-proj-2-tuple(v_386) else caught-fail) in
                                {2068}let psk_ext_19: preSharedKeyExt = (if v_387 then 1-proj-2-tuple(v_386) else caught-fail) in
                                {2069}let offer_18: params = (if v_387 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_19) else caught-fail) in
                                {2070}let (client_hello'_6: msg,cr'_6: bytes32,kex_data'_6: bitstring,psk_data'_6: bitstring) = (if v_387 then (CH(cr_15,offer_18),cr_15,kex_data_6,psk_data_12) else fail-any) in
                                {2071}event ClientOffersAead(cr'_6,@7_tls_a);
                                {2072}event ClientOffersHash(cr'_6,@7_tls_h);
                                {2073}event ClientOffersGroup(cr'_6,@7_tls_g);
                                {2074}out(io, client_hello'_6);
                                {2076}in(io, server_hello'_6: msg);
                                {2077}let SH(sr'_6: bytes32,mode'_6: params) = server_hello'_6 in
                                (
                                    {2078}if (sr'_6 = B32(HRR24,HRR8)) then
                                        {2079}out(io, unexpected_message)
                                    else
                                        {2080}let (x_132: bitstring,g_8: group) = kex_data'_6 in
                                        {2081}let (psk_offer_8: preSharedKey,id_offer_8: identityPsk,es_offer_8: bitstring,is_safe_offer_8: bool) = psk_data'_6 in
                                        {2082}event Client_PSKOffer(@7_id_client,psk_offer_8,id_offer_8,is_safe_offer_8);
                                        {2083}event Client_Rand_client(@7_id_client,cr'_6);
                                        {2084}event Client_DH_client(@7_id_client,dh_pub(g_8,x_132));
                                        {2085}event Client_server_domain(@7_id_client,s_dom_13);
                                        {2086}let SH(sr_19: bytes32,mode_11: params) = server_hello'_6 in
                                        {2087}event Client_Rand_server(@7_id_client,sr_19);
                                        {2088}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_8,gy_9: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_20: preSharedKeyExt) = mode_11 in
                                        (
                                            {2090}event Client_DH_server(@7_id_client,gy_9);
                                            {2091}let v_388: bool = (psk_ext_20 = empty_psk_ext) in
                                            {2092}let psk_50: preSharedKey = (if v_388 then NoPsk else caught-fail) in
                                            {2094}let k_32: bitstring = (if v_388 then catch-fail(psk2b(psk_50)) else caught-fail) in
                                            {2095}let v_389: bool = not-caught-fail(k_32) in
                                            {2093}let s_38: bitstring = (if v_388 then zero else caught-fail) in
                                            {2096}let early_secret_31: bitstring = (if v_388 then catch-fail((if v_389 then hmac(@7_tls_h,s_38,k_32) else fail-any)) else caught-fail) in
                                            {2097}let v_390: bool = not-caught-fail(early_secret_31) in
                                            {2099}let m_39: bitstring = (if v_390 then zero else caught-fail) in
                                            {2100}let h_119: bitstring = (if v_390 then catch-fail(hash(@7_tls_h,m_39)) else caught-fail) in
                                            {2101}let v_391: bool = not-caught-fail(h_119) in
                                            {2098}let l_120: label = (if v_390 then tls13_ext_res_binder else caught-fail) in
                                            {2102}let x_133: bitstring = (if v_391 then (l_120,h_119) else caught-fail) in
                                            {2103}let binder_key_21: bitstring = (if v_390 then catch-fail((if v_391 then hmac(@7_tls_h,early_secret_31,x_133) else fail-any)) else caught-fail) in
                                            {2104}let v_392: bool = not-caught-fail(binder_key_21) in
                                            {2105}let v_393: bitstring = (if v_388 then catch-fail((if v_390 then (if v_392 then (early_secret_31,binder_key_21) else fail-any) else fail-any)) else caught-fail) in
                                            {2106}let v_394: bool = (not-caught-fail(v_393) && success?(1-proj-2-tuple(v_393))) in
                                            {2107}let kb_21: mac_key = (if v_394 then 2-proj-2-tuple(v_393) else caught-fail) in
                                            {2108}let es_31: bitstring = (if v_394 then 1-proj-2-tuple(v_393) else caught-fail) in
                                            {2109}let v_395: bitstring = (if not(v_388) then catch-fail(psk_data'_6) else caught-fail) in
                                            {2110}let v_396: bool = (not-caught-fail(v_395) && success?(1-proj-4-tuple(v_395))) in
                                            {2111}let is_safe_18: bool = (if v_396 then 4-proj-4-tuple(v_395) else caught-fail) in
                                            {2112}let es_32: bitstring = (if v_396 then 3-proj-4-tuple(v_395) else caught-fail) in
                                            {2113}let id_26: identityPsk = (if v_396 then 2-proj-4-tuple(v_395) else caught-fail) in
                                            {2114}let psk_51: preSharedKey = (if v_396 then 1-proj-4-tuple(v_395) else caught-fail) in
                                            {2115}let (psk_52: preSharedKey,early_secret_32: bitstring,valid_8: bool,safe_psk_14: bool) = (if v_388 then (if v_394 then (NoPsk,es_31,true,false) else fail-any) else (if v_396 then (psk_51,es_32,((psk_51 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_20)),is_safe_18) else fail-any)) in
                                            {2116}event Client_PSKChoosen(@7_id_client,psk_52,safe_psk_14);
                                            {2117}if valid_8 then
                                            (
                                                {2120}new s_39[]: seed;
                                                {2118}let gxy_17: element = catch-fail(dh_decap_fun(g_8,gy_9,x_132)) in
                                                {2119}let v_397: bool = not-caught-fail(gxy_17) in
                                                {2121}let gxy_18: element = (if v_397 then gxy_17 else dh_f(s_39)) in
                                                {2122}event Client_DH_gxy(@7_id_client,gxy_18);
                                                {2124}let m_40: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2125}let v_398: bool = not-caught-fail(m_40) in
                                                {2126}let h_120: bitstring = (if v_398 then catch-fail(hash(@7_tls_h,m_40)) else caught-fail) in
                                                {2127}let v_399: bool = not-caught-fail(h_120) in
                                                {2123}let l_121: label = tls13_derived in
                                                {2128}let x_134: bitstring = (if v_399 then (l_121,h_120) else caught-fail) in
                                                {2129}let extra_22: bitstring = catch-fail((if v_398 then (if v_399 then hmac(@7_tls_h,early_secret_32,x_134) else fail-any) else fail-any)) in
                                                {2130}let v_400: bool = not-caught-fail(extra_22) in
                                                {2131}let handshake_secret_9: bitstring = (if v_400 then hmac(@7_tls_h,extra_22,gxy_18) else fail-any) in
                                                {2133}let m_41: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2134}let v_401: bool = not-caught-fail(m_41) in
                                                {2135}let h_121: bitstring = (if v_401 then catch-fail(hash(@7_tls_h,m_41)) else caught-fail) in
                                                {2136}let v_402: bool = not-caught-fail(h_121) in
                                                {2132}let l_122: label = tls13_derived in
                                                {2137}let x_135: bitstring = (if v_402 then (l_122,h_121) else caught-fail) in
                                                {2138}let extra_23: bitstring = catch-fail((if v_401 then (if v_402 then hmac(@7_tls_h,handshake_secret_9,x_135) else fail-any) else fail-any)) in
                                                {2139}let v_403: bool = not-caught-fail(extra_23) in
                                                {2140}let k_33: bitstring = (if v_403 then zero else caught-fail) in
                                                {2141}let master_secret_25: bitstring = (if v_403 then catch-fail(hmac(@7_tls_h,handshake_secret_9,k_33)) else caught-fail) in
                                                {2142}let v_404: bool = not-caught-fail(master_secret_25) in
                                                {2075}let cur_log4_6: bitstring = (cur_log3_4,client_hello'_6) in
                                                {2089}let cur_log2_23: bitstring = (cur_log4_6,server_hello'_6) in
                                                {2144}let h_122: bitstring = (if v_404 then catch-fail(hash(@7_tls_h,cur_log2_23)) else caught-fail) in
                                                {2145}let v_405: bool = not-caught-fail(h_122) in
                                                {2143}let l_123: label = (if v_404 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {2146}let x_136: bitstring = (if v_405 then (l_123,h_122) else caught-fail) in
                                                {2147}let client_hts_9: bitstring = (if v_404 then catch-fail((if v_405 then hmac(@7_tls_h,handshake_secret_9,x_136) else fail-any)) else caught-fail) in
                                                {2148}let v_406: bool = not-caught-fail(client_hts_9) in
                                                {2150}let h_123: bitstring = (if v_406 then catch-fail(hash(@7_tls_h,cur_log2_23)) else caught-fail) in
                                                {2151}let v_407: bool = not-caught-fail(h_123) in
                                                {2149}let l_124: label = (if v_406 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {2152}let x_137: bitstring = (if v_407 then (l_124,h_123) else caught-fail) in
                                                {2153}let server_hts_9: bitstring = (if v_406 then catch-fail((if v_407 then hmac(@7_tls_h,handshake_secret_9,x_137) else fail-any)) else caught-fail) in
                                                {2154}let v_408: bool = not-caught-fail(server_hts_9) in
                                                {2156}let h_124: bitstring = (if v_408 then zero else caught-fail) in
                                                {2155}let l_125: label = (if v_408 then tls13_key else caught-fail) in
                                                {2157}let x_138: bitstring = (if v_408 then (l_125,h_124) else caught-fail) in
                                                {2158}let client_wkh_9: bitstring = (if v_408 then catch-fail(hmac(@7_tls_h,client_hts_9,x_138)) else caught-fail) in
                                                {2159}let v_409: bool = not-caught-fail(client_wkh_9) in
                                                {2161}let h_125: bitstring = (if v_409 then zero else caught-fail) in
                                                {2160}let l_126: label = (if v_409 then tls13_key else caught-fail) in
                                                {2162}let x_139: bitstring = (if v_409 then (l_126,h_125) else caught-fail) in
                                                {2163}let server_wkh_9: bitstring = (if v_409 then catch-fail(hmac(@7_tls_h,server_hts_9,x_139)) else caught-fail) in
                                                {2164}let v_410: bool = not-caught-fail(server_wkh_9) in
                                                {2166}let h_126: bitstring = (if v_410 then zero else caught-fail) in
                                                {2165}let l_127: label = (if v_410 then tls13_finished else caught-fail) in
                                                {2167}let x_140: bitstring = (if v_410 then (l_127,h_126) else caught-fail) in
                                                {2168}let client_fk_9: bitstring = (if v_410 then catch-fail(hmac(@7_tls_h,client_hts_9,x_140)) else caught-fail) in
                                                {2169}let v_411: bool = not-caught-fail(client_fk_9) in
                                                {2171}let h_127: bitstring = (if v_411 then zero else caught-fail) in
                                                {2170}let l_128: label = (if v_411 then tls13_finished else caught-fail) in
                                                {2172}let x_141: bitstring = (if v_411 then (l_128,h_127) else caught-fail) in
                                                {2173}let server_fk_9: bitstring = (if v_411 then catch-fail(hmac(@7_tls_h,server_hts_9,x_141)) else caught-fail) in
                                                {2174}let v_412: bool = not-caught-fail(server_fk_9) in
                                                {2175}let (master_secret_26: bitstring,chk_16: aead_key,shk_15: aead_key,cfin_16: mac_key,sfin_15: mac_key) = (if v_403 then (if v_404 then (if v_406 then (if v_408 then (if v_409 then (if v_410 then (if v_411 then (if v_412 then (master_secret_25,client_wkh_9,server_wkh_9,client_fk_9,server_fk_9) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {2176}event Client_chk(@7_id_client,chk_16);
                                                {2177}event Client_shk(@7_id_client,shk_15);
                                                {2178}event Client_cfin(@7_id_client,cfin_16);
                                                {2179}event Client_sfin(@7_id_client,sfin_15);
                                                {2180}in(io, enc_ee_msg_8: bitstring);
                                                {2181}let ee_msg_9: msg = aead_dec(@7_tls_a,shk_15,0,zero,enc_ee_msg_8) in
                                                {2182}let EE(ech_ee_8: echExt,extra_ee_8: extraExt) = ee_msg_9 in
                                                {2183}let cur_log2_24: bitstring = (cur_log2_23,ee_msg_9) in
                                                {2184}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_6,sr_19,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_52,safe_psk_14,@7_comp_psk,master_secret_26,chk_16,0,shk_15,1,cfin_16,sfin_15,cur_log2_24)))
                                            )
                                            else
                                                {2185}out(io, illegal_parameter)
                                        )
                                        else
                                            {2186}out(io, illegal_parameter)
                                )
                                else
                                    {2187}out(io, unexpected_message)
                            )
                            else
                                {2340}get pre_shared_keys(c_dom'_5: domain,=s_dom_13,=@7_tls_h,id_27: identityPsk,psk_53: preSharedKey,idP_8: idProc,is_safe_19: bool) in
                                {2188}event Selected_one_time_used_psk(@7_id_client,psk_53,is_safe_19);
                                {2189}event Selected_psk(c_dom_6,c_dom'_5,idP_8,is_safe_19);
                                {2190}event Selected_psk_no_missmatch(@7_id_client,s_dom_13,@7_tls_h,psk_53,id_27);
                                {2191}event Selected_psk_with_ID(c_dom_6,c_dom'_5,id_27,idP_8,is_safe_19);
                                {2192}let v_413: bitstring = (id_27,psk_53,is_safe_19) in
                                {2193}let v_414: bool = success?(1-proj-3-tuple(v_413)) in
                                {2194}let is_safe_20: bool = (if v_414 then 3-proj-3-tuple(v_413) else caught-fail) in
                                {2195}let psk_54: preSharedKey = (if v_414 then 2-proj-3-tuple(v_413) else caught-fail) in
                                {2196}let id_28: identityPsk = (if v_414 then 1-proj-3-tuple(v_413) else caught-fail) in
                                {2200}let k_34: bitstring = (if v_414 then catch-fail(psk2b(psk_54)) else caught-fail) in
                                {2201}let v_415: bool = not-caught-fail(k_34) in
                                {2199}let s_40: bitstring = (if v_414 then zero else caught-fail) in
                                {2202}let early_secret_33: bitstring = (if v_414 then catch-fail((if v_415 then hmac(@7_tls_h,s_40,k_34) else fail-any)) else caught-fail) in
                                {2203}let v_416: bool = not-caught-fail(early_secret_33) in
                                {2205}let m_42: bitstring = (if v_416 then zero else caught-fail) in
                                {2206}let h_128: bitstring = (if v_416 then catch-fail(hash(@7_tls_h,m_42)) else caught-fail) in
                                {2207}let v_417: bool = not-caught-fail(h_128) in
                                {2204}let l_129: label = (if v_416 then tls13_ext_res_binder else caught-fail) in
                                {2208}let x_142: bitstring = (if v_417 then (l_129,h_128) else caught-fail) in
                                {2209}let binder_key_22: bitstring = (if v_416 then catch-fail((if v_417 then hmac(@7_tls_h,early_secret_33,x_142) else fail-any)) else caught-fail) in
                                {2210}let v_418: bool = not-caught-fail(binder_key_22) in
                                {2211}let v_419: bitstring = (if v_414 then catch-fail((if v_416 then (if v_418 then (early_secret_33,binder_key_22) else fail-any) else fail-any)) else caught-fail) in
                                {2212}let v_420: bool = (not-caught-fail(v_419) && success?(1-proj-2-tuple(v_419))) in
                                {2213}let kb_22: mac_key = (if v_420 then 2-proj-2-tuple(v_419) else caught-fail) in
                                {2214}let es_33: bitstring = (if v_420 then 1-proj-2-tuple(v_419) else caught-fail) in
                                {2197}let offer_19: params = (if v_414 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_13),ech_ext_5,extra_21,trunc_client_psk_ext(id_28)) else caught-fail) in
                                {2198}let cur_log'_9: bitstring = (if v_414 then (cur_log3_4,CH(cr_15,offer_19)) else caught-fail) in
                                {2215}let binders_8: bitstring = (if v_420 then catch-fail(hmac(@7_tls_h,kb_22,cur_log'_9)) else caught-fail) in
                                {2216}let v_421: bool = not-caught-fail(binders_8) in
                                {2217}let v_422: bitstring = catch-fail((if v_414 then (if v_420 then (if v_421 then (client_psk_ext(id_28,binders_8),(psk_54,id_28,es_33,is_safe_20)) else fail-any) else fail-any) else fail-any)) in
                                {2218}let v_423: bool = (not-caught-fail(v_422) && success?(1-proj-2-tuple(v_422))) in
                                {2219}let psk_data_13: bitstring = (if v_423 then 2-proj-2-tuple(v_422) else caught-fail) in
                                {2220}let psk_ext_21: preSharedKeyExt = (if v_423 then 1-proj-2-tuple(v_422) else caught-fail) in
                                {2221}let offer_20: params = (if v_423 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_21) else caught-fail) in
                                {2222}let (client_hello'_7: msg,cr'_7: bytes32,kex_data'_7: bitstring,psk_data'_7: bitstring) = (if v_423 then (CH(cr_15,offer_20),cr_15,kex_data_6,psk_data_13) else fail-any) in
                                {2223}event ClientOffersAead(cr'_7,@7_tls_a);
                                {2224}event ClientOffersHash(cr'_7,@7_tls_h);
                                {2225}event ClientOffersGroup(cr'_7,@7_tls_g);
                                {2226}out(io, client_hello'_7);
                                {2228}in(io, server_hello'_7: msg);
                                {2229}let SH(sr'_7: bytes32,mode'_7: params) = server_hello'_7 in
                                (
                                    {2230}if (sr'_7 = B32(HRR24,HRR8)) then
                                        {2231}out(io, unexpected_message)
                                    else
                                        {2232}let (x_143: bitstring,g_9: group) = kex_data'_7 in
                                        {2233}let (psk_offer_9: preSharedKey,id_offer_9: identityPsk,es_offer_9: bitstring,is_safe_offer_9: bool) = psk_data'_7 in
                                        {2234}event Client_PSKOffer(@7_id_client,psk_offer_9,id_offer_9,is_safe_offer_9);
                                        {2235}event Client_Rand_client(@7_id_client,cr'_7);
                                        {2236}event Client_DH_client(@7_id_client,dh_pub(g_9,x_143));
                                        {2237}event Client_server_domain(@7_id_client,s_dom_13);
                                        {2238}let SH(sr_20: bytes32,mode_12: params) = server_hello'_7 in
                                        {2239}event Client_Rand_server(@7_id_client,sr_20);
                                        {2240}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_9,gy_10: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_22: preSharedKeyExt) = mode_12 in
                                        (
                                            {2242}event Client_DH_server(@7_id_client,gy_10);
                                            {2243}let v_424: bool = (psk_ext_22 = empty_psk_ext) in
                                            {2244}let psk_55: preSharedKey = (if v_424 then NoPsk else caught-fail) in
                                            {2246}let k_35: bitstring = (if v_424 then catch-fail(psk2b(psk_55)) else caught-fail) in
                                            {2247}let v_425: bool = not-caught-fail(k_35) in
                                            {2245}let s_41: bitstring = (if v_424 then zero else caught-fail) in
                                            {2248}let early_secret_34: bitstring = (if v_424 then catch-fail((if v_425 then hmac(@7_tls_h,s_41,k_35) else fail-any)) else caught-fail) in
                                            {2249}let v_426: bool = not-caught-fail(early_secret_34) in
                                            {2251}let m_43: bitstring = (if v_426 then zero else caught-fail) in
                                            {2252}let h_129: bitstring = (if v_426 then catch-fail(hash(@7_tls_h,m_43)) else caught-fail) in
                                            {2253}let v_427: bool = not-caught-fail(h_129) in
                                            {2250}let l_130: label = (if v_426 then tls13_ext_res_binder else caught-fail) in
                                            {2254}let x_144: bitstring = (if v_427 then (l_130,h_129) else caught-fail) in
                                            {2255}let binder_key_23: bitstring = (if v_426 then catch-fail((if v_427 then hmac(@7_tls_h,early_secret_34,x_144) else fail-any)) else caught-fail) in
                                            {2256}let v_428: bool = not-caught-fail(binder_key_23) in
                                            {2257}let v_429: bitstring = (if v_424 then catch-fail((if v_426 then (if v_428 then (early_secret_34,binder_key_23) else fail-any) else fail-any)) else caught-fail) in
                                            {2258}let v_430: bool = (not-caught-fail(v_429) && success?(1-proj-2-tuple(v_429))) in
                                            {2259}let kb_23: mac_key = (if v_430 then 2-proj-2-tuple(v_429) else caught-fail) in
                                            {2260}let es_34: bitstring = (if v_430 then 1-proj-2-tuple(v_429) else caught-fail) in
                                            {2261}let v_431: bitstring = (if not(v_424) then catch-fail(psk_data'_7) else caught-fail) in
                                            {2262}let v_432: bool = (not-caught-fail(v_431) && success?(1-proj-4-tuple(v_431))) in
                                            {2263}let is_safe_21: bool = (if v_432 then 4-proj-4-tuple(v_431) else caught-fail) in
                                            {2264}let es_35: bitstring = (if v_432 then 3-proj-4-tuple(v_431) else caught-fail) in
                                            {2265}let id_29: identityPsk = (if v_432 then 2-proj-4-tuple(v_431) else caught-fail) in
                                            {2266}let psk_56: preSharedKey = (if v_432 then 1-proj-4-tuple(v_431) else caught-fail) in
                                            {2267}let (psk_57: preSharedKey,early_secret_35: bitstring,valid_9: bool,safe_psk_15: bool) = (if v_424 then (if v_430 then (NoPsk,es_34,true,false) else fail-any) else (if v_432 then (psk_56,es_35,((psk_56 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_22)),is_safe_21) else fail-any)) in
                                            {2268}event Client_PSKChoosen(@7_id_client,psk_57,safe_psk_15);
                                            {2269}if valid_9 then
                                            (
                                                {2272}new s_42[]: seed;
                                                {2270}let gxy_19: element = catch-fail(dh_decap_fun(g_9,gy_10,x_143)) in
                                                {2271}let v_433: bool = not-caught-fail(gxy_19) in
                                                {2273}let gxy_20: element = (if v_433 then gxy_19 else dh_f(s_42)) in
                                                {2274}event Client_DH_gxy(@7_id_client,gxy_20);
                                                {2276}let m_44: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2277}let v_434: bool = not-caught-fail(m_44) in
                                                {2278}let h_130: bitstring = (if v_434 then catch-fail(hash(@7_tls_h,m_44)) else caught-fail) in
                                                {2279}let v_435: bool = not-caught-fail(h_130) in
                                                {2275}let l_131: label = tls13_derived in
                                                {2280}let x_145: bitstring = (if v_435 then (l_131,h_130) else caught-fail) in
                                                {2281}let extra_24: bitstring = catch-fail((if v_434 then (if v_435 then hmac(@7_tls_h,early_secret_35,x_145) else fail-any) else fail-any)) in
                                                {2282}let v_436: bool = not-caught-fail(extra_24) in
                                                {2283}let handshake_secret_10: bitstring = (if v_436 then hmac(@7_tls_h,extra_24,gxy_20) else fail-any) in
                                                {2285}let m_45: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                                {2286}let v_437: bool = not-caught-fail(m_45) in
                                                {2287}let h_131: bitstring = (if v_437 then catch-fail(hash(@7_tls_h,m_45)) else caught-fail) in
                                                {2288}let v_438: bool = not-caught-fail(h_131) in
                                                {2284}let l_132: label = tls13_derived in
                                                {2289}let x_146: bitstring = (if v_438 then (l_132,h_131) else caught-fail) in
                                                {2290}let extra_25: bitstring = catch-fail((if v_437 then (if v_438 then hmac(@7_tls_h,handshake_secret_10,x_146) else fail-any) else fail-any)) in
                                                {2291}let v_439: bool = not-caught-fail(extra_25) in
                                                {2292}let k_36: bitstring = (if v_439 then zero else caught-fail) in
                                                {2293}let master_secret_27: bitstring = (if v_439 then catch-fail(hmac(@7_tls_h,handshake_secret_10,k_36)) else caught-fail) in
                                                {2294}let v_440: bool = not-caught-fail(master_secret_27) in
                                                {2227}let cur_log4_7: bitstring = (cur_log3_4,client_hello'_7) in
                                                {2241}let cur_log2_25: bitstring = (cur_log4_7,server_hello'_7) in
                                                {2296}let h_132: bitstring = (if v_440 then catch-fail(hash(@7_tls_h,cur_log2_25)) else caught-fail) in
                                                {2297}let v_441: bool = not-caught-fail(h_132) in
                                                {2295}let l_133: label = (if v_440 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {2298}let x_147: bitstring = (if v_441 then (l_133,h_132) else caught-fail) in
                                                {2299}let client_hts_10: bitstring = (if v_440 then catch-fail((if v_441 then hmac(@7_tls_h,handshake_secret_10,x_147) else fail-any)) else caught-fail) in
                                                {2300}let v_442: bool = not-caught-fail(client_hts_10) in
                                                {2302}let h_133: bitstring = (if v_442 then catch-fail(hash(@7_tls_h,cur_log2_25)) else caught-fail) in
                                                {2303}let v_443: bool = not-caught-fail(h_133) in
                                                {2301}let l_134: label = (if v_442 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {2304}let x_148: bitstring = (if v_443 then (l_134,h_133) else caught-fail) in
                                                {2305}let server_hts_10: bitstring = (if v_442 then catch-fail((if v_443 then hmac(@7_tls_h,handshake_secret_10,x_148) else fail-any)) else caught-fail) in
                                                {2306}let v_444: bool = not-caught-fail(server_hts_10) in
                                                {2308}let h_134: bitstring = (if v_444 then zero else caught-fail) in
                                                {2307}let l_135: label = (if v_444 then tls13_key else caught-fail) in
                                                {2309}let x_149: bitstring = (if v_444 then (l_135,h_134) else caught-fail) in
                                                {2310}let client_wkh_10: bitstring = (if v_444 then catch-fail(hmac(@7_tls_h,client_hts_10,x_149)) else caught-fail) in
                                                {2311}let v_445: bool = not-caught-fail(client_wkh_10) in
                                                {2313}let h_135: bitstring = (if v_445 then zero else caught-fail) in
                                                {2312}let l_136: label = (if v_445 then tls13_key else caught-fail) in
                                                {2314}let x_150: bitstring = (if v_445 then (l_136,h_135) else caught-fail) in
                                                {2315}let server_wkh_10: bitstring = (if v_445 then catch-fail(hmac(@7_tls_h,server_hts_10,x_150)) else caught-fail) in
                                                {2316}let v_446: bool = not-caught-fail(server_wkh_10) in
                                                {2318}let h_136: bitstring = (if v_446 then zero else caught-fail) in
                                                {2317}let l_137: label = (if v_446 then tls13_finished else caught-fail) in
                                                {2319}let x_151: bitstring = (if v_446 then (l_137,h_136) else caught-fail) in
                                                {2320}let client_fk_10: bitstring = (if v_446 then catch-fail(hmac(@7_tls_h,client_hts_10,x_151)) else caught-fail) in
                                                {2321}let v_447: bool = not-caught-fail(client_fk_10) in
                                                {2323}let h_137: bitstring = (if v_447 then zero else caught-fail) in
                                                {2322}let l_138: label = (if v_447 then tls13_finished else caught-fail) in
                                                {2324}let x_152: bitstring = (if v_447 then (l_138,h_137) else caught-fail) in
                                                {2325}let server_fk_10: bitstring = (if v_447 then catch-fail(hmac(@7_tls_h,server_hts_10,x_152)) else caught-fail) in
                                                {2326}let v_448: bool = not-caught-fail(server_fk_10) in
                                                {2327}let (master_secret_28: bitstring,chk_17: aead_key,shk_16: aead_key,cfin_17: mac_key,sfin_16: mac_key) = (if v_439 then (if v_440 then (if v_442 then (if v_444 then (if v_445 then (if v_446 then (if v_447 then (if v_448 then (master_secret_27,client_wkh_10,server_wkh_10,client_fk_10,server_fk_10) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {2328}event Client_chk(@7_id_client,chk_17);
                                                {2329}event Client_shk(@7_id_client,shk_16);
                                                {2330}event Client_cfin(@7_id_client,cfin_17);
                                                {2331}event Client_sfin(@7_id_client,sfin_16);
                                                {2332}in(io, enc_ee_msg_9: bitstring);
                                                {2333}let ee_msg_10: msg = aead_dec(@7_tls_a,shk_16,0,zero,enc_ee_msg_9) in
                                                {2334}let EE(ech_ee_9: echExt,extra_ee_9: extraExt) = ee_msg_10 in
                                                {2335}let cur_log2_26: bitstring = (cur_log2_25,ee_msg_10) in
                                                {2336}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_7,sr_20,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_57,safe_psk_15,@7_comp_psk,master_secret_28,chk_17,0,shk_16,1,cfin_17,sfin_16,cur_log2_26)))
                                            )
                                            else
                                                {2337}out(io, illegal_parameter)
                                        )
                                        else
                                            {2338}out(io, illegal_parameter)
                                )
                                else
                                    {2339}out(io, unexpected_message)
                        )
                        else
                            {2341}let psk_58: preSharedKey = NoPsk in
                            {2343}let k_37: bitstring = catch-fail(psk2b(psk_58)) in
                            {2344}let v_449: bool = not-caught-fail(k_37) in
                            {2342}let s_43: bitstring = zero in
                            {2345}let early_secret_36: bitstring = catch-fail((if v_449 then hmac(@7_tls_h,s_43,k_37) else fail-any)) in
                            {2346}let v_450: bool = not-caught-fail(early_secret_36) in
                            {2348}let m_46: bitstring = (if v_450 then zero else caught-fail) in
                            {2349}let h_138: bitstring = (if v_450 then catch-fail(hash(@7_tls_h,m_46)) else caught-fail) in
                            {2350}let v_451: bool = not-caught-fail(h_138) in
                            {2347}let l_139: label = (if v_450 then tls13_ext_res_binder else caught-fail) in
                            {2351}let x_153: bitstring = (if v_451 then (l_139,h_138) else caught-fail) in
                            {2352}let binder_key_24: bitstring = (if v_450 then catch-fail((if v_451 then hmac(@7_tls_h,early_secret_36,x_153) else fail-any)) else caught-fail) in
                            {2353}let v_452: bool = not-caught-fail(binder_key_24) in
                            {2354}let v_453: bitstring = catch-fail((if v_450 then (if v_452 then (early_secret_36,binder_key_24) else fail-any) else fail-any)) in
                            {2355}let v_454: bool = (not-caught-fail(v_453) && success?(1-proj-2-tuple(v_453))) in
                            {2356}let kb_24: mac_key = (if v_454 then 2-proj-2-tuple(v_453) else caught-fail) in
                            {2357}let es_36: bitstring = (if v_454 then 1-proj-2-tuple(v_453) else caught-fail) in
                            {2358}let v_455: bitstring = catch-fail((if v_454 then (empty_psk_ext,(NoPsk,zero,es_36,false)) else fail-any)) in
                            {2359}let v_456: bool = (not-caught-fail(v_455) && success?(1-proj-2-tuple(v_455))) in
                            {2360}let psk_data_14: bitstring = (if v_456 then 2-proj-2-tuple(v_455) else caught-fail) in
                            {2361}let psk_ext_23: preSharedKeyExt = (if v_456 then 1-proj-2-tuple(v_455) else caught-fail) in
                            {2362}let offer_21: params = (if v_456 then nego(TLS13,@7_tls_h,@7_tls_a,kex_ext_4,SNI(s_dom_13),empty_ech_ext,empty_extra_ext,psk_ext_23) else caught-fail) in
                            {2363}let (client_hello'_8: msg,cr'_8: bytes32,kex_data'_8: bitstring,psk_data'_8: bitstring) = (if v_456 then (CH(cr_15,offer_21),cr_15,kex_data_6,psk_data_14) else fail-any) in
                            {2364}event ClientOffersAead(cr'_8,@7_tls_a);
                            {2365}event ClientOffersHash(cr'_8,@7_tls_h);
                            {2366}event ClientOffersGroup(cr'_8,@7_tls_g);
                            {2367}out(io, client_hello'_8);
                            {2369}in(io, server_hello'_8: msg);
                            {2370}let SH(sr'_8: bytes32,mode'_8: params) = server_hello'_8 in
                            (
                                {2371}if (sr'_8 = B32(HRR24,HRR8)) then
                                    {2372}out(io, unexpected_message)
                                else
                                    {2373}let (x_154: bitstring,g_10: group) = kex_data'_8 in
                                    {2374}let (psk_offer_10: preSharedKey,id_offer_10: identityPsk,es_offer_10: bitstring,is_safe_offer_10: bool) = psk_data'_8 in
                                    {2375}event Client_PSKOffer(@7_id_client,psk_offer_10,id_offer_10,is_safe_offer_10);
                                    {2376}event Client_Rand_client(@7_id_client,cr'_8);
                                    {2377}event Client_DH_client(@7_id_client,dh_pub(g_10,x_154));
                                    {2378}event Client_server_domain(@7_id_client,s_dom_13);
                                    {2379}let SH(sr_21: bytes32,mode_13: params) = server_hello'_8 in
                                    {2380}event Client_Rand_server(@7_id_client,sr_21);
                                    {2381}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_10,gy_11: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_24: preSharedKeyExt) = mode_13 in
                                    (
                                        {2383}event Client_DH_server(@7_id_client,gy_11);
                                        {2384}let v_457: bool = (psk_ext_24 = empty_psk_ext) in
                                        {2385}let psk_59: preSharedKey = (if v_457 then NoPsk else caught-fail) in
                                        {2387}let k_38: bitstring = (if v_457 then catch-fail(psk2b(psk_59)) else caught-fail) in
                                        {2388}let v_458: bool = not-caught-fail(k_38) in
                                        {2386}let s_44: bitstring = (if v_457 then zero else caught-fail) in
                                        {2389}let early_secret_37: bitstring = (if v_457 then catch-fail((if v_458 then hmac(@7_tls_h,s_44,k_38) else fail-any)) else caught-fail) in
                                        {2390}let v_459: bool = not-caught-fail(early_secret_37) in
                                        {2392}let m_47: bitstring = (if v_459 then zero else caught-fail) in
                                        {2393}let h_139: bitstring = (if v_459 then catch-fail(hash(@7_tls_h,m_47)) else caught-fail) in
                                        {2394}let v_460: bool = not-caught-fail(h_139) in
                                        {2391}let l_140: label = (if v_459 then tls13_ext_res_binder else caught-fail) in
                                        {2395}let x_155: bitstring = (if v_460 then (l_140,h_139) else caught-fail) in
                                        {2396}let binder_key_25: bitstring = (if v_459 then catch-fail((if v_460 then hmac(@7_tls_h,early_secret_37,x_155) else fail-any)) else caught-fail) in
                                        {2397}let v_461: bool = not-caught-fail(binder_key_25) in
                                        {2398}let v_462: bitstring = (if v_457 then catch-fail((if v_459 then (if v_461 then (early_secret_37,binder_key_25) else fail-any) else fail-any)) else caught-fail) in
                                        {2399}let v_463: bool = (not-caught-fail(v_462) && success?(1-proj-2-tuple(v_462))) in
                                        {2400}let kb_25: mac_key = (if v_463 then 2-proj-2-tuple(v_462) else caught-fail) in
                                        {2401}let es_37: bitstring = (if v_463 then 1-proj-2-tuple(v_462) else caught-fail) in
                                        {2402}let v_464: bitstring = (if not(v_457) then catch-fail(psk_data'_8) else caught-fail) in
                                        {2403}let v_465: bool = (not-caught-fail(v_464) && success?(1-proj-4-tuple(v_464))) in
                                        {2404}let is_safe_22: bool = (if v_465 then 4-proj-4-tuple(v_464) else caught-fail) in
                                        {2405}let es_38: bitstring = (if v_465 then 3-proj-4-tuple(v_464) else caught-fail) in
                                        {2406}let id_30: identityPsk = (if v_465 then 2-proj-4-tuple(v_464) else caught-fail) in
                                        {2407}let psk_60: preSharedKey = (if v_465 then 1-proj-4-tuple(v_464) else caught-fail) in
                                        {2408}let (psk_61: preSharedKey,early_secret_38: bitstring,valid_10: bool,safe_psk_16: bool) = (if v_457 then (if v_463 then (NoPsk,es_37,true,false) else fail-any) else (if v_465 then (psk_60,es_38,((psk_60 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_24)),is_safe_22) else fail-any)) in
                                        {2409}event Client_PSKChoosen(@7_id_client,psk_61,safe_psk_16);
                                        {2410}if valid_10 then
                                        (
                                            {2413}new s_45[]: seed;
                                            {2411}let gxy_21: element = catch-fail(dh_decap_fun(g_10,gy_11,x_154)) in
                                            {2412}let v_466: bool = not-caught-fail(gxy_21) in
                                            {2414}let gxy_22: element = (if v_466 then gxy_21 else dh_f(s_45)) in
                                            {2415}event Client_DH_gxy(@7_id_client,gxy_22);
                                            {2417}let m_48: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                            {2418}let v_467: bool = not-caught-fail(m_48) in
                                            {2419}let h_140: bitstring = (if v_467 then catch-fail(hash(@7_tls_h,m_48)) else caught-fail) in
                                            {2420}let v_468: bool = not-caught-fail(h_140) in
                                            {2416}let l_141: label = tls13_derived in
                                            {2421}let x_156: bitstring = (if v_468 then (l_141,h_140) else caught-fail) in
                                            {2422}let extra_26: bitstring = catch-fail((if v_467 then (if v_468 then hmac(@7_tls_h,early_secret_38,x_156) else fail-any) else fail-any)) in
                                            {2423}let v_469: bool = not-caught-fail(extra_26) in
                                            {2424}let handshake_secret_11: bitstring = (if v_469 then hmac(@7_tls_h,extra_26,gxy_22) else fail-any) in
                                            {2426}let m_49: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                            {2427}let v_470: bool = not-caught-fail(m_49) in
                                            {2428}let h_141: bitstring = (if v_470 then catch-fail(hash(@7_tls_h,m_49)) else caught-fail) in
                                            {2429}let v_471: bool = not-caught-fail(h_141) in
                                            {2425}let l_142: label = tls13_derived in
                                            {2430}let x_157: bitstring = (if v_471 then (l_142,h_141) else caught-fail) in
                                            {2431}let extra_27: bitstring = catch-fail((if v_470 then (if v_471 then hmac(@7_tls_h,handshake_secret_11,x_157) else fail-any) else fail-any)) in
                                            {2432}let v_472: bool = not-caught-fail(extra_27) in
                                            {2433}let k_39: bitstring = (if v_472 then zero else caught-fail) in
                                            {2434}let master_secret_29: bitstring = (if v_472 then catch-fail(hmac(@7_tls_h,handshake_secret_11,k_39)) else caught-fail) in
                                            {2435}let v_473: bool = not-caught-fail(master_secret_29) in
                                            {2368}let cur_log4_8: bitstring = (cur_log3_4,client_hello'_8) in
                                            {2382}let cur_log2_27: bitstring = (cur_log4_8,server_hello'_8) in
                                            {2437}let h_142: bitstring = (if v_473 then catch-fail(hash(@7_tls_h,cur_log2_27)) else caught-fail) in
                                            {2438}let v_474: bool = not-caught-fail(h_142) in
                                            {2436}let l_143: label = (if v_473 then tls13_client_handshake_traffic_secret else caught-fail) in
                                            {2439}let x_158: bitstring = (if v_474 then (l_143,h_142) else caught-fail) in
                                            {2440}let client_hts_11: bitstring = (if v_473 then catch-fail((if v_474 then hmac(@7_tls_h,handshake_secret_11,x_158) else fail-any)) else caught-fail) in
                                            {2441}let v_475: bool = not-caught-fail(client_hts_11) in
                                            {2443}let h_143: bitstring = (if v_475 then catch-fail(hash(@7_tls_h,cur_log2_27)) else caught-fail) in
                                            {2444}let v_476: bool = not-caught-fail(h_143) in
                                            {2442}let l_144: label = (if v_475 then tls13_server_handshake_traffic_secret else caught-fail) in
                                            {2445}let x_159: bitstring = (if v_476 then (l_144,h_143) else caught-fail) in
                                            {2446}let server_hts_11: bitstring = (if v_475 then catch-fail((if v_476 then hmac(@7_tls_h,handshake_secret_11,x_159) else fail-any)) else caught-fail) in
                                            {2447}let v_477: bool = not-caught-fail(server_hts_11) in
                                            {2449}let h_144: bitstring = (if v_477 then zero else caught-fail) in
                                            {2448}let l_145: label = (if v_477 then tls13_key else caught-fail) in
                                            {2450}let x_160: bitstring = (if v_477 then (l_145,h_144) else caught-fail) in
                                            {2451}let client_wkh_11: bitstring = (if v_477 then catch-fail(hmac(@7_tls_h,client_hts_11,x_160)) else caught-fail) in
                                            {2452}let v_478: bool = not-caught-fail(client_wkh_11) in
                                            {2454}let h_145: bitstring = (if v_478 then zero else caught-fail) in
                                            {2453}let l_146: label = (if v_478 then tls13_key else caught-fail) in
                                            {2455}let x_161: bitstring = (if v_478 then (l_146,h_145) else caught-fail) in
                                            {2456}let server_wkh_11: bitstring = (if v_478 then catch-fail(hmac(@7_tls_h,server_hts_11,x_161)) else caught-fail) in
                                            {2457}let v_479: bool = not-caught-fail(server_wkh_11) in
                                            {2459}let h_146: bitstring = (if v_479 then zero else caught-fail) in
                                            {2458}let l_147: label = (if v_479 then tls13_finished else caught-fail) in
                                            {2460}let x_162: bitstring = (if v_479 then (l_147,h_146) else caught-fail) in
                                            {2461}let client_fk_11: bitstring = (if v_479 then catch-fail(hmac(@7_tls_h,client_hts_11,x_162)) else caught-fail) in
                                            {2462}let v_480: bool = not-caught-fail(client_fk_11) in
                                            {2464}let h_147: bitstring = (if v_480 then zero else caught-fail) in
                                            {2463}let l_148: label = (if v_480 then tls13_finished else caught-fail) in
                                            {2465}let x_163: bitstring = (if v_480 then (l_148,h_147) else caught-fail) in
                                            {2466}let server_fk_11: bitstring = (if v_480 then catch-fail(hmac(@7_tls_h,server_hts_11,x_163)) else caught-fail) in
                                            {2467}let v_481: bool = not-caught-fail(server_fk_11) in
                                            {2468}let (master_secret_30: bitstring,chk_18: aead_key,shk_17: aead_key,cfin_18: mac_key,sfin_17: mac_key) = (if v_472 then (if v_473 then (if v_475 then (if v_477 then (if v_478 then (if v_479 then (if v_480 then (if v_481 then (master_secret_29,client_wkh_11,server_wkh_11,client_fk_11,server_fk_11) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                            {2469}event Client_chk(@7_id_client,chk_18);
                                            {2470}event Client_shk(@7_id_client,shk_17);
                                            {2471}event Client_cfin(@7_id_client,cfin_18);
                                            {2472}event Client_sfin(@7_id_client,sfin_17);
                                            {2473}in(io, enc_ee_msg_10: bitstring);
                                            {2474}let ee_msg_11: msg = aead_dec(@7_tls_a,shk_17,0,zero,enc_ee_msg_10) in
                                            {2475}let EE(ech_ee_10: echExt,extra_ee_10: extraExt) = ee_msg_11 in
                                            {2476}let cur_log2_28: bitstring = (cur_log2_27,ee_msg_11) in
                                            {2477}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr'_8,sr_21,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_61,safe_psk_16,@7_comp_psk,master_secret_30,chk_18,0,shk_17,1,cfin_18,sfin_17,cur_log2_28)))
                                        )
                                        else
                                            {2478}out(io, illegal_parameter)
                                    )
                                    else
                                        {2479}out(io, illegal_parameter)
                            )
                            else
                                {2480}out(io, unexpected_message)
                    )
                    else
                        {2481}out(io, illegal_parameter)
                )
                else
                    {2482}if send_kex then
                    (
                        {2483}let (x_164: bitstring,g_11: group) = kex_data_5 in
                        {2484}let (psk_offer_11: preSharedKey,id_offer_11: identityPsk,es_offer_11: bitstring,is_safe_offer_11: bool) = psk_data_11 in
                        {2485}event Client_PSKOffer(@7_id_client,psk_offer_11,id_offer_11,is_safe_offer_11);
                        {2486}event Client_Rand_client(@7_id_client,cr_14);
                        {2487}event Client_DH_client(@7_id_client,dh_pub(g_11,x_164));
                        {2488}event Client_server_domain(@7_id_client,s_dom_13);
                        {2489}let SH(sr_22: bytes32,mode_14: params) = server_hello_3 in
                        {2490}event Client_Rand_server(@7_id_client,sr_22);
                        {2491}let nego(=TLS13,=@7_tls_h,=@7_tls_a,server_kex_ext(DHE_kex(=g_11,gy_12: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_25: preSharedKeyExt) = mode_14 in
                        (
                            {2493}event Client_DH_server(@7_id_client,gy_12);
                            {2494}let v_482: bool = (psk_ext_25 = empty_psk_ext) in
                            {2495}let psk_62: preSharedKey = (if v_482 then NoPsk else caught-fail) in
                            {2497}let k_40: bitstring = (if v_482 then catch-fail(psk2b(psk_62)) else caught-fail) in
                            {2498}let v_483: bool = not-caught-fail(k_40) in
                            {2496}let s_46: bitstring = (if v_482 then zero else caught-fail) in
                            {2499}let early_secret_39: bitstring = (if v_482 then catch-fail((if v_483 then hmac(@7_tls_h,s_46,k_40) else fail-any)) else caught-fail) in
                            {2500}let v_484: bool = not-caught-fail(early_secret_39) in
                            {2502}let m_50: bitstring = (if v_484 then zero else caught-fail) in
                            {2503}let h_148: bitstring = (if v_484 then catch-fail(hash(@7_tls_h,m_50)) else caught-fail) in
                            {2504}let v_485: bool = not-caught-fail(h_148) in
                            {2501}let l_149: label = (if v_484 then tls13_ext_res_binder else caught-fail) in
                            {2505}let x_165: bitstring = (if v_485 then (l_149,h_148) else caught-fail) in
                            {2506}let binder_key_26: bitstring = (if v_484 then catch-fail((if v_485 then hmac(@7_tls_h,early_secret_39,x_165) else fail-any)) else caught-fail) in
                            {2507}let v_486: bool = not-caught-fail(binder_key_26) in
                            {2508}let v_487: bitstring = (if v_482 then catch-fail((if v_484 then (if v_486 then (early_secret_39,binder_key_26) else fail-any) else fail-any)) else caught-fail) in
                            {2509}let v_488: bool = (not-caught-fail(v_487) && success?(1-proj-2-tuple(v_487))) in
                            {2510}let kb_26: mac_key = (if v_488 then 2-proj-2-tuple(v_487) else caught-fail) in
                            {2511}let es_39: bitstring = (if v_488 then 1-proj-2-tuple(v_487) else caught-fail) in
                            {2512}let v_489: bitstring = (if not(v_482) then catch-fail(psk_data_11) else caught-fail) in
                            {2513}let v_490: bool = (not-caught-fail(v_489) && success?(1-proj-4-tuple(v_489))) in
                            {2514}let is_safe_23: bool = (if v_490 then 4-proj-4-tuple(v_489) else caught-fail) in
                            {2515}let es_40: bitstring = (if v_490 then 3-proj-4-tuple(v_489) else caught-fail) in
                            {2516}let id_31: identityPsk = (if v_490 then 2-proj-4-tuple(v_489) else caught-fail) in
                            {2517}let psk_63: preSharedKey = (if v_490 then 1-proj-4-tuple(v_489) else caught-fail) in
                            {2518}let (psk_64: preSharedKey,early_secret_40: bitstring,valid_11: bool,safe_psk_17: bool) = (if v_482 then (if v_488 then (NoPsk,es_39,true,false) else fail-any) else (if v_490 then (psk_63,es_40,((psk_63 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_25)),is_safe_23) else fail-any)) in
                            {2519}event Client_PSKChoosen(@7_id_client,psk_64,safe_psk_17);
                            {2520}if valid_11 then
                            (
                                {2523}new s_47[]: seed;
                                {2521}let gxy_23: element = catch-fail(dh_decap_fun(g_11,gy_12,x_164)) in
                                {2522}let v_491: bool = not-caught-fail(gxy_23) in
                                {2524}let gxy_24: element = (if v_491 then gxy_23 else dh_f(s_47)) in
                                {2525}event Client_DH_gxy(@7_id_client,gxy_24);
                                {2527}let m_51: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                {2528}let v_492: bool = not-caught-fail(m_51) in
                                {2529}let h_149: bitstring = (if v_492 then catch-fail(hash(@7_tls_h,m_51)) else caught-fail) in
                                {2530}let v_493: bool = not-caught-fail(h_149) in
                                {2526}let l_150: label = tls13_derived in
                                {2531}let x_166: bitstring = (if v_493 then (l_150,h_149) else caught-fail) in
                                {2532}let extra_28: bitstring = catch-fail((if v_492 then (if v_493 then hmac(@7_tls_h,early_secret_40,x_166) else fail-any) else fail-any)) in
                                {2533}let v_494: bool = not-caught-fail(extra_28) in
                                {2534}let handshake_secret_12: bitstring = (if v_494 then hmac(@7_tls_h,extra_28,gxy_24) else fail-any) in
                                {2536}let m_52: bitstring = catch-fail(hash(@7_tls_h,zero)) in
                                {2537}let v_495: bool = not-caught-fail(m_52) in
                                {2538}let h_150: bitstring = (if v_495 then catch-fail(hash(@7_tls_h,m_52)) else caught-fail) in
                                {2539}let v_496: bool = not-caught-fail(h_150) in
                                {2535}let l_151: label = tls13_derived in
                                {2540}let x_167: bitstring = (if v_496 then (l_151,h_150) else caught-fail) in
                                {2541}let extra_29: bitstring = catch-fail((if v_495 then (if v_496 then hmac(@7_tls_h,handshake_secret_12,x_167) else fail-any) else fail-any)) in
                                {2542}let v_497: bool = not-caught-fail(extra_29) in
                                {2543}let k_41: bitstring = (if v_497 then zero else caught-fail) in
                                {2544}let master_secret_31: bitstring = (if v_497 then catch-fail(hmac(@7_tls_h,handshake_secret_12,k_41)) else caught-fail) in
                                {2545}let v_498: bool = not-caught-fail(master_secret_31) in
                                {2492}let cur_log2_29: bitstring = (cur_log2_22,server_hello_3) in
                                {2547}let h_151: bitstring = (if v_498 then catch-fail(hash(@7_tls_h,cur_log2_29)) else caught-fail) in
                                {2548}let v_499: bool = not-caught-fail(h_151) in
                                {2546}let l_152: label = (if v_498 then tls13_client_handshake_traffic_secret else caught-fail) in
                                {2549}let x_168: bitstring = (if v_499 then (l_152,h_151) else caught-fail) in
                                {2550}let client_hts_12: bitstring = (if v_498 then catch-fail((if v_499 then hmac(@7_tls_h,handshake_secret_12,x_168) else fail-any)) else caught-fail) in
                                {2551}let v_500: bool = not-caught-fail(client_hts_12) in
                                {2553}let h_152: bitstring = (if v_500 then catch-fail(hash(@7_tls_h,cur_log2_29)) else caught-fail) in
                                {2554}let v_501: bool = not-caught-fail(h_152) in
                                {2552}let l_153: label = (if v_500 then tls13_server_handshake_traffic_secret else caught-fail) in
                                {2555}let x_169: bitstring = (if v_501 then (l_153,h_152) else caught-fail) in
                                {2556}let server_hts_12: bitstring = (if v_500 then catch-fail((if v_501 then hmac(@7_tls_h,handshake_secret_12,x_169) else fail-any)) else caught-fail) in
                                {2557}let v_502: bool = not-caught-fail(server_hts_12) in
                                {2559}let h_153: bitstring = (if v_502 then zero else caught-fail) in
                                {2558}let l_154: label = (if v_502 then tls13_key else caught-fail) in
                                {2560}let x_170: bitstring = (if v_502 then (l_154,h_153) else caught-fail) in
                                {2561}let client_wkh_12: bitstring = (if v_502 then catch-fail(hmac(@7_tls_h,client_hts_12,x_170)) else caught-fail) in
                                {2562}let v_503: bool = not-caught-fail(client_wkh_12) in
                                {2564}let h_154: bitstring = (if v_503 then zero else caught-fail) in
                                {2563}let l_155: label = (if v_503 then tls13_key else caught-fail) in
                                {2565}let x_171: bitstring = (if v_503 then (l_155,h_154) else caught-fail) in
                                {2566}let server_wkh_12: bitstring = (if v_503 then catch-fail(hmac(@7_tls_h,server_hts_12,x_171)) else caught-fail) in
                                {2567}let v_504: bool = not-caught-fail(server_wkh_12) in
                                {2569}let h_155: bitstring = (if v_504 then zero else caught-fail) in
                                {2568}let l_156: label = (if v_504 then tls13_finished else caught-fail) in
                                {2570}let x_172: bitstring = (if v_504 then (l_156,h_155) else caught-fail) in
                                {2571}let client_fk_12: bitstring = (if v_504 then catch-fail(hmac(@7_tls_h,client_hts_12,x_172)) else caught-fail) in
                                {2572}let v_505: bool = not-caught-fail(client_fk_12) in
                                {2574}let h_156: bitstring = (if v_505 then zero else caught-fail) in
                                {2573}let l_157: label = (if v_505 then tls13_finished else caught-fail) in
                                {2575}let x_173: bitstring = (if v_505 then (l_157,h_156) else caught-fail) in
                                {2576}let server_fk_12: bitstring = (if v_505 then catch-fail(hmac(@7_tls_h,server_hts_12,x_173)) else caught-fail) in
                                {2577}let v_506: bool = not-caught-fail(server_fk_12) in
                                {2578}let (master_secret_32: bitstring,chk_19: aead_key,shk_18: aead_key,cfin_19: mac_key,sfin_18: mac_key) = (if v_497 then (if v_498 then (if v_500 then (if v_502 then (if v_503 then (if v_504 then (if v_505 then (if v_506 then (master_secret_31,client_wkh_12,server_wkh_12,client_fk_12,server_fk_12) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                {2579}event Client_chk(@7_id_client,chk_19);
                                {2580}event Client_shk(@7_id_client,shk_18);
                                {2581}event Client_cfin(@7_id_client,cfin_19);
                                {2582}event Client_sfin(@7_id_client,sfin_18);
                                {2583}in(io, enc_ee_msg_11: bitstring);
                                {2584}let ee_msg_12: msg = aead_dec(@7_tls_a,shk_18,0,zero,enc_ee_msg_11) in
                                {2585}let EE(ech_ee_11: echExt,extra_ee_11: extraExt) = ee_msg_12 in
                                {2586}let cur_log2_30: bitstring = (cur_log2_29,ee_msg_12) in
                                {2587}out(ch_client_after_EE, (@7_id_client,ArgsClientAfterEE(cr_14,sr_22,@7_tls_h,@7_tls_a,c_dom_6,s_dom_13,psk_64,safe_psk_17,@7_comp_psk,master_secret_32,chk_19,0,shk_18,1,cfin_19,sfin_18,cur_log2_30)))
                            )
                            else
                                {2588}out(io, illegal_parameter)
                        )
                        else
                            {2589}out(io, illegal_parameter)
                    )
                    else
                        {2590}out(io, illegal_parameter)
            )
            else
                {2591}out(io, unexpected_message)
        )
) | (
    0
) | (
    {2592}!
    {2593}new id_server_4: idProc;
    {2594}in(io, s_dom_14: domain);
    {2595}event Same(s_dom_14);
    {2605}in(io, use_psk_1: bool);
    {2606}new @5_st[]: stamp;
    {2607}event PreciseInput(@5_st,use_psk_1);
    {2608}let () = () in
    {2609}event Same(use_psk_1);
    {2610}in(io, req_cert_3: bool);
    {2611}new @5_st_1[]: stamp;
    {2612}event PreciseInput(@5_st_1,req_cert_3);
    {2613}let () = () in
    {2614}event Same(req_cert_3);
    {2615}in(io, o_client_hello: msg);
    {2616}let CH(cr_16: bytes32,nego(=TLS13,c_h_alg: hash_alg,c_a_alg: aead_alg,kex_ext_5: keyShareExt,sni_ext_2: sniExt,ech_ext_6: echExt,extra_ext_3: extraExt,psk_ext_26: preSharedKeyExt)) = o_client_hello in
    (
        {2617}if (sni_ext_2 = SNI(s_dom_14)) then
        (
            {2808}get ech_configurations(ech_config(config_id: configId,ech_g_2: group,pkR_1: element,=s_dom_14,ech_h_2: hash_alg,ech_a_2: aead_alg),skR_1: bitstring) in
            {2620}new @4_st[]: stamp;
            {2618}let ech_conf: echConfig = ech_config(config_id,ech_g_2,pkR_1,s_dom_14,ech_h_2,ech_a_2) in
            {2619}let @4_x: bitstring = (ech_conf,skR_1) in
            {2621}event PreciseInput(@4_st,@4_x);
            {2622}let () = () in
            {2604}let use_ech: bool = false in
            {2596}let id_server_5: idProc = id_server_4 in
            {2623}event ServerChoosesEchConfig(id_server_5,ech_conf,use_ech);
            {2624}let v_507: echConfig = ech_conf in
            {2625}let v_508: bool = success?(1-proj-ech_config(v_507)) in
            {2626}let a_alg_8: aead_alg = (if v_508 then 6-proj-ech_config(v_507) else caught-fail) in
            {2627}let h_alg_11: hash_alg = (if v_508 then 5-proj-ech_config(v_507) else caught-fail) in
            {2628}let s_dom_15: domain = (if v_508 then 4-proj-ech_config(v_507) else caught-fail) in
            {2629}let pkR_2: element = (if v_508 then 3-proj-ech_config(v_507) else caught-fail) in
            {2630}let g_12: group = (if v_508 then 2-proj-ech_config(v_507) else caught-fail) in
            {2631}let config_id_1: configId = (if v_508 then 1-proj-ech_config(v_507) else caught-fail) in
            {2632}new s_48[]: seed;
            {2633}let gx_10: element = (if v_508 then dh_pub(g_12,dh_k(s_48)) else caught-fail) in
            {2634}let v_509: bitstring = (if v_508 then catch-fail((dh_k(s_48),gx_10)) else caught-fail) in
            {2635}let v_510: bool = (not-caught-fail(v_509) && success?(1-proj-2-tuple(v_509))) in
            {2636}let pkR': element = (if v_510 then 2-proj-2-tuple(v_509) else caught-fail) in
            {2637}let skR': bitstring = (if v_510 then 1-proj-2-tuple(v_509) else caught-fail) in
            {2638}new config_id'[]: configId;
            {2639}let retry_ech_ext: echExt = (if v_508 then (if v_510 then ECHConfigList(ech_config(config_id',g_12,pkR',s_dom_15,h_alg_11,a_alg_8)) else fail-any) else fail-any) in
            {2600}let tls_g_1: group = id_g(StrongDH,1) in
            {2599}let tls_a_1: aead_alg = id_aead(StrongAE,1) in
            {2598}let tls_h_1: hash_alg = id_hash(StrongHash,1) in
            {2597}let extra_ext_2: extraExt = empty_extra_ext in
            {2640}if ((use_ech ≠ true) || (ech_ext_6 = empty_ech_ext)) then
            (
                {2641}event ServerEchAcceptance(id_server_5,false);
                {2643}let CH(cr_17: bytes32,nego(=TLS13,=tls_h_1,=tls_a_1,kex_ext_6: keyShareExt,SNI(=s_dom_14),ech_ext_7: echExt,extra_ext_4: extraExt,psk_ext_27: preSharedKeyExt)) = o_client_hello in
                (
                    {2642}let ee_msg_13: msg = EE(empty_ech_ext,extra_ext_2) in
                    {2644}let (=true,client_kex_ext(DHE_group(=tls_g_1))) = (true,kex_ext_6) in
                    (
                        {2645}let hrr_mode: params = nego(TLS13,tls_h_1,tls_a_1,hrr_kex_ext(tls_g_1),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext) in
                        {2646}let hello_retry_request: msg = SH(B32(HRR24,HRR8),hrr_mode) in
                        {2647}out(io, hello_retry_request);
                        {2649}in(io, client_hello'_9: msg);
                        {2650}let CH(cr'_9: bytes32,offer': params) = client_hello'_9 in
                        (
                            {2648}let cur_log_HRR: bitstring = ((zero,o_client_hello),hello_retry_request) in
                            {2651}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_14,req_cert_3,false,use_psk_1,false,ee_msg_13,client_hello'_9,cur_log_HRR)))
                        )
                        else
                            {2652}out(io, unexpected_message)
                    )
                    else
                        {2653}let client_kex_ext(DHE_kex(=tls_g_1,gx_11: element)) = kex_ext_6 in
                            {2654}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_14,req_cert_3,false,use_psk_1,true,ee_msg_13,o_client_hello,zero)))
                        else
                            {2655}out(io, handshake_failure)
                )
                else
                    {2656}out(io, handshake_failure)
            )
            else
                {2657}let ECHClientHelloOuter(ech_h': hash_alg,ech_a': aead_alg,config_id'_1: configId,enc: element,payload: bitstring) = ech_ext_6 in
                (
                    {2658}if ((ech_h' = ech_h_2) && ((ech_a' = ech_a_2) && (config_id'_1 = config_id))) then
                    (
                        {2662}new s_49[]: seed;
                        {2666}let label_1: label = hpke_info_hash in
                        {2659}let info: bitstring = (tls_ech_str,ech_conf) in
                        {2667}let k_42: bitstring = (label_1,info) in
                        {2665}let salt: bitstring = zero in
                        {2668}let info_hash: bitstring = catch-fail(hmac(ech_h_2,salt,k_42)) in
                        {2669}let v_512: bool = not-caught-fail(info_hash) in
                        {2671}let ikm: bitstring = (if v_512 then zero else caught-fail) in
                        {2670}let label_2: label = (if v_512 then hpke_secret else caught-fail) in
                        {2672}let k_43: bitstring = (if v_512 then (label_2,ikm) else caught-fail) in
                        {2660}let gxy_25: element = catch-fail(dh_decap_fun(ech_g_2,enc,skR_1)) in
                        {2661}let v_511: bool = not-caught-fail(gxy_25) in
                        {2663}let shared_secret: element = (if v_511 then gxy_25 else dh_f(s_49)) in
                        {2673}let xsecret: bitstring = (if v_512 then catch-fail(hmac(ech_h_2,shared_secret,k_43)) else caught-fail) in
                        {2674}let v_513: bool = not-caught-fail(xsecret) in
                        {2675}let label_3: label = (if v_513 then hpke_key else caught-fail) in
                        {2676}let x_174: bitstring = (if v_513 then (label_3,info_hash) else caught-fail) in
                        {2677}let key: aead_key = (if v_513 then catch-fail(hmac(ech_h_2,xsecret,x_174)) else caught-fail) in
                        {2678}let v_514: bool = not-caught-fail(key) in
                        {2679}let label_4: label = (if v_514 then hpke_base_nonce else caught-fail) in
                        {2680}let x_175: bitstring = (if v_514 then (label_4,info_hash) else caught-fail) in
                        {2681}let base_nonce: bitstring = (if v_514 then catch-fail(hmac(ech_h_2,xsecret,x_175)) else caught-fail) in
                        {2682}let v_515: bool = not-caught-fail(base_nonce) in
                        {2664}let r: hpkeRole = R in
                        {2683}let context: hpkeContext = (if v_512 then (if v_513 then (if v_514 then (if v_515 then hpke_context(r,key,base_nonce) else fail-any) else fail-any) else fail-any) else fail-any) in
                        {2684}let v_516: msg = o_client_hello in
                        {2685}let v_517: bool = (success?(1-proj-nego(2-proj-CH(v_516))) && success?(1-proj-CH(v_516))) in
                        {2686}let psk_ext_28: preSharedKeyExt = (if v_517 then 8-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2687}let extra_ext_5: extraExt = (if v_517 then 7-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2688}let ech_ext_8: echExt = (if v_517 then 6-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2689}let sni_ext_3: sniExt = (if v_517 then 5-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2690}let kex_ext_7: keyShareExt = (if v_517 then 4-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2691}let a_alg_9: aead_alg = (if v_517 then 3-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2692}let h_alg_12: hash_alg = (if v_517 then 2-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2693}let v_518: TLS_version = (if v_517 then 1-proj-nego(2-proj-CH(v_516)) else caught-fail) in
                        {2694}let r_1: bytes32 = (if v_517 then 1-proj-CH(v_516) else caught-fail) in
                        {2695}let v_519: echExt = (if v_517 then catch-fail(ech_ext_8) else caught-fail) in
                        {2696}let v_520: bool = (not-caught-fail(v_519) && success?(1-proj-ECHClientHelloOuter(v_519))) in
                        {2697}let payload_1: bitstring = (if v_520 then 5-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2698}let enc_1: element = (if v_520 then 4-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2699}let config_id_2: configId = (if v_520 then 3-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2700}let a_alg_ech: aead_alg = (if v_520 then 2-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2701}let h_alg_ech: hash_alg = (if v_520 then 1-proj-ECHClientHelloOuter(v_519) else caught-fail) in
                        {2702}let ech_ext': echExt = (if v_520 then ECHClientHelloOuter(h_alg_ech,a_alg_ech,config_id_2,enc_1,zero) else caught-fail) in
                        {2703}let client_hello_AAD: msg = (if v_517 then (if v_520 then CH(r_1,nego(v_518,h_alg_12,a_alg_9,kex_ext_7,sni_ext_3,ech_ext',extra_ext_5,psk_ext_28)) else fail-any) else fail-any) in
                        {2705}let v_521: hpkeContext = context in
                        {2706}let v_522: bool = ((R =nf 1-proj-hpke_context(v_521)) && success?(1-proj-hpke_context(v_521))) in
                        {2707}let base_nonce_1: bitstring = (if v_522 then 3-proj-hpke_context(v_521) else caught-fail) in
                        {2708}let key_1: aead_key = (if v_522 then 2-proj-hpke_context(v_521) else caught-fail) in
                        {2704}let n: nat = 1 in
                        {2709}let i_client_hello: msg = (if v_522 then aead_dec(ech_a_2,key_1,(base_nonce_1,n),client_hello_AAD,payload) else fail-any) in
                        (
                            {2710}let CH(cr'_10: bytes32,nego(=TLS13,c_h_alg': hash_alg,c_a_alg': aead_alg,kex_ext': keyShareExt,SNI(i_dom: domain),=ECHClientHelloInner,extra_ext': extraExt,psk_ext': preSharedKeyExt)) = i_client_hello in
                            (
                                {2711}event ServerEchAcceptance(id_server_5,true);
                                {2602}let backend_a: aead_alg = id_aead(StrongAE,1) in
                                {2601}let backend_h: hash_alg = id_hash(StrongHash,1) in
                                {2713}let CH(cr_18: bytes32,nego(=TLS13,=backend_h,=backend_a,kex_ext_8: keyShareExt,SNI(i_dom_1: domain),=ECHClientHelloInner,extra_ext_6: extraExt,psk_ext_29: preSharedKeyExt)) = i_client_hello in
                                (
                                    {2712}let ee_msg_14: msg = EE(empty_ech_ext,extra_ext_2) in
                                    {2603}let backend_g: group = id_g(StrongDH,1) in
                                    {2714}let (=true,client_kex_ext(DHE_group(=backend_g))) = (true,kex_ext_8) in
                                    (
                                        {2715}let hrr_mode_1: params = nego(TLS13,backend_h,backend_a,hrr_kex_ext(backend_g),empty_sni_ext,ECHHelloRetryRequest(zero8),empty_extra_ext,empty_psk_ext) in
                                        {2716}let hrr: msg = SH(B32(HRR24,HRR8),hrr_mode_1) in
                                        {2717}let cur_log_9: bitstring = ((zero,i_client_hello),hrr) in
                                        {2718}let transcript_hrr_ech_conf: bitstring = catch-fail(hash(backend_h,cur_log_9)) in
                                        {2719}let v_523: bool = not-caught-fail(transcript_hrr_ech_conf) in
                                        {2721}let k_44: bitstring = (if v_523 then catch-fail(b32_2_b(get_random(i_client_hello))) else caught-fail) in
                                        {2722}let v_524: bool = not-caught-fail(k_44) in
                                        {2720}let s_50: bitstring = (if v_523 then zero else caught-fail) in
                                        {2723}let k_45: bitstring = (if v_523 then catch-fail((if v_524 then hmac(backend_h,s_50,k_44) else fail-any)) else caught-fail) in
                                        {2724}let v_525: bool = not-caught-fail(k_45) in
                                        {2725}let l_158: label = (if v_525 then hrr_ech_accept_confirmation else caught-fail) in
                                        {2726}let x_176: bitstring = (if v_525 then (l_158,cur_log_9) else caught-fail) in
                                        {2727}let hrr_accept_confirmation: bytes8 = catch-fail((if v_523 then crop_into_bytes8((if v_525 then hmac(backend_h,k_45,x_176) else fail-any)) else fail-any)) in
                                        {2728}let v_526: bool = not-caught-fail(hrr_accept_confirmation) in
                                        {2729}let hrr_mode_2: params = (if v_526 then nego(TLS13,backend_h,backend_a,hrr_kex_ext(backend_g),empty_sni_ext,ECHHelloRetryRequest(hrr_accept_confirmation),empty_extra_ext,empty_psk_ext) else caught-fail) in
                                        {2730}let hrr_msg: msg = (if v_526 then SH(B32(HRR24,HRR8),hrr_mode_2) else fail-any) in
                                        {2731}out(io, hrr_msg);
                                        {2732}let ech_config(id_conf: configId,ech_g_3: group,pkR_3: element,s_dom_16: domain,ech_h_3: hash_alg,ech_a_3: aead_alg) = ech_conf in
                                        {2733}in(io, o_client_hello_1: msg);
                                        {2734}let CH(cr'_11: bytes32,nego(=TLS13,h_alg': hash_alg,a_alg': aead_alg,kex_ext'_1: keyShareExt,SNI(=s_dom_16),ech_ext_9: echExt,extra_ext'_1: extraExt,psk_ext'_1: preSharedKeyExt)) = o_client_hello_1 in
                                        (
                                            {2735}if (ech_ext_9 = empty_ech_ext) then
                                                {2736}out(io, missing_extension)
                                            else
                                                {2737}let ECHClientHelloOuter(=ech_h_3,=ech_a_3,=id_conf,=zero,payload_2: bitstring) = ech_ext_9 in
                                                (
                                                    {2738}let v_527: msg = o_client_hello_1 in
                                                    {2739}let v_528: bool = (success?(1-proj-nego(2-proj-CH(v_527))) && success?(1-proj-CH(v_527))) in
                                                    {2740}let psk_ext_30: preSharedKeyExt = (if v_528 then 8-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2741}let extra_ext_7: extraExt = (if v_528 then 7-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2742}let ech_ext_10: echExt = (if v_528 then 6-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2743}let sni_ext_4: sniExt = (if v_528 then 5-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2744}let kex_ext_9: keyShareExt = (if v_528 then 4-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2745}let a_alg_10: aead_alg = (if v_528 then 3-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2746}let h_alg_13: hash_alg = (if v_528 then 2-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2747}let v_529: TLS_version = (if v_528 then 1-proj-nego(2-proj-CH(v_527)) else caught-fail) in
                                                    {2748}let r_2: bytes32 = (if v_528 then 1-proj-CH(v_527) else caught-fail) in
                                                    {2749}let v_530: echExt = (if v_528 then catch-fail(ech_ext_10) else caught-fail) in
                                                    {2750}let v_531: bool = (not-caught-fail(v_530) && success?(1-proj-ECHClientHelloOuter(v_530))) in
                                                    {2751}let payload_3: bitstring = (if v_531 then 5-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2752}let enc_2: element = (if v_531 then 4-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2753}let config_id_3: configId = (if v_531 then 3-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2754}let a_alg_ech_1: aead_alg = (if v_531 then 2-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2755}let h_alg_ech_1: hash_alg = (if v_531 then 1-proj-ECHClientHelloOuter(v_530) else caught-fail) in
                                                    {2756}let ech_ext'_1: echExt = (if v_531 then ECHClientHelloOuter(h_alg_ech_1,a_alg_ech_1,config_id_3,enc_2,zero) else caught-fail) in
                                                    {2757}let client_hello_AAD_1: msg = (if v_528 then (if v_531 then CH(r_2,nego(v_529,h_alg_13,a_alg_10,kex_ext_9,sni_ext_4,ech_ext'_1,extra_ext_7,psk_ext_30)) else fail-any) else fail-any) in
                                                    {2759}let v_532: hpkeContext = context in
                                                    {2760}let v_533: bool = ((R =nf 1-proj-hpke_context(v_532)) && success?(1-proj-hpke_context(v_532))) in
                                                    {2761}let base_nonce_2: bitstring = (if v_533 then 3-proj-hpke_context(v_532) else caught-fail) in
                                                    {2762}let key_2: aead_key = (if v_533 then 2-proj-hpke_context(v_532) else caught-fail) in
                                                    {2758}let n_1: nat = 2 in
                                                    {2763}let i_client_hello': msg = (if v_533 then aead_dec(ech_a_3,key_2,(base_nonce_2,n_1),client_hello_AAD_1,payload_2) else fail-any) in
                                                    (
                                                        {2764}let CH(i_cr: bytes32,nego(=TLS13,i_h_alg: hash_alg,i_a_alg: aead_alg,i_kex_ext: keyShareExt,SNI(=i_dom_1),=ECHClientHelloInner,i_extra_ext: extraExt,i_psk_ext: preSharedKeyExt)) = i_client_hello' in
                                                            {2765}out(ch_server_SH, (id_server_5,ArgsServerSH(backend_g,backend_h,backend_a,i_dom_1,req_cert_3,true,use_psk_1,false,ee_msg_14,i_client_hello',((zero,i_client_hello),hrr_msg))))
                                                        else
                                                            {2766}out(io, illegal_parameter)
                                                    )
                                                    else
                                                        {2767}out(io, decrypt_error)
                                                )
                                                else
                                                    {2768}out(io, illegal_parameter)
                                        )
                                        else
                                            {2769}out(io, unexpected_message)
                                    )
                                    else
                                        {2770}let client_kex_ext(DHE_kex(=backend_g,gx_12: element)) = kex_ext_8 in
                                            {2771}out(ch_server_SH, (id_server_5,ArgsServerSH(backend_g,backend_h,backend_a,i_dom_1,req_cert_3,true,use_psk_1,true,ee_msg_14,i_client_hello,zero)))
                                        else
                                            {2772}out(io, handshake_failure)
                                )
                                else
                                    {2773}out(io, handshake_failure)
                            )
                            else
                                {2774}out(io, illegal_parameter)
                        )
                        else
                            {2775}event ServerEchAcceptance(id_server_5,false);
                            {2777}let CH(cr_19: bytes32,nego(=TLS13,=tls_h_1,=tls_a_1,kex_ext_10: keyShareExt,SNI(=s_dom_14),ech_ext_11: echExt,extra_ext_8: extraExt,psk_ext_31: preSharedKeyExt)) = o_client_hello in
                            (
                                {2776}let ee_msg_15: msg = EE(retry_ech_ext,extra_ext_2) in
                                {2778}let (=true,client_kex_ext(DHE_group(=tls_g_1))) = (true,kex_ext_10) in
                                (
                                    {2779}let hrr_mode_3: params = nego(TLS13,tls_h_1,tls_a_1,hrr_kex_ext(tls_g_1),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext) in
                                    {2780}let hello_retry_request_1: msg = SH(B32(HRR24,HRR8),hrr_mode_3) in
                                    {2781}out(io, hello_retry_request_1);
                                    {2783}in(io, client_hello'_10: msg);
                                    {2784}let CH(cr'_12: bytes32,offer'_1: params) = client_hello'_10 in
                                    (
                                        {2782}let cur_log_HRR_1: bitstring = ((zero,o_client_hello),hello_retry_request_1) in
                                        {2785}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_14,req_cert_3,false,use_psk_1,false,ee_msg_15,client_hello'_10,cur_log_HRR_1)))
                                    )
                                    else
                                        {2786}out(io, unexpected_message)
                                )
                                else
                                    {2787}let client_kex_ext(DHE_kex(=tls_g_1,gx_13: element)) = kex_ext_10 in
                                        {2788}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_14,req_cert_3,false,use_psk_1,true,ee_msg_15,o_client_hello,zero)))
                                    else
                                        {2789}out(io, handshake_failure)
                            )
                            else
                                {2790}out(io, handshake_failure)
                    )
                    else
                        {2791}event ServerEchAcceptance(id_server_5,false);
                        {2793}let CH(cr_20: bytes32,nego(=TLS13,=tls_h_1,=tls_a_1,kex_ext_11: keyShareExt,SNI(=s_dom_14),ech_ext_12: echExt,extra_ext_9: extraExt,psk_ext_32: preSharedKeyExt)) = o_client_hello in
                        (
                            {2792}let ee_msg_16: msg = EE(retry_ech_ext,extra_ext_2) in
                            {2794}let (=true,client_kex_ext(DHE_group(=tls_g_1))) = (true,kex_ext_11) in
                            (
                                {2795}let hrr_mode_4: params = nego(TLS13,tls_h_1,tls_a_1,hrr_kex_ext(tls_g_1),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext) in
                                {2796}let hello_retry_request_2: msg = SH(B32(HRR24,HRR8),hrr_mode_4) in
                                {2797}out(io, hello_retry_request_2);
                                {2799}in(io, client_hello'_11: msg);
                                {2800}let CH(cr'_13: bytes32,offer'_2: params) = client_hello'_11 in
                                (
                                    {2798}let cur_log_HRR_2: bitstring = ((zero,o_client_hello),hello_retry_request_2) in
                                    {2801}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_14,req_cert_3,false,use_psk_1,false,ee_msg_16,client_hello'_11,cur_log_HRR_2)))
                                )
                                else
                                    {2802}out(io, unexpected_message)
                            )
                            else
                                {2803}let client_kex_ext(DHE_kex(=tls_g_1,gx_14: element)) = kex_ext_11 in
                                    {2804}out(ch_server_SH, (id_server_5,ArgsServerSH(tls_g_1,tls_h_1,tls_a_1,s_dom_14,req_cert_3,false,use_psk_1,true,ee_msg_16,o_client_hello,zero)))
                                else
                                    {2805}out(io, handshake_failure)
                        )
                        else
                            {2806}out(io, handshake_failure)
                )
                else
                    {2807}out(io, illegal_parameter)
        )
        else
            {2809}out(io, handshake_failure)
    )
    else
        {2810}out(io, unexpected_message)
) | (
    {2811}!
    {2812}in(io, ClientA_1: domain);
    {2813}in(io, ClientB_1: domain);
    {2815}in(io, s_dom_17: domain);
    {2816}event Same(s_dom_17);
    {2817}new s_51: seed;
    {2822}in(io, @8_use_psk: bool);
    {2823}event Same(@8_use_psk);
    {2824}new @8_st[]: stamp;
    {2825}event PreciseInput(@8_st,@8_use_psk);
    {2826}let () = () in
    {2827}in(io, @8_send_kex: bool);
    {2828}event Same(@8_send_kex);
    {2829}new @8_st_1[]: stamp;
    {2830}event PreciseInput(@8_st_1,@8_send_kex);
    {2831}let () = () in
    {2836}new rand24_5[]: bytes24;
    {2837}new rand8_5[]: bytes8;
    {2839}new s_52[]: seed;
    {2821}let @8_tls_g: group = id_g(StrongDH,1) in
    {2840}let gx_15: element = dh_pub(@8_tls_g,dh_k(s_52)) in
    {2841}let v_534: bitstring = (dh_k(s_52),gx_15) in
    {2842}let v_535: bool = success?(1-proj-2-tuple(v_534)) in
    {2843}let gx_16: element = (if v_535 then 2-proj-2-tuple(v_534) else caught-fail) in
    {2844}let x_177: bitstring = (if v_535 then 1-proj-2-tuple(v_534) else caught-fail) in
    {2833}let send_kex_4: bool = (not(true) || @8_send_kex) in
    {2845}let kex_4: kex_alg = (if v_535 then (if send_kex_4 then DHE_kex(@8_tls_g,gx_16) else DHE_group(@8_tls_g)) else caught-fail) in
    {2846}let (kex_ext_12: keyShareExt,kex_data_7: bitstring) = (if v_535 then (client_kex_ext(kex_4),(x_177,@8_tls_g)) else fail-any) in
    {2838}let cr_21: bytes32 = B32(rand24_5,rand8_5) in
    {2834}let cur_log_10: bitstring = zero in
    {2832}let @8_comp_psk: bool = false in
    {2820}let @8_tls_a: aead_alg = id_aead(StrongAE,1) in
    {2819}let @8_tls_h: hash_alg = id_hash(StrongHash,1) in
    {2818}let id_client_4: idProc = idClientDiff(s_51) in
    {2814}let c_dom_7: domain = choice[ClientA_1,ClientB_1] in
    {2849}if @8_use_psk then
    (
        {2848}let extra_30: extraExt = empty_extra_ext in
        {2847}let ech_ext_13: echExt = empty_ech_ext in
        {2835}let old_psk_data_1: bitstring = zero in
        {2850}let (psk_65: preSharedKey,id_32: identityPsk,old_es_4: bitstring,is_safe_24: bool) = old_psk_data_1 in
        (
            {2854}let k_46: bitstring = catch-fail(psk2b(psk_65)) in
            {2855}let v_536: bool = not-caught-fail(k_46) in
            {2853}let s_53: bitstring = zero in
            {2856}let early_secret_41: bitstring = catch-fail((if v_536 then hmac(@8_tls_h,s_53,k_46) else fail-any)) in
            {2857}let v_537: bool = not-caught-fail(early_secret_41) in
            {2859}let m_53: bitstring = (if v_537 then zero else caught-fail) in
            {2860}let h_157: bitstring = (if v_537 then catch-fail(hash(@8_tls_h,m_53)) else caught-fail) in
            {2861}let v_538: bool = not-caught-fail(h_157) in
            {2858}let l_159: label = (if v_537 then tls13_ext_res_binder else caught-fail) in
            {2862}let x_178: bitstring = (if v_538 then (l_159,h_157) else caught-fail) in
            {2863}let binder_key_27: bitstring = (if v_537 then catch-fail((if v_538 then hmac(@8_tls_h,early_secret_41,x_178) else fail-any)) else caught-fail) in
            {2864}let v_539: bool = not-caught-fail(binder_key_27) in
            {2865}let v_540: bitstring = catch-fail((if v_537 then (if v_539 then (early_secret_41,binder_key_27) else fail-any) else fail-any)) in
            {2866}let v_541: bool = (not-caught-fail(v_540) && success?(1-proj-2-tuple(v_540))) in
            {2867}let kb_27: mac_key = (if v_541 then 2-proj-2-tuple(v_540) else caught-fail) in
            {2868}let es_41: bitstring = (if v_541 then 1-proj-2-tuple(v_540) else caught-fail) in
            {2851}let offer_22: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_17),ech_ext_13,extra_30,trunc_client_psk_ext(id_32)) in
            {2852}let cur_log'_10: bitstring = (cur_log_10,CH(cr_21,offer_22)) in
            {2869}let binders_9: bitstring = (if v_541 then catch-fail(hmac(@8_tls_h,kb_27,cur_log'_10)) else caught-fail) in
            {2870}let v_542: bool = not-caught-fail(binders_9) in
            {2871}let v_543: bitstring = catch-fail((if v_541 then (if v_542 then (client_psk_ext(id_32,binders_9),(psk_65,id_32,es_41,is_safe_24)) else fail-any) else fail-any)) in
            {2872}let v_544: bool = (not-caught-fail(v_543) && success?(1-proj-2-tuple(v_543))) in
            {2873}let psk_data_15: bitstring = (if v_544 then 2-proj-2-tuple(v_543) else caught-fail) in
            {2874}let psk_ext_33: preSharedKeyExt = (if v_544 then 1-proj-2-tuple(v_543) else caught-fail) in
            {2875}let offer_23: params = (if v_544 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_33) else caught-fail) in
            {2876}let (client_hello_7: msg,cr_22: bytes32,kex_data_8: bitstring,psk_data_16: bitstring) = (if v_544 then (CH(cr_21,offer_23),cr_21,kex_data_7,psk_data_15) else fail-any) in
            {2877}event ClientOffersAead(cr_22,@8_tls_a);
            {2878}event ClientOffersHash(cr_22,@8_tls_h);
            {2879}event ClientOffersGroup(cr_22,@8_tls_g);
            {2880}out(io, client_hello_7);
            {2882}let (psk_66: preSharedKey,id_33: identityPsk,es_42: bitstring,safe_psk_18: bool) = psk_data_16 in
            (
                {2883}if (false && (psk_66 ≠ NoPsk)) then
                {2884}let client_hello_8: bitstring = (zero,client_hello_7) in
                {2886}let h_158: bitstring = catch-fail(hash(@8_tls_h,client_hello_8)) in
                {2887}let v_545: bool = not-caught-fail(h_158) in
                {2885}let l_160: label = tls13_client_early_traffic_secret in
                {2888}let x_179: bitstring = (if v_545 then (l_160,h_158) else caught-fail) in
                {2889}let atsc0_4: bitstring = catch-fail((if v_545 then hmac(@8_tls_h,es_42,x_179) else fail-any)) in
                {2890}let v_546: bool = not-caught-fail(atsc0_4) in
                {2892}let h_159: bitstring = (if v_546 then zero else caught-fail) in
                {2891}let l_161: label = (if v_546 then tls13_key else caught-fail) in
                {2893}let x_180: bitstring = (if v_546 then (l_161,h_159) else caught-fail) in
                {2894}let kc0_4: bitstring = (if v_546 then catch-fail(hmac(@8_tls_h,atsc0_4,x_180)) else caught-fail) in
                {2895}let v_547: bool = not-caught-fail(kc0_4) in
                {2897}let h_160: bitstring = (if v_547 then catch-fail(hash(@8_tls_h,client_hello_8)) else caught-fail) in
                {2898}let v_548: bool = not-caught-fail(h_160) in
                {2896}let l_162: label = (if v_547 then tls13_early_exporter_master_secret else caught-fail) in
                {2899}let x_181: bitstring = (if v_548 then (l_162,h_160) else caught-fail) in
                {2900}let ems0_8: bitstring = (if v_547 then catch-fail((if v_548 then hmac(@8_tls_h,es_42,x_181) else fail-any)) else caught-fail) in
                {2901}let v_549: bool = not-caught-fail(ems0_8) in
                {2902}let (wkc0_4: aead_key,ems0_9: bitstring) = (if v_546 then (if v_547 then (if v_549 then (kc0_4,ems0_8) else fail-any) else fail-any) else fail-any) in
                {2903}!
                {2904}in(io, (i_4: nat,ad_4: bitstring));
                {2905}if is_nat(i_4) then
                {2906}new msg_ed_3[]: bitstring;
                {2908}new st_13: stamp;
                {2909}event ClientSequenceClient0RTTDataWriteKey(id_client_4,st_13,i_4);
                {2910}event ClientSends0(id_client_4,cr_22,psk_66,i_4,ad_4,msg_ed_3);
                {2907}let enc_ed_3: bitstring = aead_enc(@8_tls_a,wkc0_4,i_4,ad_4,msg_ed_3) in
                {2911}out(io, enc_ed_3)
            ) | (
                {2912}in(io, server_hello_4: msg);
                {2913}let SH(sr_23: bytes32,mode_15: params) = server_hello_4 in
                (
                    {2914}event ClientEchAcceptance(id_client_4,false);
                    {2881}let cur_log2_31: bitstring = (cur_log_10,client_hello_7) in
                    {2915}if (true && (sr_23 = B32(HRR24,HRR8))) then
                    (
                        {2916}if ((mode_15 = nego(TLS13,@8_tls_h,@8_tls_a,hrr_kex_ext(@8_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex_4 ≠ true)) then
                        (
                            {2919}new rand24_6[]: bytes24;
                            {2920}new rand8_6[]: bytes8;
                            {2922}new s_54[]: seed;
                            {2923}let gx_17: element = dh_pub(@8_tls_g,dh_k(s_54)) in
                            {2924}let v_550: bitstring = (dh_k(s_54),gx_17) in
                            {2925}let v_551: bool = success?(1-proj-2-tuple(v_550)) in
                            {2926}let gx_18: element = (if v_551 then 2-proj-2-tuple(v_550) else caught-fail) in
                            {2927}let x_182: bitstring = (if v_551 then 1-proj-2-tuple(v_550) else caught-fail) in
                            {2918}let send_kex_5: bool = true in
                            {2928}let kex_5: kex_alg = (if v_551 then (if send_kex_5 then DHE_kex(@8_tls_g,gx_18) else DHE_group(@8_tls_g)) else caught-fail) in
                            {2929}let (kex_ext_13: keyShareExt,kex_data_9: bitstring) = (if v_551 then (client_kex_ext(kex_5),(x_182,@8_tls_g)) else fail-any) in
                            {2921}let cr_23: bytes32 = B32(rand24_6,rand8_6) in
                            {2917}let cur_log3_5: bitstring = (cur_log2_31,server_hello_4) in
                            {2932}if @8_use_psk then
                            (
                                {2931}let extra_31: extraExt = empty_extra_ext in
                                {2930}let ech_ext_14: echExt = empty_ech_ext in
                                {2933}let (psk_67: preSharedKey,id_34: identityPsk,old_es_5: bitstring,is_safe_25: bool) = psk_data_16 in
                                (
                                    {2937}let k_47: bitstring = catch-fail(psk2b(psk_67)) in
                                    {2938}let v_552: bool = not-caught-fail(k_47) in
                                    {2936}let s_55: bitstring = zero in
                                    {2939}let early_secret_42: bitstring = catch-fail((if v_552 then hmac(@8_tls_h,s_55,k_47) else fail-any)) in
                                    {2940}let v_553: bool = not-caught-fail(early_secret_42) in
                                    {2942}let m_54: bitstring = (if v_553 then zero else caught-fail) in
                                    {2943}let h_161: bitstring = (if v_553 then catch-fail(hash(@8_tls_h,m_54)) else caught-fail) in
                                    {2944}let v_554: bool = not-caught-fail(h_161) in
                                    {2941}let l_163: label = (if v_553 then tls13_ext_res_binder else caught-fail) in
                                    {2945}let x_183: bitstring = (if v_554 then (l_163,h_161) else caught-fail) in
                                    {2946}let binder_key_28: bitstring = (if v_553 then catch-fail((if v_554 then hmac(@8_tls_h,early_secret_42,x_183) else fail-any)) else caught-fail) in
                                    {2947}let v_555: bool = not-caught-fail(binder_key_28) in
                                    {2948}let v_556: bitstring = catch-fail((if v_553 then (if v_555 then (early_secret_42,binder_key_28) else fail-any) else fail-any)) in
                                    {2949}let v_557: bool = (not-caught-fail(v_556) && success?(1-proj-2-tuple(v_556))) in
                                    {2950}let kb_28: mac_key = (if v_557 then 2-proj-2-tuple(v_556) else caught-fail) in
                                    {2951}let es_43: bitstring = (if v_557 then 1-proj-2-tuple(v_556) else caught-fail) in
                                    {2934}let offer_24: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_17),ech_ext_14,extra_31,trunc_client_psk_ext(id_34)) in
                                    {2935}let cur_log'_11: bitstring = (cur_log3_5,CH(cr_23,offer_24)) in
                                    {2952}let binders_10: bitstring = (if v_557 then catch-fail(hmac(@8_tls_h,kb_28,cur_log'_11)) else caught-fail) in
                                    {2953}let v_558: bool = not-caught-fail(binders_10) in
                                    {2954}let v_559: bitstring = catch-fail((if v_557 then (if v_558 then (client_psk_ext(id_34,binders_10),(psk_67,id_34,es_43,is_safe_25)) else fail-any) else fail-any)) in
                                    {2955}let v_560: bool = (not-caught-fail(v_559) && success?(1-proj-2-tuple(v_559))) in
                                    {2956}let psk_data_17: bitstring = (if v_560 then 2-proj-2-tuple(v_559) else caught-fail) in
                                    {2957}let psk_ext_34: preSharedKeyExt = (if v_560 then 1-proj-2-tuple(v_559) else caught-fail) in
                                    {2958}let offer_25: params = (if v_560 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_34) else caught-fail) in
                                    {2959}let (client_hello'_12: msg,cr'_14: bytes32,kex_data'_9: bitstring,psk_data'_9: bitstring) = (if v_560 then (CH(cr_23,offer_25),cr_23,kex_data_9,psk_data_17) else fail-any) in
                                    {2960}event ClientOffersAead(cr'_14,@8_tls_a);
                                    {2961}event ClientOffersHash(cr'_14,@8_tls_h);
                                    {2962}event ClientOffersGroup(cr'_14,@8_tls_g);
                                    {2963}out(io, client_hello'_12);
                                    {2965}in(io, server_hello'_9: msg);
                                    {2966}let SH(sr'_9: bytes32,mode'_9: params) = server_hello'_9 in
                                    (
                                        {2967}if (sr'_9 = B32(HRR24,HRR8)) then
                                            {2968}out(io, unexpected_message)
                                        else
                                            {2969}let (x_184: bitstring,g_13: group) = kex_data'_9 in
                                            {2970}let (psk_offer_12: preSharedKey,id_offer_12: identityPsk,es_offer_12: bitstring,is_safe_offer_12: bool) = psk_data'_9 in
                                            {2971}event Client_PSKOffer(id_client_4,psk_offer_12,id_offer_12,is_safe_offer_12);
                                            {2972}event Client_Rand_client(id_client_4,cr'_14);
                                            {2973}event Client_DH_client(id_client_4,dh_pub(g_13,x_184));
                                            {2974}event Client_server_domain(id_client_4,s_dom_17);
                                            {2975}let SH(sr_24: bytes32,mode_16: params) = server_hello'_9 in
                                            {2976}event Client_Rand_server(id_client_4,sr_24);
                                            {2977}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_13,gy_13: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_35: preSharedKeyExt) = mode_16 in
                                            (
                                                {2979}event Client_DH_server(id_client_4,gy_13);
                                                {2980}let v_561: bool = (psk_ext_35 = empty_psk_ext) in
                                                {2981}let psk_68: preSharedKey = (if v_561 then NoPsk else caught-fail) in
                                                {2983}let k_48: bitstring = (if v_561 then catch-fail(psk2b(psk_68)) else caught-fail) in
                                                {2984}let v_562: bool = not-caught-fail(k_48) in
                                                {2982}let s_56: bitstring = (if v_561 then zero else caught-fail) in
                                                {2985}let early_secret_43: bitstring = (if v_561 then catch-fail((if v_562 then hmac(@8_tls_h,s_56,k_48) else fail-any)) else caught-fail) in
                                                {2986}let v_563: bool = not-caught-fail(early_secret_43) in
                                                {2988}let m_55: bitstring = (if v_563 then zero else caught-fail) in
                                                {2989}let h_162: bitstring = (if v_563 then catch-fail(hash(@8_tls_h,m_55)) else caught-fail) in
                                                {2990}let v_564: bool = not-caught-fail(h_162) in
                                                {2987}let l_164: label = (if v_563 then tls13_ext_res_binder else caught-fail) in
                                                {2991}let x_185: bitstring = (if v_564 then (l_164,h_162) else caught-fail) in
                                                {2992}let binder_key_29: bitstring = (if v_563 then catch-fail((if v_564 then hmac(@8_tls_h,early_secret_43,x_185) else fail-any)) else caught-fail) in
                                                {2993}let v_565: bool = not-caught-fail(binder_key_29) in
                                                {2994}let v_566: bitstring = (if v_561 then catch-fail((if v_563 then (if v_565 then (early_secret_43,binder_key_29) else fail-any) else fail-any)) else caught-fail) in
                                                {2995}let v_567: bool = (not-caught-fail(v_566) && success?(1-proj-2-tuple(v_566))) in
                                                {2996}let kb_29: mac_key = (if v_567 then 2-proj-2-tuple(v_566) else caught-fail) in
                                                {2997}let es_44: bitstring = (if v_567 then 1-proj-2-tuple(v_566) else caught-fail) in
                                                {2998}let v_568: bitstring = (if not(v_561) then catch-fail(psk_data'_9) else caught-fail) in
                                                {2999}let v_569: bool = (not-caught-fail(v_568) && success?(1-proj-4-tuple(v_568))) in
                                                {3000}let is_safe_26: bool = (if v_569 then 4-proj-4-tuple(v_568) else caught-fail) in
                                                {3001}let es_45: bitstring = (if v_569 then 3-proj-4-tuple(v_568) else caught-fail) in
                                                {3002}let id_35: identityPsk = (if v_569 then 2-proj-4-tuple(v_568) else caught-fail) in
                                                {3003}let psk_69: preSharedKey = (if v_569 then 1-proj-4-tuple(v_568) else caught-fail) in
                                                {3004}let (psk_70: preSharedKey,early_secret_44: bitstring,valid_12: bool,safe_psk_19: bool) = (if v_561 then (if v_567 then (NoPsk,es_44,true,false) else fail-any) else (if v_569 then (psk_69,es_45,((psk_69 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_35)),is_safe_26) else fail-any)) in
                                                {3005}event Client_PSKChoosen(id_client_4,psk_70,safe_psk_19);
                                                {3006}if valid_12 then
                                                (
                                                    {3009}new s_57[]: seed;
                                                    {3007}let gxy_26: element = catch-fail(dh_decap_fun(g_13,gy_13,x_184)) in
                                                    {3008}let v_570: bool = not-caught-fail(gxy_26) in
                                                    {3010}let gxy_27: element = (if v_570 then gxy_26 else dh_f(s_57)) in
                                                    {3011}event Client_DH_gxy(id_client_4,gxy_27);
                                                    {3013}let m_56: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3014}let v_571: bool = not-caught-fail(m_56) in
                                                    {3015}let h_163: bitstring = (if v_571 then catch-fail(hash(@8_tls_h,m_56)) else caught-fail) in
                                                    {3016}let v_572: bool = not-caught-fail(h_163) in
                                                    {3012}let l_165: label = tls13_derived in
                                                    {3017}let x_186: bitstring = (if v_572 then (l_165,h_163) else caught-fail) in
                                                    {3018}let extra_32: bitstring = catch-fail((if v_571 then (if v_572 then hmac(@8_tls_h,early_secret_44,x_186) else fail-any) else fail-any)) in
                                                    {3019}let v_573: bool = not-caught-fail(extra_32) in
                                                    {3020}let handshake_secret_13: bitstring = (if v_573 then hmac(@8_tls_h,extra_32,gxy_27) else fail-any) in
                                                    {3022}let m_57: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3023}let v_574: bool = not-caught-fail(m_57) in
                                                    {3024}let h_164: bitstring = (if v_574 then catch-fail(hash(@8_tls_h,m_57)) else caught-fail) in
                                                    {3025}let v_575: bool = not-caught-fail(h_164) in
                                                    {3021}let l_166: label = tls13_derived in
                                                    {3026}let x_187: bitstring = (if v_575 then (l_166,h_164) else caught-fail) in
                                                    {3027}let extra_33: bitstring = catch-fail((if v_574 then (if v_575 then hmac(@8_tls_h,handshake_secret_13,x_187) else fail-any) else fail-any)) in
                                                    {3028}let v_576: bool = not-caught-fail(extra_33) in
                                                    {3029}let k_49: bitstring = (if v_576 then zero else caught-fail) in
                                                    {3030}let master_secret_33: bitstring = (if v_576 then catch-fail(hmac(@8_tls_h,handshake_secret_13,k_49)) else caught-fail) in
                                                    {3031}let v_577: bool = not-caught-fail(master_secret_33) in
                                                    {2964}let cur_log4_9: bitstring = (cur_log3_5,client_hello'_12) in
                                                    {2978}let cur_log2_32: bitstring = (cur_log4_9,server_hello'_9) in
                                                    {3033}let h_165: bitstring = (if v_577 then catch-fail(hash(@8_tls_h,cur_log2_32)) else caught-fail) in
                                                    {3034}let v_578: bool = not-caught-fail(h_165) in
                                                    {3032}let l_167: label = (if v_577 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3035}let x_188: bitstring = (if v_578 then (l_167,h_165) else caught-fail) in
                                                    {3036}let client_hts_13: bitstring = (if v_577 then catch-fail((if v_578 then hmac(@8_tls_h,handshake_secret_13,x_188) else fail-any)) else caught-fail) in
                                                    {3037}let v_579: bool = not-caught-fail(client_hts_13) in
                                                    {3039}let h_166: bitstring = (if v_579 then catch-fail(hash(@8_tls_h,cur_log2_32)) else caught-fail) in
                                                    {3040}let v_580: bool = not-caught-fail(h_166) in
                                                    {3038}let l_168: label = (if v_579 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3041}let x_189: bitstring = (if v_580 then (l_168,h_166) else caught-fail) in
                                                    {3042}let server_hts_13: bitstring = (if v_579 then catch-fail((if v_580 then hmac(@8_tls_h,handshake_secret_13,x_189) else fail-any)) else caught-fail) in
                                                    {3043}let v_581: bool = not-caught-fail(server_hts_13) in
                                                    {3045}let h_167: bitstring = (if v_581 then zero else caught-fail) in
                                                    {3044}let l_169: label = (if v_581 then tls13_key else caught-fail) in
                                                    {3046}let x_190: bitstring = (if v_581 then (l_169,h_167) else caught-fail) in
                                                    {3047}let client_wkh_13: bitstring = (if v_581 then catch-fail(hmac(@8_tls_h,client_hts_13,x_190)) else caught-fail) in
                                                    {3048}let v_582: bool = not-caught-fail(client_wkh_13) in
                                                    {3050}let h_168: bitstring = (if v_582 then zero else caught-fail) in
                                                    {3049}let l_170: label = (if v_582 then tls13_key else caught-fail) in
                                                    {3051}let x_191: bitstring = (if v_582 then (l_170,h_168) else caught-fail) in
                                                    {3052}let server_wkh_13: bitstring = (if v_582 then catch-fail(hmac(@8_tls_h,server_hts_13,x_191)) else caught-fail) in
                                                    {3053}let v_583: bool = not-caught-fail(server_wkh_13) in
                                                    {3055}let h_169: bitstring = (if v_583 then zero else caught-fail) in
                                                    {3054}let l_171: label = (if v_583 then tls13_finished else caught-fail) in
                                                    {3056}let x_192: bitstring = (if v_583 then (l_171,h_169) else caught-fail) in
                                                    {3057}let client_fk_13: bitstring = (if v_583 then catch-fail(hmac(@8_tls_h,client_hts_13,x_192)) else caught-fail) in
                                                    {3058}let v_584: bool = not-caught-fail(client_fk_13) in
                                                    {3060}let h_170: bitstring = (if v_584 then zero else caught-fail) in
                                                    {3059}let l_172: label = (if v_584 then tls13_finished else caught-fail) in
                                                    {3061}let x_193: bitstring = (if v_584 then (l_172,h_170) else caught-fail) in
                                                    {3062}let server_fk_13: bitstring = (if v_584 then catch-fail(hmac(@8_tls_h,server_hts_13,x_193)) else caught-fail) in
                                                    {3063}let v_585: bool = not-caught-fail(server_fk_13) in
                                                    {3064}let (master_secret_34: bitstring,chk_20: aead_key,shk_19: aead_key,cfin_20: mac_key,sfin_19: mac_key) = (if v_576 then (if v_577 then (if v_579 then (if v_581 then (if v_582 then (if v_583 then (if v_584 then (if v_585 then (master_secret_33,client_wkh_13,server_wkh_13,client_fk_13,server_fk_13) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3065}event Client_chk(id_client_4,chk_20);
                                                    {3066}event Client_shk(id_client_4,shk_19);
                                                    {3067}event Client_cfin(id_client_4,cfin_20);
                                                    {3068}event Client_sfin(id_client_4,sfin_19);
                                                    {3069}in(io, enc_ee_msg_12: bitstring);
                                                    {3070}let ee_msg_17: msg = aead_dec(@8_tls_a,shk_19,0,zero,enc_ee_msg_12) in
                                                    {3071}let EE(ech_ee_12: echExt,extra_ee_12: extraExt) = ee_msg_17 in
                                                    {3072}let cur_log2_33: bitstring = (cur_log2_32,ee_msg_17) in
                                                    {3073}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_14,sr_24,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_70,safe_psk_19,@8_comp_psk,master_secret_34,chk_20,0,shk_19,1,cfin_20,sfin_19,cur_log2_33)))
                                                )
                                                else
                                                    {3074}out(io, illegal_parameter)
                                            )
                                            else
                                                {3075}out(io, illegal_parameter)
                                    )
                                    else
                                        {3076}out(io, unexpected_message)
                                )
                                else
                                    {3229}get pre_shared_keys(c_dom'_6: domain,=s_dom_17,=@8_tls_h,id_36: identityPsk,psk_71: preSharedKey,idP_9: idProc,is_safe_27: bool) in
                                    {3077}event Selected_one_time_used_psk(id_client_4,psk_71,is_safe_27);
                                    {3078}event Selected_psk(c_dom_7,c_dom'_6,idP_9,is_safe_27);
                                    {3079}event Selected_psk_no_missmatch(id_client_4,s_dom_17,@8_tls_h,psk_71,id_36);
                                    {3080}event Selected_psk_with_ID(c_dom_7,c_dom'_6,id_36,idP_9,is_safe_27);
                                    {3081}let v_586: bitstring = (id_36,psk_71,is_safe_27) in
                                    {3082}let v_587: bool = success?(1-proj-3-tuple(v_586)) in
                                    {3083}let is_safe_28: bool = (if v_587 then 3-proj-3-tuple(v_586) else caught-fail) in
                                    {3084}let psk_72: preSharedKey = (if v_587 then 2-proj-3-tuple(v_586) else caught-fail) in
                                    {3085}let id_37: identityPsk = (if v_587 then 1-proj-3-tuple(v_586) else caught-fail) in
                                    {3089}let k_50: bitstring = (if v_587 then catch-fail(psk2b(psk_72)) else caught-fail) in
                                    {3090}let v_588: bool = not-caught-fail(k_50) in
                                    {3088}let s_58: bitstring = (if v_587 then zero else caught-fail) in
                                    {3091}let early_secret_45: bitstring = (if v_587 then catch-fail((if v_588 then hmac(@8_tls_h,s_58,k_50) else fail-any)) else caught-fail) in
                                    {3092}let v_589: bool = not-caught-fail(early_secret_45) in
                                    {3094}let m_58: bitstring = (if v_589 then zero else caught-fail) in
                                    {3095}let h_171: bitstring = (if v_589 then catch-fail(hash(@8_tls_h,m_58)) else caught-fail) in
                                    {3096}let v_590: bool = not-caught-fail(h_171) in
                                    {3093}let l_173: label = (if v_589 then tls13_ext_res_binder else caught-fail) in
                                    {3097}let x_194: bitstring = (if v_590 then (l_173,h_171) else caught-fail) in
                                    {3098}let binder_key_30: bitstring = (if v_589 then catch-fail((if v_590 then hmac(@8_tls_h,early_secret_45,x_194) else fail-any)) else caught-fail) in
                                    {3099}let v_591: bool = not-caught-fail(binder_key_30) in
                                    {3100}let v_592: bitstring = (if v_587 then catch-fail((if v_589 then (if v_591 then (early_secret_45,binder_key_30) else fail-any) else fail-any)) else caught-fail) in
                                    {3101}let v_593: bool = (not-caught-fail(v_592) && success?(1-proj-2-tuple(v_592))) in
                                    {3102}let kb_30: mac_key = (if v_593 then 2-proj-2-tuple(v_592) else caught-fail) in
                                    {3103}let es_46: bitstring = (if v_593 then 1-proj-2-tuple(v_592) else caught-fail) in
                                    {3086}let offer_26: params = (if v_587 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_17),ech_ext_14,extra_31,trunc_client_psk_ext(id_37)) else caught-fail) in
                                    {3087}let cur_log'_12: bitstring = (if v_587 then (cur_log3_5,CH(cr_23,offer_26)) else caught-fail) in
                                    {3104}let binders_11: bitstring = (if v_593 then catch-fail(hmac(@8_tls_h,kb_30,cur_log'_12)) else caught-fail) in
                                    {3105}let v_594: bool = not-caught-fail(binders_11) in
                                    {3106}let v_595: bitstring = catch-fail((if v_587 then (if v_593 then (if v_594 then (client_psk_ext(id_37,binders_11),(psk_72,id_37,es_46,is_safe_28)) else fail-any) else fail-any) else fail-any)) in
                                    {3107}let v_596: bool = (not-caught-fail(v_595) && success?(1-proj-2-tuple(v_595))) in
                                    {3108}let psk_data_18: bitstring = (if v_596 then 2-proj-2-tuple(v_595) else caught-fail) in
                                    {3109}let psk_ext_36: preSharedKeyExt = (if v_596 then 1-proj-2-tuple(v_595) else caught-fail) in
                                    {3110}let offer_27: params = (if v_596 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_36) else caught-fail) in
                                    {3111}let (client_hello'_13: msg,cr'_15: bytes32,kex_data'_10: bitstring,psk_data'_10: bitstring) = (if v_596 then (CH(cr_23,offer_27),cr_23,kex_data_9,psk_data_18) else fail-any) in
                                    {3112}event ClientOffersAead(cr'_15,@8_tls_a);
                                    {3113}event ClientOffersHash(cr'_15,@8_tls_h);
                                    {3114}event ClientOffersGroup(cr'_15,@8_tls_g);
                                    {3115}out(io, client_hello'_13);
                                    {3117}in(io, server_hello'_10: msg);
                                    {3118}let SH(sr'_10: bytes32,mode'_10: params) = server_hello'_10 in
                                    (
                                        {3119}if (sr'_10 = B32(HRR24,HRR8)) then
                                            {3120}out(io, unexpected_message)
                                        else
                                            {3121}let (x_195: bitstring,g_14: group) = kex_data'_10 in
                                            {3122}let (psk_offer_13: preSharedKey,id_offer_13: identityPsk,es_offer_13: bitstring,is_safe_offer_13: bool) = psk_data'_10 in
                                            {3123}event Client_PSKOffer(id_client_4,psk_offer_13,id_offer_13,is_safe_offer_13);
                                            {3124}event Client_Rand_client(id_client_4,cr'_15);
                                            {3125}event Client_DH_client(id_client_4,dh_pub(g_14,x_195));
                                            {3126}event Client_server_domain(id_client_4,s_dom_17);
                                            {3127}let SH(sr_25: bytes32,mode_17: params) = server_hello'_10 in
                                            {3128}event Client_Rand_server(id_client_4,sr_25);
                                            {3129}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_14,gy_14: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_37: preSharedKeyExt) = mode_17 in
                                            (
                                                {3131}event Client_DH_server(id_client_4,gy_14);
                                                {3132}let v_597: bool = (psk_ext_37 = empty_psk_ext) in
                                                {3133}let psk_73: preSharedKey = (if v_597 then NoPsk else caught-fail) in
                                                {3135}let k_51: bitstring = (if v_597 then catch-fail(psk2b(psk_73)) else caught-fail) in
                                                {3136}let v_598: bool = not-caught-fail(k_51) in
                                                {3134}let s_59: bitstring = (if v_597 then zero else caught-fail) in
                                                {3137}let early_secret_46: bitstring = (if v_597 then catch-fail((if v_598 then hmac(@8_tls_h,s_59,k_51) else fail-any)) else caught-fail) in
                                                {3138}let v_599: bool = not-caught-fail(early_secret_46) in
                                                {3140}let m_59: bitstring = (if v_599 then zero else caught-fail) in
                                                {3141}let h_172: bitstring = (if v_599 then catch-fail(hash(@8_tls_h,m_59)) else caught-fail) in
                                                {3142}let v_600: bool = not-caught-fail(h_172) in
                                                {3139}let l_174: label = (if v_599 then tls13_ext_res_binder else caught-fail) in
                                                {3143}let x_196: bitstring = (if v_600 then (l_174,h_172) else caught-fail) in
                                                {3144}let binder_key_31: bitstring = (if v_599 then catch-fail((if v_600 then hmac(@8_tls_h,early_secret_46,x_196) else fail-any)) else caught-fail) in
                                                {3145}let v_601: bool = not-caught-fail(binder_key_31) in
                                                {3146}let v_602: bitstring = (if v_597 then catch-fail((if v_599 then (if v_601 then (early_secret_46,binder_key_31) else fail-any) else fail-any)) else caught-fail) in
                                                {3147}let v_603: bool = (not-caught-fail(v_602) && success?(1-proj-2-tuple(v_602))) in
                                                {3148}let kb_31: mac_key = (if v_603 then 2-proj-2-tuple(v_602) else caught-fail) in
                                                {3149}let es_47: bitstring = (if v_603 then 1-proj-2-tuple(v_602) else caught-fail) in
                                                {3150}let v_604: bitstring = (if not(v_597) then catch-fail(psk_data'_10) else caught-fail) in
                                                {3151}let v_605: bool = (not-caught-fail(v_604) && success?(1-proj-4-tuple(v_604))) in
                                                {3152}let is_safe_29: bool = (if v_605 then 4-proj-4-tuple(v_604) else caught-fail) in
                                                {3153}let es_48: bitstring = (if v_605 then 3-proj-4-tuple(v_604) else caught-fail) in
                                                {3154}let id_38: identityPsk = (if v_605 then 2-proj-4-tuple(v_604) else caught-fail) in
                                                {3155}let psk_74: preSharedKey = (if v_605 then 1-proj-4-tuple(v_604) else caught-fail) in
                                                {3156}let (psk_75: preSharedKey,early_secret_47: bitstring,valid_13: bool,safe_psk_20: bool) = (if v_597 then (if v_603 then (NoPsk,es_47,true,false) else fail-any) else (if v_605 then (psk_74,es_48,((psk_74 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_37)),is_safe_29) else fail-any)) in
                                                {3157}event Client_PSKChoosen(id_client_4,psk_75,safe_psk_20);
                                                {3158}if valid_13 then
                                                (
                                                    {3161}new s_60[]: seed;
                                                    {3159}let gxy_28: element = catch-fail(dh_decap_fun(g_14,gy_14,x_195)) in
                                                    {3160}let v_606: bool = not-caught-fail(gxy_28) in
                                                    {3162}let gxy_29: element = (if v_606 then gxy_28 else dh_f(s_60)) in
                                                    {3163}event Client_DH_gxy(id_client_4,gxy_29);
                                                    {3165}let m_60: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3166}let v_607: bool = not-caught-fail(m_60) in
                                                    {3167}let h_173: bitstring = (if v_607 then catch-fail(hash(@8_tls_h,m_60)) else caught-fail) in
                                                    {3168}let v_608: bool = not-caught-fail(h_173) in
                                                    {3164}let l_175: label = tls13_derived in
                                                    {3169}let x_197: bitstring = (if v_608 then (l_175,h_173) else caught-fail) in
                                                    {3170}let extra_34: bitstring = catch-fail((if v_607 then (if v_608 then hmac(@8_tls_h,early_secret_47,x_197) else fail-any) else fail-any)) in
                                                    {3171}let v_609: bool = not-caught-fail(extra_34) in
                                                    {3172}let handshake_secret_14: bitstring = (if v_609 then hmac(@8_tls_h,extra_34,gxy_29) else fail-any) in
                                                    {3174}let m_61: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3175}let v_610: bool = not-caught-fail(m_61) in
                                                    {3176}let h_174: bitstring = (if v_610 then catch-fail(hash(@8_tls_h,m_61)) else caught-fail) in
                                                    {3177}let v_611: bool = not-caught-fail(h_174) in
                                                    {3173}let l_176: label = tls13_derived in
                                                    {3178}let x_198: bitstring = (if v_611 then (l_176,h_174) else caught-fail) in
                                                    {3179}let extra_35: bitstring = catch-fail((if v_610 then (if v_611 then hmac(@8_tls_h,handshake_secret_14,x_198) else fail-any) else fail-any)) in
                                                    {3180}let v_612: bool = not-caught-fail(extra_35) in
                                                    {3181}let k_52: bitstring = (if v_612 then zero else caught-fail) in
                                                    {3182}let master_secret_35: bitstring = (if v_612 then catch-fail(hmac(@8_tls_h,handshake_secret_14,k_52)) else caught-fail) in
                                                    {3183}let v_613: bool = not-caught-fail(master_secret_35) in
                                                    {3116}let cur_log4_10: bitstring = (cur_log3_5,client_hello'_13) in
                                                    {3130}let cur_log2_34: bitstring = (cur_log4_10,server_hello'_10) in
                                                    {3185}let h_175: bitstring = (if v_613 then catch-fail(hash(@8_tls_h,cur_log2_34)) else caught-fail) in
                                                    {3186}let v_614: bool = not-caught-fail(h_175) in
                                                    {3184}let l_177: label = (if v_613 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3187}let x_199: bitstring = (if v_614 then (l_177,h_175) else caught-fail) in
                                                    {3188}let client_hts_14: bitstring = (if v_613 then catch-fail((if v_614 then hmac(@8_tls_h,handshake_secret_14,x_199) else fail-any)) else caught-fail) in
                                                    {3189}let v_615: bool = not-caught-fail(client_hts_14) in
                                                    {3191}let h_176: bitstring = (if v_615 then catch-fail(hash(@8_tls_h,cur_log2_34)) else caught-fail) in
                                                    {3192}let v_616: bool = not-caught-fail(h_176) in
                                                    {3190}let l_178: label = (if v_615 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3193}let x_200: bitstring = (if v_616 then (l_178,h_176) else caught-fail) in
                                                    {3194}let server_hts_14: bitstring = (if v_615 then catch-fail((if v_616 then hmac(@8_tls_h,handshake_secret_14,x_200) else fail-any)) else caught-fail) in
                                                    {3195}let v_617: bool = not-caught-fail(server_hts_14) in
                                                    {3197}let h_177: bitstring = (if v_617 then zero else caught-fail) in
                                                    {3196}let l_179: label = (if v_617 then tls13_key else caught-fail) in
                                                    {3198}let x_201: bitstring = (if v_617 then (l_179,h_177) else caught-fail) in
                                                    {3199}let client_wkh_14: bitstring = (if v_617 then catch-fail(hmac(@8_tls_h,client_hts_14,x_201)) else caught-fail) in
                                                    {3200}let v_618: bool = not-caught-fail(client_wkh_14) in
                                                    {3202}let h_178: bitstring = (if v_618 then zero else caught-fail) in
                                                    {3201}let l_180: label = (if v_618 then tls13_key else caught-fail) in
                                                    {3203}let x_202: bitstring = (if v_618 then (l_180,h_178) else caught-fail) in
                                                    {3204}let server_wkh_14: bitstring = (if v_618 then catch-fail(hmac(@8_tls_h,server_hts_14,x_202)) else caught-fail) in
                                                    {3205}let v_619: bool = not-caught-fail(server_wkh_14) in
                                                    {3207}let h_179: bitstring = (if v_619 then zero else caught-fail) in
                                                    {3206}let l_181: label = (if v_619 then tls13_finished else caught-fail) in
                                                    {3208}let x_203: bitstring = (if v_619 then (l_181,h_179) else caught-fail) in
                                                    {3209}let client_fk_14: bitstring = (if v_619 then catch-fail(hmac(@8_tls_h,client_hts_14,x_203)) else caught-fail) in
                                                    {3210}let v_620: bool = not-caught-fail(client_fk_14) in
                                                    {3212}let h_180: bitstring = (if v_620 then zero else caught-fail) in
                                                    {3211}let l_182: label = (if v_620 then tls13_finished else caught-fail) in
                                                    {3213}let x_204: bitstring = (if v_620 then (l_182,h_180) else caught-fail) in
                                                    {3214}let server_fk_14: bitstring = (if v_620 then catch-fail(hmac(@8_tls_h,server_hts_14,x_204)) else caught-fail) in
                                                    {3215}let v_621: bool = not-caught-fail(server_fk_14) in
                                                    {3216}let (master_secret_36: bitstring,chk_21: aead_key,shk_20: aead_key,cfin_21: mac_key,sfin_20: mac_key) = (if v_612 then (if v_613 then (if v_615 then (if v_617 then (if v_618 then (if v_619 then (if v_620 then (if v_621 then (master_secret_35,client_wkh_14,server_wkh_14,client_fk_14,server_fk_14) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3217}event Client_chk(id_client_4,chk_21);
                                                    {3218}event Client_shk(id_client_4,shk_20);
                                                    {3219}event Client_cfin(id_client_4,cfin_21);
                                                    {3220}event Client_sfin(id_client_4,sfin_20);
                                                    {3221}in(io, enc_ee_msg_13: bitstring);
                                                    {3222}let ee_msg_18: msg = aead_dec(@8_tls_a,shk_20,0,zero,enc_ee_msg_13) in
                                                    {3223}let EE(ech_ee_13: echExt,extra_ee_13: extraExt) = ee_msg_18 in
                                                    {3224}let cur_log2_35: bitstring = (cur_log2_34,ee_msg_18) in
                                                    {3225}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_15,sr_25,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_75,safe_psk_20,@8_comp_psk,master_secret_36,chk_21,0,shk_20,1,cfin_21,sfin_20,cur_log2_35)))
                                                )
                                                else
                                                    {3226}out(io, illegal_parameter)
                                            )
                                            else
                                                {3227}out(io, illegal_parameter)
                                    )
                                    else
                                        {3228}out(io, unexpected_message)
                            )
                            else
                                {3230}let psk_76: preSharedKey = NoPsk in
                                {3232}let k_53: bitstring = catch-fail(psk2b(psk_76)) in
                                {3233}let v_622: bool = not-caught-fail(k_53) in
                                {3231}let s_61: bitstring = zero in
                                {3234}let early_secret_48: bitstring = catch-fail((if v_622 then hmac(@8_tls_h,s_61,k_53) else fail-any)) in
                                {3235}let v_623: bool = not-caught-fail(early_secret_48) in
                                {3237}let m_62: bitstring = (if v_623 then zero else caught-fail) in
                                {3238}let h_181: bitstring = (if v_623 then catch-fail(hash(@8_tls_h,m_62)) else caught-fail) in
                                {3239}let v_624: bool = not-caught-fail(h_181) in
                                {3236}let l_183: label = (if v_623 then tls13_ext_res_binder else caught-fail) in
                                {3240}let x_205: bitstring = (if v_624 then (l_183,h_181) else caught-fail) in
                                {3241}let binder_key_32: bitstring = (if v_623 then catch-fail((if v_624 then hmac(@8_tls_h,early_secret_48,x_205) else fail-any)) else caught-fail) in
                                {3242}let v_625: bool = not-caught-fail(binder_key_32) in
                                {3243}let v_626: bitstring = catch-fail((if v_623 then (if v_625 then (early_secret_48,binder_key_32) else fail-any) else fail-any)) in
                                {3244}let v_627: bool = (not-caught-fail(v_626) && success?(1-proj-2-tuple(v_626))) in
                                {3245}let kb_32: mac_key = (if v_627 then 2-proj-2-tuple(v_626) else caught-fail) in
                                {3246}let es_49: bitstring = (if v_627 then 1-proj-2-tuple(v_626) else caught-fail) in
                                {3247}let v_628: bitstring = catch-fail((if v_627 then (empty_psk_ext,(NoPsk,zero,es_49,false)) else fail-any)) in
                                {3248}let v_629: bool = (not-caught-fail(v_628) && success?(1-proj-2-tuple(v_628))) in
                                {3249}let psk_data_19: bitstring = (if v_629 then 2-proj-2-tuple(v_628) else caught-fail) in
                                {3250}let psk_ext_38: preSharedKeyExt = (if v_629 then 1-proj-2-tuple(v_628) else caught-fail) in
                                {3251}let offer_28: params = (if v_629 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_13,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_38) else caught-fail) in
                                {3252}let (client_hello'_14: msg,cr'_16: bytes32,kex_data'_11: bitstring,psk_data'_11: bitstring) = (if v_629 then (CH(cr_23,offer_28),cr_23,kex_data_9,psk_data_19) else fail-any) in
                                {3253}event ClientOffersAead(cr'_16,@8_tls_a);
                                {3254}event ClientOffersHash(cr'_16,@8_tls_h);
                                {3255}event ClientOffersGroup(cr'_16,@8_tls_g);
                                {3256}out(io, client_hello'_14);
                                {3258}in(io, server_hello'_11: msg);
                                {3259}let SH(sr'_11: bytes32,mode'_11: params) = server_hello'_11 in
                                (
                                    {3260}if (sr'_11 = B32(HRR24,HRR8)) then
                                        {3261}out(io, unexpected_message)
                                    else
                                        {3262}let (x_206: bitstring,g_15: group) = kex_data'_11 in
                                        {3263}let (psk_offer_14: preSharedKey,id_offer_14: identityPsk,es_offer_14: bitstring,is_safe_offer_14: bool) = psk_data'_11 in
                                        {3264}event Client_PSKOffer(id_client_4,psk_offer_14,id_offer_14,is_safe_offer_14);
                                        {3265}event Client_Rand_client(id_client_4,cr'_16);
                                        {3266}event Client_DH_client(id_client_4,dh_pub(g_15,x_206));
                                        {3267}event Client_server_domain(id_client_4,s_dom_17);
                                        {3268}let SH(sr_26: bytes32,mode_18: params) = server_hello'_11 in
                                        {3269}event Client_Rand_server(id_client_4,sr_26);
                                        {3270}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_15,gy_15: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_39: preSharedKeyExt) = mode_18 in
                                        (
                                            {3272}event Client_DH_server(id_client_4,gy_15);
                                            {3273}let v_630: bool = (psk_ext_39 = empty_psk_ext) in
                                            {3274}let psk_77: preSharedKey = (if v_630 then NoPsk else caught-fail) in
                                            {3276}let k_54: bitstring = (if v_630 then catch-fail(psk2b(psk_77)) else caught-fail) in
                                            {3277}let v_631: bool = not-caught-fail(k_54) in
                                            {3275}let s_62: bitstring = (if v_630 then zero else caught-fail) in
                                            {3278}let early_secret_49: bitstring = (if v_630 then catch-fail((if v_631 then hmac(@8_tls_h,s_62,k_54) else fail-any)) else caught-fail) in
                                            {3279}let v_632: bool = not-caught-fail(early_secret_49) in
                                            {3281}let m_63: bitstring = (if v_632 then zero else caught-fail) in
                                            {3282}let h_182: bitstring = (if v_632 then catch-fail(hash(@8_tls_h,m_63)) else caught-fail) in
                                            {3283}let v_633: bool = not-caught-fail(h_182) in
                                            {3280}let l_184: label = (if v_632 then tls13_ext_res_binder else caught-fail) in
                                            {3284}let x_207: bitstring = (if v_633 then (l_184,h_182) else caught-fail) in
                                            {3285}let binder_key_33: bitstring = (if v_632 then catch-fail((if v_633 then hmac(@8_tls_h,early_secret_49,x_207) else fail-any)) else caught-fail) in
                                            {3286}let v_634: bool = not-caught-fail(binder_key_33) in
                                            {3287}let v_635: bitstring = (if v_630 then catch-fail((if v_632 then (if v_634 then (early_secret_49,binder_key_33) else fail-any) else fail-any)) else caught-fail) in
                                            {3288}let v_636: bool = (not-caught-fail(v_635) && success?(1-proj-2-tuple(v_635))) in
                                            {3289}let kb_33: mac_key = (if v_636 then 2-proj-2-tuple(v_635) else caught-fail) in
                                            {3290}let es_50: bitstring = (if v_636 then 1-proj-2-tuple(v_635) else caught-fail) in
                                            {3291}let v_637: bitstring = (if not(v_630) then catch-fail(psk_data'_11) else caught-fail) in
                                            {3292}let v_638: bool = (not-caught-fail(v_637) && success?(1-proj-4-tuple(v_637))) in
                                            {3293}let is_safe_30: bool = (if v_638 then 4-proj-4-tuple(v_637) else caught-fail) in
                                            {3294}let es_51: bitstring = (if v_638 then 3-proj-4-tuple(v_637) else caught-fail) in
                                            {3295}let id_39: identityPsk = (if v_638 then 2-proj-4-tuple(v_637) else caught-fail) in
                                            {3296}let psk_78: preSharedKey = (if v_638 then 1-proj-4-tuple(v_637) else caught-fail) in
                                            {3297}let (psk_79: preSharedKey,early_secret_50: bitstring,valid_14: bool,safe_psk_21: bool) = (if v_630 then (if v_636 then (NoPsk,es_50,true,false) else fail-any) else (if v_638 then (psk_78,es_51,((psk_78 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_39)),is_safe_30) else fail-any)) in
                                            {3298}event Client_PSKChoosen(id_client_4,psk_79,safe_psk_21);
                                            {3299}if valid_14 then
                                            (
                                                {3302}new s_63[]: seed;
                                                {3300}let gxy_30: element = catch-fail(dh_decap_fun(g_15,gy_15,x_206)) in
                                                {3301}let v_639: bool = not-caught-fail(gxy_30) in
                                                {3303}let gxy_31: element = (if v_639 then gxy_30 else dh_f(s_63)) in
                                                {3304}event Client_DH_gxy(id_client_4,gxy_31);
                                                {3306}let m_64: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3307}let v_640: bool = not-caught-fail(m_64) in
                                                {3308}let h_183: bitstring = (if v_640 then catch-fail(hash(@8_tls_h,m_64)) else caught-fail) in
                                                {3309}let v_641: bool = not-caught-fail(h_183) in
                                                {3305}let l_185: label = tls13_derived in
                                                {3310}let x_208: bitstring = (if v_641 then (l_185,h_183) else caught-fail) in
                                                {3311}let extra_36: bitstring = catch-fail((if v_640 then (if v_641 then hmac(@8_tls_h,early_secret_50,x_208) else fail-any) else fail-any)) in
                                                {3312}let v_642: bool = not-caught-fail(extra_36) in
                                                {3313}let handshake_secret_15: bitstring = (if v_642 then hmac(@8_tls_h,extra_36,gxy_31) else fail-any) in
                                                {3315}let m_65: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3316}let v_643: bool = not-caught-fail(m_65) in
                                                {3317}let h_184: bitstring = (if v_643 then catch-fail(hash(@8_tls_h,m_65)) else caught-fail) in
                                                {3318}let v_644: bool = not-caught-fail(h_184) in
                                                {3314}let l_186: label = tls13_derived in
                                                {3319}let x_209: bitstring = (if v_644 then (l_186,h_184) else caught-fail) in
                                                {3320}let extra_37: bitstring = catch-fail((if v_643 then (if v_644 then hmac(@8_tls_h,handshake_secret_15,x_209) else fail-any) else fail-any)) in
                                                {3321}let v_645: bool = not-caught-fail(extra_37) in
                                                {3322}let k_55: bitstring = (if v_645 then zero else caught-fail) in
                                                {3323}let master_secret_37: bitstring = (if v_645 then catch-fail(hmac(@8_tls_h,handshake_secret_15,k_55)) else caught-fail) in
                                                {3324}let v_646: bool = not-caught-fail(master_secret_37) in
                                                {3257}let cur_log4_11: bitstring = (cur_log3_5,client_hello'_14) in
                                                {3271}let cur_log2_36: bitstring = (cur_log4_11,server_hello'_11) in
                                                {3326}let h_185: bitstring = (if v_646 then catch-fail(hash(@8_tls_h,cur_log2_36)) else caught-fail) in
                                                {3327}let v_647: bool = not-caught-fail(h_185) in
                                                {3325}let l_187: label = (if v_646 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {3328}let x_210: bitstring = (if v_647 then (l_187,h_185) else caught-fail) in
                                                {3329}let client_hts_15: bitstring = (if v_646 then catch-fail((if v_647 then hmac(@8_tls_h,handshake_secret_15,x_210) else fail-any)) else caught-fail) in
                                                {3330}let v_648: bool = not-caught-fail(client_hts_15) in
                                                {3332}let h_186: bitstring = (if v_648 then catch-fail(hash(@8_tls_h,cur_log2_36)) else caught-fail) in
                                                {3333}let v_649: bool = not-caught-fail(h_186) in
                                                {3331}let l_188: label = (if v_648 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {3334}let x_211: bitstring = (if v_649 then (l_188,h_186) else caught-fail) in
                                                {3335}let server_hts_15: bitstring = (if v_648 then catch-fail((if v_649 then hmac(@8_tls_h,handshake_secret_15,x_211) else fail-any)) else caught-fail) in
                                                {3336}let v_650: bool = not-caught-fail(server_hts_15) in
                                                {3338}let h_187: bitstring = (if v_650 then zero else caught-fail) in
                                                {3337}let l_189: label = (if v_650 then tls13_key else caught-fail) in
                                                {3339}let x_212: bitstring = (if v_650 then (l_189,h_187) else caught-fail) in
                                                {3340}let client_wkh_15: bitstring = (if v_650 then catch-fail(hmac(@8_tls_h,client_hts_15,x_212)) else caught-fail) in
                                                {3341}let v_651: bool = not-caught-fail(client_wkh_15) in
                                                {3343}let h_188: bitstring = (if v_651 then zero else caught-fail) in
                                                {3342}let l_190: label = (if v_651 then tls13_key else caught-fail) in
                                                {3344}let x_213: bitstring = (if v_651 then (l_190,h_188) else caught-fail) in
                                                {3345}let server_wkh_15: bitstring = (if v_651 then catch-fail(hmac(@8_tls_h,server_hts_15,x_213)) else caught-fail) in
                                                {3346}let v_652: bool = not-caught-fail(server_wkh_15) in
                                                {3348}let h_189: bitstring = (if v_652 then zero else caught-fail) in
                                                {3347}let l_191: label = (if v_652 then tls13_finished else caught-fail) in
                                                {3349}let x_214: bitstring = (if v_652 then (l_191,h_189) else caught-fail) in
                                                {3350}let client_fk_15: bitstring = (if v_652 then catch-fail(hmac(@8_tls_h,client_hts_15,x_214)) else caught-fail) in
                                                {3351}let v_653: bool = not-caught-fail(client_fk_15) in
                                                {3353}let h_190: bitstring = (if v_653 then zero else caught-fail) in
                                                {3352}let l_192: label = (if v_653 then tls13_finished else caught-fail) in
                                                {3354}let x_215: bitstring = (if v_653 then (l_192,h_190) else caught-fail) in
                                                {3355}let server_fk_15: bitstring = (if v_653 then catch-fail(hmac(@8_tls_h,server_hts_15,x_215)) else caught-fail) in
                                                {3356}let v_654: bool = not-caught-fail(server_fk_15) in
                                                {3357}let (master_secret_38: bitstring,chk_22: aead_key,shk_21: aead_key,cfin_22: mac_key,sfin_21: mac_key) = (if v_645 then (if v_646 then (if v_648 then (if v_650 then (if v_651 then (if v_652 then (if v_653 then (if v_654 then (master_secret_37,client_wkh_15,server_wkh_15,client_fk_15,server_fk_15) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {3358}event Client_chk(id_client_4,chk_22);
                                                {3359}event Client_shk(id_client_4,shk_21);
                                                {3360}event Client_cfin(id_client_4,cfin_22);
                                                {3361}event Client_sfin(id_client_4,sfin_21);
                                                {3362}in(io, enc_ee_msg_14: bitstring);
                                                {3363}let ee_msg_19: msg = aead_dec(@8_tls_a,shk_21,0,zero,enc_ee_msg_14) in
                                                {3364}let EE(ech_ee_14: echExt,extra_ee_14: extraExt) = ee_msg_19 in
                                                {3365}let cur_log2_37: bitstring = (cur_log2_36,ee_msg_19) in
                                                {3366}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_16,sr_26,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_79,safe_psk_21,@8_comp_psk,master_secret_38,chk_22,0,shk_21,1,cfin_22,sfin_21,cur_log2_37)))
                                            )
                                            else
                                                {3367}out(io, illegal_parameter)
                                        )
                                        else
                                            {3368}out(io, illegal_parameter)
                                )
                                else
                                    {3369}out(io, unexpected_message)
                        )
                        else
                            {3370}out(io, illegal_parameter)
                    )
                    else
                        {3371}if send_kex_4 then
                        (
                            {3372}let (x_216: bitstring,g_16: group) = kex_data_8 in
                            {3373}let (psk_offer_15: preSharedKey,id_offer_15: identityPsk,es_offer_15: bitstring,is_safe_offer_15: bool) = psk_data_16 in
                            {3374}event Client_PSKOffer(id_client_4,psk_offer_15,id_offer_15,is_safe_offer_15);
                            {3375}event Client_Rand_client(id_client_4,cr_22);
                            {3376}event Client_DH_client(id_client_4,dh_pub(g_16,x_216));
                            {3377}event Client_server_domain(id_client_4,s_dom_17);
                            {3378}let SH(sr_27: bytes32,mode_19: params) = server_hello_4 in
                            {3379}event Client_Rand_server(id_client_4,sr_27);
                            {3380}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_16,gy_16: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_40: preSharedKeyExt) = mode_19 in
                            (
                                {3382}event Client_DH_server(id_client_4,gy_16);
                                {3383}let v_655: bool = (psk_ext_40 = empty_psk_ext) in
                                {3384}let psk_80: preSharedKey = (if v_655 then NoPsk else caught-fail) in
                                {3386}let k_56: bitstring = (if v_655 then catch-fail(psk2b(psk_80)) else caught-fail) in
                                {3387}let v_656: bool = not-caught-fail(k_56) in
                                {3385}let s_64: bitstring = (if v_655 then zero else caught-fail) in
                                {3388}let early_secret_51: bitstring = (if v_655 then catch-fail((if v_656 then hmac(@8_tls_h,s_64,k_56) else fail-any)) else caught-fail) in
                                {3389}let v_657: bool = not-caught-fail(early_secret_51) in
                                {3391}let m_66: bitstring = (if v_657 then zero else caught-fail) in
                                {3392}let h_191: bitstring = (if v_657 then catch-fail(hash(@8_tls_h,m_66)) else caught-fail) in
                                {3393}let v_658: bool = not-caught-fail(h_191) in
                                {3390}let l_193: label = (if v_657 then tls13_ext_res_binder else caught-fail) in
                                {3394}let x_217: bitstring = (if v_658 then (l_193,h_191) else caught-fail) in
                                {3395}let binder_key_34: bitstring = (if v_657 then catch-fail((if v_658 then hmac(@8_tls_h,early_secret_51,x_217) else fail-any)) else caught-fail) in
                                {3396}let v_659: bool = not-caught-fail(binder_key_34) in
                                {3397}let v_660: bitstring = (if v_655 then catch-fail((if v_657 then (if v_659 then (early_secret_51,binder_key_34) else fail-any) else fail-any)) else caught-fail) in
                                {3398}let v_661: bool = (not-caught-fail(v_660) && success?(1-proj-2-tuple(v_660))) in
                                {3399}let kb_34: mac_key = (if v_661 then 2-proj-2-tuple(v_660) else caught-fail) in
                                {3400}let es_52: bitstring = (if v_661 then 1-proj-2-tuple(v_660) else caught-fail) in
                                {3401}let v_662: bitstring = (if not(v_655) then catch-fail(psk_data_16) else caught-fail) in
                                {3402}let v_663: bool = (not-caught-fail(v_662) && success?(1-proj-4-tuple(v_662))) in
                                {3403}let is_safe_31: bool = (if v_663 then 4-proj-4-tuple(v_662) else caught-fail) in
                                {3404}let es_53: bitstring = (if v_663 then 3-proj-4-tuple(v_662) else caught-fail) in
                                {3405}let id_40: identityPsk = (if v_663 then 2-proj-4-tuple(v_662) else caught-fail) in
                                {3406}let psk_81: preSharedKey = (if v_663 then 1-proj-4-tuple(v_662) else caught-fail) in
                                {3407}let (psk_82: preSharedKey,early_secret_52: bitstring,valid_15: bool,safe_psk_22: bool) = (if v_655 then (if v_661 then (NoPsk,es_52,true,false) else fail-any) else (if v_663 then (psk_81,es_53,((psk_81 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_40)),is_safe_31) else fail-any)) in
                                {3408}event Client_PSKChoosen(id_client_4,psk_82,safe_psk_22);
                                {3409}if valid_15 then
                                (
                                    {3412}new s_65[]: seed;
                                    {3410}let gxy_32: element = catch-fail(dh_decap_fun(g_16,gy_16,x_216)) in
                                    {3411}let v_664: bool = not-caught-fail(gxy_32) in
                                    {3413}let gxy_33: element = (if v_664 then gxy_32 else dh_f(s_65)) in
                                    {3414}event Client_DH_gxy(id_client_4,gxy_33);
                                    {3416}let m_67: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {3417}let v_665: bool = not-caught-fail(m_67) in
                                    {3418}let h_192: bitstring = (if v_665 then catch-fail(hash(@8_tls_h,m_67)) else caught-fail) in
                                    {3419}let v_666: bool = not-caught-fail(h_192) in
                                    {3415}let l_194: label = tls13_derived in
                                    {3420}let x_218: bitstring = (if v_666 then (l_194,h_192) else caught-fail) in
                                    {3421}let extra_38: bitstring = catch-fail((if v_665 then (if v_666 then hmac(@8_tls_h,early_secret_52,x_218) else fail-any) else fail-any)) in
                                    {3422}let v_667: bool = not-caught-fail(extra_38) in
                                    {3423}let handshake_secret_16: bitstring = (if v_667 then hmac(@8_tls_h,extra_38,gxy_33) else fail-any) in
                                    {3425}let m_68: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {3426}let v_668: bool = not-caught-fail(m_68) in
                                    {3427}let h_193: bitstring = (if v_668 then catch-fail(hash(@8_tls_h,m_68)) else caught-fail) in
                                    {3428}let v_669: bool = not-caught-fail(h_193) in
                                    {3424}let l_195: label = tls13_derived in
                                    {3429}let x_219: bitstring = (if v_669 then (l_195,h_193) else caught-fail) in
                                    {3430}let extra_39: bitstring = catch-fail((if v_668 then (if v_669 then hmac(@8_tls_h,handshake_secret_16,x_219) else fail-any) else fail-any)) in
                                    {3431}let v_670: bool = not-caught-fail(extra_39) in
                                    {3432}let k_57: bitstring = (if v_670 then zero else caught-fail) in
                                    {3433}let master_secret_39: bitstring = (if v_670 then catch-fail(hmac(@8_tls_h,handshake_secret_16,k_57)) else caught-fail) in
                                    {3434}let v_671: bool = not-caught-fail(master_secret_39) in
                                    {3381}let cur_log2_38: bitstring = (cur_log2_31,server_hello_4) in
                                    {3436}let h_194: bitstring = (if v_671 then catch-fail(hash(@8_tls_h,cur_log2_38)) else caught-fail) in
                                    {3437}let v_672: bool = not-caught-fail(h_194) in
                                    {3435}let l_196: label = (if v_671 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {3438}let x_220: bitstring = (if v_672 then (l_196,h_194) else caught-fail) in
                                    {3439}let client_hts_16: bitstring = (if v_671 then catch-fail((if v_672 then hmac(@8_tls_h,handshake_secret_16,x_220) else fail-any)) else caught-fail) in
                                    {3440}let v_673: bool = not-caught-fail(client_hts_16) in
                                    {3442}let h_195: bitstring = (if v_673 then catch-fail(hash(@8_tls_h,cur_log2_38)) else caught-fail) in
                                    {3443}let v_674: bool = not-caught-fail(h_195) in
                                    {3441}let l_197: label = (if v_673 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {3444}let x_221: bitstring = (if v_674 then (l_197,h_195) else caught-fail) in
                                    {3445}let server_hts_16: bitstring = (if v_673 then catch-fail((if v_674 then hmac(@8_tls_h,handshake_secret_16,x_221) else fail-any)) else caught-fail) in
                                    {3446}let v_675: bool = not-caught-fail(server_hts_16) in
                                    {3448}let h_196: bitstring = (if v_675 then zero else caught-fail) in
                                    {3447}let l_198: label = (if v_675 then tls13_key else caught-fail) in
                                    {3449}let x_222: bitstring = (if v_675 then (l_198,h_196) else caught-fail) in
                                    {3450}let client_wkh_16: bitstring = (if v_675 then catch-fail(hmac(@8_tls_h,client_hts_16,x_222)) else caught-fail) in
                                    {3451}let v_676: bool = not-caught-fail(client_wkh_16) in
                                    {3453}let h_197: bitstring = (if v_676 then zero else caught-fail) in
                                    {3452}let l_199: label = (if v_676 then tls13_key else caught-fail) in
                                    {3454}let x_223: bitstring = (if v_676 then (l_199,h_197) else caught-fail) in
                                    {3455}let server_wkh_16: bitstring = (if v_676 then catch-fail(hmac(@8_tls_h,server_hts_16,x_223)) else caught-fail) in
                                    {3456}let v_677: bool = not-caught-fail(server_wkh_16) in
                                    {3458}let h_198: bitstring = (if v_677 then zero else caught-fail) in
                                    {3457}let l_200: label = (if v_677 then tls13_finished else caught-fail) in
                                    {3459}let x_224: bitstring = (if v_677 then (l_200,h_198) else caught-fail) in
                                    {3460}let client_fk_16: bitstring = (if v_677 then catch-fail(hmac(@8_tls_h,client_hts_16,x_224)) else caught-fail) in
                                    {3461}let v_678: bool = not-caught-fail(client_fk_16) in
                                    {3463}let h_199: bitstring = (if v_678 then zero else caught-fail) in
                                    {3462}let l_201: label = (if v_678 then tls13_finished else caught-fail) in
                                    {3464}let x_225: bitstring = (if v_678 then (l_201,h_199) else caught-fail) in
                                    {3465}let server_fk_16: bitstring = (if v_678 then catch-fail(hmac(@8_tls_h,server_hts_16,x_225)) else caught-fail) in
                                    {3466}let v_679: bool = not-caught-fail(server_fk_16) in
                                    {3467}let (master_secret_40: bitstring,chk_23: aead_key,shk_22: aead_key,cfin_23: mac_key,sfin_22: mac_key) = (if v_670 then (if v_671 then (if v_673 then (if v_675 then (if v_676 then (if v_677 then (if v_678 then (if v_679 then (master_secret_39,client_wkh_16,server_wkh_16,client_fk_16,server_fk_16) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {3468}event Client_chk(id_client_4,chk_23);
                                    {3469}event Client_shk(id_client_4,shk_22);
                                    {3470}event Client_cfin(id_client_4,cfin_23);
                                    {3471}event Client_sfin(id_client_4,sfin_22);
                                    {3472}in(io, enc_ee_msg_15: bitstring);
                                    {3473}let ee_msg_20: msg = aead_dec(@8_tls_a,shk_22,0,zero,enc_ee_msg_15) in
                                    {3474}let EE(ech_ee_15: echExt,extra_ee_15: extraExt) = ee_msg_20 in
                                    {3475}let cur_log2_39: bitstring = (cur_log2_38,ee_msg_20) in
                                    {3476}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr_22,sr_27,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_82,safe_psk_22,@8_comp_psk,master_secret_40,chk_23,0,shk_22,1,cfin_23,sfin_22,cur_log2_39)))
                                )
                                else
                                    {3477}out(io, illegal_parameter)
                            )
                            else
                                {3478}out(io, illegal_parameter)
                        )
                        else
                            {3479}out(io, illegal_parameter)
                )
                else
                    {3480}out(io, unexpected_message)
            )
        )
        else
            {4120}get pre_shared_keys(c_dom'_7: domain,=s_dom_17,=@8_tls_h,id_41: identityPsk,psk_83: preSharedKey,idP_10: idProc,is_safe_32: bool) in
            {3481}event Selected_one_time_used_psk(id_client_4,psk_83,is_safe_32);
            {3482}event Selected_psk(c_dom_7,c_dom'_7,idP_10,is_safe_32);
            {3483}event Selected_psk_no_missmatch(id_client_4,s_dom_17,@8_tls_h,psk_83,id_41);
            {3484}event Selected_psk_with_ID(c_dom_7,c_dom'_7,id_41,idP_10,is_safe_32);
            {3485}let v_680: bitstring = (id_41,psk_83,is_safe_32) in
            {3486}let v_681: bool = success?(1-proj-3-tuple(v_680)) in
            {3487}let is_safe_33: bool = (if v_681 then 3-proj-3-tuple(v_680) else caught-fail) in
            {3488}let psk_84: preSharedKey = (if v_681 then 2-proj-3-tuple(v_680) else caught-fail) in
            {3489}let id_42: identityPsk = (if v_681 then 1-proj-3-tuple(v_680) else caught-fail) in
            {3493}let k_58: bitstring = (if v_681 then catch-fail(psk2b(psk_84)) else caught-fail) in
            {3494}let v_682: bool = not-caught-fail(k_58) in
            {3492}let s_66: bitstring = (if v_681 then zero else caught-fail) in
            {3495}let early_secret_53: bitstring = (if v_681 then catch-fail((if v_682 then hmac(@8_tls_h,s_66,k_58) else fail-any)) else caught-fail) in
            {3496}let v_683: bool = not-caught-fail(early_secret_53) in
            {3498}let m_69: bitstring = (if v_683 then zero else caught-fail) in
            {3499}let h_200: bitstring = (if v_683 then catch-fail(hash(@8_tls_h,m_69)) else caught-fail) in
            {3500}let v_684: bool = not-caught-fail(h_200) in
            {3497}let l_202: label = (if v_683 then tls13_ext_res_binder else caught-fail) in
            {3501}let x_226: bitstring = (if v_684 then (l_202,h_200) else caught-fail) in
            {3502}let binder_key_35: bitstring = (if v_683 then catch-fail((if v_684 then hmac(@8_tls_h,early_secret_53,x_226) else fail-any)) else caught-fail) in
            {3503}let v_685: bool = not-caught-fail(binder_key_35) in
            {3504}let v_686: bitstring = (if v_681 then catch-fail((if v_683 then (if v_685 then (early_secret_53,binder_key_35) else fail-any) else fail-any)) else caught-fail) in
            {3505}let v_687: bool = (not-caught-fail(v_686) && success?(1-proj-2-tuple(v_686))) in
            {3506}let kb_35: mac_key = (if v_687 then 2-proj-2-tuple(v_686) else caught-fail) in
            {3507}let es_54: bitstring = (if v_687 then 1-proj-2-tuple(v_686) else caught-fail) in
            {3490}let offer_29: params = (if v_681 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_17),ech_ext_13,extra_30,trunc_client_psk_ext(id_42)) else caught-fail) in
            {3491}let cur_log'_13: bitstring = (if v_681 then (cur_log_10,CH(cr_21,offer_29)) else caught-fail) in
            {3508}let binders_12: bitstring = (if v_687 then catch-fail(hmac(@8_tls_h,kb_35,cur_log'_13)) else caught-fail) in
            {3509}let v_688: bool = not-caught-fail(binders_12) in
            {3510}let v_689: bitstring = catch-fail((if v_681 then (if v_687 then (if v_688 then (client_psk_ext(id_42,binders_12),(psk_84,id_42,es_54,is_safe_33)) else fail-any) else fail-any) else fail-any)) in
            {3511}let v_690: bool = (not-caught-fail(v_689) && success?(1-proj-2-tuple(v_689))) in
            {3512}let psk_data_20: bitstring = (if v_690 then 2-proj-2-tuple(v_689) else caught-fail) in
            {3513}let psk_ext_41: preSharedKeyExt = (if v_690 then 1-proj-2-tuple(v_689) else caught-fail) in
            {3514}let offer_30: params = (if v_690 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_41) else caught-fail) in
            {3515}let (client_hello_9: msg,cr_24: bytes32,kex_data_10: bitstring,psk_data_21: bitstring) = (if v_690 then (CH(cr_21,offer_30),cr_21,kex_data_7,psk_data_20) else fail-any) in
            {3516}event ClientOffersAead(cr_24,@8_tls_a);
            {3517}event ClientOffersHash(cr_24,@8_tls_h);
            {3518}event ClientOffersGroup(cr_24,@8_tls_g);
            {3519}out(io, client_hello_9);
            {3521}let (psk_85: preSharedKey,id_43: identityPsk,es_55: bitstring,safe_psk_23: bool) = psk_data_21 in
            (
                {3522}if (false && (psk_85 ≠ NoPsk)) then
                {3523}let client_hello_10: bitstring = (zero,client_hello_9) in
                {3525}let h_201: bitstring = catch-fail(hash(@8_tls_h,client_hello_10)) in
                {3526}let v_691: bool = not-caught-fail(h_201) in
                {3524}let l_203: label = tls13_client_early_traffic_secret in
                {3527}let x_227: bitstring = (if v_691 then (l_203,h_201) else caught-fail) in
                {3528}let atsc0_5: bitstring = catch-fail((if v_691 then hmac(@8_tls_h,es_55,x_227) else fail-any)) in
                {3529}let v_692: bool = not-caught-fail(atsc0_5) in
                {3531}let h_202: bitstring = (if v_692 then zero else caught-fail) in
                {3530}let l_204: label = (if v_692 then tls13_key else caught-fail) in
                {3532}let x_228: bitstring = (if v_692 then (l_204,h_202) else caught-fail) in
                {3533}let kc0_5: bitstring = (if v_692 then catch-fail(hmac(@8_tls_h,atsc0_5,x_228)) else caught-fail) in
                {3534}let v_693: bool = not-caught-fail(kc0_5) in
                {3536}let h_203: bitstring = (if v_693 then catch-fail(hash(@8_tls_h,client_hello_10)) else caught-fail) in
                {3537}let v_694: bool = not-caught-fail(h_203) in
                {3535}let l_205: label = (if v_693 then tls13_early_exporter_master_secret else caught-fail) in
                {3538}let x_229: bitstring = (if v_694 then (l_205,h_203) else caught-fail) in
                {3539}let ems0_10: bitstring = (if v_693 then catch-fail((if v_694 then hmac(@8_tls_h,es_55,x_229) else fail-any)) else caught-fail) in
                {3540}let v_695: bool = not-caught-fail(ems0_10) in
                {3541}let (wkc0_5: aead_key,ems0_11: bitstring) = (if v_692 then (if v_693 then (if v_695 then (kc0_5,ems0_10) else fail-any) else fail-any) else fail-any) in
                {3542}!
                {3543}in(io, (i_5: nat,ad_5: bitstring));
                {3544}if is_nat(i_5) then
                {3545}new msg_ed_4[]: bitstring;
                {3547}new st_14: stamp;
                {3548}event ClientSequenceClient0RTTDataWriteKey(id_client_4,st_14,i_5);
                {3549}event ClientSends0(id_client_4,cr_24,psk_85,i_5,ad_5,msg_ed_4);
                {3546}let enc_ed_4: bitstring = aead_enc(@8_tls_a,wkc0_5,i_5,ad_5,msg_ed_4) in
                {3550}out(io, enc_ed_4)
            ) | (
                {3551}in(io, server_hello_5: msg);
                {3552}let SH(sr_28: bytes32,mode_20: params) = server_hello_5 in
                (
                    {3553}event ClientEchAcceptance(id_client_4,false);
                    {3520}let cur_log2_40: bitstring = (cur_log_10,client_hello_9) in
                    {3554}if (true && (sr_28 = B32(HRR24,HRR8))) then
                    (
                        {3555}if ((mode_20 = nego(TLS13,@8_tls_h,@8_tls_a,hrr_kex_ext(@8_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex_4 ≠ true)) then
                        (
                            {3558}new rand24_7[]: bytes24;
                            {3559}new rand8_7[]: bytes8;
                            {3561}new s_67[]: seed;
                            {3562}let gx_19: element = dh_pub(@8_tls_g,dh_k(s_67)) in
                            {3563}let v_696: bitstring = (dh_k(s_67),gx_19) in
                            {3564}let v_697: bool = success?(1-proj-2-tuple(v_696)) in
                            {3565}let gx_20: element = (if v_697 then 2-proj-2-tuple(v_696) else caught-fail) in
                            {3566}let x_230: bitstring = (if v_697 then 1-proj-2-tuple(v_696) else caught-fail) in
                            {3557}let send_kex_6: bool = true in
                            {3567}let kex_6: kex_alg = (if v_697 then (if send_kex_6 then DHE_kex(@8_tls_g,gx_20) else DHE_group(@8_tls_g)) else caught-fail) in
                            {3568}let (kex_ext_14: keyShareExt,kex_data_11: bitstring) = (if v_697 then (client_kex_ext(kex_6),(x_230,@8_tls_g)) else fail-any) in
                            {3560}let cr_25: bytes32 = B32(rand24_7,rand8_7) in
                            {3556}let cur_log3_6: bitstring = (cur_log2_40,server_hello_5) in
                            {3571}if @8_use_psk then
                            (
                                {3570}let extra_40: extraExt = empty_extra_ext in
                                {3569}let ech_ext_15: echExt = empty_ech_ext in
                                {3572}let (psk_86: preSharedKey,id_44: identityPsk,old_es_6: bitstring,is_safe_34: bool) = psk_data_21 in
                                (
                                    {3576}let k_59: bitstring = catch-fail(psk2b(psk_86)) in
                                    {3577}let v_698: bool = not-caught-fail(k_59) in
                                    {3575}let s_68: bitstring = zero in
                                    {3578}let early_secret_54: bitstring = catch-fail((if v_698 then hmac(@8_tls_h,s_68,k_59) else fail-any)) in
                                    {3579}let v_699: bool = not-caught-fail(early_secret_54) in
                                    {3581}let m_70: bitstring = (if v_699 then zero else caught-fail) in
                                    {3582}let h_204: bitstring = (if v_699 then catch-fail(hash(@8_tls_h,m_70)) else caught-fail) in
                                    {3583}let v_700: bool = not-caught-fail(h_204) in
                                    {3580}let l_206: label = (if v_699 then tls13_ext_res_binder else caught-fail) in
                                    {3584}let x_231: bitstring = (if v_700 then (l_206,h_204) else caught-fail) in
                                    {3585}let binder_key_36: bitstring = (if v_699 then catch-fail((if v_700 then hmac(@8_tls_h,early_secret_54,x_231) else fail-any)) else caught-fail) in
                                    {3586}let v_701: bool = not-caught-fail(binder_key_36) in
                                    {3587}let v_702: bitstring = catch-fail((if v_699 then (if v_701 then (early_secret_54,binder_key_36) else fail-any) else fail-any)) in
                                    {3588}let v_703: bool = (not-caught-fail(v_702) && success?(1-proj-2-tuple(v_702))) in
                                    {3589}let kb_36: mac_key = (if v_703 then 2-proj-2-tuple(v_702) else caught-fail) in
                                    {3590}let es_56: bitstring = (if v_703 then 1-proj-2-tuple(v_702) else caught-fail) in
                                    {3573}let offer_31: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_17),ech_ext_15,extra_40,trunc_client_psk_ext(id_44)) in
                                    {3574}let cur_log'_14: bitstring = (cur_log3_6,CH(cr_25,offer_31)) in
                                    {3591}let binders_13: bitstring = (if v_703 then catch-fail(hmac(@8_tls_h,kb_36,cur_log'_14)) else caught-fail) in
                                    {3592}let v_704: bool = not-caught-fail(binders_13) in
                                    {3593}let v_705: bitstring = catch-fail((if v_703 then (if v_704 then (client_psk_ext(id_44,binders_13),(psk_86,id_44,es_56,is_safe_34)) else fail-any) else fail-any)) in
                                    {3594}let v_706: bool = (not-caught-fail(v_705) && success?(1-proj-2-tuple(v_705))) in
                                    {3595}let psk_data_22: bitstring = (if v_706 then 2-proj-2-tuple(v_705) else caught-fail) in
                                    {3596}let psk_ext_42: preSharedKeyExt = (if v_706 then 1-proj-2-tuple(v_705) else caught-fail) in
                                    {3597}let offer_32: params = (if v_706 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_42) else caught-fail) in
                                    {3598}let (client_hello'_15: msg,cr'_17: bytes32,kex_data'_12: bitstring,psk_data'_12: bitstring) = (if v_706 then (CH(cr_25,offer_32),cr_25,kex_data_11,psk_data_22) else fail-any) in
                                    {3599}event ClientOffersAead(cr'_17,@8_tls_a);
                                    {3600}event ClientOffersHash(cr'_17,@8_tls_h);
                                    {3601}event ClientOffersGroup(cr'_17,@8_tls_g);
                                    {3602}out(io, client_hello'_15);
                                    {3604}in(io, server_hello'_12: msg);
                                    {3605}let SH(sr'_12: bytes32,mode'_12: params) = server_hello'_12 in
                                    (
                                        {3606}if (sr'_12 = B32(HRR24,HRR8)) then
                                            {3607}out(io, unexpected_message)
                                        else
                                            {3608}let (x_232: bitstring,g_17: group) = kex_data'_12 in
                                            {3609}let (psk_offer_16: preSharedKey,id_offer_16: identityPsk,es_offer_16: bitstring,is_safe_offer_16: bool) = psk_data'_12 in
                                            {3610}event Client_PSKOffer(id_client_4,psk_offer_16,id_offer_16,is_safe_offer_16);
                                            {3611}event Client_Rand_client(id_client_4,cr'_17);
                                            {3612}event Client_DH_client(id_client_4,dh_pub(g_17,x_232));
                                            {3613}event Client_server_domain(id_client_4,s_dom_17);
                                            {3614}let SH(sr_29: bytes32,mode_21: params) = server_hello'_12 in
                                            {3615}event Client_Rand_server(id_client_4,sr_29);
                                            {3616}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_17,gy_17: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_43: preSharedKeyExt) = mode_21 in
                                            (
                                                {3618}event Client_DH_server(id_client_4,gy_17);
                                                {3619}let v_707: bool = (psk_ext_43 = empty_psk_ext) in
                                                {3620}let psk_87: preSharedKey = (if v_707 then NoPsk else caught-fail) in
                                                {3622}let k_60: bitstring = (if v_707 then catch-fail(psk2b(psk_87)) else caught-fail) in
                                                {3623}let v_708: bool = not-caught-fail(k_60) in
                                                {3621}let s_69: bitstring = (if v_707 then zero else caught-fail) in
                                                {3624}let early_secret_55: bitstring = (if v_707 then catch-fail((if v_708 then hmac(@8_tls_h,s_69,k_60) else fail-any)) else caught-fail) in
                                                {3625}let v_709: bool = not-caught-fail(early_secret_55) in
                                                {3627}let m_71: bitstring = (if v_709 then zero else caught-fail) in
                                                {3628}let h_205: bitstring = (if v_709 then catch-fail(hash(@8_tls_h,m_71)) else caught-fail) in
                                                {3629}let v_710: bool = not-caught-fail(h_205) in
                                                {3626}let l_207: label = (if v_709 then tls13_ext_res_binder else caught-fail) in
                                                {3630}let x_233: bitstring = (if v_710 then (l_207,h_205) else caught-fail) in
                                                {3631}let binder_key_37: bitstring = (if v_709 then catch-fail((if v_710 then hmac(@8_tls_h,early_secret_55,x_233) else fail-any)) else caught-fail) in
                                                {3632}let v_711: bool = not-caught-fail(binder_key_37) in
                                                {3633}let v_712: bitstring = (if v_707 then catch-fail((if v_709 then (if v_711 then (early_secret_55,binder_key_37) else fail-any) else fail-any)) else caught-fail) in
                                                {3634}let v_713: bool = (not-caught-fail(v_712) && success?(1-proj-2-tuple(v_712))) in
                                                {3635}let kb_37: mac_key = (if v_713 then 2-proj-2-tuple(v_712) else caught-fail) in
                                                {3636}let es_57: bitstring = (if v_713 then 1-proj-2-tuple(v_712) else caught-fail) in
                                                {3637}let v_714: bitstring = (if not(v_707) then catch-fail(psk_data'_12) else caught-fail) in
                                                {3638}let v_715: bool = (not-caught-fail(v_714) && success?(1-proj-4-tuple(v_714))) in
                                                {3639}let is_safe_35: bool = (if v_715 then 4-proj-4-tuple(v_714) else caught-fail) in
                                                {3640}let es_58: bitstring = (if v_715 then 3-proj-4-tuple(v_714) else caught-fail) in
                                                {3641}let id_45: identityPsk = (if v_715 then 2-proj-4-tuple(v_714) else caught-fail) in
                                                {3642}let psk_88: preSharedKey = (if v_715 then 1-proj-4-tuple(v_714) else caught-fail) in
                                                {3643}let (psk_89: preSharedKey,early_secret_56: bitstring,valid_16: bool,safe_psk_24: bool) = (if v_707 then (if v_713 then (NoPsk,es_57,true,false) else fail-any) else (if v_715 then (psk_88,es_58,((psk_88 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_43)),is_safe_35) else fail-any)) in
                                                {3644}event Client_PSKChoosen(id_client_4,psk_89,safe_psk_24);
                                                {3645}if valid_16 then
                                                (
                                                    {3648}new s_70[]: seed;
                                                    {3646}let gxy_34: element = catch-fail(dh_decap_fun(g_17,gy_17,x_232)) in
                                                    {3647}let v_716: bool = not-caught-fail(gxy_34) in
                                                    {3649}let gxy_35: element = (if v_716 then gxy_34 else dh_f(s_70)) in
                                                    {3650}event Client_DH_gxy(id_client_4,gxy_35);
                                                    {3652}let m_72: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3653}let v_717: bool = not-caught-fail(m_72) in
                                                    {3654}let h_206: bitstring = (if v_717 then catch-fail(hash(@8_tls_h,m_72)) else caught-fail) in
                                                    {3655}let v_718: bool = not-caught-fail(h_206) in
                                                    {3651}let l_208: label = tls13_derived in
                                                    {3656}let x_234: bitstring = (if v_718 then (l_208,h_206) else caught-fail) in
                                                    {3657}let extra_41: bitstring = catch-fail((if v_717 then (if v_718 then hmac(@8_tls_h,early_secret_56,x_234) else fail-any) else fail-any)) in
                                                    {3658}let v_719: bool = not-caught-fail(extra_41) in
                                                    {3659}let handshake_secret_17: bitstring = (if v_719 then hmac(@8_tls_h,extra_41,gxy_35) else fail-any) in
                                                    {3661}let m_73: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3662}let v_720: bool = not-caught-fail(m_73) in
                                                    {3663}let h_207: bitstring = (if v_720 then catch-fail(hash(@8_tls_h,m_73)) else caught-fail) in
                                                    {3664}let v_721: bool = not-caught-fail(h_207) in
                                                    {3660}let l_209: label = tls13_derived in
                                                    {3665}let x_235: bitstring = (if v_721 then (l_209,h_207) else caught-fail) in
                                                    {3666}let extra_42: bitstring = catch-fail((if v_720 then (if v_721 then hmac(@8_tls_h,handshake_secret_17,x_235) else fail-any) else fail-any)) in
                                                    {3667}let v_722: bool = not-caught-fail(extra_42) in
                                                    {3668}let k_61: bitstring = (if v_722 then zero else caught-fail) in
                                                    {3669}let master_secret_41: bitstring = (if v_722 then catch-fail(hmac(@8_tls_h,handshake_secret_17,k_61)) else caught-fail) in
                                                    {3670}let v_723: bool = not-caught-fail(master_secret_41) in
                                                    {3603}let cur_log4_12: bitstring = (cur_log3_6,client_hello'_15) in
                                                    {3617}let cur_log2_41: bitstring = (cur_log4_12,server_hello'_12) in
                                                    {3672}let h_208: bitstring = (if v_723 then catch-fail(hash(@8_tls_h,cur_log2_41)) else caught-fail) in
                                                    {3673}let v_724: bool = not-caught-fail(h_208) in
                                                    {3671}let l_210: label = (if v_723 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3674}let x_236: bitstring = (if v_724 then (l_210,h_208) else caught-fail) in
                                                    {3675}let client_hts_17: bitstring = (if v_723 then catch-fail((if v_724 then hmac(@8_tls_h,handshake_secret_17,x_236) else fail-any)) else caught-fail) in
                                                    {3676}let v_725: bool = not-caught-fail(client_hts_17) in
                                                    {3678}let h_209: bitstring = (if v_725 then catch-fail(hash(@8_tls_h,cur_log2_41)) else caught-fail) in
                                                    {3679}let v_726: bool = not-caught-fail(h_209) in
                                                    {3677}let l_211: label = (if v_725 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3680}let x_237: bitstring = (if v_726 then (l_211,h_209) else caught-fail) in
                                                    {3681}let server_hts_17: bitstring = (if v_725 then catch-fail((if v_726 then hmac(@8_tls_h,handshake_secret_17,x_237) else fail-any)) else caught-fail) in
                                                    {3682}let v_727: bool = not-caught-fail(server_hts_17) in
                                                    {3684}let h_210: bitstring = (if v_727 then zero else caught-fail) in
                                                    {3683}let l_212: label = (if v_727 then tls13_key else caught-fail) in
                                                    {3685}let x_238: bitstring = (if v_727 then (l_212,h_210) else caught-fail) in
                                                    {3686}let client_wkh_17: bitstring = (if v_727 then catch-fail(hmac(@8_tls_h,client_hts_17,x_238)) else caught-fail) in
                                                    {3687}let v_728: bool = not-caught-fail(client_wkh_17) in
                                                    {3689}let h_211: bitstring = (if v_728 then zero else caught-fail) in
                                                    {3688}let l_213: label = (if v_728 then tls13_key else caught-fail) in
                                                    {3690}let x_239: bitstring = (if v_728 then (l_213,h_211) else caught-fail) in
                                                    {3691}let server_wkh_17: bitstring = (if v_728 then catch-fail(hmac(@8_tls_h,server_hts_17,x_239)) else caught-fail) in
                                                    {3692}let v_729: bool = not-caught-fail(server_wkh_17) in
                                                    {3694}let h_212: bitstring = (if v_729 then zero else caught-fail) in
                                                    {3693}let l_214: label = (if v_729 then tls13_finished else caught-fail) in
                                                    {3695}let x_240: bitstring = (if v_729 then (l_214,h_212) else caught-fail) in
                                                    {3696}let client_fk_17: bitstring = (if v_729 then catch-fail(hmac(@8_tls_h,client_hts_17,x_240)) else caught-fail) in
                                                    {3697}let v_730: bool = not-caught-fail(client_fk_17) in
                                                    {3699}let h_213: bitstring = (if v_730 then zero else caught-fail) in
                                                    {3698}let l_215: label = (if v_730 then tls13_finished else caught-fail) in
                                                    {3700}let x_241: bitstring = (if v_730 then (l_215,h_213) else caught-fail) in
                                                    {3701}let server_fk_17: bitstring = (if v_730 then catch-fail(hmac(@8_tls_h,server_hts_17,x_241)) else caught-fail) in
                                                    {3702}let v_731: bool = not-caught-fail(server_fk_17) in
                                                    {3703}let (master_secret_42: bitstring,chk_24: aead_key,shk_23: aead_key,cfin_24: mac_key,sfin_23: mac_key) = (if v_722 then (if v_723 then (if v_725 then (if v_727 then (if v_728 then (if v_729 then (if v_730 then (if v_731 then (master_secret_41,client_wkh_17,server_wkh_17,client_fk_17,server_fk_17) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3704}event Client_chk(id_client_4,chk_24);
                                                    {3705}event Client_shk(id_client_4,shk_23);
                                                    {3706}event Client_cfin(id_client_4,cfin_24);
                                                    {3707}event Client_sfin(id_client_4,sfin_23);
                                                    {3708}in(io, enc_ee_msg_16: bitstring);
                                                    {3709}let ee_msg_21: msg = aead_dec(@8_tls_a,shk_23,0,zero,enc_ee_msg_16) in
                                                    {3710}let EE(ech_ee_16: echExt,extra_ee_16: extraExt) = ee_msg_21 in
                                                    {3711}let cur_log2_42: bitstring = (cur_log2_41,ee_msg_21) in
                                                    {3712}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_17,sr_29,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_89,safe_psk_24,@8_comp_psk,master_secret_42,chk_24,0,shk_23,1,cfin_24,sfin_23,cur_log2_42)))
                                                )
                                                else
                                                    {3713}out(io, illegal_parameter)
                                            )
                                            else
                                                {3714}out(io, illegal_parameter)
                                    )
                                    else
                                        {3715}out(io, unexpected_message)
                                )
                                else
                                    {3868}get pre_shared_keys(c_dom'_8: domain,=s_dom_17,=@8_tls_h,id_46: identityPsk,psk_90: preSharedKey,idP_11: idProc,is_safe_36: bool) in
                                    {3716}event Selected_one_time_used_psk(id_client_4,psk_90,is_safe_36);
                                    {3717}event Selected_psk(c_dom_7,c_dom'_8,idP_11,is_safe_36);
                                    {3718}event Selected_psk_no_missmatch(id_client_4,s_dom_17,@8_tls_h,psk_90,id_46);
                                    {3719}event Selected_psk_with_ID(c_dom_7,c_dom'_8,id_46,idP_11,is_safe_36);
                                    {3720}let v_732: bitstring = (id_46,psk_90,is_safe_36) in
                                    {3721}let v_733: bool = success?(1-proj-3-tuple(v_732)) in
                                    {3722}let is_safe_37: bool = (if v_733 then 3-proj-3-tuple(v_732) else caught-fail) in
                                    {3723}let psk_91: preSharedKey = (if v_733 then 2-proj-3-tuple(v_732) else caught-fail) in
                                    {3724}let id_47: identityPsk = (if v_733 then 1-proj-3-tuple(v_732) else caught-fail) in
                                    {3728}let k_62: bitstring = (if v_733 then catch-fail(psk2b(psk_91)) else caught-fail) in
                                    {3729}let v_734: bool = not-caught-fail(k_62) in
                                    {3727}let s_71: bitstring = (if v_733 then zero else caught-fail) in
                                    {3730}let early_secret_57: bitstring = (if v_733 then catch-fail((if v_734 then hmac(@8_tls_h,s_71,k_62) else fail-any)) else caught-fail) in
                                    {3731}let v_735: bool = not-caught-fail(early_secret_57) in
                                    {3733}let m_74: bitstring = (if v_735 then zero else caught-fail) in
                                    {3734}let h_214: bitstring = (if v_735 then catch-fail(hash(@8_tls_h,m_74)) else caught-fail) in
                                    {3735}let v_736: bool = not-caught-fail(h_214) in
                                    {3732}let l_216: label = (if v_735 then tls13_ext_res_binder else caught-fail) in
                                    {3736}let x_242: bitstring = (if v_736 then (l_216,h_214) else caught-fail) in
                                    {3737}let binder_key_38: bitstring = (if v_735 then catch-fail((if v_736 then hmac(@8_tls_h,early_secret_57,x_242) else fail-any)) else caught-fail) in
                                    {3738}let v_737: bool = not-caught-fail(binder_key_38) in
                                    {3739}let v_738: bitstring = (if v_733 then catch-fail((if v_735 then (if v_737 then (early_secret_57,binder_key_38) else fail-any) else fail-any)) else caught-fail) in
                                    {3740}let v_739: bool = (not-caught-fail(v_738) && success?(1-proj-2-tuple(v_738))) in
                                    {3741}let kb_38: mac_key = (if v_739 then 2-proj-2-tuple(v_738) else caught-fail) in
                                    {3742}let es_59: bitstring = (if v_739 then 1-proj-2-tuple(v_738) else caught-fail) in
                                    {3725}let offer_33: params = (if v_733 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_17),ech_ext_15,extra_40,trunc_client_psk_ext(id_47)) else caught-fail) in
                                    {3726}let cur_log'_15: bitstring = (if v_733 then (cur_log3_6,CH(cr_25,offer_33)) else caught-fail) in
                                    {3743}let binders_14: bitstring = (if v_739 then catch-fail(hmac(@8_tls_h,kb_38,cur_log'_15)) else caught-fail) in
                                    {3744}let v_740: bool = not-caught-fail(binders_14) in
                                    {3745}let v_741: bitstring = catch-fail((if v_733 then (if v_739 then (if v_740 then (client_psk_ext(id_47,binders_14),(psk_91,id_47,es_59,is_safe_37)) else fail-any) else fail-any) else fail-any)) in
                                    {3746}let v_742: bool = (not-caught-fail(v_741) && success?(1-proj-2-tuple(v_741))) in
                                    {3747}let psk_data_23: bitstring = (if v_742 then 2-proj-2-tuple(v_741) else caught-fail) in
                                    {3748}let psk_ext_44: preSharedKeyExt = (if v_742 then 1-proj-2-tuple(v_741) else caught-fail) in
                                    {3749}let offer_34: params = (if v_742 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_44) else caught-fail) in
                                    {3750}let (client_hello'_16: msg,cr'_18: bytes32,kex_data'_13: bitstring,psk_data'_13: bitstring) = (if v_742 then (CH(cr_25,offer_34),cr_25,kex_data_11,psk_data_23) else fail-any) in
                                    {3751}event ClientOffersAead(cr'_18,@8_tls_a);
                                    {3752}event ClientOffersHash(cr'_18,@8_tls_h);
                                    {3753}event ClientOffersGroup(cr'_18,@8_tls_g);
                                    {3754}out(io, client_hello'_16);
                                    {3756}in(io, server_hello'_13: msg);
                                    {3757}let SH(sr'_13: bytes32,mode'_13: params) = server_hello'_13 in
                                    (
                                        {3758}if (sr'_13 = B32(HRR24,HRR8)) then
                                            {3759}out(io, unexpected_message)
                                        else
                                            {3760}let (x_243: bitstring,g_18: group) = kex_data'_13 in
                                            {3761}let (psk_offer_17: preSharedKey,id_offer_17: identityPsk,es_offer_17: bitstring,is_safe_offer_17: bool) = psk_data'_13 in
                                            {3762}event Client_PSKOffer(id_client_4,psk_offer_17,id_offer_17,is_safe_offer_17);
                                            {3763}event Client_Rand_client(id_client_4,cr'_18);
                                            {3764}event Client_DH_client(id_client_4,dh_pub(g_18,x_243));
                                            {3765}event Client_server_domain(id_client_4,s_dom_17);
                                            {3766}let SH(sr_30: bytes32,mode_22: params) = server_hello'_13 in
                                            {3767}event Client_Rand_server(id_client_4,sr_30);
                                            {3768}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_18,gy_18: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_45: preSharedKeyExt) = mode_22 in
                                            (
                                                {3770}event Client_DH_server(id_client_4,gy_18);
                                                {3771}let v_743: bool = (psk_ext_45 = empty_psk_ext) in
                                                {3772}let psk_92: preSharedKey = (if v_743 then NoPsk else caught-fail) in
                                                {3774}let k_63: bitstring = (if v_743 then catch-fail(psk2b(psk_92)) else caught-fail) in
                                                {3775}let v_744: bool = not-caught-fail(k_63) in
                                                {3773}let s_72: bitstring = (if v_743 then zero else caught-fail) in
                                                {3776}let early_secret_58: bitstring = (if v_743 then catch-fail((if v_744 then hmac(@8_tls_h,s_72,k_63) else fail-any)) else caught-fail) in
                                                {3777}let v_745: bool = not-caught-fail(early_secret_58) in
                                                {3779}let m_75: bitstring = (if v_745 then zero else caught-fail) in
                                                {3780}let h_215: bitstring = (if v_745 then catch-fail(hash(@8_tls_h,m_75)) else caught-fail) in
                                                {3781}let v_746: bool = not-caught-fail(h_215) in
                                                {3778}let l_217: label = (if v_745 then tls13_ext_res_binder else caught-fail) in
                                                {3782}let x_244: bitstring = (if v_746 then (l_217,h_215) else caught-fail) in
                                                {3783}let binder_key_39: bitstring = (if v_745 then catch-fail((if v_746 then hmac(@8_tls_h,early_secret_58,x_244) else fail-any)) else caught-fail) in
                                                {3784}let v_747: bool = not-caught-fail(binder_key_39) in
                                                {3785}let v_748: bitstring = (if v_743 then catch-fail((if v_745 then (if v_747 then (early_secret_58,binder_key_39) else fail-any) else fail-any)) else caught-fail) in
                                                {3786}let v_749: bool = (not-caught-fail(v_748) && success?(1-proj-2-tuple(v_748))) in
                                                {3787}let kb_39: mac_key = (if v_749 then 2-proj-2-tuple(v_748) else caught-fail) in
                                                {3788}let es_60: bitstring = (if v_749 then 1-proj-2-tuple(v_748) else caught-fail) in
                                                {3789}let v_750: bitstring = (if not(v_743) then catch-fail(psk_data'_13) else caught-fail) in
                                                {3790}let v_751: bool = (not-caught-fail(v_750) && success?(1-proj-4-tuple(v_750))) in
                                                {3791}let is_safe_38: bool = (if v_751 then 4-proj-4-tuple(v_750) else caught-fail) in
                                                {3792}let es_61: bitstring = (if v_751 then 3-proj-4-tuple(v_750) else caught-fail) in
                                                {3793}let id_48: identityPsk = (if v_751 then 2-proj-4-tuple(v_750) else caught-fail) in
                                                {3794}let psk_93: preSharedKey = (if v_751 then 1-proj-4-tuple(v_750) else caught-fail) in
                                                {3795}let (psk_94: preSharedKey,early_secret_59: bitstring,valid_17: bool,safe_psk_25: bool) = (if v_743 then (if v_749 then (NoPsk,es_60,true,false) else fail-any) else (if v_751 then (psk_93,es_61,((psk_93 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_45)),is_safe_38) else fail-any)) in
                                                {3796}event Client_PSKChoosen(id_client_4,psk_94,safe_psk_25);
                                                {3797}if valid_17 then
                                                (
                                                    {3800}new s_73[]: seed;
                                                    {3798}let gxy_36: element = catch-fail(dh_decap_fun(g_18,gy_18,x_243)) in
                                                    {3799}let v_752: bool = not-caught-fail(gxy_36) in
                                                    {3801}let gxy_37: element = (if v_752 then gxy_36 else dh_f(s_73)) in
                                                    {3802}event Client_DH_gxy(id_client_4,gxy_37);
                                                    {3804}let m_76: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3805}let v_753: bool = not-caught-fail(m_76) in
                                                    {3806}let h_216: bitstring = (if v_753 then catch-fail(hash(@8_tls_h,m_76)) else caught-fail) in
                                                    {3807}let v_754: bool = not-caught-fail(h_216) in
                                                    {3803}let l_218: label = tls13_derived in
                                                    {3808}let x_245: bitstring = (if v_754 then (l_218,h_216) else caught-fail) in
                                                    {3809}let extra_43: bitstring = catch-fail((if v_753 then (if v_754 then hmac(@8_tls_h,early_secret_59,x_245) else fail-any) else fail-any)) in
                                                    {3810}let v_755: bool = not-caught-fail(extra_43) in
                                                    {3811}let handshake_secret_18: bitstring = (if v_755 then hmac(@8_tls_h,extra_43,gxy_37) else fail-any) in
                                                    {3813}let m_77: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                    {3814}let v_756: bool = not-caught-fail(m_77) in
                                                    {3815}let h_217: bitstring = (if v_756 then catch-fail(hash(@8_tls_h,m_77)) else caught-fail) in
                                                    {3816}let v_757: bool = not-caught-fail(h_217) in
                                                    {3812}let l_219: label = tls13_derived in
                                                    {3817}let x_246: bitstring = (if v_757 then (l_219,h_217) else caught-fail) in
                                                    {3818}let extra_44: bitstring = catch-fail((if v_756 then (if v_757 then hmac(@8_tls_h,handshake_secret_18,x_246) else fail-any) else fail-any)) in
                                                    {3819}let v_758: bool = not-caught-fail(extra_44) in
                                                    {3820}let k_64: bitstring = (if v_758 then zero else caught-fail) in
                                                    {3821}let master_secret_43: bitstring = (if v_758 then catch-fail(hmac(@8_tls_h,handshake_secret_18,k_64)) else caught-fail) in
                                                    {3822}let v_759: bool = not-caught-fail(master_secret_43) in
                                                    {3755}let cur_log4_13: bitstring = (cur_log3_6,client_hello'_16) in
                                                    {3769}let cur_log2_43: bitstring = (cur_log4_13,server_hello'_13) in
                                                    {3824}let h_218: bitstring = (if v_759 then catch-fail(hash(@8_tls_h,cur_log2_43)) else caught-fail) in
                                                    {3825}let v_760: bool = not-caught-fail(h_218) in
                                                    {3823}let l_220: label = (if v_759 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                    {3826}let x_247: bitstring = (if v_760 then (l_220,h_218) else caught-fail) in
                                                    {3827}let client_hts_18: bitstring = (if v_759 then catch-fail((if v_760 then hmac(@8_tls_h,handshake_secret_18,x_247) else fail-any)) else caught-fail) in
                                                    {3828}let v_761: bool = not-caught-fail(client_hts_18) in
                                                    {3830}let h_219: bitstring = (if v_761 then catch-fail(hash(@8_tls_h,cur_log2_43)) else caught-fail) in
                                                    {3831}let v_762: bool = not-caught-fail(h_219) in
                                                    {3829}let l_221: label = (if v_761 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                    {3832}let x_248: bitstring = (if v_762 then (l_221,h_219) else caught-fail) in
                                                    {3833}let server_hts_18: bitstring = (if v_761 then catch-fail((if v_762 then hmac(@8_tls_h,handshake_secret_18,x_248) else fail-any)) else caught-fail) in
                                                    {3834}let v_763: bool = not-caught-fail(server_hts_18) in
                                                    {3836}let h_220: bitstring = (if v_763 then zero else caught-fail) in
                                                    {3835}let l_222: label = (if v_763 then tls13_key else caught-fail) in
                                                    {3837}let x_249: bitstring = (if v_763 then (l_222,h_220) else caught-fail) in
                                                    {3838}let client_wkh_18: bitstring = (if v_763 then catch-fail(hmac(@8_tls_h,client_hts_18,x_249)) else caught-fail) in
                                                    {3839}let v_764: bool = not-caught-fail(client_wkh_18) in
                                                    {3841}let h_221: bitstring = (if v_764 then zero else caught-fail) in
                                                    {3840}let l_223: label = (if v_764 then tls13_key else caught-fail) in
                                                    {3842}let x_250: bitstring = (if v_764 then (l_223,h_221) else caught-fail) in
                                                    {3843}let server_wkh_18: bitstring = (if v_764 then catch-fail(hmac(@8_tls_h,server_hts_18,x_250)) else caught-fail) in
                                                    {3844}let v_765: bool = not-caught-fail(server_wkh_18) in
                                                    {3846}let h_222: bitstring = (if v_765 then zero else caught-fail) in
                                                    {3845}let l_224: label = (if v_765 then tls13_finished else caught-fail) in
                                                    {3847}let x_251: bitstring = (if v_765 then (l_224,h_222) else caught-fail) in
                                                    {3848}let client_fk_18: bitstring = (if v_765 then catch-fail(hmac(@8_tls_h,client_hts_18,x_251)) else caught-fail) in
                                                    {3849}let v_766: bool = not-caught-fail(client_fk_18) in
                                                    {3851}let h_223: bitstring = (if v_766 then zero else caught-fail) in
                                                    {3850}let l_225: label = (if v_766 then tls13_finished else caught-fail) in
                                                    {3852}let x_252: bitstring = (if v_766 then (l_225,h_223) else caught-fail) in
                                                    {3853}let server_fk_18: bitstring = (if v_766 then catch-fail(hmac(@8_tls_h,server_hts_18,x_252)) else caught-fail) in
                                                    {3854}let v_767: bool = not-caught-fail(server_fk_18) in
                                                    {3855}let (master_secret_44: bitstring,chk_25: aead_key,shk_24: aead_key,cfin_25: mac_key,sfin_24: mac_key) = (if v_758 then (if v_759 then (if v_761 then (if v_763 then (if v_764 then (if v_765 then (if v_766 then (if v_767 then (master_secret_43,client_wkh_18,server_wkh_18,client_fk_18,server_fk_18) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                    {3856}event Client_chk(id_client_4,chk_25);
                                                    {3857}event Client_shk(id_client_4,shk_24);
                                                    {3858}event Client_cfin(id_client_4,cfin_25);
                                                    {3859}event Client_sfin(id_client_4,sfin_24);
                                                    {3860}in(io, enc_ee_msg_17: bitstring);
                                                    {3861}let ee_msg_22: msg = aead_dec(@8_tls_a,shk_24,0,zero,enc_ee_msg_17) in
                                                    {3862}let EE(ech_ee_17: echExt,extra_ee_17: extraExt) = ee_msg_22 in
                                                    {3863}let cur_log2_44: bitstring = (cur_log2_43,ee_msg_22) in
                                                    {3864}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_18,sr_30,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_94,safe_psk_25,@8_comp_psk,master_secret_44,chk_25,0,shk_24,1,cfin_25,sfin_24,cur_log2_44)))
                                                )
                                                else
                                                    {3865}out(io, illegal_parameter)
                                            )
                                            else
                                                {3866}out(io, illegal_parameter)
                                    )
                                    else
                                        {3867}out(io, unexpected_message)
                            )
                            else
                                {3869}let psk_95: preSharedKey = NoPsk in
                                {3871}let k_65: bitstring = catch-fail(psk2b(psk_95)) in
                                {3872}let v_768: bool = not-caught-fail(k_65) in
                                {3870}let s_74: bitstring = zero in
                                {3873}let early_secret_60: bitstring = catch-fail((if v_768 then hmac(@8_tls_h,s_74,k_65) else fail-any)) in
                                {3874}let v_769: bool = not-caught-fail(early_secret_60) in
                                {3876}let m_78: bitstring = (if v_769 then zero else caught-fail) in
                                {3877}let h_224: bitstring = (if v_769 then catch-fail(hash(@8_tls_h,m_78)) else caught-fail) in
                                {3878}let v_770: bool = not-caught-fail(h_224) in
                                {3875}let l_226: label = (if v_769 then tls13_ext_res_binder else caught-fail) in
                                {3879}let x_253: bitstring = (if v_770 then (l_226,h_224) else caught-fail) in
                                {3880}let binder_key_40: bitstring = (if v_769 then catch-fail((if v_770 then hmac(@8_tls_h,early_secret_60,x_253) else fail-any)) else caught-fail) in
                                {3881}let v_771: bool = not-caught-fail(binder_key_40) in
                                {3882}let v_772: bitstring = catch-fail((if v_769 then (if v_771 then (early_secret_60,binder_key_40) else fail-any) else fail-any)) in
                                {3883}let v_773: bool = (not-caught-fail(v_772) && success?(1-proj-2-tuple(v_772))) in
                                {3884}let kb_40: mac_key = (if v_773 then 2-proj-2-tuple(v_772) else caught-fail) in
                                {3885}let es_62: bitstring = (if v_773 then 1-proj-2-tuple(v_772) else caught-fail) in
                                {3886}let v_774: bitstring = catch-fail((if v_773 then (empty_psk_ext,(NoPsk,zero,es_62,false)) else fail-any)) in
                                {3887}let v_775: bool = (not-caught-fail(v_774) && success?(1-proj-2-tuple(v_774))) in
                                {3888}let psk_data_24: bitstring = (if v_775 then 2-proj-2-tuple(v_774) else caught-fail) in
                                {3889}let psk_ext_46: preSharedKeyExt = (if v_775 then 1-proj-2-tuple(v_774) else caught-fail) in
                                {3890}let offer_35: params = (if v_775 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_14,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_46) else caught-fail) in
                                {3891}let (client_hello'_17: msg,cr'_19: bytes32,kex_data'_14: bitstring,psk_data'_14: bitstring) = (if v_775 then (CH(cr_25,offer_35),cr_25,kex_data_11,psk_data_24) else fail-any) in
                                {3892}event ClientOffersAead(cr'_19,@8_tls_a);
                                {3893}event ClientOffersHash(cr'_19,@8_tls_h);
                                {3894}event ClientOffersGroup(cr'_19,@8_tls_g);
                                {3895}out(io, client_hello'_17);
                                {3897}in(io, server_hello'_14: msg);
                                {3898}let SH(sr'_14: bytes32,mode'_14: params) = server_hello'_14 in
                                (
                                    {3899}if (sr'_14 = B32(HRR24,HRR8)) then
                                        {3900}out(io, unexpected_message)
                                    else
                                        {3901}let (x_254: bitstring,g_19: group) = kex_data'_14 in
                                        {3902}let (psk_offer_18: preSharedKey,id_offer_18: identityPsk,es_offer_18: bitstring,is_safe_offer_18: bool) = psk_data'_14 in
                                        {3903}event Client_PSKOffer(id_client_4,psk_offer_18,id_offer_18,is_safe_offer_18);
                                        {3904}event Client_Rand_client(id_client_4,cr'_19);
                                        {3905}event Client_DH_client(id_client_4,dh_pub(g_19,x_254));
                                        {3906}event Client_server_domain(id_client_4,s_dom_17);
                                        {3907}let SH(sr_31: bytes32,mode_23: params) = server_hello'_14 in
                                        {3908}event Client_Rand_server(id_client_4,sr_31);
                                        {3909}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_19,gy_19: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_47: preSharedKeyExt) = mode_23 in
                                        (
                                            {3911}event Client_DH_server(id_client_4,gy_19);
                                            {3912}let v_776: bool = (psk_ext_47 = empty_psk_ext) in
                                            {3913}let psk_96: preSharedKey = (if v_776 then NoPsk else caught-fail) in
                                            {3915}let k_66: bitstring = (if v_776 then catch-fail(psk2b(psk_96)) else caught-fail) in
                                            {3916}let v_777: bool = not-caught-fail(k_66) in
                                            {3914}let s_75: bitstring = (if v_776 then zero else caught-fail) in
                                            {3917}let early_secret_61: bitstring = (if v_776 then catch-fail((if v_777 then hmac(@8_tls_h,s_75,k_66) else fail-any)) else caught-fail) in
                                            {3918}let v_778: bool = not-caught-fail(early_secret_61) in
                                            {3920}let m_79: bitstring = (if v_778 then zero else caught-fail) in
                                            {3921}let h_225: bitstring = (if v_778 then catch-fail(hash(@8_tls_h,m_79)) else caught-fail) in
                                            {3922}let v_779: bool = not-caught-fail(h_225) in
                                            {3919}let l_227: label = (if v_778 then tls13_ext_res_binder else caught-fail) in
                                            {3923}let x_255: bitstring = (if v_779 then (l_227,h_225) else caught-fail) in
                                            {3924}let binder_key_41: bitstring = (if v_778 then catch-fail((if v_779 then hmac(@8_tls_h,early_secret_61,x_255) else fail-any)) else caught-fail) in
                                            {3925}let v_780: bool = not-caught-fail(binder_key_41) in
                                            {3926}let v_781: bitstring = (if v_776 then catch-fail((if v_778 then (if v_780 then (early_secret_61,binder_key_41) else fail-any) else fail-any)) else caught-fail) in
                                            {3927}let v_782: bool = (not-caught-fail(v_781) && success?(1-proj-2-tuple(v_781))) in
                                            {3928}let kb_41: mac_key = (if v_782 then 2-proj-2-tuple(v_781) else caught-fail) in
                                            {3929}let es_63: bitstring = (if v_782 then 1-proj-2-tuple(v_781) else caught-fail) in
                                            {3930}let v_783: bitstring = (if not(v_776) then catch-fail(psk_data'_14) else caught-fail) in
                                            {3931}let v_784: bool = (not-caught-fail(v_783) && success?(1-proj-4-tuple(v_783))) in
                                            {3932}let is_safe_39: bool = (if v_784 then 4-proj-4-tuple(v_783) else caught-fail) in
                                            {3933}let es_64: bitstring = (if v_784 then 3-proj-4-tuple(v_783) else caught-fail) in
                                            {3934}let id_49: identityPsk = (if v_784 then 2-proj-4-tuple(v_783) else caught-fail) in
                                            {3935}let psk_97: preSharedKey = (if v_784 then 1-proj-4-tuple(v_783) else caught-fail) in
                                            {3936}let (psk_98: preSharedKey,early_secret_62: bitstring,valid_18: bool,safe_psk_26: bool) = (if v_776 then (if v_782 then (NoPsk,es_63,true,false) else fail-any) else (if v_784 then (psk_97,es_64,((psk_97 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_47)),is_safe_39) else fail-any)) in
                                            {3937}event Client_PSKChoosen(id_client_4,psk_98,safe_psk_26);
                                            {3938}if valid_18 then
                                            (
                                                {3941}new s_76[]: seed;
                                                {3939}let gxy_38: element = catch-fail(dh_decap_fun(g_19,gy_19,x_254)) in
                                                {3940}let v_785: bool = not-caught-fail(gxy_38) in
                                                {3942}let gxy_39: element = (if v_785 then gxy_38 else dh_f(s_76)) in
                                                {3943}event Client_DH_gxy(id_client_4,gxy_39);
                                                {3945}let m_80: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3946}let v_786: bool = not-caught-fail(m_80) in
                                                {3947}let h_226: bitstring = (if v_786 then catch-fail(hash(@8_tls_h,m_80)) else caught-fail) in
                                                {3948}let v_787: bool = not-caught-fail(h_226) in
                                                {3944}let l_228: label = tls13_derived in
                                                {3949}let x_256: bitstring = (if v_787 then (l_228,h_226) else caught-fail) in
                                                {3950}let extra_45: bitstring = catch-fail((if v_786 then (if v_787 then hmac(@8_tls_h,early_secret_62,x_256) else fail-any) else fail-any)) in
                                                {3951}let v_788: bool = not-caught-fail(extra_45) in
                                                {3952}let handshake_secret_19: bitstring = (if v_788 then hmac(@8_tls_h,extra_45,gxy_39) else fail-any) in
                                                {3954}let m_81: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {3955}let v_789: bool = not-caught-fail(m_81) in
                                                {3956}let h_227: bitstring = (if v_789 then catch-fail(hash(@8_tls_h,m_81)) else caught-fail) in
                                                {3957}let v_790: bool = not-caught-fail(h_227) in
                                                {3953}let l_229: label = tls13_derived in
                                                {3958}let x_257: bitstring = (if v_790 then (l_229,h_227) else caught-fail) in
                                                {3959}let extra_46: bitstring = catch-fail((if v_789 then (if v_790 then hmac(@8_tls_h,handshake_secret_19,x_257) else fail-any) else fail-any)) in
                                                {3960}let v_791: bool = not-caught-fail(extra_46) in
                                                {3961}let k_67: bitstring = (if v_791 then zero else caught-fail) in
                                                {3962}let master_secret_45: bitstring = (if v_791 then catch-fail(hmac(@8_tls_h,handshake_secret_19,k_67)) else caught-fail) in
                                                {3963}let v_792: bool = not-caught-fail(master_secret_45) in
                                                {3896}let cur_log4_14: bitstring = (cur_log3_6,client_hello'_17) in
                                                {3910}let cur_log2_45: bitstring = (cur_log4_14,server_hello'_14) in
                                                {3965}let h_228: bitstring = (if v_792 then catch-fail(hash(@8_tls_h,cur_log2_45)) else caught-fail) in
                                                {3966}let v_793: bool = not-caught-fail(h_228) in
                                                {3964}let l_230: label = (if v_792 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {3967}let x_258: bitstring = (if v_793 then (l_230,h_228) else caught-fail) in
                                                {3968}let client_hts_19: bitstring = (if v_792 then catch-fail((if v_793 then hmac(@8_tls_h,handshake_secret_19,x_258) else fail-any)) else caught-fail) in
                                                {3969}let v_794: bool = not-caught-fail(client_hts_19) in
                                                {3971}let h_229: bitstring = (if v_794 then catch-fail(hash(@8_tls_h,cur_log2_45)) else caught-fail) in
                                                {3972}let v_795: bool = not-caught-fail(h_229) in
                                                {3970}let l_231: label = (if v_794 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {3973}let x_259: bitstring = (if v_795 then (l_231,h_229) else caught-fail) in
                                                {3974}let server_hts_19: bitstring = (if v_794 then catch-fail((if v_795 then hmac(@8_tls_h,handshake_secret_19,x_259) else fail-any)) else caught-fail) in
                                                {3975}let v_796: bool = not-caught-fail(server_hts_19) in
                                                {3977}let h_230: bitstring = (if v_796 then zero else caught-fail) in
                                                {3976}let l_232: label = (if v_796 then tls13_key else caught-fail) in
                                                {3978}let x_260: bitstring = (if v_796 then (l_232,h_230) else caught-fail) in
                                                {3979}let client_wkh_19: bitstring = (if v_796 then catch-fail(hmac(@8_tls_h,client_hts_19,x_260)) else caught-fail) in
                                                {3980}let v_797: bool = not-caught-fail(client_wkh_19) in
                                                {3982}let h_231: bitstring = (if v_797 then zero else caught-fail) in
                                                {3981}let l_233: label = (if v_797 then tls13_key else caught-fail) in
                                                {3983}let x_261: bitstring = (if v_797 then (l_233,h_231) else caught-fail) in
                                                {3984}let server_wkh_19: bitstring = (if v_797 then catch-fail(hmac(@8_tls_h,server_hts_19,x_261)) else caught-fail) in
                                                {3985}let v_798: bool = not-caught-fail(server_wkh_19) in
                                                {3987}let h_232: bitstring = (if v_798 then zero else caught-fail) in
                                                {3986}let l_234: label = (if v_798 then tls13_finished else caught-fail) in
                                                {3988}let x_262: bitstring = (if v_798 then (l_234,h_232) else caught-fail) in
                                                {3989}let client_fk_19: bitstring = (if v_798 then catch-fail(hmac(@8_tls_h,client_hts_19,x_262)) else caught-fail) in
                                                {3990}let v_799: bool = not-caught-fail(client_fk_19) in
                                                {3992}let h_233: bitstring = (if v_799 then zero else caught-fail) in
                                                {3991}let l_235: label = (if v_799 then tls13_finished else caught-fail) in
                                                {3993}let x_263: bitstring = (if v_799 then (l_235,h_233) else caught-fail) in
                                                {3994}let server_fk_19: bitstring = (if v_799 then catch-fail(hmac(@8_tls_h,server_hts_19,x_263)) else caught-fail) in
                                                {3995}let v_800: bool = not-caught-fail(server_fk_19) in
                                                {3996}let (master_secret_46: bitstring,chk_26: aead_key,shk_25: aead_key,cfin_26: mac_key,sfin_25: mac_key) = (if v_791 then (if v_792 then (if v_794 then (if v_796 then (if v_797 then (if v_798 then (if v_799 then (if v_800 then (master_secret_45,client_wkh_19,server_wkh_19,client_fk_19,server_fk_19) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {3997}event Client_chk(id_client_4,chk_26);
                                                {3998}event Client_shk(id_client_4,shk_25);
                                                {3999}event Client_cfin(id_client_4,cfin_26);
                                                {4000}event Client_sfin(id_client_4,sfin_25);
                                                {4001}in(io, enc_ee_msg_18: bitstring);
                                                {4002}let ee_msg_23: msg = aead_dec(@8_tls_a,shk_25,0,zero,enc_ee_msg_18) in
                                                {4003}let EE(ech_ee_18: echExt,extra_ee_18: extraExt) = ee_msg_23 in
                                                {4004}let cur_log2_46: bitstring = (cur_log2_45,ee_msg_23) in
                                                {4005}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_19,sr_31,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_98,safe_psk_26,@8_comp_psk,master_secret_46,chk_26,0,shk_25,1,cfin_26,sfin_25,cur_log2_46)))
                                            )
                                            else
                                                {4006}out(io, illegal_parameter)
                                        )
                                        else
                                            {4007}out(io, illegal_parameter)
                                )
                                else
                                    {4008}out(io, unexpected_message)
                        )
                        else
                            {4009}out(io, illegal_parameter)
                    )
                    else
                        {4010}if send_kex_4 then
                        (
                            {4011}let (x_264: bitstring,g_20: group) = kex_data_10 in
                            {4012}let (psk_offer_19: preSharedKey,id_offer_19: identityPsk,es_offer_19: bitstring,is_safe_offer_19: bool) = psk_data_21 in
                            {4013}event Client_PSKOffer(id_client_4,psk_offer_19,id_offer_19,is_safe_offer_19);
                            {4014}event Client_Rand_client(id_client_4,cr_24);
                            {4015}event Client_DH_client(id_client_4,dh_pub(g_20,x_264));
                            {4016}event Client_server_domain(id_client_4,s_dom_17);
                            {4017}let SH(sr_32: bytes32,mode_24: params) = server_hello_5 in
                            {4018}event Client_Rand_server(id_client_4,sr_32);
                            {4019}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_20,gy_20: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_48: preSharedKeyExt) = mode_24 in
                            (
                                {4021}event Client_DH_server(id_client_4,gy_20);
                                {4022}let v_801: bool = (psk_ext_48 = empty_psk_ext) in
                                {4023}let psk_99: preSharedKey = (if v_801 then NoPsk else caught-fail) in
                                {4025}let k_68: bitstring = (if v_801 then catch-fail(psk2b(psk_99)) else caught-fail) in
                                {4026}let v_802: bool = not-caught-fail(k_68) in
                                {4024}let s_77: bitstring = (if v_801 then zero else caught-fail) in
                                {4027}let early_secret_63: bitstring = (if v_801 then catch-fail((if v_802 then hmac(@8_tls_h,s_77,k_68) else fail-any)) else caught-fail) in
                                {4028}let v_803: bool = not-caught-fail(early_secret_63) in
                                {4030}let m_82: bitstring = (if v_803 then zero else caught-fail) in
                                {4031}let h_234: bitstring = (if v_803 then catch-fail(hash(@8_tls_h,m_82)) else caught-fail) in
                                {4032}let v_804: bool = not-caught-fail(h_234) in
                                {4029}let l_236: label = (if v_803 then tls13_ext_res_binder else caught-fail) in
                                {4033}let x_265: bitstring = (if v_804 then (l_236,h_234) else caught-fail) in
                                {4034}let binder_key_42: bitstring = (if v_803 then catch-fail((if v_804 then hmac(@8_tls_h,early_secret_63,x_265) else fail-any)) else caught-fail) in
                                {4035}let v_805: bool = not-caught-fail(binder_key_42) in
                                {4036}let v_806: bitstring = (if v_801 then catch-fail((if v_803 then (if v_805 then (early_secret_63,binder_key_42) else fail-any) else fail-any)) else caught-fail) in
                                {4037}let v_807: bool = (not-caught-fail(v_806) && success?(1-proj-2-tuple(v_806))) in
                                {4038}let kb_42: mac_key = (if v_807 then 2-proj-2-tuple(v_806) else caught-fail) in
                                {4039}let es_65: bitstring = (if v_807 then 1-proj-2-tuple(v_806) else caught-fail) in
                                {4040}let v_808: bitstring = (if not(v_801) then catch-fail(psk_data_21) else caught-fail) in
                                {4041}let v_809: bool = (not-caught-fail(v_808) && success?(1-proj-4-tuple(v_808))) in
                                {4042}let is_safe_40: bool = (if v_809 then 4-proj-4-tuple(v_808) else caught-fail) in
                                {4043}let es_66: bitstring = (if v_809 then 3-proj-4-tuple(v_808) else caught-fail) in
                                {4044}let id_50: identityPsk = (if v_809 then 2-proj-4-tuple(v_808) else caught-fail) in
                                {4045}let psk_100: preSharedKey = (if v_809 then 1-proj-4-tuple(v_808) else caught-fail) in
                                {4046}let (psk_101: preSharedKey,early_secret_64: bitstring,valid_19: bool,safe_psk_27: bool) = (if v_801 then (if v_807 then (NoPsk,es_65,true,false) else fail-any) else (if v_809 then (psk_100,es_66,((psk_100 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_48)),is_safe_40) else fail-any)) in
                                {4047}event Client_PSKChoosen(id_client_4,psk_101,safe_psk_27);
                                {4048}if valid_19 then
                                (
                                    {4051}new s_78[]: seed;
                                    {4049}let gxy_40: element = catch-fail(dh_decap_fun(g_20,gy_20,x_264)) in
                                    {4050}let v_810: bool = not-caught-fail(gxy_40) in
                                    {4052}let gxy_41: element = (if v_810 then gxy_40 else dh_f(s_78)) in
                                    {4053}event Client_DH_gxy(id_client_4,gxy_41);
                                    {4055}let m_83: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {4056}let v_811: bool = not-caught-fail(m_83) in
                                    {4057}let h_235: bitstring = (if v_811 then catch-fail(hash(@8_tls_h,m_83)) else caught-fail) in
                                    {4058}let v_812: bool = not-caught-fail(h_235) in
                                    {4054}let l_237: label = tls13_derived in
                                    {4059}let x_266: bitstring = (if v_812 then (l_237,h_235) else caught-fail) in
                                    {4060}let extra_47: bitstring = catch-fail((if v_811 then (if v_812 then hmac(@8_tls_h,early_secret_64,x_266) else fail-any) else fail-any)) in
                                    {4061}let v_813: bool = not-caught-fail(extra_47) in
                                    {4062}let handshake_secret_20: bitstring = (if v_813 then hmac(@8_tls_h,extra_47,gxy_41) else fail-any) in
                                    {4064}let m_84: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                    {4065}let v_814: bool = not-caught-fail(m_84) in
                                    {4066}let h_236: bitstring = (if v_814 then catch-fail(hash(@8_tls_h,m_84)) else caught-fail) in
                                    {4067}let v_815: bool = not-caught-fail(h_236) in
                                    {4063}let l_238: label = tls13_derived in
                                    {4068}let x_267: bitstring = (if v_815 then (l_238,h_236) else caught-fail) in
                                    {4069}let extra_48: bitstring = catch-fail((if v_814 then (if v_815 then hmac(@8_tls_h,handshake_secret_20,x_267) else fail-any) else fail-any)) in
                                    {4070}let v_816: bool = not-caught-fail(extra_48) in
                                    {4071}let k_69: bitstring = (if v_816 then zero else caught-fail) in
                                    {4072}let master_secret_47: bitstring = (if v_816 then catch-fail(hmac(@8_tls_h,handshake_secret_20,k_69)) else caught-fail) in
                                    {4073}let v_817: bool = not-caught-fail(master_secret_47) in
                                    {4020}let cur_log2_47: bitstring = (cur_log2_40,server_hello_5) in
                                    {4075}let h_237: bitstring = (if v_817 then catch-fail(hash(@8_tls_h,cur_log2_47)) else caught-fail) in
                                    {4076}let v_818: bool = not-caught-fail(h_237) in
                                    {4074}let l_239: label = (if v_817 then tls13_client_handshake_traffic_secret else caught-fail) in
                                    {4077}let x_268: bitstring = (if v_818 then (l_239,h_237) else caught-fail) in
                                    {4078}let client_hts_20: bitstring = (if v_817 then catch-fail((if v_818 then hmac(@8_tls_h,handshake_secret_20,x_268) else fail-any)) else caught-fail) in
                                    {4079}let v_819: bool = not-caught-fail(client_hts_20) in
                                    {4081}let h_238: bitstring = (if v_819 then catch-fail(hash(@8_tls_h,cur_log2_47)) else caught-fail) in
                                    {4082}let v_820: bool = not-caught-fail(h_238) in
                                    {4080}let l_240: label = (if v_819 then tls13_server_handshake_traffic_secret else caught-fail) in
                                    {4083}let x_269: bitstring = (if v_820 then (l_240,h_238) else caught-fail) in
                                    {4084}let server_hts_20: bitstring = (if v_819 then catch-fail((if v_820 then hmac(@8_tls_h,handshake_secret_20,x_269) else fail-any)) else caught-fail) in
                                    {4085}let v_821: bool = not-caught-fail(server_hts_20) in
                                    {4087}let h_239: bitstring = (if v_821 then zero else caught-fail) in
                                    {4086}let l_241: label = (if v_821 then tls13_key else caught-fail) in
                                    {4088}let x_270: bitstring = (if v_821 then (l_241,h_239) else caught-fail) in
                                    {4089}let client_wkh_20: bitstring = (if v_821 then catch-fail(hmac(@8_tls_h,client_hts_20,x_270)) else caught-fail) in
                                    {4090}let v_822: bool = not-caught-fail(client_wkh_20) in
                                    {4092}let h_240: bitstring = (if v_822 then zero else caught-fail) in
                                    {4091}let l_242: label = (if v_822 then tls13_key else caught-fail) in
                                    {4093}let x_271: bitstring = (if v_822 then (l_242,h_240) else caught-fail) in
                                    {4094}let server_wkh_20: bitstring = (if v_822 then catch-fail(hmac(@8_tls_h,server_hts_20,x_271)) else caught-fail) in
                                    {4095}let v_823: bool = not-caught-fail(server_wkh_20) in
                                    {4097}let h_241: bitstring = (if v_823 then zero else caught-fail) in
                                    {4096}let l_243: label = (if v_823 then tls13_finished else caught-fail) in
                                    {4098}let x_272: bitstring = (if v_823 then (l_243,h_241) else caught-fail) in
                                    {4099}let client_fk_20: bitstring = (if v_823 then catch-fail(hmac(@8_tls_h,client_hts_20,x_272)) else caught-fail) in
                                    {4100}let v_824: bool = not-caught-fail(client_fk_20) in
                                    {4102}let h_242: bitstring = (if v_824 then zero else caught-fail) in
                                    {4101}let l_244: label = (if v_824 then tls13_finished else caught-fail) in
                                    {4103}let x_273: bitstring = (if v_824 then (l_244,h_242) else caught-fail) in
                                    {4104}let server_fk_20: bitstring = (if v_824 then catch-fail(hmac(@8_tls_h,server_hts_20,x_273)) else caught-fail) in
                                    {4105}let v_825: bool = not-caught-fail(server_fk_20) in
                                    {4106}let (master_secret_48: bitstring,chk_27: aead_key,shk_26: aead_key,cfin_27: mac_key,sfin_26: mac_key) = (if v_816 then (if v_817 then (if v_819 then (if v_821 then (if v_822 then (if v_823 then (if v_824 then (if v_825 then (master_secret_47,client_wkh_20,server_wkh_20,client_fk_20,server_fk_20) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                    {4107}event Client_chk(id_client_4,chk_27);
                                    {4108}event Client_shk(id_client_4,shk_26);
                                    {4109}event Client_cfin(id_client_4,cfin_27);
                                    {4110}event Client_sfin(id_client_4,sfin_26);
                                    {4111}in(io, enc_ee_msg_19: bitstring);
                                    {4112}let ee_msg_24: msg = aead_dec(@8_tls_a,shk_26,0,zero,enc_ee_msg_19) in
                                    {4113}let EE(ech_ee_19: echExt,extra_ee_19: extraExt) = ee_msg_24 in
                                    {4114}let cur_log2_48: bitstring = (cur_log2_47,ee_msg_24) in
                                    {4115}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr_24,sr_32,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_101,safe_psk_27,@8_comp_psk,master_secret_48,chk_27,0,shk_26,1,cfin_27,sfin_26,cur_log2_48)))
                                )
                                else
                                    {4116}out(io, illegal_parameter)
                            )
                            else
                                {4117}out(io, illegal_parameter)
                        )
                        else
                            {4118}out(io, illegal_parameter)
                )
                else
                    {4119}out(io, unexpected_message)
            )
    )
    else
        {4121}let psk_102: preSharedKey = NoPsk in
        {4123}let k_70: bitstring = catch-fail(psk2b(psk_102)) in
        {4124}let v_826: bool = not-caught-fail(k_70) in
        {4122}let s_79: bitstring = zero in
        {4125}let early_secret_65: bitstring = catch-fail((if v_826 then hmac(@8_tls_h,s_79,k_70) else fail-any)) in
        {4126}let v_827: bool = not-caught-fail(early_secret_65) in
        {4128}let m_85: bitstring = (if v_827 then zero else caught-fail) in
        {4129}let h_243: bitstring = (if v_827 then catch-fail(hash(@8_tls_h,m_85)) else caught-fail) in
        {4130}let v_828: bool = not-caught-fail(h_243) in
        {4127}let l_245: label = (if v_827 then tls13_ext_res_binder else caught-fail) in
        {4131}let x_274: bitstring = (if v_828 then (l_245,h_243) else caught-fail) in
        {4132}let binder_key_43: bitstring = (if v_827 then catch-fail((if v_828 then hmac(@8_tls_h,early_secret_65,x_274) else fail-any)) else caught-fail) in
        {4133}let v_829: bool = not-caught-fail(binder_key_43) in
        {4134}let v_830: bitstring = catch-fail((if v_827 then (if v_829 then (early_secret_65,binder_key_43) else fail-any) else fail-any)) in
        {4135}let v_831: bool = (not-caught-fail(v_830) && success?(1-proj-2-tuple(v_830))) in
        {4136}let kb_43: mac_key = (if v_831 then 2-proj-2-tuple(v_830) else caught-fail) in
        {4137}let es_67: bitstring = (if v_831 then 1-proj-2-tuple(v_830) else caught-fail) in
        {4138}let v_832: bitstring = catch-fail((if v_831 then (empty_psk_ext,(NoPsk,zero,es_67,false)) else fail-any)) in
        {4139}let v_833: bool = (not-caught-fail(v_832) && success?(1-proj-2-tuple(v_832))) in
        {4140}let psk_data_25: bitstring = (if v_833 then 2-proj-2-tuple(v_832) else caught-fail) in
        {4141}let psk_ext_49: preSharedKeyExt = (if v_833 then 1-proj-2-tuple(v_832) else caught-fail) in
        {4142}let offer_36: params = (if v_833 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_12,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_49) else caught-fail) in
        {4143}let (client_hello_11: msg,cr_26: bytes32,kex_data_12: bitstring,psk_data_26: bitstring) = (if v_833 then (CH(cr_21,offer_36),cr_21,kex_data_7,psk_data_25) else fail-any) in
        {4144}event ClientOffersAead(cr_26,@8_tls_a);
        {4145}event ClientOffersHash(cr_26,@8_tls_h);
        {4146}event ClientOffersGroup(cr_26,@8_tls_g);
        {4147}out(io, client_hello_11);
        {4149}let (psk_103: preSharedKey,id_51: identityPsk,es_68: bitstring,safe_psk_28: bool) = psk_data_26 in
        (
            {4150}if (false && (psk_103 ≠ NoPsk)) then
            {4151}let client_hello_12: bitstring = (zero,client_hello_11) in
            {4153}let h_244: bitstring = catch-fail(hash(@8_tls_h,client_hello_12)) in
            {4154}let v_834: bool = not-caught-fail(h_244) in
            {4152}let l_246: label = tls13_client_early_traffic_secret in
            {4155}let x_275: bitstring = (if v_834 then (l_246,h_244) else caught-fail) in
            {4156}let atsc0_6: bitstring = catch-fail((if v_834 then hmac(@8_tls_h,es_68,x_275) else fail-any)) in
            {4157}let v_835: bool = not-caught-fail(atsc0_6) in
            {4159}let h_245: bitstring = (if v_835 then zero else caught-fail) in
            {4158}let l_247: label = (if v_835 then tls13_key else caught-fail) in
            {4160}let x_276: bitstring = (if v_835 then (l_247,h_245) else caught-fail) in
            {4161}let kc0_6: bitstring = (if v_835 then catch-fail(hmac(@8_tls_h,atsc0_6,x_276)) else caught-fail) in
            {4162}let v_836: bool = not-caught-fail(kc0_6) in
            {4164}let h_246: bitstring = (if v_836 then catch-fail(hash(@8_tls_h,client_hello_12)) else caught-fail) in
            {4165}let v_837: bool = not-caught-fail(h_246) in
            {4163}let l_248: label = (if v_836 then tls13_early_exporter_master_secret else caught-fail) in
            {4166}let x_277: bitstring = (if v_837 then (l_248,h_246) else caught-fail) in
            {4167}let ems0_12: bitstring = (if v_836 then catch-fail((if v_837 then hmac(@8_tls_h,es_68,x_277) else fail-any)) else caught-fail) in
            {4168}let v_838: bool = not-caught-fail(ems0_12) in
            {4169}let (wkc0_6: aead_key,ems0_13: bitstring) = (if v_835 then (if v_836 then (if v_838 then (kc0_6,ems0_12) else fail-any) else fail-any) else fail-any) in
            {4170}!
            {4171}in(io, (i_6: nat,ad_6: bitstring));
            {4172}if is_nat(i_6) then
            {4173}new msg_ed_5[]: bitstring;
            {4175}new st_15: stamp;
            {4176}event ClientSequenceClient0RTTDataWriteKey(id_client_4,st_15,i_6);
            {4177}event ClientSends0(id_client_4,cr_26,psk_103,i_6,ad_6,msg_ed_5);
            {4174}let enc_ed_5: bitstring = aead_enc(@8_tls_a,wkc0_6,i_6,ad_6,msg_ed_5) in
            {4178}out(io, enc_ed_5)
        ) | (
            {4179}in(io, server_hello_6: msg);
            {4180}let SH(sr_33: bytes32,mode_25: params) = server_hello_6 in
            (
                {4181}event ClientEchAcceptance(id_client_4,false);
                {4148}let cur_log2_49: bitstring = (cur_log_10,client_hello_11) in
                {4182}if (true && (sr_33 = B32(HRR24,HRR8))) then
                (
                    {4183}if ((mode_25 = nego(TLS13,@8_tls_h,@8_tls_a,hrr_kex_ext(@8_tls_g),empty_sni_ext,empty_ech_ext,empty_extra_ext,empty_psk_ext)) && (send_kex_4 ≠ true)) then
                    (
                        {4186}new rand24_8[]: bytes24;
                        {4187}new rand8_8[]: bytes8;
                        {4189}new s_80[]: seed;
                        {4190}let gx_21: element = dh_pub(@8_tls_g,dh_k(s_80)) in
                        {4191}let v_839: bitstring = (dh_k(s_80),gx_21) in
                        {4192}let v_840: bool = success?(1-proj-2-tuple(v_839)) in
                        {4193}let gx_22: element = (if v_840 then 2-proj-2-tuple(v_839) else caught-fail) in
                        {4194}let x_278: bitstring = (if v_840 then 1-proj-2-tuple(v_839) else caught-fail) in
                        {4185}let send_kex_7: bool = true in
                        {4195}let kex_7: kex_alg = (if v_840 then (if send_kex_7 then DHE_kex(@8_tls_g,gx_22) else DHE_group(@8_tls_g)) else caught-fail) in
                        {4196}let (kex_ext_15: keyShareExt,kex_data_13: bitstring) = (if v_840 then (client_kex_ext(kex_7),(x_278,@8_tls_g)) else fail-any) in
                        {4188}let cr_27: bytes32 = B32(rand24_8,rand8_8) in
                        {4184}let cur_log3_7: bitstring = (cur_log2_49,server_hello_6) in
                        {4199}if @8_use_psk then
                        (
                            {4198}let extra_49: extraExt = empty_extra_ext in
                            {4197}let ech_ext_16: echExt = empty_ech_ext in
                            {4200}let (psk_104: preSharedKey,id_52: identityPsk,old_es_7: bitstring,is_safe_41: bool) = psk_data_26 in
                            (
                                {4204}let k_71: bitstring = catch-fail(psk2b(psk_104)) in
                                {4205}let v_841: bool = not-caught-fail(k_71) in
                                {4203}let s_81: bitstring = zero in
                                {4206}let early_secret_66: bitstring = catch-fail((if v_841 then hmac(@8_tls_h,s_81,k_71) else fail-any)) in
                                {4207}let v_842: bool = not-caught-fail(early_secret_66) in
                                {4209}let m_86: bitstring = (if v_842 then zero else caught-fail) in
                                {4210}let h_247: bitstring = (if v_842 then catch-fail(hash(@8_tls_h,m_86)) else caught-fail) in
                                {4211}let v_843: bool = not-caught-fail(h_247) in
                                {4208}let l_249: label = (if v_842 then tls13_ext_res_binder else caught-fail) in
                                {4212}let x_279: bitstring = (if v_843 then (l_249,h_247) else caught-fail) in
                                {4213}let binder_key_44: bitstring = (if v_842 then catch-fail((if v_843 then hmac(@8_tls_h,early_secret_66,x_279) else fail-any)) else caught-fail) in
                                {4214}let v_844: bool = not-caught-fail(binder_key_44) in
                                {4215}let v_845: bitstring = catch-fail((if v_842 then (if v_844 then (early_secret_66,binder_key_44) else fail-any) else fail-any)) in
                                {4216}let v_846: bool = (not-caught-fail(v_845) && success?(1-proj-2-tuple(v_845))) in
                                {4217}let kb_44: mac_key = (if v_846 then 2-proj-2-tuple(v_845) else caught-fail) in
                                {4218}let es_69: bitstring = (if v_846 then 1-proj-2-tuple(v_845) else caught-fail) in
                                {4201}let offer_37: params = nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_17),ech_ext_16,extra_49,trunc_client_psk_ext(id_52)) in
                                {4202}let cur_log'_16: bitstring = (cur_log3_7,CH(cr_27,offer_37)) in
                                {4219}let binders_15: bitstring = (if v_846 then catch-fail(hmac(@8_tls_h,kb_44,cur_log'_16)) else caught-fail) in
                                {4220}let v_847: bool = not-caught-fail(binders_15) in
                                {4221}let v_848: bitstring = catch-fail((if v_846 then (if v_847 then (client_psk_ext(id_52,binders_15),(psk_104,id_52,es_69,is_safe_41)) else fail-any) else fail-any)) in
                                {4222}let v_849: bool = (not-caught-fail(v_848) && success?(1-proj-2-tuple(v_848))) in
                                {4223}let psk_data_27: bitstring = (if v_849 then 2-proj-2-tuple(v_848) else caught-fail) in
                                {4224}let psk_ext_50: preSharedKeyExt = (if v_849 then 1-proj-2-tuple(v_848) else caught-fail) in
                                {4225}let offer_38: params = (if v_849 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_50) else caught-fail) in
                                {4226}let (client_hello'_18: msg,cr'_20: bytes32,kex_data'_15: bitstring,psk_data'_15: bitstring) = (if v_849 then (CH(cr_27,offer_38),cr_27,kex_data_13,psk_data_27) else fail-any) in
                                {4227}event ClientOffersAead(cr'_20,@8_tls_a);
                                {4228}event ClientOffersHash(cr'_20,@8_tls_h);
                                {4229}event ClientOffersGroup(cr'_20,@8_tls_g);
                                {4230}out(io, client_hello'_18);
                                {4232}in(io, server_hello'_15: msg);
                                {4233}let SH(sr'_15: bytes32,mode'_15: params) = server_hello'_15 in
                                (
                                    {4234}if (sr'_15 = B32(HRR24,HRR8)) then
                                        {4235}out(io, unexpected_message)
                                    else
                                        {4236}let (x_280: bitstring,g_21: group) = kex_data'_15 in
                                        {4237}let (psk_offer_20: preSharedKey,id_offer_20: identityPsk,es_offer_20: bitstring,is_safe_offer_20: bool) = psk_data'_15 in
                                        {4238}event Client_PSKOffer(id_client_4,psk_offer_20,id_offer_20,is_safe_offer_20);
                                        {4239}event Client_Rand_client(id_client_4,cr'_20);
                                        {4240}event Client_DH_client(id_client_4,dh_pub(g_21,x_280));
                                        {4241}event Client_server_domain(id_client_4,s_dom_17);
                                        {4242}let SH(sr_34: bytes32,mode_26: params) = server_hello'_15 in
                                        {4243}event Client_Rand_server(id_client_4,sr_34);
                                        {4244}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_21,gy_21: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_51: preSharedKeyExt) = mode_26 in
                                        (
                                            {4246}event Client_DH_server(id_client_4,gy_21);
                                            {4247}let v_850: bool = (psk_ext_51 = empty_psk_ext) in
                                            {4248}let psk_105: preSharedKey = (if v_850 then NoPsk else caught-fail) in
                                            {4250}let k_72: bitstring = (if v_850 then catch-fail(psk2b(psk_105)) else caught-fail) in
                                            {4251}let v_851: bool = not-caught-fail(k_72) in
                                            {4249}let s_82: bitstring = (if v_850 then zero else caught-fail) in
                                            {4252}let early_secret_67: bitstring = (if v_850 then catch-fail((if v_851 then hmac(@8_tls_h,s_82,k_72) else fail-any)) else caught-fail) in
                                            {4253}let v_852: bool = not-caught-fail(early_secret_67) in
                                            {4255}let m_87: bitstring = (if v_852 then zero else caught-fail) in
                                            {4256}let h_248: bitstring = (if v_852 then catch-fail(hash(@8_tls_h,m_87)) else caught-fail) in
                                            {4257}let v_853: bool = not-caught-fail(h_248) in
                                            {4254}let l_250: label = (if v_852 then tls13_ext_res_binder else caught-fail) in
                                            {4258}let x_281: bitstring = (if v_853 then (l_250,h_248) else caught-fail) in
                                            {4259}let binder_key_45: bitstring = (if v_852 then catch-fail((if v_853 then hmac(@8_tls_h,early_secret_67,x_281) else fail-any)) else caught-fail) in
                                            {4260}let v_854: bool = not-caught-fail(binder_key_45) in
                                            {4261}let v_855: bitstring = (if v_850 then catch-fail((if v_852 then (if v_854 then (early_secret_67,binder_key_45) else fail-any) else fail-any)) else caught-fail) in
                                            {4262}let v_856: bool = (not-caught-fail(v_855) && success?(1-proj-2-tuple(v_855))) in
                                            {4263}let kb_45: mac_key = (if v_856 then 2-proj-2-tuple(v_855) else caught-fail) in
                                            {4264}let es_70: bitstring = (if v_856 then 1-proj-2-tuple(v_855) else caught-fail) in
                                            {4265}let v_857: bitstring = (if not(v_850) then catch-fail(psk_data'_15) else caught-fail) in
                                            {4266}let v_858: bool = (not-caught-fail(v_857) && success?(1-proj-4-tuple(v_857))) in
                                            {4267}let is_safe_42: bool = (if v_858 then 4-proj-4-tuple(v_857) else caught-fail) in
                                            {4268}let es_71: bitstring = (if v_858 then 3-proj-4-tuple(v_857) else caught-fail) in
                                            {4269}let id_53: identityPsk = (if v_858 then 2-proj-4-tuple(v_857) else caught-fail) in
                                            {4270}let psk_106: preSharedKey = (if v_858 then 1-proj-4-tuple(v_857) else caught-fail) in
                                            {4271}let (psk_107: preSharedKey,early_secret_68: bitstring,valid_20: bool,safe_psk_29: bool) = (if v_850 then (if v_856 then (NoPsk,es_70,true,false) else fail-any) else (if v_858 then (psk_106,es_71,((psk_106 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_51)),is_safe_42) else fail-any)) in
                                            {4272}event Client_PSKChoosen(id_client_4,psk_107,safe_psk_29);
                                            {4273}if valid_20 then
                                            (
                                                {4276}new s_83[]: seed;
                                                {4274}let gxy_42: element = catch-fail(dh_decap_fun(g_21,gy_21,x_280)) in
                                                {4275}let v_859: bool = not-caught-fail(gxy_42) in
                                                {4277}let gxy_43: element = (if v_859 then gxy_42 else dh_f(s_83)) in
                                                {4278}event Client_DH_gxy(id_client_4,gxy_43);
                                                {4280}let m_88: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4281}let v_860: bool = not-caught-fail(m_88) in
                                                {4282}let h_249: bitstring = (if v_860 then catch-fail(hash(@8_tls_h,m_88)) else caught-fail) in
                                                {4283}let v_861: bool = not-caught-fail(h_249) in
                                                {4279}let l_251: label = tls13_derived in
                                                {4284}let x_282: bitstring = (if v_861 then (l_251,h_249) else caught-fail) in
                                                {4285}let extra_50: bitstring = catch-fail((if v_860 then (if v_861 then hmac(@8_tls_h,early_secret_68,x_282) else fail-any) else fail-any)) in
                                                {4286}let v_862: bool = not-caught-fail(extra_50) in
                                                {4287}let handshake_secret_21: bitstring = (if v_862 then hmac(@8_tls_h,extra_50,gxy_43) else fail-any) in
                                                {4289}let m_89: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4290}let v_863: bool = not-caught-fail(m_89) in
                                                {4291}let h_250: bitstring = (if v_863 then catch-fail(hash(@8_tls_h,m_89)) else caught-fail) in
                                                {4292}let v_864: bool = not-caught-fail(h_250) in
                                                {4288}let l_252: label = tls13_derived in
                                                {4293}let x_283: bitstring = (if v_864 then (l_252,h_250) else caught-fail) in
                                                {4294}let extra_51: bitstring = catch-fail((if v_863 then (if v_864 then hmac(@8_tls_h,handshake_secret_21,x_283) else fail-any) else fail-any)) in
                                                {4295}let v_865: bool = not-caught-fail(extra_51) in
                                                {4296}let k_73: bitstring = (if v_865 then zero else caught-fail) in
                                                {4297}let master_secret_49: bitstring = (if v_865 then catch-fail(hmac(@8_tls_h,handshake_secret_21,k_73)) else caught-fail) in
                                                {4298}let v_866: bool = not-caught-fail(master_secret_49) in
                                                {4231}let cur_log4_15: bitstring = (cur_log3_7,client_hello'_18) in
                                                {4245}let cur_log2_50: bitstring = (cur_log4_15,server_hello'_15) in
                                                {4300}let h_251: bitstring = (if v_866 then catch-fail(hash(@8_tls_h,cur_log2_50)) else caught-fail) in
                                                {4301}let v_867: bool = not-caught-fail(h_251) in
                                                {4299}let l_253: label = (if v_866 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {4302}let x_284: bitstring = (if v_867 then (l_253,h_251) else caught-fail) in
                                                {4303}let client_hts_21: bitstring = (if v_866 then catch-fail((if v_867 then hmac(@8_tls_h,handshake_secret_21,x_284) else fail-any)) else caught-fail) in
                                                {4304}let v_868: bool = not-caught-fail(client_hts_21) in
                                                {4306}let h_252: bitstring = (if v_868 then catch-fail(hash(@8_tls_h,cur_log2_50)) else caught-fail) in
                                                {4307}let v_869: bool = not-caught-fail(h_252) in
                                                {4305}let l_254: label = (if v_868 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {4308}let x_285: bitstring = (if v_869 then (l_254,h_252) else caught-fail) in
                                                {4309}let server_hts_21: bitstring = (if v_868 then catch-fail((if v_869 then hmac(@8_tls_h,handshake_secret_21,x_285) else fail-any)) else caught-fail) in
                                                {4310}let v_870: bool = not-caught-fail(server_hts_21) in
                                                {4312}let h_253: bitstring = (if v_870 then zero else caught-fail) in
                                                {4311}let l_255: label = (if v_870 then tls13_key else caught-fail) in
                                                {4313}let x_286: bitstring = (if v_870 then (l_255,h_253) else caught-fail) in
                                                {4314}let client_wkh_21: bitstring = (if v_870 then catch-fail(hmac(@8_tls_h,client_hts_21,x_286)) else caught-fail) in
                                                {4315}let v_871: bool = not-caught-fail(client_wkh_21) in
                                                {4317}let h_254: bitstring = (if v_871 then zero else caught-fail) in
                                                {4316}let l_256: label = (if v_871 then tls13_key else caught-fail) in
                                                {4318}let x_287: bitstring = (if v_871 then (l_256,h_254) else caught-fail) in
                                                {4319}let server_wkh_21: bitstring = (if v_871 then catch-fail(hmac(@8_tls_h,server_hts_21,x_287)) else caught-fail) in
                                                {4320}let v_872: bool = not-caught-fail(server_wkh_21) in
                                                {4322}let h_255: bitstring = (if v_872 then zero else caught-fail) in
                                                {4321}let l_257: label = (if v_872 then tls13_finished else caught-fail) in
                                                {4323}let x_288: bitstring = (if v_872 then (l_257,h_255) else caught-fail) in
                                                {4324}let client_fk_21: bitstring = (if v_872 then catch-fail(hmac(@8_tls_h,client_hts_21,x_288)) else caught-fail) in
                                                {4325}let v_873: bool = not-caught-fail(client_fk_21) in
                                                {4327}let h_256: bitstring = (if v_873 then zero else caught-fail) in
                                                {4326}let l_258: label = (if v_873 then tls13_finished else caught-fail) in
                                                {4328}let x_289: bitstring = (if v_873 then (l_258,h_256) else caught-fail) in
                                                {4329}let server_fk_21: bitstring = (if v_873 then catch-fail(hmac(@8_tls_h,server_hts_21,x_289)) else caught-fail) in
                                                {4330}let v_874: bool = not-caught-fail(server_fk_21) in
                                                {4331}let (master_secret_50: bitstring,chk_28: aead_key,shk_27: aead_key,cfin_28: mac_key,sfin_27: mac_key) = (if v_865 then (if v_866 then (if v_868 then (if v_870 then (if v_871 then (if v_872 then (if v_873 then (if v_874 then (master_secret_49,client_wkh_21,server_wkh_21,client_fk_21,server_fk_21) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {4332}event Client_chk(id_client_4,chk_28);
                                                {4333}event Client_shk(id_client_4,shk_27);
                                                {4334}event Client_cfin(id_client_4,cfin_28);
                                                {4335}event Client_sfin(id_client_4,sfin_27);
                                                {4336}in(io, enc_ee_msg_20: bitstring);
                                                {4337}let ee_msg_25: msg = aead_dec(@8_tls_a,shk_27,0,zero,enc_ee_msg_20) in
                                                {4338}let EE(ech_ee_20: echExt,extra_ee_20: extraExt) = ee_msg_25 in
                                                {4339}let cur_log2_51: bitstring = (cur_log2_50,ee_msg_25) in
                                                {4340}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_20,sr_34,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_107,safe_psk_29,@8_comp_psk,master_secret_50,chk_28,0,shk_27,1,cfin_28,sfin_27,cur_log2_51)))
                                            )
                                            else
                                                {4341}out(io, illegal_parameter)
                                        )
                                        else
                                            {4342}out(io, illegal_parameter)
                                )
                                else
                                    {4343}out(io, unexpected_message)
                            )
                            else
                                {4496}get pre_shared_keys(c_dom'_9: domain,=s_dom_17,=@8_tls_h,id_54: identityPsk,psk_108: preSharedKey,idP_12: idProc,is_safe_43: bool) in
                                {4344}event Selected_one_time_used_psk(id_client_4,psk_108,is_safe_43);
                                {4345}event Selected_psk(c_dom_7,c_dom'_9,idP_12,is_safe_43);
                                {4346}event Selected_psk_no_missmatch(id_client_4,s_dom_17,@8_tls_h,psk_108,id_54);
                                {4347}event Selected_psk_with_ID(c_dom_7,c_dom'_9,id_54,idP_12,is_safe_43);
                                {4348}let v_875: bitstring = (id_54,psk_108,is_safe_43) in
                                {4349}let v_876: bool = success?(1-proj-3-tuple(v_875)) in
                                {4350}let is_safe_44: bool = (if v_876 then 3-proj-3-tuple(v_875) else caught-fail) in
                                {4351}let psk_109: preSharedKey = (if v_876 then 2-proj-3-tuple(v_875) else caught-fail) in
                                {4352}let id_55: identityPsk = (if v_876 then 1-proj-3-tuple(v_875) else caught-fail) in
                                {4356}let k_74: bitstring = (if v_876 then catch-fail(psk2b(psk_109)) else caught-fail) in
                                {4357}let v_877: bool = not-caught-fail(k_74) in
                                {4355}let s_84: bitstring = (if v_876 then zero else caught-fail) in
                                {4358}let early_secret_69: bitstring = (if v_876 then catch-fail((if v_877 then hmac(@8_tls_h,s_84,k_74) else fail-any)) else caught-fail) in
                                {4359}let v_878: bool = not-caught-fail(early_secret_69) in
                                {4361}let m_90: bitstring = (if v_878 then zero else caught-fail) in
                                {4362}let h_257: bitstring = (if v_878 then catch-fail(hash(@8_tls_h,m_90)) else caught-fail) in
                                {4363}let v_879: bool = not-caught-fail(h_257) in
                                {4360}let l_259: label = (if v_878 then tls13_ext_res_binder else caught-fail) in
                                {4364}let x_290: bitstring = (if v_879 then (l_259,h_257) else caught-fail) in
                                {4365}let binder_key_46: bitstring = (if v_878 then catch-fail((if v_879 then hmac(@8_tls_h,early_secret_69,x_290) else fail-any)) else caught-fail) in
                                {4366}let v_880: bool = not-caught-fail(binder_key_46) in
                                {4367}let v_881: bitstring = (if v_876 then catch-fail((if v_878 then (if v_880 then (early_secret_69,binder_key_46) else fail-any) else fail-any)) else caught-fail) in
                                {4368}let v_882: bool = (not-caught-fail(v_881) && success?(1-proj-2-tuple(v_881))) in
                                {4369}let kb_46: mac_key = (if v_882 then 2-proj-2-tuple(v_881) else caught-fail) in
                                {4370}let es_72: bitstring = (if v_882 then 1-proj-2-tuple(v_881) else caught-fail) in
                                {4353}let offer_39: params = (if v_876 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_17),ech_ext_16,extra_49,trunc_client_psk_ext(id_55)) else caught-fail) in
                                {4354}let cur_log'_17: bitstring = (if v_876 then (cur_log3_7,CH(cr_27,offer_39)) else caught-fail) in
                                {4371}let binders_16: bitstring = (if v_882 then catch-fail(hmac(@8_tls_h,kb_46,cur_log'_17)) else caught-fail) in
                                {4372}let v_883: bool = not-caught-fail(binders_16) in
                                {4373}let v_884: bitstring = catch-fail((if v_876 then (if v_882 then (if v_883 then (client_psk_ext(id_55,binders_16),(psk_109,id_55,es_72,is_safe_44)) else fail-any) else fail-any) else fail-any)) in
                                {4374}let v_885: bool = (not-caught-fail(v_884) && success?(1-proj-2-tuple(v_884))) in
                                {4375}let psk_data_28: bitstring = (if v_885 then 2-proj-2-tuple(v_884) else caught-fail) in
                                {4376}let psk_ext_52: preSharedKeyExt = (if v_885 then 1-proj-2-tuple(v_884) else caught-fail) in
                                {4377}let offer_40: params = (if v_885 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_52) else caught-fail) in
                                {4378}let (client_hello'_19: msg,cr'_21: bytes32,kex_data'_16: bitstring,psk_data'_16: bitstring) = (if v_885 then (CH(cr_27,offer_40),cr_27,kex_data_13,psk_data_28) else fail-any) in
                                {4379}event ClientOffersAead(cr'_21,@8_tls_a);
                                {4380}event ClientOffersHash(cr'_21,@8_tls_h);
                                {4381}event ClientOffersGroup(cr'_21,@8_tls_g);
                                {4382}out(io, client_hello'_19);
                                {4384}in(io, server_hello'_16: msg);
                                {4385}let SH(sr'_16: bytes32,mode'_16: params) = server_hello'_16 in
                                (
                                    {4386}if (sr'_16 = B32(HRR24,HRR8)) then
                                        {4387}out(io, unexpected_message)
                                    else
                                        {4388}let (x_291: bitstring,g_22: group) = kex_data'_16 in
                                        {4389}let (psk_offer_21: preSharedKey,id_offer_21: identityPsk,es_offer_21: bitstring,is_safe_offer_21: bool) = psk_data'_16 in
                                        {4390}event Client_PSKOffer(id_client_4,psk_offer_21,id_offer_21,is_safe_offer_21);
                                        {4391}event Client_Rand_client(id_client_4,cr'_21);
                                        {4392}event Client_DH_client(id_client_4,dh_pub(g_22,x_291));
                                        {4393}event Client_server_domain(id_client_4,s_dom_17);
                                        {4394}let SH(sr_35: bytes32,mode_27: params) = server_hello'_16 in
                                        {4395}event Client_Rand_server(id_client_4,sr_35);
                                        {4396}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_22,gy_22: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_53: preSharedKeyExt) = mode_27 in
                                        (
                                            {4398}event Client_DH_server(id_client_4,gy_22);
                                            {4399}let v_886: bool = (psk_ext_53 = empty_psk_ext) in
                                            {4400}let psk_110: preSharedKey = (if v_886 then NoPsk else caught-fail) in
                                            {4402}let k_75: bitstring = (if v_886 then catch-fail(psk2b(psk_110)) else caught-fail) in
                                            {4403}let v_887: bool = not-caught-fail(k_75) in
                                            {4401}let s_85: bitstring = (if v_886 then zero else caught-fail) in
                                            {4404}let early_secret_70: bitstring = (if v_886 then catch-fail((if v_887 then hmac(@8_tls_h,s_85,k_75) else fail-any)) else caught-fail) in
                                            {4405}let v_888: bool = not-caught-fail(early_secret_70) in
                                            {4407}let m_91: bitstring = (if v_888 then zero else caught-fail) in
                                            {4408}let h_258: bitstring = (if v_888 then catch-fail(hash(@8_tls_h,m_91)) else caught-fail) in
                                            {4409}let v_889: bool = not-caught-fail(h_258) in
                                            {4406}let l_260: label = (if v_888 then tls13_ext_res_binder else caught-fail) in
                                            {4410}let x_292: bitstring = (if v_889 then (l_260,h_258) else caught-fail) in
                                            {4411}let binder_key_47: bitstring = (if v_888 then catch-fail((if v_889 then hmac(@8_tls_h,early_secret_70,x_292) else fail-any)) else caught-fail) in
                                            {4412}let v_890: bool = not-caught-fail(binder_key_47) in
                                            {4413}let v_891: bitstring = (if v_886 then catch-fail((if v_888 then (if v_890 then (early_secret_70,binder_key_47) else fail-any) else fail-any)) else caught-fail) in
                                            {4414}let v_892: bool = (not-caught-fail(v_891) && success?(1-proj-2-tuple(v_891))) in
                                            {4415}let kb_47: mac_key = (if v_892 then 2-proj-2-tuple(v_891) else caught-fail) in
                                            {4416}let es_73: bitstring = (if v_892 then 1-proj-2-tuple(v_891) else caught-fail) in
                                            {4417}let v_893: bitstring = (if not(v_886) then catch-fail(psk_data'_16) else caught-fail) in
                                            {4418}let v_894: bool = (not-caught-fail(v_893) && success?(1-proj-4-tuple(v_893))) in
                                            {4419}let is_safe_45: bool = (if v_894 then 4-proj-4-tuple(v_893) else caught-fail) in
                                            {4420}let es_74: bitstring = (if v_894 then 3-proj-4-tuple(v_893) else caught-fail) in
                                            {4421}let id_56: identityPsk = (if v_894 then 2-proj-4-tuple(v_893) else caught-fail) in
                                            {4422}let psk_111: preSharedKey = (if v_894 then 1-proj-4-tuple(v_893) else caught-fail) in
                                            {4423}let (psk_112: preSharedKey,early_secret_71: bitstring,valid_21: bool,safe_psk_30: bool) = (if v_886 then (if v_892 then (NoPsk,es_73,true,false) else fail-any) else (if v_894 then (psk_111,es_74,((psk_111 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_53)),is_safe_45) else fail-any)) in
                                            {4424}event Client_PSKChoosen(id_client_4,psk_112,safe_psk_30);
                                            {4425}if valid_21 then
                                            (
                                                {4428}new s_86[]: seed;
                                                {4426}let gxy_44: element = catch-fail(dh_decap_fun(g_22,gy_22,x_291)) in
                                                {4427}let v_895: bool = not-caught-fail(gxy_44) in
                                                {4429}let gxy_45: element = (if v_895 then gxy_44 else dh_f(s_86)) in
                                                {4430}event Client_DH_gxy(id_client_4,gxy_45);
                                                {4432}let m_92: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4433}let v_896: bool = not-caught-fail(m_92) in
                                                {4434}let h_259: bitstring = (if v_896 then catch-fail(hash(@8_tls_h,m_92)) else caught-fail) in
                                                {4435}let v_897: bool = not-caught-fail(h_259) in
                                                {4431}let l_261: label = tls13_derived in
                                                {4436}let x_293: bitstring = (if v_897 then (l_261,h_259) else caught-fail) in
                                                {4437}let extra_52: bitstring = catch-fail((if v_896 then (if v_897 then hmac(@8_tls_h,early_secret_71,x_293) else fail-any) else fail-any)) in
                                                {4438}let v_898: bool = not-caught-fail(extra_52) in
                                                {4439}let handshake_secret_22: bitstring = (if v_898 then hmac(@8_tls_h,extra_52,gxy_45) else fail-any) in
                                                {4441}let m_93: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                                {4442}let v_899: bool = not-caught-fail(m_93) in
                                                {4443}let h_260: bitstring = (if v_899 then catch-fail(hash(@8_tls_h,m_93)) else caught-fail) in
                                                {4444}let v_900: bool = not-caught-fail(h_260) in
                                                {4440}let l_262: label = tls13_derived in
                                                {4445}let x_294: bitstring = (if v_900 then (l_262,h_260) else caught-fail) in
                                                {4446}let extra_53: bitstring = catch-fail((if v_899 then (if v_900 then hmac(@8_tls_h,handshake_secret_22,x_294) else fail-any) else fail-any)) in
                                                {4447}let v_901: bool = not-caught-fail(extra_53) in
                                                {4448}let k_76: bitstring = (if v_901 then zero else caught-fail) in
                                                {4449}let master_secret_51: bitstring = (if v_901 then catch-fail(hmac(@8_tls_h,handshake_secret_22,k_76)) else caught-fail) in
                                                {4450}let v_902: bool = not-caught-fail(master_secret_51) in
                                                {4383}let cur_log4_16: bitstring = (cur_log3_7,client_hello'_19) in
                                                {4397}let cur_log2_52: bitstring = (cur_log4_16,server_hello'_16) in
                                                {4452}let h_261: bitstring = (if v_902 then catch-fail(hash(@8_tls_h,cur_log2_52)) else caught-fail) in
                                                {4453}let v_903: bool = not-caught-fail(h_261) in
                                                {4451}let l_263: label = (if v_902 then tls13_client_handshake_traffic_secret else caught-fail) in
                                                {4454}let x_295: bitstring = (if v_903 then (l_263,h_261) else caught-fail) in
                                                {4455}let client_hts_22: bitstring = (if v_902 then catch-fail((if v_903 then hmac(@8_tls_h,handshake_secret_22,x_295) else fail-any)) else caught-fail) in
                                                {4456}let v_904: bool = not-caught-fail(client_hts_22) in
                                                {4458}let h_262: bitstring = (if v_904 then catch-fail(hash(@8_tls_h,cur_log2_52)) else caught-fail) in
                                                {4459}let v_905: bool = not-caught-fail(h_262) in
                                                {4457}let l_264: label = (if v_904 then tls13_server_handshake_traffic_secret else caught-fail) in
                                                {4460}let x_296: bitstring = (if v_905 then (l_264,h_262) else caught-fail) in
                                                {4461}let server_hts_22: bitstring = (if v_904 then catch-fail((if v_905 then hmac(@8_tls_h,handshake_secret_22,x_296) else fail-any)) else caught-fail) in
                                                {4462}let v_906: bool = not-caught-fail(server_hts_22) in
                                                {4464}let h_263: bitstring = (if v_906 then zero else caught-fail) in
                                                {4463}let l_265: label = (if v_906 then tls13_key else caught-fail) in
                                                {4465}let x_297: bitstring = (if v_906 then (l_265,h_263) else caught-fail) in
                                                {4466}let client_wkh_22: bitstring = (if v_906 then catch-fail(hmac(@8_tls_h,client_hts_22,x_297)) else caught-fail) in
                                                {4467}let v_907: bool = not-caught-fail(client_wkh_22) in
                                                {4469}let h_264: bitstring = (if v_907 then zero else caught-fail) in
                                                {4468}let l_266: label = (if v_907 then tls13_key else caught-fail) in
                                                {4470}let x_298: bitstring = (if v_907 then (l_266,h_264) else caught-fail) in
                                                {4471}let server_wkh_22: bitstring = (if v_907 then catch-fail(hmac(@8_tls_h,server_hts_22,x_298)) else caught-fail) in
                                                {4472}let v_908: bool = not-caught-fail(server_wkh_22) in
                                                {4474}let h_265: bitstring = (if v_908 then zero else caught-fail) in
                                                {4473}let l_267: label = (if v_908 then tls13_finished else caught-fail) in
                                                {4475}let x_299: bitstring = (if v_908 then (l_267,h_265) else caught-fail) in
                                                {4476}let client_fk_22: bitstring = (if v_908 then catch-fail(hmac(@8_tls_h,client_hts_22,x_299)) else caught-fail) in
                                                {4477}let v_909: bool = not-caught-fail(client_fk_22) in
                                                {4479}let h_266: bitstring = (if v_909 then zero else caught-fail) in
                                                {4478}let l_268: label = (if v_909 then tls13_finished else caught-fail) in
                                                {4480}let x_300: bitstring = (if v_909 then (l_268,h_266) else caught-fail) in
                                                {4481}let server_fk_22: bitstring = (if v_909 then catch-fail(hmac(@8_tls_h,server_hts_22,x_300)) else caught-fail) in
                                                {4482}let v_910: bool = not-caught-fail(server_fk_22) in
                                                {4483}let (master_secret_52: bitstring,chk_29: aead_key,shk_28: aead_key,cfin_29: mac_key,sfin_28: mac_key) = (if v_901 then (if v_902 then (if v_904 then (if v_906 then (if v_907 then (if v_908 then (if v_909 then (if v_910 then (master_secret_51,client_wkh_22,server_wkh_22,client_fk_22,server_fk_22) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                                {4484}event Client_chk(id_client_4,chk_29);
                                                {4485}event Client_shk(id_client_4,shk_28);
                                                {4486}event Client_cfin(id_client_4,cfin_29);
                                                {4487}event Client_sfin(id_client_4,sfin_28);
                                                {4488}in(io, enc_ee_msg_21: bitstring);
                                                {4489}let ee_msg_26: msg = aead_dec(@8_tls_a,shk_28,0,zero,enc_ee_msg_21) in
                                                {4490}let EE(ech_ee_21: echExt,extra_ee_21: extraExt) = ee_msg_26 in
                                                {4491}let cur_log2_53: bitstring = (cur_log2_52,ee_msg_26) in
                                                {4492}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_21,sr_35,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_112,safe_psk_30,@8_comp_psk,master_secret_52,chk_29,0,shk_28,1,cfin_29,sfin_28,cur_log2_53)))
                                            )
                                            else
                                                {4493}out(io, illegal_parameter)
                                        )
                                        else
                                            {4494}out(io, illegal_parameter)
                                )
                                else
                                    {4495}out(io, unexpected_message)
                        )
                        else
                            {4497}let psk_113: preSharedKey = NoPsk in
                            {4499}let k_77: bitstring = catch-fail(psk2b(psk_113)) in
                            {4500}let v_911: bool = not-caught-fail(k_77) in
                            {4498}let s_87: bitstring = zero in
                            {4501}let early_secret_72: bitstring = catch-fail((if v_911 then hmac(@8_tls_h,s_87,k_77) else fail-any)) in
                            {4502}let v_912: bool = not-caught-fail(early_secret_72) in
                            {4504}let m_94: bitstring = (if v_912 then zero else caught-fail) in
                            {4505}let h_267: bitstring = (if v_912 then catch-fail(hash(@8_tls_h,m_94)) else caught-fail) in
                            {4506}let v_913: bool = not-caught-fail(h_267) in
                            {4503}let l_269: label = (if v_912 then tls13_ext_res_binder else caught-fail) in
                            {4507}let x_301: bitstring = (if v_913 then (l_269,h_267) else caught-fail) in
                            {4508}let binder_key_48: bitstring = (if v_912 then catch-fail((if v_913 then hmac(@8_tls_h,early_secret_72,x_301) else fail-any)) else caught-fail) in
                            {4509}let v_914: bool = not-caught-fail(binder_key_48) in
                            {4510}let v_915: bitstring = catch-fail((if v_912 then (if v_914 then (early_secret_72,binder_key_48) else fail-any) else fail-any)) in
                            {4511}let v_916: bool = (not-caught-fail(v_915) && success?(1-proj-2-tuple(v_915))) in
                            {4512}let kb_48: mac_key = (if v_916 then 2-proj-2-tuple(v_915) else caught-fail) in
                            {4513}let es_75: bitstring = (if v_916 then 1-proj-2-tuple(v_915) else caught-fail) in
                            {4514}let v_917: bitstring = catch-fail((if v_916 then (empty_psk_ext,(NoPsk,zero,es_75,false)) else fail-any)) in
                            {4515}let v_918: bool = (not-caught-fail(v_917) && success?(1-proj-2-tuple(v_917))) in
                            {4516}let psk_data_29: bitstring = (if v_918 then 2-proj-2-tuple(v_917) else caught-fail) in
                            {4517}let psk_ext_54: preSharedKeyExt = (if v_918 then 1-proj-2-tuple(v_917) else caught-fail) in
                            {4518}let offer_41: params = (if v_918 then nego(TLS13,@8_tls_h,@8_tls_a,kex_ext_15,SNI(s_dom_17),empty_ech_ext,empty_extra_ext,psk_ext_54) else caught-fail) in
                            {4519}let (client_hello'_20: msg,cr'_22: bytes32,kex_data'_17: bitstring,psk_data'_17: bitstring) = (if v_918 then (CH(cr_27,offer_41),cr_27,kex_data_13,psk_data_29) else fail-any) in
                            {4520}event ClientOffersAead(cr'_22,@8_tls_a);
                            {4521}event ClientOffersHash(cr'_22,@8_tls_h);
                            {4522}event ClientOffersGroup(cr'_22,@8_tls_g);
                            {4523}out(io, client_hello'_20);
                            {4525}in(io, server_hello'_17: msg);
                            {4526}let SH(sr'_17: bytes32,mode'_17: params) = server_hello'_17 in
                            (
                                {4527}if (sr'_17 = B32(HRR24,HRR8)) then
                                    {4528}out(io, unexpected_message)
                                else
                                    {4529}let (x_302: bitstring,g_23: group) = kex_data'_17 in
                                    {4530}let (psk_offer_22: preSharedKey,id_offer_22: identityPsk,es_offer_22: bitstring,is_safe_offer_22: bool) = psk_data'_17 in
                                    {4531}event Client_PSKOffer(id_client_4,psk_offer_22,id_offer_22,is_safe_offer_22);
                                    {4532}event Client_Rand_client(id_client_4,cr'_22);
                                    {4533}event Client_DH_client(id_client_4,dh_pub(g_23,x_302));
                                    {4534}event Client_server_domain(id_client_4,s_dom_17);
                                    {4535}let SH(sr_36: bytes32,mode_28: params) = server_hello'_17 in
                                    {4536}event Client_Rand_server(id_client_4,sr_36);
                                    {4537}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_23,gy_23: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_55: preSharedKeyExt) = mode_28 in
                                    (
                                        {4539}event Client_DH_server(id_client_4,gy_23);
                                        {4540}let v_919: bool = (psk_ext_55 = empty_psk_ext) in
                                        {4541}let psk_114: preSharedKey = (if v_919 then NoPsk else caught-fail) in
                                        {4543}let k_78: bitstring = (if v_919 then catch-fail(psk2b(psk_114)) else caught-fail) in
                                        {4544}let v_920: bool = not-caught-fail(k_78) in
                                        {4542}let s_88: bitstring = (if v_919 then zero else caught-fail) in
                                        {4545}let early_secret_73: bitstring = (if v_919 then catch-fail((if v_920 then hmac(@8_tls_h,s_88,k_78) else fail-any)) else caught-fail) in
                                        {4546}let v_921: bool = not-caught-fail(early_secret_73) in
                                        {4548}let m_95: bitstring = (if v_921 then zero else caught-fail) in
                                        {4549}let h_268: bitstring = (if v_921 then catch-fail(hash(@8_tls_h,m_95)) else caught-fail) in
                                        {4550}let v_922: bool = not-caught-fail(h_268) in
                                        {4547}let l_270: label = (if v_921 then tls13_ext_res_binder else caught-fail) in
                                        {4551}let x_303: bitstring = (if v_922 then (l_270,h_268) else caught-fail) in
                                        {4552}let binder_key_49: bitstring = (if v_921 then catch-fail((if v_922 then hmac(@8_tls_h,early_secret_73,x_303) else fail-any)) else caught-fail) in
                                        {4553}let v_923: bool = not-caught-fail(binder_key_49) in
                                        {4554}let v_924: bitstring = (if v_919 then catch-fail((if v_921 then (if v_923 then (early_secret_73,binder_key_49) else fail-any) else fail-any)) else caught-fail) in
                                        {4555}let v_925: bool = (not-caught-fail(v_924) && success?(1-proj-2-tuple(v_924))) in
                                        {4556}let kb_49: mac_key = (if v_925 then 2-proj-2-tuple(v_924) else caught-fail) in
                                        {4557}let es_76: bitstring = (if v_925 then 1-proj-2-tuple(v_924) else caught-fail) in
                                        {4558}let v_926: bitstring = (if not(v_919) then catch-fail(psk_data'_17) else caught-fail) in
                                        {4559}let v_927: bool = (not-caught-fail(v_926) && success?(1-proj-4-tuple(v_926))) in
                                        {4560}let is_safe_46: bool = (if v_927 then 4-proj-4-tuple(v_926) else caught-fail) in
                                        {4561}let es_77: bitstring = (if v_927 then 3-proj-4-tuple(v_926) else caught-fail) in
                                        {4562}let id_57: identityPsk = (if v_927 then 2-proj-4-tuple(v_926) else caught-fail) in
                                        {4563}let psk_115: preSharedKey = (if v_927 then 1-proj-4-tuple(v_926) else caught-fail) in
                                        {4564}let (psk_116: preSharedKey,early_secret_74: bitstring,valid_22: bool,safe_psk_31: bool) = (if v_919 then (if v_925 then (NoPsk,es_76,true,false) else fail-any) else (if v_927 then (psk_115,es_77,((psk_115 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_55)),is_safe_46) else fail-any)) in
                                        {4565}event Client_PSKChoosen(id_client_4,psk_116,safe_psk_31);
                                        {4566}if valid_22 then
                                        (
                                            {4569}new s_89[]: seed;
                                            {4567}let gxy_46: element = catch-fail(dh_decap_fun(g_23,gy_23,x_302)) in
                                            {4568}let v_928: bool = not-caught-fail(gxy_46) in
                                            {4570}let gxy_47: element = (if v_928 then gxy_46 else dh_f(s_89)) in
                                            {4571}event Client_DH_gxy(id_client_4,gxy_47);
                                            {4573}let m_96: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                            {4574}let v_929: bool = not-caught-fail(m_96) in
                                            {4575}let h_269: bitstring = (if v_929 then catch-fail(hash(@8_tls_h,m_96)) else caught-fail) in
                                            {4576}let v_930: bool = not-caught-fail(h_269) in
                                            {4572}let l_271: label = tls13_derived in
                                            {4577}let x_304: bitstring = (if v_930 then (l_271,h_269) else caught-fail) in
                                            {4578}let extra_54: bitstring = catch-fail((if v_929 then (if v_930 then hmac(@8_tls_h,early_secret_74,x_304) else fail-any) else fail-any)) in
                                            {4579}let v_931: bool = not-caught-fail(extra_54) in
                                            {4580}let handshake_secret_23: bitstring = (if v_931 then hmac(@8_tls_h,extra_54,gxy_47) else fail-any) in
                                            {4582}let m_97: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                            {4583}let v_932: bool = not-caught-fail(m_97) in
                                            {4584}let h_270: bitstring = (if v_932 then catch-fail(hash(@8_tls_h,m_97)) else caught-fail) in
                                            {4585}let v_933: bool = not-caught-fail(h_270) in
                                            {4581}let l_272: label = tls13_derived in
                                            {4586}let x_305: bitstring = (if v_933 then (l_272,h_270) else caught-fail) in
                                            {4587}let extra_55: bitstring = catch-fail((if v_932 then (if v_933 then hmac(@8_tls_h,handshake_secret_23,x_305) else fail-any) else fail-any)) in
                                            {4588}let v_934: bool = not-caught-fail(extra_55) in
                                            {4589}let k_79: bitstring = (if v_934 then zero else caught-fail) in
                                            {4590}let master_secret_53: bitstring = (if v_934 then catch-fail(hmac(@8_tls_h,handshake_secret_23,k_79)) else caught-fail) in
                                            {4591}let v_935: bool = not-caught-fail(master_secret_53) in
                                            {4524}let cur_log4_17: bitstring = (cur_log3_7,client_hello'_20) in
                                            {4538}let cur_log2_54: bitstring = (cur_log4_17,server_hello'_17) in
                                            {4593}let h_271: bitstring = (if v_935 then catch-fail(hash(@8_tls_h,cur_log2_54)) else caught-fail) in
                                            {4594}let v_936: bool = not-caught-fail(h_271) in
                                            {4592}let l_273: label = (if v_935 then tls13_client_handshake_traffic_secret else caught-fail) in
                                            {4595}let x_306: bitstring = (if v_936 then (l_273,h_271) else caught-fail) in
                                            {4596}let client_hts_23: bitstring = (if v_935 then catch-fail((if v_936 then hmac(@8_tls_h,handshake_secret_23,x_306) else fail-any)) else caught-fail) in
                                            {4597}let v_937: bool = not-caught-fail(client_hts_23) in
                                            {4599}let h_272: bitstring = (if v_937 then catch-fail(hash(@8_tls_h,cur_log2_54)) else caught-fail) in
                                            {4600}let v_938: bool = not-caught-fail(h_272) in
                                            {4598}let l_274: label = (if v_937 then tls13_server_handshake_traffic_secret else caught-fail) in
                                            {4601}let x_307: bitstring = (if v_938 then (l_274,h_272) else caught-fail) in
                                            {4602}let server_hts_23: bitstring = (if v_937 then catch-fail((if v_938 then hmac(@8_tls_h,handshake_secret_23,x_307) else fail-any)) else caught-fail) in
                                            {4603}let v_939: bool = not-caught-fail(server_hts_23) in
                                            {4605}let h_273: bitstring = (if v_939 then zero else caught-fail) in
                                            {4604}let l_275: label = (if v_939 then tls13_key else caught-fail) in
                                            {4606}let x_308: bitstring = (if v_939 then (l_275,h_273) else caught-fail) in
                                            {4607}let client_wkh_23: bitstring = (if v_939 then catch-fail(hmac(@8_tls_h,client_hts_23,x_308)) else caught-fail) in
                                            {4608}let v_940: bool = not-caught-fail(client_wkh_23) in
                                            {4610}let h_274: bitstring = (if v_940 then zero else caught-fail) in
                                            {4609}let l_276: label = (if v_940 then tls13_key else caught-fail) in
                                            {4611}let x_309: bitstring = (if v_940 then (l_276,h_274) else caught-fail) in
                                            {4612}let server_wkh_23: bitstring = (if v_940 then catch-fail(hmac(@8_tls_h,server_hts_23,x_309)) else caught-fail) in
                                            {4613}let v_941: bool = not-caught-fail(server_wkh_23) in
                                            {4615}let h_275: bitstring = (if v_941 then zero else caught-fail) in
                                            {4614}let l_277: label = (if v_941 then tls13_finished else caught-fail) in
                                            {4616}let x_310: bitstring = (if v_941 then (l_277,h_275) else caught-fail) in
                                            {4617}let client_fk_23: bitstring = (if v_941 then catch-fail(hmac(@8_tls_h,client_hts_23,x_310)) else caught-fail) in
                                            {4618}let v_942: bool = not-caught-fail(client_fk_23) in
                                            {4620}let h_276: bitstring = (if v_942 then zero else caught-fail) in
                                            {4619}let l_278: label = (if v_942 then tls13_finished else caught-fail) in
                                            {4621}let x_311: bitstring = (if v_942 then (l_278,h_276) else caught-fail) in
                                            {4622}let server_fk_23: bitstring = (if v_942 then catch-fail(hmac(@8_tls_h,server_hts_23,x_311)) else caught-fail) in
                                            {4623}let v_943: bool = not-caught-fail(server_fk_23) in
                                            {4624}let (master_secret_54: bitstring,chk_30: aead_key,shk_29: aead_key,cfin_30: mac_key,sfin_29: mac_key) = (if v_934 then (if v_935 then (if v_937 then (if v_939 then (if v_940 then (if v_941 then (if v_942 then (if v_943 then (master_secret_53,client_wkh_23,server_wkh_23,client_fk_23,server_fk_23) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                            {4625}event Client_chk(id_client_4,chk_30);
                                            {4626}event Client_shk(id_client_4,shk_29);
                                            {4627}event Client_cfin(id_client_4,cfin_30);
                                            {4628}event Client_sfin(id_client_4,sfin_29);
                                            {4629}in(io, enc_ee_msg_22: bitstring);
                                            {4630}let ee_msg_27: msg = aead_dec(@8_tls_a,shk_29,0,zero,enc_ee_msg_22) in
                                            {4631}let EE(ech_ee_22: echExt,extra_ee_22: extraExt) = ee_msg_27 in
                                            {4632}let cur_log2_55: bitstring = (cur_log2_54,ee_msg_27) in
                                            {4633}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr'_22,sr_36,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_116,safe_psk_31,@8_comp_psk,master_secret_54,chk_30,0,shk_29,1,cfin_30,sfin_29,cur_log2_55)))
                                        )
                                        else
                                            {4634}out(io, illegal_parameter)
                                    )
                                    else
                                        {4635}out(io, illegal_parameter)
                            )
                            else
                                {4636}out(io, unexpected_message)
                    )
                    else
                        {4637}out(io, illegal_parameter)
                )
                else
                    {4638}if send_kex_4 then
                    (
                        {4639}let (x_312: bitstring,g_24: group) = kex_data_12 in
                        {4640}let (psk_offer_23: preSharedKey,id_offer_23: identityPsk,es_offer_23: bitstring,is_safe_offer_23: bool) = psk_data_26 in
                        {4641}event Client_PSKOffer(id_client_4,psk_offer_23,id_offer_23,is_safe_offer_23);
                        {4642}event Client_Rand_client(id_client_4,cr_26);
                        {4643}event Client_DH_client(id_client_4,dh_pub(g_24,x_312));
                        {4644}event Client_server_domain(id_client_4,s_dom_17);
                        {4645}let SH(sr_37: bytes32,mode_29: params) = server_hello_6 in
                        {4646}event Client_Rand_server(id_client_4,sr_37);
                        {4647}let nego(=TLS13,=@8_tls_h,=@8_tls_a,server_kex_ext(DHE_kex(=g_24,gy_24: element)),=empty_sni_ext,=empty_ech_ext,=empty_extra_ext,psk_ext_56: preSharedKeyExt) = mode_29 in
                        (
                            {4649}event Client_DH_server(id_client_4,gy_24);
                            {4650}let v_944: bool = (psk_ext_56 = empty_psk_ext) in
                            {4651}let psk_117: preSharedKey = (if v_944 then NoPsk else caught-fail) in
                            {4653}let k_80: bitstring = (if v_944 then catch-fail(psk2b(psk_117)) else caught-fail) in
                            {4654}let v_945: bool = not-caught-fail(k_80) in
                            {4652}let s_90: bitstring = (if v_944 then zero else caught-fail) in
                            {4655}let early_secret_75: bitstring = (if v_944 then catch-fail((if v_945 then hmac(@8_tls_h,s_90,k_80) else fail-any)) else caught-fail) in
                            {4656}let v_946: bool = not-caught-fail(early_secret_75) in
                            {4658}let m_98: bitstring = (if v_946 then zero else caught-fail) in
                            {4659}let h_277: bitstring = (if v_946 then catch-fail(hash(@8_tls_h,m_98)) else caught-fail) in
                            {4660}let v_947: bool = not-caught-fail(h_277) in
                            {4657}let l_279: label = (if v_946 then tls13_ext_res_binder else caught-fail) in
                            {4661}let x_313: bitstring = (if v_947 then (l_279,h_277) else caught-fail) in
                            {4662}let binder_key_50: bitstring = (if v_946 then catch-fail((if v_947 then hmac(@8_tls_h,early_secret_75,x_313) else fail-any)) else caught-fail) in
                            {4663}let v_948: bool = not-caught-fail(binder_key_50) in
                            {4664}let v_949: bitstring = (if v_944 then catch-fail((if v_946 then (if v_948 then (early_secret_75,binder_key_50) else fail-any) else fail-any)) else caught-fail) in
                            {4665}let v_950: bool = (not-caught-fail(v_949) && success?(1-proj-2-tuple(v_949))) in
                            {4666}let kb_50: mac_key = (if v_950 then 2-proj-2-tuple(v_949) else caught-fail) in
                            {4667}let es_78: bitstring = (if v_950 then 1-proj-2-tuple(v_949) else caught-fail) in
                            {4668}let v_951: bitstring = (if not(v_944) then catch-fail(psk_data_26) else caught-fail) in
                            {4669}let v_952: bool = (not-caught-fail(v_951) && success?(1-proj-4-tuple(v_951))) in
                            {4670}let is_safe_47: bool = (if v_952 then 4-proj-4-tuple(v_951) else caught-fail) in
                            {4671}let es_79: bitstring = (if v_952 then 3-proj-4-tuple(v_951) else caught-fail) in
                            {4672}let id_58: identityPsk = (if v_952 then 2-proj-4-tuple(v_951) else caught-fail) in
                            {4673}let psk_118: preSharedKey = (if v_952 then 1-proj-4-tuple(v_951) else caught-fail) in
                            {4674}let (psk_119: preSharedKey,early_secret_76: bitstring,valid_23: bool,safe_psk_32: bool) = (if v_944 then (if v_950 then (NoPsk,es_78,true,false) else fail-any) else (if v_952 then (psk_118,es_79,((psk_118 ≠ NoPsk) && (server_psk_ext(1) = psk_ext_56)),is_safe_47) else fail-any)) in
                            {4675}event Client_PSKChoosen(id_client_4,psk_119,safe_psk_32);
                            {4676}if valid_23 then
                            (
                                {4679}new s_91[]: seed;
                                {4677}let gxy_48: element = catch-fail(dh_decap_fun(g_24,gy_24,x_312)) in
                                {4678}let v_953: bool = not-caught-fail(gxy_48) in
                                {4680}let gxy_49: element = (if v_953 then gxy_48 else dh_f(s_91)) in
                                {4681}event Client_DH_gxy(id_client_4,gxy_49);
                                {4683}let m_99: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                {4684}let v_954: bool = not-caught-fail(m_99) in
                                {4685}let h_278: bitstring = (if v_954 then catch-fail(hash(@8_tls_h,m_99)) else caught-fail) in
                                {4686}let v_955: bool = not-caught-fail(h_278) in
                                {4682}let l_280: label = tls13_derived in
                                {4687}let x_314: bitstring = (if v_955 then (l_280,h_278) else caught-fail) in
                                {4688}let extra_56: bitstring = catch-fail((if v_954 then (if v_955 then hmac(@8_tls_h,early_secret_76,x_314) else fail-any) else fail-any)) in
                                {4689}let v_956: bool = not-caught-fail(extra_56) in
                                {4690}let handshake_secret_24: bitstring = (if v_956 then hmac(@8_tls_h,extra_56,gxy_49) else fail-any) in
                                {4692}let m_100: bitstring = catch-fail(hash(@8_tls_h,zero)) in
                                {4693}let v_957: bool = not-caught-fail(m_100) in
                                {4694}let h_279: bitstring = (if v_957 then catch-fail(hash(@8_tls_h,m_100)) else caught-fail) in
                                {4695}let v_958: bool = not-caught-fail(h_279) in
                                {4691}let l_281: label = tls13_derived in
                                {4696}let x_315: bitstring = (if v_958 then (l_281,h_279) else caught-fail) in
                                {4697}let extra_57: bitstring = catch-fail((if v_957 then (if v_958 then hmac(@8_tls_h,handshake_secret_24,x_315) else fail-any) else fail-any)) in
                                {4698}let v_959: bool = not-caught-fail(extra_57) in
                                {4699}let k_81: bitstring = (if v_959 then zero else caught-fail) in
                                {4700}let master_secret_55: bitstring = (if v_959 then catch-fail(hmac(@8_tls_h,handshake_secret_24,k_81)) else caught-fail) in
                                {4701}let v_960: bool = not-caught-fail(master_secret_55) in
                                {4648}let cur_log2_56: bitstring = (cur_log2_49,server_hello_6) in
                                {4703}let h_280: bitstring = (if v_960 then catch-fail(hash(@8_tls_h,cur_log2_56)) else caught-fail) in
                                {4704}let v_961: bool = not-caught-fail(h_280) in
                                {4702}let l_282: label = (if v_960 then tls13_client_handshake_traffic_secret else caught-fail) in
                                {4705}let x_316: bitstring = (if v_961 then (l_282,h_280) else caught-fail) in
                                {4706}let client_hts_24: bitstring = (if v_960 then catch-fail((if v_961 then hmac(@8_tls_h,handshake_secret_24,x_316) else fail-any)) else caught-fail) in
                                {4707}let v_962: bool = not-caught-fail(client_hts_24) in
                                {4709}let h_281: bitstring = (if v_962 then catch-fail(hash(@8_tls_h,cur_log2_56)) else caught-fail) in
                                {4710}let v_963: bool = not-caught-fail(h_281) in
                                {4708}let l_283: label = (if v_962 then tls13_server_handshake_traffic_secret else caught-fail) in
                                {4711}let x_317: bitstring = (if v_963 then (l_283,h_281) else caught-fail) in
                                {4712}let server_hts_24: bitstring = (if v_962 then catch-fail((if v_963 then hmac(@8_tls_h,handshake_secret_24,x_317) else fail-any)) else caught-fail) in
                                {4713}let v_964: bool = not-caught-fail(server_hts_24) in
                                {4715}let h_282: bitstring = (if v_964 then zero else caught-fail) in
                                {4714}let l_284: label = (if v_964 then tls13_key else caught-fail) in
                                {4716}let x_318: bitstring = (if v_964 then (l_284,h_282) else caught-fail) in
                                {4717}let client_wkh_24: bitstring = (if v_964 then catch-fail(hmac(@8_tls_h,client_hts_24,x_318)) else caught-fail) in
                                {4718}let v_965: bool = not-caught-fail(client_wkh_24) in
                                {4720}let h_283: bitstring = (if v_965 then zero else caught-fail) in
                                {4719}let l_285: label = (if v_965 then tls13_key else caught-fail) in
                                {4721}let x_319: bitstring = (if v_965 then (l_285,h_283) else caught-fail) in
                                {4722}let server_wkh_24: bitstring = (if v_965 then catch-fail(hmac(@8_tls_h,server_hts_24,x_319)) else caught-fail) in
                                {4723}let v_966: bool = not-caught-fail(server_wkh_24) in
                                {4725}let h_284: bitstring = (if v_966 then zero else caught-fail) in
                                {4724}let l_286: label = (if v_966 then tls13_finished else caught-fail) in
                                {4726}let x_320: bitstring = (if v_966 then (l_286,h_284) else caught-fail) in
                                {4727}let client_fk_24: bitstring = (if v_966 then catch-fail(hmac(@8_tls_h,client_hts_24,x_320)) else caught-fail) in
                                {4728}let v_967: bool = not-caught-fail(client_fk_24) in
                                {4730}let h_285: bitstring = (if v_967 then zero else caught-fail) in
                                {4729}let l_287: label = (if v_967 then tls13_finished else caught-fail) in
                                {4731}let x_321: bitstring = (if v_967 then (l_287,h_285) else caught-fail) in
                                {4732}let server_fk_24: bitstring = (if v_967 then catch-fail(hmac(@8_tls_h,server_hts_24,x_321)) else caught-fail) in
                                {4733}let v_968: bool = not-caught-fail(server_fk_24) in
                                {4734}let (master_secret_56: bitstring,chk_31: aead_key,shk_30: aead_key,cfin_31: mac_key,sfin_30: mac_key) = (if v_959 then (if v_960 then (if v_962 then (if v_964 then (if v_965 then (if v_966 then (if v_967 then (if v_968 then (master_secret_55,client_wkh_24,server_wkh_24,client_fk_24,server_fk_24) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
                                {4735}event Client_chk(id_client_4,chk_31);
                                {4736}event Client_shk(id_client_4,shk_30);
                                {4737}event Client_cfin(id_client_4,cfin_31);
                                {4738}event Client_sfin(id_client_4,sfin_30);
                                {4739}in(io, enc_ee_msg_23: bitstring);
                                {4740}let ee_msg_28: msg = aead_dec(@8_tls_a,shk_30,0,zero,enc_ee_msg_23) in
                                {4741}let EE(ech_ee_23: echExt,extra_ee_23: extraExt) = ee_msg_28 in
                                {4742}let cur_log2_57: bitstring = (cur_log2_56,ee_msg_28) in
                                {4743}out(ch_client_after_EE, (id_client_4,ArgsClientAfterEE(cr_26,sr_37,@8_tls_h,@8_tls_a,c_dom_7,s_dom_17,psk_119,safe_psk_32,@8_comp_psk,master_secret_56,chk_31,0,shk_30,1,cfin_31,sfin_30,cur_log2_57)))
                            )
                            else
                                {4744}out(io, illegal_parameter)
                        )
                        else
                            {4745}out(io, illegal_parameter)
                    )
                    else
                        {4746}out(io, illegal_parameter)
            )
            else
                {4747}out(io, unexpected_message)
        )
)

Declared: select table2(pre_shared_keys(*c_dom_8,*s_dom_18,*h_286,*id_59,*x_322,*idP_13,*safe),pre_shared_keys(*c_dom'_10,*s_dom'_1,*h',*id',*x',*idP',*safe'))/400000
Declared: select table2(ech_configurations(*config_2,*skR_2),ech_configurations(*config',*skR'_1))/400000
Declared: select table2(long_term_keys(*c_dom_8,*sk_d_1,*pkr,*crt_12,*idP_13),long_term_keys(*c_dom'_10,*sk_d',*pkr',*crt',*idP'))/400000
Declared: select mess2(ch_server_SH[],*x_322,ch_server_SH[],*x')/300000
Declared: select mess2(ch_server_CRT[],*x_322,ch_server_CRT[],*x')/300000
Declared: select mess2(ch_server_FIN[],*x_322,ch_server_FIN[],*x')/300000
Declared: select mess2(ch_server_CFIN[],*x_322,ch_server_CFIN[],*x')/300000
Declared: select mess2(ch_client_after_EE[],*x_322,ch_client_after_EE[],*x')/300000
Declared: select mess2(ch_client_CRT[],*x_322,ch_client_CRT[],*x')/300000
Declared: select mess2(ch_client_FIN[],*x_322,ch_client_FIN[],*x')/300000
Declared: select mess2(ch_client_CFIN[],*x_322,ch_client_CFIN[],*x')/300000
-- Axiom event(PreciseMess(ch,choice[id_59,id2_1],choice[st1_9,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id_59,id2'],choice[st1',st2'],choice[x1',x2'])) ==> st1_9 = st1' && x1 = x1'; event(PreciseMess(ch,choice[id1_1,id_59],choice[st1_9,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id_59],choice[st1',st2'],choice[x1',x2'])) ==> st2_2 = st2' && x2 = x2'; event(PreciseMess(ch,choice[id1_1,id2_1],choice[st_16,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st_16,st2'],choice[x1',x2'])) ==> id1_1 = id1' && x1 = x1'; event(PreciseMess(ch,choice[id1_1,id2_1],choice[st1_9,st_16],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st1',st_16],choice[x1',x2'])) ==> id2_1 = id2' && x2 = x2'
Encoding: 
axiom event(PreciseMess(ch,choice[id_59,id2_1],choice[st1_9,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id_59,id2'],choice[st1',st2'],choice[x1',x2'])) ==> st1_9 = st1' && x1 = x1' encoded as event2(PreciseMess(ch,id_59,st1_9,x1),PreciseMess(ch,id2_1,st2_2,x2)) && event2(PreciseMess(ch,id_59,st1',x1'),PreciseMess(ch,id2',st2',x2')) ==> st1_9 = st1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id_59],choice[st1_9,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id_59],choice[st1',st2'],choice[x1',x2'])) ==> st2_2 = st2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1_9,x1),PreciseMess(ch,id_59,st2_2,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id_59,st2',x2')) ==> st2_2 = st2' && x2 = x2'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st_16,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st_16,st2'],choice[x1',x2'])) ==> id1_1 = id1' && x1 = x1' encoded as event2(PreciseMess(ch,id1_1,st_16,x1),PreciseMess(ch,id2_1,st2_2,x2)) && event2(PreciseMess(ch,id1',st_16,x1'),PreciseMess(ch,id2',st2',x2')) ==> id1_1 = id1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st1_9,st_16],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st1',st_16],choice[x1',x2'])) ==> id2_1 = id2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1_9,x1),PreciseMess(ch,id2_1,st_16,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id2',st_16,x2')) ==> id2_1 = id2' && x2 = x2'
in biprocess 1.
-- Axiom event(PreciseInput(st_16,choice[x_322,x1])) && event(PreciseInput(st_16,choice[x',x2])) ==> x_322 = x' && x1 = x2 encoded as event2(PreciseInput(st_16,x_322),PreciseInput(st_16,x1)) && event2(PreciseInput(st_16,x'),PreciseInput(st_16,x2)) ==> x_322 = x' && x1 = x2 in biprocess 1.
-- Axiom event(Server_DH_client(choice[id_59,id1_1],choice[e,e1])) && event(Server_DH_client(choice[id_59,id2_1],choice[e',e2])) ==> e = e'; event(Server_DH_client(choice[id1_1,id_59],choice[e1,e])) && event(Server_DH_client(choice[id2_1,id_59],choice[e2,e'])) ==> e = e'
Encoding: 
axiom event(Server_DH_client(choice[id_59,id1_1],choice[e,e1])) && event(Server_DH_client(choice[id_59,id2_1],choice[e',e2])) ==> e = e' encoded as event2(Server_DH_client(id_59,e),Server_DH_client(id1_1,e1)) && event2(Server_DH_client(id_59,e'),Server_DH_client(id2_1,e2)) ==> e = e'
axiom event(Server_DH_client(choice[id1_1,id_59],choice[e1,e])) && event(Server_DH_client(choice[id2_1,id_59],choice[e2,e'])) ==> e = e' encoded as event2(Server_DH_client(id1_1,e1),Server_DH_client(id_59,e)) && event2(Server_DH_client(id2_1,e2),Server_DH_client(id_59,e')) ==> e = e'
in biprocess 1.
-- Axiom event(Server_new_PSK(choice[id_59,id1_1],choice[k_82,k1])) && event(Server_new_PSK(choice[id_59,id2_1],choice[k',k2])) ==> k_82 = k'; event(Server_new_PSK(choice[id1_1,id_59],choice[k1,k_82])) && event(Server_new_PSK(choice[id2_1,id_59],choice[k2,k'])) ==> k_82 = k'
Encoding: 
axiom event(Server_new_PSK(choice[id_59,id1_1],choice[k_82,k1])) && event(Server_new_PSK(choice[id_59,id2_1],choice[k',k2])) ==> k_82 = k' encoded as event2(Server_new_PSK(id_59,k_82),Server_new_PSK(id1_1,k1)) && event2(Server_new_PSK(id_59,k'),Server_new_PSK(id2_1,k2)) ==> k_82 = k'
axiom event(Server_new_PSK(choice[id1_1,id_59],choice[k1,k_82])) && event(Server_new_PSK(choice[id2_1,id_59],choice[k2,k'])) ==> k_82 = k' encoded as event2(Server_new_PSK(id1_1,k1),Server_new_PSK(id_59,k_82)) && event2(Server_new_PSK(id2_1,k2),Server_new_PSK(id_59,k')) ==> k_82 = k'
in biprocess 1.
-- Axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[psk_120,psk''])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[psk'',psk_120])); table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[is_safe_48,is_safe'])) && attacker(choice[psk_120,psk'']) ==> is_safe_48 ≠ true; table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',is_safe_48])) && attacker(choice[psk'',psk_120]) ==> is_safe_48 ≠ true; table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[is_safe_48,is_safe'])) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero; table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',is_safe_48])) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero; attacker(choice[mk_idpsk(s_dom_18,h_286,psk_120),idpsk]) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero; attacker(choice[idpsk,mk_idpsk(s_dom_18,h_286,psk_120)]) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero; not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,zero,psk_120),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,zero,psk_120)])); not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero))),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero)))])); not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e)])); not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))])); not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))])); not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))])); not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322])); not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))]))
Encoding: 
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[psk_120,psk''])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(psk_120,psk''))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[psk'',psk_120])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(psk'',psk_120))
axiom table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[is_safe_48,is_safe'])) && attacker(choice[psk_120,psk'']) ==> is_safe_48 ≠ true encoded as table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,is_safe_48),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(psk_120,psk'') ==> is_safe_48 ≠ true
axiom table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',is_safe_48])) && attacker(choice[psk'',psk_120]) ==> is_safe_48 ≠ true encoded as table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,is_safe_48)) && attacker2(psk'',psk_120) ==> is_safe_48 ≠ true
axiom table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[is_safe_48,is_safe'])) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,is_safe_48),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',is_safe_48])) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,is_safe_48)) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom attacker(choice[mk_idpsk(s_dom_18,h_286,psk_120),idpsk]) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as attacker2(mk_idpsk(s_dom_18,h_286,psk_120),idpsk) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom attacker(choice[idpsk,mk_idpsk(s_dom_18,h_286,psk_120)]) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as attacker2(idpsk,mk_idpsk(s_dom_18,h_286,psk_120)) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,zero,psk_120),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,zero,psk_120),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,zero,psk_120)])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,zero,psk_120)))
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero))),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero))),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero)))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero)))))
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e)])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e)))
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))))
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))))
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))))
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))))
in biprocess 1.
-- Axiom not (event(Server_new_PSK(choice[id_s,id_s_1],choice[new_psk,new_psk'])) && table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[new_psk,new_psk''],choice[id_c,id_c'],choice[is_safe_48,is_safe'])) && event(Server_DH_client(choice[id_s,id_s_2],choice[dh_pub(g_25,x_322),e])) && attacker(choice[x_322,x'])); not (event(Server_new_PSK(choice[id_s_1,id_s],choice[new_psk',new_psk])) && table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[new_psk'',new_psk],choice[id_c',id_c],choice[is_safe',is_safe_48])) && event(Server_DH_client(choice[id_s_2,id_s],choice[e,dh_pub(g_25,x_322)])) && attacker(choice[x',x_322]))
Encoding: 
axiom not (event(Server_new_PSK(choice[id_s,id_s_1],choice[new_psk,new_psk'])) && table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[new_psk,new_psk''],choice[id_c,id_c'],choice[is_safe_48,is_safe'])) && event(Server_DH_client(choice[id_s,id_s_2],choice[dh_pub(g_25,x_322),e])) && attacker(choice[x_322,x'])) encoded as not (event2(Server_new_PSK(id_s,new_psk),Server_new_PSK(id_s_1,new_psk')) && table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,new_psk,id_c,is_safe_48),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',new_psk'',id_c',is_safe')) && event2(Server_DH_client(id_s,dh_pub(g_25,x_322)),Server_DH_client(id_s_2,e)) && attacker2(x_322,x'))
axiom not (event(Server_new_PSK(choice[id_s_1,id_s],choice[new_psk',new_psk])) && table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[new_psk'',new_psk],choice[id_c',id_c],choice[is_safe',is_safe_48])) && event(Server_DH_client(choice[id_s_2,id_s],choice[e,dh_pub(g_25,x_322)])) && attacker(choice[x',x_322])) encoded as not (event2(Server_new_PSK(id_s_1,new_psk'),Server_new_PSK(id_s,new_psk)) && table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',new_psk'',id_c',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,new_psk,id_c,is_safe_48)) && event2(Server_DH_client(id_s_2,e),Server_DH_client(id_s,dh_pub(g_25,x_322))) && attacker2(x',x_322))
in biprocess 1.
-- Axiom table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_alg_14,h_alg'_1],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,safe'])) ==> id_59 = mk_idpsk(s_dom_18,h_alg_14,psk_120); table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h_alg'_1,h_alg_14],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[safe',true])) ==> id_59 = mk_idpsk(s_dom_18,h_alg_14,psk_120)
Encoding: 
axiom table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_alg_14,h_alg'_1],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,safe'])) ==> id_59 = mk_idpsk(s_dom_18,h_alg_14,psk_120) encoded as table2(pre_shared_keys(c_dom_8,s_dom_18,h_alg_14,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP',safe')) ==> id_59 = mk_idpsk(s_dom_18,h_alg_14,psk_120)
axiom table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h_alg'_1,h_alg_14],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[safe',true])) ==> id_59 = mk_idpsk(s_dom_18,h_alg_14,psk_120) encoded as table2(pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP',safe'),pre_shared_keys(c_dom_8,s_dom_18,h_alg_14,id_59,psk_120,idP_13,true)) ==> id_59 = mk_idpsk(s_dom_18,h_alg_14,psk_120)
in biprocess 1.
-- Axiom table(pre_shared_keys(choice[c_dom_8,c_dom1_1],choice[s_dom_18,s_dom1],choice[h_alg_14,h_alg1],choice[id_59,id1_1],choice[psk_120,psk1_1],choice[idP_13,idP1_2],choice[safe,safe1_1])) && table(pre_shared_keys(choice[c_dom'_10,c_dom2_1],choice[s_dom'_1,s_dom2],choice[h_alg'_1,h_alg2],choice[id',id2_1],choice[psk',psk2_1],choice[idP_13,idP2_2],choice[safe',safe2_1])) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && psk_120 = psk' && safe = safe'; table(pre_shared_keys(choice[c_dom1_1,c_dom_8],choice[s_dom1,s_dom_18],choice[h_alg1,h_alg_14],choice[id1_1,id_59],choice[psk1_1,psk_120],choice[idP1_2,idP_13],choice[safe1_1,safe])) && table(pre_shared_keys(choice[c_dom2_1,c_dom'_10],choice[s_dom2,s_dom'_1],choice[h_alg2,h_alg'_1],choice[id2_1,id'],choice[psk2_1,psk'],choice[idP2_2,idP_13],choice[safe2_1,safe'])) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && psk_120 = psk' && safe = safe'; table(pre_shared_keys(choice[c_dom_8,c_dom1_1],choice[s_dom_18,s_dom1],choice[h_alg_14,h_alg1],choice[id_59,id1_1],choice[psk_120,psk1_1],choice[idP_13,idP1_2],choice[safe,safe1_1])) && table(pre_shared_keys(choice[c_dom'_10,c_dom2_1],choice[s_dom'_1,s_dom2],choice[h_alg'_1,h_alg2],choice[id',id2_1],choice[psk_120,psk2_1],choice[idP',idP2_2],choice[safe',safe2_1])) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && idP_13 = idP' && safe = safe'; table(pre_shared_keys(choice[c_dom1_1,c_dom_8],choice[s_dom1,s_dom_18],choice[h_alg1,h_alg_14],choice[id1_1,id_59],choice[psk1_1,psk_120],choice[idP1_2,idP_13],choice[safe1_1,safe])) && table(pre_shared_keys(choice[c_dom2_1,c_dom'_10],choice[s_dom2,s_dom'_1],choice[h_alg2,h_alg'_1],choice[id2_1,id'],choice[psk2_1,psk_120],choice[idP2_2,idP'],choice[safe2_1,safe'])) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && idP_13 = idP' && safe = safe'
Encoding: 
axiom table(pre_shared_keys(choice[c_dom_8,c_dom1_1],choice[s_dom_18,s_dom1],choice[h_alg_14,h_alg1],choice[id_59,id1_1],choice[psk_120,psk1_1],choice[idP_13,idP1_2],choice[safe,safe1_1])) && table(pre_shared_keys(choice[c_dom'_10,c_dom2_1],choice[s_dom'_1,s_dom2],choice[h_alg'_1,h_alg2],choice[id',id2_1],choice[psk',psk2_1],choice[idP_13,idP2_2],choice[safe',safe2_1])) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && psk_120 = psk' && safe = safe' encoded as table2(pre_shared_keys(c_dom_8,s_dom_18,h_alg_14,id_59,psk_120,idP_13,safe),pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1)) && table2(pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP_13,safe'),pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1)) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && psk_120 = psk' && safe = safe'
axiom table(pre_shared_keys(choice[c_dom1_1,c_dom_8],choice[s_dom1,s_dom_18],choice[h_alg1,h_alg_14],choice[id1_1,id_59],choice[psk1_1,psk_120],choice[idP1_2,idP_13],choice[safe1_1,safe])) && table(pre_shared_keys(choice[c_dom2_1,c_dom'_10],choice[s_dom2,s_dom'_1],choice[h_alg2,h_alg'_1],choice[id2_1,id'],choice[psk2_1,psk'],choice[idP2_2,idP_13],choice[safe2_1,safe'])) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && psk_120 = psk' && safe = safe' encoded as table2(pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1),pre_shared_keys(c_dom_8,s_dom_18,h_alg_14,id_59,psk_120,idP_13,safe)) && table2(pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1),pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP_13,safe')) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && psk_120 = psk' && safe = safe'
axiom table(pre_shared_keys(choice[c_dom_8,c_dom1_1],choice[s_dom_18,s_dom1],choice[h_alg_14,h_alg1],choice[id_59,id1_1],choice[psk_120,psk1_1],choice[idP_13,idP1_2],choice[safe,safe1_1])) && table(pre_shared_keys(choice[c_dom'_10,c_dom2_1],choice[s_dom'_1,s_dom2],choice[h_alg'_1,h_alg2],choice[id',id2_1],choice[psk_120,psk2_1],choice[idP',idP2_2],choice[safe',safe2_1])) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && idP_13 = idP' && safe = safe' encoded as table2(pre_shared_keys(c_dom_8,s_dom_18,h_alg_14,id_59,psk_120,idP_13,safe),pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1)) && table2(pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk_120,idP',safe'),pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1)) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && idP_13 = idP' && safe = safe'
axiom table(pre_shared_keys(choice[c_dom1_1,c_dom_8],choice[s_dom1,s_dom_18],choice[h_alg1,h_alg_14],choice[id1_1,id_59],choice[psk1_1,psk_120],choice[idP1_2,idP_13],choice[safe1_1,safe])) && table(pre_shared_keys(choice[c_dom2_1,c_dom'_10],choice[s_dom2,s_dom'_1],choice[h_alg2,h_alg'_1],choice[id2_1,id'],choice[psk2_1,psk_120],choice[idP2_2,idP'],choice[safe2_1,safe'])) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && idP_13 = idP' && safe = safe' encoded as table2(pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1),pre_shared_keys(c_dom_8,s_dom_18,h_alg_14,id_59,psk_120,idP_13,safe)) && table2(pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1),pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk_120,idP',safe')) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && idP_13 = idP' && safe = safe'
in biprocess 1.
-- Restriction event(Same(choice[x_322,x'])) ==> x_322 = x' encoded as event2(Same(x_322),Same(x')) ==> x_322 = x' in biprocess 1.
-- Restriction not (event(Client_Cert_server(idClientDiff(s_92),s_pkey_7)) && event(CompromisedLtkForEquiv(s_pkey_7))) encoded as not (event2(Client_Cert_server(idClientDiff(s_92),s_pkey_7),Client_Cert_server(idClientDiff(s_92),s_pkey_7)) && event2(CompromisedLtkForEquiv(s_pkey_7),CompromisedLtkForEquiv(s_pkey_7))) in biprocess 1.
-- Restriction event(Selected_ltk(choice[dom1_1,dom1'],choice[dom2_1,dom2'],choice[idP_13,idP'])) ==> dom1_1 = dom2_1 && dom1' = dom2' && ((dom1_1 = dom1' && idP_13 = idP') || dom1_1 ≠ dom1') encoded as event2(Selected_ltk(dom1_1,dom2_1,idP_13),Selected_ltk(dom1',dom2',idP')) ==> dom1_1 = dom2_1 && dom1' = dom2' && ((dom1_1 = dom1' && idP_13 = idP') || dom1_1 ≠ dom1') in biprocess 1.
-- Restriction event(Selected_psk(choice[dom1_1,dom1'],choice[dom2_1,dom2'],choice[idP_13,idP'],choice[safe,safe'])) ==> dom1_1 = dom2_1 && dom1' = dom2' && (dom1_1 ≠ dom1' || (dom1_1 = dom1' && idP_13 = idP')) encoded as event2(Selected_psk(dom1_1,dom2_1,idP_13,safe),Selected_psk(dom1',dom2',idP',safe')) ==> dom1_1 = dom2_1 && dom1' = dom2' && (dom1_1 ≠ dom1' || (dom1_1 = dom1' && idP_13 = idP')) in biprocess 1.
-- Restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk,ipsk1],choice[safe,safe1_1])) && event(Selected_one_time_used_psk(idP_13,choice[ipsk,ipsk2],choice[safe,safe2_1])) ==> idP_13 = idClientDiff(s_92); event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk1,ipsk],choice[safe1_1,safe])) && event(Selected_one_time_used_psk(idP_13,choice[ipsk2,ipsk],choice[safe2_1,safe])) ==> idP_13 = idClientDiff(s_92); event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk1,ipsk2],choice[safe1_1,safe2_1])) ==> safe1_1 = true && safe2_1 = true
Encoding: 
restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk,ipsk1],choice[safe,safe1_1])) && event(Selected_one_time_used_psk(idP_13,choice[ipsk,ipsk2],choice[safe,safe2_1])) ==> idP_13 = idClientDiff(s_92) encoded as event2(Selected_one_time_used_psk(idClientDiff(s_92),ipsk,safe),Selected_one_time_used_psk(idClientDiff(s_92),ipsk1,safe1_1)) && event2(Selected_one_time_used_psk(idP_13,ipsk,safe),Selected_one_time_used_psk(idP_13,ipsk2,safe2_1)) ==> idP_13 = idClientDiff(s_92)
restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk1,ipsk],choice[safe1_1,safe])) && event(Selected_one_time_used_psk(idP_13,choice[ipsk2,ipsk],choice[safe2_1,safe])) ==> idP_13 = idClientDiff(s_92) encoded as event2(Selected_one_time_used_psk(idClientDiff(s_92),ipsk1,safe1_1),Selected_one_time_used_psk(idClientDiff(s_92),ipsk,safe)) && event2(Selected_one_time_used_psk(idP_13,ipsk2,safe2_1),Selected_one_time_used_psk(idP_13,ipsk,safe)) ==> idP_13 = idClientDiff(s_92)
restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk1,ipsk2],choice[safe1_1,safe2_1])) ==> safe1_1 = true && safe2_1 = true encoded as event2(Selected_one_time_used_psk(idClientDiff(s_92),ipsk1,safe1_1),Selected_one_time_used_psk(idClientDiff(s_92),ipsk2,safe2_1)) ==> safe1_1 = true && safe2_1 = true
in biprocess 1.
-- Restriction event(ClientSequenceClientDataWriteKey(idP_13,st_16,i_7)) && event(ClientSequenceClientDataWriteKey(idP_13,st',i_7)) ==> st_16 = st'; event(ClientSequenceServerDataWriteKey(idP_13,st_16,i_7)) && event(ClientSequenceServerDataWriteKey(idP_13,st',i_7)) ==> st_16 = st'; event(ServerSequenceServerDataWriteKey(idP_13,st_16,i_7)) && event(ServerSequenceServerDataWriteKey(idP_13,st',i_7)) ==> st_16 = st'; event(ServerSequenceClientDataWriteKey(idP_13,st_16,i_7)) && event(ServerSequenceClientDataWriteKey(idP_13,st',i_7)) ==> st_16 = st'
Encoding: 
restriction event(ClientSequenceClientDataWriteKey(idP_13,st_16,i_7)) && event(ClientSequenceClientDataWriteKey(idP_13,st',i_7)) ==> st_16 = st' encoded as event2(ClientSequenceClientDataWriteKey(idP_13,st_16,i_7),ClientSequenceClientDataWriteKey(idP_13,st_16,i_7)) && event2(ClientSequenceClientDataWriteKey(idP_13,st',i_7),ClientSequenceClientDataWriteKey(idP_13,st',i_7)) ==> st_16 = st'
restriction event(ClientSequenceServerDataWriteKey(idP_13,st_16,i_7)) && event(ClientSequenceServerDataWriteKey(idP_13,st',i_7)) ==> st_16 = st' encoded as event2(ClientSequenceServerDataWriteKey(idP_13,st_16,i_7),ClientSequenceServerDataWriteKey(idP_13,st_16,i_7)) && event2(ClientSequenceServerDataWriteKey(idP_13,st',i_7),ClientSequenceServerDataWriteKey(idP_13,st',i_7)) ==> st_16 = st'
restriction event(ServerSequenceServerDataWriteKey(idP_13,st_16,i_7)) && event(ServerSequenceServerDataWriteKey(idP_13,st',i_7)) ==> st_16 = st' encoded as event2(ServerSequenceServerDataWriteKey(idP_13,st_16,i_7),ServerSequenceServerDataWriteKey(idP_13,st_16,i_7)) && event2(ServerSequenceServerDataWriteKey(idP_13,st',i_7),ServerSequenceServerDataWriteKey(idP_13,st',i_7)) ==> st_16 = st'
restriction event(ServerSequenceClientDataWriteKey(idP_13,st_16,i_7)) && event(ServerSequenceClientDataWriteKey(idP_13,st',i_7)) ==> st_16 = st' encoded as event2(ServerSequenceClientDataWriteKey(idP_13,st_16,i_7),ServerSequenceClientDataWriteKey(idP_13,st_16,i_7)) && event2(ServerSequenceClientDataWriteKey(idP_13,st',i_7),ServerSequenceClientDataWriteKey(idP_13,st',i_7)) ==> st_16 = st'
in biprocess 1.
-- Diff-equivalence in biprocess 1.
Translating the process into Horn clauses...
Termination warning: v_969 ≠ v_970 && attacker2(v_971,v_969) && attacker2(v_971,v_970) -> bad
Selecting 0
Termination warning: v_969 ≠ v_970 && attacker2(v_969,v_971) && attacker2(v_970,v_971) -> bad
Selecting 0
Completing...
200 rules inserted. Base: 200 rules (87 with conclusion selected). Queue: 12716 rules.
400 rules inserted. Base: 400 rules (106 with conclusion selected). Queue: 12516 rules.
Termination warning: v_969 ≠ v_970 && attacker2(v_971,v_969) && attacker2(v_971,v_970) -> bad
Selecting 0
Warning of non termination (Selected):
attacker2(v_969,v_970)
v_970 ≠ v_971 && attacker2(v_969,v_970) && attacker2(v_969,v_971) -> bad
Termination warning: v_969 ≠ v_970 && attacker2(v_969,v_971) && attacker2(v_970,v_971) -> bad
Selecting 0
Warning of non termination (Selected):
attacker2(v_969,v_970)
v_969 ≠ v_971 && attacker2(v_969,v_970) && attacker2(v_971,v_970) -> bad
600 rules inserted. Base: 600 rules (138 with conclusion selected). Queue: 12354 rules.
800 rules inserted. Base: 800 rules (138 with conclusion selected). Queue: 12154 rules.
1000 rules inserted. Base: 1000 rules (138 with conclusion selected). Queue: 11954 rules.
1200 rules inserted. Base: 1200 rules (138 with conclusion selected). Queue: 11754 rules.
1400 rules inserted. Base: 1400 rules (138 with conclusion selected). Queue: 11554 rules.
1600 rules inserted. Base: 1600 rules (138 with conclusion selected). Queue: 11354 rules.
1800 rules inserted. Base: 1800 rules (138 with conclusion selected). Queue: 11154 rules.
2000 rules inserted. Base: 2000 rules (138 with conclusion selected). Queue: 10954 rules.
2200 rules inserted. Base: 2200 rules (138 with conclusion selected). Queue: 10754 rules.
2400 rules inserted. Base: 2400 rules (139 with conclusion selected). Queue: 10556 rules.
2600 rules inserted. Base: 2600 rules (139 with conclusion selected). Queue: 10356 rules.
2800 rules inserted. Base: 2800 rules (139 with conclusion selected). Queue: 10156 rules.
3000 rules inserted. Base: 3000 rules (141 with conclusion selected). Queue: 9994 rules.
3200 rules inserted. Base: 3200 rules (141 with conclusion selected). Queue: 9794 rules.
3400 rules inserted. Base: 3400 rules (141 with conclusion selected). Queue: 9594 rules.
3600 rules inserted. Base: 3600 rules (141 with conclusion selected). Queue: 9394 rules.
3800 rules inserted. Base: 3800 rules (141 with conclusion selected). Queue: 9194 rules.
4000 rules inserted. Base: 4000 rules (141 with conclusion selected). Queue: 8994 rules.
4200 rules inserted. Base: 4200 rules (141 with conclusion selected). Queue: 8794 rules.
4400 rules inserted. Base: 4400 rules (141 with conclusion selected). Queue: 8594 rules.
4600 rules inserted. Base: 4600 rules (141 with conclusion selected). Queue: 8394 rules.
4800 rules inserted. Base: 4800 rules (141 with conclusion selected). Queue: 8194 rules.
5000 rules inserted. Base: 5000 rules (141 with conclusion selected). Queue: 7994 rules.
5200 rules inserted. Base: 5200 rules (141 with conclusion selected). Queue: 7794 rules.
5400 rules inserted. Base: 5400 rules (141 with conclusion selected). Queue: 7594 rules.
5600 rules inserted. Base: 5600 rules (141 with conclusion selected). Queue: 7394 rules.
5800 rules inserted. Base: 5800 rules (141 with conclusion selected). Queue: 7194 rules.
6000 rules inserted. Base: 6000 rules (141 with conclusion selected). Queue: 6994 rules.
6200 rules inserted. Base: 6200 rules (141 with conclusion selected). Queue: 6794 rules.
6400 rules inserted. Base: 6400 rules (141 with conclusion selected). Queue: 6594 rules.
6600 rules inserted. Base: 6600 rules (141 with conclusion selected). Queue: 6394 rules.
6800 rules inserted. Base: 6800 rules (141 with conclusion selected). Queue: 6194 rules.
7000 rules inserted. Base: 7000 rules (141 with conclusion selected). Queue: 5994 rules.
7200 rules inserted. Base: 7200 rules (141 with conclusion selected). Queue: 5794 rules.
7400 rules inserted. Base: 7400 rules (141 with conclusion selected). Queue: 5594 rules.
7600 rules inserted. Base: 7600 rules (141 with conclusion selected). Queue: 5394 rules.
7800 rules inserted. Base: 7800 rules (141 with conclusion selected). Queue: 5194 rules.
8000 rules inserted. Base: 8000 rules (141 with conclusion selected). Queue: 4994 rules.
8200 rules inserted. Base: 8200 rules (141 with conclusion selected). Queue: 4794 rules.
8400 rules inserted. Base: 8400 rules (141 with conclusion selected). Queue: 4594 rules.
8600 rules inserted. Base: 8600 rules (141 with conclusion selected). Queue: 4394 rules.
8800 rules inserted. Base: 8800 rules (141 with conclusion selected). Queue: 4194 rules.
9000 rules inserted. Base: 9000 rules (141 with conclusion selected). Queue: 3994 rules.
9200 rules inserted. Base: 9200 rules (141 with conclusion selected). Queue: 3794 rules.
9400 rules inserted. Base: 9400 rules (141 with conclusion selected). Queue: 3594 rules.
9600 rules inserted. Base: 9600 rules (141 with conclusion selected). Queue: 3394 rules.
9800 rules inserted. Base: 9800 rules (141 with conclusion selected). Queue: 3194 rules.
10000 rules inserted. Base: 10000 rules (141 with conclusion selected). Queue: 2994 rules.
10200 rules inserted. Base: 10200 rules (141 with conclusion selected). Queue: 2794 rules.
10400 rules inserted. Base: 10400 rules (141 with conclusion selected). Queue: 2594 rules.
10600 rules inserted. Base: 10600 rules (141 with conclusion selected). Queue: 2394 rules.
10800 rules inserted. Base: 10800 rules (141 with conclusion selected). Queue: 2194 rules.
11000 rules inserted. Base: 11000 rules (141 with conclusion selected). Queue: 1994 rules.
11200 rules inserted. Base: 11200 rules (141 with conclusion selected). Queue: 1794 rules.
11400 rules inserted. Base: 11400 rules (141 with conclusion selected). Queue: 1594 rules.
11600 rules inserted. Base: 11600 rules (141 with conclusion selected). Queue: 1394 rules.
11800 rules inserted. Base: 11800 rules (141 with conclusion selected). Queue: 1194 rules.
12000 rules inserted. Base: 12000 rules (141 with conclusion selected). Queue: 994 rules.
12200 rules inserted. Base: 12200 rules (142 with conclusion selected). Queue: 868 rules.
12400 rules inserted. Base: 12400 rules (143 with conclusion selected). Queue: 774 rules.
12600 rules inserted. Base: 12600 rules (144 with conclusion selected). Queue: 624 rules.
12800 rules inserted. Base: 12800 rules (152 with conclusion selected). Queue: 554 rules.
13000 rules inserted. Base: 13000 rules (162 with conclusion selected). Queue: 439 rules.
13200 rules inserted. Base: 13200 rules (162 with conclusion selected). Queue: 241 rules.
13400 rules inserted. Base: 13400 rules (194 with conclusion selected). Queue: 509 rules.
13600 rules inserted. Base: 13600 rules (215 with conclusion selected). Queue: 1053 rules.
13800 rules inserted. Base: 13800 rules (265 with conclusion selected). Queue: 1256 rules.
14000 rules inserted. Base: 14000 rules (287 with conclusion selected). Queue: 1322 rules.
14200 rules inserted. Base: 14200 rules (287 with conclusion selected). Queue: 1122 rules.
14400 rules inserted. Base: 14400 rules (287 with conclusion selected). Queue: 922 rules.
14600 rules inserted. Base: 14586 rules (308 with conclusion selected). Queue: 972 rules.
14800 rules inserted. Base: 14754 rules (384 with conclusion selected). Queue: 1175 rules.
15000 rules inserted. Base: 14920 rules (468 with conclusion selected). Queue: 1403 rules.
15200 rules inserted. Base: 15071 rules (540 with conclusion selected). Queue: 1636 rules.
15400 rules inserted. Base: 15248 rules (622 with conclusion selected). Queue: 1926 rules.
15600 rules inserted. Base: 15402 rules (655 with conclusion selected). Queue: 2125 rules.
15800 rules inserted. Base: 15590 rules (703 with conclusion selected). Queue: 2234 rules.
16000 rules inserted. Base: 15776 rules (746 with conclusion selected). Queue: 2424 rules.
16200 rules inserted. Base: 15946 rules (792 with conclusion selected). Queue: 2528 rules.
16400 rules inserted. Base: 16134 rules (830 with conclusion selected). Queue: 2675 rules.
16600 rules inserted. Base: 16306 rules (881 with conclusion selected). Queue: 2866 rules.
16800 rules inserted. Base: 16492 rules (918 with conclusion selected). Queue: 3008 rules.
17000 rules inserted. Base: 16666 rules (970 with conclusion selected). Queue: 3204 rules.
17200 rules inserted. Base: 16854 rules (1014 with conclusion selected). Queue: 3458 rules.
17400 rules inserted. Base: 17036 rules (1110 with conclusion selected). Queue: 3748 rules.
17600 rules inserted. Base: 17210 rules (1134 with conclusion selected). Queue: 3726 rules.
17800 rules inserted. Base: 17384 rules (1156 with conclusion selected). Queue: 3866 rules.
18000 rules inserted. Base: 17580 rules (1162 with conclusion selected). Queue: 3886 rules.
18200 rules inserted. Base: 17780 rules (1168 with conclusion selected). Queue: 3862 rules.
18400 rules inserted. Base: 17970 rules (1170 with conclusion selected). Queue: 3844 rules.
18600 rules inserted. Base: 18152 rules (1198 with conclusion selected). Queue: 4022 rules.
18800 rules inserted. Base: 18348 rules (1199 with conclusion selected). Queue: 3996 rules.
19000 rules inserted. Base: 18548 rules (1206 with conclusion selected). Queue: 3978 rules.
19200 rules inserted. Base: 18720 rules (1208 with conclusion selected). Queue: 3973 rules.
19400 rules inserted. Base: 18920 rules (1230 with conclusion selected). Queue: 4116 rules.
19600 rules inserted. Base: 19120 rules (1234 with conclusion selected). Queue: 4088 rules.
19800 rules inserted. Base: 19310 rules (1238 with conclusion selected). Queue: 4063 rules.
20000 rules inserted. Base: 19492 rules (1262 with conclusion selected). Queue: 4233 rules.
20200 rules inserted. Base: 19692 rules (1262 with conclusion selected). Queue: 4200 rules.
20400 rules inserted. Base: 19892 rules (1270 with conclusion selected). Queue: 4184 rules.
20600 rules inserted. Base: 20070 rules (1270 with conclusion selected). Queue: 4084 rules.
20800 rules inserted. Base: 20270 rules (1288 with conclusion selected). Queue: 4166 rules.
21000 rules inserted. Base: 20454 rules (1306 with conclusion selected). Queue: 4242 rules.
21200 rules inserted. Base: 20654 rules (1330 with conclusion selected). Queue: 4373 rules.
21400 rules inserted. Base: 20813 rules (1338 with conclusion selected). Queue: 4578 rules.
21600 rules inserted. Base: 20983 rules (1338 with conclusion selected). Queue: 4554 rules.
21800 rules inserted. Base: 21182 rules (1338 with conclusion selected). Queue: 4524 rules.
22000 rules inserted. Base: 21379 rules (1338 with conclusion selected). Queue: 4489 rules.
22200 rules inserted. Base: 21565 rules (1338 with conclusion selected). Queue: 4458 rules.
22400 rules inserted. Base: 21735 rules (1338 with conclusion selected). Queue: 4428 rules.
22600 rules inserted. Base: 21935 rules (1338 with conclusion selected). Queue: 4400 rules.
22800 rules inserted. Base: 22131 rules (1338 with conclusion selected). Queue: 4366 rules.
23000 rules inserted. Base: 22331 rules (1338 with conclusion selected). Queue: 4330 rules.
23200 rules inserted. Base: 22487 rules (1338 with conclusion selected). Queue: 4298 rules.
23400 rules inserted. Base: 22687 rules (1338 with conclusion selected). Queue: 4276 rules.
23600 rules inserted. Base: 22879 rules (1338 with conclusion selected). Queue: 4230 rules.
23800 rules inserted. Base: 23079 rules (1338 with conclusion selected). Queue: 4192 rules.
24000 rules inserted. Base: 23235 rules (1338 with conclusion selected). Queue: 4160 rules.
24200 rules inserted. Base: 23435 rules (1338 with conclusion selected). Queue: 4136 rules.
24400 rules inserted. Base: 23627 rules (1338 with conclusion selected). Queue: 4092 rules.
24600 rules inserted. Base: 23827 rules (1338 with conclusion selected). Queue: 4056 rules.
24800 rules inserted. Base: 24001 rules (1338 with conclusion selected). Queue: 4068 rules.
25000 rules inserted. Base: 24201 rules (1338 with conclusion selected). Queue: 4038 rules.
25200 rules inserted. Base: 24379 rules (1338 with conclusion selected). Queue: 4006 rules.
25400 rules inserted. Base: 24579 rules (1338 with conclusion selected). Queue: 3978 rules.
25600 rules inserted. Base: 24779 rules (1338 with conclusion selected). Queue: 3942 rules.
25800 rules inserted. Base: 24973 rules (1338 with conclusion selected). Queue: 3815 rules.
26000 rules inserted. Base: 25138 rules (1341 with conclusion selected). Queue: 3954 rules.
26200 rules inserted. Base: 25330 rules (1344 with conclusion selected). Queue: 3918 rules.
26400 rules inserted. Base: 25530 rules (1344 with conclusion selected). Queue: 3895 rules.
26600 rules inserted. Base: 25730 rules (1344 with conclusion selected). Queue: 3871 rules.
26800 rules inserted. Base: 25902 rules (1350 with conclusion selected). Queue: 3896 rules.
27000 rules inserted. Base: 26102 rules (1350 with conclusion selected). Queue: 3854 rules.
27200 rules inserted. Base: 26302 rules (1350 with conclusion selected). Queue: 3836 rules.
27400 rules inserted. Base: 26502 rules (1350 with conclusion selected). Queue: 3816 rules.
27600 rules inserted. Base: 26702 rules (1374 with conclusion selected). Queue: 3863 rules.
27800 rules inserted. Base: 26902 rules (1374 with conclusion selected). Queue: 3835 rules.
28000 rules inserted. Base: 27102 rules (1374 with conclusion selected). Queue: 3811 rules.
28200 rules inserted. Base: 27302 rules (1398 with conclusion selected). Queue: 3870 rules.
28400 rules inserted. Base: 27502 rules (1398 with conclusion selected). Queue: 3833 rules.
28600 rules inserted. Base: 27702 rules (1398 with conclusion selected). Queue: 3804 rules.
28800 rules inserted. Base: 27883 rules (1398 with conclusion selected). Queue: 3796 rules.
29000 rules inserted. Base: 28083 rules (1398 with conclusion selected). Queue: 3756 rules.
29200 rules inserted. Base: 28277 rules (1410 with conclusion selected). Queue: 3738 rules.
29400 rules inserted. Base: 28477 rules (1410 with conclusion selected). Queue: 3698 rules.
29600 rules inserted. Base: 28677 rules (1410 with conclusion selected). Queue: 3684 rules.
29800 rules inserted. Base: 28820 rules (1410 with conclusion selected). Queue: 3525 rules.
30000 rules inserted. Base: 28971 rules (1413 with conclusion selected). Queue: 3476 rules.
30200 rules inserted. Base: 29165 rules (1413 with conclusion selected). Queue: 3458 rules.
30400 rules inserted. Base: 29337 rules (1413 with conclusion selected). Queue: 3444 rules.
30600 rules inserted. Base: 29498 rules (1413 with conclusion selected). Queue: 3392 rules.
30800 rules inserted. Base: 29682 rules (1416 with conclusion selected). Queue: 3393 rules.
31000 rules inserted. Base: 29848 rules (1416 with conclusion selected). Queue: 3373 rules.
31200 rules inserted. Base: 30015 rules (1416 with conclusion selected). Queue: 3355 rules.
31400 rules inserted. Base: 30206 rules (1428 with conclusion selected). Queue: 3363 rules.
31600 rules inserted. Base: 30382 rules (1428 with conclusion selected). Queue: 3346 rules.
31800 rules inserted. Base: 30566 rules (1428 with conclusion selected). Queue: 3327 rules.
32000 rules inserted. Base: 30734 rules (1440 with conclusion selected). Queue: 3331 rules.
32200 rules inserted. Base: 30928 rules (1440 with conclusion selected). Queue: 3314 rules.
32400 rules inserted. Base: 31104 rules (1440 with conclusion selected). Queue: 3299 rules.
32600 rules inserted. Base: 31272 rules (1440 with conclusion selected). Queue: 3231 rules.
32800 rules inserted. Base: 31472 rules (1440 with conclusion selected). Queue: 3219 rules.
33000 rules inserted. Base: 31666 rules (1446 with conclusion selected). Queue: 3287 rules.
33200 rules inserted. Base: 31866 rules (1446 with conclusion selected). Queue: 3279 rules.
33400 rules inserted. Base: 32026 rules (1449 with conclusion selected). Queue: 3206 rules.
33600 rules inserted. Base: 32177 rules (1449 with conclusion selected). Queue: 3192 rules.
33800 rules inserted. Base: 32345 rules (1449 with conclusion selected). Queue: 3142 rules.
34000 rules inserted. Base: 32501 rules (1450 with conclusion selected). Queue: 3101 rules.
34200 rules inserted. Base: 32659 rules (1450 with conclusion selected). Queue: 3085 rules.
34400 rules inserted. Base: 32827 rules (1450 with conclusion selected). Queue: 3033 rules.
34600 rules inserted. Base: 32984 rules (1451 with conclusion selected). Queue: 2991 rules.
34800 rules inserted. Base: 33158 rules (1451 with conclusion selected). Queue: 2948 rules.
35000 rules inserted. Base: 33326 rules (1451 with conclusion selected). Queue: 2903 rules.
35200 rules inserted. Base: 33485 rules (1452 with conclusion selected). Queue: 2859 rules.
35400 rules inserted. Base: 33661 rules (1452 with conclusion selected). Queue: 2811 rules.
35600 rules inserted. Base: 33829 rules (1452 with conclusion selected). Queue: 2773 rules.
35800 rules inserted. Base: 33974 rules (1453 with conclusion selected). Queue: 2742 rules.
36000 rules inserted. Base: 34134 rules (1453 with conclusion selected). Queue: 2712 rules.
36200 rules inserted. Base: 34309 rules (1453 with conclusion selected). Queue: 2633 rules.
36400 rules inserted. Base: 34467 rules (1453 with conclusion selected). Queue: 2594 rules.
36600 rules inserted. Base: 34597 rules (1452 with conclusion selected). Queue: 2558 rules.
36800 rules inserted. Base: 34772 rules (1470 with conclusion selected). Queue: 2536 rules.
37000 rules inserted. Base: 34923 rules (1470 with conclusion selected). Queue: 2512 rules.
37200 rules inserted. Base: 35081 rules (1488 with conclusion selected). Queue: 2511 rules.
37400 rules inserted. Base: 35233 rules (1488 with conclusion selected). Queue: 2464 rules.
37600 rules inserted. Base: 35383 rules (1488 with conclusion selected). Queue: 2438 rules.
37800 rules inserted. Base: 35567 rules (1488 with conclusion selected). Queue: 2372 rules.
38000 rules inserted. Base: 35723 rules (1488 with conclusion selected). Queue: 2352 rules.
38200 rules inserted. Base: 35882 rules (1488 with conclusion selected). Queue: 2300 rules.
38400 rules inserted. Base: 36043 rules (1488 with conclusion selected). Queue: 2258 rules.
38600 rules inserted. Base: 36207 rules (1500 with conclusion selected). Queue: 2245 rules.
38800 rules inserted. Base: 36382 rules (1500 with conclusion selected). Queue: 2195 rules.
39000 rules inserted. Base: 36554 rules (1500 with conclusion selected). Queue: 2147 rules.
39200 rules inserted. Base: 36696 rules (1502 with conclusion selected). Queue: 2084 rules.
39400 rules inserted. Base: 36848 rules (1511 with conclusion selected). Queue: 2128 rules.
39600 rules inserted. Base: 36999 rules (1511 with conclusion selected). Queue: 2087 rules.
39800 rules inserted. Base: 37152 rules (1520 with conclusion selected). Queue: 2120 rules.
40000 rules inserted. Base: 37311 rules (1522 with conclusion selected). Queue: 2103 rules.
40200 rules inserted. Base: 37466 rules (1526 with conclusion selected). Queue: 2081 rules.
40400 rules inserted. Base: 37632 rules (1533 with conclusion selected). Queue: 2084 rules.
40600 rules inserted. Base: 37786 rules (1536 with conclusion selected). Queue: 2086 rules.
40800 rules inserted. Base: 37942 rules (1541 with conclusion selected). Queue: 2100 rules.
41000 rules inserted. Base: 38069 rules (1542 with conclusion selected). Queue: 2083 rules.
41200 rules inserted. Base: 38209 rules (1545 with conclusion selected). Queue: 2068 rules.
41400 rules inserted. Base: 38369 rules (1549 with conclusion selected). Queue: 2028 rules.
41600 rules inserted. Base: 38516 rules (1549 with conclusion selected). Queue: 2010 rules.
41800 rules inserted. Base: 38665 rules (1549 with conclusion selected). Queue: 1965 rules.
42000 rules inserted. Base: 38811 rules (1549 with conclusion selected). Queue: 1939 rules.
42200 rules inserted. Base: 38951 rules (1555 with conclusion selected). Queue: 1930 rules.
42400 rules inserted. Base: 39101 rules (1555 with conclusion selected). Queue: 1911 rules.
42600 rules inserted. Base: 39241 rules (1561 with conclusion selected). Queue: 1901 rules.
42800 rules inserted. Base: 39376 rules (1561 with conclusion selected). Queue: 1887 rules.
43000 rules inserted. Base: 39550 rules (1563 with conclusion selected). Queue: 1854 rules.
43200 rules inserted. Base: 39706 rules (1567 with conclusion selected). Queue: 1842 rules.
43400 rules inserted. Base: 39851 rules (1567 with conclusion selected). Queue: 1827 rules.
43600 rules inserted. Base: 39988 rules (1569 with conclusion selected). Queue: 1811 rules.
43800 rules inserted. Base: 40126 rules (1571 with conclusion selected). Queue: 1790 rules.
44000 rules inserted. Base: 40256 rules (1573 with conclusion selected). Queue: 1776 rules.
44200 rules inserted. Base: 40407 rules (1573 with conclusion selected). Queue: 1714 rules.
44400 rules inserted. Base: 40534 rules (1573 with conclusion selected). Queue: 1678 rules.
44600 rules inserted. Base: 40683 rules (1573 with conclusion selected). Queue: 1626 rules.
44800 rules inserted. Base: 40825 rules (1573 with conclusion selected). Queue: 1579 rules.
45000 rules inserted. Base: 40955 rules (1573 with conclusion selected). Queue: 1523 rules.
45200 rules inserted. Base: 41098 rules (1578 with conclusion selected). Queue: 1490 rules.
45400 rules inserted. Base: 41247 rules (1578 with conclusion selected). Queue: 1450 rules.
45600 rules inserted. Base: 41402 rules (1581 with conclusion selected). Queue: 1418 rules.
45800 rules inserted. Base: 41520 rules (1581 with conclusion selected). Queue: 1369 rules.
46000 rules inserted. Base: 41637 rules (1587 with conclusion selected). Queue: 1364 rules.
46200 rules inserted. Base: 41737 rules (1593 with conclusion selected). Queue: 1361 rules.
46400 rules inserted. Base: 41881 rules (1595 with conclusion selected). Queue: 1329 rules.
46600 rules inserted. Base: 42028 rules (1599 with conclusion selected). Queue: 1331 rules.
46800 rules inserted. Base: 42145 rules (1612 with conclusion selected). Queue: 1371 rules.
47000 rules inserted. Base: 42245 rules (1628 with conclusion selected). Queue: 1457 rules.
47200 rules inserted. Base: 42334 rules (1642 with conclusion selected). Queue: 1543 rules.
47400 rules inserted. Base: 42421 rules (1653 with conclusion selected). Queue: 1601 rules.
47600 rules inserted. Base: 42524 rules (1664 with conclusion selected). Queue: 1641 rules.
47800 rules inserted. Base: 42626 rules (1673 with conclusion selected). Queue: 1670 rules.
48000 rules inserted. Base: 42757 rules (1677 with conclusion selected). Queue: 1640 rules.
48200 rules inserted. Base: 42896 rules (1681 with conclusion selected). Queue: 1604 rules.
48400 rules inserted. Base: 43039 rules (1691 with conclusion selected). Queue: 1635 rules.
48600 rules inserted. Base: 43178 rules (1697 with conclusion selected). Queue: 1622 rules.
48800 rules inserted. Base: 43321 rules (1714 with conclusion selected). Queue: 1692 rules.
49000 rules inserted. Base: 43468 rules (1736 with conclusion selected). Queue: 1762 rules.
49200 rules inserted. Base: 43615 rules (1757 with conclusion selected). Queue: 1838 rules.
49400 rules inserted. Base: 43762 rules (1763 with conclusion selected). Queue: 1826 rules.
49600 rules inserted. Base: 43885 rules (1766 with conclusion selected). Queue: 1840 rules.
49800 rules inserted. Base: 43994 rules (1780 with conclusion selected). Queue: 1913 rules.
50000 rules inserted. Base: 44129 rules (1788 with conclusion selected). Queue: 1965 rules.
50200 rules inserted. Base: 44264 rules (1802 with conclusion selected). Queue: 2030 rules.
50400 rules inserted. Base: 44431 rules (1827 with conclusion selected). Queue: 2171 rules.
50600 rules inserted. Base: 44599 rules (1855 with conclusion selected). Queue: 2313 rules.
50800 rules inserted. Base: 44765 rules (1874 with conclusion selected). Queue: 2398 rules.
51000 rules inserted. Base: 44933 rules (1908 with conclusion selected). Queue: 2594 rules.
51200 rules inserted. Base: 45085 rules (1916 with conclusion selected). Queue: 2644 rules.
51400 rules inserted. Base: 45228 rules (1970 with conclusion selected). Queue: 3109 rules.
51600 rules inserted. Base: 45338 rules (1984 with conclusion selected). Queue: 3182 rules.
51800 rules inserted. Base: 45476 rules (1992 with conclusion selected). Queue: 3220 rules.
52000 rules inserted. Base: 45601 rules (1999 with conclusion selected). Queue: 3255 rules.
52200 rules inserted. Base: 45745 rules (2009 with conclusion selected). Queue: 3287 rules.
52400 rules inserted. Base: 45892 rules (2017 with conclusion selected). Queue: 3327 rules.
52600 rules inserted. Base: 46062 rules (2017 with conclusion selected). Queue: 3261 rules.
52800 rules inserted. Base: 46211 rules (2023 with conclusion selected). Queue: 3235 rules.
53000 rules inserted. Base: 46367 rules (2029 with conclusion selected). Queue: 3244 rules.
53200 rules inserted. Base: 46528 rules (2033 with conclusion selected). Queue: 3229 rules.
53400 rules inserted. Base: 46687 rules (2033 with conclusion selected). Queue: 3169 rules.
53600 rules inserted. Base: 46838 rules (2041 with conclusion selected). Queue: 3161 rules.
53800 rules inserted. Base: 46985 rules (2049 with conclusion selected). Queue: 3203 rules.
54000 rules inserted. Base: 47135 rules (2059 with conclusion selected). Queue: 3231 rules.
54200 rules inserted. Base: 47287 rules (2067 with conclusion selected). Queue: 3237 rules.
54400 rules inserted. Base: 47443 rules (2067 with conclusion selected). Queue: 3165 rules.
54600 rules inserted. Base: 47595 rules (2083 with conclusion selected). Queue: 3239 rules.
54800 rules inserted. Base: 47732 rules (2089 with conclusion selected). Queue: 3265 rules.
55000 rules inserted. Base: 47853 rules (2089 with conclusion selected). Queue: 3231 rules.
55200 rules inserted. Base: 47959 rules (2089 with conclusion selected). Queue: 3175 rules.
55400 rules inserted. Base: 48138 rules (2092 with conclusion selected). Queue: 3190 rules.
55600 rules inserted. Base: 48256 rules (2092 with conclusion selected). Queue: 3152 rules.
55800 rules inserted. Base: 48352 rules (2092 with conclusion selected). Queue: 3087 rules.
56000 rules inserted. Base: 48535 rules (2092 with conclusion selected). Queue: 3033 rules.
56200 rules inserted. Base: 48656 rules (2092 with conclusion selected). Queue: 2992 rules.
56400 rules inserted. Base: 48756 rules (2092 with conclusion selected). Queue: 2939 rules.
56600 rules inserted. Base: 48939 rules (2092 with conclusion selected). Queue: 2869 rules.
56800 rules inserted. Base: 49062 rules (2092 with conclusion selected). Queue: 2830 rules.
57000 rules inserted. Base: 49186 rules (2096 with conclusion selected). Queue: 2834 rules.
57200 rules inserted. Base: 49370 rules (2096 with conclusion selected). Queue: 2804 rules.
57400 rules inserted. Base: 49542 rules (2096 with conclusion selected). Queue: 2721 rules.
57600 rules inserted. Base: 49718 rules (2096 with conclusion selected). Queue: 2674 rules.
57800 rules inserted. Base: 49885 rules (2097 with conclusion selected). Queue: 2653 rules.
58000 rules inserted. Base: 50039 rules (2126 with conclusion selected). Queue: 2858 rules.
58200 rules inserted. Base: 50167 rules (2134 with conclusion selected). Queue: 2880 rules.
58400 rules inserted. Base: 50318 rules (2163 with conclusion selected). Queue: 3085 rules.
58600 rules inserted. Base: 50445 rules (2171 with conclusion selected). Queue: 3107 rules.
58800 rules inserted. Base: 50542 rules (2171 with conclusion selected). Queue: 3107 rules.
59000 rules inserted. Base: 50694 rules (2171 with conclusion selected). Queue: 3068 rules.
59200 rules inserted. Base: 50814 rules (2171 with conclusion selected). Queue: 3068 rules.
59400 rules inserted. Base: 50932 rules (2171 with conclusion selected). Queue: 3029 rules.
59600 rules inserted. Base: 51047 rules (2171 with conclusion selected). Queue: 3029 rules.
59800 rules inserted. Base: 51194 rules (2187 with conclusion selected). Queue: 3169 rules.
60000 rules inserted. Base: 51327 rules (2196 with conclusion selected). Queue: 3248 rules.
60200 rules inserted. Base: 51494 rules (2198 with conclusion selected). Queue: 3224 rules.
60400 rules inserted. Base: 51611 rules (2198 with conclusion selected). Queue: 3224 rules.
60600 rules inserted. Base: 51780 rules (2206 with conclusion selected). Queue: 3209 rules.
60800 rules inserted. Base: 51919 rules (2206 with conclusion selected). Queue: 3141 rules.
61000 rules inserted. Base: 52041 rules (2214 with conclusion selected). Queue: 3133 rules.
61200 rules inserted. Base: 52137 rules (2218 with conclusion selected). Queue: 3121 rules.
61400 rules inserted. Base: 52298 rules (2222 with conclusion selected). Queue: 3071 rules.
61600 rules inserted. Base: 52413 rules (2222 with conclusion selected). Queue: 3039 rules.
61800 rules inserted. Base: 52483 rules (2230 with conclusion selected). Queue: 3031 rules.
62000 rules inserted. Base: 52581 rules (2236 with conclusion selected). Queue: 3024 rules.
62200 rules inserted. Base: 52647 rules (2242 with conclusion selected). Queue: 3033 rules.
62400 rules inserted. Base: 52753 rules (2248 with conclusion selected). Queue: 3025 rules.
62600 rules inserted. Base: 52820 rules (2254 with conclusion selected). Queue: 3030 rules.
62800 rules inserted. Base: 52965 rules (2254 with conclusion selected). Queue: 2982 rules.
63000 rules inserted. Base: 53099 rules (2254 with conclusion selected). Queue: 2916 rules.
63200 rules inserted. Base: 53173 rules (2254 with conclusion selected). Queue: 2912 rules.
63400 rules inserted. Base: 53253 rules (2254 with conclusion selected). Queue: 2874 rules.
63600 rules inserted. Base: 53328 rules (2253 with conclusion selected). Queue: 2855 rules.
63800 rules inserted. Base: 53484 rules (2253 with conclusion selected). Queue: 2754 rules.
64000 rules inserted. Base: 53620 rules (2253 with conclusion selected). Queue: 2684 rules.
64200 rules inserted. Base: 53744 rules (2253 with conclusion selected). Queue: 2630 rules.
64400 rules inserted. Base: 53900 rules (2253 with conclusion selected). Queue: 2524 rules.
64600 rules inserted. Base: 54040 rules (2253 with conclusion selected). Queue: 2457 rules.
64800 rules inserted. Base: 54168 rules (2256 with conclusion selected). Queue: 2435 rules.
65000 rules inserted. Base: 54310 rules (2262 with conclusion selected). Queue: 2423 rules.
65200 rules inserted. Base: 54439 rules (2265 with conclusion selected). Queue: 2372 rules.
65400 rules inserted. Base: 54580 rules (2271 with conclusion selected). Queue: 2367 rules.
65600 rules inserted. Base: 54704 rules (2277 with conclusion selected). Queue: 2351 rules.
65800 rules inserted. Base: 54863 rules (2277 with conclusion selected). Queue: 2255 rules.
66000 rules inserted. Base: 55001 rules (2277 with conclusion selected). Queue: 2196 rules.
66200 rules inserted. Base: 55123 rules (2277 with conclusion selected). Queue: 2156 rules.
66400 rules inserted. Base: 55231 rules (2277 with conclusion selected). Queue: 2126 rules.
66600 rules inserted. Base: 55338 rules (2279 with conclusion selected). Queue: 2063 rules.
66800 rules inserted. Base: 55423 rules (2279 with conclusion selected). Queue: 2017 rules.
67000 rules inserted. Base: 55543 rules (2279 with conclusion selected). Queue: 1948 rules.
67200 rules inserted. Base: 55627 rules (2279 with conclusion selected). Queue: 1912 rules.
67400 rules inserted. Base: 55750 rules (2279 with conclusion selected). Queue: 1869 rules.
67600 rules inserted. Base: 55857 rules (2279 with conclusion selected). Queue: 1822 rules.
67800 rules inserted. Base: 55980 rules (2279 with conclusion selected). Queue: 1780 rules.
68000 rules inserted. Base: 56085 rules (2281 with conclusion selected). Queue: 1732 rules.
68200 rules inserted. Base: 56223 rules (2281 with conclusion selected). Queue: 1671 rules.
68400 rules inserted. Base: 56317 rules (2281 with conclusion selected). Queue: 1624 rules.
68600 rules inserted. Base: 56391 rules (2286 with conclusion selected). Queue: 1610 rules.
68800 rules inserted. Base: 56564 rules (2286 with conclusion selected). Queue: 1543 rules.
69000 rules inserted. Base: 56703 rules (2286 with conclusion selected). Queue: 1482 rules.
69200 rules inserted. Base: 56835 rules (2298 with conclusion selected). Queue: 1473 rules.
69400 rules inserted. Base: 56973 rules (2306 with conclusion selected). Queue: 1449 rules.
69600 rules inserted. Base: 57072 rules (2310 with conclusion selected). Queue: 1425 rules.
69800 rules inserted. Base: 57235 rules (2313 with conclusion selected). Queue: 1366 rules.
70000 rules inserted. Base: 57401 rules (2313 with conclusion selected). Queue: 1306 rules.
70200 rules inserted. Base: 57530 rules (2323 with conclusion selected). Queue: 1297 rules.
70400 rules inserted. Base: 57586 rules (2323 with conclusion selected). Queue: 1229 rules.
70600 rules inserted. Base: 57688 rules (2335 with conclusion selected). Queue: 1171 rules.
70800 rules inserted. Base: 57736 rules (2335 with conclusion selected). Queue: 1119 rules.
71000 rules inserted. Base: 57812 rules (2347 with conclusion selected). Queue: 1089 rules.
71200 rules inserted. Base: 57914 rules (2348 with conclusion selected). Queue: 1013 rules.
71400 rules inserted. Base: 58028 rules (2358 with conclusion selected). Queue: 937 rules.
71600 rules inserted. Base: 58109 rules (2368 with conclusion selected). Queue: 968 rules.
71800 rules inserted. Base: 58194 rules (2384 with conclusion selected). Queue: 1012 rules.
72000 rules inserted. Base: 58293 rules (2402 with conclusion selected). Queue: 1077 rules.
72200 rules inserted. Base: 58384 rules (2422 with conclusion selected). Queue: 1169 rules.
72400 rules inserted. Base: 58507 rules (2423 with conclusion selected). Queue: 1148 rules.
72600 rules inserted. Base: 58570 rules (2441 with conclusion selected). Queue: 1168 rules.
72800 rules inserted. Base: 58673 rules (2474 with conclusion selected). Queue: 1311 rules.
73000 rules inserted. Base: 58834 rules (2533 with conclusion selected). Queue: 1579 rules.
73200 rules inserted. Base: 58957 rules (2576 with conclusion selected). Queue: 1780 rules.
73400 rules inserted. Base: 59071 rules (2619 with conclusion selected). Queue: 1992 rules.
73600 rules inserted. Base: 59167 rules (2625 with conclusion selected). Queue: 2018 rules.
73800 rules inserted. Base: 59271 rules (2657 with conclusion selected). Queue: 2261 rules.
74000 rules inserted. Base: 59418 rules (2680 with conclusion selected). Queue: 2413 rules.
74200 rules inserted. Base: 59600 rules (2686 with conclusion selected). Queue: 2323 rules.
74400 rules inserted. Base: 59759 rules (2695 with conclusion selected). Queue: 2297 rules.
74600 rules inserted. Base: 59923 rules (2714 with conclusion selected). Queue: 2365 rules.
74800 rules inserted. Base: 60092 rules (2719 with conclusion selected). Queue: 2298 rules.
75000 rules inserted. Base: 60249 rules (2728 with conclusion selected). Queue: 2269 rules.
75200 rules inserted. Base: 60435 rules (2734 with conclusion selected). Queue: 2188 rules.
75400 rules inserted. Base: 60547 rules (2759 with conclusion selected). Queue: 2312 rules.
75600 rules inserted. Base: 60643 rules (2767 with conclusion selected). Queue: 2313 rules.
75800 rules inserted. Base: 60823 rules (2771 with conclusion selected). Queue: 2283 rules.
76000 rules inserted. Base: 60985 rules (2771 with conclusion selected). Queue: 2261 rules.
76200 rules inserted. Base: 61165 rules (2775 with conclusion selected). Queue: 2231 rules.
76400 rules inserted. Base: 61332 rules (2775 with conclusion selected). Queue: 2217 rules.
76600 rules inserted. Base: 61504 rules (2779 with conclusion selected). Queue: 2209 rules.
76800 rules inserted. Base: 61677 rules (2779 with conclusion selected). Queue: 2189 rules.
77000 rules inserted. Base: 61849 rules (2779 with conclusion selected). Queue: 2177 rules.
77200 rules inserted. Base: 62020 rules (2780 with conclusion selected). Queue: 2160 rules.
77400 rules inserted. Base: 62197 rules (2783 with conclusion selected). Queue: 2151 rules.
77600 rules inserted. Base: 62381 rules (2783 with conclusion selected). Queue: 2135 rules.
77800 rules inserted. Base: 62522 rules (2791 with conclusion selected). Queue: 2140 rules.
78000 rules inserted. Base: 62563 rules (2805 with conclusion selected). Queue: 2175 rules.
78200 rules inserted. Base: 62698 rules (2814 with conclusion selected). Queue: 2256 rules.
78400 rules inserted. Base: 62760 rules (2821 with conclusion selected). Queue: 2265 rules.
78600 rules inserted. Base: 62911 rules (2825 with conclusion selected). Queue: 2329 rules.
78800 rules inserted. Base: 63073 rules (2825 with conclusion selected). Queue: 2311 rules.
79000 rules inserted. Base: 63230 rules (2825 with conclusion selected). Queue: 2307 rules.
79200 rules inserted. Base: 63381 rules (2829 with conclusion selected). Queue: 2371 rules.
79400 rules inserted. Base: 63544 rules (2829 with conclusion selected). Queue: 2353 rules.
79600 rules inserted. Base: 63700 rules (2829 with conclusion selected). Queue: 2349 rules.
79800 rules inserted. Base: 63845 rules (2837 with conclusion selected). Queue: 2455 rules.
80000 rules inserted. Base: 63953 rules (2853 with conclusion selected). Queue: 2595 rules.
80200 rules inserted. Base: 64049 rules (2865 with conclusion selected). Queue: 2585 rules.
80400 rules inserted. Base: 64237 rules (2873 with conclusion selected). Queue: 2671 rules.
80600 rules inserted. Base: 64369 rules (2885 with conclusion selected). Queue: 2654 rules.
80800 rules inserted. Base: 64521 rules (2893 with conclusion selected). Queue: 2741 rules.
81000 rules inserted. Base: 64689 rules (2904 with conclusion selected). Queue: 2721 rules.
81200 rules inserted. Base: 64853 rules (2907 with conclusion selected). Queue: 2699 rules.
81400 rules inserted. Base: 65037 rules (2915 with conclusion selected). Queue: 2770 rules.
81600 rules inserted. Base: 65212 rules (2928 with conclusion selected). Queue: 2787 rules.
81800 rules inserted. Base: 65375 rules (2931 with conclusion selected). Queue: 2779 rules.
82000 rules inserted. Base: 65553 rules (2935 with conclusion selected). Queue: 2776 rules.
82200 rules inserted. Base: 65739 rules (2944 with conclusion selected). Queue: 2863 rules.
82400 rules inserted. Base: 65907 rules (2962 with conclusion selected). Queue: 2941 rules.
82600 rules inserted. Base: 66047 rules (2972 with conclusion selected). Queue: 2993 rules.
82800 rules inserted. Base: 66117 rules (2973 with conclusion selected). Queue: 2965 rules.
83000 rules inserted. Base: 66307 rules (2973 with conclusion selected). Queue: 2935 rules.
83200 rules inserted. Base: 66434 rules (2973 with conclusion selected). Queue: 2883 rules.
83400 rules inserted. Base: 66545 rules (2974 with conclusion selected). Queue: 2873 rules.
83600 rules inserted. Base: 66725 rules (2974 with conclusion selected). Queue: 2842 rules.
83800 rules inserted. Base: 66925 rules (3034 with conclusion selected). Queue: 3346 rules.
84000 rules inserted. Base: 67095 rules (3085 with conclusion selected). Queue: 3814 rules.
84200 rules inserted. Base: 67285 rules (3085 with conclusion selected). Queue: 3785 rules.
84400 rules inserted. Base: 67465 rules (3125 with conclusion selected). Queue: 4101 rules.
84600 rules inserted. Base: 67635 rules (3176 with conclusion selected). Queue: 4571 rules.
84800 rules inserted. Base: 67825 rules (3196 with conclusion selected). Queue: 4728 rules.
85000 rules inserted. Base: 67998 rules (3196 with conclusion selected). Queue: 4697 rules.
85200 rules inserted. Base: 68170 rules (3196 with conclusion selected). Queue: 4667 rules.
85400 rules inserted. Base: 68350 rules (3197 with conclusion selected). Queue: 4620 rules.
85600 rules inserted. Base: 68498 rules (3205 with conclusion selected). Queue: 4645 rules.
85800 rules inserted. Base: 68557 rules (3205 with conclusion selected). Queue: 4647 rules.
86000 rules inserted. Base: 68754 rules (3205 with conclusion selected). Queue: 4609 rules.
86200 rules inserted. Base: 68804 rules (3205 with conclusion selected). Queue: 4617 rules.
86400 rules inserted. Base: 69002 rules (3205 with conclusion selected). Queue: 4579 rules.
86600 rules inserted. Base: 69169 rules (3205 with conclusion selected). Queue: 4513 rules.
86800 rules inserted. Base: 69339 rules (3205 with conclusion selected). Queue: 4454 rules.
87000 rules inserted. Base: 69506 rules (3205 with conclusion selected). Queue: 4391 rules.
87200 rules inserted. Base: 69653 rules (3205 with conclusion selected). Queue: 4369 rules.
87400 rules inserted. Base: 69803 rules (3205 with conclusion selected). Queue: 4297 rules.
87600 rules inserted. Base: 69989 rules (3205 with conclusion selected). Queue: 4247 rules.
87800 rules inserted. Base: 70155 rules (3205 with conclusion selected). Queue: 4191 rules.
88000 rules inserted. Base: 70343 rules (3205 with conclusion selected). Queue: 4157 rules.
88200 rules inserted. Base: 70517 rules (3205 with conclusion selected). Queue: 4092 rules.
88400 rules inserted. Base: 70679 rules (3205 with conclusion selected). Queue: 4027 rules.
88600 rules inserted. Base: 70851 rules (3205 with conclusion selected). Queue: 3972 rules.
88800 rules inserted. Base: 71003 rules (3205 with conclusion selected). Queue: 3936 rules.
89000 rules inserted. Base: 71145 rules (3205 with conclusion selected). Queue: 3877 rules.
89200 rules inserted. Base: 71333 rules (3205 with conclusion selected). Queue: 3827 rules.
89400 rules inserted. Base: 71495 rules (3205 with conclusion selected). Queue: 3767 rules.
89600 rules inserted. Base: 71683 rules (3205 with conclusion selected). Queue: 3731 rules.
89800 rules inserted. Base: 71865 rules (3205 with conclusion selected). Queue: 3699 rules.
90000 rules inserted. Base: 72033 rules (3205 with conclusion selected). Queue: 3687 rules.
90200 rules inserted. Base: 72191 rules (3206 with conclusion selected). Queue: 3679 rules.
90400 rules inserted. Base: 72288 rules (3218 with conclusion selected). Queue: 3761 rules.
90600 rules inserted. Base: 72442 rules (3219 with conclusion selected). Queue: 3752 rules.
90800 rules inserted. Base: 72536 rules (3231 with conclusion selected). Queue: 3822 rules.
91000 rules inserted. Base: 72696 rules (3231 with conclusion selected). Queue: 3814 rules.
91200 rules inserted. Base: 72818 rules (3232 with conclusion selected). Queue: 3768 rules.
91400 rules inserted. Base: 73000 rules (3237 with conclusion selected). Queue: 3762 rules.
91600 rules inserted. Base: 73180 rules (3241 with conclusion selected). Queue: 3746 rules.
91800 rules inserted. Base: 73362 rules (3247 with conclusion selected). Queue: 3756 rules.
92000 rules inserted. Base: 73541 rules (3251 with conclusion selected). Queue: 3710 rules.
92200 rules inserted. Base: 73709 rules (3251 with conclusion selected). Queue: 3702 rules.
92400 rules inserted. Base: 73832 rules (3252 with conclusion selected). Queue: 3656 rules.
92600 rules inserted. Base: 74012 rules (3258 with conclusion selected). Queue: 3657 rules.
92800 rules inserted. Base: 74194 rules (3261 with conclusion selected). Queue: 3629 rules.
93000 rules inserted. Base: 74376 rules (3267 with conclusion selected). Queue: 3644 rules.
93200 rules inserted. Base: 74553 rules (3271 with conclusion selected). Queue: 3598 rules.
93400 rules inserted. Base: 74722 rules (3271 with conclusion selected). Queue: 3590 rules.
93600 rules inserted. Base: 74891 rules (3271 with conclusion selected). Queue: 3574 rules.
93800 rules inserted. Base: 75059 rules (3271 with conclusion selected). Queue: 3559 rules.
94000 rules inserted. Base: 75178 rules (3297 with conclusion selected). Queue: 3689 rules.
94200 rules inserted. Base: 75346 rules (3357 with conclusion selected). Queue: 3961 rules.
94400 rules inserted. Base: 75498 rules (3357 with conclusion selected). Queue: 3929 rules.
94600 rules inserted. Base: 75674 rules (3426 with conclusion selected). Queue: 4276 rules.
94800 rules inserted. Base: 75840 rules (3443 with conclusion selected). Queue: 4319 rules.
95000 rules inserted. Base: 75988 rules (3467 with conclusion selected). Queue: 4483 rules.
95200 rules inserted. Base: 76188 rules (3515 with conclusion selected). Queue: 4848 rules.
95400 rules inserted. Base: 76364 rules (3534 with conclusion selected). Queue: 4956 rules.
95600 rules inserted. Base: 76564 rules (3587 with conclusion selected). Queue: 5371 rules.
95800 rules inserted. Base: 76744 rules (3611 with conclusion selected). Queue: 5534 rules.
96000 rules inserted. Base: 76878 rules (3611 with conclusion selected). Queue: 5499 rules.
96200 rules inserted. Base: 77078 rules (3671 with conclusion selected). Queue: 5978 rules.
96400 rules inserted. Base: 77257 rules (3695 with conclusion selected). Queue: 6130 rules.
96600 rules inserted. Base: 77454 rules (3747 with conclusion selected). Queue: 6531 rules.
96800 rules inserted. Base: 77647 rules (3779 with conclusion selected). Queue: 6751 rules.
97000 rules inserted. Base: 77811 rules (3779 with conclusion selected). Queue: 6717 rules.
97200 rules inserted. Base: 77968 rules (3779 with conclusion selected). Queue: 6685 rules.
97400 rules inserted. Base: 78104 rules (3779 with conclusion selected). Queue: 6653 rules.
97600 rules inserted. Base: 78261 rules (3782 with conclusion selected). Queue: 6601 rules.
97800 rules inserted. Base: 78443 rules (3789 with conclusion selected). Queue: 6515 rules.
98000 rules inserted. Base: 78617 rules (3793 with conclusion selected). Queue: 6453 rules.
98200 rules inserted. Base: 78795 rules (3799 with conclusion selected). Queue: 6386 rules.
98400 rules inserted. Base: 78955 rules (3801 with conclusion selected). Queue: 6355 rules.
98600 rules inserted. Base: 79139 rules (3807 with conclusion selected). Queue: 6263 rules.
98800 rules inserted. Base: 79312 rules (3812 with conclusion selected). Queue: 6216 rules.
99000 rules inserted. Base: 79490 rules (3819 with conclusion selected). Queue: 6131 rules.
99200 rules inserted. Base: 79619 rules (3819 with conclusion selected). Queue: 6101 rules.
99400 rules inserted. Base: 79770 rules (3819 with conclusion selected). Queue: 6019 rules.
99600 rules inserted. Base: 79918 rules (3819 with conclusion selected). Queue: 5951 rules.
99800 rules inserted. Base: 80074 rules (3819 with conclusion selected). Queue: 5885 rules.
100000 rules inserted. Base: 80222 rules (3819 with conclusion selected). Queue: 5813 rules.
100200 rules inserted. Base: 80363 rules (3819 with conclusion selected). Queue: 5747 rules.
100400 rules inserted. Base: 80507 rules (3819 with conclusion selected). Queue: 5674 rules.
100600 rules inserted. Base: 80659 rules (3819 with conclusion selected). Queue: 5610 rules.
100800 rules inserted. Base: 80811 rules (3819 with conclusion selected). Queue: 5539 rules.
101000 rules inserted. Base: 80962 rules (3819 with conclusion selected). Queue: 5471 rules.
101200 rules inserted. Base: 81107 rules (3819 with conclusion selected). Queue: 5404 rules.
101400 rules inserted. Base: 81267 rules (3819 with conclusion selected). Queue: 5359 rules.
101600 rules inserted. Base: 81381 rules (3819 with conclusion selected). Queue: 5293 rules.
101800 rules inserted. Base: 81533 rules (3819 with conclusion selected). Queue: 5229 rules.
102000 rules inserted. Base: 81681 rules (3819 with conclusion selected). Queue: 5160 rules.
102200 rules inserted. Base: 81833 rules (3819 with conclusion selected). Queue: 5088 rules.
102400 rules inserted. Base: 81977 rules (3819 with conclusion selected). Queue: 5019 rules.
102600 rules inserted. Base: 82119 rules (3819 with conclusion selected). Queue: 4953 rules.
102800 rules inserted. Base: 82270 rules (3819 with conclusion selected). Queue: 4883 rules.
103000 rules inserted. Base: 82422 rules (3819 with conclusion selected). Queue: 4817 rules.
103200 rules inserted. Base: 82574 rules (3819 with conclusion selected). Queue: 4753 rules.
103400 rules inserted. Base: 82718 rules (3819 with conclusion selected). Queue: 4679 rules.
103600 rules inserted. Base: 82868 rules (3819 with conclusion selected). Queue: 4617 rules.
103800 rules inserted. Base: 83034 rules (3819 with conclusion selected). Queue: 4581 rules.
104000 rules inserted. Base: 83196 rules (3819 with conclusion selected). Queue: 4560 rules.
104200 rules inserted. Base: 83308 rules (3819 with conclusion selected). Queue: 4550 rules.
104400 rules inserted. Base: 83468 rules (3819 with conclusion selected). Queue: 4524 rules.
104600 rules inserted. Base: 83634 rules (3819 with conclusion selected). Queue: 4502 rules.
104800 rules inserted. Base: 83783 rules (3819 with conclusion selected). Queue: 4490 rules.
105000 rules inserted. Base: 83948 rules (3819 with conclusion selected). Queue: 4464 rules.
105200 rules inserted. Base: 84113 rules (3819 with conclusion selected). Queue: 4442 rules.
105400 rules inserted. Base: 84232 rules (3819 with conclusion selected). Queue: 4384 rules.
105600 rules inserted. Base: 84392 rules (3819 with conclusion selected). Queue: 4285 rules.
105800 rules inserted. Base: 84560 rules (3819 with conclusion selected). Queue: 4177 rules.
106000 rules inserted. Base: 84716 rules (3819 with conclusion selected). Queue: 4079 rules.
106200 rules inserted. Base: 84880 rules (3819 with conclusion selected). Queue: 3976 rules.
106400 rules inserted. Base: 85044 rules (3819 with conclusion selected). Queue: 3872 rules.
106600 rules inserted. Base: 85212 rules (3819 with conclusion selected). Queue: 3764 rules.
106800 rules inserted. Base: 85351 rules (3819 with conclusion selected). Queue: 3730 rules.
107000 rules inserted. Base: 85490 rules (3819 with conclusion selected). Queue: 3642 rules.
107200 rules inserted. Base: 85654 rules (3819 with conclusion selected). Queue: 3540 rules.
107400 rules inserted. Base: 85822 rules (3819 with conclusion selected). Queue: 3432 rules.
107600 rules inserted. Base: 85974 rules (3819 with conclusion selected). Queue: 3336 rules.
107800 rules inserted. Base: 86141 rules (3819 with conclusion selected). Queue: 3228 rules.
108000 rules inserted. Base: 86305 rules (3819 with conclusion selected). Queue: 3126 rules.
108200 rules inserted. Base: 86468 rules (3819 with conclusion selected). Queue: 3028 rules.
108400 rules inserted. Base: 86622 rules (3819 with conclusion selected). Queue: 3007 rules.
108600 rules inserted. Base: 86749 rules (3819 with conclusion selected). Queue: 2982 rules.
108800 rules inserted. Base: 86874 rules (3818 with conclusion selected). Queue: 2976 rules.
109000 rules inserted. Base: 87035 rules (3818 with conclusion selected). Queue: 2958 rules.
109200 rules inserted. Base: 87188 rules (3818 with conclusion selected). Queue: 2950 rules.
109400 rules inserted. Base: 87349 rules (3818 with conclusion selected). Queue: 2932 rules.
109600 rules inserted. Base: 87521 rules (3818 with conclusion selected). Queue: 2930 rules.
109800 rules inserted. Base: 87668 rules (3828 with conclusion selected). Queue: 2922 rules.
110000 rules inserted. Base: 87860 rules (3828 with conclusion selected). Queue: 2791 rules.
110200 rules inserted. Base: 88040 rules (3828 with conclusion selected). Queue: 2654 rules.
110400 rules inserted. Base: 88226 rules (3828 with conclusion selected). Queue: 2549 rules.
110600 rules inserted. Base: 88370 rules (3838 with conclusion selected). Queue: 2553 rules.
110800 rules inserted. Base: 88564 rules (3838 with conclusion selected). Queue: 2418 rules.
111000 rules inserted. Base: 88742 rules (3838 with conclusion selected). Queue: 2287 rules.
111200 rules inserted. Base: 88932 rules (3838 with conclusion selected). Queue: 2166 rules.
111400 rules inserted. Base: 89089 rules (3838 with conclusion selected). Queue: 2144 rules.
111600 rules inserted. Base: 89202 rules (3842 with conclusion selected). Queue: 2137 rules.
111800 rules inserted. Base: 89342 rules (3845 with conclusion selected). Queue: 2067 rules.
112000 rules inserted. Base: 89498 rules (3845 with conclusion selected). Queue: 1983 rules.
112200 rules inserted. Base: 89639 rules (3845 with conclusion selected). Queue: 1937 rules.
112400 rules inserted. Base: 89797 rules (3845 with conclusion selected). Queue: 1841 rules.
112600 rules inserted. Base: 89957 rules (3845 with conclusion selected). Queue: 1809 rules.
112800 rules inserted. Base: 90129 rules (3890 with conclusion selected). Queue: 1964 rules.
113000 rules inserted. Base: 90259 rules (3890 with conclusion selected). Queue: 1905 rules.
113200 rules inserted. Base: 90433 rules (3935 with conclusion selected). Queue: 2079 rules.
113400 rules inserted. Base: 90566 rules (3935 with conclusion selected). Queue: 2003 rules.
113600 rules inserted. Base: 90692 rules (3935 with conclusion selected). Queue: 1991 rules.
113800 rules inserted. Base: 90849 rules (3982 with conclusion selected). Queue: 2233 rules.
114000 rules inserted. Base: 90985 rules (3985 with conclusion selected). Queue: 2168 rules.
114200 rules inserted. Base: 91121 rules (3995 with conclusion selected). Queue: 2159 rules.
114400 rules inserted. Base: 91270 rules (3995 with conclusion selected). Queue: 2112 rules.
114600 rules inserted. Base: 91452 rules (4001 with conclusion selected). Queue: 2040 rules.
114800 rules inserted. Base: 91621 rules (4005 with conclusion selected). Queue: 1937 rules.
115000 rules inserted. Base: 91782 rules (4006 with conclusion selected). Queue: 1878 rules.
115200 rules inserted. Base: 91966 rules (4013 with conclusion selected). Queue: 1804 rules.
115400 rules inserted. Base: 92123 rules (4015 with conclusion selected). Queue: 1694 rules.
115600 rules inserted. Base: 92252 rules (4019 with conclusion selected). Queue: 1690 rules.
115800 rules inserted. Base: 92428 rules (4023 with conclusion selected). Queue: 1638 rules.
116000 rules inserted. Base: 92600 rules (4029 with conclusion selected). Queue: 1605 rules.
116200 rules inserted. Base: 92680 rules (4045 with conclusion selected). Queue: 1736 rules.
116400 rules inserted. Base: 92785 rules (4059 with conclusion selected). Queue: 1844 rules.
116600 rules inserted. Base: 92913 rules (4061 with conclusion selected). Queue: 1872 rules.
116800 rules inserted. Base: 93054 rules (4061 with conclusion selected). Queue: 1836 rules.
117000 rules inserted. Base: 93216 rules (4061 with conclusion selected). Queue: 1826 rules.
117200 rules inserted. Base: 93340 rules (4061 with conclusion selected). Queue: 1806 rules.
117400 rules inserted. Base: 93515 rules (4065 with conclusion selected). Queue: 1844 rules.
117600 rules inserted. Base: 93683 rules (4065 with conclusion selected). Queue: 1822 rules.
117800 rules inserted. Base: 93865 rules (4124 with conclusion selected). Queue: 2378 rules.
118000 rules inserted. Base: 94025 rules (4171 with conclusion selected). Queue: 2838 rules.
118200 rules inserted. Base: 94201 rules (4225 with conclusion selected). Queue: 3344 rules.
118400 rules inserted. Base: 94366 rules (4277 with conclusion selected). Queue: 3854 rules.
118600 rules inserted. Base: 94508 rules (4283 with conclusion selected). Queue: 3932 rules.
118800 rules inserted. Base: 94660 rules (4283 with conclusion selected). Queue: 3932 rules.
119000 rules inserted. Base: 94789 rules (4289 with conclusion selected). Queue: 4010 rules.
119200 rules inserted. Base: 94954 rules (4289 with conclusion selected). Queue: 3998 rules.
119400 rules inserted. Base: 95123 rules (4289 with conclusion selected). Queue: 3992 rules.
119600 rules inserted. Base: 95237 rules (4289 with conclusion selected). Queue: 3947 rules.
119800 rules inserted. Base: 95419 rules (4289 with conclusion selected). Queue: 3890 rules.
120000 rules inserted. Base: 95583 rules (4289 with conclusion selected). Queue: 3830 rules.
120200 rules inserted. Base: 95754 rules (4289 with conclusion selected). Queue: 3775 rules.
120400 rules inserted. Base: 95924 rules (4289 with conclusion selected). Queue: 3714 rules.
120600 rules inserted. Base: 96090 rules (4289 with conclusion selected). Queue: 3650 rules.
120800 rules inserted. Base: 96260 rules (4289 with conclusion selected). Queue: 3621 rules.
121000 rules inserted. Base: 96354 rules (4289 with conclusion selected). Queue: 3583 rules.
121200 rules inserted. Base: 96532 rules (4289 with conclusion selected). Queue: 3524 rules.
121400 rules inserted. Base: 96696 rules (4289 with conclusion selected). Queue: 3462 rules.
121600 rules inserted. Base: 96872 rules (4289 with conclusion selected). Queue: 3412 rules.
121800 rules inserted. Base: 97037 rules (4289 with conclusion selected). Queue: 3348 rules.
122000 rules inserted. Base: 97211 rules (4289 with conclusion selected). Queue: 3286 rules.
122200 rules inserted. Base: 97379 rules (4289 with conclusion selected). Queue: 3248 rules.
122400 rules inserted. Base: 97524 rules (4289 with conclusion selected). Queue: 3208 rules.
122600 rules inserted. Base: 97682 rules (4289 with conclusion selected). Queue: 3196 rules.
122800 rules inserted. Base: 97842 rules (4289 with conclusion selected). Queue: 3154 rules.
123000 rules inserted. Base: 97987 rules (4289 with conclusion selected). Queue: 3138 rules.
123200 rules inserted. Base: 98088 rules (4289 with conclusion selected). Queue: 3122 rules.
123400 rules inserted. Base: 98254 rules (4289 with conclusion selected). Queue: 3014 rules.
123600 rules inserted. Base: 98369 rules (4290 with conclusion selected). Queue: 2968 rules.
123800 rules inserted. Base: 98549 rules (4296 with conclusion selected). Queue: 2978 rules.
124000 rules inserted. Base: 98715 rules (4299 with conclusion selected). Queue: 2961 rules.
124200 rules inserted. Base: 98894 rules (4305 with conclusion selected). Queue: 2980 rules.
124400 rules inserted. Base: 99043 rules (4309 with conclusion selected). Queue: 2978 rules.
124600 rules inserted. Base: 99118 rules (4309 with conclusion selected). Queue: 2949 rules.
124800 rules inserted. Base: 99298 rules (4315 with conclusion selected). Queue: 2964 rules.
125000 rules inserted. Base: 99459 rules (4319 with conclusion selected). Queue: 2959 rules.
125200 rules inserted. Base: 99641 rules (4325 with conclusion selected). Queue: 2971 rules.
125400 rules inserted. Base: 99821 rules (4329 with conclusion selected). Queue: 2946 rules.
125600 rules inserted. Base: 99902 rules (4329 with conclusion selected). Queue: 2918 rules.
125800 rules inserted. Base: 100008 rules (4329 with conclusion selected). Queue: 2913 rules.
126000 rules inserted. Base: 100139 rules (4329 with conclusion selected). Queue: 2870 rules.
126200 rules inserted. Base: 100189 rules (4329 with conclusion selected). Queue: 2881 rules.
126400 rules inserted. Base: 100236 rules (4329 with conclusion selected). Queue: 2863 rules.
126600 rules inserted. Base: 100379 rules (4353 with conclusion selected). Queue: 3032 rules.
126800 rules inserted. Base: 100579 rules (4401 with conclusion selected). Queue: 3398 rules.
127000 rules inserted. Base: 100759 rules (4429 with conclusion selected). Queue: 3603 rules.
127200 rules inserted. Base: 100959 rules (4477 with conclusion selected). Queue: 3968 rules.
127400 rules inserted. Base: 101095 rules (4501 with conclusion selected). Queue: 4149 rules.
127600 rules inserted. Base: 101199 rules (4513 with conclusion selected). Queue: 4216 rules.
127800 rules inserted. Base: 101399 rules (4567 with conclusion selected). Queue: 4634 rules.
128000 rules inserted. Base: 101579 rules (4589 with conclusion selected). Queue: 4788 rules.
128200 rules inserted. Base: 101779 rules (4649 with conclusion selected). Queue: 5267 rules.
128400 rules inserted. Base: 101935 rules (4673 with conclusion selected). Queue: 5435 rules.
128600 rules inserted. Base: 101999 rules (4682 with conclusion selected). Queue: 5531 rules.
128800 rules inserted. Base: 102053 rules (4687 with conclusion selected). Queue: 5583 rules.
129000 rules inserted. Base: 102137 rules (4691 with conclusion selected). Queue: 5611 rules.
129200 rules inserted. Base: 102141 rules (4700 with conclusion selected). Queue: 5732 rules.
129400 rules inserted. Base: 102230 rules (4701 with conclusion selected). Queue: 5714 rules.
129600 rules inserted. Base: 102381 rules (4701 with conclusion selected). Queue: 5644 rules.
129800 rules inserted. Base: 102534 rules (4701 with conclusion selected). Queue: 5579 rules.
130000 rules inserted. Base: 102686 rules (4701 with conclusion selected). Queue: 5512 rules.
130200 rules inserted. Base: 102828 rules (4701 with conclusion selected). Queue: 5438 rules.
130400 rules inserted. Base: 102985 rules (4703 with conclusion selected). Queue: 5412 rules.
130600 rules inserted. Base: 103147 rules (4705 with conclusion selected). Queue: 5362 rules.
130800 rules inserted. Base: 103299 rules (4705 with conclusion selected). Queue: 5297 rules.
131000 rules inserted. Base: 103451 rules (4705 with conclusion selected). Queue: 5228 rules.
131200 rules inserted. Base: 103599 rules (4705 with conclusion selected). Queue: 5160 rules.
131400 rules inserted. Base: 103747 rules (4705 with conclusion selected). Queue: 5092 rules.
131600 rules inserted. Base: 103851 rules (4705 with conclusion selected). Queue: 5077 rules.
131800 rules inserted. Base: 103963 rules (4705 with conclusion selected). Queue: 5006 rules.
132000 rules inserted. Base: 104115 rules (4705 with conclusion selected). Queue: 4943 rules.
132200 rules inserted. Base: 104267 rules (4705 with conclusion selected). Queue: 4872 rules.
132400 rules inserted. Base: 104417 rules (4705 with conclusion selected). Queue: 4804 rules.
132600 rules inserted. Base: 104563 rules (4705 with conclusion selected). Queue: 4736 rules.
132800 rules inserted. Base: 104732 rules (4709 with conclusion selected). Queue: 4728 rules.
133000 rules inserted. Base: 104880 rules (4709 with conclusion selected). Queue: 4661 rules.
133200 rules inserted. Base: 105032 rules (4709 with conclusion selected). Queue: 4595 rules.
133400 rules inserted. Base: 105187 rules (4709 with conclusion selected). Queue: 4528 rules.
133600 rules inserted. Base: 105330 rules (4709 with conclusion selected). Queue: 4454 rules.
133800 rules inserted. Base: 105480 rules (4709 with conclusion selected). Queue: 4398 rules.
134000 rules inserted. Base: 105608 rules (4749 with conclusion selected). Queue: 4774 rules.
134200 rules inserted. Base: 105777 rules (4763 with conclusion selected). Queue: 4912 rules.
134400 rules inserted. Base: 105947 rules (4813 with conclusion selected). Queue: 5372 rules.
134600 rules inserted. Base: 106090 rules (4817 with conclusion selected). Queue: 5426 rules.
134800 rules inserted. Base: 106182 rules (4821 with conclusion selected). Queue: 5484 rules.
135000 rules inserted. Base: 106324 rules (4865 with conclusion selected). Queue: 5946 rules.
135200 rules inserted. Base: 106410 rules (4865 with conclusion selected). Queue: 5884 rules.
135400 rules inserted. Base: 106574 rules (4865 with conclusion selected). Queue: 5783 rules.
135600 rules inserted. Base: 106742 rules (4865 with conclusion selected). Queue: 5674 rules.
135800 rules inserted. Base: 106896 rules (4865 with conclusion selected). Queue: 5593 rules.
136000 rules inserted. Base: 107060 rules (4865 with conclusion selected). Queue: 5525 rules.
136200 rules inserted. Base: 107220 rules (4865 with conclusion selected). Queue: 5424 rules.
136400 rules inserted. Base: 107388 rules (4865 with conclusion selected). Queue: 5316 rules.
136600 rules inserted. Base: 107509 rules (4865 with conclusion selected). Queue: 5240 rules.
136800 rules inserted. Base: 107585 rules (4865 with conclusion selected). Queue: 5198 rules.
137000 rules inserted. Base: 107750 rules (4865 with conclusion selected). Queue: 5090 rules.
137200 rules inserted. Base: 107914 rules (4865 with conclusion selected). Queue: 4990 rules.
137400 rules inserted. Base: 108064 rules (4865 with conclusion selected). Queue: 4890 rules.
137600 rules inserted. Base: 108232 rules (4865 with conclusion selected). Queue: 4839 rules.
137800 rules inserted. Base: 108396 rules (4865 with conclusion selected). Queue: 4734 rules.
138000 rules inserted. Base: 108560 rules (4865 with conclusion selected). Queue: 4630 rules.
138200 rules inserted. Base: 108712 rules (4865 with conclusion selected). Queue: 4534 rules.
138400 rules inserted. Base: 108798 rules (4865 with conclusion selected). Queue: 4504 rules.
138600 rules inserted. Base: 108962 rules (4865 with conclusion selected). Queue: 4440 rules.
138800 rules inserted. Base: 109126 rules (4865 with conclusion selected). Queue: 4374 rules.
139000 rules inserted. Base: 109304 rules (4865 with conclusion selected). Queue: 4344 rules.
139200 rules inserted. Base: 109364 rules (4865 with conclusion selected). Queue: 4330 rules.
139400 rules inserted. Base: 109524 rules (4865 with conclusion selected). Queue: 4264 rules.
139600 rules inserted. Base: 109696 rules (4865 with conclusion selected). Queue: 4203 rules.
139800 rules inserted. Base: 109856 rules (4865 with conclusion selected). Queue: 4154 rules.
140000 rules inserted. Base: 109948 rules (4865 with conclusion selected). Queue: 4146 rules.
140200 rules inserted. Base: 110042 rules (4865 with conclusion selected). Queue: 4136 rules.
140400 rules inserted. Base: 110144 rules (4865 with conclusion selected). Queue: 4128 rules.
140600 rules inserted. Base: 110290 rules (4865 with conclusion selected). Queue: 4078 rules.
140800 rules inserted. Base: 110459 rules (4865 with conclusion selected). Queue: 4014 rules.
141000 rules inserted. Base: 110589 rules (4866 with conclusion selected). Queue: 3985 rules.
141200 rules inserted. Base: 110755 rules (4866 with conclusion selected). Queue: 3853 rules.
141400 rules inserted. Base: 110927 rules (4866 with conclusion selected). Queue: 3779 rules.
141600 rules inserted. Base: 111111 rules (4866 with conclusion selected). Queue: 3665 rules.
141800 rules inserted. Base: 111270 rules (4866 with conclusion selected). Queue: 3564 rules.
142000 rules inserted. Base: 111319 rules (4866 with conclusion selected). Queue: 3526 rules.
142200 rules inserted. Base: 111513 rules (4866 with conclusion selected). Queue: 3387 rules.
142400 rules inserted. Base: 111675 rules (4866 with conclusion selected). Queue: 3337 rules.
142600 rules inserted. Base: 111873 rules (4866 with conclusion selected). Queue: 3189 rules.
142800 rules inserted. Base: 111978 rules (4866 with conclusion selected). Queue: 3133 rules.
143000 rules inserted. Base: 112105 rules (4868 with conclusion selected). Queue: 3077 rules.
143200 rules inserted. Base: 112283 rules (4874 with conclusion selected). Queue: 3065 rules.
143400 rules inserted. Base: 112422 rules (4876 with conclusion selected). Queue: 3059 rules.
143600 rules inserted. Base: 112511 rules (4878 with conclusion selected). Queue: 3048 rules.
143800 rules inserted. Base: 112681 rules (4882 with conclusion selected). Queue: 3007 rules.
144000 rules inserted. Base: 112855 rules (4886 with conclusion selected). Queue: 3001 rules.
144200 rules inserted. Base: 112897 rules (4886 with conclusion selected). Queue: 2993 rules.
144400 rules inserted. Base: 113011 rules (4886 with conclusion selected). Queue: 2977 rules.
144600 rules inserted. Base: 113149 rules (4886 with conclusion selected). Queue: 2948 rules.
144800 rules inserted. Base: 113323 rules (4890 with conclusion selected). Queue: 2935 rules.
145000 rules inserted. Base: 113429 rules (4898 with conclusion selected). Queue: 2982 rules.
145200 rules inserted. Base: 113577 rules (4898 with conclusion selected). Queue: 2906 rules.
145400 rules inserted. Base: 113727 rules (4898 with conclusion selected). Queue: 2822 rules.
145600 rules inserted. Base: 113818 rules (4898 with conclusion selected). Queue: 2772 rules.
145800 rules inserted. Base: 113989 rules (4898 with conclusion selected). Queue: 2688 rules.
146000 rules inserted. Base: 114128 rules (4904 with conclusion selected). Queue: 2678 rules.
146200 rules inserted. Base: 114328 rules (4934 with conclusion selected). Queue: 2879 rules.
146400 rules inserted. Base: 114526 rules (4958 with conclusion selected). Queue: 3033 rules.
146600 rules inserted. Base: 114674 rules (4964 with conclusion selected). Queue: 3024 rules.
146800 rules inserted. Base: 114874 rules (4994 with conclusion selected). Queue: 3227 rules.
147000 rules inserted. Base: 115072 rules (5018 with conclusion selected). Queue: 3376 rules.
147200 rules inserted. Base: 115216 rules (5018 with conclusion selected). Queue: 3326 rules.
147400 rules inserted. Base: 115364 rules (5018 with conclusion selected). Queue: 3302 rules.
147600 rules inserted. Base: 115552 rules (5030 with conclusion selected). Queue: 3359 rules.
147800 rules inserted. Base: 115752 rules (5090 with conclusion selected). Queue: 3835 rules.
148000 rules inserted. Base: 115839 rules (5133 with conclusion selected). Queue: 4129 rules.
148200 rules inserted. Base: 115966 rules (5135 with conclusion selected). Queue: 4053 rules.
148400 rules inserted. Base: 116054 rules (5149 with conclusion selected). Queue: 4051 rules.
148600 rules inserted. Base: 116150 rules (5153 with conclusion selected). Queue: 4002 rules.
148800 rules inserted. Base: 116300 rules (5155 with conclusion selected). Queue: 3938 rules.
149000 rules inserted. Base: 116444 rules (5155 with conclusion selected). Queue: 3872 rules.
149200 rules inserted. Base: 116592 rules (5155 with conclusion selected). Queue: 3798 rules.
149400 rules inserted. Base: 116728 rules (5155 with conclusion selected). Queue: 3740 rules.
149600 rules inserted. Base: 116830 rules (5161 with conclusion selected). Queue: 3726 rules.
149800 rules inserted. Base: 116974 rules (5161 with conclusion selected). Queue: 3653 rules.
150000 rules inserted. Base: 117118 rules (5161 with conclusion selected). Queue: 3586 rules.
150200 rules inserted. Base: 117266 rules (5161 with conclusion selected). Queue: 3515 rules.
150400 rules inserted. Base: 117391 rules (5161 with conclusion selected). Queue: 3472 rules.
150600 rules inserted. Base: 117472 rules (5167 with conclusion selected). Queue: 3460 rules.
150800 rules inserted. Base: 117530 rules (5171 with conclusion selected). Queue: 3464 rules.
151000 rules inserted. Base: 117674 rules (5171 with conclusion selected). Queue: 3394 rules.
151200 rules inserted. Base: 117825 rules (5171 with conclusion selected). Queue: 3324 rules.
151400 rules inserted. Base: 117978 rules (5171 with conclusion selected). Queue: 3250 rules.
151600 rules inserted. Base: 118130 rules (5171 with conclusion selected). Queue: 3180 rules.
151800 rules inserted. Base: 118282 rules (5171 with conclusion selected). Queue: 3116 rules.
152000 rules inserted. Base: 118431 rules (5173 with conclusion selected). Queue: 3072 rules.
152200 rules inserted. Base: 118563 rules (5218 with conclusion selected). Queue: 3252 rules.
152400 rules inserted. Base: 118696 rules (5246 with conclusion selected). Queue: 3316 rules.
152600 rules inserted. Base: 118771 rules (5263 with conclusion selected). Queue: 3337 rules.
152800 rules inserted. Base: 118939 rules (5263 with conclusion selected). Queue: 3230 rules.
153000 rules inserted. Base: 119107 rules (5263 with conclusion selected). Queue: 3122 rules.
153200 rules inserted. Base: 119222 rules (5263 with conclusion selected). Queue: 3052 rules.
153400 rules inserted. Base: 119350 rules (5263 with conclusion selected). Queue: 2962 rules.
153600 rules inserted. Base: 119518 rules (5263 with conclusion selected). Queue: 2854 rules.
153800 rules inserted. Base: 119686 rules (5263 with conclusion selected). Queue: 2746 rules.
154000 rules inserted. Base: 119742 rules (5263 with conclusion selected). Queue: 2706 rules.
154200 rules inserted. Base: 119801 rules (5297 with conclusion selected). Queue: 2898 rules.
154400 rules inserted. Base: 119899 rules (5297 with conclusion selected). Queue: 2826 rules.
154600 rules inserted. Base: 120061 rules (5297 with conclusion selected). Queue: 2725 rules.
154800 rules inserted. Base: 120225 rules (5297 with conclusion selected). Queue: 2618 rules.
155000 rules inserted. Base: 120358 rules (5297 with conclusion selected). Queue: 2520 rules.
155200 rules inserted. Base: 120514 rules (5299 with conclusion selected). Queue: 2468 rules.
155400 rules inserted. Base: 120693 rules (5308 with conclusion selected). Queue: 2403 rules.
155600 rules inserted. Base: 120808 rules (5310 with conclusion selected). Queue: 2345 rules.
155800 rules inserted. Base: 120989 rules (5316 with conclusion selected). Queue: 2253 rules.
156000 rules inserted. Base: 121101 rules (5319 with conclusion selected). Queue: 2205 rules.
156200 rules inserted. Base: 121267 rules (5320 with conclusion selected). Queue: 2124 rules.
156400 rules inserted. Base: 121395 rules (5320 with conclusion selected). Queue: 2038 rules.
156600 rules inserted. Base: 121552 rules (5321 with conclusion selected). Queue: 1962 rules.
156800 rules inserted. Base: 121649 rules (5321 with conclusion selected). Queue: 1892 rules.
157000 rules inserted. Base: 121835 rules (5327 with conclusion selected). Queue: 1827 rules.
157200 rules inserted. Base: 121983 rules (5329 with conclusion selected). Queue: 1735 rules.
157400 rules inserted. Base: 122183 rules (5329 with conclusion selected). Queue: 1577 rules.
157600 rules inserted. Base: 122353 rules (5335 with conclusion selected). Queue: 1520 rules.
157800 rules inserted. Base: 122499 rules (5335 with conclusion selected). Queue: 1498 rules.
158000 rules inserted. Base: 122652 rules (5339 with conclusion selected). Queue: 1468 rules.
158200 rules inserted. Base: 122801 rules (5343 with conclusion selected). Queue: 1428 rules.
158400 rules inserted. Base: 122945 rules (5347 with conclusion selected). Queue: 1362 rules.
158600 rules inserted. Base: 123088 rules (5349 with conclusion selected). Queue: 1280 rules.
158800 rules inserted. Base: 123250 rules (5355 with conclusion selected). Queue: 1262 rules.
159000 rules inserted. Base: 123386 rules (5359 with conclusion selected). Queue: 1206 rules.
159200 rules inserted. Base: 123525 rules (5359 with conclusion selected). Queue: 1192 rules.
159400 rules inserted. Base: 123686 rules (5363 with conclusion selected). Queue: 1200 rules.
159600 rules inserted. Base: 123846 rules (5367 with conclusion selected). Queue: 1211 rules.
159800 rules inserted. Base: 123992 rules (5371 with conclusion selected). Queue: 1157 rules.
160000 rules inserted. Base: 124155 rules (5379 with conclusion selected). Queue: 1162 rules.
160200 rules inserted. Base: 124332 rules (5383 with conclusion selected). Queue: 1135 rules.
160400 rules inserted. Base: 124459 rules (5383 with conclusion selected). Queue: 1092 rules.
160600 rules inserted. Base: 124602 rules (5383 with conclusion selected). Queue: 1048 rules.
160800 rules inserted. Base: 124760 rules (5383 with conclusion selected). Queue: 1000 rules.
161000 rules inserted. Base: 124890 rules (5383 with conclusion selected). Queue: 932 rules.
161200 rules inserted. Base: 125023 rules (5383 with conclusion selected). Queue: 836 rules.
161400 rules inserted. Base: 125125 rules (5383 with conclusion selected). Queue: 758 rules.
161600 rules inserted. Base: 125229 rules (5382 with conclusion selected). Queue: 712 rules.
161800 rules inserted. Base: 125324 rules (5382 with conclusion selected). Queue: 674 rules.
162000 rules inserted. Base: 125332 rules (5382 with conclusion selected). Queue: 706 rules.
162200 rules inserted. Base: 125352 rules (5385 with conclusion selected). Queue: 702 rules.
162400 rules inserted. Base: 125357 rules (5385 with conclusion selected). Queue: 708 rules.
162600 rules inserted. Base: 125316 rules (5385 with conclusion selected). Queue: 720 rules.
162800 rules inserted. Base: 125391 rules (5385 with conclusion selected). Queue: 726 rules.
163000 rules inserted. Base: 125462 rules (5396 with conclusion selected). Queue: 744 rules.
163200 rules inserted. Base: 125585 rules (5396 with conclusion selected). Queue: 704 rules.
163400 rules inserted. Base: 125705 rules (5396 with conclusion selected). Queue: 704 rules.
163600 rules inserted. Base: 125808 rules (5413 with conclusion selected). Queue: 804 rules.
163800 rules inserted. Base: 125906 rules (5415 with conclusion selected). Queue: 797 rules.
164000 rules inserted. Base: 125959 rules (5415 with conclusion selected). Queue: 809 rules.
164200 rules inserted. Base: 126002 rules (5415 with conclusion selected). Queue: 835 rules.
164400 rules inserted. Base: 126172 rules (5421 with conclusion selected). Queue: 819 rules.
164600 rules inserted. Base: 126245 rules (5427 with conclusion selected). Queue: 885 rules.
164800 rules inserted. Base: 126255 rules (5431 with conclusion selected). Queue: 940 rules.
165000 rules inserted. Base: 126267 rules (5433 with conclusion selected). Queue: 997 rules.
165200 rules inserted. Base: 126371 rules (5433 with conclusion selected). Queue: 995 rules.
165400 rules inserted. Base: 126464 rules (5483 with conclusion selected). Queue: 1487 rules.
165600 rules inserted. Base: 126585 rules (5533 with conclusion selected). Queue: 1975 rules.
165800 rules inserted. Base: 126631 rules (5533 with conclusion selected). Queue: 1952 rules.
166000 rules inserted. Base: 126754 rules (5573 with conclusion selected). Queue: 2359 rules.
166200 rules inserted. Base: 126876 rules (5573 with conclusion selected). Queue: 2355 rules.
166400 rules inserted. Base: 127035 rules (5579 with conclusion selected). Queue: 2341 rules.
166600 rules inserted. Base: 127202 rules (5579 with conclusion selected). Queue: 2279 rules.
166800 rules inserted. Base: 127366 rules (5579 with conclusion selected). Queue: 2216 rules.
167000 rules inserted. Base: 127522 rules (5579 with conclusion selected). Queue: 2185 rules.
167200 rules inserted. Base: 127680 rules (5579 with conclusion selected). Queue: 2119 rules.
167400 rules inserted. Base: 127854 rules (5579 with conclusion selected). Queue: 2062 rules.
167600 rules inserted. Base: 128018 rules (5579 with conclusion selected). Queue: 2027 rules.
167800 rules inserted. Base: 128152 rules (5579 with conclusion selected). Queue: 2033 rules.
168000 rules inserted. Base: 128296 rules (5579 with conclusion selected). Queue: 1997 rules.
168200 rules inserted. Base: 128470 rules (5579 with conclusion selected). Queue: 1937 rules.
168400 rules inserted. Base: 128642 rules (5579 with conclusion selected). Queue: 1899 rules.
168600 rules inserted. Base: 128810 rules (5579 with conclusion selected). Queue: 1883 rules.
168800 rules inserted. Base: 128967 rules (5581 with conclusion selected). Queue: 1834 rules.
169000 rules inserted. Base: 129145 rules (5587 with conclusion selected). Queue: 1817 rules.
169200 rules inserted. Base: 129299 rules (5590 with conclusion selected). Queue: 1811 rules.
169400 rules inserted. Base: 129479 rules (5595 with conclusion selected). Queue: 1794 rules.
169600 rules inserted. Base: 129635 rules (5599 with conclusion selected). Queue: 1775 rules.
169800 rules inserted. Base: 129761 rules (5599 with conclusion selected). Queue: 1775 rules.
170000 rules inserted. Base: 129908 rules (5599 with conclusion selected). Queue: 1735 rules.
170200 rules inserted. Base: 130087 rules (5605 with conclusion selected). Queue: 1761 rules.
170400 rules inserted. Base: 130251 rules (5607 with conclusion selected). Queue: 1774 rules.
170600 rules inserted. Base: 130400 rules (5619 with conclusion selected). Queue: 1842 rules.
170800 rules inserted. Base: 130600 rules (5649 with conclusion selected). Queue: 2030 rules.
171000 rules inserted. Base: 130770 rules (5669 with conclusion selected). Queue: 2157 rules.
171200 rules inserted. Base: 130970 rules (5703 with conclusion selected). Queue: 2403 rules.
171400 rules inserted. Base: 131148 rules (5727 with conclusion selected). Queue: 2559 rules.
171600 rules inserted. Base: 131287 rules (5727 with conclusion selected). Queue: 2527 rules.
171800 rules inserted. Base: 131456 rules (5751 with conclusion selected). Queue: 2686 rules.
172000 rules inserted. Base: 131656 rules (5811 with conclusion selected). Queue: 3163 rules.
172200 rules inserted. Base: 131770 rules (5823 with conclusion selected). Queue: 3241 rules.
172400 rules inserted. Base: 131903 rules (5823 with conclusion selected). Queue: 3193 rules.
172600 rules inserted. Base: 132047 rules (5823 with conclusion selected). Queue: 3119 rules.
172800 rules inserted. Base: 132195 rules (5823 with conclusion selected). Queue: 3046 rules.
173000 rules inserted. Base: 132339 rules (5823 with conclusion selected). Queue: 2981 rules.
173200 rules inserted. Base: 132475 rules (5823 with conclusion selected). Queue: 2900 rules.
173400 rules inserted. Base: 132623 rules (5823 with conclusion selected). Queue: 2831 rules.
173600 rules inserted. Base: 132767 rules (5823 with conclusion selected). Queue: 2762 rules.
173800 rules inserted. Base: 132914 rules (5823 with conclusion selected). Queue: 2691 rules.
174000 rules inserted. Base: 133049 rules (5823 with conclusion selected). Queue: 2611 rules.
174200 rules inserted. Base: 133177 rules (5823 with conclusion selected). Queue: 2529 rules.
174400 rules inserted. Base: 133329 rules (5823 with conclusion selected). Queue: 2451 rules.
174600 rules inserted. Base: 133477 rules (5823 with conclusion selected). Queue: 2383 rules.
174800 rules inserted. Base: 133633 rules (5823 with conclusion selected). Queue: 2308 rules.
175000 rules inserted. Base: 133781 rules (5823 with conclusion selected). Queue: 2239 rules.
175200 rules inserted. Base: 133933 rules (5823 with conclusion selected). Queue: 2175 rules.
175400 rules inserted. Base: 134088 rules (5823 with conclusion selected). Queue: 2115 rules.
175600 rules inserted. Base: 134182 rules (5823 with conclusion selected). Queue: 2068 rules.
175800 rules inserted. Base: 134350 rules (5823 with conclusion selected). Queue: 1960 rules.
176000 rules inserted. Base: 134518 rules (5823 with conclusion selected). Queue: 1852 rules.
176200 rules inserted. Base: 134684 rules (5823 with conclusion selected). Queue: 1761 rules.
176400 rules inserted. Base: 134852 rules (5823 with conclusion selected). Queue: 1653 rules.
176600 rules inserted. Base: 135018 rules (5823 with conclusion selected). Queue: 1563 rules.
176800 rules inserted. Base: 135178 rules (5823 with conclusion selected). Queue: 1513 rules.
177000 rules inserted. Base: 135342 rules (5823 with conclusion selected). Queue: 1405 rules.
177200 rules inserted. Base: 135506 rules (5823 with conclusion selected). Queue: 1302 rules.
177400 rules inserted. Base: 135666 rules (5823 with conclusion selected). Queue: 1202 rules.
177600 rules inserted. Base: 135778 rules (5823 with conclusion selected). Queue: 1177 rules.
177800 rules inserted. Base: 135951 rules (5823 with conclusion selected). Queue: 1090 rules.
178000 rules inserted. Base: 136117 rules (5823 with conclusion selected). Queue: 1012 rules.
178200 rules inserted. Base: 136273 rules (5823 with conclusion selected). Queue: 947 rules.
178400 rules inserted. Base: 136437 rules (5823 with conclusion selected). Queue: 851 rules.
178600 rules inserted. Base: 136637 rules (5823 with conclusion selected). Queue: 695 rules.
178800 rules inserted. Base: 136752 rules (5829 with conclusion selected). Queue: 693 rules.
179000 rules inserted. Base: 136909 rules (5829 with conclusion selected). Queue: 611 rules.
179200 rules inserted. Base: 137067 rules (5829 with conclusion selected). Queue: 573 rules.
179400 rules inserted. Base: 137153 rules (5829 with conclusion selected). Queue: 537 rules.
179600 rules inserted. Base: 137207 rules (5832 with conclusion selected). Queue: 503 rules.
179800 rules inserted. Base: 137247 rules (5832 with conclusion selected). Queue: 439 rules.
180000 rules inserted. Base: 137273 rules (5840 with conclusion selected). Queue: 466 rules.
180200 rules inserted. Base: 137143 rules (5862 with conclusion selected). Queue: 630 rules.
180400 rules inserted. Base: 137211 rules (5870 with conclusion selected). Queue: 644 rules.
180600 rules inserted. Base: 137375 rules (5884 with conclusion selected). Queue: 710 rules.
180800 rules inserted. Base: 137559 rules (5884 with conclusion selected). Queue: 684 rules.
181000 rules inserted. Base: 137705 rules (5888 with conclusion selected). Queue: 686 rules.
181200 rules inserted. Base: 137835 rules (5892 with conclusion selected). Queue: 668 rules.
181400 rules inserted. Base: 138001 rules (5892 with conclusion selected). Queue: 644 rules.
181600 rules inserted. Base: 138167 rules (5892 with conclusion selected). Queue: 619 rules.
181800 rules inserted. Base: 138325 rules (5898 with conclusion selected). Queue: 628 rules.
182000 rules inserted. Base: 138418 rules (5898 with conclusion selected). Queue: 578 rules.
182200 rules inserted. Base: 138497 rules (5898 with conclusion selected). Queue: 515 rules.
182400 rules inserted. Base: 138649 rules (5898 with conclusion selected). Queue: 492 rules.
182600 rules inserted. Base: 138673 rules (5906 with conclusion selected). Queue: 586 rules.
182800 rules inserted. Base: 138534 rules (5922 with conclusion selected). Queue: 782 rules.
183000 rules inserted. Base: 138684 rules (5928 with conclusion selected). Queue: 794 rules.
183200 rules inserted. Base: 138692 rules (5936 with conclusion selected). Queue: 882 rules.
183400 rules inserted. Base: 138691 rules (5946 with conclusion selected). Queue: 994 rules.
183600 rules inserted. Base: 138717 rules (5952 with conclusion selected). Queue: 1042 rules.
183800 rules inserted. Base: 138869 rules (5952 with conclusion selected). Queue: 1001 rules.
184000 rules inserted. Base: 139069 rules (5952 with conclusion selected). Queue: 938 rules.
184200 rules inserted. Base: 139269 rules (5952 with conclusion selected). Queue: 865 rules.
184400 rules inserted. Base: 139469 rules (5952 with conclusion selected). Queue: 794 rules.
184600 rules inserted. Base: 139654 rules (5952 with conclusion selected). Queue: 768 rules.
184800 rules inserted. Base: 139750 rules (5952 with conclusion selected). Queue: 765 rules.
185000 rules inserted. Base: 139949 rules (5952 with conclusion selected). Queue: 710 rules.
185200 rules inserted. Base: 140149 rules (5952 with conclusion selected). Queue: 655 rules.
185400 rules inserted. Base: 140277 rules (5952 with conclusion selected). Queue: 612 rules.
185600 rules inserted. Base: 140411 rules (5958 with conclusion selected). Queue: 620 rules.
185800 rules inserted. Base: 140611 rules (5958 with conclusion selected). Queue: 568 rules.
186000 rules inserted. Base: 140793 rules (5965 with conclusion selected). Queue: 549 rules.
186200 rules inserted. Base: 140904 rules (5970 with conclusion selected). Queue: 548 rules.
186400 rules inserted. Base: 141003 rules (5970 with conclusion selected). Queue: 548 rules.
186600 rules inserted. Base: 141125 rules (5970 with conclusion selected). Queue: 508 rules.
186800 rules inserted. Base: 141253 rules (5970 with conclusion selected). Queue: 477 rules.
187000 rules inserted. Base: 141351 rules (5970 with conclusion selected). Queue: 379 rules.
187200 rules inserted. Base: 141441 rules (5970 with conclusion selected). Queue: 344 rules.
187400 rules inserted. Base: 141625 rules (5970 with conclusion selected). Queue: 192 rules.
187600 rules inserted. Base: 141701 rules (5970 with conclusion selected). Queue: 199 rules.
187800 rules inserted. Base: 141761 rules (5976 with conclusion selected). Queue: 216 rules.
188000 rules inserted. Base: 141879 rules (5992 with conclusion selected). Queue: 265 rules.
188200 rules inserted. Base: 141962 rules (5995 with conclusion selected). Queue: 251 rules.
188400 rules inserted. Base: 142090 rules (6002 with conclusion selected). Queue: 290 rules.
188600 rules inserted. Base: 142173 rules (6006 with conclusion selected). Queue: 285 rules.
188800 rules inserted. Base: 142328 rules (6006 with conclusion selected). Queue: 266 rules.
189000 rules inserted. Base: 142485 rules (6024 with conclusion selected). Queue: 366 rules.
189200 rules inserted. Base: 142650 rules (6024 with conclusion selected). Queue: 342 rules.
189400 rules inserted. Base: 142775 rules (6024 with conclusion selected). Queue: 306 rules.
189600 rules inserted. Base: 142957 rules (6024 with conclusion selected). Queue: 264 rules.
189800 rules inserted. Base: 143077 rules (6024 with conclusion selected). Queue: 262 rules.
190000 rules inserted. Base: 143210 rules (6024 with conclusion selected). Queue: 252 rules.
190200 rules inserted. Base: 143332 rules (6024 with conclusion selected). Queue: 246 rules.
190400 rules inserted. Base: 143481 rules (6026 with conclusion selected). Queue: 250 rules.
190600 rules inserted. Base: 143561 rules (6028 with conclusion selected). Queue: 234 rules.
190800 rules inserted. Base: 143656 rules (6040 with conclusion selected). Queue: 262 rules.
191000 rules inserted. Base: 143817 rules (6044 with conclusion selected). Queue: 258 rules.
191200 rules inserted. Base: 143959 rules (6044 with conclusion selected). Queue: 244 rules.
191400 rules inserted. Base: 144105 rules (6044 with conclusion selected). Queue: 240 rules.
191600 rules inserted. Base: 144209 rules (6044 with conclusion selected). Queue: 240 rules.
191800 rules inserted. Base: 144333 rules (6053 with conclusion selected). Queue: 277 rules.
192000 rules inserted. Base: 144506 rules (6068 with conclusion selected). Queue: 336 rules.
192200 rules inserted. Base: 144683 rules (6068 with conclusion selected). Queue: 316 rules.
192400 rules inserted. Base: 144846 rules (6068 with conclusion selected). Queue: 296 rules.
192600 rules inserted. Base: 144977 rules (6068 with conclusion selected). Queue: 277 rules.
192800 rules inserted. Base: 145151 rules (6068 with conclusion selected). Queue: 246 rules.
193000 rules inserted. Base: 145297 rules (6068 with conclusion selected). Queue: 233 rules.
193200 rules inserted. Base: 145434 rules (6068 with conclusion selected). Queue: 214 rules.
193400 rules inserted. Base: 145565 rules (6068 with conclusion selected). Queue: 197 rules.
193600 rules inserted. Base: 145665 rules (6073 with conclusion selected). Queue: 185 rules.
193800 rules inserted. Base: 145829 rules (6092 with conclusion selected). Queue: 253 rules.
194000 rules inserted. Base: 145997 rules (6092 with conclusion selected). Queue: 221 rules.
194200 rules inserted. Base: 146173 rules (6092 with conclusion selected). Queue: 217 rules.
194400 rules inserted. Base: 146313 rules (6092 with conclusion selected). Queue: 222 rules.
194600 rules inserted. Base: 146496 rules (6104 with conclusion selected). Queue: 268 rules.
194800 rules inserted. Base: 146685 rules (6104 with conclusion selected). Queue: 248 rules.
195000 rules inserted. Base: 146869 rules (6104 with conclusion selected). Queue: 272 rules.
195200 rules inserted. Base: 147021 rules (6104 with conclusion selected). Queue: 264 rules.
195400 rules inserted. Base: 147209 rules (6104 with conclusion selected). Queue: 250 rules.
195600 rules inserted. Base: 147402 rules (6104 with conclusion selected). Queue: 218 rules.
195800 rules inserted. Base: 147589 rules (6104 with conclusion selected). Queue: 187 rules.
196000 rules inserted. Base: 147757 rules (6104 with conclusion selected). Queue: 165 rules.
196200 rules inserted. Base: 147911 rules (6108 with conclusion selected). Queue: 158 rules.
196400 rules inserted. Base: 148089 rules (6112 with conclusion selected). Queue: 131 rules.
196600 rules inserted. Base: 148234 rules (6112 with conclusion selected). Queue: 120 rules.
196800 rules inserted. Base: 148405 rules (6112 with conclusion selected). Queue: 85 rules.
197000 rules inserted. Base: 148545 rules (6116 with conclusion selected). Queue: 84 rules.
197200 rules inserted. Base: 148693 rules (6120 with conclusion selected). Queue: 98 rules.
197400 rules inserted. Base: 148877 rules (6120 with conclusion selected). Queue: 79 rules.
197600 rules inserted. Base: 149037 rules (6128 with conclusion selected). Queue: 110 rules.
197800 rules inserted. Base: 149237 rules (6128 with conclusion selected). Queue: 106 rules.
198000 rules inserted. Base: 149437 rules (6128 with conclusion selected). Queue: 75 rules.
198200 rules inserted. Base: 149637 rules (6128 with conclusion selected). Queue: 20 rules.
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_CFIN[],ch_client_CFIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_FIN[],ch_client_FIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_CRT[],ch_client_CRT[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_client_after_EE[],ch_client_after_EE[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_CFIN[],ch_server_CFIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_FIN[],ch_server_FIN[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_CRT[],ch_server_CRT[])
ok, secrecy assumption verified: fact unreachable attacker2(ch_server_SH[],ch_server_SH[])
ok, secrecy assumption verified: fact unreachable attacker2(uc_privkey(s_92),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,uc_privkey(s_92))
ok, secrecy assumption verified: fact unreachable attacker2(uc_psk(s_92),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,uc_psk(s_92))
ok, secrecy assumption verified: fact unreachable attacker2(x_322,dh_k(s_92))
ok, secrecy assumption verified: fact unreachable attacker2(dh_k(s_92),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,zero,uc_psk(s_92)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,zero,uc_psk(s_92)),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_ext_res_binder,hash_ideal(i_7,zero))))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_ext_res_binder,hash_ideal(i_7,zero))),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,dh_f(s_92))
ok, secrecy assumption verified: fact unreachable attacker2(dh_f(s_92),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))))
ok, secrecy assumption verified: fact unreachable attacker2(dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,extra_es,dh_f(s_92)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,extra_es,dh_f(s_92)),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,uc_psk(s_92)),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(t,aead_enc(a_2,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322,y,z))
ok, secrecy assumption verified: fact unreachable attacker2(aead_enc(a_2,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322,y,z),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,aead_enc(a_2,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322,y,z))
ok, secrecy assumption verified: fact unreachable attacker2(aead_enc(a_2,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322,y,z),t)
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_f(s_92)),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),t)
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 166 rules.
400 rules inserted. Base: 392 rules (0 with conclusion selected). Queue: 38 rules.
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_key,zero)))
200 rules inserted. Base: 196 rules (0 with conclusion selected). Queue: 140 rules.
400 rules inserted. Base: 392 rules (0 with conclusion selected). Queue: 12 rules.
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_key,zero)),t)
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 166 rules.
400 rules inserted. Base: 392 rules (0 with conclusion selected). Queue: 38 rules.
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_finished,zero)))
200 rules inserted. Base: 196 rules (0 with conclusion selected). Queue: 140 rules.
400 rules inserted. Base: 392 rules (0 with conclusion selected). Queue: 12 rules.
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_finished,zero)),t)
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 166 rules.
400 rules inserted. Base: 392 rules (0 with conclusion selected). Queue: 38 rules.
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_key,zero)))
200 rules inserted. Base: 196 rules (0 with conclusion selected). Queue: 140 rules.
400 rules inserted. Base: 392 rules (0 with conclusion selected). Queue: 12 rules.
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_key,zero)),t)
200 rules inserted. Base: 200 rules (0 with conclusion selected). Queue: 166 rules.
400 rules inserted. Base: 392 rules (0 with conclusion selected). Queue: 38 rules.
ok, secrecy assumption verified: fact unreachable attacker2(t,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_finished,zero)))
200 rules inserted. Base: 196 rules (0 with conclusion selected). Queue: 140 rules.
400 rules inserted. Base: 392 rules (0 with conclusion selected). Queue: 12 rules.
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,extra_es,dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,((log,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p))),SH(r',nego(v',h',a',server_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_encap_fun(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)),dh_xy(s_xy,CH(r_3,nego(v_969,h_286,a_2,client_kex_ext(DHE_kex(id_g(StrongDH,i_7),dh_pub(id_g(StrongDH,i_7),dh_k(s_x)))),sn,e,ex,p)))))),sn',e',ex',p')))))),(tls13_finished,zero)),t)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,dh_xy(s',dh_pub(id_g(StrongDH,i_7),dh_k(s_92))))
ok, secrecy assumption verified: fact unreachable attacker2(dh_xy(s',dh_pub(id_g(StrongDH,i_7),dh_k(s_92))),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,dh_xy(s',dh_pub(id_g(StrongDH,i_7),dh_k(s_92))),(hpke_secret,zero)),(hpke_key,hmac_ideal(i_7,zero,(hpke_info_hash,info_1)))))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,dh_xy(s',dh_pub(id_g(StrongDH,i_7),dh_k(s_92))),(hpke_secret,zero)),(hpke_key,hmac_ideal(i_7,zero,(hpke_info_hash,info_1)))),x_322)
ok, secrecy assumption verified: fact unreachable attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,dh_f(s'),(hpke_secret,zero)),(hpke_key,hmac_ideal(i_7,zero,(hpke_info_hash,info_1)))))
ok, secrecy assumption verified: fact unreachable attacker2(hmac_ideal(i_7,hmac_ideal(i_7,dh_f(s'),(hpke_secret,zero)),(hpke_key,hmac_ideal(i_7,zero,(hpke_info_hash,info_1)))),x_322)
RESULT Diff-equivalence is true.

--------------------------------------------------------------
Verification summary:

Query(ies):
 - Diff-equivalence is true.
Associated axiom(s):
 - 
Axiom event(PreciseMess(ch,choice[id_59,id2_1],choice[st1_9,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id_59,id2'],choice[st1',st2'],choice[x1',x2'])) ==> st1_9 = st1' && x1 = x1' encoded as event2(PreciseMess(ch,id_59,st1_9,x1),PreciseMess(ch,id2_1,st2_2,x2)) && event2(PreciseMess(ch,id_59,st1',x1'),PreciseMess(ch,id2',st2',x2')) ==> st1_9 = st1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id_59],choice[st1_9,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id_59],choice[st1',st2'],choice[x1',x2'])) ==> st2_2 = st2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1_9,x1),PreciseMess(ch,id_59,st2_2,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id_59,st2',x2')) ==> st2_2 = st2' && x2 = x2'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st_16,st2_2],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st_16,st2'],choice[x1',x2'])) ==> id1_1 = id1' && x1 = x1' encoded as event2(PreciseMess(ch,id1_1,st_16,x1),PreciseMess(ch,id2_1,st2_2,x2)) && event2(PreciseMess(ch,id1',st_16,x1'),PreciseMess(ch,id2',st2',x2')) ==> id1_1 = id1' && x1 = x1'
axiom event(PreciseMess(ch,choice[id1_1,id2_1],choice[st1_9,st_16],choice[x1,x2])) && event(PreciseMess(ch,choice[id1',id2'],choice[st1',st_16],choice[x1',x2'])) ==> id2_1 = id2' && x2 = x2' encoded as event2(PreciseMess(ch,id1_1,st1_9,x1),PreciseMess(ch,id2_1,st_16,x2)) && event2(PreciseMess(ch,id1',st1',x1'),PreciseMess(ch,id2',st_16,x2')) ==> id2_1 = id2' && x2 = x2'
 in biprocess 1.
 - Axiom event(PreciseInput(st_16,choice[x_322,x1])) && event(PreciseInput(st_16,choice[x',x2])) ==> x_322 = x' && x1 = x2 encoded as event2(PreciseInput(st_16,x_322),PreciseInput(st_16,x1)) && event2(PreciseInput(st_16,x'),PreciseInput(st_16,x2)) ==> x_322 = x' && x1 = x2 in biprocess 1.
 - 
Axiom event(Server_DH_client(choice[id_59,id1_1],choice[e,e1])) && event(Server_DH_client(choice[id_59,id2_1],choice[e',e2])) ==> e = e' encoded as event2(Server_DH_client(id_59,e),Server_DH_client(id1_1,e1)) && event2(Server_DH_client(id_59,e'),Server_DH_client(id2_1,e2)) ==> e = e'
axiom event(Server_DH_client(choice[id1_1,id_59],choice[e1,e])) && event(Server_DH_client(choice[id2_1,id_59],choice[e2,e'])) ==> e = e' encoded as event2(Server_DH_client(id1_1,e1),Server_DH_client(id_59,e)) && event2(Server_DH_client(id2_1,e2),Server_DH_client(id_59,e')) ==> e = e'
 in biprocess 1.
 - 
Axiom event(Server_new_PSK(choice[id_59,id1_1],choice[k_82,k1])) && event(Server_new_PSK(choice[id_59,id2_1],choice[k',k2])) ==> k_82 = k' encoded as event2(Server_new_PSK(id_59,k_82),Server_new_PSK(id1_1,k1)) && event2(Server_new_PSK(id_59,k'),Server_new_PSK(id2_1,k2)) ==> k_82 = k'
axiom event(Server_new_PSK(choice[id1_1,id_59],choice[k1,k_82])) && event(Server_new_PSK(choice[id2_1,id_59],choice[k2,k'])) ==> k_82 = k' encoded as event2(Server_new_PSK(id1_1,k1),Server_new_PSK(id_59,k_82)) && event2(Server_new_PSK(id2_1,k2),Server_new_PSK(id_59,k')) ==> k_82 = k'
 in biprocess 1.
 - 
Axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[psk_120,psk''])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(psk_120,psk''))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[psk'',psk_120])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(psk'',psk_120))
axiom table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[is_safe_48,is_safe'])) && attacker(choice[psk_120,psk'']) ==> is_safe_48 ≠ true encoded as table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,is_safe_48),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(psk_120,psk'') ==> is_safe_48 ≠ true
axiom table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',is_safe_48])) && attacker(choice[psk'',psk_120]) ==> is_safe_48 ≠ true encoded as table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,is_safe_48)) && attacker2(psk'',psk_120) ==> is_safe_48 ≠ true
axiom table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[is_safe_48,is_safe'])) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,is_safe_48),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',is_safe_48])) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,is_safe_48)) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom attacker(choice[mk_idpsk(s_dom_18,h_286,psk_120),idpsk]) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as attacker2(mk_idpsk(s_dom_18,h_286,psk_120),idpsk) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom attacker(choice[idpsk,mk_idpsk(s_dom_18,h_286,psk_120)]) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero encoded as attacker2(idpsk,mk_idpsk(s_dom_18,h_286,psk_120)) ==> psk_120 ≠ NoPsk && psk_120 ≠ zero
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,zero,psk_120),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,zero,psk_120),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,zero,psk_120)])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,zero,psk_120)))
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero))),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero))),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero)))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_ext_res_binder,hash_ideal(i_7,zero)))))
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e)])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e)))
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))))
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_client_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))))
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_key,zero))))
axiom not (table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,is_safe'])) && attacker(choice[hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322])) encoded as not (table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe')) && attacker2(hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero)),x_322))
axiom not (table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[is_safe',true])) && attacker(choice[x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))])) encoded as not (table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',psk',idP',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,psk_120,idP_13,true)) && attacker2(x_322,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,hmac_ideal(i_7,zero,psk_120),(tls13_derived,hash_ideal(i_7,hash_ideal(i_7,zero)))),e),(tls13_server_handshake_traffic_secret,hash_ideal(i_7,log))),(tls13_finished,zero))))
 in biprocess 1.
 - 
Axiom not (event(Server_new_PSK(choice[id_s,id_s_1],choice[new_psk,new_psk'])) && table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_286,h'],choice[id_59,id'],choice[new_psk,new_psk''],choice[id_c,id_c'],choice[is_safe_48,is_safe'])) && event(Server_DH_client(choice[id_s,id_s_2],choice[dh_pub(g_25,x_322),e])) && attacker(choice[x_322,x'])) encoded as not (event2(Server_new_PSK(id_s,new_psk),Server_new_PSK(id_s_1,new_psk')) && table2(pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,new_psk,id_c,is_safe_48),pre_shared_keys(c_dom'_10,s_dom'_1,h',id',new_psk'',id_c',is_safe')) && event2(Server_DH_client(id_s,dh_pub(g_25,x_322)),Server_DH_client(id_s_2,e)) && attacker2(x_322,x'))
axiom not (event(Server_new_PSK(choice[id_s_1,id_s],choice[new_psk',new_psk])) && table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h',h_286],choice[id',id_59],choice[new_psk'',new_psk],choice[id_c',id_c],choice[is_safe',is_safe_48])) && event(Server_DH_client(choice[id_s_2,id_s],choice[e,dh_pub(g_25,x_322)])) && attacker(choice[x',x_322])) encoded as not (event2(Server_new_PSK(id_s_1,new_psk'),Server_new_PSK(id_s,new_psk)) && table2(pre_shared_keys(c_dom'_10,s_dom'_1,h',id',new_psk'',id_c',is_safe'),pre_shared_keys(c_dom_8,s_dom_18,h_286,id_59,new_psk,id_c,is_safe_48)) && event2(Server_DH_client(id_s_2,e),Server_DH_client(id_s,dh_pub(g_25,x_322))) && attacker2(x',x_322))
 in biprocess 1.
 - 
Axiom table(pre_shared_keys(choice[c_dom_8,c_dom'_10],choice[s_dom_18,s_dom'_1],choice[h_alg_14,h_alg'_1],choice[id_59,id'],choice[psk_120,psk'],choice[idP_13,idP'],choice[true,safe'])) ==> id_59 = mk_idpsk(s_dom_18,h_alg_14,psk_120) encoded as table2(pre_shared_keys(c_dom_8,s_dom_18,h_alg_14,id_59,psk_120,idP_13,true),pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP',safe')) ==> id_59 = mk_idpsk(s_dom_18,h_alg_14,psk_120)
axiom table(pre_shared_keys(choice[c_dom'_10,c_dom_8],choice[s_dom'_1,s_dom_18],choice[h_alg'_1,h_alg_14],choice[id',id_59],choice[psk',psk_120],choice[idP',idP_13],choice[safe',true])) ==> id_59 = mk_idpsk(s_dom_18,h_alg_14,psk_120) encoded as table2(pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP',safe'),pre_shared_keys(c_dom_8,s_dom_18,h_alg_14,id_59,psk_120,idP_13,true)) ==> id_59 = mk_idpsk(s_dom_18,h_alg_14,psk_120)
 in biprocess 1.
 - 
Axiom table(pre_shared_keys(choice[c_dom_8,c_dom1_1],choice[s_dom_18,s_dom1],choice[h_alg_14,h_alg1],choice[id_59,id1_1],choice[psk_120,psk1_1],choice[idP_13,idP1_2],choice[safe,safe1_1])) && table(pre_shared_keys(choice[c_dom'_10,c_dom2_1],choice[s_dom'_1,s_dom2],choice[h_alg'_1,h_alg2],choice[id',id2_1],choice[psk',psk2_1],choice[idP_13,idP2_2],choice[safe',safe2_1])) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && psk_120 = psk' && safe = safe' encoded as table2(pre_shared_keys(c_dom_8,s_dom_18,h_alg_14,id_59,psk_120,idP_13,safe),pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1)) && table2(pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP_13,safe'),pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1)) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && psk_120 = psk' && safe = safe'
axiom table(pre_shared_keys(choice[c_dom1_1,c_dom_8],choice[s_dom1,s_dom_18],choice[h_alg1,h_alg_14],choice[id1_1,id_59],choice[psk1_1,psk_120],choice[idP1_2,idP_13],choice[safe1_1,safe])) && table(pre_shared_keys(choice[c_dom2_1,c_dom'_10],choice[s_dom2,s_dom'_1],choice[h_alg2,h_alg'_1],choice[id2_1,id'],choice[psk2_1,psk'],choice[idP2_2,idP_13],choice[safe2_1,safe'])) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && psk_120 = psk' && safe = safe' encoded as table2(pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1),pre_shared_keys(c_dom_8,s_dom_18,h_alg_14,id_59,psk_120,idP_13,safe)) && table2(pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1),pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk',idP_13,safe')) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && psk_120 = psk' && safe = safe'
axiom table(pre_shared_keys(choice[c_dom_8,c_dom1_1],choice[s_dom_18,s_dom1],choice[h_alg_14,h_alg1],choice[id_59,id1_1],choice[psk_120,psk1_1],choice[idP_13,idP1_2],choice[safe,safe1_1])) && table(pre_shared_keys(choice[c_dom'_10,c_dom2_1],choice[s_dom'_1,s_dom2],choice[h_alg'_1,h_alg2],choice[id',id2_1],choice[psk_120,psk2_1],choice[idP',idP2_2],choice[safe',safe2_1])) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && idP_13 = idP' && safe = safe' encoded as table2(pre_shared_keys(c_dom_8,s_dom_18,h_alg_14,id_59,psk_120,idP_13,safe),pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1)) && table2(pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk_120,idP',safe'),pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1)) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && idP_13 = idP' && safe = safe'
axiom table(pre_shared_keys(choice[c_dom1_1,c_dom_8],choice[s_dom1,s_dom_18],choice[h_alg1,h_alg_14],choice[id1_1,id_59],choice[psk1_1,psk_120],choice[idP1_2,idP_13],choice[safe1_1,safe])) && table(pre_shared_keys(choice[c_dom2_1,c_dom'_10],choice[s_dom2,s_dom'_1],choice[h_alg2,h_alg'_1],choice[id2_1,id'],choice[psk2_1,psk_120],choice[idP2_2,idP'],choice[safe2_1,safe'])) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && idP_13 = idP' && safe = safe' encoded as table2(pre_shared_keys(c_dom1_1,s_dom1,h_alg1,id1_1,psk1_1,idP1_2,safe1_1),pre_shared_keys(c_dom_8,s_dom_18,h_alg_14,id_59,psk_120,idP_13,safe)) && table2(pre_shared_keys(c_dom2_1,s_dom2,h_alg2,id2_1,psk2_1,idP2_2,safe2_1),pre_shared_keys(c_dom'_10,s_dom'_1,h_alg'_1,id',psk_120,idP',safe')) ==> c_dom_8 = c_dom'_10 && s_dom_18 = s_dom'_1 && h_alg_14 = h_alg'_1 && id_59 = id' && idP_13 = idP' && safe = safe'
 in biprocess 1.
Associated restriction(s):
 - Restriction event(Same(choice[x_322,x'])) ==> x_322 = x' encoded as event2(Same(x_322),Same(x')) ==> x_322 = x' in biprocess 1.
 - Restriction not (event(Client_Cert_server(idClientDiff(s_92),s_pkey_7)) && event(CompromisedLtkForEquiv(s_pkey_7))) encoded as not (event2(Client_Cert_server(idClientDiff(s_92),s_pkey_7),Client_Cert_server(idClientDiff(s_92),s_pkey_7)) && event2(CompromisedLtkForEquiv(s_pkey_7),CompromisedLtkForEquiv(s_pkey_7))) in biprocess 1.
 - Restriction event(Selected_ltk(choice[dom1_1,dom1'],choice[dom2_1,dom2'],choice[idP_13,idP'])) ==> dom1_1 = dom2_1 && dom1' = dom2' && ((dom1_1 = dom1' && idP_13 = idP') || dom1_1 ≠ dom1') encoded as event2(Selected_ltk(dom1_1,dom2_1,idP_13),Selected_ltk(dom1',dom2',idP')) ==> dom1_1 = dom2_1 && dom1' = dom2' && ((dom1_1 = dom1' && idP_13 = idP') || dom1_1 ≠ dom1') in biprocess 1.
 - Restriction event(Selected_psk(choice[dom1_1,dom1'],choice[dom2_1,dom2'],choice[idP_13,idP'],choice[safe,safe'])) ==> dom1_1 = dom2_1 && dom1' = dom2' && (dom1_1 ≠ dom1' || (dom1_1 = dom1' && idP_13 = idP')) encoded as event2(Selected_psk(dom1_1,dom2_1,idP_13,safe),Selected_psk(dom1',dom2',idP',safe')) ==> dom1_1 = dom2_1 && dom1' = dom2' && (dom1_1 ≠ dom1' || (dom1_1 = dom1' && idP_13 = idP')) in biprocess 1.
 - 
Restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk,ipsk1],choice[safe,safe1_1])) && event(Selected_one_time_used_psk(idP_13,choice[ipsk,ipsk2],choice[safe,safe2_1])) ==> idP_13 = idClientDiff(s_92) encoded as event2(Selected_one_time_used_psk(idClientDiff(s_92),ipsk,safe),Selected_one_time_used_psk(idClientDiff(s_92),ipsk1,safe1_1)) && event2(Selected_one_time_used_psk(idP_13,ipsk,safe),Selected_one_time_used_psk(idP_13,ipsk2,safe2_1)) ==> idP_13 = idClientDiff(s_92)
restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk1,ipsk],choice[safe1_1,safe])) && event(Selected_one_time_used_psk(idP_13,choice[ipsk2,ipsk],choice[safe2_1,safe])) ==> idP_13 = idClientDiff(s_92) encoded as event2(Selected_one_time_used_psk(idClientDiff(s_92),ipsk1,safe1_1),Selected_one_time_used_psk(idClientDiff(s_92),ipsk,safe)) && event2(Selected_one_time_used_psk(idP_13,ipsk2,safe2_1),Selected_one_time_used_psk(idP_13,ipsk,safe)) ==> idP_13 = idClientDiff(s_92)
restriction event(Selected_one_time_used_psk(idClientDiff(s_92),choice[ipsk1,ipsk2],choice[safe1_1,safe2_1])) ==> safe1_1 = true && safe2_1 = true encoded as event2(Selected_one_time_used_psk(idClientDiff(s_92),ipsk1,safe1_1),Selected_one_time_used_psk(idClientDiff(s_92),ipsk2,safe2_1)) ==> safe1_1 = true && safe2_1 = true
 in biprocess 1.
 - 
Restriction event(ClientSequenceClientDataWriteKey(idP_13,st_16,i_7)) && event(ClientSequenceClientDataWriteKey(idP_13,st',i_7)) ==> st_16 = st' encoded as event2(ClientSequenceClientDataWriteKey(idP_13,st_16,i_7),ClientSequenceClientDataWriteKey(idP_13,st_16,i_7)) && event2(ClientSequenceClientDataWriteKey(idP_13,st',i_7),ClientSequenceClientDataWriteKey(idP_13,st',i_7)) ==> st_16 = st'
restriction event(ClientSequenceServerDataWriteKey(idP_13,st_16,i_7)) && event(ClientSequenceServerDataWriteKey(idP_13,st',i_7)) ==> st_16 = st' encoded as event2(ClientSequenceServerDataWriteKey(idP_13,st_16,i_7),ClientSequenceServerDataWriteKey(idP_13,st_16,i_7)) && event2(ClientSequenceServerDataWriteKey(idP_13,st',i_7),ClientSequenceServerDataWriteKey(idP_13,st',i_7)) ==> st_16 = st'
restriction event(ServerSequenceServerDataWriteKey(idP_13,st_16,i_7)) && event(ServerSequenceServerDataWriteKey(idP_13,st',i_7)) ==> st_16 = st' encoded as event2(ServerSequenceServerDataWriteKey(idP_13,st_16,i_7),ServerSequenceServerDataWriteKey(idP_13,st_16,i_7)) && event2(ServerSequenceServerDataWriteKey(idP_13,st',i_7),ServerSequenceServerDataWriteKey(idP_13,st',i_7)) ==> st_16 = st'
restriction event(ServerSequenceClientDataWriteKey(idP_13,st_16,i_7)) && event(ServerSequenceClientDataWriteKey(idP_13,st',i_7)) ==> st_16 = st' encoded as event2(ServerSequenceClientDataWriteKey(idP_13,st_16,i_7),ServerSequenceClientDataWriteKey(idP_13,st_16,i_7)) && event2(ServerSequenceClientDataWriteKey(idP_13,st',i_7),ServerSequenceClientDataWriteKey(idP_13,st',i_7)) ==> st_16 = st'
 in biprocess 1.

--------------------------------------------------------------

34964.09user 1597.88system 10:10:03elapsed 99%CPU (0avgtext+0avgdata 283084540maxresident)k
79376inputs+9248outputs (1213major+1189593354minor)pagefaults 0swaps
