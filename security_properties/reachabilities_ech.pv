
set removeEventsForLemma = true.
(* set verboseLemmas = true. *)
(* set nounifIgnoreAFewTimes = auto. *)
(* set preciseActions = true. *)

nounif s_dom:domain, h_alg:hash_alg, psk:preSharedKey; attacker(mk_idpsk( *s_dom, *h_alg, *psk)).

nounif c_dom,s_dom:domain,h:hash_alg,id:identityPsk,x:preSharedKey, idP:idProc,is_safe:bool;
  table(pre_shared_keys( *c_dom, *s_dom, *h, *id, *x, *idP, *is_safe))
.

axiom c_dom,s_dom:domain,h:hash_alg,id:identityPsk,cr,sr:bytes32,old_psk,psk:preSharedKey,idP:idProc,is_safe:bool,i:nat,e:element,s:seed,log:bitstring, s_pkey:pubkey;
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,is_safe)) ==> attacker(id) || id = mk_idpsk(s_dom,h,psk);
  attacker(mk_idpsk(s_dom,h,psk)) && attacker(psk) ==>
    event(ServerNewTicket(old_psk,s_pkey,psk)) || event(CompromisedPsk(psk));
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) && attacker(psk);
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,is_safe)) && attacker(psk) ==> is_safe = false;
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,false)) ==> event(CompromisedPsk(psk));
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,is_safe)) ==> psk <> NoPsk && psk <> b2psk(zero);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  attacker(early_secret);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  let binder_key = hmac_ideal(i,b2mk(early_secret),(tls13_ext_res_binder,hash_ideal(i,zero))) in
  attacker(binder_key);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  let extra_es = hmac_ideal(i,b2mk(early_secret),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))) in
  let handshake_secret = hmac_ideal(i,b2mk(extra_es),e2b(e)) in
  attacker(handshake_secret);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  let extra_es = hmac_ideal(i,b2mk(early_secret),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))) in
  let handshake_secret = hmac_ideal(i,b2mk(extra_es),e2b(e)) in

  let client_hts = hmac_ideal(i,b2mk(handshake_secret),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))) in
  let client_wkh = hmac_ideal(i,b2mk(client_hts),(tls13_key,zero)) in
  attacker(client_wkh);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  let extra_es = hmac_ideal(i,b2mk(early_secret),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))) in
  let handshake_secret = hmac_ideal(i,b2mk(extra_es),e2b(e)) in

  let client_hts = hmac_ideal(i,b2mk(handshake_secret),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))) in
  let client_fk = hmac_ideal(i,b2mk(client_hts),(tls13_finished,zero)) in
  attacker(client_fk);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  let extra_es = hmac_ideal(i,b2mk(early_secret),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))) in
  let handshake_secret = hmac_ideal(i,b2mk(extra_es),e2b(e)) in

  let server_hts = hmac_ideal(i,b2mk(handshake_secret),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))) in
  let server_wkh = hmac_ideal(i,b2mk(server_hts),(tls13_key,zero)) in
  attacker(server_wkh);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  let extra_es = hmac_ideal(i,b2mk(early_secret),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))) in
  let handshake_secret = hmac_ideal(i,b2mk(extra_es),e2b(e)) in

  let server_hts = hmac_ideal(i,b2mk(handshake_secret),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))) in
  let server_fk = hmac_ideal(i,b2mk(server_hts),(tls13_finished,zero)) in
  attacker(server_fk)
  [induction,fullSat]
.

(* Security properties *)

(* 1-RTT handshake : secrecy and authentication queries *)

query config:echConfig, id_c,id_s:idProc,cr,cr',sr,sr':bytes32,old_psk,new_psk,psk,psk':preSharedKey,s_pkey,s_pkey',pk_srv,pk_srv':pubkey,cak,cak',sak,sak':aead_key,ems,ems',rms,rms':bitstring,i:nat,j,j':time;
  (* Secrecy *)
  event(ClientFinished(id_c,cr,sr,psk,pk_srv,cak,sak,ems,rms)) && attacker(cak) ==>
    (
      event(CompromisedLtk(pk_srv)) ||
      event(CompromisedPsk(psk))
    ) && (
      event(ClientEchAcceptance(id_c,false)) ||
      (
        event(ClientOffersEchConfig(id_c,config)) &&
        event(CompromisedEchKey(config))
      )
    );

  event(ClientFinished(id_c,cr,sr,psk,pk_srv,cak,sak,ems,rms)) && attacker(psk) ==>
    psk = NoPsk || event(CompromisedPsk(psk));

  (* Authentication *)

  event(ClientFinished(id_c,cr,sr,psk,pk_srv,cak,sak,ems,rms)) &&
  event(ServerFinished(id_s,cr',sr',psk',pk_srv',cak',sak',ems,rms')) ==>
    cr = cr' && sr = sr' && pk_srv = pk_srv';

  event(ClientFinished(id_c,cr,sr,psk,pk_srv,cak,sak,ems,rms)) &&
  event(ServerFinished(id_s,cr',sr',psk',pk_srv',cak',sak',ems',rms)) ==>
    cr = cr' && sr = sr' && pk_srv = pk_srv';

  event(ClientFinished(id_c,cr,sr,psk,pk_srv,cak,sak,ems,rms)) &&
  event(ServerFinished(id_s,cr',sr',psk',pk_srv',cak,sak,ems',rms')) ==>
    cr = cr' && sr = sr' && pk_srv = pk_srv';

  (* Sequentiallity of compromised psk. *)
  event(ServerNewTicket(psk,s_pkey,new_psk))@j && attacker(new_psk) ==>
    event(CompromisedPsk(new_psk)) ||
    event(CompromisedPsk(psk)) ||
    psk = NoPsk ||
    (event(ServerNewTicket(old_psk,s_pkey',psk))@j' && attacker(psk) && j > j');

  (* Downgrade resilient *)
  event(ServerFinished(id_s,cr,sr,psk,pk_srv,cak,sak,ems,rms)) &&
  event(ClientFinished(id_c,cr,sr,psk,pk_srv,cak,sak,ems,rms)) &&
  event(ServerChoosesEchConfig(id_s,config)) &&
  event(ClientOffersEchConfig(id_c,config)) ==>
    (event(ClientEchAcceptance(id_c,true)) && event(ServerEchAcceptance(id_s,true)))
.

query config:echConfig, id_c,id_s:idProc,cr,cr',sr,sr':bytes32,old_psk,new_psk,psk,psk':preSharedKey,s_pkey,s_pkey',pk_srv,pk_srv':pubkey,cak,cak',sak,sak':aead_key,ems,ems',rms,rms':bitstring,i:nat,j,j':time;
  (* Authentication *)
  inj-event(ClientFinished(id_c,cr,sr,psk,pk_srv,cak,sak,ems,rms)) ==>
    inj-event(PreServerFinished(id_s,cr,sr,psk,pk_srv)) ||
    (
      (
        event(CompromisedLtk(pk_srv)) ||
        event(CompromisedPsk(psk))
      ) && (
        event(ClientEchAcceptance(id_c,false)) ||
        (
          event(ClientOffersEchConfig(id_c,config)) &&
          event(CompromisedEchKey(config))
        )
      )
    );

  (* As an honest server can talk with a dishonest client, the ClientFinished
    is triggered only when the server uses an uncompromised PSK or
    request a client certificate. *)
  inj-event(ServerFinished(id_s,cr,sr,psk,pk_srv,cak,sak,ems,rms)) ==>
    inj-event(ClientFinished(id_c,cr,sr,psk,pk_srv,cak,sak,ems,rms)) ||
    event(CompromisedPsk(psk)) ||
    (event(ServerNewTicket(old_psk,s_pkey,psk)) && attacker(psk)) ||
    psk = NoPsk
.


(* Post Handshake Application Data: Secrecy and Authentication *)

restriction idP,idP':idProc,s_dom:domain,cr,cr',sr,sr':bytes32,psk,psk':preSharedKey,pk_srv,pk_srv':pubkey,st,st':stamp,n:nat,ad,ad',msg,msg':bitstring;
  event(ServerSends(idP,cr,sr,psk,pk_srv,st,n,ad,msg)) && event(ServerSends(idP,cr',sr',psk',pk_srv',st',n,ad',msg')) ==> st = st';
  event(ClientSends(idP,cr,sr,psk,pk_srv,st,n,ad,msg)) && event(ClientSends(idP,cr',sr',psk',pk_srv',st',n,ad',msg')) ==> st = st';

  event(ClientSends0(idP,cr,psk,st,n,ad,msg)) && event(ClientSends0(idP,cr,psk,st',n,ad',msg')) ==> st = st';

  event(ServerReceives(idP,cr,sr,psk,pk_srv,st,n,ad,msg)) && event(ServerReceives(idP,cr',sr',psk',pk_srv',st',n,ad',msg')) ==> st = st';
  event(ClientReceives(idP,cr,sr,psk,pk_srv,st,n,ad,msg)) && event(ClientReceives(idP,cr',sr',psk',pk_srv',st',n,ad',msg')) ==> st = st';

  event(ServerReceives0(idP,s_dom,cr,psk,st,n,ad,msg)) && event(ServerReceives0(idP',s_dom,cr',psk,st',n,ad',msg')) ==> st = st'
.

query config:echConfig,id_c,id_s,idP,idP':idProc,s_dom:domain,cr,sr:bytes32,old_psk,psk:preSharedKey,s_pkey,pk_srv:pubkey,cak,sak:aead_key,ems,rms:bitstring,n,i:nat,ad,msg:bitstring,st,st':stamp;
  event(ClientSends(id_c,cr,sr,psk,pk_srv,st,n,ad,msg)) && attacker(msg) ==>
    (
      event(CompromisedLtk(pk_srv)) ||
      event(CompromisedPsk(psk))
    ) && (
      event(ClientEchAcceptance(id_c,false)) ||
      (
        event(ClientOffersEchConfig(id_c,config)) &&
        event(CompromisedEchKey(config))
      )
    );

  (* As an honest server can talk with a dishonest client, the message is not deducible
    the server uses an uncompromised PSK or request a client certificate. *)

  event(ServerSends(idP,cr,sr,psk,pk_srv,st,n,ad,msg)) && attacker(msg) ==>
    event(CompromisedPsk(psk)) ||
    (event(ServerNewTicket(old_psk,s_pkey,psk)) && attacker(psk)) ||
    psk = NoPsk;

  event(ClientReceives(id_c,cr,sr,psk,pk_srv,st,n,ad,msg)) && attacker(msg) ==>
    (
      event(CompromisedLtk(pk_srv)) ||
      event(CompromisedPsk(psk))
    ) && (
      event(ClientEchAcceptance(id_c,false)) ||
      (
        event(ClientOffersEchConfig(id_c,config)) &&
        event(CompromisedEchKey(config))
      )
    );

  event(ClientSends0(id_c,cr,psk,st,n,ad,msg)) && attacker(msg) ==>
    event(CompromisedPsk(psk));

  inj-event(ClientReceives(id_c,cr,sr,psk,pk_srv,st,n,ad,msg)) ==>
    inj-event(ServerSends(id_s,cr,sr,psk,pk_srv,st',n,ad,msg)) ||
    (
      (
        event(CompromisedLtk(pk_srv)) ||
        event(CompromisedPsk(psk))
      ) && (
        event(ClientEchAcceptance(id_c,false)) ||
        (
          event(ClientOffersEchConfig(id_c,config)) &&
          event(CompromisedEchKey(config))
        )
      )
    );

  inj-event(ServerReceives(id_s,cr,sr,psk,pk_srv,st,n,ad,msg)) ==>
    inj-event(ClientSends(id_c,cr,sr,psk,pk_srv,st',n,ad,msg)) ||
    event(CompromisedPsk(psk)) ||
    (event(ServerNewTicket(old_psk,s_pkey,psk)) && attacker(psk)) ||
    psk = NoPsk;

  inj-event(ServerReceives0(id_s,s_dom,cr,psk,st,n,ad,msg)) ==>
    inj-event(ClientSends0(id_c,cr,psk,st',n,ad,msg)) ||
    event(CompromisedPsk(psk)) ||
    (event(ServerNewTicket(old_psk,s_pkey,psk)) && attacker(psk))
.

(* Post Handshake Authentication *)

query id_c,id_s:idProc,config:echConfig, cr,sr:bytes32,psk:preSharedKey,s_pkey,c_pkey:pubkey,cak,sak:aead_key,ems,rms:bitstring,n,i:nat,ad,msg':bitstring,req_rand:bitstring,st,st':stamp;
  inj-event(ClientFinishedPH(id_c,cr,sr,psk,s_pkey,req_rand,c_pkey)) ==>
    inj-event(ServerRequestPH(id_s,cr,sr,psk,s_pkey,req_rand)) ||
    (
      (
        event(CompromisedLtk(s_pkey)) ||
        event(CompromisedPsk(psk))
      ) && (
        event(ClientEchAcceptance(id_c,false)) ||
        (
          event(ClientOffersEchConfig(id_c,config)) &&
          event(CompromisedEchKey(config))
        )
      )
    );

  inj-event(ServerFinishedPH(id_s,cr,sr,psk,s_pkey,req_rand,c_pkey)) ==>
    inj-event(ClientFinishedPH(id_c,cr,sr,psk,s_pkey,req_rand,c_pkey)) ||
    event(CompromisedLtk(c_pkey)) ||
    event(CompromisedPsk(psk))
.

expand macro_ech_client(false,false,run_ech_client).

process
  (
    (* Generates the keys *)
      gen_honest_key
    | gen_dishonest_key
    | all_internal_processes
  ) | (
    (* ECH client *)
    !
    new id_client:idProc;
    (* Domains *)
    in(io,backend_dom:domain) ;
    in(io,frontend_dom:domain) ;
    in(io,c_dom:domain);

    get ech_configurations(ech_config(id,g,pkR,=frontend_dom,h_alg,a_alg),skR) in
    let ech_conf = ech_config(id,g,pkR,frontend_dom,h_alg,a_alg) in

    run_ech_client(id_client,empty_extra_ext,c_dom,backend_dom,ech_conf)
  ) | (
    !
    (* Server *)
    in(io,s_dom:domain) ;
    run_server(s_dom,empty_extra_ext)
  )
