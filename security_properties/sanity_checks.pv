(************************
  Sanity check queries
*************************)

set preciseActions = true.

(* The queries in this file ensures that all valid scenarios are possible.
  We consider a single session of a client and a server with uncompromised
  keys. *)

(* Addtional events used for sanaity checks *)

event ClientUsePsk(bool).
event ClientCompPsk(bool).
event ClientSendKex(bool).
event ClientSendEarlyData(bool).
event ClientSendData(bool).
event ClientUsePHA(bool).

event ServerUseEch(bool).
event ServerUsePsk(bool).
event ServerReqCert(bool).
event ServerAcceptEarlyData(bool).
event ServerSendData(bool).
event ServerUsePHA(bool).
event ServerTicketAllowED(bool).

event HonestPsk(preSharedKey,bool).

(* The queries *)

query cr,sr:bytes32,psk:preSharedKey,s_pkey:pubkey,cak,sak:aead_key,ems,rms:bitstring,msg_ed:bitstring,log:bitstring;
  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(true)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(true)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(true)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(true)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(true)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(true)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(true)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(true)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(false)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(false)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(false)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(false)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(false)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(false)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(false)) && event(ServerUseEch(true));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(false)) && event(ServerUseEch(true));

  (*-------*)

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(true)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(true)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(true)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(true)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(true)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(true)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(true)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(true)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(false)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(false)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(false)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(true)) && event(ServerReqCert(false)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(false)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(true)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(false)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(true)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(false)) && event(ServerUseEch(false));

  event(ServerFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(cr,sr,psk,s_pkey,cak,sak,ems,rms)) &&
  event(ClientUsePsk(false)) && event(ServerUsePsk(false)) &&
  event(ClientSendKex(false)) && event(ServerReqCert(false)) && event(ServerUseEch(false))
.

(* The process *)

free c_dom,s_dom:domain.

let gen_honest_long_term_key_sanity(a:domain) =
  new lgt_id:idProc;
  let sk_h = gen_honest_privkey() in
  let crt = valid_cert(a,pk(sk_h)) in
  insert long_term_keys(a,sk_h,pk(sk_h),crt,lgt_id)
.

let gen_honest_pre_shared_keys_sanity(c_dom:domain,s_dom:domain,h_alg:hash_alg,allows_ed:bool) =
  new psk_id:idProc;
  let psk = gen_honest_psk() in
  event HonestPsk(psk,allows_ed);
  let id = mk_idpsk(s_dom,h_alg,psk,true,allows_ed) in
  insert pre_shared_keys(c_dom,s_dom,h_alg,id,psk,true,allows_ed,psk_id,true)
.

let gen_honest_ech_config_sanity(s_dom:domain,g:group,h_alg:hash_alg,a_alg:aead_alg) =
  new id:configId;
  let (skR:bitstring,pkR:element) = dh_keygen(g) in
  let config = ech_config(id,g,pkR,s_dom,h_alg,a_alg) in
  insert ech_configurations(config,skR)
.

process
  let tls_h = id_hash(StrongHash,1) in
  let tls_a = id_aead(StrongAE,1) in
  let tls_g = id_g(StrongDH,1) in
  let ech_h = id_hash(StrongHash,2) in
  let ech_a = id_aead(StrongAE,2) in
  let ech_g = id_g(StrongDH,2) in

  (* Generates honest key *)

  (
    (* Generates the honest keys *)
      gen_honest_long_term_key_sanity(c_dom)
    | gen_honest_long_term_key_sanity(s_dom)
    | gen_honest_pre_shared_keys_sanity(c_dom,s_dom,tls_h,true)
    | gen_honest_pre_shared_keys_sanity(c_dom,s_dom,tls_h,false)
    | gen_honest_ech_config_sanity(s_dom,ech_g,ech_h,ech_a)
    | main_process
  ) | (
    (* TLS client *)
    new id_client:idProc;
    in(io,use_psk:bool);
    event ClientUsePsk(use_psk);
    (* in(io,comp_psk:bool); *)
    let comp_psk = false in
    event ClientCompPsk(comp_psk);
    in(io,send_kex:bool);
    event ClientSendKex(send_kex);
    (* in(io,send_early_data:bool); *)
    let send_early_data = false in
    event ClientSendEarlyData(send_early_data);
    (* in(io,send_data:bool); *)
    let send_data = false in
    event ClientSendData(send_data);
    (* in(io,use_PHA:bool); *)
    let use_PHA = false in
    event ClientUsePHA(use_PHA);
    standard_client(id_client,
      use_psk,comp_psk,send_kex,send_early_data,send_data,use_PHA,
      c_dom,s_dom,tls_g,tls_h,tls_a
    )
  ) | (
    (* Server *)
    (* in(io,use_ech:bool); *)
    let use_ech = true in
    event ServerUseEch(use_ech);
    in(io,use_psk:bool);
    event ServerUsePsk(use_psk);
    in(io,req_cert:bool);
    event ServerReqCert(req_cert);
    (* in(io,accept_ed:bool); *)
    let accept_ed = false in
    event ServerAcceptEarlyData(accept_ed);
    (* in(io,send_data:bool); *)
    let send_data = false in
    event ServerSendData(send_data);
    (* in(io,use_PHA:bool); *)
    let use_PHA = false in
    event ServerUsePHA(use_PHA);
    (* in(io,tck_ED:bool); *)
    let tck_ED = false in
    event ServerTicketAllowED(tck_ED);
    server(use_ech,use_psk,req_cert,accept_ed,use_PHA,send_data,tck_ED,
      s_dom,
      tls_g,tls_h,tls_a,
      tls_g,tls_h,tls_a,
      empty_extra_ext
    )
  )
