
set removeEventsForLemma = true.
set verboseLemmas = true.

nounif s_dom:domain, h_alg:hash_alg, psk:preSharedKey;
  attacker(mk_idpsk( *s_dom, *h_alg, *psk)) [ignoreAFewTimes]
.

nounif c_dom,s_dom:domain,h:hash_alg,id:identityPsk,x:preSharedKey, idP:idProc,is_safe:bool;
  table(pre_shared_keys( *c_dom, *s_dom, *h, *id, *x, *idP, *is_safe)) [ignoreAFewTimes]
.

lemma c_dom,s_dom:domain,h:hash_alg,id:identityPsk,cr,sr:bytes32,old_psk,psk:preSharedKey,idP:idProc,is_safe:bool,i:nat,e:element,s:seed,log:bitstring, s_pkey:pubkey;
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,is_safe)) ==> attacker(id) || id = mk_idpsk(s_dom,h,psk);
  attacker(mk_idpsk(s_dom,h,psk)) && attacker(psk) ==>
    event(ServerNewTicket(old_psk,s_pkey,psk)) || event(CompromisedPsk(psk));
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) && attacker(psk);
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,is_safe)) && attacker(psk) ==> is_safe = false;
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,false)) ==> event(CompromisedPsk(psk));
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,is_safe)) ==> psk <> NoPsk && psk <> b2psk(zero);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  attacker(early_secret);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  let binder_key = hmac_ideal(i,b2mk(early_secret),(tls13_ext_res_binder,hash_ideal(i,zero))) in
  attacker(binder_key);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  let extra_es = hmac_ideal(i,b2mk(early_secret),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))) in
  let handshake_secret = hmac_ideal(i,b2mk(extra_es),e2b(e)) in
  attacker(handshake_secret);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  let extra_es = hmac_ideal(i,b2mk(early_secret),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))) in
  let handshake_secret = hmac_ideal(i,b2mk(extra_es),e2b(e)) in

  let client_hts = hmac_ideal(i,b2mk(handshake_secret),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))) in
  let client_wkh = hmac_ideal(i,b2mk(client_hts),(tls13_key,zero)) in
  attacker(client_wkh);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  let extra_es = hmac_ideal(i,b2mk(early_secret),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))) in
  let handshake_secret = hmac_ideal(i,b2mk(extra_es),e2b(e)) in

  let client_hts = hmac_ideal(i,b2mk(handshake_secret),(tls13_client_handshake_traffic_secret,hash_ideal(i,log))) in
  let client_fk = hmac_ideal(i,b2mk(client_hts),(tls13_finished,zero)) in
  attacker(client_fk);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  let extra_es = hmac_ideal(i,b2mk(early_secret),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))) in
  let handshake_secret = hmac_ideal(i,b2mk(extra_es),e2b(e)) in

  let server_hts = hmac_ideal(i,b2mk(handshake_secret),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))) in
  let server_wkh = hmac_ideal(i,b2mk(server_hts),(tls13_key,zero)) in
  attacker(server_wkh);
  (* ------ *)
  table(pre_shared_keys(c_dom,s_dom,h,id,psk,idP,true)) &&
  let early_secret = hmac_ideal(i,b2mk(zero),psk2b_pf(psk)) in
  let extra_es = hmac_ideal(i,b2mk(early_secret),(tls13_derived,hash_ideal(i,hash_ideal(i,zero)))) in
  let handshake_secret = hmac_ideal(i,b2mk(extra_es),e2b(e)) in

  let server_hts = hmac_ideal(i,b2mk(handshake_secret),(tls13_server_handshake_traffic_secret,hash_ideal(i,log))) in
  let server_fk = hmac_ideal(i,b2mk(server_hts),(tls13_finished,zero)) in
  attacker(server_fk)
  [induction,fullSat]
.

query attacker(()).

let gen_dishonest_long_term_keys =
  !
  new idP:idProc;
  in(io,a:domain);
  new sk_d:privkey;
  event CompromisedLtk(pk(sk_d));
  let crt = valid_cert(a,pk(sk_d)) in
  insert long_term_keys(a,sk_d,pk(sk_d),crt,idP);
  out(io,(sk_d,crt))
.

let gen_dishonest_pre_shared_keys =
  !
  new idP:idProc;
  in(io,h_alg:hash_alg);
  if is_strong_hash(h_alg) then
  in(io,(c_dom:domain,s_dom:domain));
  if is_strong_hash(h_alg) then
  new psk_d:preSharedKey;
  event CompromisedPsk(psk_d);
  let id = mk_idpsk(s_dom,h_alg,psk_d) in
  insert pre_shared_keys(c_dom,s_dom,h_alg,id,psk_d,idP,false);
  out(io,psk_d)
.

(* Post Handshake Application Data: Secrecy and Authentication *)

restriction idP,idP':idProc,s_dom:domain,cr,cr',sr,sr':bytes32,psk,psk':preSharedKey,pk_srv,pk_srv':pubkey,st,st':stamp,n:nat,ad,ad',msg,msg':bitstring;
  event(ServerSends(idP,cr,sr,psk,pk_srv,st,n,ad,msg)) && event(ServerSends(idP,cr',sr',psk',pk_srv',st',n,ad',msg')) ==> st = st';
  event(ClientSends(idP,cr,sr,psk,pk_srv,st,n,ad,msg)) && event(ClientSends(idP,cr',sr',psk',pk_srv',st',n,ad',msg')) ==> st = st';

  event(ClientSends0(idP,cr,psk,st,n,ad,msg)) && event(ClientSends0(idP,cr,psk,st',n,ad',msg')) ==> st = st';

  event(ServerReceives(idP,cr,sr,psk,pk_srv,st,n,ad,msg)) && event(ServerReceives(idP,cr',sr',psk',pk_srv',st',n,ad',msg')) ==> st = st';
  event(ClientReceives(idP,cr,sr,psk,pk_srv,st,n,ad,msg)) && event(ClientReceives(idP,cr',sr',psk',pk_srv',st',n,ad',msg')) ==> st = st';

  event(ServerReceives0(idP,s_dom,cr,psk,st,n,ad,msg)) && event(ServerReceives0(idP',s_dom,cr',psk,st',n,ad',msg')) ==> st = st'
.

process
  (
    (* Generates the keys *)
      gen_dishonest_long_term_keys
    | gen_dishonest_pre_shared_keys
    | gen_honest_key
    | main_process
  ) | (
    (* TLS client *)
    !
    new id_client:idProc;

    (* Domains *)
    in(io,s_dom:domain) [precise];
    in(io,c_dom:domain) [precise];

    (* Ciphersuite and group *)
    in(io,tls_a:aead_alg) [precise];
    in(io,tls_g:group) [precise];
    in(io,tls_h:hash_alg) [precise];
    if is_strong_aead(tls_a) && is_strong_group(tls_g) && is_strong_hash(tls_h) then

    (* Parameters *)
    in(io,use_psk:bool)[precise];
    in(io,send_kex:bool) [precise];
    in(io,comp_psk:bool) [precise];

    standard_client(id_client,use_psk,comp_psk,send_kex,c_dom,s_dom,tls_g,tls_h,tls_a)
  ) | (
    !
    (* Server *)

    (* Domain *)
    in(io,s_dom:domain)[precise];

    (* Ciphersuite and group *)
    in(io,tls_a:aead_alg) [precise];
    in(io,tls_g:group) [precise];
    in(io,tls_h:hash_alg) [precise];
    if is_strong_aead(tls_a) && is_strong_group(tls_g) && is_strong_hash(tls_h) then

    (* Parameters *)
    let use_ech = false in
    in(io,use_psk:bool) [precise];
    in(io,req_cert:bool) [precise];

    server(use_ech,use_psk,req_cert,
      s_dom,
      tls_g,tls_h,tls_a,
      tls_g,tls_h,tls_a,
      empty_extra_ext
    )
  )
