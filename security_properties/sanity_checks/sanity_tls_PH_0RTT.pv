(************************
  Sanity check queries
*************************)

set preciseActions = true.
set redundancyElim = no.
(* set verboseRules = true. *)

(* The queries in this file ensures that all valid scenarios are possible.
  We consider a single session of a client and a server with uncompromised
  keys. *)

restriction id_s,id_c:idProc,s,s':seed,x,x':bitstring,g:group,gxy:element,psk:preSharedKey,safe:bool;
  (* We enforce that the attacker does not try to interact as we are only interested
    to see that the process executes correctly. *)
  event(Server_DH_client(id_s,dh_pub(g,x))) ==> x = dh_k(s);
  event(Client_DH_server(id_c,dh_encap_fun(g,dh_pub(g,x),gxy))) ==> x = dh_k(s) && gxy = dh_xy(s',x');
  event(Client_PSKChoosen(id_c,psk,safe)) ==> psk = NoPsk || psk = uc_psk(s);
  event(Server_PSKChoosen(id_s,psk)) ==> psk = NoPsk || psk = uc_psk(s)
.

(* Addtional events used for sanaity checks *)

event ClientUsePsk(bool).
event ClientCompPsk(bool).
event ClientSendKex(bool).

event ServerUseEch(bool).
event ServerUsePsk(bool).
event ServerReqCert(bool).

(* The queries *)

query s_som:domain,st,st':stamp,id_s,id_c:idProc,cr,sr:bytes32,psk,new_psk:preSharedKey,c_pkey,c_pkey',s_pkey:pubkey,cak,sak:aead_key,ems,rms:bitstring,msg_ed:bitstring,i:nat,ad:bitstring,rand_req:bitstring;

  (* Early Data *)

  event(ServerFinished(id_s,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(id_c,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ServerUseEch(true)) &&
  event(ClientSends0(id_c,cr,psk,i,ad,msg_ed)) &&
  event(ServerReceives0(id_s,s_dom,cr,psk,i,ad,msg_ed));

  event(ServerFinished(id_s,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(id_c,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ServerUseEch(false)) &&
  event(ClientSends0(id_c,cr,psk,i,ad,msg_ed)) &&
  event(ServerReceives0(id_s,s_dom,cr,psk,i,ad,msg_ed));

  (* Post Handshake Authentication *)

  event(ServerFinished(id_s,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(id_c,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ServerUseEch(true)) &&
  event(ServerRequestPH(id_s,cr,sr,psk,s_pkey,c_pkey,rand_req)) &&
  event(ClientFinishedPH(id_c,cr,sr,psk,s_pkey,c_pkey,rand_req,c_pkey')) &&
  event(ServerFinishedPH(id_s,cr,sr,psk,s_pkey,c_pkey,rand_req,c_pkey'));

  event(ServerFinished(id_s,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(id_c,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ServerUseEch(false)) &&
  event(ServerRequestPH(id_s,cr,sr,psk,s_pkey,c_pkey,rand_req)) &&
  event(ClientFinishedPH(id_c,cr,sr,psk,s_pkey,c_pkey,rand_req,c_pkey')) &&
  event(ServerFinishedPH(id_s,cr,sr,psk,s_pkey,c_pkey,rand_req,c_pkey'));

  (* Post Handshake Application Data*)

  event(ServerFinished(id_s,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(id_c,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ServerUseEch(true)) &&
  event(ClientSends(id_c,cr,sr,psk,s_pkey,c_pkey,i,ad,msg_ed)) &&
  event(ServerReceives(id_s,cr,sr,psk,s_pkey,c_pkey,i,ad,msg_ed));

  event(ServerFinished(id_s,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(id_c,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ServerUseEch(false)) &&
  event(ClientSends(id_c,cr,sr,psk,s_pkey,c_pkey,i,ad,msg_ed)) &&
  event(ServerReceives(id_s,cr,sr,psk,s_pkey,c_pkey,i,ad,msg_ed));

  (* New ticket *)

  event(ServerFinished(id_s,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(id_c,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ServerUseEch(true)) &&
  event(Client_new_PSK(id_c,new_psk)) &&
  event(Server_new_PSK(id_s,new_psk));

  event(ServerFinished(id_s,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ClientFinished(id_c,cr,sr,psk,s_pkey,c_pkey,cak,sak,ems,rms)) &&
  event(ServerUseEch(false)) &&
  event(Client_new_PSK(id_c,new_psk)) &&
  event(Server_new_PSK(id_s,new_psk))
.

(* The process *)

free c_dom,s_dom:domain.

let gen_honest_long_term_key_sanity(a:domain) =
  new lgt_id:idProc;
  let sk_h = gen_honest_privkey() in
  let crt = valid_cert(a,pk(sk_h)) in
  insert long_term_keys(a,sk_h,pk(sk_h),crt,lgt_id);
  out(io,crt)
.

let gen_honest_pre_shared_keys_sanity(c_dom:domain,s_dom:domain,h_alg:hash_alg) =
  new psk_id:idProc;
  let psk = gen_honest_psk() in
  let id = mk_idpsk(s_dom,h_alg,psk) in
  insert pre_shared_keys(c_dom,s_dom,h_alg,id,psk,psk_id,true)
.

let gen_honest_ech_config_sanity(s_dom:domain,g:group,h_alg:hash_alg,a_alg:aead_alg) =
  new id:configId;
  let (skR:bitstring,pkR:element) = dh_keygen(g) in
  let config = ech_config(id,g,pkR,s_dom,h_alg,a_alg) in
  insert ech_configurations(config,skR);
  out(io,config)
.

process
  let tls_h = id_hash(StrongHash,1) in
  let tls_a = id_aead(StrongAE,1) in
  let tls_g = id_g(StrongDH,1) in
  let ech_h = id_hash(StrongHash,2) in
  let ech_a = id_aead(StrongAE,2) in
  let ech_g = id_g(StrongDH,2) in

  (* Generates honest key *)

  (
    (* Generates the honest keys *)
      gen_honest_long_term_key_sanity(c_dom)
    | gen_honest_long_term_key_sanity(s_dom)
    | gen_honest_pre_shared_keys_sanity(c_dom,s_dom,tls_h)
    | gen_honest_ech_config_sanity(s_dom,ech_g,ech_h,ech_a)
    | all_internal_processes
  ) | (
    (* TLS client *)
    new id_client:idProc;
    let use_psk = true in
    let comp_psk = false in
    let send_kex = true in
    standard_client(id_client,
      use_psk,comp_psk,send_kex,
      c_dom,s_dom,tls_g,tls_h,tls_a
    )
  ) | (
    (* Server *)
    new id_server:idProc;
    in(io,use_ech:bool);
    event ServerUseEch(use_ech);
    let use_psk = true in
    let req_cert = false in
    server(id_server,use_ech,use_psk,req_cert,
      s_dom,
      tls_g,tls_h,tls_a,
      tls_g,tls_h,tls_a,
      empty_extra_ext
    )
  )
