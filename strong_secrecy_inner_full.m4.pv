set removeEventsForLemma = true.

event Dishonest(internal_preSharedKey).

lemma c_dom,c_dom',s_dom,s_dom':domain,h_alg',h_alg:hash_alg,id,id':identityPsk,ipsk,ipsk':internal_preSharedKey,s:seed,
  c_dom1,c_dom1',c_dom2,c_dom2',s_dom1,s_dom1',s_dom2,s_dom2',c_dom3,c_dom3',c_dom4,c_dom4',s_dom3,s_dom3',s_dom4,s_dom4':domain,
  h_alg1,h_alg2:hash_alg,id1,id1',id2:identityPsk,ipsk1,ipsk1',ipsk'',ipsk2:internal_preSharedKey,idP,idP',idP1,idP2,idP1':idProc,
  safe,safe',safe1,safe2:bool;
  table(pre_shared_keys(diff[c_dom,c_dom'],diff[s_dom,s_dom'],diff[h_alg,h_alg'],diff[id,id'],diff[ipsk,ipsk'],diff[idP,idP'])) ==>
    h_alg = id_hash(StrongHash,1) &&
    h_alg' = id_hash(StrongHash,1) &&
    id = mk_idpsk(c_dom,s_dom,h_alg,ipsk) &&
    id' = mk_idpsk(c_dom',s_dom',h_alg',ipsk') &&
    c_dom = c_dom' &&
    s_dom = s_dom' &&
    idP = idP';

  (* Same idP implies same ipsk *)
  table(pre_shared_keys(c_dom,s_dom,h_alg,diff[id,id'],diff[ipsk,ipsk'],idP)) &&
  table(pre_shared_keys(c_dom1,s_dom1,h_alg1,diff[id1,id2],diff[ipsk1,ipsk2],idP)) ==>
  c_dom = c_dom1 && s_dom = s_dom1 && h_alg = h_alg1 && id = id1 && id' = id2 && ipsk = ipsk1 && ipsk' = ipsk2;

  (* Same ipsk implies same idP *)
  table(pre_shared_keys(c_dom,s_dom,h_alg,diff[id,id'],diff[ipsk,ipsk'],idP)) &&
  table(pre_shared_keys(c_dom1,s_dom1,h_alg1,diff[id1,id2],diff[ipsk,ipsk2],idP1)) ==>
  idP = idP1;

  table(pre_shared_keys(c_dom,s_dom,h_alg,diff[id,id'],diff[ipsk',ipsk],idP)) &&
  table(pre_shared_keys(c_dom1,s_dom1,h_alg1,diff[id1,id2],diff[ipsk2,ipsk],idP1)) ==>
  idP = idP1;

  (* If same idP and one ipsk deducible then both are deducible *)
  table(pre_shared_keys(c_dom,s_dom,h_alg,diff[id,id'],diff[ipsk,ipsk'],idP)) &&
  attacker(diff[ipsk,ipsk'']) ==>  ipsk' = ipsk'';

  table(pre_shared_keys(c_dom,s_dom,h_alg,diff[id,id'],diff[ipsk,ipsk'],idP)) &&
  attacker(diff[ipsk'',ipsk']) ==>  ipsk = ipsk'';

  table(pre_shared_keys(c_dom,s_dom,h_alg,diff[id,id'],diff[ipsk,ipsk'],idP)) &&
  event(Dishonest(ipsk)) ==>  ipsk = ipsk';

  table(pre_shared_keys(c_dom,s_dom,h_alg,diff[id,id'],diff[ipsk,ipsk'],idP)) &&
  event(Dishonest(ipsk')) ==>  ipsk = ipsk'

  [induction]
.

ifdef(<!DISECH!>,<!dnl
(* Some public free domains *)

free HonestServer:domain.
!>)dnl

(* Dishonest key generation *)

let gen_dishonest_long_term_keys =
  !
  in(io,a:domain);
  event Same(d2b(a));
  new sk_d:privkey;
  out(io,(sk_d,valid_cert(a,pk(sk_d))))
.

let gen_dishonest_pre_shared_keys(h_alg:hash_alg) =
  !
  in(io,(c_dom:domain,s_dom:domain));
  new idP:idProc;
  event Same((c_dom,s_dom));
  new psk_d:internal_preSharedKey;
  let id = mk_idpsk(c_dom,s_dom,h_alg,psk_d) in
  insert pre_shared_keys(c_dom,s_dom,h_alg,id,psk_d,idP);
  out(io,psk_d)
.

ifdef(<!DISECH!>,<!dnl
let gen_dishonest_ech_config(g:group,h_alg:hash_alg,a_alg:aead_alg) =
  !
  in(io,o_dom:domain);
  if o_dom <> HonestServer then
  event Same(d2b(o_dom));
  new id: configId;
  new skR_d:bitstring;
  let pkR_d = dh_pub(g,skR_d) in
  let config = ech_config(id,g,pkR_d,o_dom,h_alg,a_alg) in
  insert ech_configurations(config,skR_d);
  out(io,(config,skR_d))
.
!>)dnl

process
  (* The group and cipher suite between TLS and Ech should be incompatible *)
  let tls_h = id_hash(StrongHash,1) in
  let tls_a = id_aead(StrongAE,1) in
  let tls_g = id_g(StrongDH,1) in
  let ech_h = id_hash(StrongHash,2) in
  let ech_a = id_aead(StrongAE,2) in
  let ech_g = id_g(StrongDH,2) in
  (
      main_process(tls_h,ech_h,tls_a,ech_a,tls_g,ech_g)
    | gen_dishonest_long_term_keys
    | gen_dishonest_pre_shared_keys(tls_h)
ifdef(<!DISECH!>,<!dnl
    | gen_dishonest_ech_config(ech_g,ech_h,ech_a)
!>)dnl
    | (
      !
      new id_client:idProc;
      ifdef(<!DOPSK!>,<!let use_psk = true in!>) ifdef(<!NOPSK!>,<!let use_psk = false in!>) ifdef(<!UPSK!>,<!in(io,use_psk:bool);!>)
      ifdef(<!KEX!>,<!let send_kex = true in!>) ifdef(<!NOKEX!>,<!let send_kex = false in!>) ifdef(<!UKEX!>,<!in(io,send_kex:bool);!>)
      in(io,(c_dom:domain,s_dom:domain));
      event Same((use_psk,send_kex,c_dom,s_dom));
      standard_client(id_client,use_psk,send_kex,c_dom,s_dom,tls_g,tls_h,tls_a,empty_extra_ext)
    ) | (
      !
      in(io,x:extraExt) [precise];
      in(io,x':extraExt) [precise];
      let inner_ext = diff[x,x'] in
      ifdef(<!GREASE!>,<!let use_grease = true in!>) ifdef(<!NOGREASE!>,<!let use_grease = false in!>) ifdef(<!UGREASE!>,<!in(io,use_grease:bool);!>)
      ifdef(<!DOPSK!>,<!let use_psk = true in!>) ifdef(<!NOPSK!>,<!let use_psk = false in!>) ifdef(<!UPSK!>,<!in(io,use_psk:bool);!>)
      ifdef(<!KEX!>,<!let send_kex = true in!>) ifdef(<!NOKEX!>,<!let send_kex = false in!>) ifdef(<!UKEX!>,<!in(io,send_kex:bool);!>)
ifdef(<!DISECH!>,<!dnl
      in(io,(c_dom:domain,backend_dom:domain));
      let cfs_dom = HonestServer in
!>,<!dnl
      in(io,(c_dom:domain,cfs_dom:domain,backend_dom:domain));
!>)dnl
      event Same((use_grease,use_psk,send_kex,c_dom,cfs_dom,backend_dom));
      get ech_configurations(ech_config(id,g,pkR,=cfs_dom,h_alg,a_alg),skR) in
      let ech_conf = ech_config(id,g,pkR,cfs_dom,h_alg,a_alg) in
      echo_client(use_grease,use_psk,send_kex,c_dom,backend_dom,tls_g,tls_h,tls_a,ech_conf,inner_ext,empty_extra_ext)
    ) | (
      !
      ifdef(<!DOPSK!>,<!let use_psk = true in!>) ifdef(<!NOPSK!>,<!let use_psk = false in!>) ifdef(<!UPSK!>,<!in(io,use_psk:bool) [precise];!>)
      ifdef(<!CERT!>,<!let cert_req = true in!>) ifdef(<!NOCERT!>,<!let cert_req = false in!>) ifdef(<!UCERT!>,<!in(io,cert_req:bool) [precise];!>)
      in(io,(use_ech:bool,s_dom:domain)) [precise];
      event Same((use_ech,use_psk,cert_req,s_dom));
      server(use_ech,use_psk,cert_req,s_dom,tls_g,tls_h,tls_a,empty_extra_ext)
ifdef(<!DISECH!>,<!dnl
    ) | (
      !
      ifdef(<!GREASE!>,<!let use_grease = true in!>) ifdef(<!NOGREASE!>,<!let use_grease = false in!>) ifdef(<!UGREASE!>,<!in(io,use_grease:bool);!>)
      ifdef(<!DOPSK!>,<!let use_psk = true in!>) ifdef(<!NOPSK!>,<!let use_psk = false in!>) ifdef(<!UPSK!>,<!in(io,use_psk:bool);!>)
      ifdef(<!KEX!>,<!let send_kex = true in!>) ifdef(<!NOKEX!>,<!let send_kex = false in!>) ifdef(<!UKEX!>,<!in(io,send_kex:bool);!>)
      in(io,(c_dom:domain,cfs_dom:domain,backend_dom:domain));
      event Same((use_grease,use_psk,send_kex,c_dom,cfs_dom,backend_dom));
      get ech_configurations(ech_config(id,g,pkR,=cfs_dom,h_alg,a_alg),skR) in
      let ech_conf = ech_config(id,g,pkR,cfs_dom,h_alg,a_alg) in
      echo_client(use_grease,use_psk,send_kex,c_dom,backend_dom,tls_g,tls_h,tls_a,ech_conf,empty_extra_ext,empty_extra_ext)
!>)dnl
    )
  )

ifdef(<!SCENARIO1!>,<!
ifdef(<!NOHRR!>,<!!>,<!
(* EXPECTPV FILENAME: ./strong_secrecy_inner_full.m4.pv TAG: 1
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO2!>,<!
ifdef(<!NOHRR!>,<!!>,<!
(* EXPECTPV FILENAME: ./strong_secrecy_inner_full.m4.pv TAG: 2
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO3!>,<!
ifdef(<!NOHRR!>,<!!>,<!
(* EXPECTPV FILENAME: ./strong_secrecy_inner_full.m4.pv TAG: 3
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO4!>,<!
ifdef(<!NOHRR!>,<!!>,<!
(* EXPECTPV FILENAME: ./strong_secrecy_inner_full.m4.pv TAG: 4
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO5!>,<!
ifdef(<!NOHRR!>,<!!>,<!
(* EXPECTPV FILENAME: ./strong_secrecy_inner_full.m4.pv TAG: 5
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO6!>,<!
ifdef(<!NOHRR!>,<!!>,<!
(* EXPECTPV FILENAME: ./strong_secrecy_inner_full.m4.pv TAG: 6
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO1!>,<!
ifdef(<!NOHRR!>,<!
(* EXPECTPV FILENAME: ./strong_secrecy_inner_full.m4.pv TAG: 7
RESULT table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_14,s_dom'],choice[h_alg_15,h_alg'_1],choice[id_18,id'],choice[ipsk,ipsk'],choice[idP_6,idP'_2])) ==> h_alg_15 = id_hash(StrongHash,1) && h_alg'_1 = id_hash(StrongHash,1) && id_18 = mk_idpsk(c_dom_8,s_dom_14,h_alg_15,ipsk) && id' = mk_idpsk(c_dom',s_dom',h_alg'_1,ipsk') && c_dom_8 = c_dom' && s_dom_14 = s_dom' && idP_6 = idP'_2 is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && table(pre_shared_keys(c_dom1,s_dom1,h_alg1,choice[id1,id2],choice[ipsk1,ipsk2],idP_6)) ==> c_dom_8 = c_dom1 && s_dom_14 = s_dom1 && h_alg_15 = h_alg1 && id_18 = id1 && id' = id2 && ipsk = ipsk1 && ipsk' = ipsk2 is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && table(pre_shared_keys(c_dom1,s_dom1,h_alg1,choice[id1,id2],choice[ipsk,ipsk2],idP1)) ==> idP_6 = idP1 is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk',ipsk],idP_6)) && table(pre_shared_keys(c_dom1,s_dom1,h_alg1,choice[id1,id2],choice[ipsk2,ipsk],idP1)) ==> idP_6 = idP1 is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && attacker(choice[ipsk,ipsk'']) ==> ipsk' = ipsk'' is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && attacker(choice[ipsk'',ipsk']) ==> ipsk = ipsk'' is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && event(Dishonest(ipsk)) ==> ipsk = ipsk' is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && event(Dishonest(ipsk')) ==> ipsk = ipsk' is true.
RESULT Diff-equivalence is true.
819.593s (user 816.737s + system 2.856s), max rss 2494268K
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO2!>,<!
ifdef(<!NOHRR!>,<!
(* EXPECTPV FILENAME: ./strong_secrecy_inner_full.m4.pv TAG: 8
RESULT table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_14,s_dom'],choice[h_alg_15,h_alg'_1],choice[id_18,id'],choice[ipsk,ipsk'],choice[idP_6,idP'_2])) ==> h_alg_15 = id_hash(StrongHash,1) && h_alg'_1 = id_hash(StrongHash,1) && id_18 = mk_idpsk(c_dom_8,s_dom_14,h_alg_15,ipsk) && id' = mk_idpsk(c_dom',s_dom',h_alg'_1,ipsk') && c_dom_8 = c_dom' && s_dom_14 = s_dom' && idP_6 = idP'_2 is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && table(pre_shared_keys(c_dom1,s_dom1,h_alg1,choice[id1,id2],choice[ipsk1,ipsk2],idP_6)) ==> c_dom_8 = c_dom1 && s_dom_14 = s_dom1 && h_alg_15 = h_alg1 && id_18 = id1 && id' = id2 && ipsk = ipsk1 && ipsk' = ipsk2 is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && table(pre_shared_keys(c_dom1,s_dom1,h_alg1,choice[id1,id2],choice[ipsk,ipsk2],idP1)) ==> idP_6 = idP1 is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk',ipsk],idP_6)) && table(pre_shared_keys(c_dom1,s_dom1,h_alg1,choice[id1,id2],choice[ipsk2,ipsk],idP1)) ==> idP_6 = idP1 is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && attacker(choice[ipsk,ipsk'']) ==> ipsk' = ipsk'' is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && attacker(choice[ipsk'',ipsk']) ==> ipsk = ipsk'' is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && event(Dishonest(ipsk)) ==> ipsk = ipsk' is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && event(Dishonest(ipsk')) ==> ipsk = ipsk' is true.
RESULT Diff-equivalence is true.
525.754s (user 521.306s + system 4.448s), max rss 1495540K
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO3!>,<!
ifdef(<!NOHRR!>,<!
(* EXPECTPV FILENAME: ./strong_secrecy_inner_full.m4.pv TAG: 9
RESULT table(pre_shared_keys(choice[c_dom_8,c_dom'],choice[s_dom_14,s_dom'],choice[h_alg_15,h_alg'_1],choice[id_18,id'],choice[ipsk,ipsk'],choice[idP_6,idP'_2])) ==> h_alg_15 = id_hash(StrongHash,1) && h_alg'_1 = id_hash(StrongHash,1) && id_18 = mk_idpsk(c_dom_8,s_dom_14,h_alg_15,ipsk) && id' = mk_idpsk(c_dom',s_dom',h_alg'_1,ipsk') && c_dom_8 = c_dom' && s_dom_14 = s_dom' && idP_6 = idP'_2 is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && table(pre_shared_keys(c_dom1,s_dom1,h_alg1,choice[id1,id2],choice[ipsk1,ipsk2],idP_6)) ==> c_dom_8 = c_dom1 && s_dom_14 = s_dom1 && h_alg_15 = h_alg1 && id_18 = id1 && id' = id2 && ipsk = ipsk1 && ipsk' = ipsk2 is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && table(pre_shared_keys(c_dom1,s_dom1,h_alg1,choice[id1,id2],choice[ipsk,ipsk2],idP1)) ==> idP_6 = idP1 is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk',ipsk],idP_6)) && table(pre_shared_keys(c_dom1,s_dom1,h_alg1,choice[id1,id2],choice[ipsk2,ipsk],idP1)) ==> idP_6 = idP1 is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && attacker(choice[ipsk,ipsk'']) ==> ipsk' = ipsk'' is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && attacker(choice[ipsk'',ipsk']) ==> ipsk = ipsk'' is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && event(Dishonest(ipsk)) ==> ipsk = ipsk' is true.
RESULT table(pre_shared_keys(c_dom_8,s_dom_14,h_alg_15,choice[id_18,id'],choice[ipsk,ipsk'],idP_6)) && event(Dishonest(ipsk')) ==> ipsk = ipsk' is true.
RESULT Diff-equivalence is true.
741.006s (user 738.042s + system 2.964s), max rss 2699228K
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO4!>,<!
ifdef(<!NOHRR!>,<!
(* EXPECTPV FILENAME: ./strong_secrecy_inner_full.m4.pv TAG: 10
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO5!>,<!
ifdef(<!NOHRR!>,<!
(* EXPECTPV FILENAME: ./strong_secrecy_inner_full.m4.pv TAG: 11
END *)
!>)dnl
!>)dnl
ifdef(<!SCENARIO6!>,<!
ifdef(<!NOHRR!>,<!
(* EXPECTPV FILENAME: ./strong_secrecy_inner_full.m4.pv TAG: 12
END *)
!>)dnl
!>)dnl
